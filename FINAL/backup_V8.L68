00001004 Starting Address
Assembler used: EASy68K Editor/Assembler v5.12.29
Created On: 12/10/2014 10:49:40 PM

00000000                             1  *---------------------------------------------------------------------------*
00000000                             2  * Title      : 68K Disassembler
00000000                             3  * Written by : Team Circle
00000000                             4  * Date       : 12/05/14
00000000                             5  * Description: Scans a section of memory and converts its
00000000                             6  *              contents to a listing of valid assembly 
00000000                             7  *              language instructions
00000000                             8  *---------------------------------------------------------------------------*
00000000                             9  
00000000                            10  *---------------------------------------------------------------------------*
00000000                            11  * System Equates                                                 
00000000                            12  *---------------------------------------------------------------------------*
00000000  =0000000D                 13  CR          EQU     $0D                     * ASCII for Carriage Return
00000000  =0000000A                 14  LF          EQU     $0A                     * ASCII for Line Feed 
00000000  =00007000                 15  STACK       EQU     $7000                   * Initial Stack Pointer                         
00000000                            16              
00000000                            17  *---------------------------------------------------------------------------*
00000000                            18  * Reserved Registers
00000000                            19  *---------------------------------------------------------------------------*  
00000000                            20  * D0 - I/O
00000000                            21  * D1 - Temporary storage of processing data
00000000                            22  * D3 - [PUSH_STACK]
00000000                            23  * D4 - Opcode size (0 - byte; 1- word; 2-long)
00000000                            24  * D5 - Processing data
00000000                            25  * D6 - Loop counter to print 30 lines
00000000                            26  * D7 - Error flag
00000000                            27  * A2 - [STACK POINTER]
00000000                            28  * A5 - Processing address in hex
00000000                            29  
00000000                            30  *---------------------------------------------------------------------------*
00000000                            31  * Start and loop program
00000000                            32  *---------------------------------------------------------------------------*  
00001000                            33              ORG     $1000
00001000  4FF8 7000                 34              LEA     STACK,SP
00001004                            35  START:            
00001004  4EB9 00001028             36              JSR     INTRO                 
0000100A  4EB9 000010D4             37  PROGLP      JSR     START_ADDR
00001010  4EB9 00001126             38              JSR     END_ADDR
00001016  43F9 00004A44             39              LEA     ENDLINE_M,A1           * Add a new line
0000101C  103C 000E                 40              MOVE.B  #14, D0                  * Display A1
00001020  4E4F                      41              TRAP    #15
00001022                            42              
00001022  4EF9 0000134C             43              JMP     MAIN
00001028                            44              
00001028                            45  *---------------------------------------------------------------------------*
00001028                            46  * INTRO: Display the introduction of the program
00001028                            47  *---------------------------------------------------------------------------*
00001028  43F9 00004562             48  INTRO       LEA     WELCOME,A1              * Load PROMPT_START
0000102E  103C 000E                 49              MOVE.B  #14,D0                  * Display A1
00001032  4E4F                      50              TRAP    #15
00001034  4E75                      51              RTS
00001036                            52  TESTING     
00001036                            53  
00001036  E228                      54              LSR.B   D1,D0
00001038  EA08                      55              LSR.B   #5,D0
0000103A                            56             
0000103A  EA48                      57              LSR.W   #5,D0
0000103C  E2D1                      58              LSR.W   (A1)
0000103E  E2DA                      59              LSR.W   (A2)+
00001040  E2E3                      60              LSR.W   -(A3)
00001042  E2F8 1234                 61              LSR.W   $1234
00001046  E2F9 12345678             62              LSR.W   $12345678  
0000104C                            63              
0000104C  E28E                      64              LSR.L   #1,D6
0000104E  E44D                      65              LSR.W   #2,D5
00001050  E60C                      66              LSR.B   #3,D4
00001052                            67              
00001052  E0A8                      68              LSR.L   D0,D0
00001054  E068                      69              LSR.W   D0,D0
00001056  E028                      70              LSR.B   D0,D0
00001058                            71              
00001058  E2A8                      72              LSR.L   D1,D0
0000105A  EA88                      73              LSR.L   #5,D0
0000105C                            74              
0000105C  E220                      75              ASR.B   D1,D0
0000105E  EA00                      76              ASR.B   #5,D0
00001060  EA40                      77              ASR.W   #5,D0
00001062  E0D1                      78              ASR.W   (A1)
00001064  E0DA                      79              ASR.W   (A2)+
00001066  E0E3                      80              ASR.W   -(A3)
00001068  E0F8 1234                 81              ASR.W   $1234
0000106C  E0F9 12345678             82              ASR.W   $12345678  
00001072  E2A0                      83              ASR.L   D1,D0
00001074  EA80                      84              ASR.L   #5,D0
00001076                            85  
00001076  E238                      86              ROR.B   D1,D0
00001078  EA18                      87              ROR.B   #5,D0
0000107A  EA58                      88              ROR.W   #5,D0
0000107C  E6D1                      89              ROR.W   (A1)
0000107E  E6DA                      90              ROR.W   (A2)+
00001080  E6E3                      91              ROR.W   -(A3)
00001082  E6F8 1234                 92              ROR.W   $1234
00001086  E6F9 12345678             93              ROR.W   $12345678  
0000108C  E2B8                      94              ROR.L   D1,D0
0000108E  EA98                      95              ROR.L   #5,D0
00001090                            96              
00001090                            97              
00001090  EA88                      98              LSR.L   #5,D0
00001092  EA48                      99              LSR.W   #5,D0
00001094  EA08                     100              LSR.B   #5,D0
00001096                           101  
00001096                           102  
00001096                           103  **************************************************************************************************************ASR**
00001096  E220                     104              ASR.B   D1,D0
00001098  E460                     105              ASR.W   D2,D0
0000109A  E6A0                     106              ASR.L   D3,D0
0000109C                           107              
0000109C  EA00                     108              ASR.B   #5,D0
0000109E  EA40                     109              ASR.W   #5,D0
000010A0  EA80                     110              ASR.L   #5,D0
000010A2                           111  
000010A2  EA40                     112              ASR.W   #5,D0
000010A4  E0D1                     113              ASR.W   (A1)            
000010A6  E0DA                     114              ASR.W   (A2)+            
000010A8  E0E3                     115              ASR.W   -(A3)           
000010AA  E0F8 1234                116              ASR.W   $1234           
000010AE  E0F9 12345678            117              ASR.W   $12345678       
000010B4                           118  
000010B4                           119  **************************************************************************************************************ASl**
000010B4  E320                     120              ASL.B   D1,D0
000010B6  E560                     121              ASL.W   D2,D0
000010B8  E7A0                     122              ASL.L   D3,D0
000010BA                           123              
000010BA  EB00                     124              ASL.B   #5,D0
000010BC  EB40                     125              ASL.W   #5,D0
000010BE  EB80                     126              ASL.L   #5,D0
000010C0                           127  
000010C0  EB40                     128              ASL.W   #5,D0
000010C2  E1D1                     129              ASL.W   (A1)            
000010C4  E1DA                     130              ASL.W   (A2)+            
000010C6  E1E3                     131              ASL.W   -(A3)           
000010C8  E1F8 1234                132              ASL.W   $1234           
000010CC  E1F9 12345678            133              ASL.W   $12345678    
000010D2                           134             
000010D2  4E75                     135              RTS
000010D4                           136  *---------------------------------------------------------------------------*
000010D4                           137  * START_ADDR: Compute the starting address
000010D4                           138  *---------------------------------------------------------------------------*
000010D4                           139  START_ADDR
000010D4                           140              * Output
000010D4  43F9 00004837            141              LEA     PROMPT_START,A1         * Load PROMPT_START 
000010DA  103C 000E                142              MOVE.B  #14,D0                  * Display PROMPT_START
000010DE  4E4F                     143              TRAP    #15
000010E0                           144      
000010E0                           145              * Input
000010E0  43F9 0000499C            146              LEA     VR_S_ADDR,A1            * Load VR_S_ADDR
000010E6  103C 0002                147              MOVE.B  #2,D0                   * Ask user for input
000010EA  4E4F                     148              TRAP    #15
000010EC                           149              
000010EC                           150              * Error Checking (length)
000010EC  0C01 0000                151              CMPI.B  #0, D1                  * Check if input length <= 0
000010F0  6F00 0098                152              BLE     ERROR_1
000010F4  0C01 0008                153              CMPI.B  #8, D1                  * Check if input length > 8
000010F8  6E00 0090                154              BGT     ERROR_1
000010FC                           155              
000010FC                           156              * Conversion & Storage
000010FC  4EB9 000011DA            157              JSR     ASCII2HEX               * Jump to ASCII2HEX
00001102  0C07 0001                158              CMPI.B  #1, D7                  * Check for error
00001106  6700 0082                159              BEQ     ERROR_1                 
0000110A  23C1 00004A3C            160              MOVE.L  D1, S_ADDR_HX           * Move the result to S_ADDR_HX 
00001110                           161              
00001110                           162              * Error Checking (Odd)
00001110  43F9 00004A3C            163              LEA     S_ADDR_HX, A1           * Load 'S_ADDR_HX' for odd error
00001116  4EB9 00001330            164              JSR     IS_ODD                  * Check if the input address is odd
0000111C  0C07 0001                165              CMPI.B  #1, D7                  * Check for error
00001120  6700 0088                166              BEQ     ERROR_3
00001124                           167              
00001124                           168              * Return
00001124  4E75                     169              RTS     
00001126                           170  *---------------------------------------------------------------------------*
00001126                           171  * END_ADDR: Compute the ending address
00001126                           172  *---------------------------------------------------------------------------*
00001126                           173  END_ADDR
00001126                           174              * Output
00001126  43F9 00004866            175              LEA     PROMPT_END,A1           * Load PROMPT_END
0000112C  103C 000E                176              MOVE.B  #14,D0                  * Display PROMPT_END
00001130  4E4F                     177              TRAP    #15
00001132                           178  
00001132                           179              * Input
00001132  43F9 000049EC            180              LEA     VR_E_ADDR,A1            * Load VR_E_ADDR
00001138  103C 0002                181              MOVE.B  #2,D0                   * Ask user for input
0000113C  4E4F                     182              TRAP    #15
0000113E                           183              
0000113E                           184              * Error Checking (length)
0000113E  0C01 0000                185              CMPI.B  #0, D1                  * Check if input length <= 0
00001142  6F00 0056                186              BLE     ERROR_2
00001146  0C01 0008                187              CMPI.B  #8, D1                  * Check if input length > 8
0000114A  6E00 004E                188              BGT     ERROR_2
0000114E                           189              
0000114E                           190              * Conversion & Storage
0000114E  4EB9 000011DA            191              JSR     ASCII2HEX               * Jump to ASCII2HEX
00001154  0C07 0001                192              CMPI.B  #1, D7                  * Check for error
00001158  6700 0040                193              BEQ     ERROR_2
0000115C  23C1 00004A40            194              MOVE.L  D1, E_ADDR_HX           * Move the result to E_ADDR_HX
00001162                           195              
00001162                           196              * Error Checking (start > end case)
00001162  2439 00004A3C            197              MOVE.L  S_ADDR_HX, D2           * Move the starting address to D2
00001168  B282                     198              CMP.L   D2, D1                  * Compare starting and ending address
0000116A  6300 005E                199              BLS     ERROR_5                 * Go to ERROR_5 if ending < starting
0000116E                           200              
0000116E                           201              * Error Checking (Odd case)
0000116E  43F9 00004A40            202              LEA     E_ADDR_HX, A1           * Move the ending address
00001174  4EB9 00001330            203              JSR     IS_ODD                  * Go to IS_ODD for odd address checking
0000117A  0C07 0001                204              CMPI.B  #1, D7                  * Check for an error flag
0000117E  6700 003A                205              BEQ     ERROR_4
00001182                           206              
00001182                           207              * Inputs are valid
00001182  2A79 00004A3C            208              MOVE.L  S_ADDR_HX, A5           * Store the valid input in A5
00001188                           209              
00001188  4E75                     210              RTS
0000118A                           211              
0000118A                           212  *---------------------------------------------------------------------------*
0000118A                           213  * ERROR_1: Address error (Invalid starting address)
0000118A                           214  *---------------------------------------------------------------------------*
0000118A                           215  ERROR_1
0000118A  43F9 0000492B            216              LEA     ERRMSG_1, A1            * Load ERRMSG_1
00001190  103C 000E                217              MOVE.B  #14, D0                 * Display ERRMSG_1
00001194  4E4F                     218              TRAP    #15
00001196  4EF8 10D4                219              JMP     START_ADDR              * Jump to START_ADDR
0000119A                           220      
0000119A                           221  *---------------------------------------------------------------------------*
0000119A                           222  * ERROR_2: Address error (Invalid ending address)
0000119A                           223  *---------------------------------------------------------------------------*
0000119A                           224  ERROR_2
0000119A  43F9 0000492B            225              LEA     ERRMSG_1, A1            * Load ERRMSG_1
000011A0  103C 000E                226              MOVE.B  #14, D0                 * Display ERRMSG_1
000011A4  4E4F                     227              TRAP    #15
000011A6  4EF8 1126                228              JMP     END_ADDR                * Jump to END_ADDR
000011AA                           229  
000011AA                           230  *---------------------------------------------------------------------------*
000011AA                           231  * ERROR_3: Address error (Odd starting address)
000011AA                           232  *---------------------------------------------------------------------------*
000011AA                           233  ERROR_3
000011AA  43F9 0000494A            234              LEA     ERRMSG_3, A1
000011B0  103C 000E                235              MOVE.B  #14, D0
000011B4  4E4F                     236              TRAP    #15
000011B6  4EF8 10D4                237              JMP     START_ADDR
000011BA                           238     
000011BA                           239  *---------------------------------------------------------------------------*
000011BA                           240  * ERROR_4: Address error (Odd ending address)
000011BA                           241  *---------------------------------------------------------------------------*         
000011BA                           242  ERROR_4
000011BA  43F9 0000494A            243              LEA     ERRMSG_3, A1
000011C0  103C 000E                244              MOVE.B  #14, D0
000011C4  4E4F                     245              TRAP    #15
000011C6  4EF8 1126                246              JMP     END_ADDR
000011CA                           247            
000011CA                           248  *---------------------------------------------------------------------------*
000011CA                           249  * ERROR_3: Address error (Ending address is less than starting address)
000011CA                           250  *---------------------------------------------------------------------------*
000011CA                           251  ERROR_5
000011CA  43F9 0000496F            252              LEA     ERRMSG_5, A1
000011D0  103C 000E                253              MOVE.B  #14, D0
000011D4  4E4F                     254              TRAP    #15
000011D6  4EF8 1126                255              JMP     END_ADDR
000011DA                           256    
000011DA                           257  *---------------------------------------------------------------------------*
000011DA                           258  * ASCII2HEX: Convert ASCii to Hexadecimal
000011DA                           259  * Reserved registers: A1 = Source, D1 = Destination, D2 = Byte, D7 = Error
000011DA                           260  *---------------------------------------------------------------------------*
000011DA  4281                     261  ASCII2HEX   CLR.L   D1                      * Clear the destination 
000011DC  4287                     262              CLR.L   D7                      * Set the error flag to 0
000011DE  4282                     263              CLR.L   D2                      * Clear D2 for temp storage
000011E0                           264              
000011E0  1419                     265  ASC2HXLP    MOVE.B  (A1)+, D2               * Read a byte to D2
000011E2  0C02 0000                266              CMPI.B  #0, D2                  * Check for NULL (indicates the end of source)
000011E6  6700 0058                267              BEQ     RETURN                  * If it's NULL, go to return
000011EA  0C02 0066                268              CMPI.B  #102, D2                * Decimal ASCII value of f is 102
000011EE  6E00 004C                269              BGT     ASC_ERR                 * ASCII > f (invalid input) 
000011F2  0C02 0061                270              CMPI.B  #97, D2                 * Decimal ASCII value of a is 97
000011F6  6C00 0026                271              BGE     ASC_LOW                 * ASCII >= a (valid input)
000011FA  0C02 0046                272              CMPI.B  #70, D2                 * Decimal ASCII value of F is 70
000011FE  6E00 003C                273              BGT     ASC_ERR                 * ASCII > F (invalid input)
00001202  0C02 0041                274              CMPI.B  #65, D2                 * Decimal ASCII value of A is 65
00001206  6C00 001E                275              BGE     ASC_UPP                 * ASCII >= A (valid input)
0000120A  0C02 0039                276              CMPI.B  #57, D2                 * Decimal value of 9 is 57
0000120E  6E00 002C                277              BGT     ASC_ERR                 * ASCII > 9 (invalid input)
00001212  0C02 0030                278              CMPI.B  #48, D2                 * Decimal ASCII value of 0 is 48
00001216  6C00 0016                279              BGE     ASC_NUM                 * ASCII >= 0 (valid input)
0000121A  6000 0020                280              BRA     ASC_ERR                 * Invalid input
0000121E                           281  
0000121E  0442 0057                282  ASC_LOW     SUBI    #87, D2                 * Convert the ASCII input to Hex
00001222  6000 0012                283              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
00001226                           284              
00001226  0442 0037                285  ASC_UPP     SUBI    #55, D2                 * Convert the ASCII input to Hex
0000122A  6000 000A                286              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
0000122E                           287              
0000122E  0442 0030                288  ASC_NUM     SUBI    #48, D2                 * Convert the ASCII input to Hex
00001232  6000 0002                289              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
00001236                           290              
00001236  E981                     291  ASC_SFT     ASL.L   #4, D1                  * Shift the dest to left by 4 bits
00001238  D202                     292              ADD.B   D2, D1                  * Add the converted input to D1
0000123A  60A4                     293              BRA     ASC2HXLP                * Loop
0000123C                           294  
0000123C  1E3C 0001                295  ASC_ERR     MOVE.B  #1, D7                  * Set the error flag to 1            
00001240  4E75                     296  RETURN      RTS     
00001242                           297  
00001242                           298  *---------------------------------------------------------------------------*
00001242                           299  * ASCII2HEX: Convert ASCii to Hexadecimal
00001242                           300  * Reserved registers: A1 = Source, D3 = Destination, D2 = Byte, D7 = Error
00001242                           301  *---------------------------------------------------------------------------*
00001242                           302  ASCII2HEX2STACK
00001242  4283                     303              CLR.L   D3                      * Clear the destination 
00001244  4287                     304              CLR.L   D7                      * Set the error flag to 0
00001246  4282                     305              CLR.L   D2                      * Clear D2 for temp storage
00001248                           306              
00001248                           307  ASC2HXLP2STACK
00001248  1419                     308              MOVE.B  (A1)+, D2               * Read a byte to D2
0000124A  0C02 0000                309              CMPI.B  #0, D2                  * Check for NULL (indicates the end of source)
0000124E  6700 0058                310              BEQ     RETURN2STACK                  * If it's NULL, go to return
00001252  0C02 0066                311              CMPI.B  #102, D2                * Decimal ASCII value of f is 102
00001256  6E00 004C                312              BGT     ASC_ERR2STACK                 * ASCII > f (invalid input) 
0000125A  0C02 0061                313              CMPI.B  #97, D2                 * Decimal ASCII value of a is 97
0000125E  6C00 0026                314              BGE     ASC_LOW2STACK                 * ASCII >= a (valid input)
00001262  0C02 0046                315              CMPI.B  #70, D2                 * Decimal ASCII value of F is 70
00001266  6E00 003C                316              BGT     ASC_ERR2STACK                 * ASCII > F (invalid input)
0000126A  0C02 0041                317              CMPI.B  #65, D2                 * Decimal ASCII value of A is 65
0000126E  6C00 001E                318              BGE     ASC_UPP2STACK                 * ASCII >= A (valid input)
00001272  0C02 0039                319              CMPI.B  #57, D2                 * Decimal value of 9 is 57
00001276  6E00 002C                320              BGT     ASC_ERR2STACK                 * ASCII > 9 (invalid input)
0000127A  0C02 0030                321              CMPI.B  #48, D2                 * Decimal ASCII value of 0 is 48
0000127E  6C00 0016                322              BGE     ASC_NUM2STACK                 * ASCII >= 0 (valid input)
00001282  6000 0020                323              BRA     ASC_ERR2STACK                 * Invalid input
00001286                           324  
00001286                           325  ASC_LOW2STACK
00001286  0442 0057                326              SUBI    #87, D2                 * Convert the ASCII input to Hex
0000128A  6000 0012                327              BRA     ASC_SFT2STACK                 * Go to ASC_SFT to shift the bits
0000128E                           328              
0000128E                           329  ASC_UPP2STACK
0000128E  0442 0037                330              SUBI    #55, D2                 * Convert the ASCII input to Hex
00001292  6000 000A                331              BRA     ASC_SFT2STACK                 * Go to ASC_SFT to shift the bits
00001296                           332              
00001296                           333  ASC_NUM2STACK
00001296  0442 0030                334              SUBI    #48, D2                 * Convert the ASCII input to Hex
0000129A  6000 0002                335              BRA     ASC_SFT2STACK                * Go to ASC_SFT to shift the bits
0000129E                           336              
0000129E                           337  ASC_SFT2STACK
0000129E  E983                     338              ASL.L   #4, D3                  * Shift the dest to left by 4 bits
000012A0  D602                     339              ADD.B   D2, D3                  * Add the converted input to D1
000012A2  60A4                     340              BRA     ASC2HXLP2STACK                * Loop
000012A4                           341  
000012A4                           342  ASC_ERR2STACK
000012A4  1E3C 0001                343              MOVE.B  #1, D7                  * Set the error flag to 1            
000012A8                           344  RETURN2STACK
000012A8  4E75                     345              RTS  
000012AA                           346  *---------------------------------------------------------------------------*
000012AA                           347  * HEX2ASCII: Convert Hexadecimal to ASCii 
000012AA                           348  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
000012AA                           349  *---------------------------------------------------------------------------*
000012AA  0C02 0008                350  HEX2ASCII   CMPI.B  #8, D2                  * Check to see if the size is long
000012AE  6700 000E                351              BEQ     HEX_LOOP
000012B2  4841                     352              SWAP    D1
000012B4  0C02 0002                353              CMPI.B  #2,D2
000012B8  6600 0004                354              BNE     HEX_LOOP
000012BC  E189                     355              LSL.L   #8,D1
000012BE                           356             
000012BE  E999                     357  HEX_LOOP    ROL.L   #4, D1                  * Roll D1 to left
000012C0  2601                     358              MOVE.L  D1, D3                  * Move D1 to D3
000012C2  0283 0000000F            359              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
000012C8  0C03 0009                360              CMPI.B  #9, D3                  * Compare te digit
000012CC  6E00 000A                361              BGT     HEX_CHAR              
000012D0  0603 0030                362              ADDI.B  #48,D3                  * Add 48 for numerical output
000012D4  6000 0006                363              BRA     HEX_CONT
000012D8                           364              
000012D8  0603 0037                365  HEX_CHAR    ADDI.B  #55,D3                  * Add 55 for character output
000012DC                           366  
000012DC  12C3                     367  HEX_CONT    MOVE.B  D3, (A1)+               * Place into A1
000012DE  5342                     368              SUBI    #1, D2                  * Decrement the size
000012E0  0C02 0000                369              CMPI.B  #0, D2                  * Check if D2 is 0
000012E4  66D8                     370              BNE     HEX_LOOP                * Loop
000012E6  12BC 0000                371              MOVE.B  #$0,(A1)                * Null terminator
000012EA  4E75                     372              RTS
000012EC                           373  *---------------------------------------------------------------------------*
000012EC                           374  * HEX2ASCII2STACK: Convert Hexadecimal to ASCii 
000012EC                           375  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte, PUSHES FROM D3 INTO STACK
000012EC                           376  *---------------------------------------------------------------------------*
000012EC                           377  HEX2ASCII2STACK
000012EC  0C02 0008                378              CMPI.B  #8, D2                  * Check to see if the size is long
000012F0  6700 000E                379              BEQ     STACK_HEX_LOOP
000012F4  4841                     380              SWAP    D1
000012F6  0C02 0002                381              CMPI.B  #2,D2
000012FA  6600 0004                382              BNE     STACK_HEX_LOOP
000012FE  E189                     383              LSL.L   #8,D1
00001300                           384             
00001300                           385  STACK_HEX_LOOP    
00001300  E999                     386              ROL.L   #4, D1                  * Roll D1 to left
00001302  2601                     387              MOVE.L  D1, D3                  * Move D1 to D3
00001304  0283 0000000F            388              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
0000130A  0C03 0009                389              CMPI.B  #9, D3                  * Compare te digit
0000130E  6E00 000A                390              BGT     STACK_HEX_CHAR              
00001312  0603 0030                391              ADDI.B  #48,D3                  * Add 48 for numerical output
00001316  6000 0006                392              BRA     STACK_HEX_CONT
0000131A                           393              
0000131A                           394  STACK_HEX_CHAR    
0000131A  0603 0037                395              ADDI.B  #55,D3                  * Add 55 for character output
0000131E                           396  
0000131E                           397  STACK_HEX_CONT    
0000131E  6100 314E                398              BSR     PUSH_STACK              *PLACE INTO STACK
00001322  5342                     399              SUBI    #1, D2                  * Decrement the size
00001324  0C02 0000                400              CMPI.B  #0, D2                  * Check if D2 is 0
00001328  66D6                     401              BNE     STACK_HEX_LOOP                * Loop
0000132A  12BC 0000                402              MOVE.B  #$0,(A1)                * Null terminator
0000132E  4E75                     403              RTS
00001330                           404  
00001330                           405  
00001330                           406  *---------------------------------------------------------------------------*
00001330                           407  * IS_ODD: Check whether the source address is odd
00001330                           408  * Reserved registers: A1 = Source, D1 = Result, D7 = error flag
00001330                           409  *---------------------------------------------------------------------------*
00001330  4281                     410  IS_ODD      CLR.L   D1                      * Clear the result
00001332  4287                     411              CLR.L   D7                      * Set the error flag to 0
00001334  2211                     412              MOVE.L  (A1),D1                * Temp store the checking address to D1
00001336  82FC 0002                413              DIVU    #2, D1                  * Divide the result by 2
0000133A  4841                     414              SWAP    D1                      * Swap remainder with quotient
0000133C  0C01 0001                415              CMPI.B  #1, D1                  * Check for error
00001340  6700 0004                416              BEQ     IS_ODD_ERR
00001344  4E75                     417              RTS
00001346                           418              
00001346  1E3C 0001                419  IS_ODD_ERR  MOVE.B  #1, D7
0000134A  4E75                     420              RTS
0000134C                           421  
0000134C                           422  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*
0000134C                           423  * MAINDEBUG                    
0000134C                           424  * A2: STACK POINTER                                                      MAIN                                                                        MAIN
0000134C                           425  * A5: Processing address
0000134C                           426  *
0000134C                           427  * D3: USED FOR PUSHING INTO STACK
0000134C                           428  *     To push into stack => MOVE.W #DATA,D3 
0000134C                           429  *                           BSR    PUSH_STACK
0000134C                           430  *     To print stack     => BSR    PRINT_STACK 
0000134C                           431  *     To clear stack     => BSR    CLEAR_STACK
0000134C                           432  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*  
0000134C                           433  MAIN        
0000134C                           434              *initialize stack pointer
0000134C  33FC 0000 00004DF4       435              MOVE.W  #0,COUNTER
00001354  347C 7000                436              MOVEA.W #STACK,A2
00001358  163C 0020                437              MOVE.B  #' ',D3
0000135C  6100 3110                438              BSR     PUSH_STACK
00001360  6100 310C                439              BSR     PUSH_STACK
00001364  6100 3108                440              BSR     PUSH_STACK
00001368                           441              
00001368                           442              * clear registers for temp storage
00001368  4280                     443              CLR.L   D0                   
0000136A  4281                     444              CLR.L   D1                   
0000136C  227C 00000000            445              MOVEA.L #0, A1                
00001372                           446              
00001372  220D                     447              MOVE.L  A5,D1                   * check to see if the address is fully read
00001374  23CD 00004A3C            448              MOVE.L  A5,S_ADDR_HX
0000137A  B2B9 00004A40            449              CMP.L   E_ADDR_HX,D1
00001380  6C00 280C                450              BGE     REPEAT                  * go to repeat for user action
00001384                           451  
00001384  43F9 00004A97            452              LEA     TMPOUTPUT,A1            * allocate storage to hold output
0000138A  143C 0008                453              MOVE.B  #8,D2                   * set the output size
0000138E  4EB8 12AA                454              JSR     HEX2ASCII               
00001392  43F9 00004A97            455              LEA     TMPOUTPUT,A1
00001398  103C 000E                456              MOVE.B  #14,D0
0000139C  4E4F                     457              TRAP    #15
0000139E                           458              
0000139E  4285                     459              CLR.L    D5                      * clear the processing data
000013A0  3A1D                     460              MOVE.W  (A5)+,D5                 * copy the currently processing data in A5 over to D5
000013A2                           461                                               * advance the current instruction pointer to the next
000013A2                           462                                               * instruction in memory
000013A2                           463  *----------------------------------------*
000013A2                           464  * Registers          
000013A2                           465  * [D1] - COPY OF D5
000013A2                           466  * [D5] - DATA TO BE PROCESSED
000013A2                           467  * [D6] - COUNTER FOR LINES PROCESSED
000013A2                           468  *
000013A2                           469  * [D4]      - ERROR FLAG BEFORE PRINTING
000013A2                           470  * [STACK]   - PRINTS PROCESS DATA
000013A2                           471  * [COUNTER] - KEEPS TRACK OF STACK INCREMENT
000013A2                           472  *
000013A2                           473  * [A1] - USED FOR JUMPING/PRINTING
000013A2                           474  *
000013A2                           475  *----------------------------------------*
000013A2                           476  
000013A2                           477              
000013A2                           478              *Processing the first 4 most significant bits 
000013A2  2205                     479              MOVE.L  D5,D1                    * copy the current processing data to D1
000013A4  143C 000C                480              MOVE.B  #12,D2                   * shift to right by 12 bits
000013A8  E469                     481              LSR.W   D2,D1                    * [D2] Temporarily used D2 for shifting bits
000013AA  C2FC 0006                482              MULU    #6,D1                    * form offset
000013AE  43F9 0000141E            483              LEA     JMPTABLE,A1              * index into table
000013B4  4EB1 1000                484              JSR     0(A1,D1)                 * jump indirect with index
000013B8                           485              
000013B8                           486              *SECURED EA*
000013B8  B83C 0001                487              CMP.B   #1,D4                    * ERROR FLAG CHECK [ERROR WHEN D4 == 1]
000013BC  6600 0012                488              BNE     OUTPUT_PROCESSED_DATA    * PRINTS PROCESSED OP-CODE & EA
000013C0  6100 041C                489              BSR     OP_DATA                  * PRINT ERROR MESSAGE "DATA"
000013C4  6100 3114                490              BSR     CLEAR_STACK              * CLEARS THE STACK 
000013C8  183C 0000                491              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
000013CC  6000 0022                492              BRA     DISPLAY_30_LINES         * GO TO LAST STEP
000013D0                           493             
000013D0                           494  OUTPUT_PROCESSED_DATA       
000013D0  163C 000D                495              MOVE.B  #$D,D3                  *carriage return
000013D4  6100 3098                496              BSR     PUSH_STACK
000013D8  163C 000A                497              MOVE.B  #$A,D3                  *new line feed
000013DC  6100 3090                498              BSR     PUSH_STACK
000013E0  163C 0000                499              MOVE.B  #$0,D3                  *null
000013E4  6100 3088                500              BSR     PUSH_STACK
000013E8                           501       
000013E8  6100 3060                502              BSR     PRINT_QUEUE
000013EC  183C 0000                503              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
000013F0                           504  DISPLAY_30_LINES
000013F0                           505              * display 30 lines per page
000013F0  5287                     506              ADDI.L  #1,D7
000013F2  0C87 00000019            507              CMPI.L  #25,D7
000013F8  6C00 0006                508              BGE     NEXTLINES
000013FC  6000 FF4E                509              BRA     MAIN
00001400                           510            
00001400                           511  *---------------------------------------------------------------------------*
00001400                           512  * NEXTLINES: receive input from user to print the next 30 lines
00001400                           513  *---------------------------------------------------------------------------*  
00001400  4287                     514  NEXTLINES   CLR.L   D7
00001402  43F9 00004893            515              LEA     DISP_NEXT,A1
00001408  103C 000E                516              MOVE.B  #14,D0
0000140C  4E4F                     517              TRAP    #15
0000140E  43F9 00004A47            518              LEA     TMPINPUT,A1
00001414  103C 0002                519              MOVE.B  #2,D0
00001418  4E4F                     520              TRAP    #15
0000141A  4EF8 134C                521              JMP     MAIN
0000141E                           522    
0000141E                           523  *---------------------------------------------------------------------------*
0000141E                           524  * JMPTABLE: OP code jump/branch table used to decode and display opcodes
0000141E                           525  *---------------------------------------------------------------------------*  
0000141E  4EF9 0000147E            526  JMPTABLE    JMP     OP0000  * CMPI/ORI/BTST/EORI/SUBI                       *FINISHED - 
00001424  4EF9 000019FA            527              JMP     OP0001  * MOVE.B                                        *FINISHED - 
0000142A  4EF9 00001A68            528              JMP     OP0010  * MOVE.L/MOVEA.L                                *FINISHED - 
00001430  4EF9 00001B66            529              JMP     OP0011  * MOVE.W/MOVEA.W                                *FINISHED - 
00001436  4EF9 00001C62            530              JMP     OP0100  * MOVEM/LEA/NEG/NOT/JSR/RTS                     *FINISHED - need to do movem
0000143C  4EF9 00001EB8            531              JMP     OP0101  * ADDQ                                          *FINISHED - 
00001442  4EF9 0000205C            532              JMP     OP0110  * BRA/Bcc (BEQ/BNE/BLT/BHI)                     *FINISHED - 
00001448  4EF9 00002162            533              JMP     OP0111  * MOVEQ (unassigned)                            *FINISHED - 
0000144E  4EF9 00002166            534              JMP     OP1000  * DIVS                                          *FINISHED - 
00001454  4EF9 0000226E            535              JMP     OP1001  * SUB/SUBA                                      *FINISHED - 
0000145A  4EF9 0000262A            536              JMP     OP1010  * Unassigned                                    *FINISHED - 
00001460  4EF9 0000262E            537              JMP     OP1011  * CMP/EOR/CMPA                                  *FINISHED - 
00001466  4EF9 0000292E            538              JMP     OP1100  * MULS/AND                                      *FINISHED - 
0000146C  4EF9 00002C80            539              JMP     OP1101  * ADD/ADDA                                      *FINISHED - 
00001472  4EF9 0000305C            540              JMP     OP1110  * LSR/LSL/ASR/ASL/ROL/ROR                       *FINISHED - 
00001478  4EF9 0000371C            541              JMP     OP1111  * Special/Reserved
0000147E                           542              
0000147E                           543  *---------------------------------------------------------------------------*
0000147E                           544  * OP0000: decode CMPI/ORI/BTST/SUBI/EORI
0000147E                           545  *---------------------------------------------------------------------------*           
0000147E                           546  OP0000                                                                                  
0000147E  4281                     547              CLR.L   D1          * to temporarily store the address to process
00001480  4280                     548              CLR.L   D0  
00001482  4284                     549              CLR.L   D4                 
00001484  227C 00000000            550              MOVEA.L #0, A1                
0000148A                           551              * Check for ORI (0000 0000 xx (size) xxx (EA mode) xxx(EA reg)
0000148A                           552              * Check if bit 11,10,9,8 are 0000)
0000148A  2205                     553              MOVE.L  D5,D1
0000148C  0281 00000F00            554              ANDI.L  #$0F00,D1
00001492  0C81 00000000            555              CMPI.L  #$0000,D1   * if they are 0000, it is ORI
00001498  6700 047C                556              BEQ     OP_ORI
0000149C                           557  
0000149C                           558              * check for CMPI (0000 1100 xx (size) xxx (EA mode) xxx (EA reg)
0000149C                           559              * check if bit 11,10,9,8 are 1100
0000149C  4281                     560              CLR.L   D1
0000149E  2205                     561              MOVE.L  D5,D1
000014A0  0281 00000F00            562              ANDI.L  #$0F00,D1
000014A6  0C81 00000C00            563              CMPI.L  #$0C00,D1
000014AC  6700 037C                564              BEQ     OP0000_CMPI
000014B0                           565              
000014B0                           566              * check for SUBI
000014B0  4281                     567              CLR.L   D1
000014B2  2205                     568              MOVE.L  D5,D1
000014B4  0281 00000F00            569              ANDI.L  #$0F00,D1
000014BA  0C81 00000400            570              CMPI.L  #$0400,D1
000014C0  6700 023A                571              BEQ     OP_SUBI
000014C4                           572              
000014C4                           573              * check for EORI
000014C4  4281                     574              CLR.L   D1
000014C6  2205                     575              MOVE.L  D5,D1
000014C8  0281 00000F00            576              ANDI.L  #$0F00,D1
000014CE  0C81 00000A00            577              CMPI.L  #$0A00,D1
000014D4  6700 0144                578              BEQ     OP_EORI
000014D8                           579              
000014D8                           580              * check for BTST
000014D8  4281                     581              CLR.L   D1
000014DA  2205                     582              MOVE.L  D5,D1
000014DC  E099                     583              ROR.L   #8,D1
000014DE  0281 00000001            584              ANDI.L  #$1,D1
000014E4  0C01 0001                585              CMPI.B  #$1,D1
000014E8  6700 001E                586              BEQ     OP_BTST
000014EC  4281                     587              CLR.L   D1
000014EE  2205                     588              MOVE.L  D5,D1
000014F0  EC99                     589              ROR.L   #6,D1
000014F2  0281 000003FF            590              ANDI.L  #$03FF,D1
000014F8  0C81 00000020            591              CMPI.L  #%000100000,D1
000014FE  6700 0008                592              BEQ     OP_BTST
00001502                           593  
00001502                           594  
00001502                           595              * OP0000 series other than ORI/CMPI/BTST/EORI
00001502  4EF9 000017DE            596              JMP     OP_DATA
00001508                           597              
00001508                           598  *---------------------------------------------------------------------------*
00001508                           599  * OP_BTST: display BTST
00001508                           600  *---------------------------------------------------------------------------* 
00001508                           601  OP_BTST       
00001508                           602              *FIGURE OUT IF it is : Dn,<ea> or #<data>,<ea>
00001508                           603              *bits #8 indicates which
00001508                           604              *0 - #immediate format
00001508                           605              *1 - Dn format
00001508  4281                     606              CLR.L   D1
0000150A  2205                     607              MOVE.L  D5,D1
0000150C  E099                     608              ROR.L   #8,D1
0000150E  0281 00000001            609              ANDI.L  #1,D1
00001514  0C01 0001                610              CMPI.B  #1,D1
00001518  6600 0078                611              BNE     OP_BTST_IMMEDIATE
0000151C                           612  
0000151C                           613             
0000151C                           614             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000151C  13FC 0000 00004DF8       615             MOVE.B   #$00,DEST_REGISTER_FORMAT
00001524  13FC 0002 00004DF9       616             MOVE.B   #$02,SRC_REGISTER_FORMAT
0000152C                           617             
0000152C                           618             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000152C  13FC 00B9 00004DFB       619             MOVE.B   #$B9,GET_DST_START_END
00001534  13FC 0020 00004DFC       620             MOVE.B   #$20,GET_SRC_START_END
0000153C                           621             
0000153C  0285 0000FE3F            622             ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001542  0685 00000000            623             ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
00001548                           624              
00001548                           625              *CLEAR D3
00001548  4283                     626              CLR.L   D3
0000154A                           627              *LOAD STACK WITH THIS OPMODE
0000154A  6100 2F22                628              BSR     PUSH_STACK
0000154E  163C 0042                629              MOVE.B  #'B',D3
00001552  6100 2F1A                630              BSR     PUSH_STACK
00001556  163C 0054                631              MOVE.B  #'T',D3
0000155A  6100 2F12                632              BSR     PUSH_STACK
0000155E  163C 0053                633              MOVE.B  #'S',D3
00001562  6100 2F0A                634              BSR     PUSH_STACK
00001566  163C 0054                635              MOVE.B  #'T',D3
0000156A  6100 2F02                636              BSR     PUSH_STACK
0000156E  163C 002E                637              MOVE.B  #'.',D3
00001572  6100 2EFA                638              BSR     PUSH_STACK
00001576  163C 0042                639              MOVE.B  #'B',D3
0000157A  6100 2EF2                640              BSR     PUSH_STACK
0000157E                           641              
0000157E  6100 2A80                642              BSR     GET_EA_EA_DEST
00001582  163C 002C                643              MOVE.B  #',',D3
00001586  6100 2EE6                644              BSR     PUSH_STACK
0000158A  6100 2644                645              BSR     GET_EA_EA_SRC
0000158E                           646              
0000158E  6000 0088                647              BRA     OP0000_RETURN_BTST
00001592                           648              
00001592                           649              
00001592                           650              *MOVE **** OR **** CMPI
00001592                           651              
00001592                           652  OP_BTST_IMMEDIATE              
00001592                           653   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001592  13FC 0000 00004DF8       654             MOVE.B   #$00,DEST_REGISTER_FORMAT
0000159A  13FC 0082 00004DF9       655             MOVE.B   #$82,SRC_REGISTER_FORMAT
000015A2                           656             
000015A2                           657             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000015A2  13FC 00B9 00004DFB       658             MOVE.B   #$B9,GET_DST_START_END
000015AA  13FC 0020 00004DFC       659             MOVE.B   #$20,GET_SRC_START_END
000015B2                           660             
000015B2                           661              *CLEAR D3
000015B2  4283                     662              CLR.L   D3
000015B4                           663              *LOAD STACK WITH THIS OPMODE
000015B4  6100 2EB8                664              BSR     PUSH_STACK
000015B8  163C 0042                665              MOVE.B  #'B',D3
000015BC  6100 2EB0                666              BSR     PUSH_STACK
000015C0  163C 0054                667              MOVE.B  #'T',D3
000015C4  6100 2EA8                668              BSR     PUSH_STACK
000015C8  163C 0053                669              MOVE.B  #'S',D3
000015CC  6100 2EA0                670              BSR     PUSH_STACK
000015D0  163C 0054                671              MOVE.B  #'T',D3
000015D4  6100 2E98                672              BSR     PUSH_STACK
000015D8  163C 002E                673              MOVE.B  #'.',D3
000015DC  6100 2E90                674              BSR     PUSH_STACK
000015E0  163C 0042                675              MOVE.B  #'B',D3
000015E4  6100 2E88                676              BSR     PUSH_STACK
000015E8                           677  
000015E8                           678  OP0000_BTST_B
000015E8                           679              *GET DATA FROM ADDQ AND PRINT #0-8
000015E8                           680              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000015E8  0285 0000F03F            681              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000015EE  0685 000001C0            682              ADDI.L  #$01C0,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
000015F4                           683  
000015F4                           684              *GRAB #IMMEDIATE DATA AS WORD SIZE
000015F4                           685             * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
000015F4                           686             * MOVE.W    (A5)+,D1
000015F4                           687             * MOVE.B  #' ',D3
000015F4                           688             * BSR     PUSH_STACK
000015F4                           689             * MOVE.B  #'#',D3
000015F4                           690             * BSR     PUSH_STACK
000015F4                           691             * BSR     HEX2ASCII2STACK
000015F4                           692             * BSR     PUSH_STACK
000015F4                           693              
000015F4  163C 0020                694              MOVE.B  #' ',D3
000015F8  6100 2E74                695              BSR     PUSH_STACK
000015FC  163C 0023                696              MOVE.B  #'#',D3
00001600  6100 2E6C                697              BSR     PUSH_STACK
00001604  6100 29FA                698              BSR     GET_EA_EA_DEST
00001608  163C 002C                699              MOVE.B  #',',D3
0000160C  6100 2E60                700              BSR     PUSH_STACK
00001610  6100 25BE                701              BSR     GET_EA_EA_SRC
00001614  6000 0002                702              BRA     OP0000_RETURN_BTST
00001618                           703  OP0000_RETURN_BTST
00001618                           704              
00001618  4E75                     705              RTS
0000161A                           706  
0000161A                           707  
0000161A                           708  *---------------------------------------------------------------------------*
0000161A                           709  * OP_EORI: decode and display EORI
0000161A                           710  *---------------------------------------------------------------------------* 
0000161A                           711  OP_EORI
0000161A                           712                         
0000161A                           713  
0000161A                           714   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000161A  13FC 0000 00004DF8       715             MOVE.B   #$00,DEST_REGISTER_FORMAT
00001622  13FC 0080 00004DF9       716             MOVE.B   #$80,SRC_REGISTER_FORMAT
0000162A                           717             
0000162A                           718             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000162A  13FC 00B9 00004DFB       719             MOVE.B   #$B9,GET_DST_START_END
00001632  13FC 0020 00004DFC       720             MOVE.B   #$20,GET_SRC_START_END
0000163A                           721             
0000163A                           722              *CLEAR D3
0000163A  4283                     723              CLR.L   D3
0000163C                           724              *LOAD STACK WITH THIS OPMODE
0000163C  6100 2E30                725              BSR     PUSH_STACK
00001640  163C 0045                726              MOVE.B  #'E',D3
00001644  6100 2E28                727              BSR     PUSH_STACK
00001648  163C 004F                728              MOVE.B  #'O',D3
0000164C  6100 2E20                729              BSR     PUSH_STACK
00001650  163C 0052                730              MOVE.B  #'R',D3
00001654  6100 2E18                731              BSR     PUSH_STACK
00001658  163C 0049                732              MOVE.B  #'I',D3
0000165C  6100 2E10                733              BSR     PUSH_STACK
00001660  163C 002E                734              MOVE.B  #'.',D3
00001664  6100 2E08                735              BSR     PUSH_STACK
00001668                           736              
00001668                           737              *FIGURE OUT SIZE*
00001668                           738              *00 = BYTE
00001668                           739              *01 = WORD
00001668                           740              *10 = LONG
00001668                           741              * BITS 7&6
00001668                           742              
00001668                           743              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
00001668  2205                     744              MOVE.L  D5,D1
0000166A  EC99                     745              ROR.L   #6,D1
0000166C  0281 00000003            746              ANDI.L  #$03,D1
00001672  0C01 0000                747              CMPI.B  #%00,D1
00001676  6700 001E                748              BEQ     OP0000_EOR_B
0000167A  0281 00000003            749              ANDI.L  #$03,D1
00001680  0C01 0001                750              CMPI.B  #%01,D1
00001684  6700 0028                751              BEQ     OP0000_EOR_W
00001688  0281 00000003            752              ANDI.L  #$03,D1
0000168E  0C01 0002                753              CMPI.B  #%10,D1
00001692  6700 0032                754              BEQ     OP0000_EOR_L
00001696                           755            
00001696                           756  OP0000_EOR_B
00001696                           757              
00001696  163C 0042                758              MOVE.B  #'B',D3
0000169A  6100 2DD2                759              BSR     PUSH_STACK
0000169E                           760              
0000169E                           761              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000169E  0285 0000F03F            762              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000016A4  0685 000001C0            763              ADDI.L  #%000000111000000,D5   *Add.B  BITS 8-6 TO INDICATE A "(XXX).W" Register (000) 
000016AA                           764  
000016AA                           765              
000016AA  6000 002E                766              BRA     OP0000_RETURN_EOR
000016AE                           767  OP0000_EOR_W
000016AE                           768              
000016AE  163C 0057                769              MOVE.B  #'W',D3
000016B2  6100 2DBA                770              BSR     PUSH_STACK
000016B6                           771              
000016B6                           772              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000016B6  0285 0000F03F            773              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000016BC  0685 000001C0            774              ADDI.L  #%0000000111000000,D5   *Add.B  BITS 8-6 TO INDICATE A "(XXX).W" Register (000) 
000016C2                           775  
000016C2                           776              
000016C2  6000 0016                777              BRA     OP0000_RETURN_EOR
000016C6                           778  OP0000_EOR_L
000016C6                           779              
000016C6  163C 004C                780              MOVE.B  #'L',D3
000016CA  6100 2DA2                781              BSR     PUSH_STACK
000016CE                           782              
000016CE                           783              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000016CE  0285 0000FE3F            784              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000016D4  0685 000009C0            785              ADDI.L  #%0000100111000000,D5   *Add.B  BITS 8-6 TO INDICATE A "(XXX).W" Register (000) 
000016DA                           786  
000016DA                           787  
000016DA                           788  OP0000_RETURN_EOR       
000016DA  163C 0020                789              MOVE.B  #' ',D3
000016DE  6100 2D8E                790              BSR     PUSH_STACK
000016E2  163C 0023                791              MOVE.B  #'#',D3
000016E6  6100 2D86                792              BSR     PUSH_STACK
000016EA  6100 2914                793              BSR     GET_EA_EA_DEST
000016EE  163C 002C                794              MOVE.B  #',',D3
000016F2  6100 2D7A                795              BSR     PUSH_STACK
000016F6  6100 24D8                796              BSR     GET_EA_EA_SRC
000016FA                           797              
000016FA  4E75                     798              RTS
000016FC                           799  
000016FC                           800  *---------------------------------------------------------------------------*
000016FC                           801  * OP_SUBI: decode SUBI.B/.W/.L
000016FC                           802  *---------------------------------------------------------------------------* 
000016FC                           803  OP_SUBI
000016FC                           804             
000016FC                           805   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000016FC  13FC 0000 00004DF8       806             MOVE.B   #$00,DEST_REGISTER_FORMAT
00001704  13FC 0080 00004DF9       807             MOVE.B   #$80,SRC_REGISTER_FORMAT
0000170C                           808             
0000170C                           809             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000170C  13FC 00B9 00004DFB       810             MOVE.B   #$B9,GET_DST_START_END
00001714  13FC 0020 00004DFC       811             MOVE.B   #$20,GET_SRC_START_END
0000171C                           812             
0000171C                           813              *CLEAR D3
0000171C  4283                     814              CLR.L   D3
0000171E                           815              *LOAD STACK WITH THIS OPMODE
0000171E  6100 2D4E                816              BSR     PUSH_STACK
00001722  163C 0053                817              MOVE.B  #'S',D3
00001726  6100 2D46                818              BSR     PUSH_STACK
0000172A  163C 0055                819              MOVE.B  #'U',D3
0000172E  6100 2D3E                820              BSR     PUSH_STACK
00001732  163C 0042                821              MOVE.B  #'B',D3
00001736  6100 2D36                822              BSR     PUSH_STACK
0000173A  163C 0049                823              MOVE.B  #'I',D3
0000173E  6100 2D2E                824              BSR     PUSH_STACK
00001742  163C 002E                825              MOVE.B  #'.',D3
00001746  6100 2D26                826              BSR     PUSH_STACK
0000174A                           827              
0000174A                           828              *FIGURE OUT SIZE*
0000174A                           829              *00 = BYTE
0000174A                           830              *01 = WORD
0000174A                           831              *10 = LONG
0000174A                           832              * BITS 7&6
0000174A                           833              
0000174A                           834              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
0000174A  2205                     835              MOVE.L  D5,D1
0000174C  EC99                     836              ROR.L   #6,D1
0000174E  0281 00000003            837              ANDI.L  #$03,D1
00001754  0C01 0000                838              CMPI.B  #%00,D1
00001758  6700 001E                839              BEQ     OP0000_SUB_B
0000175C  0281 00000003            840              ANDI.L  #$03,D1
00001762  0C01 0001                841              CMPI.B  #%01,D1
00001766  6700 0028                842              BEQ     OP0000_SUB_W
0000176A  0281 00000003            843              ANDI.L  #$03,D1
00001770  0C01 0002                844              CMPI.B  #%10,D1
00001774  6700 0032                845              BEQ     OP0000_SUB_L
00001778                           846            
00001778                           847  OP0000_SUB_B
00001778                           848              
00001778  163C 0042                849              MOVE.B  #'B',D3
0000177C  6100 2CF0                850              BSR     PUSH_STACK
00001780                           851              
00001780                           852              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001780  0285 0000F03F            853              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001786  0685 000001C0            854              ADDI.L  #%000000111000000,D5   *Add.B  BITS 8-6 TO INDICATE A "(XXX).W" Register (000) 
0000178C                           855  
0000178C                           856              
0000178C  6000 002E                857              BRA     OP0000_RETURN_SUBI
00001790                           858  OP0000_SUB_W
00001790                           859              
00001790  163C 0057                860              MOVE.B  #'W',D3
00001794  6100 2CD8                861              BSR     PUSH_STACK
00001798                           862              
00001798                           863              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001798  0285 0000F03F            864              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000179E  0685 000001C0            865              ADDI.L  #%0000000111000000,D5   *Add.B  BITS 8-6 TO INDICATE A "(XXX).W" Register (000) 
000017A4                           866  
000017A4                           867              
000017A4  6000 0016                868              BRA     OP0000_RETURN_SUBI
000017A8                           869  OP0000_SUB_L
000017A8                           870              
000017A8  163C 004C                871              MOVE.B  #'L',D3
000017AC  6100 2CC0                872              BSR     PUSH_STACK
000017B0                           873              
000017B0                           874              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000017B0  0285 0000F03F            875              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000017B6  0685 000003C0            876              ADDI.L  #%0000001111000000,D5   *Add.B  BITS 8-6 TO INDICATE A "(XXX).W" Register (000) 
000017BC                           877                      
000017BC                           878  OP0000_RETURN_SUBI            
000017BC  163C 0020                879              MOVE.B  #' ',D3
000017C0  6100 2CAC                880              BSR     PUSH_STACK
000017C4  163C 0023                881              MOVE.B  #'#',D3
000017C8  6100 2CA4                882              BSR     PUSH_STACK
000017CC  6100 2832                883              BSR     GET_EA_EA_DEST
000017D0  163C 002C                884              MOVE.B  #',',D3
000017D4  6100 2C98                885              BSR     PUSH_STACK
000017D8  6100 23F6                886              BSR     GET_EA_EA_SRC
000017DC                           887              
000017DC  4E75                     888              RTS
000017DE                           889  
000017DE                           890              
000017DE                           891  *---------------------------------------------------------------------------*
000017DE                           892  * OP_DATA : unidentified opcode
000017DE                           893  *---------------------------------------------------------------------------* 
000017DE                           894  OP_DATA
000017DE  4280                     895              CLR.L   D0                   
000017E0  4281                     896              CLR.L   D1     
000017E2  4284                     897              CLR.L   D4                    
000017E4  227C 00000000            898              MOVEA.L #0, A1             
000017EA  4287                     899              CLR.L   D7
000017EC  1E3C 0001                900              MOVE.B  #1,D7                   * error flag is true
000017F0                           901              
000017F0  43F9 00004B46            902              LEA     DISP_DATA,A1
000017F6  103C 000E                903              MOVE.B  #14,D0
000017FA  4E4F                     904              TRAP    #15
000017FC                           905              
000017FC  4EF9 00001802            906              JMP     EA_DATA
00001802                           907             
00001802                           908             
00001802                           909  *---------------------------------------------------------------------------*
00001802                           910  * EA_DATA
00001802                           911  *---------------------------------------------------------------------------*       
00001802  43F9 00004A97            912  EA_DATA     LEA     TMPOUTPUT,A1    * load the temporarily stored output address
00001808  2205                     913              MOVE.L  D5,D1           * transfer the processing data to D1
0000180A  7404                     914              MOVE.L  #4,D2           * set to word size
0000180C  4EB8 12AA                915              JSR     HEX2ASCII       * prepare output in ascii
00001810  43F9 00004DB9            916              LEA     DISP_HEX,A1     * display $ symbol
00001816  103C 000E                917              MOVE.B  #14,D0      
0000181A  4E4F                     918              TRAP    #15
0000181C  43F9 00004A97            919              LEA     TMPOUTPUT,A1    * display with a new line
00001822  103C 000D                920              MOVE.B  #13,D0
00001826  4E4F                     921              TRAP    #15
00001828                           922  
00001828  4E75                     923              RTS
0000182A                           924              
0000182A                           925  *---------------------------------------------------------------------------*
0000182A                           926  * OP_CMPI : decode CMPI and its size
0000182A                           927  *---------------------------------------------------------------------------*          
0000182A                           928  OP0000_CMPI
0000182A                           929  
0000182A                           930              
0000182A                           931   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000182A  13FC 0000 00004DF8       932             MOVE.B   #$00,DEST_REGISTER_FORMAT
00001832  13FC 0082 00004DF9       933             MOVE.B   #$82,SRC_REGISTER_FORMAT
0000183A                           934             
0000183A                           935             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000183A  13FC 00B9 00004DFB       936             MOVE.B   #$B9,GET_DST_START_END
00001842  13FC 0020 00004DFC       937             MOVE.B   #$20,GET_SRC_START_END
0000184A                           938             
0000184A                           939              *CLEAR D3
0000184A  4283                     940              CLR.L   D3
0000184C                           941              *LOAD STACK WITH THIS OPMODE
0000184C  6100 2C20                942              BSR     PUSH_STACK
00001850  163C 0043                943              MOVE.B  #'C',D3
00001854  6100 2C18                944              BSR     PUSH_STACK
00001858  163C 004D                945              MOVE.B  #'M',D3
0000185C  6100 2C10                946              BSR     PUSH_STACK
00001860  163C 0050                947              MOVE.B  #'P',D3
00001864  6100 2C08                948              BSR     PUSH_STACK
00001868  163C 0049                949              MOVE.B  #'I',D3
0000186C  6100 2C00                950              BSR     PUSH_STACK
00001870  163C 002E                951              MOVE.B  #'.',D3
00001874  6100 2BF8                952              BSR     PUSH_STACK
00001878                           953              
00001878                           954              *FIGURE OUT SIZE*
00001878                           955              *00 = BYTE
00001878                           956              *01 = WORD
00001878                           957              *10 = LONG
00001878                           958              * BITS 7&6
00001878                           959              
00001878                           960              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
00001878  2205                     961              MOVE.L  D5,D1
0000187A  EC99                     962              ROR.L   #6,D1
0000187C  0281 00000003            963              ANDI.L  #$03,D1
00001882  0C01 0000                964              CMPI.B  #%00,D1
00001886  6700 0018                965              BEQ     OP0000_CMPI_B
0000188A  0C01 0001                966              CMPI.B  #%01,D1
0000188E  6700 0038                967              BEQ     OP0000_CMPI_W
00001892  0281 00000003            968              ANDI.L  #$03,D1
00001898  0C01 0002                969              CMPI.B  #%10,D1
0000189C  6700 0052                970              BEQ     OP0000_CMPI_L
000018A0                           971  
000018A0                           972  OP0000_CMPI_B
000018A0  163C 0042                973              MOVE.B  #'B',D3
000018A4  6100 2BC8                974              BSR     PUSH_STACK
000018A8                           975  *GET DATA FROM ADDQ AND PRINT #0-8
000018A8                           976              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000018A8  0285 0000F03F            977              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000018AE  0685 000001C0            978              ADDI.L  #$01C0,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
000018B4  6100 274A                979              BSR     GET_EA_EA_DEST
000018B8  163C 002C                980              MOVE.B  #',',D3
000018BC  6100 2BB0                981              BSR     PUSH_STACK
000018C0  6100 230E                982              BSR     GET_EA_EA_SRC
000018C4  6000 004E                983              BRA     OP0000_RETURN_CMPI
000018C8                           984  
000018C8                           985  OP0000_CMPI_W
000018C8  163C 0057                986              MOVE.B  #'W',D3
000018CC  6100 2BA0                987              BSR     PUSH_STACK
000018D0                           988  *GET DATA FROM ADDQ AND PRINT #0-8
000018D0                           989              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000018D0  0285 0000F03F            990              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000018D6  0685 000001C0            991              ADDI.L  #$01C0,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
000018DC  6100 2722                992              BSR     GET_EA_EA_DEST
000018E0  163C 002C                993              MOVE.B  #',',D3
000018E4  6100 2B88                994              BSR     PUSH_STACK
000018E8  6100 22E6                995              BSR     GET_EA_EA_SRC
000018EC  6000 0026                996              BRA     OP0000_RETURN_CMPI
000018F0                           997  
000018F0                           998  OP0000_CMPI_L
000018F0  163C 004C                999              MOVE.B  #'L',D3
000018F4  6100 2B78               1000              BSR     PUSH_STACK
000018F8                          1001              *GET DATA FROM ADDQ AND PRINT #0-8
000018F8                          1002              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000018F8  0285 0000F03F           1003              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000018FE  0685 000003C0           1004              ADDI.L  #$03C0,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
00001904  6100 26FA               1005              BSR     GET_EA_EA_DEST
00001908  163C 002C               1006              MOVE.B  #',',D3
0000190C  6100 2B60               1007              BSR     PUSH_STACK
00001910  6100 22BE               1008              BSR     GET_EA_EA_SRC
00001914                          1009              
00001914                          1010  OP0000_RETURN_CMPI
00001914                          1011  
00001914                          1012  
00001914                          1013              
00001914  4E75                    1014              RTS
00001916                          1015   
00001916                          1016  *---------------------------------------------------------------------------*
00001916                          1017  * OP_ORI : decode ORI and its size
00001916                          1018  *---------------------------------------------------------------------------* 
00001916                          1019  OP_ORI      
00001916                          1020           
00001916                          1021   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001916  13FC 0000 00004DF8      1022             MOVE.B   #$00,DEST_REGISTER_FORMAT
0000191E  13FC 0082 00004DF9      1023             MOVE.B   #$82,SRC_REGISTER_FORMAT
00001926                          1024             
00001926                          1025             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001926  13FC 00B9 00004DFB      1026             MOVE.B   #$B9,GET_DST_START_END
0000192E  13FC 0020 00004DFC      1027             MOVE.B   #$20,GET_SRC_START_END
00001936                          1028             
00001936                          1029              *CLEAR D3
00001936  4283                    1030              CLR.L   D3
00001938                          1031              *LOAD STACK WITH THIS OPMODE
00001938  6100 2B34               1032              BSR     PUSH_STACK
0000193C  163C 004F               1033              MOVE.B  #'O',D3
00001940  6100 2B2C               1034              BSR     PUSH_STACK
00001944  163C 0052               1035              MOVE.B  #'R',D3
00001948  6100 2B24               1036              BSR     PUSH_STACK
0000194C  163C 0049               1037              MOVE.B  #'I',D3
00001950  6100 2B1C               1038              BSR     PUSH_STACK
00001954  163C 002E               1039              MOVE.B  #'.',D3
00001958  6100 2B14               1040              BSR     PUSH_STACK
0000195C                          1041              
0000195C                          1042              *FIGURE OUT SIZE*
0000195C                          1043              *00 = BYTE
0000195C                          1044              *01 = WORD
0000195C                          1045              *10 = LONG
0000195C                          1046              * BITS 7&6
0000195C                          1047              
0000195C                          1048              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
0000195C  2205                    1049              MOVE.L  D5,D1
0000195E  EC99                    1050              ROR.L   #6,D1
00001960  0281 00000003           1051              ANDI.L  #$03,D1
00001966  0C01 0000               1052              CMPI.B  #%00,D1
0000196A  6700 0018               1053              BEQ     OP0000_ORI_B
0000196E  0C01 0001               1054              CMPI.B  #%01,D1
00001972  6700 0038               1055              BEQ     OP0000_ORI_W
00001976  0281 00000003           1056              ANDI.L  #$03,D1
0000197C  0C01 0002               1057              CMPI.B  #%10,D1
00001980  6700 0052               1058              BEQ     OP0000_ORI_L
00001984                          1059  
00001984                          1060  OP0000_ORI_B
00001984  163C 0042               1061              MOVE.B  #'B',D3
00001988  6100 2AE4               1062              BSR     PUSH_STACK
0000198C                          1063  *GET DATA FROM ADDQ AND PRINT #0-8
0000198C                          1064              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000198C  0285 0000F03F           1065              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001992  0685 000001C0           1066              ADDI.L  #$01C0,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
00001998  6100 2666               1067              BSR     GET_EA_EA_DEST
0000199C  163C 002C               1068              MOVE.B  #',',D3
000019A0  6100 2ACC               1069              BSR     PUSH_STACK
000019A4  6100 222A               1070              BSR     GET_EA_EA_SRC
000019A8  6000 004E               1071              BRA     OP0000_RETURN_ORI
000019AC                          1072  
000019AC                          1073  OP0000_ORI_W
000019AC  163C 0057               1074              MOVE.B  #'W',D3
000019B0  6100 2ABC               1075              BSR     PUSH_STACK
000019B4                          1076  *GET DATA FROM ADDQ AND PRINT #0-8
000019B4                          1077              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000019B4  0285 0000F03F           1078              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000019BA  0685 000001C0           1079              ADDI.L  #$01C0,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
000019C0  6100 263E               1080              BSR     GET_EA_EA_DEST
000019C4  163C 002C               1081              MOVE.B  #',',D3
000019C8  6100 2AA4               1082              BSR     PUSH_STACK
000019CC  6100 2202               1083              BSR     GET_EA_EA_SRC
000019D0  6000 0026               1084              BRA     OP0000_RETURN_ORI
000019D4                          1085  
000019D4                          1086  OP0000_ORI_L
000019D4  163C 004C               1087              MOVE.B  #'L',D3
000019D8  6100 2A94               1088              BSR     PUSH_STACK
000019DC                          1089              *GET DATA FROM ADDQ AND PRINT #0-8
000019DC                          1090              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000019DC  0285 0000F03F           1091              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000019E2  0685 000003C0           1092              ADDI.L  #$03C0,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
000019E8  6100 2616               1093              BSR     GET_EA_EA_DEST
000019EC  163C 002C               1094              MOVE.B  #',',D3
000019F0  6100 2A7C               1095              BSR     PUSH_STACK
000019F4  6100 21DA               1096              BSR     GET_EA_EA_SRC
000019F8                          1097              
000019F8                          1098  OP0000_RETURN_ORI
000019F8                          1099  
000019F8                          1100  
000019F8                          1101              
000019F8  4E75                    1102              RTS
000019FA                          1103  
000019FA                          1104          
000019FA                          1105  *---------------------------------------------------------------------------*
000019FA                          1106  * OP0001: MOVE.B
000019FA                          1107  *---------------------------------------------------------------------------*
000019FA                          1108  OP0001      
000019FA  4EF9 00001A00           1109              JMP     OP_MOVE_B   * display MOVE.B
00001A00                          1110              
00001A00                          1111  *---------------------------------------------------------------------------*
00001A00                          1112  * OP_MOVE_B: display MOVE_B and proceed to EA
00001A00                          1113  *---------------------------------------------------------------------------*
00001A00                          1114  OP_MOVE_B                                                                       
00001A00                          1115             
00001A00                          1116             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001A00  13FC 0082 00004DF8      1117             MOVE.B   #$82,DEST_REGISTER_FORMAT
00001A08  13FC 0000 00004DF9      1118             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001A10                          1119             
00001A10                          1120             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001A10  13FC 00B9 00004DFB      1121             MOVE.B   #$B9,GET_DST_START_END
00001A18  13FC 0020 00004DFC      1122             MOVE.B   #$20,GET_SRC_START_END
00001A20                          1123             
00001A20                          1124              *CLEAR D3
00001A20  4283                    1125              CLR.L   D3
00001A22                          1126              *LOAD STACK WITH THIS OPMODE
00001A22  6100 2A4A               1127              BSR     PUSH_STACK
00001A26  163C 004D               1128              MOVE.B  #'M',D3
00001A2A  6100 2A42               1129              BSR     PUSH_STACK
00001A2E  163C 004F               1130              MOVE.B  #'O',D3
00001A32  6100 2A3A               1131              BSR     PUSH_STACK
00001A36  163C 0056               1132              MOVE.B  #'V',D3
00001A3A  6100 2A32               1133              BSR     PUSH_STACK
00001A3E  163C 0045               1134              MOVE.B  #'E',D3
00001A42  6100 2A2A               1135              BSR     PUSH_STACK
00001A46  163C 002E               1136              MOVE.B  #'.',D3
00001A4A  6100 2A22               1137              BSR     PUSH_STACK
00001A4E  163C 0042               1138              MOVE.B  #'B',D3
00001A52  6100 2A1A               1139              BSR     PUSH_STACK
00001A56                          1140              
00001A56  6100 2178               1141              BSR     GET_EA_EA_SRC
00001A5A  163C 002C               1142              MOVE.B  #',',D3
00001A5E  6100 2A0E               1143              BSR     PUSH_STACK
00001A62  6100 259C               1144              BSR     GET_EA_EA_DEST
00001A66                          1145              
00001A66  4E75                    1146              RTS
00001A68                          1147              
00001A68                          1148             
00001A68                          1149  *---------------------------------------------------------------------------*
00001A68                          1150  * OP0010: decode MOVE.L/MOVEA.L
00001A68                          1151  *---------------------------------------------------------------------------*
00001A68                          1152  OP0010      
00001A68  183C 0002               1153              MOVE.B  #2,D4
00001A6C  4280                    1154              CLR.L   D0                     
00001A6E  4281                    1155              CLR.L   D1                      
00001A70  227C 00000000           1156              MOVEA.L #0, A1                 
00001A76                          1157              
00001A76  2205                    1158              MOVE.L  D5,D1
00001A78  EA99                    1159              ROR.L   #5,D1
00001A7A  0281 0000000E           1160              ANDI.L  #$E,D1
00001A80  0C01 0002               1161              CMPI.B  #2,D1
00001A84  6700 0070               1162              BEQ     OP_MOVEA_L
00001A88                          1163  
00001A88  4EF9 00001A8E           1164              JMP     OP_MOVE_L
00001A8E                          1165             
00001A8E                          1166  
00001A8E                          1167  *---------------------------------------------------------------------------*
00001A8E                          1168  * OP_MOVE_L: display MOVE_L and proceed to EA
00001A8E                          1169  *---------------------------------------------------------------------------*
00001A8E                          1170  OP_MOVE_L   
00001A8E                          1171             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001A8E  13FC 0082 00004DF8      1172             MOVE.B   #$82,DEST_REGISTER_FORMAT
00001A96  13FC 0000 00004DF9      1173             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001A9E                          1174             
00001A9E                          1175             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001A9E  13FC 00B9 00004DFB      1176             MOVE.B   #$B9,GET_DST_START_END
00001AA6  13FC 0020 00004DFC      1177             MOVE.B   #$20,GET_SRC_START_END
00001AAE                          1178             
00001AAE                          1179              *CLEAR D3
00001AAE  4283                    1180              CLR.L   D3
00001AB0                          1181              *LOAD STACK WITH THIS OPMODE
00001AB0  6100 29BC               1182              BSR     PUSH_STACK
00001AB4  163C 004D               1183              MOVE.B  #'M',D3
00001AB8  6100 29B4               1184              BSR     PUSH_STACK
00001ABC  163C 004F               1185              MOVE.B  #'O',D3
00001AC0  6100 29AC               1186              BSR     PUSH_STACK
00001AC4  163C 0056               1187              MOVE.B  #'V',D3
00001AC8  6100 29A4               1188              BSR     PUSH_STACK
00001ACC  163C 0045               1189              MOVE.B  #'E',D3
00001AD0  6100 299C               1190              BSR     PUSH_STACK
00001AD4  163C 002E               1191              MOVE.B  #'.',D3
00001AD8  6100 2994               1192              BSR     PUSH_STACK
00001ADC  163C 004C               1193              MOVE.B  #'L',D3
00001AE0  6100 298C               1194              BSR     PUSH_STACK
00001AE4                          1195              
00001AE4  6100 20EA               1196              BSR     GET_EA_EA_SRC
00001AE8  163C 002C               1197              MOVE.B  #',',D3
00001AEC  6100 2980               1198              BSR     PUSH_STACK
00001AF0  6100 250E               1199              BSR     GET_EA_EA_DEST
00001AF4                          1200              
00001AF4  4E75                    1201              RTS
00001AF6                          1202  
00001AF6                          1203  
00001AF6                          1204  *---------------------------------------------------------------------------*
00001AF6                          1205  * OP_MOVEA_L: display MOVEA_L and proceed to EA
00001AF6                          1206  *---------------------------------------------------------------------------*
00001AF6                          1207  OP_MOVEA_L 
00001AF6                          1208             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001AF6  13FC 00FD 00004DF8      1209             MOVE.B   #$FD,DEST_REGISTER_FORMAT
00001AFE  13FC 0000 00004DF9      1210             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001B06                          1211             
00001B06                          1212             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001B06  13FC 00B9 00004DFB      1213             MOVE.B   #$B9,GET_DST_START_END
00001B0E  13FC 0020 00004DFC      1214             MOVE.B   #$20,GET_SRC_START_END
00001B16                          1215             
00001B16                          1216              *CLEAR D3
00001B16  4283                    1217              CLR.L   D3
00001B18                          1218              *LOAD STACK WITH THIS OPMODE
00001B18  6100 2954               1219              BSR     PUSH_STACK
00001B1C  163C 004D               1220              MOVE.B  #'M',D3
00001B20  6100 294C               1221              BSR     PUSH_STACK
00001B24  163C 004F               1222              MOVE.B  #'O',D3
00001B28  6100 2944               1223              BSR     PUSH_STACK
00001B2C  163C 0056               1224              MOVE.B  #'V',D3
00001B30  6100 293C               1225              BSR     PUSH_STACK
00001B34  163C 0045               1226              MOVE.B  #'E',D3
00001B38  6100 2934               1227              BSR     PUSH_STACK           
00001B3C  163C 0041               1228              MOVE.B  #'A',D3
00001B40  6100 292C               1229              BSR     PUSH_STACK
00001B44  163C 002E               1230              MOVE.B  #'.',D3
00001B48  6100 2924               1231              BSR     PUSH_STACK
00001B4C  163C 004C               1232              MOVE.B  #'L',D3
00001B50  6100 291C               1233              BSR     PUSH_STACK
00001B54                          1234              
00001B54  6100 207A               1235              BSR     GET_EA_EA_SRC
00001B58  163C 002C               1236              MOVE.B  #',',D3
00001B5C  6100 2910               1237              BSR     PUSH_STACK
00001B60  6100 249E               1238              BSR     GET_EA_EA_DEST
00001B64                          1239              
00001B64  4E75                    1240              RTS
00001B66                          1241  
00001B66                          1242              
00001B66                          1243  *---------------------------------------------------------------------------*
00001B66                          1244  * OP0011: decode MOVE.W/MOVEA.W
00001B66                          1245  *---------------------------------------------------------------------------*
00001B66                          1246  OP0011      
00001B66  4280                    1247              CLR.L   D0                      
00001B68  4281                    1248              CLR.L   D1  
00001B6A  4284                    1249              CLR.L   D4                   
00001B6C  227C 00000000           1250              MOVEA.L #0, A1 
00001B72                          1251                
00001B72  2205                    1252              MOVE.L  D5,D1
00001B74  EC99                    1253              ROR.L   #6,D1
00001B76  0281 00000007           1254              ANDI.L  #$07,D1
00001B7C  0C01 0001               1255              CMPI.B  #1,D1
00001B80  6700 0070               1256              BEQ     OP_MOVEA_W
00001B84                          1257              
00001B84  4EF9 00001B8A           1258              JMP     OP_MOVE_W
00001B8A                          1259            
00001B8A                          1260  *---------------------------------------------------------------------------*
00001B8A                          1261  * OP_MOVE_W: display MOVE_W and proceed to EA
00001B8A                          1262  *---------------------------------------------------------------------------*
00001B8A                          1263  OP_MOVE_W   
00001B8A                          1264             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001B8A  13FC 0082 00004DF8      1265             MOVE.B   #$82,DEST_REGISTER_FORMAT
00001B92  13FC 0000 00004DF9      1266             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001B9A                          1267             
00001B9A                          1268             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001B9A  13FC 00B9 00004DFB      1269             MOVE.B   #$B9,GET_DST_START_END
00001BA2  13FC 0020 00004DFC      1270             MOVE.B   #$20,GET_SRC_START_END
00001BAA                          1271             
00001BAA                          1272              *CLEAR D3
00001BAA  4283                    1273              CLR.L   D3
00001BAC                          1274              *LOAD STACK WITH THIS OPMODE
00001BAC  6100 28C0               1275              BSR     PUSH_STACK
00001BB0  163C 004D               1276              MOVE.B  #'M',D3
00001BB4  6100 28B8               1277              BSR     PUSH_STACK
00001BB8  163C 004F               1278              MOVE.B  #'O',D3
00001BBC  6100 28B0               1279              BSR     PUSH_STACK
00001BC0  163C 0056               1280              MOVE.B  #'V',D3
00001BC4  6100 28A8               1281              BSR     PUSH_STACK
00001BC8  163C 0045               1282              MOVE.B  #'E',D3
00001BCC  6100 28A0               1283              BSR     PUSH_STACK
00001BD0  163C 002E               1284              MOVE.B  #'.',D3
00001BD4  6100 2898               1285              BSR     PUSH_STACK
00001BD8  163C 0057               1286              MOVE.B  #'W',D3
00001BDC  6100 2890               1287              BSR     PUSH_STACK
00001BE0                          1288              
00001BE0  6100 1FEE               1289              BSR     GET_EA_EA_SRC
00001BE4  163C 002C               1290              MOVE.B  #',',D3
00001BE8  6100 2884               1291              BSR     PUSH_STACK
00001BEC  6100 2412               1292              BSR     GET_EA_EA_DEST
00001BF0                          1293              
00001BF0  4E75                    1294              RTS
00001BF2                          1295  
00001BF2                          1296  *---------------------------------------------------------------------------*
00001BF2                          1297  * OP_MOVEA_W: display MOVEA and proceed to EA
00001BF2                          1298  *---------------------------------------------------------------------------*
00001BF2                          1299  OP_MOVEA_W 
00001BF2                          1300             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001BF2  13FC 00FD 00004DF8      1301             MOVE.B   #$FD,DEST_REGISTER_FORMAT
00001BFA  13FC 0000 00004DF9      1302             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001C02                          1303             
00001C02                          1304             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001C02  13FC 00B9 00004DFB      1305             MOVE.B   #$B9,GET_DST_START_END
00001C0A  13FC 0020 00004DFC      1306             MOVE.B   #$20,GET_SRC_START_END
00001C12                          1307             
00001C12                          1308              *CLEAR D3
00001C12  4283                    1309              CLR.L   D3
00001C14                          1310              *LOAD STACK WITH THIS OPMODE
00001C14  6100 2858               1311              BSR     PUSH_STACK
00001C18  163C 004D               1312              MOVE.B  #'M',D3
00001C1C  6100 2850               1313              BSR     PUSH_STACK
00001C20  163C 004F               1314              MOVE.B  #'O',D3
00001C24  6100 2848               1315              BSR     PUSH_STACK
00001C28  163C 0056               1316              MOVE.B  #'V',D3
00001C2C  6100 2840               1317              BSR     PUSH_STACK
00001C30  163C 0045               1318              MOVE.B  #'E',D3
00001C34  6100 2838               1319              BSR     PUSH_STACK           
00001C38  163C 0041               1320              MOVE.B  #'A',D3
00001C3C  6100 2830               1321              BSR     PUSH_STACK
00001C40  163C 002E               1322              MOVE.B  #'.',D3
00001C44  6100 2828               1323              BSR     PUSH_STACK
00001C48  163C 0057               1324              MOVE.B  #'W',D3
00001C4C  6100 2820               1325              BSR     PUSH_STACK
00001C50                          1326              
00001C50  6100 1F7E               1327              BSR     GET_EA_EA_SRC
00001C54  163C 002C               1328              MOVE.B  #',',D3
00001C58  6100 2814               1329              BSR     PUSH_STACK
00001C5C  6100 23A2               1330              BSR     GET_EA_EA_DEST
00001C60                          1331            
00001C60  4E75                    1332              RTS
00001C62                          1333  *---------------------------------------------------------------------------*
00001C62                          1334  * OP0100: decode MOVEM/LEA/NEG/JSR/RTS/NOT
00001C62                          1335  *---------------------------------------------------------------------------*
00001C62                          1336  OP0100
00001C62  4280                    1337              CLR.L   D0                      
00001C64  4281                    1338              CLR.L   D1  
00001C66  4284                    1339              CLR.L   D4                      
00001C68  227C 00000000           1340              MOVEA.L #0, A1                  
00001C6E  2205                    1341              MOVE.L  D5,D1  
00001C70                          1342              
00001C70                          1343              * check for RTS
00001C70  0C41 4E75               1344              CMPI.W  #$4E75,D1   * 0100 1110 0111 0101
00001C74  6700 0228               1345              BEQ     OP_RTS
00001C78                          1346              
00001C78                          1347              * check for JSR     * 0100 1110 10 xxx (ea mode) xxx (ea reg)
00001C78  4281                    1348              CLR.L   D1 
00001C7A  2205                    1349              MOVE.L  D5,D1  
00001C7C  0241 0F00               1350              ANDI.W  #$0F00,D1
00001C80  0C41 0E00               1351              CMPI.W  #$0E00,D1
00001C84  6700 0204               1352              BEQ     OP_JSR
00001C88                          1353  
00001C88                          1354              * check for NEG     * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
00001C88  4281                    1355              CLR.L   D1 
00001C8A  2205                    1356              MOVE.L  D5,D1  
00001C8C  0241 0F00               1357              ANDI.W  #$0F00,D1
00001C90  0C41 0400               1358              CMPI.W  #$0400,D1
00001C94  6700 00E8               1359              BEQ     OP_NEG
00001C98                          1360              
00001C98                          1361              * check for NOT     * 0100 0110 xx (size) xxx (ea mode) xxx (ea reg)
00001C98  4281                    1362              CLR.L   D1 
00001C9A  2205                    1363              MOVE.L  D5,D1  
00001C9C  0241 0F00               1364              ANDI.W  #$0F00,D1
00001CA0  0C41 0600               1365              CMPI.W  #$0600,D1
00001CA4  6700 015E               1366              BEQ     OP_NOT
00001CA8                          1367              
00001CA8                          1368              * check for LEA     * 0100 xxx (reg) 111 xxx (ea mode) xxx (ea reg)
00001CA8  4281                    1369              CLR.L   D1 
00001CAA  2205                    1370              MOVE.L  D5,D1  
00001CAC  EC99                    1371              ROR.L   #6,D1
00001CAE  0281 00000007           1372              ANDI.L  #7,D1
00001CB4  0C81 00000007           1373              CMPI.L  #7,D1
00001CBA  6700 0054               1374              BEQ     OP_LEA
00001CBE                          1375              
00001CBE                          1376              * check for MOVEM   * 0100 1 x 001 x (size) xxx (ea mode) xxx (ea reg)
00001CBE  4281                    1377              CLR.L   D1 
00001CC0  2205                    1378              MOVE.L  D5,D1  
00001CC2  EB59                    1379              ROL.W   #5,D1
00001CC4  0C01 0001               1380              CMPI.B  #1,D1
00001CC8  6600 FB14               1381              BNE     OP_DATA
00001CCC  E959                    1382              ROL.W   #4,D1
00001CCE  0C01 0001               1383              CMPI.B  #1,D1
00001CD2  6600 FB0A               1384              BNE     OP_DATA
00001CD6  E359                    1385              ROL.W   #1,D1
00001CD8  0C01 0000               1386              CMPI.B  #0,D1
00001CDC  6700 000E               1387              BEQ     OP_MOVEM_W
00001CE0  0C01 0001               1388              CMPI.B  #1,D1
00001CE4  6700 0018               1389              BEQ     OP_MOVEM_L
00001CE8  4EF8 17DE               1390              JMP     OP_DATA
00001CEC                          1391  
00001CEC                          1392  *---------------------------------------------------------------------------*
00001CEC                          1393  * OP_MOVEM_W: display MOVEM_W
00001CEC                          1394  *---------------------------------------------------------------------------*    
00001CEC                          1395  OP_MOVEM_W  
00001CEC  183C 0001               1396              MOVE.B  #1,D4
00001CF0  43F9 00004BB7           1397              LEA     DISP_MOVEM_W,A1
00001CF6  103C 000E               1398              MOVE.B  #14,D0
00001CFA  4E4F                    1399              TRAP    #15
00001CFC  4E75                    1400              RTS
00001CFE                          1401  
00001CFE                          1402  *---------------------------------------------------------------------------*
00001CFE                          1403  * OP_MOVEM_L: display MOVEM_L
00001CFE                          1404  *---------------------------------------------------------------------------*
00001CFE                          1405  OP_MOVEM_L  
00001CFE  183C 0002               1406              MOVE.B  #2,D4
00001D02  43F9 00004BC2           1407              LEA     DISP_MOVEM_L,A1
00001D08  103C 000E               1408              MOVE.B  #14,D0
00001D0C  4E4F                    1409              TRAP    #15
00001D0E  4E75                    1410              RTS
00001D10                          1411     
00001D10                          1412  *---------------------------------------------------------------------------*
00001D10                          1413  * OP_LEA: decode and display LEA
00001D10                          1414  *---------------------------------------------------------------------------*
00001D10                          1415  OP_LEA      
00001D10  4281                    1416               CLR.L   D1       
00001D12  4284                    1417              CLR.L   D4                   
00001D14  227C 00000000           1418              MOVEA.L #0, A1              
00001D1A  2205                    1419              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
00001D1C                          1420              *CLEAR D3
00001D1C  4283                    1421              CLR.L   D3
00001D1E                          1422  
00001D1E                          1423  OP_LEA_DN_EA_OR_EA_DN 
00001D1E                          1424              *LOAD STACK WITH THIS OPMODE
00001D1E  6100 274E               1425              BSR     PUSH_STACK
00001D22  163C 004C               1426              MOVE.B  #'L',D3
00001D26  6100 2746               1427              BSR     PUSH_STACK
00001D2A  163C 0045               1428              MOVE.B  #'E',D3
00001D2E  6100 273E               1429              BSR     PUSH_STACK
00001D32  163C 0041               1430              MOVE.B  #'A',D3
00001D36  6100 2736               1431              BSR     PUSH_STACK
00001D3A  2205                    1432              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00001D3C                          1433          
00001D3C                          1434  
00001D3C                          1435  OP_PRINT_L_LEA
00001D3C                          1436                          
00001D3C                          1437              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001D3C  13FC 0000 00004DF8      1438              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001D44  13FC 009B 00004DF9      1439              MOVE.B   #$9B,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001D4C                          1440             
00001D4C                          1441              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001D4C  13FC 00B9 00004DFB      1442              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001D54  13FC 0020 00004DFC      1443              MOVE.B   #$20,GET_SRC_START_END
00001D5C                          1444  
00001D5C                          1445              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001D5C  0285 0000FE3F           1446              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001D62  0685 00000040           1447              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00001D68                          1448  
00001D68  6100 1E66               1449              BSR     GET_EA_EA_SRC      *GETS <ea>
00001D6C  163C 002C               1450              MOVE.B  #',',D3
00001D70  6100 26FC               1451              BSR     PUSH_STACK           
00001D74  6100 228A               1452              BSR     GET_EA_EA_DEST       *GETS Dn    
00001D78                          1453  
00001D78                          1454              
00001D78  6000 0002               1455              BRA     OP_LEA_RETURN
00001D7C                          1456              
00001D7C                          1457  OP_LEA_RETURN
00001D7C  4E75                    1458              RTS
00001D7E                          1459              
00001D7E                          1460  
00001D7E                          1461  
00001D7E                          1462  *---------------------------------------------------------------------------*
00001D7E                          1463  * OP_NEG: decode and display NEG 
00001D7E                          1464  *---------------------------------------------------------------------------*
00001D7E                          1465  OP_NEG      * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
00001D7E  4281                    1466              CLR.L   D1
00001D80  4284                    1467              CLR.L   D4
00001D82  2205                    1468              MOVE.L  D5,D1
00001D84                          1469              
00001D84                          1470              *CLEAR D3
00001D84  4283                    1471              CLR.L   D3
00001D86                          1472              *LOAD STACK WITH THIS OPMODE
00001D86  6100 26E6               1473              BSR     PUSH_STACK
00001D8A  163C 004E               1474              MOVE.B  #'N',D3
00001D8E  6100 26DE               1475              BSR     PUSH_STACK
00001D92  163C 0045               1476              MOVE.B  #'E',D3
00001D96  6100 26D6               1477              BSR     PUSH_STACK
00001D9A  163C 0047               1478              MOVE.B  #'G',D3
00001D9E  6100 26CE               1479              BSR     PUSH_STACK
00001DA2  163C 002E               1480              MOVE.B  #'.',D3
00001DA6  6100 26C6               1481              BSR     PUSH_STACK
00001DAA                          1482              
00001DAA                          1483              
00001DAA  EC99                    1484              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001DAC  0281 00000007           1485              ANDI.L  #$07,D1
00001DB2                          1486              
00001DB2  0C01 0000               1487              CMPI.B  #0,D1
00001DB6  6700 0012               1488              BEQ     OP_NEG_B    * size is byte
00001DBA  0C01 0001               1489              CMPI.B  #1,D1
00001DBE  6700 0016               1490              BEQ     OP_NEG_W    * size is word
00001DC2  0C01 0002               1491              CMPI.B  #2,D1
00001DC6  6700 001A               1492              BEQ     OP_NEG_L    * size is long
00001DCA                          1493                         
00001DCA                          1494  
00001DCA                          1495  OP_NEG_B    * size is byte   
00001DCA  163C 0042               1496              MOVE.B  #'B',D3
00001DCE  6100 269E               1497              BSR     PUSH_STACK
00001DD2  6000 001A               1498              BRA     OP_NEG_PRINT_EA
00001DD6                          1499  
00001DD6                          1500              
00001DD6                          1501  OP_NEG_W    * size is word
00001DD6  163C 0057               1502              MOVE.B  #'W',D3
00001DDA  6100 2692               1503              BSR     PUSH_STACK
00001DDE  6000 000E               1504              BRA     OP_NEG_PRINT_EA
00001DE2                          1505  
00001DE2                          1506              
00001DE2                          1507  OP_NEG_L    * size is long
00001DE2  163C 004C               1508              MOVE.B  #'L',D3
00001DE6  6100 2686               1509              BSR     PUSH_STACK
00001DEA  6000 0002               1510              BRA     OP_NEG_PRINT_EA
00001DEE                          1511  
00001DEE                          1512  
00001DEE                          1513  OP_NEG_PRINT_EA
00001DEE                          1514   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001DEE  13FC 0082 00004DF9      1515             MOVE.B   #$82,SRC_REGISTER_FORMAT
00001DF6                          1516             
00001DF6                          1517             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001DF6  13FC 0020 00004DFC      1518             MOVE.B   #$20,GET_SRC_START_END
00001DFE                          1519                         
00001DFE                          1520  
00001DFE  6100 1DD0               1521              BSR     GET_EA_EA_SRC
00001E02                          1522              
00001E02  4E75                    1523              RTS
00001E04                          1524  
00001E04                          1525  *---------------------------------------------------------------------------*
00001E04                          1526  * OP_NOT: decode and display NOT 
00001E04                          1527  *---------------------------------------------------------------------------*
00001E04                          1528  OP_NOT
00001E04  4281                    1529              CLR.L   D1
00001E06  4284                    1530              CLR.L   D4
00001E08  2205                    1531              MOVE.L  D5,D1
00001E0A                          1532              
00001E0A                          1533              *CLEAR D3
00001E0A  4283                    1534              CLR.L   D3
00001E0C                          1535              *LOAD STACK WITH THIS OPMODE
00001E0C  6100 2660               1536              BSR     PUSH_STACK
00001E10  163C 004E               1537              MOVE.B  #'N',D3
00001E14  6100 2658               1538              BSR     PUSH_STACK
00001E18  163C 004F               1539              MOVE.B  #'O',D3
00001E1C  6100 2650               1540              BSR     PUSH_STACK
00001E20  163C 0054               1541              MOVE.B  #'T',D3
00001E24  6100 2648               1542              BSR     PUSH_STACK
00001E28  163C 002E               1543              MOVE.B  #'.',D3
00001E2C  6100 2640               1544              BSR     PUSH_STACK
00001E30                          1545              
00001E30                          1546              
00001E30  EC99                    1547              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001E32  0281 00000007           1548              ANDI.L  #$07,D1
00001E38                          1549              
00001E38  0C01 0000               1550              CMPI.B  #0,D1
00001E3C  6700 0012               1551              BEQ     OP_NOT_B    * size is byte
00001E40  0C01 0001               1552              CMPI.B  #1,D1
00001E44  6700 0016               1553              BEQ     OP_NOT_W    * size is word
00001E48  0C01 0002               1554              CMPI.B  #2,D1
00001E4C  6700 001A               1555              BEQ     OP_NOT_L    * size is long
00001E50                          1556                         
00001E50                          1557  
00001E50                          1558  OP_NOT_B    * size is byte   
00001E50  163C 0042               1559              MOVE.B  #'B',D3
00001E54  6100 2618               1560              BSR     PUSH_STACK
00001E58  6000 001A               1561              BRA     OP_NOT_PRINT_EA
00001E5C                          1562  
00001E5C                          1563              
00001E5C                          1564  OP_NOT_W    * size is word
00001E5C  163C 0057               1565              MOVE.B  #'W',D3
00001E60  6100 260C               1566              BSR     PUSH_STACK
00001E64  6000 000E               1567              BRA     OP_NOT_PRINT_EA
00001E68                          1568  
00001E68                          1569              
00001E68                          1570  OP_NOT_L    * size is long
00001E68  163C 004C               1571              MOVE.B  #'L',D3
00001E6C  6100 2600               1572              BSR     PUSH_STACK
00001E70  6000 0002               1573              BRA     OP_NOT_PRINT_EA
00001E74                          1574  
00001E74                          1575  
00001E74                          1576  OP_NOT_PRINT_EA
00001E74                          1577   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001E74  13FC 0082 00004DF9      1578             MOVE.B   #$82,SRC_REGISTER_FORMAT
00001E7C                          1579             
00001E7C                          1580             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001E7C  13FC 0020 00004DFC      1581             MOVE.B   #$20,GET_SRC_START_END
00001E84  6100 1D4A               1582              BSR     GET_EA_EA_SRC
00001E88                          1583              
00001E88  4E75                    1584              RTS
00001E8A                          1585  
00001E8A                          1586  
00001E8A                          1587  *---------------------------------------------------------------------------*
00001E8A                          1588  * OP_JSR: display JSR     
00001E8A                          1589  *---------------------------------------------------------------------------*
00001E8A  43F9 00004B73           1590  OP_JSR      LEA     DISP_JSR,A1
00001E90  103C 000E               1591              MOVE.B  #14,D0
00001E94  4E4F                    1592              TRAP    #15
00001E96  4EB9 00003720           1593              JSR     EA_NOSRC
00001E9C                          1594  
00001E9C  4E75                    1595              RTS
00001E9E                          1596  
00001E9E                          1597  *---------------------------------------------------------------------------*
00001E9E                          1598  * OP_RTS: display RTS     
00001E9E                          1599  *---------------------------------------------------------------------------* 
00001E9E                          1600  OP_RTS      
00001E9E  163C 0052               1601              MOVE.B #'R',D3
00001EA2  6100 25CA               1602              BSR     PUSH_STACK
00001EA6  163C 0054               1603              MOVE.B #'T',D3
00001EAA  6100 25C2               1604              BSR     PUSH_STACK
00001EAE  163C 0053               1605              MOVE.B #'S',D3
00001EB2  6100 25BA               1606              BSR     PUSH_STACK
00001EB6  4E75                    1607              RTS
00001EB8                          1608  
00001EB8                          1609  *---------------------------------------------------------------------------*
00001EB8                          1610  * OP0101: decode ADDQ
00001EB8                          1611  *---------------------------------------------------------------------------* 
00001EB8                          1612  OP0101      
00001EB8                          1613             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001EB8  13FC 0082 00004DF8      1614             MOVE.B   #$82,DEST_REGISTER_FORMAT
00001EC0  13FC 0080 00004DF9      1615             MOVE.B   #$80,SRC_REGISTER_FORMAT
00001EC8                          1616             
00001EC8                          1617             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001EC8  13FC 00B9 00004DFB      1618             MOVE.B   #$B9,GET_DST_START_END
00001ED0  13FC 0020 00004DFC      1619             MOVE.B   #$20,GET_SRC_START_END
00001ED8                          1620             
00001ED8                          1621              *CLEAR D3
00001ED8  4283                    1622              CLR.L   D3
00001EDA                          1623              *LOAD STACK WITH THIS OPMODE
00001EDA  6100 2592               1624              BSR     PUSH_STACK
00001EDE  163C 0041               1625              MOVE.B  #'A',D3
00001EE2  6100 258A               1626              BSR     PUSH_STACK
00001EE6  163C 0044               1627              MOVE.B  #'D',D3
00001EEA  6100 2582               1628              BSR     PUSH_STACK
00001EEE  163C 0044               1629              MOVE.B  #'D',D3
00001EF2  6100 257A               1630              BSR     PUSH_STACK
00001EF6  163C 0051               1631              MOVE.B  #'Q',D3
00001EFA  6100 2572               1632              BSR     PUSH_STACK
00001EFE  163C 002E               1633              MOVE.B  #'.',D3
00001F02  6100 256A               1634              BSR     PUSH_STACK
00001F06                          1635              
00001F06                          1636              *FIGURE OUT SIZE*
00001F06                          1637              *00 = BYTE
00001F06                          1638              *01 = WORD
00001F06                          1639              *10 = LONG
00001F06                          1640              * BITS 7&6
00001F06                          1641              
00001F06                          1642              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
00001F06  2205                    1643              MOVE.L  D5,D1
00001F08  EC99                    1644              ROR.L   #6,D1
00001F0A  0281 00000003           1645              ANDI.L  #$03,D1
00001F10  0C01 0000               1646              CMPI.B  #%00,D1
00001F14  6700 001E               1647              BEQ     OP0101_ADDQ_B
00001F18  0281 00000003           1648              ANDI.L  #$03,D1
00001F1E  0C01 0001               1649              CMPI.B  #%01,D1
00001F22  6700 001C               1650              BEQ     OP0101_ADDQ_W
00001F26  0281 00000003           1651              ANDI.L  #$03,D1
00001F2C  0C01 0002               1652              CMPI.B  #%10,D1
00001F30  6700 001A               1653              BEQ     OP0101_ADDQ_L
00001F34                          1654            
00001F34                          1655  OP0101_ADDQ_B
00001F34                          1656              
00001F34  163C 0042               1657              MOVE.B  #'B',D3
00001F38  6100 2534               1658              BSR     PUSH_STACK
00001F3C  6000 0016               1659              BRA     OP0101_RETURN
00001F40                          1660  OP0101_ADDQ_W
00001F40                          1661              
00001F40  163C 0057               1662              MOVE.B  #'W',D3
00001F44  6100 2528               1663              BSR     PUSH_STACK
00001F48  6000 000A               1664              BRA     OP0101_RETURN
00001F4C                          1665  OP0101_ADDQ_L
00001F4C                          1666              
00001F4C  163C 004C               1667              MOVE.B  #'L',D3
00001F50  6100 251C               1668              BSR     PUSH_STACK
00001F54                          1669  OP0101_RETURN            
00001F54                          1670  
00001F54                          1671              
00001F54                          1672  *GET DATA FROM ADDQ AND PRINT #0-8
00001F54  163C 0020               1673              MOVE.B  #' ',D3
00001F58  6100 2514               1674              BSR     PUSH_STACK
00001F5C  163C 0023               1675              MOVE.B  #'#',D3
00001F60  6100 250C               1676              BSR     PUSH_STACK 
00001F64                          1677  
00001F64                          1678                       
00001F64                          1679              *GET DATA #   
00001F64  2205                    1680              MOVE.L  D5,D1
00001F66  EC99                    1681              ROR.L   #6,D1            
00001F68  E699                    1682              ROR.L   #3,D1
00001F6A  0281 00000007           1683              ANDI.L  #$07,D1
00001F70                          1684              
00001F70  0C01 0000               1685              CMPI.B  #%000,D1
00001F74  6700 009A               1686              BEQ     OP0101_ADDQ_B_8
00001F78  0C01 0001               1687              CMPI.B  #%001,D1
00001F7C  6700 003E               1688              BEQ     OP0101_ADDQ_B_1
00001F80  0C01 0002               1689              CMPI.B  #%010,D1
00001F84  6700 0042               1690              BEQ     OP0101_ADDQ_B_2
00001F88  0C01 0003               1691              CMPI.B  #%011,D1
00001F8C  6700 0046               1692              BEQ     OP0101_ADDQ_B_3
00001F90  0C01 0004               1693              CMPI.B  #%100,D1
00001F94  6700 004A               1694              BEQ     OP0101_ADDQ_B_4
00001F98  0C01 0005               1695              CMPI.B  #%101,D1
00001F9C  6700 004E               1696              BEQ     OP0101_ADDQ_B_5
00001FA0  0C01 0006               1697              CMPI.B  #%110,D1
00001FA4  6700 0052               1698              BEQ     OP0101_ADDQ_B_6
00001FA8  0C01 0007               1699              CMPI.B  #%111,D1
00001FAC  6700 0056               1700              BEQ     OP0101_ADDQ_B_7
00001FB0                          1701              
00001FB0                          1702  OP0101_ADDQ_B_0
00001FB0  163C 0030               1703              MOVE.B  #'0',D3
00001FB4  6100 24B8               1704              BSR     PUSH_STACK
00001FB8  6000 005E               1705              BRA     OP0101_RETURN2            
00001FBC                          1706  OP0101_ADDQ_B_1
00001FBC  163C 0031               1707              MOVE.B  #'1',D3
00001FC0  6100 24AC               1708              BSR     PUSH_STACK
00001FC4  6000 0052               1709              BRA     OP0101_RETURN2            
00001FC8                          1710  OP0101_ADDQ_B_2
00001FC8  163C 0032               1711              MOVE.B  #'2',D3
00001FCC  6100 24A0               1712              BSR     PUSH_STACK
00001FD0  6000 0046               1713              BRA     OP0101_RETURN2            
00001FD4                          1714  OP0101_ADDQ_B_3
00001FD4  163C 0033               1715              MOVE.B  #'3',D3
00001FD8  6100 2494               1716              BSR     PUSH_STACK
00001FDC  6000 003A               1717              BRA     OP0101_RETURN2            
00001FE0                          1718  OP0101_ADDQ_B_4
00001FE0  163C 0034               1719              MOVE.B  #'4',D3
00001FE4  6100 2488               1720              BSR     PUSH_STACK
00001FE8  6000 002E               1721              BRA     OP0101_RETURN2            
00001FEC                          1722  OP0101_ADDQ_B_5
00001FEC  163C 0035               1723              MOVE.B  #'5',D3
00001FF0  6100 247C               1724              BSR     PUSH_STACK
00001FF4  6000 0022               1725              BRA     OP0101_RETURN2
00001FF8                          1726  OP0101_ADDQ_B_6
00001FF8  163C 0036               1727              MOVE.B  #'6',D3
00001FFC  6100 2470               1728              BSR     PUSH_STACK
00002000  6000 0016               1729              BRA     OP0101_RETURN2
00002004                          1730  OP0101_ADDQ_B_7
00002004  163C 0037               1731              MOVE.B  #'7',D3
00002008  6100 2464               1732              BSR     PUSH_STACK
0000200C  6000 000A               1733              BRA     OP0101_RETURN2
00002010                          1734  
00002010                          1735  OP0101_ADDQ_B_8
00002010  163C 0038               1736              MOVE.B  #'8',D3
00002014  6100 2458               1737              BSR     PUSH_STACK
00002018                          1738              
00002018                          1739  OP0101_RETURN2            
00002018  163C 002C               1740              MOVE.B  #',',D3
0000201C  6100 2450               1741              BSR     PUSH_STACK
00002020  6100 1BAE               1742              BSR     GET_EA_EA_SRC
00002024                          1743              
00002024  4E75                    1744              RTS
00002026                          1745  
00002026                          1746  
00002026                          1747              
00002026                          1748  *---------------------------------------------------------------------------*
00002026                          1749  * OP_ADDQ: display ADDQ
00002026                          1750  *---------------------------------------------------------------------------*              
00002026                          1751  OP_ADDQ_B    * size is byte   
00002026  183C 0000               1752              MOVE.B  #0,D4 
0000202A  43F9 00004BCD           1753              LEA     DISP_ADDQ_B,A1
00002030  103C 000E               1754              MOVE.B  #14,D0
00002034  4E4F                    1755              TRAP    #15
00002036  4E75                    1756              RTS
00002038                          1757              
00002038                          1758  OP_ADDQ_W    * size is word
00002038  183C 0001               1759              MOVE.B  #1,D4
0000203C  43F9 00004BD7           1760              LEA     DISP_ADDQ_W,A1
00002042  103C 000E               1761              MOVE.B  #14,D0
00002046  4E4F                    1762              TRAP    #15
00002048  4E75                    1763              RTS
0000204A                          1764              
0000204A                          1765  OP_ADDQ_L    * size is long
0000204A  183C 0002               1766              MOVE.B  #2,D4
0000204E  43F9 00004BE1           1767              LEA     DISP_ADDQ_L,A1
00002054  103C 000E               1768              MOVE.B  #14,D0
00002058  4E4F                    1769              TRAP    #15
0000205A  4E75                    1770              RTS
0000205C                          1771  
0000205C                          1772  *---------------------------------------------------------------------------*
0000205C                          1773  * OP0110: decode BRA/BEQ/BNE/BLT/BHI
0000205C                          1774  *---------------------------------------------------------------------------*              
0000205C  4280                    1775  OP0110      CLR.L   D0                  
0000205E  4281                    1776              CLR.L   D1   
00002060  4284                    1777              CLR.L   D4                 
00002062  227C 00000000           1778              MOVEA.L #0,A1
00002068  2205                    1779              MOVE.L  D5, D1                
0000206A  0281 000000FF           1780              ANDI.L  #$00FF, D1              * Get 8-bit displacement 
00002070  2205                    1781              MOVE.L  D5,D1                  
00002072  0281 00000F00           1782              ANDI.L  #$0F00,D1
00002078                          1783                 
00002078  0C41 0000               1784              CMPI.W  #$0000,D1               * Check for BRA
0000207C  6700 0098               1785              BEQ     OP_BRA                  
00002080                          1786                          
00002080  0C41 0D00               1787              CMPI.W  #$0D00,D1               * Check for BLT
00002084  6700 00B6               1788              BEQ     OP_BLT      
00002088                          1789  
00002088  0C41 0700               1790              CMPI.W  #$0700,D1               * Check for BEQ
0000208C  6700 0062               1791              BEQ     OP_BEQ      
00002090                          1792  
00002090  0C41 0600               1793              CMPI.W  #$0600,D1               * Check for BNE
00002094  6700 0034               1794              BEQ     OP_BNE  
00002098                          1795              
00002098  0C41 0200               1796              CMPI.W  #$0200,D1               * Check for BHI
0000209C  6700 0006               1797              BEQ     OP_BHI
000020A0                          1798  
000020A0  4EF8 17DE               1799              JMP     OP_DATA
000020A4                          1800              
000020A4  163C 0042               1801  OP_BHI      MOVE.B  #'B',D3
000020A8  6100 23C4               1802              BSR     PUSH_STACK
000020AC  163C 0048               1803              MOVE.B  #'H',D3
000020B0  6100 23BC               1804              BSR     PUSH_STACK
000020B4  163C 0049               1805              MOVE.B  #'I',D3
000020B8  6100 23B4               1806              BSR     PUSH_STACK
000020BC  163C 0009               1807              MOVE.B  #$9,D3
000020C0  6100 23AC               1808              BSR     PUSH_STACK
000020C4  6100 2426               1809              BSR     GET_DISPLACEMENT_ADDRESS
000020C8  4E75                    1810              RTS
000020CA                          1811  
000020CA  163C 0042               1812  OP_BNE      MOVE.B  #'B',D3
000020CE  6100 239E               1813              BSR     PUSH_STACK
000020D2  163C 004E               1814              MOVE.B  #'N',D3
000020D6  6100 2396               1815              BSR     PUSH_STACK
000020DA  163C 0045               1816              MOVE.B  #'E',D3
000020DE  6100 238E               1817              BSR     PUSH_STACK
000020E2  163C 0009               1818              MOVE.B  #$9,D3
000020E6  6100 2386               1819              BSR     PUSH_STACK
000020EA  6100 2400               1820              BSR     GET_DISPLACEMENT_ADDRESS
000020EE  4E75                    1821              RTS
000020F0                          1822  
000020F0  163C 0042               1823  OP_BEQ      MOVE.B  #'B',D3
000020F4  6100 2378               1824              BSR     PUSH_STACK
000020F8  163C 0045               1825              MOVE.B  #'E',D3
000020FC  6100 2370               1826              BSR     PUSH_STACK
00002100  163C 0051               1827              MOVE.B  #'Q',D3
00002104  6100 2368               1828              BSR     PUSH_STACK
00002108  163C 0009               1829              MOVE.B  #$9,D3
0000210C  6100 2360               1830              BSR     PUSH_STACK
00002110  6100 23DA               1831              BSR     GET_DISPLACEMENT_ADDRESS
00002114  4E75                    1832              RTS          
00002116                          1833                          
00002116                          1834  OP_BRA      
00002116  163C 0042               1835              MOVE.B  #'B',D3
0000211A  6100 2352               1836              BSR     PUSH_STACK
0000211E  163C 0052               1837              MOVE.B  #'R',D3
00002122  6100 234A               1838              BSR     PUSH_STACK
00002126  163C 0041               1839              MOVE.B  #'A',D3
0000212A  6100 2342               1840              BSR     PUSH_STACK
0000212E  163C 0009               1841              MOVE.B  #$9,D3
00002132  6100 233A               1842              BSR     PUSH_STACK
00002136  6100 23B4               1843              BSR     GET_DISPLACEMENT_ADDRESS
0000213A                          1844              
0000213A  4E75                    1845              RTS
0000213C                          1846              
0000213C  163C 0042               1847  OP_BLT      MOVE.B  #'B',D3
00002140  6100 232C               1848              BSR     PUSH_STACK
00002144  163C 004C               1849              MOVE.B  #'L',D3
00002148  6100 2324               1850              BSR     PUSH_STACK
0000214C  163C 0054               1851              MOVE.B  #'T',D3
00002150  6100 231C               1852              BSR     PUSH_STACK
00002154  163C 0009               1853              MOVE.B  #$9,D3
00002158  6100 2314               1854              BSR     PUSH_STACK
0000215C  6100 238E               1855              BSR     GET_DISPLACEMENT_ADDRESS
00002160  4E75                    1856              RTS
00002162                          1857     
00002162                          1858  *---------------------------------------------------------------------------*
00002162                          1859  * OP0111 : MOVEQ not required
00002162                          1860  *---------------------------------------------------------------------------*           
00002162  4EF8 17DE               1861  OP0111      JMP     OP_DATA
00002166                          1862             
00002166                          1863  *---------------------------------------------------------------------------*
00002166                          1864  * OP1000 : decode DIVS
00002166                          1865  *---------------------------------------------------------------------------*           
00002166                          1866  OP1000                           
00002166  4281                    1867              CLR.L   D1       
00002168  4284                    1868              CLR.L   D4                   
0000216A  227C 00000000           1869              MOVEA.L #0, A1              
00002170  2205                    1870              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
00002172                          1871              *CLEAR D3
00002172  4283                    1872              CLR.L   D3
00002174                          1873  
00002174                          1874  OP1000_DIVS_DN_EA_OR_EA_DN 
00002174                          1875              *LOAD STACK WITH THIS OPMODE
00002174  6100 22F8               1876              BSR     PUSH_STACK
00002178  163C 0044               1877              MOVE.B  #'D',D3
0000217C  6100 22F0               1878              BSR     PUSH_STACK
00002180  163C 0049               1879              MOVE.B  #'I',D3
00002184  6100 22E8               1880              BSR     PUSH_STACK
00002188  163C 0056               1881              MOVE.B  #'V',D3
0000218C  6100 22E0               1882              BSR     PUSH_STACK
00002190  163C 0053               1883              MOVE.B  #'S',D3
00002194  6100 22D8               1884              BSR     PUSH_STACK
00002198  163C 002E               1885              MOVE.B  #'.',D3
0000219C  6100 22D0               1886              BSR     PUSH_STACK
000021A0                          1887              
000021A0  2205                    1888              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
000021A2                          1889              
000021A2                          1890  OP1000_EA_DN_DIVS
000021A2                          1891              *BITS (7 TO 6) 
000021A2                          1892              *00 = .B
000021A2                          1893              *01 = .W
000021A2                          1894              *10 = .L 
000021A2  2205                    1895              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
000021A4  EC99                    1896              ROR.L   #6,D1
000021A6  0281 00000003           1897              ANDI.L  #$03,D1
000021AC  0C81 00000003           1898              CMPI.L  #%11,D1 *EQUALS .W
000021B2  6700 0014               1899              BEQ     OP1000_PRINT_W_DIVS
000021B6  0C81 00000000           1900              CMPI.L  #%00,D1 *EQUALS .L
000021BC  6700 0052               1901              BEQ     OP1000_PRINT_L_DIVS
000021C0                          1902              
000021C0  183C 0001               1903              MOVE.B  #1,D4               *ERROR READ
000021C4  6000 0092               1904              BRA     OP1000_DIVS_RETURN
000021C8                          1905  OP1000_PRINT_W_DIVS
000021C8  163C 0057               1906              MOVE.B  #'W',D3
000021CC  6100 22A0               1907              BSR     PUSH_STACK
000021D0                          1908  
000021D0                          1909              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000021D0  13FC 0000 00004DF8      1910              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000021D8  13FC 0000 00004DF9      1911              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000021E0                          1912             
000021E0                          1913              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000021E0  13FC 00B9 00004DFB      1914              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000021E8  13FC 0020 00004DFC      1915              MOVE.B   #$20,GET_SRC_START_END
000021F0                          1916  
000021F0                          1917             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000021F0  0285 0000FE3F           1918              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000021F6  0685 00000000           1919              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
000021FC                          1920  
000021FC                          1921              
000021FC  6100 19D2               1922              BSR     GET_EA_EA_SRC      *GETS <ea>
00002200  163C 002C               1923              MOVE.B  #',',D3
00002204  6100 2268               1924              BSR     PUSH_STACK
00002208  6100 1DF6               1925              BSR     GET_EA_EA_DEST       *GETS Dn    
0000220C                          1926              
0000220C  6000 004A               1927              BRA     OP1000_DIVS_RETURN
00002210                          1928  OP1000_PRINT_L_DIVS
00002210  163C 004C               1929              MOVE.B  #'L',D3
00002214  6100 2258               1930              BSR     PUSH_STACK
00002218                          1931              
00002218                          1932              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002218  13FC 0000 00004DF8      1933              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002220  13FC 0000 00004DF9      1934              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002228                          1935             
00002228                          1936              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002228  13FC 00B9 00004DFB      1937              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002230  13FC 0020 00004DFC      1938              MOVE.B   #$20,GET_SRC_START_END
00002238                          1939  
00002238                          1940              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002238  0285 0000FE3F           1941              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000223E  0685 00000000           1942              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002244                          1943  
00002244                          1944                     
00002244  6100 198A               1945              BSR     GET_EA_EA_SRC      *GETS <ea>
00002248  163C 002C               1946              MOVE.B  #',',D3
0000224C  6100 2220               1947              BSR     PUSH_STACK                  
00002250  6100 1DAE               1948              BSR     GET_EA_EA_DEST       *GETS Dn    
00002254                          1949  
00002254                          1950              
00002254  6000 0002               1951              BRA     OP1000_DIVS_RETURN
00002258                          1952              
00002258                          1953  OP1000_DIVS_RETURN
00002258  4E75                    1954              RTS
0000225A                          1955              
0000225A                          1956  
0000225A                          1957  
0000225A                          1958  *---------------------------------------------------------------------------*
0000225A                          1959  * OP_DIVS: display DIVS and proceed to EA
0000225A                          1960  *---------------------------------------------------------------------------*  
0000225A  43F9 00004BEB           1961  OP_DIVS     LEA     DISP_DIVS,A1
00002260  103C 000E               1962              MOVE.B  #14,D0
00002264  4E4F                    1963              TRAP    #15
00002266  4EF9 00003734           1964              JMP     EA_ARITH
0000226C                          1965  
0000226C  4E75                    1966              RTS
0000226E                          1967              
0000226E                          1968  *---------------------------------------------------------------------------*
0000226E                          1969  * OP1001: decode SUB/SUBA
0000226E                          1970  *---------------------------------------------------------------------------*      
0000226E                          1971  OP1001      
0000226E  4280                    1972              CLR.L   D0                  
00002270  4281                    1973              CLR.L   D1       
00002272  4284                    1974              CLR.L   D4                   
00002274  227C 00000000           1975              MOVEA.L #0, A1              
0000227A  2205                    1976              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
0000227C                          1977              
0000227C                          1978              *CLEAR D3
0000227C  4283                    1979              CLR.L   D3
0000227E                          1980              
0000227E                          1981              
0000227E                          1982              
0000227E                          1983              **INTEGRATING SUB.W/.L INTO THIS CODE**
0000227E  2205                    1984              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00002280                          1985              *BITS (INDEX 8) 
00002280                          1986              *0 = ADD.B/W/L <EA>,Dn
00002280                          1987              *1 = ADD.B/W/L Dn,<EA> 
00002280  EC99                    1988              ROR.L   #6,D1
00002282  0281 00000007           1989              ANDI.L  #$07,D1                 *MASKS WITH 00000111
00002288  0C81 00000007           1990              CMPI.L  #$07,D1                 *IF EQUALS <ea>,Dn
0000228E  6700 0010               1991              BEQ     OP1001_SUBA_L            *BRANCHES TO ADDA.L
00002292  0C81 00000003           1992              CMPI.L  #$03,D1                 *IF EQUALS <ea>,Dn
00002298  6700 0078               1993              BEQ     OP1001_SUBA_W           *BRANCHES TO ADDA.W
0000229C  6000 00E6               1994              BRA     OP1001_DETERMINE_DN_EA_OR_EA_DN         *ELSE CHECK ADD.B/.W/.L
000022A0                          1995              
000022A0                          1996  OP1001_SUBA_L
000022A0                          1997              *LOAD STACK WITH THIS OPMODE
000022A0  6100 21CC               1998              BSR     PUSH_STACK
000022A4  163C 0053               1999              MOVE.B  #'S',D3
000022A8  6100 21C4               2000              BSR     PUSH_STACK
000022AC  163C 0055               2001              MOVE.B  #'U',D3
000022B0  6100 21BC               2002              BSR     PUSH_STACK
000022B4  163C 0042               2003              MOVE.B  #'B',D3
000022B8  6100 21B4               2004              BSR     PUSH_STACK
000022BC  163C 0041               2005              MOVE.B  #'A',D3
000022C0  6100 21AC               2006              BSR     PUSH_STACK
000022C4  163C 002E               2007              MOVE.B  #'.',D3
000022C8  6100 21A4               2008              BSR     PUSH_STACK
000022CC  163C 004C               2009              MOVE.B  #'L',D3
000022D0  6100 219C               2010              BSR     PUSH_STACK
000022D4                          2011              
000022D4                          2012             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000022D4  13FC 0000 00004DF8      2013             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000022DC  13FC 0000 00004DF9      2014             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000022E4                          2015             
000022E4                          2016             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000022E4  13FC 00B9 00004DFB      2017             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000022EC  13FC 0020 00004DFC      2018             MOVE.B   #$20,GET_SRC_START_END
000022F4                          2019  
000022F4                          2020              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000022F4  0285 0000FE3F           2021              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000022FA  0685 00000040           2022              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002300                          2023       
00002300                          2024              *PRINT <EA>,AN
00002300  6100 18CE               2025              BSR     GET_EA_EA_SRC       *GETS <ea>
00002304  163C 002C               2026              MOVE.B  #',',D3
00002308  6100 2164               2027              BSR     PUSH_STACK                     
0000230C  6100 1CF2               2028              BSR     GET_EA_EA_DEST      *GETS Dn
00002310                          2029  
00002310                          2030              
00002310                          2031              
00002310  4E75                    2032              RTS
00002312                          2033  OP1001_SUBA_W
00002312                          2034              *LOAD STACK WITH THIS OPMODE
00002312  6100 215A               2035              BSR     PUSH_STACK
00002316  163C 0053               2036              MOVE.B  #'S',D3
0000231A  6100 2152               2037              BSR     PUSH_STACK
0000231E  163C 0055               2038              MOVE.B  #'U',D3
00002322  6100 214A               2039              BSR     PUSH_STACK
00002326  163C 0042               2040              MOVE.B  #'B',D3
0000232A  6100 2142               2041              BSR     PUSH_STACK
0000232E  163C 0041               2042              MOVE.B  #'A',D3
00002332  6100 213A               2043              BSR     PUSH_STACK
00002336  163C 002E               2044              MOVE.B  #'.',D3
0000233A  6100 2132               2045              BSR     PUSH_STACK
0000233E  163C 0057               2046              MOVE.B  #'W',D3
00002342  6100 212A               2047              BSR     PUSH_STACK
00002346                          2048              
00002346                          2049             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002346  13FC 0000 00004DF8      2050             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000234E  13FC 0000 00004DF9      2051             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002356                          2052             
00002356                          2053             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002356  13FC 00B9 00004DFB      2054             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000235E  13FC 0020 00004DFC      2055             MOVE.B   #$20,GET_SRC_START_END
00002366                          2056  
00002366                          2057              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002366  0285 0000FE3F           2058              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000236C  0685 00000040           2059              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002372                          2060       
00002372                          2061              *PRINT <EA>,AN
00002372  6100 185C               2062              BSR     GET_EA_EA_SRC       *GETS <ea>
00002376  163C 002C               2063              MOVE.B  #',',D3
0000237A  6100 20F2               2064              BSR     PUSH_STACK                     
0000237E  6100 1C80               2065              BSR     GET_EA_EA_DEST      *GETS Dn
00002382                          2066  
00002382  4E75                    2067              RTS
00002384                          2068  
00002384                          2069  OP1001_DETERMINE_DN_EA_OR_EA_DN 
00002384                          2070              *LOAD STACK WITH THIS OPMODE
00002384  6100 20E8               2071              BSR     PUSH_STACK
00002388  163C 0053               2072              MOVE.B  #'S',D3
0000238C  6100 20E0               2073              BSR     PUSH_STACK
00002390  163C 0055               2074              MOVE.B  #'U',D3
00002394  6100 20D8               2075              BSR     PUSH_STACK
00002398  163C 0042               2076              MOVE.B  #'B',D3
0000239C  6100 20D0               2077              BSR     PUSH_STACK
000023A0  163C 002E               2078              MOVE.B  #'.',D3
000023A4  6100 20C8               2079              BSR     PUSH_STACK
000023A8                          2080              
000023A8  2205                    2081              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
000023AA                          2082              
000023AA                          2083              *BITS (INDEX 8) 
000023AA                          2084              *0 = ADD.B/W/L <EA>,Dn
000023AA                          2085              *1 = ADD.B/W/L Dn,<EA> 
000023AA  E099                    2086              ROR.L   #8,D1
000023AC  0281 00000001           2087              ANDI.L  #$01,D1     *MASKS WITH 00000001
000023B2  0C81 00000000           2088              CMPI.L  #$00,D1     *IF EQUALS <ea>,Dn
000023B8  6700 0102               2089              BEQ     OP1001_EA_DN
000023BC                          2090              *else procede to Dn_EA
000023BC                          2091              
000023BC                          2092  OP1001_DN_EA
000023BC                          2093              *BITS (7 TO 6) 
000023BC                          2094              *00 = .B
000023BC                          2095              *01 = .W
000023BC                          2096              *10 = .L 
000023BC  2205                    2097              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
000023BE  EC99                    2098              ROR.L   #6,D1
000023C0  0281 00000003           2099              ANDI.L  #$03,D1
000023C6  0C81 00000000           2100              CMPI.L  #$00,D1 *EQUALS .B
000023CC  6700 0016               2101              BEQ     OP1001_PRINT_B2
000023D0  0C81 00000001           2102              CMPI.L  #$01,D1 *EQUALS .W
000023D6  6700 0054               2103              BEQ     OP1001_PRINT_W2
000023DA  0C81 00000002           2104              CMPI.L  #$02,D1 *EQUALS .L
000023E0  6700 0092               2105              BEQ     OP1001_PRINT_L2
000023E4                          2106  OP1001_PRINT_B2
000023E4                          2107              *PUSH 'B'
000023E4  163C 0042               2108              MOVE.B  #'B',D3
000023E8  6100 2084               2109              BSR     PUSH_STACK
000023EC                          2110             
000023EC                          2111              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000023EC  13FC 0000 00004DF8      2112             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000023F4  13FC 0083 00004DF9      2113             MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000023FC                          2114             
000023FC                          2115             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000023FC  13FC 00B9 00004DFB      2116             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002404  13FC 0020 00004DFC      2117             MOVE.B   #$20,GET_SRC_START_END
0000240C                          2118  
0000240C                          2119              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000240C  0285 0000FE3F           2120              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002412  0685 00000040           2121              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002418                          2122       
00002418  6100 1BE6               2123              BSR     GET_EA_EA_DEST      *GETS Dn
0000241C  163C 002C               2124              MOVE.B  #',',D3
00002420  6100 204C               2125              BSR     PUSH_STACK                     
00002424  6100 17AA               2126              BSR     GET_EA_EA_SRC       *GETS <ea>
00002428                          2127  
00002428                          2128              
00002428  6000 0BA4               2129              BRA     OP1101_ADD_RETURN
0000242C                          2130  OP1001_PRINT_W2
0000242C  163C 0057               2131              MOVE.B  #'W',D3
00002430  6100 203C               2132              BSR     PUSH_STACK
00002434                          2133  
00002434                          2134              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002434  13FC 0000 00004DF8      2135              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000243C  13FC 0083 00004DF9      2136              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002444                          2137             
00002444                          2138              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002444  13FC 00B9 00004DFB      2139              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000244C  13FC 0020 00004DFC      2140              MOVE.B   #$20,GET_SRC_START_END
00002454                          2141  
00002454                          2142              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002454  0285 0000FE3F           2143              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000245A  0685 00000040           2144              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A An Register (001) 
00002460                          2145  
00002460                          2146        
00002460  6100 1B9E               2147              BSR     GET_EA_EA_DEST      *GETS Dn
00002464  163C 002C               2148              MOVE.B  #',',D3
00002468  6100 2004               2149              BSR     PUSH_STACK               
0000246C  6100 1762               2150              BSR     GET_EA_EA_SRC       *GETS <ea>       
00002470                          2151  
00002470                          2152  
00002470                          2153  
00002470  6000 0B5C               2154              BRA     OP1101_ADD_RETURN
00002474                          2155  OP1001_PRINT_L2 
00002474  163C 004C               2156              MOVE.B  #'L',D3
00002478  6100 1FF4               2157              BSR     PUSH_STACK
0000247C                          2158              
0000247C                          2159              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000247C  13FC 0000 00004DF8      2160              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002484  13FC 0083 00004DF9      2161              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000248C                          2162             
0000248C                          2163              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000248C  13FC 00B9 00004DFB      2164              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002494  13FC 0020 00004DFC      2165              MOVE.B   #$20,GET_SRC_START_END
0000249C                          2166  
0000249C                          2167             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000249C  0285 0000FE3F           2168              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000024A2  0685 00000040           2169              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
000024A8                          2170  
000024A8                          2171               
000024A8  6100 1B56               2172              BSR     GET_EA_EA_DEST       *GETS Dn
000024AC  163C 002C               2173              MOVE.B  #',',D3
000024B0  6100 1FBC               2174              BSR     PUSH_STACK          
000024B4  6100 171A               2175              BSR     GET_EA_EA_SRC        *GETS <ea>
000024B8                          2176  
000024B8  6000 0B14               2177              BRA     OP1101_ADD_RETURN
000024BC                          2178              
000024BC                          2179  OP1001_EA_DN           
000024BC                          2180              *BITS (7 TO 6) 
000024BC                          2181              *00 = .B
000024BC                          2182              *01 = .W
000024BC                          2183              *10 = .L 
000024BC  2205                    2184              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
000024BE  EC99                    2185              ROR.L   #6,D1
000024C0  0281 00000003           2186              ANDI.L  #$03,D1
000024C6  0C81 00000000           2187              CMPI.L  #$00,D1 *EQUALS .B
000024CC  6700 0016               2188              BEQ     OP1001_PRINT_B
000024D0  0C81 00000001           2189              CMPI.L  #$01,D1 *EQUALS .W
000024D6  6700 0054               2190              BEQ     OP1001_PRINT_W
000024DA  0C81 00000002           2191              CMPI.L  #$02,D1 *EQUALS .L
000024E0  6700 0092               2192              BEQ     OP1001_PRINT_L
000024E4                          2193  OP1001_PRINT_B
000024E4  163C 0042               2194              MOVE.B  #'B',D3
000024E8  6100 1F84               2195              BSR     PUSH_STACK
000024EC                          2196                
000024EC                          2197              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000024EC  13FC 0000 00004DF8      2198              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000024F4  13FC 0002 00004DF9      2199              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000024FC                          2200             
000024FC                          2201              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000024FC  13FC 00B9 00004DFB      2202              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002504  13FC 0020 00004DFC      2203              MOVE.B   #$20,GET_SRC_START_END
0000250C                          2204  
0000250C                          2205             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000250C  0285 0000FE3F           2206              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002512  0685 00000040           2207              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "AN" Register (001) 
00002518                          2208  
00002518                          2209              
00002518  6100 16B6               2210              BSR     GET_EA_EA_SRC      *GETS <ea>
0000251C  163C 002C               2211              MOVE.B  #',',D3
00002520  6100 1F4C               2212              BSR     PUSH_STACK          
00002524  6100 1ADA               2213              BSR     GET_EA_EA_DEST       *GETS Dn
00002528                          2214              
00002528  6000 0AA4               2215              BRA     OP1101_ADD_RETURN
0000252C                          2216  OP1001_PRINT_W
0000252C  163C 0057               2217              MOVE.B  #'W',D3
00002530  6100 1F3C               2218              BSR     PUSH_STACK
00002534                          2219  
00002534                          2220              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002534  13FC 0000 00004DF8      2221              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000253C  13FC 0000 00004DF9      2222              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002544                          2223             
00002544                          2224              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002544  13FC 00B9 00004DFB      2225              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000254C  13FC 0020 00004DFC      2226              MOVE.B   #$20,GET_SRC_START_END
00002554                          2227  
00002554                          2228             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002554  0285 0000FE3F           2229              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000255A  0685 00000040           2230              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002560                          2231  
00002560                          2232              
00002560  6100 166E               2233              BSR     GET_EA_EA_SRC      *GETS <ea>
00002564  163C 002C               2234              MOVE.B  #',',D3
00002568  6100 1F04               2235              BSR     PUSH_STACK
0000256C  6100 1A92               2236              BSR     GET_EA_EA_DEST       *GETS Dn    
00002570                          2237              
00002570  6000 004A               2238              BRA     OP1001_ADD_RETURN
00002574                          2239  OP1001_PRINT_L 
00002574  163C 004C               2240              MOVE.B  #'L',D3
00002578  6100 1EF4               2241              BSR     PUSH_STACK
0000257C                          2242              
0000257C                          2243              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000257C  13FC 0000 00004DF8      2244              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002584  13FC 0000 00004DF9      2245              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000258C                          2246             
0000258C                          2247              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000258C  13FC 00B9 00004DFB      2248              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002594  13FC 0020 00004DFC      2249              MOVE.B   #$20,GET_SRC_START_END
0000259C                          2250  
0000259C                          2251              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000259C  0285 0000FE3F           2252              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000025A2  0685 00000040           2253              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
000025A8                          2254  
000025A8                          2255                     
000025A8  6100 1626               2256              BSR     GET_EA_EA_SRC      *GETS <ea>
000025AC  163C 002C               2257              MOVE.B  #',',D3
000025B0  6100 1EBC               2258              BSR     PUSH_STACK                  
000025B4  6100 1A4A               2259              BSR     GET_EA_EA_DEST       *GETS Dn    
000025B8                          2260  
000025B8                          2261              
000025B8  6000 0002               2262              BRA     OP1001_ADD_RETURN
000025BC                          2263              
000025BC                          2264  OP1001_ADD_RETURN
000025BC  4E75                    2265              RTS
000025BE                          2266  
000025BE                          2267    
000025BE                          2268  *---------------------------------------------------------------------------*
000025BE                          2269  * OP_SUB: display SUB and proceed to EA
000025BE                          2270  *---------------------------------------------------------------------------*            
000025BE  43F9 00004BF3           2271  OP_SUB_B    LEA     DISP_SUB_B,A1
000025C4  103C 000E               2272              MOVE.B  #14,D0
000025C8  4E4F                    2273              TRAP    #15
000025CA  183C 0000               2274              MOVE.B  #0,D4
000025CE  4EF9 00003780           2275              JMP     EA_GEN
000025D4                          2276  
000025D4  4E75                    2277              RTS
000025D6                          2278  
000025D6  43F9 00004BFC           2279  OP_SUB_W    LEA     DISP_SUB_W,A1
000025DC  103C 000E               2280              MOVE.B  #14,D0
000025E0  4E4F                    2281              TRAP    #15
000025E2  183C 0001               2282              MOVE.B  #1,D4
000025E6  4EF9 00003780           2283              JMP     EA_GEN
000025EC                          2284  
000025EC  4E75                    2285              RTS
000025EE                          2286  
000025EE  43F9 00004C05           2287  OP_SUB_L    LEA     DISP_SUB_L,A1
000025F4  103C 000E               2288              MOVE.B  #14,D0
000025F8  4E4F                    2289              TRAP    #15
000025FA  183C 0002               2290              MOVE.B  #2,D4
000025FE  4EF9 00003780           2291              JMP     EA_GEN
00002604                          2292  
00002604  4E75                    2293              RTS
00002606                          2294  
00002606                          2295  *---------------------------------------------------------------------------*
00002606                          2296  * OP_SUBA: display SUBA
00002606                          2297  *---------------------------------------------------------------------------*  
00002606  43F9 00004C2C           2298  OP_SUBA_W   LEA     DISP_SUBA_W,A1
0000260C  103C 000E               2299              MOVE.B  #14,D0
00002610  4E4F                    2300              TRAP    #15
00002612  183C 0001               2301              MOVE.B  #1,D4
00002616  4E75                    2302              RTS
00002618                          2303  
00002618  43F9 00004C36           2304  OP_SUBA_L   LEA     DISP_SUBA_L,A1
0000261E  103C 000E               2305              MOVE.B  #14,D0
00002622  4E4F                    2306              TRAP    #15
00002624  183C 0002               2307              MOVE.B  #2,D4
00002628  4E75                    2308              RTS         
0000262A                          2309  *---------------------------------------------------------------------------*
0000262A                          2310  * OP1010 : unassigned
0000262A                          2311  *---------------------------------------------------------------------------*           
0000262A  4EF8 17DE               2312  OP1010      JMP     OP_DATA
0000262E                          2313              
0000262E                          2314  *---------------------------------------------------------------------------*
0000262E                          2315  * OP1011 : decode CMP/EOR/CMPA
0000262E                          2316  *---------------------------------------------------------------------------*           
0000262E  4280                    2317  OP1011      CLR.L   D0                
00002630  4281                    2318              CLR.L   D1            
00002632  4284                    2319              CLR.L   D4                   
00002634  227C 00000000           2320              MOVEA.L #0, A1               
0000263A  2205                    2321              MOVE.L  D5,D1
0000263C  EA99                    2322              ROR.L   #5,D1
0000263E  0281 0000000E           2323              ANDI.L  #$E,D1
00002644  0C01 0000               2324              CMPI.B  #$0,D1
00002648  6700 003E               2325              BEQ     OP1011_CMP
0000264C  0C01 0002               2326              CMPI.B  #$2,D1
00002650  6700 0036               2327              BEQ     OP1011_CMP
00002654  0C01 0004               2328              CMPI.B  #$4,D1
00002658  6700 002E               2329              BEQ     OP1011_CMP
0000265C  0C01 0008               2330              CMPI.B  #$8,D1
00002660  6700 0178               2331              BEQ     OP1011_EOR
00002664  0C01 000A               2332              CMPI.B  #$A,D1
00002668  6700 0170               2333              BEQ     OP1011_EOR
0000266C  0C01 000C               2334              CMPI.B  #$C,D1
00002670  6700 0168               2335              BEQ     OP1011_EOR  
00002674  0C01 0006               2336              CMPI.B  #$6,D1
00002678  6700 00C0               2337              BEQ     OP1011_CMPA
0000267C  0C01 000E               2338              CMPI.B  #$E,D1
00002680  6700 00B8               2339              BEQ     OP1011_CMPA 
00002684                          2340  
00002684  4EF8 17DE               2341              JMP     OP_DATA          
00002688                          2342  
00002688                          2343  
00002688                          2344  
00002688                          2345  
00002688                          2346  OP1011_CMP
00002688                          2347             
00002688                          2348   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002688  13FC 0082 00004DF8      2349             MOVE.B   #$82,DEST_REGISTER_FORMAT
00002690  13FC 0000 00004DF9      2350             MOVE.B   #$00,SRC_REGISTER_FORMAT
00002698                          2351             
00002698                          2352             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002698  13FC 00B9 00004DFB      2353             MOVE.B   #$B9,GET_DST_START_END
000026A0  13FC 0020 00004DFC      2354             MOVE.B   #$20,GET_SRC_START_END
000026A8                          2355             
000026A8                          2356              *CLEAR D3
000026A8  4283                    2357              CLR.L   D3
000026AA                          2358              *LOAD STACK WITH THIS OPMODE
000026AA  6100 1DC2               2359              BSR     PUSH_STACK
000026AE  163C 0043               2360              MOVE.B  #'C',D3
000026B2  6100 1DBA               2361              BSR     PUSH_STACK
000026B6  163C 004D               2362              MOVE.B  #'M',D3
000026BA  6100 1DB2               2363              BSR     PUSH_STACK
000026BE  163C 0050               2364              MOVE.B  #'P',D3
000026C2  6100 1DAA               2365              BSR     PUSH_STACK
000026C6  163C 002E               2366              MOVE.B  #'.',D3
000026CA  6100 1DA2               2367              BSR     PUSH_STACK
000026CE                          2368              
000026CE                          2369              *FIGURE OUT SIZE*
000026CE                          2370              *00 = BYTE
000026CE                          2371              *01 = WORD
000026CE                          2372              *10 = LONG
000026CE                          2373              * BITS 7&6
000026CE                          2374              
000026CE                          2375              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
000026CE  2205                    2376              MOVE.L  D5,D1
000026D0  EC99                    2377              ROR.L   #6,D1
000026D2  0281 00000003           2378              ANDI.L  #$03,D1
000026D8  0C01 0000               2379              CMPI.B  #%00,D1
000026DC  6700 001E               2380              BEQ     OP1011_CMP_B
000026E0  0281 00000003           2381              ANDI.L  #$03,D1
000026E6  0C01 0001               2382              CMPI.B  #%01,D1
000026EA  6700 001C               2383              BEQ     OP1011_CMP_W
000026EE  0281 00000003           2384              ANDI.L  #$03,D1
000026F4  0C01 0002               2385              CMPI.B  #%10,D1
000026F8  6700 001A               2386              BEQ     OP1011_CMP_L
000026FC                          2387            
000026FC                          2388  OP1011_CMP_B
000026FC                          2389              
000026FC  163C 0042               2390              MOVE.B  #'B',D3
00002700  6100 1D6C               2391              BSR     PUSH_STACK
00002704  6000 0016               2392              BRA     OP1011_RETURN_CMP  
00002708                          2393  OP1011_CMP_W
00002708                          2394              
00002708  163C 0057               2395              MOVE.B  #'W',D3
0000270C  6100 1D60               2396              BSR     PUSH_STACK
00002710  6000 000A               2397              BRA     OP1011_RETURN_CMP  
00002714                          2398  OP1011_CMP_L
00002714                          2399              
00002714  163C 004C               2400              MOVE.B  #'L',D3
00002718  6100 1D54               2401              BSR     PUSH_STACK
0000271C                          2402  OP1011_RETURN_CMP            
0000271C                          2403  
0000271C                          2404              
0000271C                          2405  *GET DATA FROM ADDQ AND PRINT #0-8
0000271C                          2406       
0000271C                          2407              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000271C  0285 0000FE3F           2408              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002722  0685 00000000           2409              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002728                          2410  
00002728  6100 14A6               2411              BSR     GET_EA_EA_SRC
0000272C  163C 002C               2412              MOVE.B  #',',D3
00002730  6100 1D3C               2413              BSR     PUSH_STACK
00002734  6100 18CA               2414              BSR     GET_EA_EA_DEST
00002738                          2415              
00002738  4E75                    2416              RTS
0000273A                          2417              
0000273A                          2418  
0000273A                          2419  
0000273A                          2420  OP1011_CMPA
0000273A                          2421              
0000273A                          2422   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000273A  13FC 0080 00004DF8      2423             MOVE.B   #$80,DEST_REGISTER_FORMAT
00002742  13FC 0000 00004DF9      2424             MOVE.B   #$00,SRC_REGISTER_FORMAT
0000274A                          2425             
0000274A                          2426             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000274A  13FC 00B9 00004DFB      2427             MOVE.B   #$B9,GET_DST_START_END
00002752  13FC 0020 00004DFC      2428             MOVE.B   #$20,GET_SRC_START_END
0000275A                          2429             
0000275A                          2430              *CLEAR D3
0000275A  4283                    2431              CLR.L   D3
0000275C                          2432              *LOAD STACK WITH THIS OPMODE
0000275C  6100 1D10               2433              BSR     PUSH_STACK
00002760  163C 0043               2434              MOVE.B  #'C',D3
00002764  6100 1D08               2435              BSR     PUSH_STACK
00002768  163C 004D               2436              MOVE.B  #'M',D3
0000276C  6100 1D00               2437              BSR     PUSH_STACK
00002770  163C 0050               2438              MOVE.B  #'P',D3
00002774  6100 1CF8               2439              BSR     PUSH_STACK
00002778  163C 0041               2440              MOVE.B  #'A',D3
0000277C  6100 1CF0               2441              BSR     PUSH_STACK
00002780  163C 002E               2442              MOVE.B  #'.',D3
00002784  6100 1CE8               2443              BSR     PUSH_STACK
00002788                          2444              
00002788                          2445              *FIGURE OUT SIZE*
00002788                          2446              *00 = BYTE
00002788                          2447              *01 = WORD
00002788                          2448              *10 = LONG
00002788                          2449              * BITS 7&6
00002788                          2450              
00002788                          2451              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
00002788  2205                    2452              MOVE.L  D5,D1
0000278A  EC99                    2453              ROR.L   #6,D1
0000278C  0281 00000003           2454              ANDI.L  #$03,D1
00002792  0C01 0001               2455              CMPI.B  #%01,D1
00002796  6700 0010               2456              BEQ     OP1011_CMPA_W
0000279A  0281 00000003           2457              ANDI.L  #$03,D1
000027A0  0C01 0002               2458              CMPI.B  #%10,D1
000027A4  6700 000E               2459              BEQ     OP1011_CMPA_L
000027A8                          2460  OP1011_CMPA_W
000027A8                          2461              
000027A8  163C 0057               2462              MOVE.B  #'W',D3
000027AC  6100 1CC0               2463              BSR     PUSH_STACK
000027B0  6000 000A               2464              BRA     OP1011_RETURN_CMPA 
000027B4                          2465  OP1011_CMPA_L
000027B4                          2466              
000027B4  163C 004C               2467              MOVE.B  #'L',D3
000027B8  6100 1CB4               2468              BSR     PUSH_STACK
000027BC                          2469  OP1011_RETURN_CMPA            
000027BC                          2470  
000027BC                          2471              
000027BC                          2472  *GET DATA FROM ADDQ AND PRINT #0-8
000027BC                          2473       
000027BC                          2474              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000027BC  0285 0000FE3F           2475              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000027C2  0685 00000040           2476              ADDI.L  #$0040,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
000027C8                          2477  
000027C8  6100 1406               2478              BSR     GET_EA_EA_SRC
000027CC  163C 002C               2479              MOVE.B  #',',D3
000027D0  6100 1C9C               2480              BSR     PUSH_STACK
000027D4  6100 182A               2481              BSR     GET_EA_EA_DEST
000027D8                          2482              
000027D8  4E75                    2483              RTS
000027DA                          2484  
000027DA                          2485  OP1011_EOR
000027DA                          2486  
000027DA                          2487   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000027DA  13FC 0082 00004DF8      2488             MOVE.B   #$82,DEST_REGISTER_FORMAT
000027E2  13FC 0080 00004DF9      2489             MOVE.B   #$80,SRC_REGISTER_FORMAT
000027EA                          2490             
000027EA                          2491             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000027EA  13FC 00B9 00004DFB      2492             MOVE.B   #$B9,GET_DST_START_END
000027F2  13FC 0020 00004DFC      2493             MOVE.B   #$20,GET_SRC_START_END
000027FA                          2494             
000027FA                          2495              *CLEAR D3
000027FA  4283                    2496              CLR.L   D3
000027FC                          2497              *LOAD STACK WITH THIS OPMODE
000027FC  6100 1C70               2498              BSR     PUSH_STACK
00002800  163C 0045               2499              MOVE.B  #'E',D3
00002804  6100 1C68               2500              BSR     PUSH_STACK
00002808  163C 004F               2501              MOVE.B  #'O',D3
0000280C  6100 1C60               2502              BSR     PUSH_STACK
00002810  163C 0052               2503              MOVE.B  #'R',D3
00002814  6100 1C58               2504              BSR     PUSH_STACK
00002818  163C 002E               2505              MOVE.B  #'.',D3
0000281C  6100 1C50               2506              BSR     PUSH_STACK
00002820                          2507              
00002820                          2508              *FIGURE OUT SIZE*
00002820                          2509              *00 = BYTE
00002820                          2510              *01 = WORD
00002820                          2511              *10 = LONG
00002820                          2512              * BITS 7&6
00002820                          2513              
00002820                          2514              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
00002820  2205                    2515              MOVE.L  D5,D1
00002822  EC99                    2516              ROR.L   #6,D1
00002824  0281 00000003           2517              ANDI.L  #$03,D1
0000282A  0C01 0000               2518              CMPI.B  #%00,D1
0000282E  6700 001E               2519              BEQ     OP1011_EOR_B
00002832  0281 00000003           2520              ANDI.L  #$03,D1
00002838  0C01 0001               2521              CMPI.B  #%01,D1
0000283C  6700 001C               2522              BEQ     OP1011_EOR_W
00002840  0281 00000003           2523              ANDI.L  #$03,D1
00002846  0C01 0002               2524              CMPI.B  #%10,D1
0000284A  6700 001A               2525              BEQ     OP1011_EOR_L
0000284E                          2526            
0000284E                          2527  OP1011_EOR_B
0000284E                          2528              
0000284E  163C 0042               2529              MOVE.B  #'B',D3
00002852  6100 1C1A               2530              BSR     PUSH_STACK
00002856  6000 0016               2531              BRA     OP1011_RETURN
0000285A                          2532  OP1011_EOR_W
0000285A                          2533              
0000285A  163C 0057               2534              MOVE.B  #'W',D3
0000285E  6100 1C0E               2535              BSR     PUSH_STACK
00002862  6000 000A               2536              BRA     OP1011_RETURN
00002866                          2537  OP1011_EOR_L
00002866                          2538              
00002866  163C 004C               2539              MOVE.B  #'L',D3
0000286A  6100 1C02               2540              BSR     PUSH_STACK
0000286E                          2541  OP1011_RETURN            
0000286E                          2542  
0000286E                          2543              
0000286E                          2544  *GET DATA FROM ADDQ AND PRINT #0-8
0000286E                          2545       
0000286E                          2546              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000286E  0285 0000FE3F           2547              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002874  0685 00000000           2548              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
0000287A                          2549  
0000287A  6100 1784               2550              BSR     GET_EA_EA_DEST
0000287E  163C 002C               2551              MOVE.B  #',',D3
00002882  6100 1BEA               2552              BSR     PUSH_STACK
00002886  6100 1348               2553              BSR     GET_EA_EA_SRC
0000288A                          2554              
0000288A  4E75                    2555              RTS
0000288C                          2556              
0000288C                          2557              
0000288C                          2558              
0000288C                          2559              
0000288C                          2560  
0000288C                          2561  *---------------------------------------------------------------------------*
0000288C                          2562  * OP_CMPA: display CMPA 
0000288C                          2563  *---------------------------------------------------------------------------
0000288C  43F9 00004C76           2564  OP_CMPA_W   LEA     DISP_CMPA_W,A1
00002892  103C 000E               2565              MOVE.B  #14,D0
00002896  4E4F                    2566              TRAP    #15
00002898  183C 0001               2567              MOVE.B  #1,D4
0000289C  4E75                    2568              RTS
0000289E                          2569  
0000289E  43F9 00004C80           2570  OP_CMPA_L   LEA     DISP_CMPA_L,A1
000028A4  103C 000E               2571              MOVE.B  #14,D0
000028A8  4E4F                    2572              TRAP    #15
000028AA  183C 0002               2573              MOVE.B  #2,D4
000028AE  4E75                    2574              RTS
000028B0                          2575  
000028B0                          2576  *---------------------------------------------------------------------------*
000028B0                          2577  * OP_CMP: display CMP and proceed to EA
000028B0                          2578  *---------------------------------------------------------------------------*  
000028B0  43F9 00004C5B           2579  OP_CMP_B    LEA     DISP_CMP_B,A1
000028B6  103C 000E               2580              MOVE.B  #14,D0
000028BA  4E4F                    2581              TRAP    #15
000028BC  183C 0000               2582              MOVE.B  #0,D4
000028C0  4EF9 00003780           2583              JMP     EA_GEN
000028C6                          2584  
000028C6  4E75                    2585              RTS
000028C8                          2586              
000028C8  43F9 00004C64           2587  OP_CMP_W    LEA     DISP_CMP_W,A1
000028CE  103C 000E               2588              MOVE.B  #14,D0
000028D2  4E4F                    2589              TRAP    #15
000028D4  183C 0001               2590              MOVE.B  #1,D4
000028D8  4EF9 00003780           2591              JMP     EA_GEN
000028DE                          2592  
000028DE  4E75                    2593              RTS
000028E0                          2594              
000028E0  43F9 00004C6D           2595  OP_CMP_L    LEA     DISP_CMP_L,A1
000028E6  103C 000E               2596              MOVE.B  #14,D0
000028EA  4E4F                    2597              TRAP    #15
000028EC  183C 0002               2598              MOVE.B  #2,D4
000028F0  4EF9 00003780           2599              JMP     EA_GEN
000028F6                          2600  
000028F6  4E75                    2601              RTS
000028F8                          2602              
000028F8                          2603  *---------------------------------------------------------------------------*
000028F8                          2604  * OP_EOR: display EOR
000028F8                          2605  *---------------------------------------------------------------------------*  
000028F8  43F9 00004C40           2606  OP_EOR_B    LEA     DISP_EOR_B,A1
000028FE  103C 000E               2607              MOVE.B  #14,D0
00002902  4E4F                    2608              TRAP    #15
00002904  183C 0000               2609              MOVE.B  #0,D4
00002908  4E75                    2610              RTS
0000290A                          2611              
0000290A  43F9 00004C49           2612  OP_EOR_W    LEA     DISP_EOR_W,A1
00002910  103C 000E               2613              MOVE.B  #14,D0
00002914  4E4F                    2614              TRAP    #15
00002916  183C 0001               2615              MOVE.B  #1,D4
0000291A  4E75                    2616              RTS
0000291C                          2617              
0000291C  43F9 00004C52           2618  OP_EOR_L    LEA     DISP_EOR_L,A1
00002922  103C 000E               2619              MOVE.B  #14,D0
00002926  4E4F                    2620              TRAP    #15
00002928  183C 0002               2621              MOVE.B  #2,D4
0000292C  4E75                    2622              RTS    
0000292E                          2623  
0000292E                          2624  *---------------------------------------------------------------------------*
0000292E                          2625  * OP1100: Decode and display MULS/AND and proceed to EA
0000292E                          2626  *---------------------------------------------------------------------------* 
0000292E  4280                    2627  OP1100      CLR.L   D0                 
00002930  4281                    2628              CLR.L   D1    
00002932  4284                    2629              CLR.L   D4                
00002934  227C 00000000           2630              MOVEA.L #0, A1        
0000293A  2205                    2631              MOVE.L  D5,D1
0000293C  EA89                    2632              LSR.L   #5,D1
0000293E  0281 0000000E           2633              ANDI.L  #$E,D1
00002944  0C41 000E               2634              CMPI.W  #$E,D1
00002948  6700 0006               2635              BEQ     OP_MULS
0000294C  6000 00F6               2636              BRA     OP1100_DETERMINE_DN_EA_OR_EA_DN 
00002950                          2637  
00002950                          2638  OP_MULS                      
00002950  4281                    2639              CLR.L   D1       
00002952  4284                    2640              CLR.L   D4                   
00002954  227C 00000000           2641              MOVEA.L #0, A1              
0000295A  2205                    2642              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
0000295C                          2643              *CLEAR D3
0000295C  4283                    2644              CLR.L   D3
0000295E                          2645  
0000295E                          2646  OP1100_MULS_DN_EA_OR_EA_DN 
0000295E                          2647              *LOAD STACK WITH THIS OPMODE
0000295E  6100 1B0E               2648              BSR     PUSH_STACK
00002962  163C 004D               2649              MOVE.B  #'M',D3
00002966  6100 1B06               2650              BSR     PUSH_STACK
0000296A  163C 0055               2651              MOVE.B  #'U',D3
0000296E  6100 1AFE               2652              BSR     PUSH_STACK
00002972  163C 004C               2653              MOVE.B  #'L',D3
00002976  6100 1AF6               2654              BSR     PUSH_STACK
0000297A  163C 0053               2655              MOVE.B  #'S',D3
0000297E  6100 1AEE               2656              BSR     PUSH_STACK
00002982  163C 002E               2657              MOVE.B  #'.',D3
00002986  6100 1AE6               2658              BSR     PUSH_STACK
0000298A                          2659              
0000298A  2205                    2660              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
0000298C                          2661              
0000298C                          2662  OP1100_EA_DN_MULS           
0000298C                          2663              *BITS (7 TO 6) 
0000298C                          2664              *00 = .B
0000298C                          2665              *01 = .W
0000298C                          2666              *10 = .L 
0000298C  2205                    2667              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
0000298E  EC99                    2668              ROR.L   #6,D1
00002990  0281 00000003           2669              ANDI.L  #$03,D1
00002996  0C81 00000003           2670              CMPI.L  #%11,D1 *EQUALS .W
0000299C  6700 0014               2671              BEQ     OP1100_PRINT_W_MULS
000029A0  0C81 00000000           2672              CMPI.L  #%00,D1 *EQUALS .L
000029A6  6700 0052               2673              BEQ     OP1100_PRINT_L_MULS
000029AA                          2674              
000029AA  183C 0001               2675              MOVE.B  #1,D4               *ERROR READ
000029AE  6000 0092               2676              BRA     OP1100_MULS_RETURN
000029B2                          2677  OP1100_PRINT_W_MULS
000029B2  163C 0057               2678              MOVE.B  #'W',D3
000029B6  6100 1AB6               2679              BSR     PUSH_STACK
000029BA                          2680  
000029BA                          2681              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000029BA  13FC 0000 00004DF8      2682              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000029C2  13FC 0000 00004DF9      2683              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000029CA                          2684             
000029CA                          2685              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000029CA  13FC 00B9 00004DFB      2686              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000029D2  13FC 0020 00004DFC      2687              MOVE.B   #$20,GET_SRC_START_END
000029DA                          2688  
000029DA                          2689             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000029DA  0285 0000FE3F           2690              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000029E0  0685 00000000           2691              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
000029E6                          2692  
000029E6                          2693              
000029E6  6100 11E8               2694              BSR     GET_EA_EA_SRC      *GETS <ea>
000029EA  163C 002C               2695              MOVE.B  #',',D3
000029EE  6100 1A7E               2696              BSR     PUSH_STACK
000029F2  6100 160C               2697              BSR     GET_EA_EA_DEST       *GETS Dn    
000029F6                          2698              
000029F6  6000 004A               2699              BRA     OP1100_MULS_RETURN
000029FA                          2700  OP1100_PRINT_L_MULS 
000029FA  163C 004C               2701              MOVE.B  #'L',D3
000029FE  6100 1A6E               2702              BSR     PUSH_STACK
00002A02                          2703              
00002A02                          2704              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002A02  13FC 0000 00004DF8      2705              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002A0A  13FC 0000 00004DF9      2706              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002A12                          2707             
00002A12                          2708              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002A12  13FC 00B9 00004DFB      2709              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002A1A  13FC 0020 00004DFC      2710              MOVE.B   #$20,GET_SRC_START_END
00002A22                          2711  
00002A22                          2712              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002A22  0285 0000FE3F           2713              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002A28  0685 00000000           2714              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002A2E                          2715  
00002A2E                          2716                     
00002A2E  6100 11A0               2717              BSR     GET_EA_EA_SRC      *GETS <ea>
00002A32  163C 002C               2718              MOVE.B  #',',D3
00002A36  6100 1A36               2719              BSR     PUSH_STACK                  
00002A3A  6100 15C4               2720              BSR     GET_EA_EA_DEST       *GETS Dn    
00002A3E                          2721  
00002A3E                          2722              
00002A3E  6000 0002               2723              BRA     OP1100_MULS_RETURN
00002A42                          2724              
00002A42                          2725  OP1100_MULS_RETURN
00002A42  4E75                    2726              RTS
00002A44                          2727              
00002A44                          2728  
00002A44                          2729  
00002A44                          2730  
00002A44                          2731  
00002A44                          2732  
00002A44                          2733  
00002A44                          2734  
00002A44                          2735  
00002A44                          2736  
00002A44                          2737  
00002A44                          2738  
00002A44                          2739  
00002A44                          2740  OP1100_DETERMINE_DN_EA_OR_EA_DN 
00002A44                          2741              *LOAD STACK WITH THIS OPMODE
00002A44  4283                    2742              CLR.L   D3
00002A46  6100 1A26               2743              BSR     PUSH_STACK
00002A4A  163C 0041               2744              MOVE.B  #'A',D3
00002A4E  6100 1A1E               2745              BSR     PUSH_STACK
00002A52  163C 004E               2746              MOVE.B  #'N',D3
00002A56  6100 1A16               2747              BSR     PUSH_STACK
00002A5A  163C 0044               2748              MOVE.B  #'D',D3
00002A5E  6100 1A0E               2749              BSR     PUSH_STACK
00002A62  163C 002E               2750              MOVE.B  #'.',D3
00002A66  6100 1A06               2751              BSR     PUSH_STACK
00002A6A                          2752              
00002A6A  2205                    2753              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00002A6C                          2754              
00002A6C                          2755              *BITS (INDEX 8) 
00002A6C                          2756              *0 = ADD.B/W/L <EA>,Dn
00002A6C                          2757              *1 = ADD.B/W/L Dn,<EA> 
00002A6C  E099                    2758              ROR.L   #8,D1
00002A6E  0281 00000001           2759              ANDI.L  #$01,D1     *MASKS WITH 00000001
00002A74  0C81 00000000           2760              CMPI.L  #$00,D1     *IF EQUALS <ea>,Dn
00002A7A  6700 0102               2761              BEQ     OP1100_EA_DN
00002A7E                          2762              *else procede to Dn_EA
00002A7E                          2763              
00002A7E                          2764  OP1100_DN_EA
00002A7E                          2765              *BITS (7 TO 6) 
00002A7E                          2766              *00 = .B
00002A7E                          2767              *01 = .W
00002A7E                          2768              *10 = .L 
00002A7E  2205                    2769              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00002A80  EC99                    2770              ROR.L   #6,D1
00002A82  0281 00000003           2771              ANDI.L  #$03,D1
00002A88  0C81 00000000           2772              CMPI.L  #$00,D1 *EQUALS .B
00002A8E  6700 0016               2773              BEQ     OP1100_PRINT_B2
00002A92  0C81 00000001           2774              CMPI.L  #$01,D1 *EQUALS .W
00002A98  6700 0054               2775              BEQ     OP1100_PRINT_W2
00002A9C  0C81 00000002           2776              CMPI.L  #$02,D1 *EQUALS .L
00002AA2  6700 0092               2777              BEQ     OP1100_PRINT_L2
00002AA6                          2778  OP1100_PRINT_B2
00002AA6                          2779              *PUSH 'B'
00002AA6  163C 0042               2780              MOVE.B  #'B',D3
00002AAA  6100 19C2               2781              BSR     PUSH_STACK
00002AAE                          2782             
00002AAE                          2783              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002AAE  13FC 0000 00004DF8      2784             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002AB6  13FC 0083 00004DF9      2785             MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002ABE                          2786             
00002ABE                          2787             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002ABE  13FC 00B9 00004DFB      2788             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002AC6  13FC 0020 00004DFC      2789             MOVE.B   #$20,GET_SRC_START_END
00002ACE                          2790  
00002ACE                          2791              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002ACE  0285 0000FE3F           2792              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002AD4  0685 00000000           2793              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002ADA                          2794       
00002ADA  6100 1524               2795              BSR     GET_EA_EA_DEST      *GETS Dn
00002ADE  163C 002C               2796              MOVE.B  #',',D3
00002AE2  6100 198A               2797              BSR     PUSH_STACK                     
00002AE6  6100 10E8               2798              BSR     GET_EA_EA_SRC       *GETS <ea>
00002AEA                          2799  
00002AEA                          2800              
00002AEA  6000 0192               2801              BRA     OP1100_AND_RETURN
00002AEE                          2802  OP1100_PRINT_W2
00002AEE  163C 0057               2803              MOVE.B  #'W',D3
00002AF2  6100 197A               2804              BSR     PUSH_STACK
00002AF6                          2805  
00002AF6                          2806              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002AF6  13FC 0000 00004DF8      2807              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002AFE  13FC 0083 00004DF9      2808              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002B06                          2809             
00002B06                          2810              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002B06  13FC 00B9 00004DFB      2811              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002B0E  13FC 0020 00004DFC      2812              MOVE.B   #$20,GET_SRC_START_END
00002B16                          2813  
00002B16                          2814              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002B16  0285 0000FE3F           2815              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002B1C  0685 00000000           2816              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A An Register (001) 
00002B22                          2817  
00002B22                          2818        
00002B22  6100 14DC               2819              BSR     GET_EA_EA_DEST      *GETS Dn
00002B26  163C 002C               2820              MOVE.B  #',',D3
00002B2A  6100 1942               2821              BSR     PUSH_STACK               
00002B2E  6100 10A0               2822              BSR     GET_EA_EA_SRC       *GETS <ea>       
00002B32                          2823  
00002B32                          2824  
00002B32                          2825  
00002B32  6000 049A               2826              BRA     OP1101_ADD_RETURN
00002B36                          2827  OP1100_PRINT_L2 
00002B36  163C 004C               2828              MOVE.B  #'L',D3
00002B3A  6100 1932               2829              BSR     PUSH_STACK
00002B3E                          2830              
00002B3E                          2831              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002B3E  13FC 0000 00004DF8      2832              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002B46  13FC 0083 00004DF9      2833              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002B4E                          2834             
00002B4E                          2835              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002B4E  13FC 00B9 00004DFB      2836              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002B56  13FC 0020 00004DFC      2837              MOVE.B   #$20,GET_SRC_START_END
00002B5E                          2838  
00002B5E                          2839             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002B5E  0285 0000FE3F           2840              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002B64  0685 00000000           2841              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002B6A                          2842  
00002B6A                          2843               
00002B6A  6100 1494               2844              BSR     GET_EA_EA_DEST       *GETS Dn
00002B6E  163C 002C               2845              MOVE.B  #',',D3
00002B72  6100 18FA               2846              BSR     PUSH_STACK          
00002B76  6100 1058               2847              BSR     GET_EA_EA_SRC        *GETS <ea>
00002B7A                          2848  
00002B7A  6000 0102               2849              BRA     OP1100_AND_RETURN
00002B7E                          2850              
00002B7E                          2851  OP1100_EA_DN           
00002B7E                          2852              *BITS (7 TO 6) 
00002B7E                          2853              *00 = .B
00002B7E                          2854              *01 = .W
00002B7E                          2855              *10 = .L 
00002B7E  2205                    2856              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00002B80  EC99                    2857              ROR.L   #6,D1
00002B82  0281 00000003           2858              ANDI.L  #$03,D1
00002B88  0C81 00000000           2859              CMPI.L  #$00,D1 *EQUALS .B
00002B8E  6700 0016               2860              BEQ     OP1100_PRINT_B
00002B92  0C81 00000001           2861              CMPI.L  #$01,D1 *EQUALS .W
00002B98  6700 0054               2862              BEQ     OP1100_PRINT_W
00002B9C  0C81 00000002           2863              CMPI.L  #$02,D1 *EQUALS .L
00002BA2  6700 0092               2864              BEQ     OP1100_PRINT_L
00002BA6                          2865  OP1100_PRINT_B
00002BA6  163C 0042               2866              MOVE.B  #'B',D3
00002BAA  6100 18C2               2867              BSR     PUSH_STACK
00002BAE                          2868                
00002BAE                          2869              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002BAE  13FC 0000 00004DF8      2870              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002BB6  13FC 0002 00004DF9      2871              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002BBE                          2872             
00002BBE                          2873              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002BBE  13FC 00B9 00004DFB      2874              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002BC6  13FC 0020 00004DFC      2875              MOVE.B   #$20,GET_SRC_START_END
00002BCE                          2876  
00002BCE                          2877             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002BCE  0285 0000FE3F           2878              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002BD4  0685 00000000           2879              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "AN" Register (001) 
00002BDA                          2880  
00002BDA                          2881              
00002BDA  6100 0FF4               2882              BSR     GET_EA_EA_SRC      *GETS <ea>
00002BDE  163C 002C               2883              MOVE.B  #',',D3
00002BE2  6100 188A               2884              BSR     PUSH_STACK          
00002BE6  6100 1418               2885              BSR     GET_EA_EA_DEST       *GETS Dn
00002BEA                          2886              
00002BEA  6000 03E2               2887              BRA     OP1101_ADD_RETURN
00002BEE                          2888  OP1100_PRINT_W
00002BEE  163C 0057               2889              MOVE.B  #'W',D3
00002BF2  6100 187A               2890              BSR     PUSH_STACK
00002BF6                          2891  
00002BF6                          2892              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002BF6  13FC 0000 00004DF8      2893              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002BFE  13FC 0002 00004DF9      2894              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002C06                          2895             
00002C06                          2896              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002C06  13FC 00B9 00004DFB      2897              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002C0E  13FC 0020 00004DFC      2898              MOVE.B   #$20,GET_SRC_START_END
00002C16                          2899  
00002C16                          2900             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002C16  0285 0000FE3F           2901              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002C1C  0685 00000000           2902              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002C22                          2903  
00002C22                          2904              
00002C22  6100 0FAC               2905              BSR     GET_EA_EA_SRC      *GETS <ea>
00002C26  163C 002C               2906              MOVE.B  #',',D3
00002C2A  6100 1842               2907              BSR     PUSH_STACK
00002C2E  6100 13D0               2908              BSR     GET_EA_EA_DEST       *GETS Dn    
00002C32                          2909              
00002C32  6000 F988               2910              BRA     OP1001_ADD_RETURN
00002C36                          2911  OP1100_PRINT_L 
00002C36  163C 004C               2912              MOVE.B  #'L',D3
00002C3A  6100 1832               2913              BSR     PUSH_STACK
00002C3E                          2914              
00002C3E                          2915              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002C3E  13FC 0000 00004DF8      2916              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002C46  13FC 0002 00004DF9      2917              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002C4E                          2918             
00002C4E                          2919              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002C4E  13FC 00B9 00004DFB      2920              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002C56  13FC 0020 00004DFC      2921              MOVE.B   #$20,GET_SRC_START_END
00002C5E                          2922  
00002C5E                          2923              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002C5E  0285 0000FE3F           2924              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002C64  0685 00000000           2925              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002C6A                          2926  
00002C6A                          2927                     
00002C6A  6100 0F64               2928              BSR     GET_EA_EA_SRC      *GETS <ea>
00002C6E  163C 002C               2929              MOVE.B  #',',D3
00002C72  6100 17FA               2930              BSR     PUSH_STACK                  
00002C76  6100 1388               2931              BSR     GET_EA_EA_DEST       *GETS Dn    
00002C7A                          2932  
00002C7A                          2933              
00002C7A  6000 0002               2934              BRA     OP1100_AND_RETURN
00002C7E                          2935              
00002C7E                          2936  OP1100_AND_RETURN
00002C7E  4E75                    2937              RTS
00002C80                          2938  
00002C80                          2939  
00002C80                          2940  *---------------------------------------------------------------------------*
00002C80                          2941  * OP1101: Decode ADD/ADDA
00002C80                          2942  *---------------------------------------------------------------------------* 
00002C80  4280                    2943  OP1101      CLR.L   D0                  
00002C82  4281                    2944              CLR.L   D1       
00002C84  4284                    2945              CLR.L   D4                   
00002C86  227C 00000000           2946              MOVEA.L #0, A1              
00002C8C  2205                    2947              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
00002C8E                          2948              
00002C8E                          2949              *CLEAR D3
00002C8E  4283                    2950              CLR.L   D3
00002C90                          2951              
00002C90                          2952              
00002C90                          2953              
00002C90                          2954              **INTEGRATING ADDA.W/.L INTO THIS CODE**
00002C90  2205                    2955              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00002C92                          2956              *BITS (INDEX 8) 
00002C92                          2957              *0 = ADD.B/W/L <EA>,Dn
00002C92                          2958              *1 = ADD.B/W/L Dn,<EA> 
00002C92  EC99                    2959              ROR.L   #6,D1
00002C94  0281 00000007           2960              ANDI.L  #$07,D1                 *MASKS WITH 00000111
00002C9A  0C81 00000007           2961              CMPI.L  #$07,D1                 *IF EQUALS <ea>,Dn
00002CA0  6700 0010               2962              BEQ     OP1101_ADDA_L            *BRANCHES TO ADDA.L
00002CA4  0C81 00000003           2963              CMPI.L  #$03,D1                 *IF EQUALS <ea>,Dn
00002CAA  6700 0078               2964              BEQ     OP1101_ADDA_W           *BRANCHES TO ADDA.W
00002CAE  6000 00E6               2965              BRA     OP1101_DETERMINE_DN_EA_OR_EA_DN         *ELSE CHECK ADD.B/.W/.L
00002CB2                          2966              
00002CB2                          2967  OP1101_ADDA_L
00002CB2                          2968              *LOAD STACK WITH THIS OPMODE
00002CB2  6100 17BA               2969              BSR     PUSH_STACK
00002CB6  163C 0041               2970              MOVE.B  #'A',D3
00002CBA  6100 17B2               2971              BSR     PUSH_STACK
00002CBE  163C 0044               2972              MOVE.B  #'D',D3
00002CC2  6100 17AA               2973              BSR     PUSH_STACK
00002CC6  163C 0044               2974              MOVE.B  #'D',D3
00002CCA  6100 17A2               2975              BSR     PUSH_STACK
00002CCE  163C 0041               2976              MOVE.B  #'A',D3
00002CD2  6100 179A               2977              BSR     PUSH_STACK
00002CD6  163C 002E               2978              MOVE.B  #'.',D3
00002CDA  6100 1792               2979              BSR     PUSH_STACK
00002CDE  163C 004C               2980              MOVE.B  #'L',D3
00002CE2  6100 178A               2981              BSR     PUSH_STACK
00002CE6                          2982              
00002CE6                          2983             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002CE6  13FC 0000 00004DF8      2984             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002CEE  13FC 0000 00004DF9      2985             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002CF6                          2986             
00002CF6                          2987             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002CF6  13FC 00B9 00004DFB      2988             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002CFE  13FC 0020 00004DFC      2989             MOVE.B   #$20,GET_SRC_START_END
00002D06                          2990  
00002D06                          2991              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002D06  0285 0000FE3F           2992              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002D0C  0685 00000040           2993              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002D12                          2994       
00002D12                          2995              *PRINT <EA>,AN
00002D12  6100 0EBC               2996              BSR     GET_EA_EA_SRC       *GETS <ea>
00002D16  163C 002C               2997              MOVE.B  #',',D3
00002D1A  6100 1752               2998              BSR     PUSH_STACK                     
00002D1E  6100 12E0               2999              BSR     GET_EA_EA_DEST      *GETS Dn
00002D22                          3000  
00002D22                          3001              
00002D22                          3002              
00002D22  4E75                    3003              RTS
00002D24                          3004  OP1101_ADDA_W
00002D24                          3005              *LOAD STACK WITH THIS OPMODE
00002D24  6100 1748               3006              BSR     PUSH_STACK
00002D28  163C 0041               3007              MOVE.B  #'A',D3
00002D2C  6100 1740               3008              BSR     PUSH_STACK
00002D30  163C 0044               3009              MOVE.B  #'D',D3
00002D34  6100 1738               3010              BSR     PUSH_STACK
00002D38  163C 0044               3011              MOVE.B  #'D',D3
00002D3C  6100 1730               3012              BSR     PUSH_STACK
00002D40  163C 0041               3013              MOVE.B  #'A',D3
00002D44  6100 1728               3014              BSR     PUSH_STACK
00002D48  163C 002E               3015              MOVE.B  #'.',D3
00002D4C  6100 1720               3016              BSR     PUSH_STACK
00002D50  163C 0057               3017              MOVE.B  #'W',D3
00002D54  6100 1718               3018              BSR     PUSH_STACK
00002D58                          3019              
00002D58                          3020             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002D58  13FC 0000 00004DF8      3021             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002D60  13FC 0000 00004DF9      3022             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002D68                          3023             
00002D68                          3024             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002D68  13FC 00B9 00004DFB      3025             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002D70  13FC 0020 00004DFC      3026             MOVE.B   #$20,GET_SRC_START_END
00002D78                          3027  
00002D78                          3028              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002D78  0285 0000FE3F           3029              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002D7E  0685 00000040           3030              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002D84                          3031       
00002D84                          3032              *PRINT <EA>,AN
00002D84  6100 0E4A               3033              BSR     GET_EA_EA_SRC       *GETS <ea>
00002D88  163C 002C               3034              MOVE.B  #',',D3
00002D8C  6100 16E0               3035              BSR     PUSH_STACK                     
00002D90  6100 126E               3036              BSR     GET_EA_EA_DEST      *GETS Dn
00002D94                          3037  
00002D94  4E75                    3038              RTS
00002D96                          3039  
00002D96                          3040  OP1101_DETERMINE_DN_EA_OR_EA_DN 
00002D96                          3041              *LOAD STACK WITH THIS OPMODE
00002D96  6100 16D6               3042              BSR     PUSH_STACK
00002D9A  163C 0041               3043              MOVE.B  #'A',D3
00002D9E  6100 16CE               3044              BSR     PUSH_STACK
00002DA2  163C 0044               3045              MOVE.B  #'D',D3
00002DA6  6100 16C6               3046              BSR     PUSH_STACK
00002DAA  163C 0044               3047              MOVE.B  #'D',D3
00002DAE  6100 16BE               3048              BSR     PUSH_STACK
00002DB2  163C 002E               3049              MOVE.B  #'.',D3
00002DB6  6100 16B6               3050              BSR     PUSH_STACK
00002DBA                          3051              
00002DBA  2205                    3052              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00002DBC                          3053              
00002DBC                          3054              *BITS (INDEX 8) 
00002DBC                          3055              *0 = ADD.B/W/L <EA>,Dn
00002DBC                          3056              *1 = ADD.B/W/L Dn,<EA> 
00002DBC  E099                    3057              ROR.L   #8,D1
00002DBE  0281 00000001           3058              ANDI.L  #$01,D1     *MASKS WITH 00000001
00002DC4  0C81 00000000           3059              CMPI.L  #$00,D1     *IF EQUALS <ea>,Dn
00002DCA  6700 0102               3060              BEQ     OP1101_EA_DN
00002DCE                          3061              *else procede to Dn_EA
00002DCE                          3062              
00002DCE                          3063  OP1101_DN_EA
00002DCE                          3064              *BITS (7 TO 6) 
00002DCE                          3065              *00 = .B
00002DCE                          3066              *01 = .W
00002DCE                          3067              *10 = .L 
00002DCE  2205                    3068              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00002DD0  EC99                    3069              ROR.L   #6,D1
00002DD2  0281 00000003           3070              ANDI.L  #$03,D1
00002DD8  0C81 00000000           3071              CMPI.L  #$00,D1 *EQUALS .B
00002DDE  6700 0016               3072              BEQ     OP1101_PRINT_B2
00002DE2  0C81 00000001           3073              CMPI.L  #$01,D1 *EQUALS .W
00002DE8  6700 0054               3074              BEQ     OP1101_PRINT_W2
00002DEC  0C81 00000002           3075              CMPI.L  #$02,D1 *EQUALS .L
00002DF2  6700 0092               3076              BEQ     OP1101_PRINT_L2
00002DF6                          3077  OP1101_PRINT_B2
00002DF6                          3078              *PUSH 'B'
00002DF6  163C 0042               3079              MOVE.B  #'B',D3
00002DFA  6100 1672               3080              BSR     PUSH_STACK
00002DFE                          3081             
00002DFE                          3082              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002DFE  13FC 0002 00004DF8      3083             MOVE.B   #$02,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002E06  13FC 0083 00004DF9      3084             MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002E0E                          3085             
00002E0E                          3086             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002E0E  13FC 00B9 00004DFB      3087             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002E16  13FC 0020 00004DFC      3088             MOVE.B   #$20,GET_SRC_START_END
00002E1E                          3089  
00002E1E                          3090              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002E1E  0285 0000FE3F           3091              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002E24  0685 00000000           3092              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002E2A                          3093       
00002E2A  6100 11D4               3094              BSR     GET_EA_EA_DEST      *GETS Dn
00002E2E  163C 002C               3095              MOVE.B  #',',D3
00002E32  6100 163A               3096              BSR     PUSH_STACK                     
00002E36  6100 0D98               3097              BSR     GET_EA_EA_SRC       *GETS <ea>
00002E3A                          3098  
00002E3A                          3099              
00002E3A  6000 0192               3100              BRA     OP1101_ADD_RETURN
00002E3E                          3101  OP1101_PRINT_W2
00002E3E  163C 0057               3102              MOVE.B  #'W',D3
00002E42  6100 162A               3103              BSR     PUSH_STACK
00002E46                          3104  
00002E46                          3105              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002E46  13FC 0000 00004DF8      3106              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002E4E  13FC 0083 00004DF9      3107              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002E56                          3108             
00002E56                          3109              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002E56  13FC 00B9 00004DFB      3110              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002E5E  13FC 0020 00004DFC      3111              MOVE.B   #$20,GET_SRC_START_END
00002E66                          3112  
00002E66                          3113              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002E66  0285 0000FE3F           3114              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002E6C  0685 00000000           3115              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002E72                          3116  
00002E72                          3117        
00002E72  6100 118C               3118              BSR     GET_EA_EA_DEST      *GETS Dn
00002E76  163C 002C               3119              MOVE.B  #',',D3
00002E7A  6100 15F2               3120              BSR     PUSH_STACK               
00002E7E  6100 0D50               3121              BSR     GET_EA_EA_SRC       *GETS <ea>       
00002E82                          3122  
00002E82                          3123  
00002E82                          3124  
00002E82  6000 014A               3125              BRA     OP1101_ADD_RETURN
00002E86                          3126  OP1101_PRINT_L2 
00002E86  163C 004C               3127              MOVE.B  #'L',D3
00002E8A  6100 15E2               3128              BSR     PUSH_STACK
00002E8E                          3129              
00002E8E                          3130              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002E8E  13FC 0000 00004DF8      3131              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002E96  13FC 0083 00004DF9      3132              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002E9E                          3133             
00002E9E                          3134              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002E9E  13FC 00B9 00004DFB      3135              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002EA6  13FC 0020 00004DFC      3136              MOVE.B   #$20,GET_SRC_START_END
00002EAE                          3137  
00002EAE                          3138             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002EAE  0285 0000FE3F           3139              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002EB4  0685 00000000           3140              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002EBA                          3141  
00002EBA                          3142               
00002EBA  6100 1144               3143              BSR     GET_EA_EA_DEST       *GETS Dn
00002EBE  163C 002C               3144              MOVE.B  #',',D3
00002EC2  6100 15AA               3145              BSR     PUSH_STACK          
00002EC6  6100 0D08               3146              BSR     GET_EA_EA_SRC        *GETS <ea>
00002ECA                          3147  
00002ECA  6000 0102               3148              BRA     OP1101_ADD_RETURN
00002ECE                          3149              
00002ECE                          3150  OP1101_EA_DN           
00002ECE                          3151              *BITS (7 TO 6) 
00002ECE                          3152              *00 = .B
00002ECE                          3153              *01 = .W
00002ECE                          3154              *10 = .L 
00002ECE  2205                    3155              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00002ED0  EC99                    3156              ROR.L   #6,D1
00002ED2  0281 00000003           3157              ANDI.L  #$03,D1
00002ED8  0C81 00000000           3158              CMPI.L  #$00,D1 *EQUALS .B
00002EDE  6700 0016               3159              BEQ     OP1101_PRINT_B
00002EE2  0C81 00000001           3160              CMPI.L  #$01,D1 *EQUALS .W
00002EE8  6700 0054               3161              BEQ     OP1101_PRINT_W
00002EEC  0C81 00000002           3162              CMPI.L  #$02,D1 *EQUALS .L
00002EF2  6700 0092               3163              BEQ     OP1101_PRINT_L
00002EF6                          3164  OP1101_PRINT_B
00002EF6  163C 0042               3165              MOVE.B  #'B',D3
00002EFA  6100 1572               3166              BSR     PUSH_STACK
00002EFE                          3167                
00002EFE                          3168              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002EFE  13FC 0002 00004DF8      3169              MOVE.B   #$02,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002F06  13FC 0002 00004DF9      3170              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002F0E                          3171             
00002F0E                          3172              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002F0E  13FC 00B9 00004DFB      3173              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002F16  13FC 0020 00004DFC      3174              MOVE.B   #$20,GET_SRC_START_END
00002F1E                          3175  
00002F1E                          3176             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002F1E  0285 0000FE3F           3177              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002F24  0685 00000000           3178              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002F2A                          3179  
00002F2A                          3180              
00002F2A  6100 0CA4               3181              BSR     GET_EA_EA_SRC      *GETS <ea>
00002F2E  163C 002C               3182              MOVE.B  #',',D3
00002F32  6100 153A               3183              BSR     PUSH_STACK          
00002F36  6100 10C8               3184              BSR     GET_EA_EA_DEST       *GETS Dn
00002F3A                          3185              
00002F3A  6000 0092               3186              BRA     OP1101_ADD_RETURN
00002F3E                          3187  OP1101_PRINT_W
00002F3E  163C 0057               3188              MOVE.B  #'W',D3
00002F42  6100 152A               3189              BSR     PUSH_STACK
00002F46                          3190  
00002F46                          3191              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002F46  13FC 0000 00004DF8      3192              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002F4E  13FC 0000 00004DF9      3193              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002F56                          3194             
00002F56                          3195              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002F56  13FC 00B9 00004DFB      3196              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002F5E  13FC 0020 00004DFC      3197              MOVE.B   #$20,GET_SRC_START_END
00002F66                          3198  
00002F66                          3199             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002F66  0285 0000FE3F           3200              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002F6C  0685 00000000           3201              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002F72                          3202  
00002F72                          3203              
00002F72  6100 0C5C               3204              BSR     GET_EA_EA_SRC      *GETS <ea>
00002F76  163C 002C               3205              MOVE.B  #',',D3
00002F7A  6100 14F2               3206              BSR     PUSH_STACK
00002F7E  6100 1080               3207              BSR     GET_EA_EA_DEST       *GETS Dn    
00002F82                          3208              
00002F82  6000 004A               3209              BRA     OP1101_ADD_RETURN
00002F86                          3210  OP1101_PRINT_L 
00002F86  163C 004C               3211              MOVE.B  #'L',D3
00002F8A  6100 14E2               3212              BSR     PUSH_STACK
00002F8E                          3213              
00002F8E                          3214              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002F8E  13FC 0000 00004DF8      3215              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002F96  13FC 0000 00004DF9      3216              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002F9E                          3217             
00002F9E                          3218              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002F9E  13FC 00B9 00004DFB      3219              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002FA6  13FC 0020 00004DFC      3220              MOVE.B   #$20,GET_SRC_START_END
00002FAE                          3221  
00002FAE                          3222              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002FAE  0285 0000FE3F           3223              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002FB4  0685 00000000           3224              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002FBA                          3225  
00002FBA                          3226                     
00002FBA  6100 0C14               3227              BSR     GET_EA_EA_SRC      *GETS <ea>
00002FBE  163C 002C               3228              MOVE.B  #',',D3
00002FC2  6100 14AA               3229              BSR     PUSH_STACK                  
00002FC6  6100 1038               3230              BSR     GET_EA_EA_DEST       *GETS Dn    
00002FCA                          3231  
00002FCA                          3232              
00002FCA  6000 0002               3233              BRA     OP1101_ADD_RETURN
00002FCE                          3234              
00002FCE                          3235  OP1101_ADD_RETURN
00002FCE  4E75                    3236              RTS
00002FD0                          3237              
00002FD0                          3238              *ADDW
00002FD0  0C01 0006               3239              CMPI.B  #$6,D1
00002FD4  6700 0056               3240              BEQ     OP_ADDA_W
00002FD8  0C01 000E               3241              CMPI.B  #$E,D1
00002FDC  6700 0066               3242              BEQ     OP_ADDA_L 
00002FE0                          3243  
00002FE0  4EF8 17DE               3244              JMP     OP_DATA  
00002FE4                          3245            
00002FE4                          3246  *---------------------------------------------------------------------------*
00002FE4                          3247  * OP_ADD: display ADD and proceed to EA
00002FE4                          3248  *---------------------------------------------------------------------------*  
00002FE4  43F9 00004CAF           3249  OP_ADD_B    LEA     DISP_ADD_B,A1
00002FEA  103C 000E               3250              MOVE.B  #14,D0
00002FEE  4E4F                    3251              TRAP    #15
00002FF0  183C 0000               3252              MOVE.B  #0,D4
00002FF4  4EF9 00003780           3253              JMP     EA_GEN
00002FFA                          3254  
00002FFA  4E75                    3255              RTS
00002FFC                          3256  
00002FFC  43F9 00004CB8           3257  OP_ADD_W    LEA     DISP_ADD_W,A1
00003002  103C 000E               3258              MOVE.B  #14,D0
00003006  4E4F                    3259              TRAP    #15
00003008  183C 0001               3260              MOVE.B  #1,D4
0000300C  4EF9 00003780           3261              JMP     EA_GEN
00003012                          3262  
00003012  4E75                    3263              RTS
00003014                          3264  
00003014  43F9 00004CC1           3265  OP_ADD_L    LEA     DISP_ADD_L,A1
0000301A  103C 000E               3266              MOVE.B  #14,D0
0000301E  4E4F                    3267              TRAP    #15
00003020  183C 0002               3268              MOVE.B  #2,D4
00003024  4EF9 00003780           3269              JMP     EA_GEN
0000302A                          3270  
0000302A  4E75                    3271              RTS
0000302C                          3272  
0000302C                          3273  *---------------------------------------------------------------------------*
0000302C                          3274  * OP_ADDA: display ADDA and proceed to EA
0000302C                          3275  *---------------------------------------------------------------------------*  
0000302C  43F9 00004CCA           3276  OP_ADDA_W   LEA     DISP_ADDA_W,A1
00003032  103C 000E               3277              MOVE.B  #14,D0
00003036  4E4F                    3278              TRAP    #15
00003038  183C 0001               3279              MOVE.B  #1,D4
0000303C  4EF9 00003780           3280              JMP     EA_GEN
00003042                          3281  
00003042  4E75                    3282              RTS
00003044                          3283  
00003044  43F9 00004CD4           3284  OP_ADDA_L   LEA     DISP_ADDA_L,A1
0000304A  103C 000E               3285              MOVE.B  #14,D0
0000304E  4E4F                    3286              TRAP    #15
00003050  183C 0002               3287              MOVE.B  #2,D4
00003054  4EF9 00003780           3288              JMP     EA_GEN
0000305A                          3289  
0000305A  4E75                    3290              RTS
0000305C                          3291              
0000305C                          3292  *---------------------------------------------------------------------------*
0000305C                          3293  * OP1110: LSR/LSL/ASR/ASL/ROL/ROR
0000305C                          3294  *---------------------------------------------------------------------------* 
0000305C  4280                    3295  OP1110      CLR.L   D0                  
0000305E  4281                    3296              CLR.L   D1   
00003060  4284                    3297              CLR.L   D4                   
00003062  227C 00000000           3298              MOVEA.L #0, A1                 
00003068  2205                    3299              MOVE.L  D5,D1
0000306A                          3300              
0000306A                          3301              *1)CHECK FOR MEMORY ROTATE/SHIFT FIRST
0000306A  2205                    3302              MOVE.L  D5,D1                   *RESET
0000306C  0281 0000FEC0           3303              ANDI.L  #%1111111011000000,D1
00003072  0C81 0000E0C0           3304              CMPI.L  #%1110000011000000,D1
00003078  6700 0276               3305              BEQ     OP_ASX                  *ASX
0000307C                          3306  
0000307C                          3307              
0000307C  0281 0000FEC0           3308              ANDI.L  #%1111111011000000,D1
00003082  0C81 0000E6C0           3309              CMPI.L  #%1110011011000000,D1
00003088  6700 0480               3310              BEQ     OP_ROX                  *ROX
0000308C                          3311  
0000308C  2205                    3312              MOVE.L  D5,D1                   *RESET
0000308E  0281 0000FEC0           3313              ANDI.L  #%1111111011000000,D1
00003094  0C81 0000E2C0           3314              CMPI.L  #%1110001011000000,D1
0000309A  6700 003A               3315              BEQ     OP_LSX                  *LSX
0000309E                          3316  
0000309E                          3317    
0000309E                          3318              *2) CHECK FOR REGISTER SHIFTS
0000309E  2205                    3319              MOVE.L  D5,D1                   *RESET
000030A0  0281 0000F018           3320              ANDI.L  #%1111000000011000,D1
000030A6  0C81 0000E008           3321              CMPI.L  #%1110000000001000,D1
000030AC  6700 0028               3322              BEQ     OP_LSX                  *LSX
000030B0                          3323  
000030B0                          3324              
000030B0  2205                    3325              MOVE.L  D5,D1                   *RESET
000030B2  0281 0000F018           3326              ANDI.L  #%1111000000011000,D1
000030B8  0C81 0000E000           3327              CMPI.L  #%1110000000000000,D1
000030BE  6700 0230               3328              BEQ     OP_ASX                  *ASX
000030C2                          3329  
000030C2                          3330              
000030C2  2205                    3331              MOVE.L  D5,D1                   *RESET
000030C4  0281 0000F018           3332              ANDI.L  #%1111000000011000,D1
000030CA  0C81 0000E018           3333              CMPI.L  #%1110000000011000,D1
000030D0  6700 0438               3334              BEQ     OP_ROX                  *ROX
000030D4                          3335  
000030D4                          3336  
000030D4                          3337                          
000030D4                          3338  OP1110_RETURN       
000030D4  4E75                    3339              RTS
000030D6                          3340  
000030D6                          3341  
000030D6                          3342  *---------------------------------------------------------------------------*
000030D6                          3343  * OP_LSR: decode and display LSR
000030D6                          3344  *---------------------------------------------------------------------------*        
000030D6                          3345  OP_LSX     
000030D6  163C 004C               3346              MOVE.B  #'L',D3
000030DA  6100 1392               3347              BSR     PUSH_STACK
000030DE  163C 0053               3348              MOVE.B  #'S',D3
000030E2  6100 138A               3349              BSR     PUSH_STACK
000030E6                          3350              
000030E6                          3351              *FIND IF ITS RIGHT OR LEFT DIR
000030E6  2205                    3352              MOVE.L  D5,D1                   *RESET
000030E8  0281 00000100           3353              ANDI.L  #%0000000100000000,D1
000030EE  0C81 00000000           3354              CMPI.L  #%0000000000000000,D1   * RIGHT CHECK
000030F4  6700 000E               3355              BEQ     OP_LSX_R      
000030F8  163C 004C               3356              MOVE.B  #'L',D3
000030FC  6100 1370               3357              BSR     PUSH_STACK
00003100  6000 000A               3358              BRA     OP_LSX_DIR
00003104                          3359  OP_LSX_R           
00003104  163C 0052               3360              MOVE.B  #'R',D3
00003108  6100 1364               3361              BSR     PUSH_STACK
0000310C                          3362              
0000310C                          3363  OP_LSX_DIR
0000310C  163C 002E               3364              MOVE.B  #'.',D3
00003110  6100 135C               3365              BSR     PUSH_STACK
00003114                          3366  
00003114                          3367              *FIND SIZE OF OPCODE
00003114  2205                    3368              MOVE.L  D5,D1                   *RESET
00003116  0281 000000C0           3369              ANDI.L  #%0000000011000000,D1
0000311C  0C81 00000080           3370              CMPI.L  #%0000000010000000,D1            *L
00003122  6700 0016               3371              BEQ     OP_LSX_L
00003126  0C81 00000040           3372              CMPI.L  #%0000000001000000,D1            *W
0000312C  6700 0018               3373              BEQ     OP_LSX_W  
00003130  0C81 00000000           3374              CMPI.L  #%0000000000000000,D1            *W
00003136  6700 001A               3375              BEQ     OP_LSX_B       
0000313A                          3376                                      *OTHERWISE B    
0000313A                          3377              
0000313A                          3378  OP_LSX_L
0000313A  163C 004C               3379              MOVE.B  #'L',D3
0000313E  6100 132E               3380              BSR     PUSH_STACK
00003142  6000 001A               3381              BRA     OP_LSX_CHECK_FORMAT 
00003146                          3382  OP_LSX_W
00003146  163C 0057               3383              MOVE.B  #'W',D3
0000314A  6100 1322               3384              BSR     PUSH_STACK
0000314E  6000 000E               3385              BRA     OP_LSX_CHECK_FORMAT 
00003152                          3386  OP_LSX_B
00003152  163C 0042               3387              MOVE.B  #'B',D3
00003156  6100 1316               3388              BSR     PUSH_STACK
0000315A  6000 0002               3389              BRA     OP_LSX_CHECK_FORMAT 
0000315E                          3390                        
0000315E                          3391  OP_LSX_CHECK_FORMAT              
0000315E                          3392              * CHECKS IF ITS A MEMORY SHIFT FORMAT
0000315E  2205                    3393              MOVE.L  D5,D1                   *RESET
00003160  0281 0000FEC0           3394              ANDI.L  #%1111111011000000,D1
00003166  0C81 0000E2C0           3395              CMPI.L  #%1110001011000000,D1
0000316C  6700 0156               3396              BEQ     OP_LSX_MEMORY           
00003170                          3397              
00003170                          3398              *ELSE ITS REGISTER
00003170                          3399  OP_LSX_REGISTER
00003170                          3400             *TODO
00003170                          3401             *CHECK IF ITS INTERMEDIATE OR REGISTER
00003170  2205                    3402             MOVE.L  D5,D1                   *RESET
00003172  EA99                    3403             ROR.L   #5,D1 
00003174  0281 00000001           3404             ANDI.L  #1,D1
0000317A  0C81 00000000           3405             CMPI.L  #0,D1                    * 1=DATA REGISTER 0= INTERMEDIATE(1-7)
00003180  6700 003E               3406             BEQ     OP_LSX_INTERMEDIATE
00003184                          3407             *ELSE ITS DATA REGISTER
00003184                          3408  
00003184                          3409             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00003184  13FC 0082 00004DF8      3410             MOVE.B   #$82,DEST_REGISTER_FORMAT
0000318C  13FC 0000 00004DF9      3411             MOVE.B   #$00,SRC_REGISTER_FORMAT
00003194                          3412             
00003194                          3413             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00003194  13FC 00B9 00004DFB      3414             MOVE.B   #$B9,GET_DST_START_END
0000319C  13FC 0020 00004DFC      3415             MOVE.B   #$20,GET_SRC_START_END
000031A4                          3416             
000031A4                          3417             *SETS BOTH SRC/DEST MODES TO "Dn"
000031A4  0285 0000FE07           3418             ANDI.L   #%1111111000000111,D5
000031AA  0685 00000000           3419             ADDI.L   #%0000000000000000,D5
000031B0                          3420             
000031B0                          3421              *CLEAR D3
000031B0  4283                    3422              CLR.L   D3
000031B2                          3423           
000031B2  163C 002C               3424              MOVE.B  #',',D3
000031B6  6100 12B6               3425              BSR     PUSH_STACK
000031BA  6100 0A14               3426              BSR     GET_EA_EA_SRC
000031BE                          3427              
000031BE  4E75                    3428              RTS
000031C0                          3429  
000031C0                          3430  OP_LSX_INTERMEDIATE
000031C0                          3431             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000031C0  13FC 0082 00004DF8      3432             MOVE.B   #$82,DEST_REGISTER_FORMAT
000031C8  13FC 0000 00004DF9      3433             MOVE.B   #$00,SRC_REGISTER_FORMAT
000031D0                          3434             
000031D0                          3435             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000031D0  13FC 00B9 00004DFB      3436             MOVE.B   #$B9,GET_DST_START_END
000031D8  13FC 0020 00004DFC      3437             MOVE.B   #$20,GET_SRC_START_END
000031E0                          3438             
000031E0                          3439             *SETS BOTH SRC/DEST MODES TO "Dn"
000031E0  0285 0000FE07           3440             ANDI.L   #%1111111000000111,D5
000031E6  0685 00000000           3441             ADDI.L   #%0000000000000000,D5
000031EC                          3442             
000031EC                          3443              *CLEAR D3
000031EC  4283                    3444              CLR.L   D3
000031EE                          3445             
000031EE                          3446  *-------------------------grabbing #immediate data-----------------------*
000031EE                          3447  
000031EE                          3448  *GET DATA FROM ADDQ AND PRINT #0-8
000031EE  163C 0020               3449              MOVE.B  #' ',D3
000031F2  6100 127A               3450              BSR     PUSH_STACK
000031F6  163C 0023               3451              MOVE.B  #'#',D3
000031FA  6100 1272               3452              BSR     PUSH_STACK 
000031FE                          3453  
000031FE                          3454                       
000031FE                          3455              *GET DATA #   
000031FE  2205                    3456              MOVE.L  D5,D1
00003200  EC99                    3457              ROR.L   #6,D1            
00003202  E699                    3458              ROR.L   #3,D1
00003204  0281 00000007           3459              ANDI.L  #$07,D1
0000320A                          3460              
0000320A  0C01 0000               3461              CMPI.B  #%000,D1
0000320E  6700 003A               3462              BEQ     OP_LSX_0
00003212  0C01 0001               3463              CMPI.B  #%001,D1
00003216  6700 003E               3464              BEQ     OP_LSX_1
0000321A  0C01 0002               3465              CMPI.B  #%010,D1
0000321E  6700 0042               3466              BEQ     OP_LSX_2
00003222  0C01 0003               3467              CMPI.B  #%011,D1
00003226  6700 0046               3468              BEQ     OP_LSX_3
0000322A  0C01 0004               3469              CMPI.B  #%100,D1
0000322E  6700 004A               3470              BEQ     OP_LSX_4
00003232  0C01 0005               3471              CMPI.B  #%101,D1
00003236  6700 004E               3472              BEQ     OP_LSX_5
0000323A  0C01 0006               3473              CMPI.B  #%110,D1
0000323E  6700 0052               3474              BEQ     OP_LSX_6
00003242  0C01 0007               3475              CMPI.B  #%111,D1
00003246  6700 0056               3476              BEQ     OP_LSX_7
0000324A                          3477              
0000324A                          3478  OP_LSX_0
0000324A  163C 0030               3479              MOVE.B  #'0',D3
0000324E  6100 121E               3480              BSR     PUSH_STACK
00003252  6000 005E               3481              BRA     OP_LSX_AFTER_IMMEDIATE            
00003256                          3482  OP_LSX_1
00003256  163C 0031               3483              MOVE.B  #'1',D3
0000325A  6100 1212               3484              BSR     PUSH_STACK
0000325E  6000 0052               3485              BRA     OP_LSX_AFTER_IMMEDIATE            
00003262                          3486  OP_LSX_2
00003262  163C 0032               3487              MOVE.B  #'2',D3
00003266  6100 1206               3488              BSR     PUSH_STACK
0000326A  6000 0046               3489              BRA     OP_LSX_AFTER_IMMEDIATE            
0000326E                          3490  OP_LSX_3
0000326E  163C 0033               3491              MOVE.B  #'3',D3
00003272  6100 11FA               3492              BSR     PUSH_STACK
00003276  6000 003A               3493              BRA     OP_LSX_AFTER_IMMEDIATE            
0000327A                          3494  OP_LSX_4
0000327A  163C 0034               3495              MOVE.B  #'4',D3
0000327E  6100 11EE               3496              BSR     PUSH_STACK
00003282  6000 002E               3497              BRA     OP_LSX_AFTER_IMMEDIATE           
00003286                          3498  OP_LSX_5
00003286  163C 0035               3499              MOVE.B  #'5',D3
0000328A  6100 11E2               3500              BSR     PUSH_STACK
0000328E  6000 0022               3501              BRA     OP_LSX_AFTER_IMMEDIATE
00003292                          3502  OP_LSX_6
00003292  163C 0036               3503              MOVE.B  #'6',D3
00003296  6100 11D6               3504              BSR     PUSH_STACK
0000329A  6000 0016               3505              BRA     OP_LSX_AFTER_IMMEDIATE
0000329E                          3506  OP_LSX_7
0000329E  163C 0037               3507              MOVE.B  #'7',D3
000032A2  6100 11CA               3508              BSR     PUSH_STACK
000032A6  6000 000A               3509              BRA     OP_LSX_AFTER_IMMEDIATE
000032AA                          3510  
000032AA                          3511  OP_LSX_8
000032AA  163C 0038               3512              MOVE.B  #'8',D3
000032AE  6100 11BE               3513              BSR     PUSH_STACK
000032B2                          3514              
000032B2                          3515  OP_LSX_AFTER_IMMEDIATE            
000032B2                          3516  
000032B2                          3517  *-------------------------grabbing #immediate data-----------------------*
000032B2                          3518  
000032B2  163C 002C               3519              MOVE.B  #',',D3
000032B6  6100 11B6               3520              BSR     PUSH_STACK
000032BA  6100 0914               3521              BSR     GET_EA_EA_SRC
000032BE                          3522              
000032BE  4E75                    3523              RTS
000032C0                          3524  
000032C0  6000 002A               3525              BRA     OP_LSX_RETURN
000032C4                          3526              
000032C4                          3527              
000032C4                          3528  OP_LSX_MEMORY
000032C4                          3529             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000032C4  13FC 0083 00004DF9      3530             MOVE.B   #$83,SRC_REGISTER_FORMAT
000032CC                          3531             
000032CC                          3532             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000032CC  13FC 00B9 00004DFB      3533             MOVE.B   #$B9,GET_DST_START_END
000032D4  13FC 0020 00004DFC      3534             MOVE.B   #$20,GET_SRC_START_END
000032DC                          3535             
000032DC                          3536             *pop previous thing out
000032DC  6100 1198               3537             BSR      POP_STACK
000032E0                          3538             
000032E0                          3539             *print w
000032E0  163C 0057               3540             MOVE.B  #'W',D3
000032E4  6100 1188               3541             BSR     PUSH_STACK
000032E8  6100 08E6               3542             BSR     GET_EA_EA_SRC
000032EC                          3543  
000032EC                          3544  OP_LSX_RETURN
000032EC  6000 FDE6               3545              BRA     OP1110_RETURN  
000032F0                          3546              
000032F0                          3547  *---------------------------------------------------------------------------*
000032F0                          3548  * OP_LSR: decode and display LSR IMMEDIATE/REGISTER
000032F0                          3549  *---------------------------------------------------------------------------*        
000032F0                          3550  OP_ASX
000032F0  163C 0041               3551              MOVE.B  #'A',D3
000032F4  6100 1178               3552              BSR     PUSH_STACK
000032F8  163C 0053               3553              MOVE.B  #'S',D3
000032FC  6100 1170               3554              BSR     PUSH_STACK
00003300                          3555              
00003300                          3556              *FIND IF ITS RIGHT OR LEFT DIR
00003300  2205                    3557              MOVE.L  D5,D1                   *RESET
00003302  0281 00000100           3558              ANDI.L  #%0000000100000000,D1
00003308  0C81 00000000           3559              CMPI.L  #%0000000000000000,D1   * RIGHT CHECK
0000330E  6700 000E               3560              BEQ     OP_ASX_R      
00003312  163C 004C               3561              MOVE.B  #'L',D3
00003316  6100 1156               3562              BSR     PUSH_STACK
0000331A  6000 000A               3563              BRA     OP_ASX_DIR
0000331E                          3564  OP_ASX_R           
0000331E  163C 0052               3565              MOVE.B  #'R',D3
00003322  6100 114A               3566              BSR     PUSH_STACK
00003326                          3567              
00003326                          3568  OP_ASX_DIR
00003326  163C 002E               3569              MOVE.B  #'.',D3
0000332A  6100 1142               3570              BSR     PUSH_STACK
0000332E                          3571  
0000332E                          3572              *FIND SIZE OF OPCODE
0000332E  2205                    3573              MOVE.L  D5,D1                   *RESET
00003330  0281 000000C0           3574              ANDI.L  #%0000000011000000,D1
00003336  0C81 00000080           3575              CMPI.L  #%0000000010000000,D1            *L
0000333C  6700 0016               3576              BEQ     OP_ASX_L
00003340  0C81 00000040           3577              CMPI.L  #%0000000001000000,D1            *W
00003346  6700 0018               3578              BEQ     OP_ASX_W  
0000334A  0C81 00000000           3579              CMPI.L  #%0000000000000000,D1            *W
00003350  6700 001A               3580              BEQ     OP_ASX_B       
00003354                          3581                                      *OTHERWISE B    
00003354                          3582              
00003354                          3583  OP_ASX_L
00003354  163C 004C               3584              MOVE.B  #'L',D3
00003358  6100 1114               3585              BSR     PUSH_STACK
0000335C  6000 001A               3586              BRA     OP_ASX_CHECK_FORMAT 
00003360                          3587  OP_ASX_W
00003360  163C 0057               3588              MOVE.B  #'W',D3
00003364  6100 1108               3589              BSR     PUSH_STACK
00003368  6000 000E               3590              BRA     OP_ASX_CHECK_FORMAT 
0000336C                          3591  OP_ASX_B
0000336C  163C 0042               3592              MOVE.B  #'B',D3
00003370  6100 10FC               3593              BSR     PUSH_STACK
00003374  6000 0002               3594              BRA     OP_ASX_CHECK_FORMAT 
00003378                          3595                        
00003378                          3596  OP_ASX_CHECK_FORMAT              
00003378                          3597              * CHECKS IF ITS A MEMORY SHIFT FORMAT
00003378  2205                    3598              MOVE.L  D5,D1                   *RESET
0000337A  0281 0000FEC0           3599              ANDI.L  #%1111111011000000,D1
00003380  0C81 0000E0C0           3600              CMPI.L  #%1110000011000000,D1
00003386  6700 0156               3601              BEQ     OP_ASX_MEMORY           
0000338A                          3602              
0000338A                          3603              *ELSE ITS REGISTER
0000338A                          3604  OP_ASX_REGISTER
0000338A                          3605             *TODO
0000338A                          3606             *CHECK IF ITS INTERMEDIATE OR REGISTER
0000338A  2205                    3607             MOVE.L  D5,D1                   *RESET
0000338C  EA99                    3608             ROR.L   #5,D1 
0000338E  0281 00000001           3609             ANDI.L  #1,D1
00003394  0C81 00000000           3610             CMPI.L  #0,D1                    * 1=DATA REGISTER 0= INTERMEDIATE(1-7)
0000339A  6700 003E               3611             BEQ     OP_ASX_INTERMEDIATE
0000339E                          3612             *ELSE ITS DATA REGISTER
0000339E                          3613  
0000339E                          3614             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000339E  13FC 0082 00004DF8      3615             MOVE.B   #$82,DEST_REGISTER_FORMAT
000033A6  13FC 0000 00004DF9      3616             MOVE.B   #$00,SRC_REGISTER_FORMAT
000033AE                          3617             
000033AE                          3618             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000033AE  13FC 00B9 00004DFB      3619             MOVE.B   #$B9,GET_DST_START_END
000033B6  13FC 0020 00004DFC      3620             MOVE.B   #$20,GET_SRC_START_END
000033BE                          3621             
000033BE                          3622             *SETS BOTH SRC/DEST MODES TO "Dn"
000033BE  0285 0000FE07           3623             ANDI.L   #%1111111000000111,D5
000033C4  0685 00000000           3624             ADDI.L   #%0000000000000000,D5
000033CA                          3625             
000033CA                          3626              *CLEAR D3
000033CA  4283                    3627              CLR.L   D3
000033CC                          3628           
000033CC  163C 002C               3629              MOVE.B  #',',D3
000033D0  6100 109C               3630              BSR     PUSH_STACK
000033D4  6100 07FA               3631              BSR     GET_EA_EA_SRC
000033D8                          3632              
000033D8  4E75                    3633              RTS
000033DA                          3634  
000033DA                          3635  OP_ASX_INTERMEDIATE
000033DA                          3636             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000033DA  13FC 0082 00004DF8      3637             MOVE.B   #$82,DEST_REGISTER_FORMAT
000033E2  13FC 0000 00004DF9      3638             MOVE.B   #$00,SRC_REGISTER_FORMAT
000033EA                          3639             
000033EA                          3640             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000033EA  13FC 00B9 00004DFB      3641             MOVE.B   #$B9,GET_DST_START_END
000033F2  13FC 0020 00004DFC      3642             MOVE.B   #$20,GET_SRC_START_END
000033FA                          3643             
000033FA                          3644             *SETS BOTH SRC/DEST MODES TO "Dn"
000033FA  0285 0000FE07           3645             ANDI.L   #%1111111000000111,D5
00003400  0685 00000000           3646             ADDI.L   #%0000000000000000,D5
00003406                          3647             
00003406                          3648              *CLEAR D3
00003406  4283                    3649              CLR.L   D3
00003408                          3650             
00003408                          3651  *-------------------------grabbing #immediate data-----------------------*
00003408                          3652  
00003408                          3653  *GET DATA FROM ADDQ AND PRINT #0-8
00003408  163C 0020               3654              MOVE.B  #' ',D3
0000340C  6100 1060               3655              BSR     PUSH_STACK
00003410  163C 0023               3656              MOVE.B  #'#',D3
00003414  6100 1058               3657              BSR     PUSH_STACK 
00003418                          3658  
00003418                          3659                       
00003418                          3660              *GET DATA #   
00003418  2205                    3661              MOVE.L  D5,D1
0000341A  EC99                    3662              ROR.L   #6,D1            
0000341C  E699                    3663              ROR.L   #3,D1
0000341E  0281 00000007           3664              ANDI.L  #$07,D1
00003424                          3665              
00003424  0C01 0000               3666              CMPI.B  #%000,D1
00003428  6700 003A               3667              BEQ     OP_ASX_0
0000342C  0C01 0001               3668              CMPI.B  #%001,D1
00003430  6700 003E               3669              BEQ     OP_ASX_1
00003434  0C01 0002               3670              CMPI.B  #%010,D1
00003438  6700 0042               3671              BEQ     OP_ASX_2
0000343C  0C01 0003               3672              CMPI.B  #%011,D1
00003440  6700 0046               3673              BEQ     OP_ASX_3
00003444  0C01 0004               3674              CMPI.B  #%100,D1
00003448  6700 004A               3675              BEQ     OP_ASX_4
0000344C  0C01 0005               3676              CMPI.B  #%101,D1
00003450  6700 004E               3677              BEQ     OP_ASX_5
00003454  0C01 0006               3678              CMPI.B  #%110,D1
00003458  6700 0052               3679              BEQ     OP_ASX_6
0000345C  0C01 0007               3680              CMPI.B  #%111,D1
00003460  6700 0056               3681              BEQ     OP_ASX_7
00003464                          3682              
00003464                          3683  OP_ASX_0
00003464  163C 0030               3684              MOVE.B  #'0',D3
00003468  6100 1004               3685              BSR     PUSH_STACK
0000346C  6000 005E               3686              BRA     OP_ASX_AFTER_IMMEDIATE            
00003470                          3687  OP_ASX_1
00003470  163C 0031               3688              MOVE.B  #'1',D3
00003474  6100 0FF8               3689              BSR     PUSH_STACK
00003478  6000 0052               3690              BRA     OP_ASX_AFTER_IMMEDIATE            
0000347C                          3691  OP_ASX_2
0000347C  163C 0032               3692              MOVE.B  #'2',D3
00003480  6100 0FEC               3693              BSR     PUSH_STACK
00003484  6000 0046               3694              BRA     OP_ASX_AFTER_IMMEDIATE            
00003488                          3695  OP_ASX_3
00003488  163C 0033               3696              MOVE.B  #'3',D3
0000348C  6100 0FE0               3697              BSR     PUSH_STACK
00003490  6000 003A               3698              BRA     OP_ASX_AFTER_IMMEDIATE            
00003494                          3699  OP_ASX_4
00003494  163C 0034               3700              MOVE.B  #'4',D3
00003498  6100 0FD4               3701              BSR     PUSH_STACK
0000349C  6000 002E               3702              BRA     OP_ASX_AFTER_IMMEDIATE           
000034A0                          3703  OP_ASX_5
000034A0  163C 0035               3704              MOVE.B  #'5',D3
000034A4  6100 0FC8               3705              BSR     PUSH_STACK
000034A8  6000 0022               3706              BRA     OP_ASX_AFTER_IMMEDIATE
000034AC                          3707  OP_ASX_6
000034AC  163C 0036               3708              MOVE.B  #'6',D3
000034B0  6100 0FBC               3709              BSR     PUSH_STACK
000034B4  6000 0016               3710              BRA     OP_ASX_AFTER_IMMEDIATE
000034B8                          3711  OP_ASX_7
000034B8  163C 0037               3712              MOVE.B  #'7',D3
000034BC  6100 0FB0               3713              BSR     PUSH_STACK
000034C0  6000 000A               3714              BRA     OP_ASX_AFTER_IMMEDIATE
000034C4                          3715  
000034C4                          3716  OP_ASX_8
000034C4  163C 0038               3717              MOVE.B  #'8',D3
000034C8  6100 0FA4               3718              BSR     PUSH_STACK
000034CC                          3719              
000034CC                          3720  OP_ASX_AFTER_IMMEDIATE            
000034CC                          3721  
000034CC                          3722  *-------------------------grabbing #immediate data-----------------------*
000034CC                          3723  
000034CC  163C 002C               3724              MOVE.B  #',',D3
000034D0  6100 0F9C               3725              BSR     PUSH_STACK
000034D4  6100 06FA               3726              BSR     GET_EA_EA_SRC
000034D8                          3727              
000034D8  4E75                    3728              RTS
000034DA                          3729  
000034DA  6000 002A               3730              BRA     OP_ASX_RETURN
000034DE                          3731              
000034DE                          3732              
000034DE                          3733  OP_ASX_MEMORY
000034DE                          3734             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000034DE  13FC 0083 00004DF9      3735             MOVE.B   #$83,SRC_REGISTER_FORMAT
000034E6                          3736             
000034E6                          3737             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000034E6  13FC 00B9 00004DFB      3738             MOVE.B   #$B9,GET_DST_START_END
000034EE  13FC 0020 00004DFC      3739             MOVE.B   #$20,GET_SRC_START_END
000034F6                          3740             
000034F6                          3741             *pop previous thing out
000034F6  6100 0F7E               3742             BSR      POP_STACK
000034FA                          3743             
000034FA                          3744             *print w
000034FA  163C 0057               3745             MOVE.B  #'W',D3
000034FE  6100 0F6E               3746             BSR     PUSH_STACK
00003502  6100 06CC               3747             BSR     GET_EA_EA_SRC
00003506                          3748  
00003506                          3749  OP_ASX_RETURN
00003506  6000 FBCC               3750              BRA     OP1110_RETURN 
0000350A                          3751      
0000350A                          3752  *---------------------------------------------------------------------------*
0000350A                          3753  * OP_ROX: decode and display LSR IMMEDIATE/REGISTER
0000350A                          3754  *---------------------------------------------------------------------------*        
0000350A                          3755  OP_ROX
0000350A                          3756  
0000350A  163C 0052               3757              MOVE.B  #'R',D3
0000350E  6100 0F5E               3758              BSR     PUSH_STACK
00003512  163C 004F               3759              MOVE.B  #'O',D3
00003516  6100 0F56               3760              BSR     PUSH_STACK
0000351A                          3761              
0000351A                          3762              *FIND IF ITS RIGHT OR LEFT DIR
0000351A  2205                    3763              MOVE.L  D5,D1                   *RESET
0000351C  0281 00000100           3764              ANDI.L  #%0000000100000000,D1
00003522  0C81 00000000           3765              CMPI.L  #%0000000000000000,D1   * RIGHT CHECK
00003528  6700 000E               3766              BEQ     OP_ROX_R      
0000352C  163C 004C               3767              MOVE.B  #'L',D3
00003530  6100 0F3C               3768              BSR     PUSH_STACK
00003534  6000 000A               3769              BRA     OP_ROX_DIR
00003538                          3770  OP_ROX_R           
00003538  163C 0052               3771              MOVE.B  #'R',D3
0000353C  6100 0F30               3772              BSR     PUSH_STACK
00003540                          3773              
00003540                          3774  OP_ROX_DIR
00003540  163C 002E               3775              MOVE.B  #'.',D3
00003544  6100 0F28               3776              BSR     PUSH_STACK
00003548                          3777  
00003548                          3778              *FIND SIZE OF OPCODE
00003548  2205                    3779              MOVE.L  D5,D1                   *RESET
0000354A  0281 000000C0           3780              ANDI.L  #%0000000011000000,D1
00003550  0C81 00000080           3781              CMPI.L  #%0000000010000000,D1            *L
00003556  6700 0016               3782              BEQ     OP_ROX_L
0000355A  0C81 00000040           3783              CMPI.L  #%0000000001000000,D1            *W
00003560  6700 0018               3784              BEQ     OP_ROX_W  
00003564  0C81 00000000           3785              CMPI.L  #%0000000000000000,D1            *W
0000356A  6700 001A               3786              BEQ     OP_ROX_B       
0000356E                          3787                                      *OTHERWISE B    
0000356E                          3788              
0000356E                          3789  OP_ROX_L
0000356E  163C 004C               3790              MOVE.B  #'L',D3
00003572  6100 0EFA               3791              BSR     PUSH_STACK
00003576  6000 001A               3792              BRA     OP_ROX_CHECK_FORMAT 
0000357A                          3793  OP_ROX_W
0000357A  163C 0057               3794              MOVE.B  #'W',D3
0000357E  6100 0EEE               3795              BSR     PUSH_STACK
00003582  6000 000E               3796              BRA     OP_ROX_CHECK_FORMAT 
00003586                          3797  OP_ROX_B
00003586  163C 0042               3798              MOVE.B  #'B',D3
0000358A  6100 0EE2               3799              BSR     PUSH_STACK
0000358E  6000 0002               3800              BRA     OP_ROX_CHECK_FORMAT 
00003592                          3801                        
00003592                          3802  OP_ROX_CHECK_FORMAT              
00003592                          3803              * CHECKS IF ITS A MEMORY SHIFT FORMAT
00003592  2205                    3804              MOVE.L  D5,D1                   *RESET
00003594  0281 0000FEC0           3805              ANDI.L  #%1111111011000000,D1
0000359A  0C81 0000E6C0           3806              CMPI.L  #%1110011011000000,D1
000035A0  6700 0156               3807              BEQ     OP_ROX_MEMORY           
000035A4                          3808              
000035A4                          3809              *ELSE ITS REGISTER
000035A4                          3810  OP_ROX_REGISTER
000035A4                          3811             *TODO
000035A4                          3812             *CHECK IF ITS INTERMEDIATE OR REGISTER
000035A4  2205                    3813             MOVE.L  D5,D1                   *RESET
000035A6  EA99                    3814             ROR.L   #5,D1 
000035A8  0281 00000001           3815             ANDI.L  #1,D1
000035AE  0C81 00000000           3816             CMPI.L  #0,D1                    * 1=DATA REGISTER 0= INTERMEDIATE(1-7)
000035B4  6700 003E               3817             BEQ     OP_ROX_INTERMEDIATE
000035B8                          3818             *ELSE ITS DATA REGISTER
000035B8                          3819  
000035B8                          3820             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000035B8  13FC 0082 00004DF8      3821             MOVE.B   #$82,DEST_REGISTER_FORMAT
000035C0  13FC 0000 00004DF9      3822             MOVE.B   #$00,SRC_REGISTER_FORMAT
000035C8                          3823             
000035C8                          3824             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000035C8  13FC 00B9 00004DFB      3825             MOVE.B   #$B9,GET_DST_START_END
000035D0  13FC 0020 00004DFC      3826             MOVE.B   #$20,GET_SRC_START_END
000035D8                          3827             
000035D8                          3828             *SETS BOTH SRC/DEST MODES TO "Dn"
000035D8  0285 0000FE07           3829             ANDI.L   #%1111111000000111,D5
000035DE  0685 00000000           3830             ADDI.L   #%0000000000000000,D5
000035E4                          3831             
000035E4                          3832              *CLEAR D3
000035E4  4283                    3833              CLR.L   D3
000035E6                          3834           
000035E6  163C 002C               3835              MOVE.B  #',',D3
000035EA  6100 0E82               3836              BSR     PUSH_STACK
000035EE  6100 05E0               3837              BSR     GET_EA_EA_SRC
000035F2                          3838              
000035F2  4E75                    3839              RTS
000035F4                          3840  
000035F4                          3841  OP_ROX_INTERMEDIATE
000035F4                          3842             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000035F4  13FC 0082 00004DF8      3843             MOVE.B   #$82,DEST_REGISTER_FORMAT
000035FC  13FC 0000 00004DF9      3844             MOVE.B   #$00,SRC_REGISTER_FORMAT
00003604                          3845             
00003604                          3846             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00003604  13FC 00B9 00004DFB      3847             MOVE.B   #$B9,GET_DST_START_END
0000360C  13FC 0020 00004DFC      3848             MOVE.B   #$20,GET_SRC_START_END
00003614                          3849             
00003614                          3850             *SETS BOTH SRC/DEST MODES TO "Dn"
00003614  0285 0000FE07           3851             ANDI.L   #%1111111000000111,D5
0000361A  0685 00000000           3852             ADDI.L   #%0000000000000000,D5
00003620                          3853             
00003620                          3854              *CLEAR D3
00003620  4283                    3855              CLR.L   D3
00003622                          3856             
00003622                          3857  *-------------------------grabbing #immediate data-----------------------*
00003622                          3858  
00003622                          3859  *GET DATA FROM ADDQ AND PRINT #0-8
00003622  163C 0020               3860              MOVE.B  #' ',D3
00003626  6100 0E46               3861              BSR     PUSH_STACK
0000362A  163C 0023               3862              MOVE.B  #'#',D3
0000362E  6100 0E3E               3863              BSR     PUSH_STACK 
00003632                          3864  
00003632                          3865                       
00003632                          3866              *GET DATA #   
00003632  2205                    3867              MOVE.L  D5,D1
00003634  EC99                    3868              ROR.L   #6,D1            
00003636  E699                    3869              ROR.L   #3,D1
00003638  0281 00000007           3870              ANDI.L  #$07,D1
0000363E                          3871              
0000363E  0C01 0000               3872              CMPI.B  #%000,D1
00003642  6700 003A               3873              BEQ     OP_ROX_0
00003646  0C01 0001               3874              CMPI.B  #%001,D1
0000364A  6700 003E               3875              BEQ     OP_ROX_1
0000364E  0C01 0002               3876              CMPI.B  #%010,D1
00003652  6700 0042               3877              BEQ     OP_ROX_2
00003656  0C01 0003               3878              CMPI.B  #%011,D1
0000365A  6700 0046               3879              BEQ     OP_ROX_3
0000365E  0C01 0004               3880              CMPI.B  #%100,D1
00003662  6700 004A               3881              BEQ     OP_ROX_4
00003666  0C01 0005               3882              CMPI.B  #%101,D1
0000366A  6700 004E               3883              BEQ     OP_ROX_5
0000366E  0C01 0006               3884              CMPI.B  #%110,D1
00003672  6700 0052               3885              BEQ     OP_ROX_6
00003676  0C01 0007               3886              CMPI.B  #%111,D1
0000367A  6700 0056               3887              BEQ     OP_ROX_7
0000367E                          3888              
0000367E                          3889  OP_ROX_0
0000367E  163C 0030               3890              MOVE.B  #'0',D3
00003682  6100 0DEA               3891              BSR     PUSH_STACK
00003686  6000 005E               3892              BRA     OP_ROX_AFTER_IMMEDIATE            
0000368A                          3893  OP_ROX_1
0000368A  163C 0031               3894              MOVE.B  #'1',D3
0000368E  6100 0DDE               3895              BSR     PUSH_STACK
00003692  6000 0052               3896              BRA     OP_ROX_AFTER_IMMEDIATE            
00003696                          3897  OP_ROX_2
00003696  163C 0032               3898              MOVE.B  #'2',D3
0000369A  6100 0DD2               3899              BSR     PUSH_STACK
0000369E  6000 0046               3900              BRA     OP_ROX_AFTER_IMMEDIATE            
000036A2                          3901  OP_ROX_3
000036A2  163C 0033               3902              MOVE.B  #'3',D3
000036A6  6100 0DC6               3903              BSR     PUSH_STACK
000036AA  6000 003A               3904              BRA     OP_ROX_AFTER_IMMEDIATE            
000036AE                          3905  OP_ROX_4
000036AE  163C 0034               3906              MOVE.B  #'4',D3
000036B2  6100 0DBA               3907              BSR     PUSH_STACK
000036B6  6000 002E               3908              BRA     OP_ROX_AFTER_IMMEDIATE           
000036BA                          3909  OP_ROX_5
000036BA  163C 0035               3910              MOVE.B  #'5',D3
000036BE  6100 0DAE               3911              BSR     PUSH_STACK
000036C2  6000 0022               3912              BRA     OP_ROX_AFTER_IMMEDIATE
000036C6                          3913  OP_ROX_6
000036C6  163C 0036               3914              MOVE.B  #'6',D3
000036CA  6100 0DA2               3915              BSR     PUSH_STACK
000036CE  6000 0016               3916              BRA     OP_ROX_AFTER_IMMEDIATE
000036D2                          3917  OP_ROX_7
000036D2  163C 0037               3918              MOVE.B  #'7',D3
000036D6  6100 0D96               3919              BSR     PUSH_STACK
000036DA  6000 000A               3920              BRA     OP_ROX_AFTER_IMMEDIATE
000036DE                          3921  
000036DE                          3922  OP_ROX_8
000036DE  163C 0038               3923              MOVE.B  #'8',D3
000036E2  6100 0D8A               3924              BSR     PUSH_STACK
000036E6                          3925              
000036E6                          3926  OP_ROX_AFTER_IMMEDIATE            
000036E6                          3927  
000036E6                          3928  *-------------------------grabbing #immediate data-----------------------*
000036E6                          3929  
000036E6  163C 002C               3930              MOVE.B  #',',D3
000036EA  6100 0D82               3931              BSR     PUSH_STACK
000036EE  6100 04E0               3932              BSR     GET_EA_EA_SRC
000036F2                          3933              
000036F2  4E75                    3934              RTS
000036F4                          3935  
000036F4  6000 0022               3936              BRA     OP_ROX_RETURN
000036F8                          3937              
000036F8                          3938              
000036F8                          3939  OP_ROX_MEMORY
000036F8                          3940             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000036F8  13FC 0083 00004DF9      3941             MOVE.B   #$83,SRC_REGISTER_FORMAT
00003700                          3942             
00003700                          3943             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00003700  13FC 0020 00004DFC      3944             MOVE.B   #$20,GET_SRC_START_END
00003708                          3945             
00003708                          3946             *pop previous thing out
00003708  6100 0D6C               3947             BSR      POP_STACK
0000370C                          3948             
0000370C                          3949             *print w
0000370C  163C 0057               3950             MOVE.B  #'W',D3
00003710  6100 0D5C               3951             BSR     PUSH_STACK
00003714  6100 04BA               3952             BSR     GET_EA_EA_SRC
00003718                          3953  
00003718                          3954  OP_ROX_RETURN
00003718  6000 F9BA               3955              BRA     OP1110_RETURN 
0000371C                          3956  
0000371C                          3957  
0000371C                          3958  
0000371C                          3959  
0000371C                          3960  
0000371C                          3961  
0000371C                          3962  
0000371C                          3963  
0000371C                          3964  
0000371C                          3965  
0000371C                          3966  
0000371C                          3967  
0000371C                          3968  
0000371C                          3969  
0000371C                          3970  
0000371C                          3971  
0000371C                          3972  
0000371C                          3973  
0000371C                          3974  
0000371C                          3975  
0000371C                          3976  
0000371C                          3977  
0000371C                          3978  
0000371C                          3979  
0000371C                          3980              
0000371C                          3981  *---------------------------------------------------------------------------*
0000371C                          3982  * OP1111 : Special reserved
0000371C                          3983  *---------------------------------------------------------------------------*           
0000371C  4EF8 17DE               3984  OP1111      JMP     OP_DATA
00003720                          3985  
00003720                          3986  *---------------------------------------------------------------------------*
00003720                          3987  * EA_NOSRC: decode and display effective addresses for NEG/JSR
00003720                          3988  *---------------------------------------------------------------------------*
00003720                          3989  EA_NOSRC    
00003720  4EB9 000037DE           3990              JSR     SRC_MODE
00003726  43F9 00004A44           3991              LEA     ENDLINE_M,A1
0000372C  103C 000E               3992              MOVE.B  #14,D0
00003730  4E4F                    3993              TRAP    #15
00003732  4E75                    3994              RTS
00003734                          3995              
00003734                          3996  *---------------------------------------------------------------------------*
00003734                          3997  * EA_ARITH: decode and display effective addresses for DIVS/MULS
00003734                          3998  *---------------------------------------------------------------------------*
00003734                          3999  EA_ARITH
00003734  4EB9 000037DE           4000              JSR     SRC_MODE
0000373A  43F9 00004DBE           4001              LEA     DISP_D,A1
00003740  103C 000E               4002              MOVE.B  #14,D0
00003744  4E4F                    4003              TRAP    #15
00003746  4EB9 00003A6A           4004              JSR     DEST_REGISTER
0000374C  43F9 00004A44           4005              LEA     ENDLINE_M,A1
00003752  103C 000E               4006              MOVE.B  #14,D0
00003756  4E4F                    4007              TRAP    #15
00003758  4E75                    4008              RTS
0000375A                          4009              
0000375A                          4010  *---------------------------------------------------------------------------*
0000375A                          4011  * EA_MOVEA: decode and display effective addresses for MOVEA/LEA
0000375A                          4012  *---------------------------------------------------------------------------*
0000375A                          4013  EA_MOVEA
0000375A  4EB9 000037DE           4014              JSR     SRC_MODE
00003760  43F9 00004DCF           4015              LEA     DISP_AOP,A1
00003766  103C 000E               4016              MOVE.B  #14,D0
0000376A  4E4F                    4017              TRAP    #15
0000376C  4EB9 00003A6A           4018              JSR     DEST_REGISTER
00003772  43F9 00004DCD           4019              LEA     DISP_CP,A1
00003778  103C 000D               4020              MOVE.B  #13,D0
0000377C  4E4F                    4021              TRAP    #15
0000377E  4E75                    4022              RTS
00003780                          4023              
00003780                          4024  *---------------------------------------------------------------------------*
00003780                          4025  * EA_GEN: decode and display effective addresses for MOVE
00003780                          4026  *---------------------------------------------------------------------------*
00003780                          4027  EA_GEN          
00003780                          4028              * retrieve/display source mode/register
00003780  4EB9 000037DE           4029              JSR     SRC_MODE
00003786                          4030              
00003786                          4031              * retrieve/display destination mode/register
00003786  4EB9 0000379A           4032              JSR     DEST_MODE
0000378C                          4033              
0000378C  43F9 00004A44           4034              LEA     ENDLINE_M,A1
00003792  103C 000E               4035              MOVE.B  #14,D0
00003796  4E4F                    4036              TRAP    #15
00003798                          4037              
00003798  4E75                    4038              RTS
0000379A                          4039  
0000379A                          4040  *---------------------------------------------------------------------------*
0000379A                          4041  * DEST_MODE: decode and display destination mode (bit 8 - 6)
0000379A                          4042  *---------------------------------------------------------------------------*           
0000379A                          4043  DEST_MODE   
0000379A                          4044              * clear registers to store temp data
0000379A  4280                    4045              CLR.L   D0                      
0000379C  4281                    4046              CLR.L   D1                      
0000379E  207C 00000000           4047              MOVEA.L #0, A0                  
000037A4  227C 00000000           4048              MOVEA.L #0, A1                  
000037AA  2205                    4049              MOVE.L  D5,D1
000037AC  EC89                    4050              LSR.L   #6,D1
000037AE  0281 00000007           4051              ANDI.L  #$7,D1
000037B4  0C01 0000               4052              CMPI.B  #0,D1   * Dn
000037B8  6700 0082               4053              BEQ     D_MODE000
000037BC  0C01 0002               4054              CMPI.B  #2,D1   * (An)
000037C0  6700 00C2               4055              BEQ     D_MODE010
000037C4  0C01 0003               4056              CMPI.B  #3,D1   * (An)+
000037C8  6700 011A               4057              BEQ     D_MODE011
000037CC  0C01 0004               4058              CMPI.B  #4,D1   * -(An)
000037D0  6700 0132               4059              BEQ     D_MODE100
000037D4  0C01 0007               4060              CMPI.B  #7,D1  * abs
000037D8  6700 017C               4061              BEQ     D_MODE111 
000037DC  4E75                    4062              RTS
000037DE                          4063  
000037DE                          4064  *---------------------------------------------------------------------------*
000037DE                          4065  * SRC_MODE: decode and display source mode (bit 5 - 3)
000037DE                          4066  *---------------------------------------------------------------------------*  
000037DE                          4067  SRC_MODE    
000037DE                          4068              * clear registers to store temp data
000037DE  4280                    4069              CLR.L   D0                      
000037E0  4281                    4070              CLR.L   D1                      
000037E2  207C 00000000           4071              MOVEA.L #0, A0                  
000037E8  227C 00000000           4072              MOVEA.L #0, A1                  
000037EE  2205                    4073              MOVE.L  D5,D1
000037F0  E489                    4074              LSR.L   #2,D1
000037F2  0281 0000000E           4075              ANDI.L  #$E,D1
000037F8                          4076              
000037F8  0C01 0000               4077              CMPI.B  #0,D1   * Dn
000037FC  6700 002A               4078              BEQ     MODE000
00003800  0C01 0002               4079              CMPI.B  #2,D1   * An 
00003804  6700 004A               4080              BEQ     MODE001
00003808  0C01 0004               4081              CMPI.B  #4,D1   * (An)
0000380C  6700 0056               4082              BEQ     MODE010
00003810  0C01 0006               4083              CMPI.B  #6,D1   * (An)+
00003814  6700 008E               4084              BEQ     MODE011
00003818  0C01 0008               4085              CMPI.B  #8,D1   * -(An)
0000381C  6700 00A6               4086              BEQ     MODE100
00003820  0C01 000F               4087              CMPI.B  #15,D1  * abs/immediate
00003824  6700 00FE               4088              BEQ     MODE111 
00003828                          4089        
00003828                          4090  *---------------------------------------------------------------------------*
00003828                          4091  * MODE000: decode and display source mode Dn
00003828                          4092  *---------------------------------------------------------------------------*           
00003828                          4093  MODE000     *Dn
00003828  43F9 00004DBE           4094              LEA     DISP_D,A1
0000382E  103C 000E               4095              MOVE.B  #14,D0
00003832  4E4F                    4096              TRAP    #15
00003834  4EB9 00003AC6           4097              JSR     SRC_REGISTER
0000383A  4E75                    4098              RTS
0000383C                          4099  
0000383C                          4100  *---------------------------------------------------------------------------*
0000383C                          4101  * D_MODE000: decode and display dest mode Dn
0000383C                          4102  *---------------------------------------------------------------------------*
0000383C                          4103  D_MODE000     *Dn
0000383C  43F9 00004DBE           4104              LEA     DISP_D,A1
00003842  103C 000E               4105              MOVE.B  #14,D0
00003846  4E4F                    4106              TRAP    #15
00003848  4EB9 00003A6A           4107              JSR     DEST_REGISTER
0000384E  4E75                    4108              RTS
00003850                          4109  
00003850                          4110  *---------------------------------------------------------------------------*
00003850                          4111  * MODE001: decode and display source mode An
00003850                          4112  *---------------------------------------------------------------------------* 
00003850                          4113  MODE001 *An
00003850  43F9 00004DC3           4114              LEA     DISP_A,A1
00003856  103C 000E               4115              MOVE.B  #14,D0
0000385A  4E4F                    4116              TRAP    #15
0000385C  4EB9 00003AC6           4117              JSR     SRC_REGISTER
00003862                          4118          
00003862  4E75                    4119              RTS
00003864                          4120  
00003864                          4121  *---------------------------------------------------------------------------*
00003864                          4122  * MODE010: decode and display source mode (An)
00003864                          4123  *---------------------------------------------------------------------------*    
00003864                          4124  MODE010 *(An)
00003864  43F9 00004DCF           4125              LEA     DISP_AOP,A1  *display (A
0000386A  103C 000E               4126              MOVE.B  #14,D0
0000386E  4E4F                    4127              TRAP    #15
00003870                          4128  
00003870  4EB9 00003AC6           4129              JSR     SRC_REGISTER * display register
00003876                          4130  
00003876  43F9 00004DCD           4131              LEA     DISP_CP,A1   *display )
0000387C  103C 000E               4132              MOVE.B  #14,D0
00003880  4E4F                    4133              TRAP    #15
00003882                          4134              
00003882  4E75                    4135              RTS
00003884                          4136  
00003884                          4137  *---------------------------------------------------------------------------*
00003884                          4138  * D_MODE010: decode and display dest mode (An)
00003884                          4139  *---------------------------------------------------------------------------*
00003884                          4140  D_MODE010 *(An)
00003884  43F9 00004DCF           4141              LEA     DISP_AOP,A1  *display (A
0000388A  103C 000E               4142              MOVE.B  #14,D0
0000388E  4E4F                    4143              TRAP    #15
00003890                          4144     
00003890  4EB9 00003A6A           4145              JSR     DEST_REGISTER * display register
00003896                          4146  
00003896  43F9 00004DCD           4147              LEA     DISP_CP,A1   *display )
0000389C  103C 000E               4148              MOVE.B  #14,D0
000038A0  4E4F                    4149              TRAP    #15
000038A2                          4150              
000038A2  4E75                    4151              RTS
000038A4                          4152  
000038A4                          4153  *---------------------------------------------------------------------------*
000038A4                          4154  * MODE011: decode and display source mode (An)+
000038A4                          4155  *---------------------------------------------------------------------------*
000038A4                          4156  MODE011 *(An)+
000038A4  43F9 00004DCF           4157              LEA     DISP_AOP,A1      *display (A
000038AA  103C 000E               4158              MOVE.B  #14,D0
000038AE  4E4F                    4159              TRAP    #15
000038B0                          4160              
000038B0  4EB9 00003AC6           4161              JSR     SRC_REGISTER    * display register
000038B6                          4162  
000038B6  43F9 00004DDC           4163              LEA     DISP_POST,A1    *display )+
000038BC  103C 000E               4164              MOVE.B  #14,D0
000038C0  4E4F                    4165              TRAP    #15
000038C2                          4166              
000038C2  4E75                    4167              RTS
000038C4                          4168              
000038C4                          4169  *---------------------------------------------------------------------------*
000038C4                          4170  * MODE100: decode and display source mode -(An)
000038C4                          4171  *---------------------------------------------------------------------------*
000038C4                          4172  MODE100 *-(An)
000038C4  43F9 00004DD5           4173              LEA     DISP_PRE,A1    *display -(A
000038CA  103C 000E               4174              MOVE.B  #14,D0
000038CE  4E4F                    4175              TRAP    #15
000038D0                          4176  
000038D0  4EB9 00003AC6           4177              JSR     SRC_REGISTER    *display register
000038D6                          4178  
000038D6  43F9 00004DCD           4179              LEA     DISP_CP,A1   *display )
000038DC  103C 000E               4180              MOVE.B  #14,D0
000038E0  4E4F                    4181              TRAP    #15
000038E2                          4182              
000038E2  4E75                    4183              RTS
000038E4                          4184  
000038E4                          4185  *---------------------------------------------------------------------------*
000038E4                          4186  * D_MODE011: decode and display dest mode (An)+
000038E4                          4187  *---------------------------------------------------------------------------*
000038E4                          4188  D_MODE011 *(An)+
000038E4  43F9 00004DCF           4189              LEA     DISP_AOP,A1      *display (A
000038EA  103C 000E               4190              MOVE.B  #14,D0
000038EE  4E4F                    4191              TRAP    #15
000038F0                          4192  
000038F0  4EB9 00003A6A           4193              JSR     DEST_REGISTER    * display register
000038F6                          4194  
000038F6  43F9 00004DDC           4195              LEA     DISP_POST,A1    *display )+
000038FC  103C 000E               4196              MOVE.B  #14,D0
00003900  4E4F                    4197              TRAP    #15
00003902                          4198              
00003902  4E75                    4199              RTS
00003904                          4200              
00003904                          4201  *---------------------------------------------------------------------------*
00003904                          4202  * D_MODE100: decode and display dest mode -(An)
00003904                          4203  *---------------------------------------------------------------------------*            
00003904                          4204  D_MODE100 *-(An)
00003904  43F9 00004DD5           4205              LEA     DISP_PRE,A1    *display -(A
0000390A  103C 000E               4206              MOVE.B  #14,D0
0000390E  4E4F                    4207              TRAP    #15
00003910                          4208              
00003910  4EB9 00003A6A           4209              JSR     DEST_REGISTER    *display register
00003916                          4210  
00003916  43F9 00004DCD           4211              LEA     DISP_CP,A1   *display )
0000391C  103C 000E               4212              MOVE.B  #14,D0
00003920  4E4F                    4213              TRAP    #15
00003922                          4214              
00003922  4E75                    4215              RTS
00003924                          4216  
00003924                          4217  *---------------------------------------------------------------------------*
00003924                          4218  * MODE111: decode and display source mode absolute/immediate
00003924                          4219  *---------------------------------------------------------------------------*
00003924                          4220  MODE111     * abs/immediate
00003924                          4221              * clear registers to store temp data
00003924  4280                    4222              CLR.L   D0                      
00003926  4281                    4223              CLR.L   D1                      
00003928  207C 00000000           4224              MOVEA.L #0, A0                  
0000392E  227C 00000000           4225              MOVEA.L #0, A1                  
00003934  2205                    4226              MOVE.L  D5,D1
00003936                          4227              
00003936                          4228              * retrieve source register for MODE 111
00003936  E389                    4229              LSL.L   #1,D1   * shift the bits to left by 1
00003938  0281 0000000E           4230              ANDI.L  #$E,D1  * mask the first 4 bits 
0000393E  0C01 0000               4231              CMPI.B  #0, D1  * if it's 0000, absolute word address
00003942  6700 003E               4232              BEQ     WORDMODE
00003946  0C01 0002               4233              CMPI.B  #2, D1  * if it's 0010, absolute long address
0000394A  6700 0062               4234              BEQ     LONGMODE
0000394E  0C01 0008               4235              CMPI.B  #8, D1  * if it's 1000, immediate data
00003952  6700 0086               4236              BEQ     IMMEDIATE
00003956                          4237       
00003956                          4238  *---------------------------------------------------------------------------*
00003956                          4239  * D_MODE111: decode and display dest mode absolute/immediate
00003956                          4240  *---------------------------------------------------------------------------*           
00003956                          4241  D_MODE111   * abs
00003956                          4242              * clear registers to store temp data
00003956  4280                    4243              CLR.L   D0                      
00003958  4281                    4244              CLR.L   D1                      
0000395A  207C 00000000           4245              MOVEA.L #0, A0                  
00003960  227C 00000000           4246              MOVEA.L #0, A1                  
00003966  2205                    4247              MOVE.L  D5,D1
00003968                          4248              
00003968                          4249              * retrieve dest register for MODE 111
00003968  EC89                    4250              LSR.L   #6,D1   * shift the bits to right by 6
0000396A  E689                    4251              LSR.L   #3,D1   * shift the bits to right by extra 3
0000396C  0201 0001               4252              ANDI.B  #1,D1   * mask the first 2 bits 
00003970  0C01 0000               4253              CMPI.B  #0, D1  * if it's 000, absolute word address
00003974  6700 000C               4254              BEQ     WORDMODE
00003978  0C01 0001               4255              CMPI.B  #1, D1  * if it's 001, absolute long address
0000397C  6700 0030               4256              BEQ     LONGMODE
00003980                          4257              *JSR     OP_DATA *not sure..
00003980  4E75                    4258              RTS
00003982                          4259  
00003982                          4260  
00003982                          4261  *---------------------------------------------------------------------------*
00003982                          4262  * WORDMODE: absolute word address
00003982                          4263  *---------------------------------------------------------------------------*
00003982  43F9 00004DB9           4264  WORDMODE    LEA     DISP_HEX,A1
00003988  103C 000E               4265              MOVE.B  #14,D0
0000398C  4E4F                    4266              TRAP    #15
0000398E                          4267              
0000398E  4285                    4268              CLR.L   D5
00003990  3A1D                    4269              MOVE.W  (A5)+,D5
00003992                          4270              
00003992  43F9 00004A97           4271              LEA     TMPOUTPUT,A1
00003998  2205                    4272              MOVE.L  D5,D1
0000399A  7404                    4273              MOVE.L  #4,D2       *move word size 4
0000399C  4EB8 12AA               4274              JSR     HEX2ASCII
000039A0  43F9 00004A97           4275              LEA     TMPOUTPUT,A1
000039A6  103C 000E               4276              MOVE.B  #14,D0
000039AA  4E4F                    4277              TRAP    #15
000039AC                          4278              
000039AC  4E75                    4279              RTS
000039AE                          4280  
000039AE                          4281  *---------------------------------------------------------------------------*
000039AE                          4282  * LONGMODE: absolute long address
000039AE                          4283  *---------------------------------------------------------------------------*
000039AE  43F9 00004DB9           4284  LONGMODE    LEA     DISP_HEX,A1
000039B4  103C 000E               4285              MOVE.B  #14,D0
000039B8  4E4F                    4286              TRAP    #15
000039BA                          4287              
000039BA  4285                    4288              CLR.L   D5
000039BC  2A1D                    4289              MOVE.L  (A5)+,D5
000039BE                          4290              
000039BE  43F9 00004A97           4291              LEA     TMPOUTPUT,A1
000039C4  2205                    4292              MOVE.L  D5,D1
000039C6  7408                    4293              MOVE.L  #8,D2           *move longword size 8
000039C8  4EB8 12AA               4294              JSR     HEX2ASCII
000039CC  43F9 00004A97           4295              LEA     TMPOUTPUT,A1
000039D2  103C 000E               4296              MOVE.B  #14,D0
000039D6  4E4F                    4297              TRAP    #15
000039D8                          4298              
000039D8  4E75                    4299              RTS
000039DA                          4300  
000039DA                          4301  
000039DA                          4302  *---------------------------------------------------------------------------*
000039DA                          4303  * IMMEDIATE: immediate address
000039DA                          4304  *---------------------------------------------------------------------------*
000039DA  43F9 00004DDF           4305  IMMEDIATE   LEA     DISP_LB,A1
000039E0  103C 000E               4306              MOVE.B  #14,D0
000039E4  4E4F                    4307              TRAP    #15
000039E6  43F9 00004DB9           4308              LEA     DISP_HEX,A1
000039EC  103C 000E               4309              MOVE.B  #14,D0
000039F0  4E4F                    4310              TRAP    #15
000039F2                          4311              
000039F2                          4312              * check for size
000039F2  0C04 0000               4313              CMPI.B  #0,D4
000039F6  6700 0012               4314              BEQ     IMMD_B
000039FA  0C04 0001               4315              CMPI.B  #1,D4
000039FE  6700 002A               4316              BEQ     IMMD_W
00003A02  0C04 0002               4317              CMPI.B  #2,D4
00003A06  6700 0042               4318              BEQ     IMMD_L
00003A0A                          4319  
00003A0A                          4320  IMMD_B
00003A0A  4285                    4321              CLR.L   D5
00003A0C  3A1D                    4322              MOVE.W  (A5)+,D5
00003A0E                          4323              
00003A0E  43F9 00004A97           4324              LEA     TMPOUTPUT,A1
00003A14  2205                    4325              MOVE.L  D5,D1
00003A16  7402                    4326              MOVE.L  #2,D2
00003A18  4EB8 12AA               4327              JSR     HEX2ASCII
00003A1C  43F9 00004A97           4328              LEA     TMPOUTPUT,A1
00003A22  103C 000E               4329              MOVE.B  #14,D0
00003A26  4E4F                    4330              TRAP    #15
00003A28  4E75                    4331              RTS
00003A2A                          4332              
00003A2A                          4333  IMMD_W
00003A2A  4285                    4334              CLR.L   D5
00003A2C  3A1D                    4335              MOVE.W  (A5)+,D5
00003A2E                          4336              
00003A2E  43F9 00004A97           4337              LEA     TMPOUTPUT,A1
00003A34  2205                    4338              MOVE.L  D5,D1
00003A36  7404                    4339              MOVE.L  #4,D2
00003A38  4EB8 12AA               4340              JSR     HEX2ASCII
00003A3C  43F9 00004A97           4341              LEA     TMPOUTPUT,A1
00003A42  103C 000E               4342              MOVE.B  #14,D0
00003A46  4E4F                    4343              TRAP    #15
00003A48  4E75                    4344              RTS
00003A4A                          4345              
00003A4A                          4346  
00003A4A                          4347  IMMD_L
00003A4A  4285                    4348              CLR.L   D5
00003A4C  3A1D                    4349              MOVE.W  (A5)+,D5
00003A4E                          4350              
00003A4E  43F9 00004A97           4351              LEA     TMPOUTPUT,A1
00003A54  2205                    4352              MOVE.L  D5,D1
00003A56  7408                    4353              MOVE.L  #8,D2
00003A58  4EB8 12AA               4354              JSR     HEX2ASCII
00003A5C  43F9 00004A97           4355              LEA     TMPOUTPUT,A1
00003A62  103C 000E               4356              MOVE.B  #14,D0
00003A66  4E4F                    4357              TRAP    #15
00003A68  4E75                    4358              RTS
00003A6A                          4359  
00003A6A                          4360  
00003A6A                          4361  *---------------------------------------------------------------------------*
00003A6A                          4362  * DEST_REGISTER: decode and display destination register (bit 11 - 9)
00003A6A                          4363  *---------------------------------------------------------------------------*
00003A6A                          4364  DEST_REGISTER
00003A6A                          4365              * clear registers to store temp data
00003A6A  4280                    4366              CLR.L   D0                      
00003A6C  4281                    4367              CLR.L   D1                      
00003A6E  207C 00000000           4368              MOVEA.L #0, A0                  
00003A74  227C 00000000           4369              MOVEA.L #0, A1 
00003A7A                          4370              
00003A7A  2205                    4371              MOVE.L  D5,D1
00003A7C  EC89                    4372              LSR.L   #6,D1
00003A7E  E689                    4373              LSR.L   #3,D1
00003A80  0281 00000007           4374              ANDI.L  #7,D1
00003A86                          4375              
00003A86  0C01 0000               4376              CMPI.B  #0,D1
00003A8A  6700 0092               4377              BEQ     REG_0
00003A8E  0C01 0001               4378              CMPI.B  #1,D1
00003A92  6700 0098               4379              BEQ     REG_1
00003A96  0C01 0002               4380              CMPI.B  #2,D1
00003A9A  6700 009E               4381              BEQ     REG_2
00003A9E  0C01 0003               4382              CMPI.B  #3,D1
00003AA2  6700 00A4               4383              BEQ     REG_3
00003AA6  0C01 0004               4384              CMPI.B  #4,D1
00003AAA  6700 00AA               4385              BEQ     REG_4
00003AAE  0C01 0005               4386              CMPI.B  #5,D1
00003AB2  6700 00B0               4387              BEQ     REG_5
00003AB6  0C01 0006               4388              CMPI.B  #6,D1
00003ABA  6700 00B6               4389              BEQ     REG_6
00003ABE  0C01 0007               4390              CMPI.B  #7,D1
00003AC2  6700 00BC               4391              BEQ     REG_7
00003AC6                          4392  
00003AC6                          4393  *---------------------------------------------------------------------------*
00003AC6                          4394  * SRC_REGISTER: decode and display source register (bit 2 - 0)
00003AC6                          4395  *---------------------------------------------------------------------------*           
00003AC6                          4396  SRC_REGISTER 
00003AC6                          4397              * clear registers to store temp data
00003AC6  4280                    4398              CLR.L   D0                      
00003AC8  4281                    4399              CLR.L   D1                      
00003ACA  207C 00000000           4400              MOVEA.L #0, A0                  
00003AD0  227C 00000000           4401              MOVEA.L #0, A1                  
00003AD6                          4402              
00003AD6  2205                    4403              MOVE.L  D5,D1   * temp store the processing data
00003AD8  0281 00000007           4404              ANDI.L  #7,D1   * mask the first 4 bits with 0111
00003ADE                          4405              
00003ADE  0C01 0000               4406              CMPI.B  #0,D1
00003AE2  6700 003A               4407              BEQ     REG_0
00003AE6  0C01 0001               4408              CMPI.B  #1,D1
00003AEA  6700 0040               4409              BEQ     REG_1
00003AEE  0C01 0002               4410              CMPI.B  #2,D1
00003AF2  6700 0046               4411              BEQ     REG_2
00003AF6  0C01 0003               4412              CMPI.B  #3,D1
00003AFA  6700 004C               4413              BEQ     REG_3
00003AFE  0C01 0004               4414              CMPI.B  #4,D1
00003B02  6700 0052               4415              BEQ     REG_4
00003B06  0C01 0005               4416              CMPI.B  #5,D1
00003B0A  6700 0058               4417              BEQ     REG_5
00003B0E  0C01 0006               4418              CMPI.B  #6,D1
00003B12  6700 005E               4419              BEQ     REG_6
00003B16  0C01 0007               4420              CMPI.B  #7,D1
00003B1A  6700 0064               4421              BEQ     REG_7
00003B1E                          4422  
00003B1E                          4423  *---------------------------------------------------------------------------*
00003B1E                          4424  * REG_0 ~ REG_7: display register 0 to 7
00003B1E                          4425  *---------------------------------------------------------------------------*
00003B1E  43F9 00004DE4           4426  REG_0       LEA     DISP_0,A1
00003B24  103C 000E               4427              MOVE.B  #14,D0
00003B28  4E4F                    4428              TRAP    #15
00003B2A  4E75                    4429              RTS
00003B2C                          4430              
00003B2C  43F9 00004DE6           4431  REG_1       LEA     DISP_1,A1
00003B32  103C 000E               4432              MOVE.B  #14,D0
00003B36  4E4F                    4433              TRAP    #15
00003B38  4E75                    4434              RTS
00003B3A                          4435              
00003B3A                          4436  
00003B3A  43F9 00004DE8           4437  REG_2       LEA     DISP_2,A1
00003B40  103C 000E               4438              MOVE.B  #14,D0
00003B44  4E4F                    4439              TRAP    #15
00003B46  4E75                    4440              RTS
00003B48                          4441            
00003B48  43F9 00004DEA           4442  REG_3       LEA     DISP_3,A1
00003B4E  103C 000E               4443              MOVE.B  #14,D0
00003B52  4E4F                    4444              TRAP    #15
00003B54  4E75                    4445              RTS
00003B56                          4446              
00003B56  43F9 00004DEC           4447  REG_4       LEA     DISP_4,A1
00003B5C  103C 000E               4448              MOVE.B  #14,D0
00003B60  4E4F                    4449              TRAP    #15
00003B62  4E75                    4450              RTS
00003B64                          4451              
00003B64  43F9 00004DEE           4452  REG_5       LEA     DISP_5,A1
00003B6A  103C 000E               4453              MOVE.B  #14,D0
00003B6E  4E4F                    4454              TRAP    #15
00003B70  4E75                    4455              RTS
00003B72                          4456              
00003B72  43F9 00004DF0           4457  REG_6       LEA     DISP_6,A1
00003B78  103C 000E               4458              MOVE.B  #14,D0
00003B7C  4E4F                    4459              TRAP    #15
00003B7E  4E75                    4460              RTS
00003B80                          4461              
00003B80  43F9 00004DF2           4462  REG_7       LEA     DISP_7,A1
00003B86  103C 000E               4463              MOVE.B  #14,D0
00003B8A  4E4F                    4464              TRAP    #15
00003B8C  4E75                    4465              RTS
00003B8E                          4466              
00003B8E                          4467  *---------------------------------------------------------------------------*
00003B8E                          4468  * REPEAT : Ask user whether they wish to run the program again
00003B8E                          4469  *---------------------------------------------------------------------------*           
00003B8E  4246                    4470  REPEAT      CLR.W   D6                      * Reset D6 (Loop Count)
00003B90  43F9 000048BD           4471              LEA     REPEATMSG,A1
00003B96  103C 000E               4472              MOVE.B  #14,D0
00003B9A  4E4F                    4473              TRAP    #15
00003B9C                          4474              
00003B9C  43F9 00004A47           4475              LEA     TMPINPUT,A1             * allocate space to temp store user input
00003BA2  103C 0002               4476              MOVE.B  #2,D0
00003BA6  4E4F                    4477              TRAP    #15
00003BA8                          4478  
00003BA8  0C01 0001               4479              CMPI.B  #1,D1                   * check for length of user input
00003BAC  66E0                    4480              BNE     REPEAT                  * return to the beginning of the function if unequal
00003BAE                          4481              
00003BAE  0C11 0059               4482              CMPI.B  #$59,(A1)               * compare the input with Y    
00003BB2  6700 D456               4483              BEQ     PROGLP                  * repeat the program
00003BB6                          4484              
00003BB6  0C11 0079               4485              CMPI.B  #$79,(A1)               * compare the input with y    
00003BBA  6700 D44E               4486              BEQ     PROGLP                  * repeat the program
00003BBE                          4487              
00003BBE  0C11 004E               4488              CMPI.B  #$4E,(A1)               * compare the input with N    
00003BC2  6700 098C               4489              BEQ     TERMINATE               * finish program
00003BC6                          4490              
00003BC6  0C11 006E               4491              CMPI.B  #$6E,(A1)               * compare the input with n    
00003BCA  6700 0984               4492              BEQ     TERMINATE               * finish program
00003BCE                          4493              
00003BCE  60BE                    4494              BRA     REPEAT                  * invalid input/repeat the function
00003BD0                          4495  
00003BD0                          4496  *---------------------------------------------------------------------------*
00003BD0                          4497  * EA DECODING INTERFACE
00003BD0                          4498  * [A0] - RESERVED FOR USE
00003BD0                          4499  * [D2] - RESERVED FOR USE
00003BD0                          4500  * RETURNS - ERROR FLAG IF FAILED TO PUSH SRC EA INTO STACK
00003BD0                          4501  *---------------------------------------------------------------------------*
00003BD0                          4502  GET_EA_EA_SRC
00003BD0                          4503      *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
00003BD0                          4504      
00003BD0                          4505      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
00003BD0  2405                    4506      MOVE.L  D5,D2                           * CLEAN COPY TO D2
00003BD2  E68A                    4507      LSR.L   #3,D2                           * [D2] Temporarily used D2 for shifting bits            *TODO: DYNAMIC FOR ANY LOCATION OF SOURCE
00003BD4  23C2 00004E0A           4508      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
00003BDA  7407                    4509      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
00003BDC  C5B9 00004E0A           4510      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
00003BE2                          4511                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
00003BE2                          4512      
00003BE2                          4513      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
00003BE2                          4514      *DESTINATION REGISTER FORMAT STANDARD         *
00003BE2                          4515      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
00003BE2                          4516      *WHEN BIT = 0(VALID ADDRESS MODE)             *
00003BE2                          4517      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
00003BE2                          4518      *0 - Dn                                       *
00003BE2                          4519      *1 - An                                       *
00003BE2                          4520      *2 - (An)                                     *
00003BE2                          4521      *3 - (An)+                                    *
00003BE2                          4522      *4 - -(An)                                    *
00003BE2                          4523      *5 - (XXX).W                                  *
00003BE2                          4524      *6 - (XXX).L                                  *
00003BE2                          4525      *7 - #<data>                                  *
00003BE2                          4526      ***********************************************
00003BE2                          4527      
00003BE2                          4528      *** Check if source ...  <ea> = Dn
00003BE2                          4529  CHECK0    
00003BE2  41F9 00004DFA           4530            LEA     TEMP_REGISTER_FORMAT,A0
00003BE8  1439 00004DF9           4531            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003BEE  1082                    4532            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003BF0  0239 0001 00004DFA      4533            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
00003BF8  0C39 0001 00004DFA      4534            CMPI.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
00003C00  6700 006A               4535            BEQ     CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00003C04  0CB9 00000000 00004E0A  4536            CMPI.L     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn) - COMPARE MODES TO SEE IF IT IS THIS MODE
00003C0E  6600 005C               4537            BNE     CHECK1
00003C12                          4538            
00003C12                          4539            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003C12  163C 0020               4540            MOVE.B    #' ',D3
00003C16  6100 0856               4541            BSR       PUSH_STACK
00003C1A  163C 0044               4542            MOVE.B    #'D',D3
00003C1E  6100 084E               4543            BSR       PUSH_STACK
00003C22                          4544  
00003C22                          4545            *FIND REGISTER NUMBER END LOCATION*  
00003C22  13F9 00004DFC 00004E02  4546            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00003C2C  0239 000F 00004E02      4547            AND.B   #$0F,VAR_BYTE_END
00003C34                          4548            
00003C34                          4549            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003C34  23C5 00004E06           4550            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003C3A  1439 00004E02           4551            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003C40                          4552            
00003C40                          4553            *INTITIALIZE FOR BIT SHIFTING
00003C40  41F9 00004E06           4554            LEA     VAR_TEMP_CLEANCOPY,A0
00003C46  2639 00004E06           4555            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003C4C                          4556  LOOP_SHIFTING
00003C4C  0C02 0000               4557            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003C50  6700 0008               4558            BEQ     MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00003C54  E24B                    4559            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003C56  5302                    4560            SUB.B   #1,D2                     *DECREMENT COUNTER
00003C58  60F2                    4561            BRA     LOOP_SHIFTING             *CONTINUE SHIFTING
00003C5A                          4562  MASKING_NEXT
00003C5A  C6BC 00000007           4563            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003C60  0603 0030               4564            ADD.B   #$30,D3                   *CONVERT TO CHAR
00003C64  6100 0808               4565            BSR     PUSH_STACK                *PUSH TO STACK
00003C68                          4566            
00003C68  6000 0394               4567            BRA     GET_SRC_SUCCESS           *RETURN          
00003C6C                          4568            
00003C6C                          4569            
00003C6C                          4570            *** Check if source ...  <ea> = An
00003C6C  41F9 00004DFA           4571  CHECK1    LEA     TEMP_REGISTER_FORMAT,A0
00003C72  1439 00004DF9           4572            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003C78  1082                    4573            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003C7A  0239 0002 00004DFA      4574            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
00003C82  0C39 0002 00004DFA      4575            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
00003C8A  6700 006A               4576            BEQ     CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00003C8E  0CB9 00000001 00004E0A  4577            CMPI.L  #1,VAR_LONG_ADDRESS_MODE_CHECK                      * An - COMPARE MODES TO SEE IF IT IS THIS MODE
00003C98  6600 005C               4578            BNE     CHECK2
00003C9C                          4579            
00003C9C                          4580            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003C9C  163C 0020               4581            MOVE.B    #' ',D3
00003CA0  6100 07CC               4582            BSR       PUSH_STACK
00003CA4  163C 0041               4583            MOVE.B    #'A',D3
00003CA8  6100 07C4               4584            BSR       PUSH_STACK
00003CAC                          4585  
00003CAC                          4586            
00003CAC                          4587            *FIND REGISTER NUMBER END LOCATION*  
00003CAC  13F9 00004DFC 00004E02  4588            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00003CB6  0239 000F 00004E02      4589            AND.B   #$0F,VAR_BYTE_END
00003CBE                          4590            
00003CBE                          4591            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003CBE  23C5 00004E06           4592            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003CC4  1439 00004E02           4593            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
00003CCA                          4594            
00003CCA                          4595            *INTITIALIZE FOR BIT SHIFTING
00003CCA  41F9 00004E06           4596            LEA     VAR_TEMP_CLEANCOPY,A0
00003CD0  2639 00004E06           4597            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003CD6                          4598  LOOP_SHIFTING1
00003CD6  0C02 0000               4599            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003CDA  6700 0008               4600            BEQ     MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00003CDE  E24B                    4601            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003CE0  5302                    4602            SUB.B   #1,D2                     *DECREMENT COUNTER
00003CE2  60F2                    4603            BRA     LOOP_SHIFTING1             *CONTINUE SHIFTING
00003CE4                          4604  MASKING_NEXT1
00003CE4  C6BC 00000007           4605            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003CEA  0603 0030               4606            ADD.B   #$30,D3                   *CONVERT TO CHAR
00003CEE  6100 077E               4607            BSR     PUSH_STACK                *PUSH TO STACK
00003CF2                          4608            
00003CF2  6000 030A               4609            BRA     GET_SRC_SUCCESS                   *RETURN 
00003CF6                          4610            
00003CF6                          4611            
00003CF6                          4612            
00003CF6                          4613            
00003CF6                          4614            *** Check if source ...  <ea> = (An)       
00003CF6  41F9 00004DFA           4615  CHECK2    LEA     TEMP_REGISTER_FORMAT,A0
00003CFC  1439 00004DF9           4616            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003D02  1082                    4617            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003D04  0239 0004 00004DFA      4618            ANDI.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
00003D0C  0C39 0004 00004DFA      4619            CMPI.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
00003D14  6700 007A               4620            BEQ     CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00003D18  0CB9 00000002 00004E0A  4621            CMPI.L   #2,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)  COMPARE MODES TO SEE IF IT IS THIS MODE                                                                *change: checkx++*
00003D22  6600 006C               4622            BNE     CHECK3
00003D26                          4623            
00003D26                          4624            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00003D26  163C 0020               4625            MOVE.B    #' ',D3
00003D2A  6100 0742               4626            BSR       PUSH_STACK
00003D2E  163C 0028               4627            MOVE.B    #'(',D3
00003D32  6100 073A               4628            BSR       PUSH_STACK
00003D36  163C 0041               4629            MOVE.B    #'A',D3
00003D3A  6100 0732               4630            BSR       PUSH_STACK
00003D3E                          4631  
00003D3E                          4632            
00003D3E                          4633            *FIND REGISTER NUMBER END LOCATION*  
00003D3E  13F9 00004DFC 00004E02  4634            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00003D48  0239 000F 00004E02      4635            AND.B   #$0F,VAR_BYTE_END
00003D50                          4636            
00003D50                          4637            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003D50  23C5 00004E06           4638            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003D56  1439 00004E02           4639            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003D5C                          4640            
00003D5C                          4641            *INTITIALIZE FOR BIT SHIFTING
00003D5C  41F9 00004E06           4642            LEA     VAR_TEMP_CLEANCOPY,A0
00003D62  2639 00004E06           4643            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003D68                          4644  LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
00003D68  0C02 0000               4645            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003D6C  6700 0008               4646            BEQ     MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00003D70  E24B                    4647            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003D72  5302                    4648            SUB.B   #1,D2                     *DECREMENT COUNTER
00003D74  60F2                    4649            BRA     LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
00003D76                          4650  MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
00003D76  0283 00000007           4651            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003D7C  0603 0030               4652            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00003D80  6100 06EC               4653            BSR     PUSH_STACK                *PUSH TO STACK
00003D84                          4654            
00003D84  163C 0029               4655            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003D88  6100 06E4               4656            BSR       PUSH_STACK
00003D8C                          4657            
00003D8C  6000 0270               4658            BRA     GET_SRC_SUCCESS                   *RETURN 
00003D90                          4659  
00003D90                          4660            
00003D90                          4661            
00003D90                          4662                      
00003D90                          4663  *** Check if source ...  <ea> = (An)+       
00003D90  41F9 00004DFA           4664  CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
00003D96  1439 00004DF9           4665            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003D9C  1082                    4666            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003D9E  0239 0008 00004DFA      4667            ANDI.B  #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
00003DA6  0C39 0008 00004DFA      4668            CMPI.B  #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
00003DAE  6700 0082               4669            BEQ     CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00003DB2  0CB9 00000003 00004E0A  4670            CMPI.L  #3,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)+ - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00003DBC  6600 0074               4671            BNE     CHECK4
00003DC0                          4672            
00003DC0                          4673            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00003DC0  163C 0020               4674            MOVE.B    #' ',D3
00003DC4  6100 06A8               4675            BSR       PUSH_STACK
00003DC8  163C 0028               4676            MOVE.B    #'(',D3
00003DCC  6100 06A0               4677            BSR       PUSH_STACK
00003DD0  163C 0041               4678            MOVE.B    #'A',D3
00003DD4  6100 0698               4679            BSR       PUSH_STACK
00003DD8                          4680  
00003DD8                          4681            
00003DD8                          4682            *FIND REGISTER NUMBER END LOCATION*  
00003DD8  13F9 00004DFC 00004E02  4683            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00003DE2  0239 000F 00004E02      4684            ANDI.B   #$0F,VAR_BYTE_END
00003DEA                          4685            
00003DEA                          4686            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003DEA  23C5 00004E06           4687            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003DF0  1439 00004E02           4688            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003DF6                          4689            
00003DF6                          4690            *INTITIALIZE FOR BIT SHIFTING
00003DF6  41F9 00004E06           4691            LEA     VAR_TEMP_CLEANCOPY,A0
00003DFC  2639 00004E06           4692            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003E02                          4693            
00003E02                          4694  LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
00003E02  0C02 0000               4695            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003E06  6700 0008               4696            BEQ     MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00003E0A  E24B                    4697            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003E0C  5302                    4698            SUBI.B   #1,D2                     *DECREMENT COUNTER
00003E0E  60F2                    4699            BRA     LOOP_SHIFTING3            *CONTINUE SHIFTING 
00003E10                          4700                                               *change: NAME OF LABEL*
00003E10                          4701  MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
00003E10  0283 00000007           4702            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003E16  0603 0030               4703            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00003E1A  6100 0652               4704            BSR     PUSH_STACK                *PUSH TO STACK
00003E1E                          4705            
00003E1E  163C 0029               4706            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003E22  6100 064A               4707            BSR       PUSH_STACK
00003E26  163C 002B               4708            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003E2A  6100 0642               4709            BSR       PUSH_STACK
00003E2E                          4710            
00003E2E  6000 01CE               4711            BRA       GET_SRC_SUCCESS                   *RETURN 
00003E32                          4712  
00003E32                          4713            
00003E32                          4714            
00003E32                          4715                      
00003E32                          4716            *** Check if source ...  <ea> = -(An)       
00003E32  41F9 00004DFA           4717  CHECK4    LEA     TEMP_REGISTER_FORMAT,A0
00003E38  1439 00004DF9           4718            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003E3E  1082                    4719            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003E40  0239 0010 00004DFA      4720            ANDI.B  #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
00003E48  0C39 0010 00004DFA      4721            CMPI.B  #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003E50  6700 0082               4722            BEQ     CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00003E54  0CB9 00000004 00004E0A  4723            CMPI.L  #4,VAR_LONG_ADDRESS_MODE_CHECK                      * -(An) - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00003E5E  6600 0074               4724            BNE     CHECK7
00003E62                          4725            
00003E62                          4726            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00003E62  163C 0020               4727            MOVE.B    #' ',D3
00003E66  6100 0606               4728            BSR       PUSH_STACK
00003E6A  163C 002D               4729            MOVE.B    #'-',D3
00003E6E  6100 05FE               4730            BSR       PUSH_STACK
00003E72  163C 0028               4731            MOVE.B    #'(',D3
00003E76  6100 05F6               4732            BSR       PUSH_STACK
00003E7A  163C 0041               4733            MOVE.B    #'A',D3
00003E7E  6100 05EE               4734            BSR       PUSH_STACK
00003E82                          4735  
00003E82                          4736            
00003E82                          4737            *FIND REGISTER NUMBER END LOCATION*  
00003E82  13F9 00004DFC 00004E02  4738            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00003E8C  0239 000F 00004E02      4739            AND.B   #$0F,VAR_BYTE_END
00003E94                          4740            
00003E94                          4741            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003E94  23C5 00004E06           4742            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003E9A  1439 00004E02           4743            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003EA0                          4744            
00003EA0                          4745            *INTITIALIZE FOR BIT SHIFTING
00003EA0  41F9 00004E06           4746            LEA     VAR_TEMP_CLEANCOPY,A0
00003EA6  2639 00004E06           4747            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003EAC                          4748            
00003EAC                          4749  LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
00003EAC  0C02 0000               4750            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003EB0  6700 0008               4751            BEQ     MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00003EB4  E24B                    4752            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003EB6  5302                    4753            SUBI.B   #1,D2                     *DECREMENT COUNTER
00003EB8  60F2                    4754            BRA     LOOP_SHIFTING4            *CONTINUE SHIFTING 
00003EBA                          4755                                               *change: NAME OF LABEL*
00003EBA                          4756  MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
00003EBA  0283 00000007           4757            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003EC0  0603 0030               4758            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00003EC4  6100 05A8               4759            BSR     PUSH_STACK                *PUSH TO STACK
00003EC8                          4760            
00003EC8  163C 0029               4761            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003ECC  6100 05A0               4762            BSR       PUSH_STACK
00003ED0                          4763            
00003ED0  6000 012C               4764            BRA     GET_SRC_SUCCESS                   *RETURN
00003ED4                          4765            
00003ED4                          4766                      
00003ED4                          4767            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
00003ED4  0CB9 00000007 00004E0A  4768  CHECK7    CMPI.L  #7,VAR_LONG_ADDRESS_MODE_CHECK                      *IF (MODE != 111)
00003EDE  6600 011A               4769            BNE     GET_SRC_FAILED                                      *THAN BRANCH TO UNCESSFULL SRC MODE READ
00003EE2                          4770                   
00003EE2                          4771            *NEXT: (MODE == 111) 
00003EE2                          4772            *NOW: CHECK FOR SRC REGISTER 
00003EE2                          4773                  *(000 = (xxx).W)
00003EE2                          4774                  *(001 = (xxx).L)
00003EE2                          4775                  *(010 = #<data>)
00003EE2                          4776                  
00003EE2                          4777            *FIND REGISTER NUMBER END LOCATION*  
00003EE2  13F9 00004DFC 00004E02  4778            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00003EEC  0239 000F 00004E02      4779            AND.B   #$0F,VAR_BYTE_END
00003EF4                          4780            
00003EF4                          4781            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003EF4  23C5 00004E06           4782            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003EFA  1439 00004E02           4783            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003F00                          4784            
00003F00                          4785            *INTITIALIZE FOR BIT SHIFTING
00003F00  41F9 00004E06           4786            LEA     VAR_TEMP_CLEANCOPY,A0
00003F06  2C39 00004E06           4787            MOVE.L  VAR_TEMP_CLEANCOPY,D6
00003F0C                          4788  SRC_LOOP_SHIFTING
00003F0C  0C02 0000               4789            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003F10  6700 0008               4790            BEQ     SRC_MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00003F14  E24E                    4791            LSR     #1,D6                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003F16  5302                    4792            SUB.B   #1,D2                     *DECREMENT COUNTER
00003F18  60F2                    4793            BRA     SRC_LOOP_SHIFTING             *CONTINUE SHIFTING
00003F1A                          4794  SRC_MASKING_NEXT
00003F1A  CCBC 00000007           4795            AND.L   #7,D6                     *MASK, ONLY NEED 0-2 BIT INDEXES 
00003F20                          4796           *D3 - REGISTER NUMBER NEEDED TO CHECK WHICH W/L/#<DATA>*
00003F20                          4797           
00003F20                          4798  CHECK_WORD  
00003F20  41F9 00004DFA           4799            LEA     TEMP_REGISTER_FORMAT,A0
00003F26  1439 00004DF9           4800            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003F2C  1082                    4801            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003F2E  0239 0020 00004DFA      4802            ANDI.B  #$20,TEMP_REGISTER_FORMAT                           * MASKS 0010 0000                                                     *change <SRC>*
00003F36  0C39 0020 00004DFA      4803            CMPI.B  #$20,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0010 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003F3E  6700 0026               4804            BEQ     CHECK_LONG                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00003F42  0C06 0000               4805            CMPI.B  #0,D6                          
00003F46  6600 001E               4806            BNE     CHECK_LONG 
00003F4A                          4807            
00003F4A                          4808            *IT IS A WORD AT THIS POINT*
00003F4A                          4809            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003F4A  163C 0020               4810            MOVE.B    #' ',D3
00003F4E  6100 051E               4811            BSR       PUSH_STACK
00003F52  163C 0024               4812            MOVE.B    #'$',D3
00003F56  6100 0516               4813            BSR       PUSH_STACK
00003F5A  321D                    4814            MOVE.W    (A5)+,D1
00003F5C  7404                    4815            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003F5E  6100 D38C               4816            BSR       HEX2ASCII2STACK
00003F62  6000 009A               4817            BRA     GET_SRC_SUCCESS
00003F66                          4818  
00003F66                          4819  CHECK_LONG
00003F66  41F9 00004DFA           4820            LEA     TEMP_REGISTER_FORMAT,A0
00003F6C  1439 00004DF9           4821            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003F72  1082                    4822            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003F74  0239 0040 00004DFA      4823            ANDI.B  #$40,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00003F7C  0C39 0040 00004DFA      4824            CMPI.B  #$40,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003F84  6700 002E               4825            BEQ     CHECK_IMMEDIATE                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00003F88  0C06 0001               4826            CMPI.B  #1,D6                          
00003F8C  6600 0026               4827            BNE     CHECK_IMMEDIATE  
00003F90                          4828  
00003F90                          4829            *IT IS A WORD AT THIS POINT*
00003F90                          4830            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003F90  163C 0020               4831            MOVE.B    #' ',D3
00003F94  6100 04D8               4832            BSR       PUSH_STACK
00003F98  163C 0024               4833            MOVE.B    #'$',D3
00003F9C  6100 04D0               4834            BSR       PUSH_STACK
00003FA0  321D                    4835            MOVE.W    (A5)+,D1
00003FA2  7404                    4836            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003FA4  6100 D346               4837            BSR       HEX2ASCII2STACK
00003FA8  321D                    4838            MOVE.W    (A5)+,D1
00003FAA  7404                    4839            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003FAC  6100 D33E               4840            BSR       HEX2ASCII2STACK
00003FB0  6000 004C               4841            BRA     GET_SRC_SUCCESS
00003FB4                          4842            
00003FB4                          4843  CHECK_IMMEDIATE
00003FB4  41F9 00004DFA           4844            LEA     TEMP_REGISTER_FORMAT,A0
00003FBA  1439 00004DF9           4845            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003FC0  1082                    4846            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003FC2  0239 0080 00004DFA      4847            ANDI.B  #$80,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00003FCA  0C39 0080 00004DFA      4848            CMPI.B  #$80,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003FD2  6700 0026               4849            BEQ     GET_SRC_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00003FD6  0C06 0004               4850            CMPI.B  #4,D6                          
00003FDA  6600 001E               4851            BNE     GET_SRC_FAILED 
00003FDE                          4852  
00003FDE                          4853            *IT IS A WORD AT THIS POINT*
00003FDE                          4854            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003FDE  163C 0020               4855            MOVE.B    #' ',D3
00003FE2  6100 048A               4856            BSR       PUSH_STACK
00003FE6  163C 0023               4857            MOVE.B    #'#',D3
00003FEA  6100 0482               4858            BSR       PUSH_STACK
00003FEE  321D                    4859            MOVE.W    (A5)+,D1
00003FF0  7404                    4860            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003FF2  6100 D2F8               4861            BSR       HEX2ASCII2STACK
00003FF6  6000 0006               4862            BRA     GET_SRC_SUCCESS
00003FFA                          4863            
00003FFA                          4864  GET_SRC_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
00003FFA  7801                    4865            MOVE.L #1,D4
00003FFC  4E75                    4866            RTS
00003FFE                          4867  GET_SRC_SUCCESS 
00003FFE  4E75                    4868            RTS
00004000                          4869                                 
00004000                          4870      
00004000                          4871  
00004000                          4872  
00004000                          4873  
00004000                          4874  
00004000                          4875  
00004000                          4876  
00004000                          4877  GET_EA_EA_DEST
00004000                          4878  *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
00004000                          4879      
00004000                          4880      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
00004000  2405                    4881      MOVE.L  D5,D2                           * CLEAN COPY TO D2
00004002  EC8A                    4882      LSR.L   #6,D2                           * [D2] Temporarily used D2 for shifting bits                *TODO: DYNAMIC MODE LOCATION
00004004  23C2 00004E0A           4883      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
0000400A  7407                    4884      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
0000400C  C5B9 00004E0A           4885      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
00004012                          4886                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
00004012                          4887      
00004012                          4888      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
00004012                          4889      *DESTINATION REGISTER FORMAT STANDARD         *
00004012                          4890      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
00004012                          4891      *WHEN BIT = 0(VALID ADDRESS MODE)             *
00004012                          4892      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
00004012                          4893      *0 - Dn                                       *
00004012                          4894      *1 - An                                       *
00004012                          4895      *2 - (An)                                     *
00004012                          4896      *3 - (An)+                                    *
00004012                          4897      *4 - -(An)                                    *
00004012                          4898      *5 - (XXX).W                                  *
00004012                          4899      *6 - (XXX).L                                  *
00004012                          4900      *7 - #<data>                                  *
00004012                          4901      ***********************************************
00004012                          4902      
00004012                          4903      *** Check if source ...  <ea> = Dn
00004012                          4904  DEST_CHECK0    
00004012  41F9 00004DFA           4905            LEA     TEMP_REGISTER_FORMAT,A0
00004018  1439 00004DF8           4906            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000401E  1082                    4907            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00004020  0239 0001 00004DFA      4908            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
00004028  0C39 0001 00004DFA      4909            CMPI.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
00004030  6700 006A               4910            BEQ     DEST_CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00004034  0CB9 00000000 00004E0A  4911            CMPI.L     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn) - COMPARE MODES TO SEE IF IT IS THIS MODE
0000403E  6600 005C               4912            BNE     DEST_CHECK1
00004042                          4913            
00004042                          4914            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00004042  163C 0020               4915            MOVE.B    #' ',D3
00004046  6100 0426               4916            BSR       PUSH_STACK
0000404A  163C 0044               4917            MOVE.B    #'D',D3
0000404E  6100 041E               4918            BSR       PUSH_STACK
00004052                          4919  
00004052                          4920            *FIND REGISTER NUMBER END LOCATION*  
00004052  13F9 00004DFB 00004E02  4921            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
0000405C  0239 000F 00004E02      4922            AND.B   #$0F,VAR_BYTE_END
00004064                          4923            
00004064                          4924            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00004064  23C5 00004E06           4925            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
0000406A  1439 00004E02           4926            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00004070                          4927            
00004070                          4928            *INTITIALIZE FOR BIT SHIFTING
00004070  41F9 00004E06           4929            LEA     VAR_TEMP_CLEANCOPY,A0
00004076  2639 00004E06           4930            MOVE.L  VAR_TEMP_CLEANCOPY,D3
0000407C                          4931  DEST_LOOP_SHIFTING
0000407C  0C02 0000               4932            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00004080  6700 0008               4933            BEQ     DEST_MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00004084  E24B                    4934            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00004086  5302                    4935            SUB.B   #1,D2                     *DECREMENT COUNTER
00004088  60F2                    4936            BRA     DEST_LOOP_SHIFTING             *CONTINUE SHIFTING
0000408A                          4937  DEST_MASKING_NEXT
0000408A  C6BC 00000007           4938            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00004090  0603 0030               4939            ADD.B   #$30,D3                   *CONVERT TO CHAR
00004094  6100 03D8               4940            BSR     PUSH_STACK                *PUSH TO STACK
00004098                          4941            
00004098  6000 0394               4942            BRA     GET_DST_SUCCESS           *RETURN          
0000409C                          4943            
0000409C                          4944            
0000409C                          4945            *** Check if source ...  <ea> = An
0000409C                          4946  DEST_CHECK1    
0000409C  41F9 00004DFA           4947            LEA     TEMP_REGISTER_FORMAT,A0
000040A2  1439 00004DF8           4948            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000040A8  1082                    4949            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000040AA  0239 0002 00004DFA      4950            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
000040B2  0C39 0002 00004DFA      4951            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
000040BA  6700 006A               4952            BEQ     DEST_CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
000040BE  0CB9 00000001 00004E0A  4953            CMPI.L  #1,VAR_LONG_ADDRESS_MODE_CHECK                      * An - COMPARE MODES TO SEE IF IT IS THIS MODE
000040C8  6600 005C               4954            BNE     DEST_CHECK2
000040CC                          4955            
000040CC                          4956            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000040CC  163C 0020               4957            MOVE.B    #' ',D3
000040D0  6100 039C               4958            BSR       PUSH_STACK
000040D4  163C 0041               4959            MOVE.B    #'A',D3
000040D8  6100 0394               4960            BSR       PUSH_STACK
000040DC                          4961  
000040DC                          4962            
000040DC                          4963            *FIND REGISTER NUMBER END LOCATION*  
000040DC  13F9 00004DFB 00004E02  4964            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
000040E6  0239 000F 00004E02      4965            AND.B   #$0F,VAR_BYTE_END
000040EE                          4966            
000040EE                          4967            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000040EE  23C5 00004E06           4968            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000040F4  1439 00004E02           4969            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
000040FA                          4970            
000040FA                          4971            *INTITIALIZE FOR BIT SHIFTING
000040FA  41F9 00004E06           4972            LEA     VAR_TEMP_CLEANCOPY,A0
00004100  2639 00004E06           4973            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00004106                          4974  DEST_LOOP_SHIFTING1
00004106  0C02 0000               4975            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000410A  6700 0008               4976            BEQ     DEST_MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
0000410E  E24B                    4977            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00004110  5302                    4978            SUB.B   #1,D2                     *DECREMENT COUNTER
00004112  60F2                    4979            BRA     DEST_LOOP_SHIFTING1             *CONTINUE SHIFTING
00004114                          4980  DEST_MASKING_NEXT1
00004114  C6BC 00000007           4981            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
0000411A  0603 0030               4982            ADD.B   #$30,D3                   *CONVERT TO CHAR
0000411E  6100 034E               4983            BSR     PUSH_STACK                *PUSH TO STACK
00004122                          4984            
00004122  6000 030A               4985            BRA     GET_DST_SUCCESS                   *RETURN 
00004126                          4986            
00004126                          4987            
00004126                          4988            
00004126                          4989            
00004126                          4990            *** Check if source ...  <ea> = (An)       
00004126                          4991  DEST_CHECK2    
00004126  41F9 00004DFA           4992            LEA     TEMP_REGISTER_FORMAT,A0
0000412C  1439 00004DF8           4993            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00004132  1082                    4994            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00004134  0239 0004 00004DFA      4995            ANDI.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
0000413C  0C39 0004 00004DFA      4996            CMPI.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
00004144  6700 007A               4997            BEQ     DEST_CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00004148  0CB9 00000002 00004E0A  4998            CMPI.L   #2,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)  COMPARE MODES TO SEE IF IT IS THIS MODE                                                                *change: checkx++*
00004152  6600 006C               4999            BNE     DEST_CHECK3
00004156                          5000            
00004156                          5001            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00004156  163C 0020               5002            MOVE.B    #' ',D3
0000415A  6100 0312               5003            BSR       PUSH_STACK
0000415E  163C 0028               5004            MOVE.B    #'(',D3
00004162  6100 030A               5005            BSR       PUSH_STACK
00004166  163C 0041               5006            MOVE.B    #'A',D3
0000416A  6100 0302               5007            BSR       PUSH_STACK
0000416E                          5008  
0000416E                          5009            
0000416E                          5010            *FIND REGISTER NUMBER END LOCATION*  
0000416E  13F9 00004DFB 00004E02  5011            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00004178  0239 000F 00004E02      5012            AND.B   #$0F,VAR_BYTE_END
00004180                          5013            
00004180                          5014            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00004180  23C5 00004E06           5015            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00004186  1439 00004E02           5016            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
0000418C                          5017            
0000418C                          5018            *INTITIALIZE FOR BIT SHIFTING
0000418C  41F9 00004E06           5019            LEA     VAR_TEMP_CLEANCOPY,A0
00004192  2639 00004E06           5020            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00004198                          5021  DEST_LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
00004198  0C02 0000               5022            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000419C  6700 0008               5023            BEQ     DEST_MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
000041A0  E24B                    5024            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000041A2  5302                    5025            SUB.B   #1,D2                     *DECREMENT COUNTER
000041A4  60F2                    5026            BRA     DEST_LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
000041A6                          5027  DEST_MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
000041A6  0283 00000007           5028            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000041AC  0603 0030               5029            ADDI.B   #$30,D3                   *CONVERT TO CHAR
000041B0  6100 02BC               5030            BSR     PUSH_STACK                *PUSH TO STACK
000041B4                          5031            
000041B4  163C 0029               5032            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
000041B8  6100 02B4               5033            BSR       PUSH_STACK
000041BC                          5034            
000041BC  6000 0270               5035            BRA     GET_DST_SUCCESS                   *RETURN 
000041C0                          5036  
000041C0                          5037            
000041C0                          5038            
000041C0                          5039                      
000041C0                          5040  *** Check if source ...  <ea> = (An)+       
000041C0  41F9 00004DFA           5041  DEST_CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
000041C6  1439 00004DF8           5042            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000041CC  1082                    5043            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000041CE  0239 0008 00004DFA      5044            ANDI.B  #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
000041D6  0C39 0008 00004DFA      5045            CMPI.B  #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
000041DE  6700 0082               5046            BEQ     DEST_CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
000041E2  0CB9 00000003 00004E0A  5047            CMPI.L  #3,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)+ - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
000041EC  6600 0074               5048            BNE     DEST_CHECK4
000041F0                          5049            
000041F0                          5050            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
000041F0  163C 0020               5051            MOVE.B    #' ',D3
000041F4  6100 0278               5052            BSR       PUSH_STACK
000041F8  163C 0028               5053            MOVE.B    #'(',D3
000041FC  6100 0270               5054            BSR       PUSH_STACK
00004200  163C 0041               5055            MOVE.B    #'A',D3
00004204  6100 0268               5056            BSR       PUSH_STACK
00004208                          5057  
00004208                          5058            
00004208                          5059            *FIND REGISTER NUMBER END LOCATION*  
00004208  13F9 00004DFB 00004E02  5060            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00004212  0239 000F 00004E02      5061            ANDI.B   #$0F,VAR_BYTE_END
0000421A                          5062            
0000421A                          5063            *GET INDEX OF THE END OF SRC REGISTER NUMBER
0000421A  23C5 00004E06           5064            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00004220  1439 00004E02           5065            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00004226                          5066            
00004226                          5067            *INTITIALIZE FOR BIT SHIFTING
00004226  41F9 00004E06           5068            LEA     VAR_TEMP_CLEANCOPY,A0
0000422C  2639 00004E06           5069            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00004232                          5070            
00004232                          5071  DEST_LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
00004232  0C02 0000               5072            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00004236  6700 0008               5073            BEQ     DEST_MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
0000423A  E24B                    5074            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
0000423C  5302                    5075            SUBI.B   #1,D2                     *DECREMENT COUNTER
0000423E  60F2                    5076            BRA     DEST_LOOP_SHIFTING3            *CONTINUE SHIFTING 
00004240                          5077                                               *change: NAME OF LABEL*
00004240                          5078  DEST_MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
00004240  0283 00000007           5079            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00004246  0603 0030               5080            ADDI.B   #$30,D3                   *CONVERT TO CHAR
0000424A  6100 0222               5081            BSR     PUSH_STACK                *PUSH TO STACK
0000424E                          5082            
0000424E  163C 0029               5083            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00004252  6100 021A               5084            BSR       PUSH_STACK
00004256  163C 002B               5085            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
0000425A  6100 0212               5086            BSR       PUSH_STACK
0000425E                          5087            
0000425E  6000 01CE               5088            BRA       GET_DST_SUCCESS                   *RETURN 
00004262                          5089  
00004262                          5090            
00004262                          5091            
00004262                          5092                      
00004262                          5093            *** Check if source ...  <ea> = -(An)       
00004262                          5094  DEST_CHECK4    
00004262  41F9 00004DFA           5095            LEA     TEMP_REGISTER_FORMAT,A0
00004268  1439 00004DF8           5096            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000426E  1082                    5097            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00004270  0239 0010 00004DFA      5098            ANDI.B  #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
00004278  0C39 0010 00004DFA      5099            CMPI.B  #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00004280  6700 0082               5100            BEQ     DEST_CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00004284  0CB9 00000004 00004E0A  5101            CMPI.L  #4,VAR_LONG_ADDRESS_MODE_CHECK                      * -(An) - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
0000428E  6600 0074               5102            BNE     DEST_CHECK7
00004292                          5103            
00004292                          5104            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00004292  163C 0020               5105            MOVE.B    #' ',D3
00004296  6100 01D6               5106            BSR       PUSH_STACK
0000429A  163C 002D               5107            MOVE.B    #'-',D3
0000429E  6100 01CE               5108            BSR       PUSH_STACK
000042A2  163C 0028               5109            MOVE.B    #'(',D3
000042A6  6100 01C6               5110            BSR       PUSH_STACK
000042AA  163C 0041               5111            MOVE.B    #'A',D3
000042AE  6100 01BE               5112            BSR       PUSH_STACK
000042B2                          5113  
000042B2                          5114            
000042B2                          5115            *FIND REGISTER NUMBER END LOCATION*  
000042B2  13F9 00004DFB 00004E02  5116            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
000042BC  0239 000F 00004E02      5117            AND.B   #$0F,VAR_BYTE_END
000042C4                          5118            
000042C4                          5119            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000042C4  23C5 00004E06           5120            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000042CA  1439 00004E02           5121            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000042D0                          5122            
000042D0                          5123            *INTITIALIZE FOR BIT SHIFTING
000042D0  41F9 00004E06           5124            LEA     VAR_TEMP_CLEANCOPY,A0
000042D6  2639 00004E06           5125            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000042DC                          5126            
000042DC                          5127  DEST_LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
000042DC  0C02 0000               5128            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000042E0  6700 0008               5129            BEQ     DEST_MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
000042E4  E24B                    5130            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000042E6  5302                    5131            SUBI.B   #1,D2                     *DECREMENT COUNTER
000042E8  60F2                    5132            BRA     DEST_LOOP_SHIFTING4            *CONTINUE SHIFTING 
000042EA                          5133                                               *change: NAME OF LABEL*
000042EA                          5134  DEST_MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
000042EA  0283 00000007           5135            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000042F0  0603 0030               5136            ADDI.B   #$30,D3                   *CONVERT TO CHAR
000042F4  6100 0178               5137            BSR     PUSH_STACK                *PUSH TO STACK
000042F8                          5138            
000042F8  163C 0029               5139            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
000042FC  6100 0170               5140            BSR       PUSH_STACK
00004300                          5141            
00004300  6000 012C               5142            BRA     GET_DST_SUCCESS                   *RETURN
00004304                          5143            
00004304                          5144                      
00004304                          5145            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
00004304                          5146  DEST_CHECK7    
00004304  0CB9 00000007 00004E0A  5147            CMPI.L  #7,VAR_LONG_ADDRESS_MODE_CHECK                      *IF (MODE != 111)
0000430E  6600 011A               5148            BNE     GET_DST_FAILED                                      *THAN BRANCH TO UNCESSFULL SRC MODE READ
00004312                          5149                   
00004312                          5150            *NEXT: (MODE == 111) 
00004312                          5151            *NOW: CHECK FOR SRC REGISTER 
00004312                          5152                  *(000 = (xxx).W)
00004312                          5153                  *(001 = (xxx).L)
00004312                          5154                  *(010 = #<data>)
00004312                          5155                  
00004312                          5156            *FIND REGISTER NUMBER END LOCATION*  
00004312  13F9 00004DFB 00004E02  5157            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
0000431C  0239 000F 00004E02      5158            AND.B   #$0F,VAR_BYTE_END
00004324                          5159            
00004324                          5160            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00004324  23C5 00004E06           5161            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
0000432A  1439 00004E02           5162            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00004330                          5163            
00004330                          5164            *INTITIALIZE FOR BIT SHIFTING
00004330  41F9 00004E06           5165            LEA     VAR_TEMP_CLEANCOPY,A0
00004336  2C39 00004E06           5166            MOVE.L  VAR_TEMP_CLEANCOPY,D6
0000433C                          5167  DEST_LOOP_SHIFTING7
0000433C  0C02 0000               5168            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00004340  6700 0008               5169            BEQ     DEST_MASKING_NEXT7              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00004344  E24E                    5170            LSR     #1,D6                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00004346  5302                    5171            SUB.B   #1,D2                     *DECREMENT COUNTER
00004348  60F2                    5172            BRA     DEST_LOOP_SHIFTING7             *CONTINUE SHIFTING
0000434A                          5173  DEST_MASKING_NEXT7
0000434A  CCBC 00000007           5174            AND.L   #7,D6                     *MASK, ONLY NEED 0-2 BIT INDEXES 
00004350                          5175           *D3 - REGISTER NUMBER NEEDED TO CHECK WHICH W/L/#<DATA>*
00004350                          5176            
00004350                          5177  DEST_CHECK_WORD  
00004350  41F9 00004DFA           5178            LEA     TEMP_REGISTER_FORMAT,A0
00004356  1439 00004DF8           5179            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000435C  1082                    5180            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000435E  0239 0020 00004DFA      5181            ANDI.B  #$20,TEMP_REGISTER_FORMAT                           * MASKS 0010 0000                                                     *change <SRC>*
00004366  0C39 0020 00004DFA      5182            CMPI.B  #$20,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0010 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
0000436E  6700 0026               5183            BEQ     DEST_CHECK_LONG                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00004372  0C06 0000               5184            CMPI.B  #0,D6                                                   *COMPARE REGISTER NUMBER WITH (000 == 000) FOR WORD
00004376  6600 001E               5185            BNE     DEST_CHECK_LONG                                      * THE REGISTER NUMBER DOESN'T MATCH "(XXX).W" -> SO MOVE ON       
0000437A                          5186            *IT IS A WORD AT THIS POINT*
0000437A                          5187            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
0000437A  163C 0020               5188            MOVE.B    #' ',D3
0000437E  6100 00EE               5189            BSR       PUSH_STACK
00004382  163C 0024               5190            MOVE.B    #'$',D3
00004386  6100 00E6               5191            BSR       PUSH_STACK
0000438A  321D                    5192            MOVE.W    (A5)+,D1
0000438C  7404                    5193            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
0000438E  6100 CF5C               5194            BSR       HEX2ASCII2STACK
00004392  6000 009A               5195            BRA       GET_DST_SUCCESS
00004396                          5196  
00004396                          5197  DEST_CHECK_LONG
00004396  41F9 00004DFA           5198            LEA     TEMP_REGISTER_FORMAT,A0
0000439C  1439 00004DF8           5199            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000043A2  1082                    5200            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000043A4  0239 0040 00004DFA      5201            ANDI.B  #$40,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
000043AC  0C39 0040 00004DFA      5202            CMPI.B  #$40,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
000043B4  6700 002E               5203            BEQ     DEST_CHECK_IMMEDIATE                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
000043B8  0C06 0001               5204            CMPI.B  #1,D6                                                   *COMPARE REGISTER NUMBER WITH (001 == 001) FOR WORD
000043BC  6600 0026               5205            BNE     DEST_CHECK_IMMEDIATE                                      * THE REGISTER NUMBER DOESN'T MATCH "(XXX).L" -> SO MOVE ON 
000043C0                          5206            *IT IS A WORD AT THIS POINT*
000043C0                          5207            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000043C0  163C 0020               5208            MOVE.B    #' ',D3
000043C4  6100 00A8               5209            BSR       PUSH_STACK
000043C8  163C 0024               5210            MOVE.B    #'$',D3
000043CC  6100 00A0               5211            BSR       PUSH_STACK
000043D0  321D                    5212            MOVE.W    (A5)+,D1        * GET NEXT WORD INTO STACK
000043D2  7404                    5213            MOVE.L    #4,D2           * SETS SIZE = 4 FOR CONVERSION TO ASCII
000043D4  6100 CF16               5214            BSR       HEX2ASCII2STACK
000043D8  321D                    5215            MOVE.W    (A5)+,D1        * GET NEXT WORD INTO STACK
000043DA  7404                    5216            MOVE.L    #4,D2          
000043DC  6100 CF0E               5217            BSR       HEX2ASCII2STACK
000043E0  6000 004C               5218            BRA     GET_DST_SUCCESS
000043E4                          5219            
000043E4                          5220  DEST_CHECK_IMMEDIATE
000043E4  41F9 00004DFA           5221            LEA     TEMP_REGISTER_FORMAT,A0
000043EA  1439 00004DF8           5222            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000043F0  1082                    5223            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000043F2  0239 0080 00004DFA      5224            ANDI.B  #$80,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
000043FA  0C39 0080 00004DFA      5225            CMPI.B  #$80,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00004402  6700 0026               5226            BEQ     GET_DST_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00004406  0C06 0004               5227            CMPI.B  #4,D6                                               * COMPARE REGISTER NUMBER WITH (010 == 010) FOR WORD
0000440A  6600 001E               5228            BNE     GET_DST_FAILED                                      * THE REGISTER NUMBER DOESN'T MATCH "#<DATA>" -> SO MOVE ON 
0000440E                          5229            
0000440E                          5230            *IT IS A WORD AT THIS POINT*
0000440E                          5231            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
0000440E  163C 0020               5232            MOVE.B    #' ',D3
00004412  6100 005A               5233            BSR       PUSH_STACK
00004416  163C 0023               5234            MOVE.B    #'#',D3
0000441A  6100 0052               5235            BSR       PUSH_STACK
0000441E  321D                    5236            MOVE.W    (A5)+,D1
00004420  7404                    5237            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00004422  6100 CEC8               5238            BSR       HEX2ASCII2STACK
00004426  6000 0006               5239            BRA       GET_DST_SUCCESS
0000442A                          5240            
0000442A                          5241  GET_DST_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
0000442A  7801                    5242            MOVE.L #1,D4
0000442C  4E75                    5243            RTS
0000442E                          5244  GET_DST_SUCCESS 
0000442E  4E75                    5245            RTS
00004430                          5246  
00004430                          5247  
00004430                          5248  *---------------------------------------------------------------------------*
00004430                          5249  * STACK/QUEUE INTERFACE
00004430                          5250  *---------------------------------------------------------------------------*
00004430                          5251  PRINT_STACK
00004430  0C39 0000 00004DF4      5252            CMP.B     #0,COUNTER
00004438  6700 000E               5253            BEQ       PRINT_STACK_RETURN             *CHECK IF LOOP IS FINISHED
0000443C                          5254            
0000443C                          5255  PRINT_STACK_HELPER
0000443C  6100 0038               5256            BSR      POP_STACK          *PRINTS ADDRESS
00004440  103C 0006               5257            MOVE.B   #6,D0              *Display single character in D1.B. 
00004444  4E4F                    5258            TRAP     #15             *ACTIVATES PRINT
00004446                          5259  
00004446  60E8                    5260            BRA       PRINT_STACK
00004448                          5261  PRINT_STACK_RETURN
00004448  4E75                    5262            RTS
0000444A                          5263            
0000444A                          5264            
0000444A                          5265  PRINT_QUEUE
0000444A  0C39 0000 00004DF4      5266            CMP.B     #0,COUNTER
00004452  6700 0018               5267            BEQ       PRINT_QUEUE_RETURN             *CHECK IF LOOP IS FINISHED
00004456                          5268            
00004456                          5269  PRINT_QUEUE_HELPER
00004456  33F9 00004DF4 00004DF6  5270            MOVE.W   COUNTER,QUEUE_COUNTER
00004460  6100 0022               5271            BSR      POP_FRONT          *PRINTS ADDRESS
00004464  103C 0006               5272            MOVE.B   #6,D0              *Display single character in D1.B. 
00004468  4E4F                    5273            TRAP     #15             *ACTIVATES PRINT
0000446A                          5274  
0000446A  60DE                    5275            BRA       PRINT_QUEUE
0000446C                          5276  PRINT_QUEUE_RETURN
0000446C  4E75                    5277            RTS
0000446E                          5278            
0000446E                          5279  *PUSHES.W CONTENTS OF [D3] INTO STACK          
0000446E                          5280  PUSH_STACK
0000446E  1503                    5281              MOVE.B  D3,-(A2)
00004470  6100 0058               5282              BSR     INCREMENT
00004474  4E75                    5283              RTS
00004476                          5284  *POPS.W TOP OF STACK INTO [D1], SO ITS READY TO PRINT WITH TRAP 15
00004476                          5285  *         MOVE.W   (A2)+,D1           *PRINTS ADDRESS
00004476                          5286  *         MOVE.B   #15,D0             *PRINTS ACCORDING TO D2 BASE VALUE
00004476                          5287  *         MOVE.B   #16,D2             *PRINTS BASED 16 NUMBER
00004476                          5288  *         TRAP        #15             *ACTIVATES PRINT
00004476                          5289  POP_STACK
00004476  BECA                    5290              CMPA.W   A2,SP            *CHECKS IF THERE IS ANYTHING TO PUSH
00004478  6700 0008               5291              BEQ     POP_RETURN        *IF NOTHING TO PUSH THAN JUST RETURN
0000447C  121A                    5292              MOVE.B  (A2)+,D1 
0000447E  6100 0052               5293              BSR     DECREMENT
00004482                          5294  POP_RETURN
00004482  4E75                    5295              RTS 
00004484                          5296        
00004484                          5297  *USE [A4] AS SECOND POINTER IN SHIFTING      
00004484  0C39 0000 00004DF6      5298  POP_FRONT   CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
0000448C  6700 0030               5299              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
00004490                          5300              
00004490                          5301              
00004490                          5302              *POSITION THE POINTERS A[4] RIGHT BEHIND A[2] WHICH IS RIGHT BEHIND STACK
00004490  347C 7000               5303              MOVEA.W #STACK,A2   *START A2 AT STACK
00004494  0622 0000               5304              ADD.B   #0,-(A2)    *SHIFT A2 TO THE BOTTOM OF THE STACK
00004498  384A                    5305              MOVEA.W A2,A4     *START A4 RIGHT ABOVE A2
0000449A  0624 0000               5306              ADD.B   #0,-(A4)  *leash one more higher in stack (a4)
0000449E  1212                    5307              MOVE.B  (A2),D1     *POP CONTENTS INTO D1
000044A0                          5308  POP_SHIFT_LOOP
000044A0  0C39 0000 00004DF6      5309              CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
000044A8  6700 0014               5310              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
000044AC  1494                    5311              MOVE.B  (A4),(A2)   *SHIFT CONTENT DOWN THE STACK
000044AE  0624 0000               5312              ADD.B   #0,-(A4)
000044B2  0622 0000               5313              ADD.B   #0,-(A2) *SHIFT POINTERS DOWN THE STACK
000044B6  5339 00004DF6           5314              SUB.B   #1,QUEUE_COUNTER *DECREMENT INTERNAL QUEUE COUNTER
000044BC                          5315              
000044BC  60E2                    5316              BRA     POP_SHIFT_LOOP
000044BE                          5317                          
000044BE                          5318  POP_FRONT_RETURN 
000044BE                          5319              *RESET A2 BACK TO SP
000044BE  347C 7000               5320              MOVEA.W #STACK,A2    
000044C2  5339 00004DF4           5321              SUB.B   #1,COUNTER *DECREMENT STACK COUNTER       
000044C8  4E75                    5322              RTS   
000044CA                          5323  
000044CA                          5324  INCREMENT
000044CA  5239 00004DF4           5325              ADD.B   #1, COUNTER
000044D0  4E75                    5326              RTS           
000044D2                          5327  DECREMENT
000044D2  5339 00004DF4           5328              SUB.B   #1, COUNTER
000044D8  4E75                    5329              RTS           
000044DA                          5330  CLEAR_STACK
000044DA  0C39 0000 00004DF4      5331              CMP.B     #0,COUNTER
000044E2  6700 0006               5332              BEQ       CLEAR_RETURN
000044E6  618E                    5333              BSR       POP_STACK
000044E8  60F0                    5334              BRA       CLEAR_STACK
000044EA                          5335   
000044EA                          5336  CLEAR_RETURN
000044EA  4E75                    5337              RTS    
000044EC                          5338              
000044EC                          5339  *---------------------------------------------------------------------------*
000044EC                          5340  * 8/16/32-bit Address getter
000044EC                          5341  *---------------------------------------------------------------------------*
000044EC                          5342  *get displacement value from bits 0 to 8
000044EC                          5343  *if displacement is not $00, than it is 8 otherwise check for word
000044EC                          5344  *if displacement is not $FF, than it is a long
000044EC                          5345  *add the displacement to the current address being processed + a word
000044EC                          5346  *place results into D3, so that it can be pushed to stack
000044EC                          5347  GET_DISPLACEMENT_ADDRESS
000044EC  2805                    5348              MOVE.L  D5,D4                   * COPIES DATA INTO D6
000044EE  0286 000000FF           5349              ANDI.L  #$00FF,D6               * MASKS DATA
000044F4  0C84 00000000           5350              CMPI.L  #$00,D4                 * COMPARES DATA IF IT IS WORD
000044FA  6700 0022               5351              BEQ     GET_DISPLACEMENT_WORD
000044FE  0C84 000000FF           5352              CMPI.L  #$FF,D4                 * COMPARES DATA IF IT IS LONG
00004504  6700 0030               5353              BEQ     GET_DISPLACEMENT_LONG
00004508                          5354              
00004508  2E3C 00000100           5355              MOVE.L  #$100,D7                 *FILL D7 WITH FF SO THAT IT CAN BE SUBTRACTED BY THE DISPLACEMENT GIVING US THE REAL DISPLACEMENT
0000450E  9E04                    5356              SUB.B   D4,D7
00004510                          5357              
00004510  280D                    5358              MOVE.L  A5,D4                   * PC+2 ADDRESS INTO D6
00004512  9807                    5359              SUB.B   D7,D4                   * SUBTRACT "DISPLACEMENT + 2 " TO GET THE ORIGINAL ADDRESS BEING BRANCH TO
00004514  7404                    5360              MOVE.L  #4,D2
00004516  2204                    5361              MOVE.L  D4,D1  
00004518  6100 CDD2               5362              BSR     HEX2ASCII2STACK
0000451C  4E75                    5363              RTS
0000451E                          5364              
0000451E                          5365  GET_DISPLACEMENT_WORD
0000451E  2E3C 000000FF           5366              MOVE.L  #$FF,D7                 *FILL D7 WITH FF SO THAT IT CAN BE SUBTRACTED BY THE DISPLACEMENT GIVING US THE REAL DISPLACEMENT
00004524  9E04                    5367              SUB.B   D4,D7
00004526                          5368              
00004526  280D                    5369              MOVE.L  A5,D4                   * PC+2 ADDRESS INTO D6
00004528  9807                    5370              SUB.B   D7,D4                   * SUBTRACT "DISPLACEMENT + 2 " TO GET THE ORIGINAL ADDRESS BEING BRANCH TO
0000452A  7404                    5371              MOVE.L  #4,D2
0000452C  2604                    5372              MOVE.L  D4,D3
0000452E  2204                    5373              MOVE.L  D4,D1
00004530  6100 CDBA               5374              BSR     HEX2ASCII2STACK
00004534  4E75                    5375              RTS     
00004536                          5376  GET_DISPLACEMENT_LONG   
00004536  2E3C 000000FF           5377              MOVE.L  #$FF,D7                 *FILL D7 WITH FF SO THAT IT CAN BE SUBTRACTED BY THE DISPLACEMENT GIVING US THE REAL DISPLACEMENT
0000453C  9E04                    5378              SUB.B   D4,D7
0000453E                          5379              
0000453E  280D                    5380              MOVE.L  A5,D4                   * PC+2 ADDRESS INTO D6
00004540  9807                    5381              SUB.B   D7,D4                   * SUBTRACT "DISPLACEMENT + 2 " TO GET THE ORIGINAL ADDRESS BEING BRANCH TO
00004542  7408                    5382              MOVE.L  #8,D2
00004544  2604                    5383              MOVE.L  D4,D3                   * PREPARE TO PUSH
00004546  2204                    5384              MOVE.L  D4,D1
00004548  6100 CDA2               5385              BSR     HEX2ASCII2STACK
0000454C                          5386  
0000454C  4284                    5387              CLR.L   D4
0000454E  4E75                    5388              RTS
00004550                          5389  
00004550                          5390  *---------------------------------------------------------------------------*
00004550                          5391  * TERMINATE
00004550                          5392  *---------------------------------------------------------------------------*
00004550                          5393  TERMINATE   
00004550  43F9 00004900           5394              LEA     FINMSG,A1
00004556  103C 000E               5395              MOVE.B  #14,D0
0000455A  4E4F                    5396              TRAP    #15
0000455C                          5397  
0000455C  103C 0009               5398              MOVE.B  #9,D0
00004560  4E4F                    5399              TRAP    #15
00004562                          5400  
00004562                          5401  *---------------------------------------------------------------------------*
00004562                          5402  * Data storage                                                 
00004562                          5403  *---------------------------------------------------------------------------*  
00004562                          5404  WELCOME
00004562= 20 20 20 20 20 20 ...   5405              DC.B '                         ___     ___ ___        ___   ___ ___                 ',CR,LF
000045B2= 3D 3D 3D 3D 3D 20 ...   5406              DC.B '=====           \  /\  /|___|   |   |   ||\  /||___    | |   |           =====',CR,LF
00004602= 3D 3D 3D 3D 3D 20 ...   5407              DC.B '=====            \/  \/ |___|___|___|___|| \/ ||___    | |___|           =====',CR,LF
00004652                          5408      
00004652= 20 20 20 20 20 20 ...   5409              DC.B '                        ___ ___ ___  ___      ___                             ',CR,LF
000046A2= 20 20 20 20 20 20 ...   5410              DC.B '                       |     | |___)|    |   |___                             ',CR,LF 
000046F2= 20 20 20 20 20 20 ...   5411              DC.B '                       |___ _|_|\___|___ |___|___                             ',CR,LF
00004742                          5412      
00004742= 20 20 20 20 20 20 ...   5413              DC.B '           __  ___ ___   _   ___  ___  ___        ___      ___ ___            ',CR,LF
00004792= 3D 3D 3D 3D 3D 20 ...   5414              DC.B '=====     |  \  | |___  /_\ |___ |___ |___ |\  /||___||   |___|___)      =====',CR,LF 
000047E2= 3D 3D 3D 3D 3D 20 ...   5415              DC.B '=====     |__/ _|_ ___|/   \ ___| ___||___ | \/ ||___||___|___|\___      =====',CR,LF,CR,LF,CR,LF,0
00004837                          5416  
00004837                          5417  PROMPT_START
00004837= 50 6C 65 61 73 65 ...   5418              DC.B    'Please enter a hexadecimal starting address.',CR,LF,0
00004866                          5419      
00004866                          5420  PROMPT_END
00004866= 50 6C 65 61 73 65 ...   5421              DC.B    'Please enter a hexadecimal ending address.',CR,LF,0
00004893= 0D 0A 48 69 74 20 ...   5422  DISP_NEXT   DC.B    CR,LF,'Hit Enter to print the next 30 lines.',CR,LF,0            
000048BD= 57 6F 75 6C 64 20 ...   5423  REPEATMSG   DC.B    'Would you like to run again? Press Y to continue or N to finish.',CR,LF,0
00004900= 54 68 61 6E 6B 20 ...   5424  FINMSG      DC.B    'Thank you for using Circle Disassembler.',CR,LF,0
0000492B= 45 72 72 6F 72 3A ...   5425  ERRMSG_1    DC.B    'Error: Invalid Input Address',CR,LF,0
0000494A= 45 72 72 6F 72 3A ...   5426  ERRMSG_3    DC.B    'Error: Invalid Input Address (Odd)',CR,LF,0
0000496F= 45 72 72 6F 72 3A ...   5427  ERRMSG_5    DC.B    'Error: Invalid Input Address (start > end)',CR,LF,0
0000499C                          5428  
0000499C                          5429  VR_S_ADDR   DS.B    80                      * allocate storage space for the starting address
000049EC                          5430  VR_E_ADDR   DS.B    80                      * allocate storage space for the ending address
00004A3C                          5431  S_ADDR_HX   DS.L    1                       * allocate storage space for the starting address in hex
00004A40                          5432  E_ADDR_HX   DS.L    1                       * allocate storage space for the ending address in hex
00004A44= 0D 0A 00                5433  ENDLINE_M   DC.B    CR,LF,0
00004A47                          5434  TMPINPUT    DS.B    80                      * temp store user input
00004A97                          5435  TMPOUTPUT   DS.B    80                      * temp store prog output
00004AE7= 20 20 20 4F 52 49 ...   5436  DISP_ORI_B  DC.B    '   ORI.B',0
00004AF0= 20 20 20 4F 52 49 ...   5437  DISP_ORI_W  DC.B    '   ORI.W',0
00004AF9= 20 20 20 4F 52 49 ...   5438  DISP_ORI_L  DC.B    '   ORI.L',0
00004B02= 20 20 20 45 4F 52 ...   5439  DISP_EORI_B  DC.B    '   EORI.B',0
00004B0C= 20 20 20 45 4F 52 ...   5440  DISP_EORI_W  DC.B    '   EORI.W',0
00004B16= 20 20 20 45 4F 52 ...   5441  DISP_EORI_L  DC.B    '   EORI.L',0
00004B20= 20 20 20 42 54 53 ...   5442  DISP_BTST   DC.B    '   BTST',0
00004B28= 20 20 20 43 4D 50 ...   5443  DISP_CMPI_B  DC.B    '   CMPI.B',0
00004B32= 20 20 20 43 4D 50 ...   5444  DISP_CMPI_W  DC.B    '   CMPI.W',0
00004B3C= 20 20 20 43 4D 50 ...   5445  DISP_CMPI_L  DC.B    '   CMPI.L',0
00004B46= 20 20 20 44 41 54 ...   5446  DISP_DATA   DC.B    '   DATA',0
00004B4E= 20 20 20 4D 4F 56 ...   5447  DISP_MOVE_B DC.B    '   MOVE.B',0
00004B58= 20 20 20 4D 4F 56 ...   5448  DISP_MOVE_W DC.B    '   MOVE.W',0
00004B62= 20 20 20 4D 4F 56 ...   5449  DISP_MOVE_L DC.B    '   MOVE.L',0
00004B6C= 20 20 20 52 54 53 00    5450  DISP_RTS    DC.B    '   RTS',0
00004B73= 20 20 20 4A 53 52 00    5451  DISP_JSR    DC.B    '   JSR',0
00004B7A= 20 20 20 4E 45 47 ...   5452  DISP_NEG_B    DC.B    '   NEG.B',0
00004B83= 20 20 20 4E 45 47 ...   5453  DISP_NEG_W    DC.B    '   NEG.W',0
00004B8C= 20 20 20 4E 45 47 ...   5454  DISP_NEG_L    DC.B    '   NEG.L',0
00004B95= 20 20 20 4E 4F 54 ...   5455  DISP_NOT_B  DC.B    '   NOT.B',0
00004B9E= 20 20 20 4E 4F 54 ...   5456  DISP_NOT_W  DC.B    '   NOT.W',0
00004BA7= 20 20 20 4E 4F 54 ...   5457  DISP_NOT_L  DC.B    '   NOT.L',0
00004BB0= 20 20 20 4C 45 41 00    5458  DISP_LEA    DC.B    '   LEA',0
00004BB7= 20 20 20 4D 4F 56 ...   5459  DISP_MOVEM_W    DC.B    '   MOVEM.W',0
00004BC2= 20 20 20 4D 4F 56 ...   5460  DISP_MOVEM_L    DC.B    '   MOVEM.L',0
00004BCD= 20 20 20 41 44 44 ...   5461  DISP_ADDQ_B DC.B    '   ADDQ.B',0
00004BD7= 20 20 20 41 44 44 ...   5462  DISP_ADDQ_W DC.B    '   ADDQ.W',0
00004BE1= 20 20 20 41 44 44 ...   5463  DISP_ADDQ_L DC.B    '   ADDQ.L',0
00004BEB= 20 20 20 44 49 56 ...   5464  DISP_DIVS   DC.B    '   DIVS',0
00004BF3= 20 20 20 53 55 42 ...   5465  DISP_SUB_B  DC.B    '   SUB.B',0
00004BFC= 20 20 20 53 55 42 ...   5466  DISP_SUB_W  DC.B    '   SUB.W',0
00004C05= 20 20 20 53 55 42 ...   5467  DISP_SUB_L  DC.B    '   SUB.L',0
00004C0E= 20 20 20 53 55 42 ...   5468  DISP_SUBI_B  DC.B    '   SUBI.B',0
00004C18= 20 20 20 53 55 42 ...   5469  DISP_SUBI_W  DC.B    '   SUBI.W',0
00004C22= 20 20 20 53 55 42 ...   5470  DISP_SUBI_L  DC.B    '   SUBI.L',0
00004C2C= 20 20 20 53 55 42 ...   5471  DISP_SUBA_W  DC.B    '   SUBA.W',0
00004C36= 20 20 20 53 55 42 ...   5472  DISP_SUBA_L  DC.B    '   SUBA.L',0
00004C40= 20 20 20 45 4F 52 ...   5473  DISP_EOR_B  DC.B    '   EOR.B',0
00004C49= 20 20 20 45 4F 52 ...   5474  DISP_EOR_W  DC.B    '   EOR.W',0
00004C52= 20 20 20 45 4F 52 ...   5475  DISP_EOR_L  DC.B    '   EOR.L',0
00004C5B= 20 20 20 43 4D 50 ...   5476  DISP_CMP_B  DC.B    '   CMP.B',0
00004C64= 20 20 20 43 4D 50 ...   5477  DISP_CMP_W  DC.B    '   CMP.W',0
00004C6D= 20 20 20 43 4D 50 ...   5478  DISP_CMP_L  DC.B    '   CMP.L',0
00004C76= 20 20 20 43 4D 50 ...   5479  DISP_CMPA_W  DC.B    '   CMPA.W',0
00004C80= 20 20 20 43 4D 50 ...   5480  DISP_CMPA_L  DC.B    '   CMPA.L',0
00004C8A= 20 20 20 4D 55 4C ...   5481  DISP_MULS_W DC.B    '   MULS.W',0
00004C94= 20 20 20 41 4E 44 ...   5482  DISP_AND_B  DC.B    '   AND.B',0
00004C9D= 20 20 20 41 4E 44 ...   5483  DISP_AND_W  DC.B    '   AND.W',0
00004CA6= 20 20 20 41 4E 44 ...   5484  DISP_AND_L  DC.B    '   AND.L',0
00004CAF= 20 20 20 41 44 44 ...   5485  DISP_ADD_B  DC.B    '   ADD.B',0
00004CB8= 20 20 20 41 44 44 ...   5486  DISP_ADD_W  DC.B    '   ADD.W',0
00004CC1= 20 20 20 41 44 44 ...   5487  DISP_ADD_L  DC.B    '   ADD.L',0
00004CCA= 20 20 20 41 44 44 ...   5488  DISP_ADDA_W DC.B    '   ADDA.W',0
00004CD4= 20 20 20 41 44 44 ...   5489  DISP_ADDA_L DC.B    '   ADDA.L',0
00004CDE= 20 20 20 4C 53 52 ...   5490  DISP_LSR_B  DC.B    '   LSR.B',0
00004CE7= 20 20 20 4C 53 4C ...   5491  DISP_LSL_B  DC.B    '   LSL.B',0
00004CF0= 20 20 20 4C 53 52 ...   5492  DISP_LSR_W  DC.B    '   LSR.W',0
00004CF9= 20 20 20 4C 53 4C ...   5493  DISP_LSL_W  DC.B    '   LSL.W',0
00004D02= 20 20 20 4C 53 52 ...   5494  DISP_LSR_L  DC.B    '   LSR.L',0
00004D0B= 20 20 20 4C 53 4C ...   5495  DISP_LSL_L  DC.B    '   LSL.L',0
00004D14= 20 20 20 41 53 52 ...   5496  DISP_ASR_B  DC.B    '   ASR.B',0
00004D1D= 20 20 20 41 53 4C ...   5497  DISP_ASL_B  DC.B    '   ASL.B',0
00004D26= 20 20 20 41 53 52 ...   5498  DISP_ASR_W  DC.B    '   ASR.W',0
00004D2F= 20 20 20 41 53 4C ...   5499  DISP_ASL_W  DC.B    '   ASL.W',0
00004D38= 20 20 20 41 53 52 ...   5500  DISP_ASR_L  DC.B    '   ASR.L',0
00004D41= 20 20 20 41 53 4C ...   5501  DISP_ASL_L  DC.B    '   ASL.L',0
00004D4A= 20 20 20 52 4F 52 ...   5502  DISP_ROR_B  DC.B    '   ROR.B',0
00004D53= 20 20 20 52 4F 4C ...   5503  DISP_ROL_B  DC.B    '   ROL.B',0
00004D5C= 20 20 20 52 4F 52 ...   5504  DISP_ROR_W  DC.B    '   ROR.W',0
00004D65= 20 20 20 52 4F 4C ...   5505  DISP_ROL_W  DC.B    '   ROL.W',0
00004D6E= 20 20 20 52 4F 52 ...   5506  DISP_ROR_L  DC.B    '   ROR.L',0
00004D77= 20 20 20 52 4F 4C ...   5507  DISP_ROL_L  DC.B    '   ROL.L',0
00004D80= 20 20 20 42 52 41 00    5508  DISP_BRA    DC.B    '   BRA',0
00004D87= 20 20 20 42 4C 54 00    5509  DISP_BLT    DC.B    '   BLT',0
00004D8E= 20 20 20 42 45 51 00    5510  DISP_BEQ    DC.B    '   BEQ',0
00004D95= 20 20 20 42 4E 45 00    5511  DISP_BNE    DC.B    '   BNE',0
00004D9C= 20 20 20 42 48 49 00    5512  DISP_BHI    DC.B    '   BHI',0
00004DA3= 20 20 20 4D 4F 56 ...   5513  DISP_MOVEA_W    DC.B    '   MOVEA.W',0
00004DAE= 20 20 20 4D 4F 56 ...   5514  DISP_MOVEA_L    DC.B    '   MOVEA.L',0
00004DB9                          5515  
00004DB9= 20 20 20 24 00          5516  DISP_HEX     DC.B    '   $',0
00004DBE= 20 20 20 44 00          5517  DISP_D  DC.B    '   D',0
00004DC3= 20 20 20 41 00          5518  DISP_A  DC.B    '   A',0
00004DC8= 20 20 20 28 00          5519  DISP_OP  DC.B    '   (',0
00004DCD= 29 00                   5520  DISP_CP  DC.B   ')',0
00004DCF= 20 20 20 28 41 00       5521  DISP_AOP  DC.B    '   (A',0
00004DD5                          5522  
00004DD5= 20 20 20 2D 28 41 00    5523  DISP_PRE    DC.B    '   -(A',0
00004DDC= 29 2B 00                5524  DISP_POST   DC.B    ')+',0
00004DDF= 20 20 20 23 00          5525  DISP_LB DC.B    '   #',0
00004DE4= 30 00                   5526  DISP_0  DC.B    '0',0
00004DE6= 31 00                   5527  DISP_1  DC.B    '1',0
00004DE8= 32 00                   5528  DISP_2  DC.B    '2',0
00004DEA= 33 00                   5529  DISP_3  DC.B    '3',0
00004DEC= 34 00                   5530  DISP_4  DC.B    '4',0
00004DEE= 35 00                   5531  DISP_5  DC.B    '5',0
00004DF0= 36 00                   5532  DISP_6  DC.B    '6',0
00004DF2= 37 00                   5533  DISP_7  DC.B    '7',0
00004DF4                          5534  
00004DF4                          5535  *STACK INTERFACE VARIABLES*
00004DF4                          5536  COUNTER         DS.W    1
00004DF6                          5537  QUEUE_COUNTER   DS.W    1
00004DF8                          5538  
00004DF8                          5539  *EA DECODING INTERFACE VARIABLES* 
00004DF8                          5540  DEST_REGISTER_FORMAT    DS.B    1           *all address modes acceptable standard
00004DF9                          5541  SRC_REGISTER_FORMAT  DS.B    1           *all address modes acceptable standard
00004DFA                          5542  TEMP_REGISTER_FORMAT    DS.B    1           *place holder for masking other register formats
00004DFB                          5543  
00004DFB                          5544  *FORMAT OF WHERE TO GET THE EA BY THE ENDING BIT AND STARTING BIT
00004DFB                          5545  * WORD + WORD = LONG
00004DFB                          5546  * (STARTING BIT) + (ENDING BIT) = 2 HEX CHAR
00004DFB                          5547  * A              + F            = AF         <= EXAMPLE
00004DFB                          5548  *(10TH BIT)      + (15TH BIT)   = CHECK BITS 15 THROUGH 10
00004DFB                          5549  GET_DST_START_END    DS.B    1
00004DFC                          5550  GET_SRC_START_END    DS.B    1
00004DFD                          5551  
00004DFD                          5552  *STORES THE START + END BITS HERE (FROM ABOVE)
00004DFE                          5553  VAR_BYTE_START      DS.L    1
00004E02                          5554  VAR_BYTE_END        DS.L    1
00004E06                          5555  VAR_TEMP_CLEANCOPY  DS.L    1
00004E0A                          5556  
00004E0A                          5557  VAR_LONG_ADDRESS_MODE_CHECK        DS.L    1       *holds the bits 0-2 in long form
00004E0E                          5558  
00004E0E                          5559  *MORE FOR STACK USAGE*
00004E0E= 2C 00                   5560  DISP_COMMA  DC.B    ',',0
00004E10= 20 20 20 00             5561  DISP_INDENT  DC.B    '   ',0
00004E14                          5562  
00004E14                          5563  *NEXT WORD POINTER: FOR IDENTIFING (xxx).W or (xxx).L*
00004E14                          5564  POINTER_WORD    DS.W       1
00004E16                          5565  
00004E16                          5566  
00004E16                          5567  
00004E16                          5568  *---------------------------------------------------------------------------*
00004E16                          5569  * Ends program
00004E16                          5570  *---------------------------------------------------------------------------*
00004E16                          5571              END    START                    * last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASC2HXLP            11E0
ASC2HXLP2STACK      1248
ASCII2HEX           11DA
ASCII2HEX2STACK     1242
ASC_ERR             123C
ASC_ERR2STACK       12A4
ASC_LOW             121E
ASC_LOW2STACK       1286
ASC_NUM             122E
ASC_NUM2STACK       1296
ASC_SFT             1236
ASC_SFT2STACK       129E
ASC_UPP             1226
ASC_UPP2STACK       128E
CHECK0              3BE2
CHECK1              3C6C
CHECK2              3CF6
CHECK3              3D90
CHECK4              3E32
CHECK7              3ED4
CHECK_IMMEDIATE     3FB4
CHECK_LONG          3F66
CHECK_WORD          3F20
CLEAR_RETURN        44EA
CLEAR_STACK         44DA
COUNTER             4DF4
CR                  D
DECREMENT           44D2
DEST_CHECK0         4012
DEST_CHECK1         409C
DEST_CHECK2         4126
DEST_CHECK3         41C0
DEST_CHECK4         4262
DEST_CHECK7         4304
DEST_CHECK_IMMEDIATE  43E4
DEST_CHECK_LONG     4396
DEST_CHECK_WORD     4350
DEST_LOOP_SHIFTING  407C
DEST_LOOP_SHIFTING1  4106
DEST_LOOP_SHIFTING2  4198
DEST_LOOP_SHIFTING3  4232
DEST_LOOP_SHIFTING4  42DC
DEST_LOOP_SHIFTING7  433C
DEST_MASKING_NEXT   408A
DEST_MASKING_NEXT1  4114
DEST_MASKING_NEXT2  41A6
DEST_MASKING_NEXT3  4240
DEST_MASKING_NEXT4  42EA
DEST_MASKING_NEXT7  434A
DEST_MODE           379A
DEST_REGISTER       3A6A
DEST_REGISTER_FORMAT  4DF8
DISPLAY_30_LINES    13F0
DISP_0              4DE4
DISP_1              4DE6
DISP_2              4DE8
DISP_3              4DEA
DISP_4              4DEC
DISP_5              4DEE
DISP_6              4DF0
DISP_7              4DF2
DISP_A              4DC3
DISP_ADDA_L         4CD4
DISP_ADDA_W         4CCA
DISP_ADDQ_B         4BCD
DISP_ADDQ_L         4BE1
DISP_ADDQ_W         4BD7
DISP_ADD_B          4CAF
DISP_ADD_L          4CC1
DISP_ADD_W          4CB8
DISP_AND_B          4C94
DISP_AND_L          4CA6
DISP_AND_W          4C9D
DISP_AOP            4DCF
DISP_ASL_B          4D1D
DISP_ASL_L          4D41
DISP_ASL_W          4D2F
DISP_ASR_B          4D14
DISP_ASR_L          4D38
DISP_ASR_W          4D26
DISP_BEQ            4D8E
DISP_BHI            4D9C
DISP_BLT            4D87
DISP_BNE            4D95
DISP_BRA            4D80
DISP_BTST           4B20
DISP_CMPA_L         4C80
DISP_CMPA_W         4C76
DISP_CMPI_B         4B28
DISP_CMPI_L         4B3C
DISP_CMPI_W         4B32
DISP_CMP_B          4C5B
DISP_CMP_L          4C6D
DISP_CMP_W          4C64
DISP_COMMA          4E0E
DISP_CP             4DCD
DISP_D              4DBE
DISP_DATA           4B46
DISP_DIVS           4BEB
DISP_EORI_B         4B02
DISP_EORI_L         4B16
DISP_EORI_W         4B0C
DISP_EOR_B          4C40
DISP_EOR_L          4C52
DISP_EOR_W          4C49
DISP_HEX            4DB9
DISP_INDENT         4E10
DISP_JSR            4B73
DISP_LB             4DDF
DISP_LEA            4BB0
DISP_LSL_B          4CE7
DISP_LSL_L          4D0B
DISP_LSL_W          4CF9
DISP_LSR_B          4CDE
DISP_LSR_L          4D02
DISP_LSR_W          4CF0
DISP_MOVEA_L        4DAE
DISP_MOVEA_W        4DA3
DISP_MOVEM_L        4BC2
DISP_MOVEM_W        4BB7
DISP_MOVE_B         4B4E
DISP_MOVE_L         4B62
DISP_MOVE_W         4B58
DISP_MULS_W         4C8A
DISP_NEG_B          4B7A
DISP_NEG_L          4B8C
DISP_NEG_W          4B83
DISP_NEXT           4893
DISP_NOT_B          4B95
DISP_NOT_L          4BA7
DISP_NOT_W          4B9E
DISP_OP             4DC8
DISP_ORI_B          4AE7
DISP_ORI_L          4AF9
DISP_ORI_W          4AF0
DISP_POST           4DDC
DISP_PRE            4DD5
DISP_ROL_B          4D53
DISP_ROL_L          4D77
DISP_ROL_W          4D65
DISP_ROR_B          4D4A
DISP_ROR_L          4D6E
DISP_ROR_W          4D5C
DISP_RTS            4B6C
DISP_SUBA_L         4C36
DISP_SUBA_W         4C2C
DISP_SUBI_B         4C0E
DISP_SUBI_L         4C22
DISP_SUBI_W         4C18
DISP_SUB_B          4BF3
DISP_SUB_L          4C05
DISP_SUB_W          4BFC
D_MODE000           383C
D_MODE010           3884
D_MODE011           38E4
D_MODE100           3904
D_MODE111           3956
EA_ARITH            3734
EA_DATA             1802
EA_GEN              3780
EA_MOVEA            375A
EA_NOSRC            3720
ENDLINE_M           4A44
END_ADDR            1126
ERRMSG_1            492B
ERRMSG_3            494A
ERRMSG_5            496F
ERROR_1             118A
ERROR_2             119A
ERROR_3             11AA
ERROR_4             11BA
ERROR_5             11CA
E_ADDR_HX           4A40
FINMSG              4900
GET_DISPLACEMENT_ADDRESS  44EC
GET_DISPLACEMENT_LONG  4536
GET_DISPLACEMENT_WORD  451E
GET_DST_FAILED      442A
GET_DST_START_END   4DFB
GET_DST_SUCCESS     442E
GET_EA_EA_DEST      4000
GET_EA_EA_SRC       3BD0
GET_SRC_FAILED      3FFA
GET_SRC_START_END   4DFC
GET_SRC_SUCCESS     3FFE
HEX2ASCII           12AA
HEX2ASCII2STACK     12EC
HEX_CHAR            12D8
HEX_CONT            12DC
HEX_LOOP            12BE
IMMD_B              3A0A
IMMD_L              3A4A
IMMD_W              3A2A
IMMEDIATE           39DA
INCREMENT           44CA
INTRO               1028
IS_ODD              1330
IS_ODD_ERR          1346
JMPTABLE            141E
LF                  A
LONGMODE            39AE
LOOP_SHIFTING       3C4C
LOOP_SHIFTING1      3CD6
LOOP_SHIFTING2      3D68
LOOP_SHIFTING3      3E02
LOOP_SHIFTING4      3EAC
MAIN                134C
MASKING_NEXT        3C5A
MASKING_NEXT1       3CE4
MASKING_NEXT2       3D76
MASKING_NEXT3       3E10
MASKING_NEXT4       3EBA
MODE000             3828
MODE001             3850
MODE010             3864
MODE011             38A4
MODE100             38C4
MODE111             3924
NEXTLINES           1400
OP0000              147E
OP0000_BTST_B       15E8
OP0000_CMPI         182A
OP0000_CMPI_B       18A0
OP0000_CMPI_L       18F0
OP0000_CMPI_W       18C8
OP0000_EOR_B        1696
OP0000_EOR_L        16C6
OP0000_EOR_W        16AE
OP0000_ORI_B        1984
OP0000_ORI_L        19D4
OP0000_ORI_W        19AC
OP0000_RETURN_BTST  1618
OP0000_RETURN_CMPI  1914
OP0000_RETURN_EOR   16DA
OP0000_RETURN_ORI   19F8
OP0000_RETURN_SUBI  17BC
OP0000_SUB_B        1778
OP0000_SUB_L        17A8
OP0000_SUB_W        1790
OP0001              19FA
OP0010              1A68
OP0011              1B66
OP0100              1C62
OP0101              1EB8
OP0101_ADDQ_B       1F34
OP0101_ADDQ_B_0     1FB0
OP0101_ADDQ_B_1     1FBC
OP0101_ADDQ_B_2     1FC8
OP0101_ADDQ_B_3     1FD4
OP0101_ADDQ_B_4     1FE0
OP0101_ADDQ_B_5     1FEC
OP0101_ADDQ_B_6     1FF8
OP0101_ADDQ_B_7     2004
OP0101_ADDQ_B_8     2010
OP0101_ADDQ_L       1F4C
OP0101_ADDQ_W       1F40
OP0101_RETURN       1F54
OP0101_RETURN2      2018
OP0110              205C
OP0111              2162
OP1000              2166
OP1000_DIVS_DN_EA_OR_EA_DN  2174
OP1000_DIVS_RETURN  2258
OP1000_EA_DN_DIVS   21A2
OP1000_PRINT_L_DIVS  2210
OP1000_PRINT_W_DIVS  21C8
OP1001              226E
OP1001_ADD_RETURN   25BC
OP1001_DETERMINE_DN_EA_OR_EA_DN  2384
OP1001_DN_EA        23BC
OP1001_EA_DN        24BC
OP1001_PRINT_B      24E4
OP1001_PRINT_B2     23E4
OP1001_PRINT_L      2574
OP1001_PRINT_L2     2474
OP1001_PRINT_W      252C
OP1001_PRINT_W2     242C
OP1001_SUBA_L       22A0
OP1001_SUBA_W       2312
OP1010              262A
OP1011              262E
OP1011_CMP          2688
OP1011_CMPA         273A
OP1011_CMPA_L       27B4
OP1011_CMPA_W       27A8
OP1011_CMP_B        26FC
OP1011_CMP_L        2714
OP1011_CMP_W        2708
OP1011_EOR          27DA
OP1011_EOR_B        284E
OP1011_EOR_L        2866
OP1011_EOR_W        285A
OP1011_RETURN       286E
OP1011_RETURN_CMP   271C
OP1011_RETURN_CMPA  27BC
OP1100              292E
OP1100_AND_RETURN   2C7E
OP1100_DETERMINE_DN_EA_OR_EA_DN  2A44
OP1100_DN_EA        2A7E
OP1100_EA_DN        2B7E
OP1100_EA_DN_MULS   298C
OP1100_MULS_DN_EA_OR_EA_DN  295E
OP1100_MULS_RETURN  2A42
OP1100_PRINT_B      2BA6
OP1100_PRINT_B2     2AA6
OP1100_PRINT_L      2C36
OP1100_PRINT_L2     2B36
OP1100_PRINT_L_MULS  29FA
OP1100_PRINT_W      2BEE
OP1100_PRINT_W2     2AEE
OP1100_PRINT_W_MULS  29B2
OP1101              2C80
OP1101_ADDA_L       2CB2
OP1101_ADDA_W       2D24
OP1101_ADD_RETURN   2FCE
OP1101_DETERMINE_DN_EA_OR_EA_DN  2D96
OP1101_DN_EA        2DCE
OP1101_EA_DN        2ECE
OP1101_PRINT_B      2EF6
OP1101_PRINT_B2     2DF6
OP1101_PRINT_L      2F86
OP1101_PRINT_L2     2E86
OP1101_PRINT_W      2F3E
OP1101_PRINT_W2     2E3E
OP1110              305C
OP1110_RETURN       30D4
OP1111              371C
OP_ADDA_L           3044
OP_ADDA_W           302C
OP_ADDQ_B           2026
OP_ADDQ_L           204A
OP_ADDQ_W           2038
OP_ADD_B            2FE4
OP_ADD_L            3014
OP_ADD_W            2FFC
OP_ASX              32F0
OP_ASX_0            3464
OP_ASX_1            3470
OP_ASX_2            347C
OP_ASX_3            3488
OP_ASX_4            3494
OP_ASX_5            34A0
OP_ASX_6            34AC
OP_ASX_7            34B8
OP_ASX_8            34C4
OP_ASX_AFTER_IMMEDIATE  34CC
OP_ASX_B            336C
OP_ASX_CHECK_FORMAT  3378
OP_ASX_DIR          3326
OP_ASX_INTERMEDIATE  33DA
OP_ASX_L            3354
OP_ASX_MEMORY       34DE
OP_ASX_R            331E
OP_ASX_REGISTER     338A
OP_ASX_RETURN       3506
OP_ASX_W            3360
OP_BEQ              20F0
OP_BHI              20A4
OP_BLT              213C
OP_BNE              20CA
OP_BRA              2116
OP_BTST             1508
OP_BTST_IMMEDIATE   1592
OP_CMPA_L           289E
OP_CMPA_W           288C
OP_CMP_B            28B0
OP_CMP_L            28E0
OP_CMP_W            28C8
OP_DATA             17DE
OP_DIVS             225A
OP_EORI             161A
OP_EOR_B            28F8
OP_EOR_L            291C
OP_EOR_W            290A
OP_JSR              1E8A
OP_LEA              1D10
OP_LEA_DN_EA_OR_EA_DN  1D1E
OP_LEA_RETURN       1D7C
OP_LSX              30D6
OP_LSX_0            324A
OP_LSX_1            3256
OP_LSX_2            3262
OP_LSX_3            326E
OP_LSX_4            327A
OP_LSX_5            3286
OP_LSX_6            3292
OP_LSX_7            329E
OP_LSX_8            32AA
OP_LSX_AFTER_IMMEDIATE  32B2
OP_LSX_B            3152
OP_LSX_CHECK_FORMAT  315E
OP_LSX_DIR          310C
OP_LSX_INTERMEDIATE  31C0
OP_LSX_L            313A
OP_LSX_MEMORY       32C4
OP_LSX_R            3104
OP_LSX_REGISTER     3170
OP_LSX_RETURN       32EC
OP_LSX_W            3146
OP_MOVEA_L          1AF6
OP_MOVEA_W          1BF2
OP_MOVEM_L          1CFE
OP_MOVEM_W          1CEC
OP_MOVE_B           1A00
OP_MOVE_L           1A8E
OP_MOVE_W           1B8A
OP_MULS             2950
OP_NEG              1D7E
OP_NEG_B            1DCA
OP_NEG_L            1DE2
OP_NEG_PRINT_EA     1DEE
OP_NEG_W            1DD6
OP_NOT              1E04
OP_NOT_B            1E50
OP_NOT_L            1E68
OP_NOT_PRINT_EA     1E74
OP_NOT_W            1E5C
OP_ORI              1916
OP_PRINT_L_LEA      1D3C
OP_ROX              350A
OP_ROX_0            367E
OP_ROX_1            368A
OP_ROX_2            3696
OP_ROX_3            36A2
OP_ROX_4            36AE
OP_ROX_5            36BA
OP_ROX_6            36C6
OP_ROX_7            36D2
OP_ROX_8            36DE
OP_ROX_AFTER_IMMEDIATE  36E6
OP_ROX_B            3586
OP_ROX_CHECK_FORMAT  3592
OP_ROX_DIR          3540
OP_ROX_INTERMEDIATE  35F4
OP_ROX_L            356E
OP_ROX_MEMORY       36F8
OP_ROX_R            3538
OP_ROX_REGISTER     35A4
OP_ROX_RETURN       3718
OP_ROX_W            357A
OP_RTS              1E9E
OP_SUBA_L           2618
OP_SUBA_W           2606
OP_SUBI             16FC
OP_SUB_B            25BE
OP_SUB_L            25EE
OP_SUB_W            25D6
OUTPUT_PROCESSED_DATA  13D0
POINTER_WORD        4E14
POP_FRONT           4484
POP_FRONT_RETURN    44BE
POP_RETURN          4482
POP_SHIFT_LOOP      44A0
POP_STACK           4476
PRINT_QUEUE         444A
PRINT_QUEUE_HELPER  4456
PRINT_QUEUE_RETURN  446C
PRINT_STACK         4430
PRINT_STACK_HELPER  443C
PRINT_STACK_RETURN  4448
PROGLP              100A
PROMPT_END          4866
PROMPT_START        4837
PUSH_STACK          446E
QUEUE_COUNTER       4DF6
REG_0               3B1E
REG_1               3B2C
REG_2               3B3A
REG_3               3B48
REG_4               3B56
REG_5               3B64
REG_6               3B72
REG_7               3B80
REPEAT              3B8E
REPEATMSG           48BD
RETURN              1240
RETURN2STACK        12A8
SRC_LOOP_SHIFTING   3F0C
SRC_MASKING_NEXT    3F1A
SRC_MODE            37DE
SRC_REGISTER        3AC6
SRC_REGISTER_FORMAT  4DF9
STACK               7000
STACK_HEX_CHAR      131A
STACK_HEX_CONT      131E
STACK_HEX_LOOP      1300
START               1004
START_ADDR          10D4
S_ADDR_HX           4A3C
TEMP_REGISTER_FORMAT  4DFA
TERMINATE           4550
TESTING             1036
TMPINPUT            4A47
TMPOUTPUT           4A97
VAR_BYTE_END        4E02
VAR_BYTE_START      4DFE
VAR_LONG_ADDRESS_MODE_CHECK  4E0A
VAR_TEMP_CLEANCOPY  4E06
VR_E_ADDR           49EC
VR_S_ADDR           499C
WELCOME             4562
WORDMODE            3982

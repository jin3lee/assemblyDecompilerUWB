00001004 Starting Address
Assembler used: EASy68K Editor/Assembler v5.12.29
Created On: 12/10/2014 9:54:22 PM

00000000                             1  *---------------------------------------------------------------------------*
00000000                             2  * Title      : 68K Disassembler
00000000                             3  * Written by : Team Circle
00000000                             4  * Date       : 12/05/14
00000000                             5  * Description: Scans a section of memory and converts its
00000000                             6  *              contents to a listing of valid assembly 
00000000                             7  *              language instructions
00000000                             8  *---------------------------------------------------------------------------*
00000000                             9  
00000000                            10  *---------------------------------------------------------------------------*
00000000                            11  * System Equates                                                 
00000000                            12  *---------------------------------------------------------------------------*
00000000  =0000000D                 13  CR          EQU     $0D                     * ASCII for Carriage Return
00000000  =0000000A                 14  LF          EQU     $0A                     * ASCII for Line Feed 
00000000  =00007000                 15  STACK       EQU     $7000                   * Initial Stack Pointer                         
00000000                            16              
00000000                            17  *---------------------------------------------------------------------------*
00000000                            18  * Reserved Registers
00000000                            19  *---------------------------------------------------------------------------*  
00000000                            20  * D0 - I/O
00000000                            21  * D1 - Temporary storage of processing data
00000000                            22  * D3 - [PUSH_STACK]
00000000                            23  * D4 - Opcode size (0 - byte; 1- word; 2-long)
00000000                            24  * D5 - Processing data
00000000                            25  * D6 - Loop counter to print 30 lines
00000000                            26  * D7 - Error flag
00000000                            27  * A2 - [STACK POINTER]
00000000                            28  * A5 - Processing address in hex
00000000                            29  
00000000                            30  *---------------------------------------------------------------------------*
00000000                            31  * Start and loop program
00000000                            32  *---------------------------------------------------------------------------*  
00001000                            33              ORG     $1000
00001000  4FF8 7000                 34              LEA     STACK,SP
00001004                            35  START:            
00001004  4EB9 00001028             36              JSR     INTRO                 
0000100A  4EB9 00001058             37  PROGLP      JSR     START_ADDR
00001010  4EB9 000010AA             38              JSR     END_ADDR
00001016  43F9 000049C6             39              LEA     ENDLINE_M,A1           * Add a new line
0000101C  103C 000E                 40              MOVE.B  #14, D0                  * Display A1
00001020  4E4F                      41              TRAP    #15
00001022                            42              
00001022  4EF9 000012D0             43              JMP     MAIN
00001028                            44              
00001028                            45  *---------------------------------------------------------------------------*
00001028                            46  * INTRO: Display the introduction of the program
00001028                            47  *---------------------------------------------------------------------------*
00001028  43F9 000044E4             48  INTRO       LEA     WELCOME,A1              * Load PROMPT_START
0000102E  103C 000E                 49              MOVE.B  #14,D0                  * Display A1
00001032  4E4F                      50              TRAP    #15
00001034  4E75                      51              RTS
00001036                            52  TESTING     
00001036                            53  
00001036  E6D1                      54              ROR.W   (A1)            *BUGGED
00001038  E6DA                      55              ROR.W   (A2)+            *BUGGED
0000103A  E6E3                      56              ROR.W   -(A3)            *BUGGED
0000103C  E6F8 1234                 57              ROR.W   $1234            *BUGGED
00001040  E6F9 12345678             58              ROR.W   $12345678             *BUGGED
00001046                            59              
00001046  E7D1                      60              ROL.W   (A1)            *BUGGED
00001048  E7DA                      61              ROL.W   (A2)+            *BUGGED
0000104A  E7E3                      62              ROL.W   -(A3)            *BUGGED
0000104C  E7F8 1234                 63              ROL.W   $1234            *BUGGED
00001050  E7F9 12345678             64              ROL.W   $12345678             *BUGGED
00001056                            65              
00001056  4E75                      66              RTS
00001058                            67  *---------------------------------------------------------------------------*
00001058                            68  * START_ADDR: Compute the starting address
00001058                            69  *---------------------------------------------------------------------------*
00001058                            70  START_ADDR
00001058                            71              * Output
00001058  43F9 000047B9             72              LEA     PROMPT_START,A1         * Load PROMPT_START 
0000105E  103C 000E                 73              MOVE.B  #14,D0                  * Display PROMPT_START
00001062  4E4F                      74              TRAP    #15
00001064                            75      
00001064                            76              * Input
00001064  43F9 0000491E             77              LEA     VR_S_ADDR,A1            * Load VR_S_ADDR
0000106A  103C 0002                 78              MOVE.B  #2,D0                   * Ask user for input
0000106E  4E4F                      79              TRAP    #15
00001070                            80              
00001070                            81              * Error Checking (length)
00001070  0C01 0000                 82              CMPI.B  #0, D1                  * Check if input length <= 0
00001074  6F00 0098                 83              BLE     ERROR_1
00001078  0C01 0008                 84              CMPI.B  #8, D1                  * Check if input length > 8
0000107C  6E00 0090                 85              BGT     ERROR_1
00001080                            86              
00001080                            87              * Conversion & Storage
00001080  4EB9 0000115E             88              JSR     ASCII2HEX               * Jump to ASCII2HEX
00001086  0C07 0001                 89              CMPI.B  #1, D7                  * Check for error
0000108A  6700 0082                 90              BEQ     ERROR_1                 
0000108E  23C1 000049BE             91              MOVE.L  D1, S_ADDR_HX           * Move the result to S_ADDR_HX 
00001094                            92              
00001094                            93              * Error Checking (Odd)
00001094  43F9 000049BE             94              LEA     S_ADDR_HX, A1           * Load 'S_ADDR_HX' for odd error
0000109A  4EB9 000012B4             95              JSR     IS_ODD                  * Check if the input address is odd
000010A0  0C07 0001                 96              CMPI.B  #1, D7                  * Check for error
000010A4  6700 0088                 97              BEQ     ERROR_3
000010A8                            98              
000010A8                            99              * Return
000010A8  4E75                     100              RTS     
000010AA                           101  *---------------------------------------------------------------------------*
000010AA                           102  * END_ADDR: Compute the ending address
000010AA                           103  *---------------------------------------------------------------------------*
000010AA                           104  END_ADDR
000010AA                           105              * Output
000010AA  43F9 000047E8            106              LEA     PROMPT_END,A1           * Load PROMPT_END
000010B0  103C 000E                107              MOVE.B  #14,D0                  * Display PROMPT_END
000010B4  4E4F                     108              TRAP    #15
000010B6                           109  
000010B6                           110              * Input
000010B6  43F9 0000496E            111              LEA     VR_E_ADDR,A1            * Load VR_E_ADDR
000010BC  103C 0002                112              MOVE.B  #2,D0                   * Ask user for input
000010C0  4E4F                     113              TRAP    #15
000010C2                           114              
000010C2                           115              * Error Checking (length)
000010C2  0C01 0000                116              CMPI.B  #0, D1                  * Check if input length <= 0
000010C6  6F00 0056                117              BLE     ERROR_2
000010CA  0C01 0008                118              CMPI.B  #8, D1                  * Check if input length > 8
000010CE  6E00 004E                119              BGT     ERROR_2
000010D2                           120              
000010D2                           121              * Conversion & Storage
000010D2  4EB9 0000115E            122              JSR     ASCII2HEX               * Jump to ASCII2HEX
000010D8  0C07 0001                123              CMPI.B  #1, D7                  * Check for error
000010DC  6700 0040                124              BEQ     ERROR_2
000010E0  23C1 000049C2            125              MOVE.L  D1, E_ADDR_HX           * Move the result to E_ADDR_HX
000010E6                           126              
000010E6                           127              * Error Checking (start > end case)
000010E6  2439 000049BE            128              MOVE.L  S_ADDR_HX, D2           * Move the starting address to D2
000010EC  B282                     129              CMP.L   D2, D1                  * Compare starting and ending address
000010EE  6300 005E                130              BLS     ERROR_5                 * Go to ERROR_5 if ending < starting
000010F2                           131              
000010F2                           132              * Error Checking (Odd case)
000010F2  43F9 000049C2            133              LEA     E_ADDR_HX, A1           * Move the ending address
000010F8  4EB9 000012B4            134              JSR     IS_ODD                  * Go to IS_ODD for odd address checking
000010FE  0C07 0001                135              CMPI.B  #1, D7                  * Check for an error flag
00001102  6700 003A                136              BEQ     ERROR_4
00001106                           137              
00001106                           138              * Inputs are valid
00001106  2A79 000049BE            139              MOVE.L  S_ADDR_HX, A5           * Store the valid input in A5
0000110C                           140              
0000110C  4E75                     141              RTS
0000110E                           142              
0000110E                           143  *---------------------------------------------------------------------------*
0000110E                           144  * ERROR_1: Address error (Invalid starting address)
0000110E                           145  *---------------------------------------------------------------------------*
0000110E                           146  ERROR_1
0000110E  43F9 000048AD            147              LEA     ERRMSG_1, A1            * Load ERRMSG_1
00001114  103C 000E                148              MOVE.B  #14, D0                 * Display ERRMSG_1
00001118  4E4F                     149              TRAP    #15
0000111A  4EF8 1058                150              JMP     START_ADDR              * Jump to START_ADDR
0000111E                           151      
0000111E                           152  *---------------------------------------------------------------------------*
0000111E                           153  * ERROR_2: Address error (Invalid ending address)
0000111E                           154  *---------------------------------------------------------------------------*
0000111E                           155  ERROR_2
0000111E  43F9 000048AD            156              LEA     ERRMSG_1, A1            * Load ERRMSG_1
00001124  103C 000E                157              MOVE.B  #14, D0                 * Display ERRMSG_1
00001128  4E4F                     158              TRAP    #15
0000112A  4EF8 10AA                159              JMP     END_ADDR                * Jump to END_ADDR
0000112E                           160  
0000112E                           161  *---------------------------------------------------------------------------*
0000112E                           162  * ERROR_3: Address error (Odd starting address)
0000112E                           163  *---------------------------------------------------------------------------*
0000112E                           164  ERROR_3
0000112E  43F9 000048CC            165              LEA     ERRMSG_3, A1
00001134  103C 000E                166              MOVE.B  #14, D0
00001138  4E4F                     167              TRAP    #15
0000113A  4EF8 1058                168              JMP     START_ADDR
0000113E                           169     
0000113E                           170  *---------------------------------------------------------------------------*
0000113E                           171  * ERROR_4: Address error (Odd ending address)
0000113E                           172  *---------------------------------------------------------------------------*         
0000113E                           173  ERROR_4
0000113E  43F9 000048CC            174              LEA     ERRMSG_3, A1
00001144  103C 000E                175              MOVE.B  #14, D0
00001148  4E4F                     176              TRAP    #15
0000114A  4EF8 10AA                177              JMP     END_ADDR
0000114E                           178            
0000114E                           179  *---------------------------------------------------------------------------*
0000114E                           180  * ERROR_3: Address error (Ending address is less than starting address)
0000114E                           181  *---------------------------------------------------------------------------*
0000114E                           182  ERROR_5
0000114E  43F9 000048F1            183              LEA     ERRMSG_5, A1
00001154  103C 000E                184              MOVE.B  #14, D0
00001158  4E4F                     185              TRAP    #15
0000115A  4EF8 10AA                186              JMP     END_ADDR
0000115E                           187    
0000115E                           188  *---------------------------------------------------------------------------*
0000115E                           189  * ASCII2HEX: Convert ASCii to Hexadecimal
0000115E                           190  * Reserved registers: A1 = Source, D1 = Destination, D2 = Byte, D7 = Error
0000115E                           191  *---------------------------------------------------------------------------*
0000115E  4281                     192  ASCII2HEX   CLR.L   D1                      * Clear the destination 
00001160  4287                     193              CLR.L   D7                      * Set the error flag to 0
00001162  4282                     194              CLR.L   D2                      * Clear D2 for temp storage
00001164                           195              
00001164  1419                     196  ASC2HXLP    MOVE.B  (A1)+, D2               * Read a byte to D2
00001166  0C02 0000                197              CMPI.B  #0, D2                  * Check for NULL (indicates the end of source)
0000116A  6700 0058                198              BEQ     RETURN                  * If it's NULL, go to return
0000116E  0C02 0066                199              CMPI.B  #102, D2                * Decimal ASCII value of f is 102
00001172  6E00 004C                200              BGT     ASC_ERR                 * ASCII > f (invalid input) 
00001176  0C02 0061                201              CMPI.B  #97, D2                 * Decimal ASCII value of a is 97
0000117A  6C00 0026                202              BGE     ASC_LOW                 * ASCII >= a (valid input)
0000117E  0C02 0046                203              CMPI.B  #70, D2                 * Decimal ASCII value of F is 70
00001182  6E00 003C                204              BGT     ASC_ERR                 * ASCII > F (invalid input)
00001186  0C02 0041                205              CMPI.B  #65, D2                 * Decimal ASCII value of A is 65
0000118A  6C00 001E                206              BGE     ASC_UPP                 * ASCII >= A (valid input)
0000118E  0C02 0039                207              CMPI.B  #57, D2                 * Decimal value of 9 is 57
00001192  6E00 002C                208              BGT     ASC_ERR                 * ASCII > 9 (invalid input)
00001196  0C02 0030                209              CMPI.B  #48, D2                 * Decimal ASCII value of 0 is 48
0000119A  6C00 0016                210              BGE     ASC_NUM                 * ASCII >= 0 (valid input)
0000119E  6000 0020                211              BRA     ASC_ERR                 * Invalid input
000011A2                           212  
000011A2  0442 0057                213  ASC_LOW     SUBI    #87, D2                 * Convert the ASCII input to Hex
000011A6  6000 0012                214              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011AA                           215              
000011AA  0442 0037                216  ASC_UPP     SUBI    #55, D2                 * Convert the ASCII input to Hex
000011AE  6000 000A                217              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011B2                           218              
000011B2  0442 0030                219  ASC_NUM     SUBI    #48, D2                 * Convert the ASCII input to Hex
000011B6  6000 0002                220              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011BA                           221              
000011BA  E981                     222  ASC_SFT     ASL.L   #4, D1                  * Shift the dest to left by 4 bits
000011BC  D202                     223              ADD.B   D2, D1                  * Add the converted input to D1
000011BE  60A4                     224              BRA     ASC2HXLP                * Loop
000011C0                           225  
000011C0  1E3C 0001                226  ASC_ERR     MOVE.B  #1, D7                  * Set the error flag to 1            
000011C4  4E75                     227  RETURN      RTS     
000011C6                           228  
000011C6                           229  *---------------------------------------------------------------------------*
000011C6                           230  * ASCII2HEX: Convert ASCii to Hexadecimal
000011C6                           231  * Reserved registers: A1 = Source, D3 = Destination, D2 = Byte, D7 = Error
000011C6                           232  *---------------------------------------------------------------------------*
000011C6                           233  ASCII2HEX2STACK
000011C6  4283                     234              CLR.L   D3                      * Clear the destination 
000011C8  4287                     235              CLR.L   D7                      * Set the error flag to 0
000011CA  4282                     236              CLR.L   D2                      * Clear D2 for temp storage
000011CC                           237              
000011CC                           238  ASC2HXLP2STACK
000011CC  1419                     239              MOVE.B  (A1)+, D2               * Read a byte to D2
000011CE  0C02 0000                240              CMPI.B  #0, D2                  * Check for NULL (indicates the end of source)
000011D2  6700 0058                241              BEQ     RETURN2STACK                  * If it's NULL, go to return
000011D6  0C02 0066                242              CMPI.B  #102, D2                * Decimal ASCII value of f is 102
000011DA  6E00 004C                243              BGT     ASC_ERR2STACK                 * ASCII > f (invalid input) 
000011DE  0C02 0061                244              CMPI.B  #97, D2                 * Decimal ASCII value of a is 97
000011E2  6C00 0026                245              BGE     ASC_LOW2STACK                 * ASCII >= a (valid input)
000011E6  0C02 0046                246              CMPI.B  #70, D2                 * Decimal ASCII value of F is 70
000011EA  6E00 003C                247              BGT     ASC_ERR2STACK                 * ASCII > F (invalid input)
000011EE  0C02 0041                248              CMPI.B  #65, D2                 * Decimal ASCII value of A is 65
000011F2  6C00 001E                249              BGE     ASC_UPP2STACK                 * ASCII >= A (valid input)
000011F6  0C02 0039                250              CMPI.B  #57, D2                 * Decimal value of 9 is 57
000011FA  6E00 002C                251              BGT     ASC_ERR2STACK                 * ASCII > 9 (invalid input)
000011FE  0C02 0030                252              CMPI.B  #48, D2                 * Decimal ASCII value of 0 is 48
00001202  6C00 0016                253              BGE     ASC_NUM2STACK                 * ASCII >= 0 (valid input)
00001206  6000 0020                254              BRA     ASC_ERR2STACK                 * Invalid input
0000120A                           255  
0000120A                           256  ASC_LOW2STACK
0000120A  0442 0057                257              SUBI    #87, D2                 * Convert the ASCII input to Hex
0000120E  6000 0012                258              BRA     ASC_SFT2STACK                 * Go to ASC_SFT to shift the bits
00001212                           259              
00001212                           260  ASC_UPP2STACK
00001212  0442 0037                261              SUBI    #55, D2                 * Convert the ASCII input to Hex
00001216  6000 000A                262              BRA     ASC_SFT2STACK                 * Go to ASC_SFT to shift the bits
0000121A                           263              
0000121A                           264  ASC_NUM2STACK
0000121A  0442 0030                265              SUBI    #48, D2                 * Convert the ASCII input to Hex
0000121E  6000 0002                266              BRA     ASC_SFT2STACK                * Go to ASC_SFT to shift the bits
00001222                           267              
00001222                           268  ASC_SFT2STACK
00001222  E983                     269              ASL.L   #4, D3                  * Shift the dest to left by 4 bits
00001224  D602                     270              ADD.B   D2, D3                  * Add the converted input to D1
00001226  60A4                     271              BRA     ASC2HXLP2STACK                * Loop
00001228                           272  
00001228                           273  ASC_ERR2STACK
00001228  1E3C 0001                274              MOVE.B  #1, D7                  * Set the error flag to 1            
0000122C                           275  RETURN2STACK
0000122C  4E75                     276              RTS  
0000122E                           277  *---------------------------------------------------------------------------*
0000122E                           278  * HEX2ASCII: Convert Hexadecimal to ASCii 
0000122E                           279  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
0000122E                           280  *---------------------------------------------------------------------------*
0000122E  0C02 0008                281  HEX2ASCII   CMPI.B  #8, D2                  * Check to see if the size is long
00001232  6700 000E                282              BEQ     HEX_LOOP
00001236  4841                     283              SWAP    D1
00001238  0C02 0002                284              CMPI.B  #2,D2
0000123C  6600 0004                285              BNE     HEX_LOOP
00001240  E189                     286              LSL.L   #8,D1
00001242                           287             
00001242  E999                     288  HEX_LOOP    ROL.L   #4, D1                  * Roll D1 to left
00001244  2601                     289              MOVE.L  D1, D3                  * Move D1 to D3
00001246  0283 0000000F            290              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
0000124C  0C03 0009                291              CMPI.B  #9, D3                  * Compare te digit
00001250  6E00 000A                292              BGT     HEX_CHAR              
00001254  0603 0030                293              ADDI.B  #48,D3                  * Add 48 for numerical output
00001258  6000 0006                294              BRA     HEX_CONT
0000125C                           295              
0000125C  0603 0037                296  HEX_CHAR    ADDI.B  #55,D3                  * Add 55 for character output
00001260                           297  
00001260  12C3                     298  HEX_CONT    MOVE.B  D3, (A1)+               * Place into A1
00001262  5342                     299              SUBI    #1, D2                  * Decrement the size
00001264  0C02 0000                300              CMPI.B  #0, D2                  * Check if D2 is 0
00001268  66D8                     301              BNE     HEX_LOOP                * Loop
0000126A  12BC 0000                302              MOVE.B  #$0,(A1)                * Null terminator
0000126E  4E75                     303              RTS
00001270                           304  *---------------------------------------------------------------------------*
00001270                           305  * HEX2ASCII2STACK: Convert Hexadecimal to ASCii 
00001270                           306  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte, PUSHES FROM D3 INTO STACK
00001270                           307  *---------------------------------------------------------------------------*
00001270                           308  HEX2ASCII2STACK
00001270  0C02 0008                309              CMPI.B  #8, D2                  * Check to see if the size is long
00001274  6700 000E                310              BEQ     STACK_HEX_LOOP
00001278  4841                     311              SWAP    D1
0000127A  0C02 0002                312              CMPI.B  #2,D2
0000127E  6600 0004                313              BNE     STACK_HEX_LOOP
00001282  E189                     314              LSL.L   #8,D1
00001284                           315             
00001284                           316  STACK_HEX_LOOP    
00001284  E999                     317              ROL.L   #4, D1                  * Roll D1 to left
00001286  2601                     318              MOVE.L  D1, D3                  * Move D1 to D3
00001288  0283 0000000F            319              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
0000128E  0C03 0009                320              CMPI.B  #9, D3                  * Compare te digit
00001292  6E00 000A                321              BGT     STACK_HEX_CHAR              
00001296  0603 0030                322              ADDI.B  #48,D3                  * Add 48 for numerical output
0000129A  6000 0006                323              BRA     STACK_HEX_CONT
0000129E                           324              
0000129E                           325  STACK_HEX_CHAR    
0000129E  0603 0037                326              ADDI.B  #55,D3                  * Add 55 for character output
000012A2                           327  
000012A2                           328  STACK_HEX_CONT    
000012A2  6100 314C                329              BSR     PUSH_STACK              *PLACE INTO STACK
000012A6  5342                     330              SUBI    #1, D2                  * Decrement the size
000012A8  0C02 0000                331              CMPI.B  #0, D2                  * Check if D2 is 0
000012AC  66D6                     332              BNE     STACK_HEX_LOOP                * Loop
000012AE  12BC 0000                333              MOVE.B  #$0,(A1)                * Null terminator
000012B2  4E75                     334              RTS
000012B4                           335  
000012B4                           336  
000012B4                           337  *---------------------------------------------------------------------------*
000012B4                           338  * IS_ODD: Check whether the source address is odd
000012B4                           339  * Reserved registers: A1 = Source, D1 = Result, D7 = error flag
000012B4                           340  *---------------------------------------------------------------------------*
000012B4  4281                     341  IS_ODD      CLR.L   D1                      * Clear the result
000012B6  4287                     342              CLR.L   D7                      * Set the error flag to 0
000012B8  2211                     343              MOVE.L  (A1),D1                * Temp store the checking address to D1
000012BA  82FC 0002                344              DIVU    #2, D1                  * Divide the result by 2
000012BE  4841                     345              SWAP    D1                      * Swap remainder with quotient
000012C0  0C01 0001                346              CMPI.B  #1, D1                  * Check for error
000012C4  6700 0004                347              BEQ     IS_ODD_ERR
000012C8  4E75                     348              RTS
000012CA                           349              
000012CA  1E3C 0001                350  IS_ODD_ERR  MOVE.B  #1, D7
000012CE  4E75                     351              RTS
000012D0                           352  
000012D0                           353  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*
000012D0                           354  * MAINDEBUG                    
000012D0                           355  * A2: STACK POINTER                                                      MAIN                                                                        MAIN
000012D0                           356  * A5: Processing address
000012D0                           357  *
000012D0                           358  * D3: USED FOR PUSHING INTO STACK
000012D0                           359  *     To push into stack => MOVE.W #DATA,D3 
000012D0                           360  *                           BSR    PUSH_STACK
000012D0                           361  *     To print stack     => BSR    PRINT_STACK 
000012D0                           362  *     To clear stack     => BSR    CLEAR_STACK
000012D0                           363  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*  
000012D0                           364  MAIN        
000012D0                           365              *initialize stack pointer
000012D0  33FC 0000 00004D76       366              MOVE.W  #0,COUNTER
000012D8  347C 7000                367              MOVEA.W #STACK,A2
000012DC  163C 0020                368              MOVE.B  #' ',D3
000012E0  6100 310E                369              BSR     PUSH_STACK
000012E4  6100 310A                370              BSR     PUSH_STACK
000012E8  6100 3106                371              BSR     PUSH_STACK
000012EC                           372              
000012EC                           373              * clear registers for temp storage
000012EC  4280                     374              CLR.L   D0                   
000012EE  4281                     375              CLR.L   D1                   
000012F0  227C 00000000            376              MOVEA.L #0, A1                
000012F6                           377              
000012F6  220D                     378              MOVE.L  A5,D1                   * check to see if the address is fully read
000012F8  23CD 000049BE            379              MOVE.L  A5,S_ADDR_HX
000012FE  B2B9 000049C2            380              CMP.L   E_ADDR_HX,D1
00001304  6C00 280A                381              BGE     REPEAT                  * go to repeat for user action
00001308                           382  
00001308  43F9 00004A19            383              LEA     TMPOUTPUT,A1            * allocate storage to hold output
0000130E  143C 0008                384              MOVE.B  #8,D2                   * set the output size
00001312  4EB8 122E                385              JSR     HEX2ASCII               
00001316  43F9 00004A19            386              LEA     TMPOUTPUT,A1
0000131C  103C 000E                387              MOVE.B  #14,D0
00001320  4E4F                     388              TRAP    #15
00001322                           389              
00001322  4285                     390              CLR.L    D5                      * clear the processing data
00001324  3A1D                     391              MOVE.W  (A5)+,D5                 * copy the currently processing data in A5 over to D5
00001326                           392                                               * advance the current instruction pointer to the next
00001326                           393                                               * instruction in memory
00001326                           394  *----------------------------------------*
00001326                           395  * Registers          
00001326                           396  * [D1] - COPY OF D5
00001326                           397  * [D5] - DATA TO BE PROCESSED
00001326                           398  * [D6] - COUNTER FOR LINES PROCESSED
00001326                           399  *
00001326                           400  * [D4]      - ERROR FLAG BEFORE PRINTING
00001326                           401  * [STACK]   - PRINTS PROCESS DATA
00001326                           402  * [COUNTER] - KEEPS TRACK OF STACK INCREMENT
00001326                           403  *
00001326                           404  * [A1] - USED FOR JUMPING/PRINTING
00001326                           405  *
00001326                           406  *----------------------------------------*
00001326                           407  
00001326                           408              
00001326                           409              *Processing the first 4 most significant bits 
00001326  2205                     410              MOVE.L  D5,D1                    * copy the current processing data to D1
00001328  143C 000C                411              MOVE.B  #12,D2                   * shift to right by 12 bits
0000132C  E469                     412              LSR.W   D2,D1                    * [D2] Temporarily used D2 for shifting bits
0000132E  C2FC 0006                413              MULU    #6,D1                    * form offset
00001332  43F9 000013A0            414              LEA     JMPTABLE,A1              * index into table
00001338  4EB1 1000                415              JSR     0(A1,D1)                 * jump indirect with index
0000133C                           416              
0000133C                           417              *SECURED EA*
0000133C  B83C 0001                418              CMP.B   #1,D4                    * ERROR FLAG CHECK [ERROR WHEN D4 == 1]
00001340  6600 0012                419              BNE     OUTPUT_PROCESSED_DATA    * PRINTS PROCESSED OP-CODE & EA
00001344  6100 041A                420              BSR     OP_DATA                  * PRINT ERROR MESSAGE "DATA"
00001348  6100 3112                421              BSR     CLEAR_STACK              * CLEARS THE STACK 
0000134C  183C 0000                422              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
00001350  6000 0022                423              BRA     DISPLAY_30_LINES         * GO TO LAST STEP
00001354                           424             
00001354                           425  OUTPUT_PROCESSED_DATA       
00001354  163C 000D                426              MOVE.B  #$D,D3                  *carriage return
00001358  6100 3096                427              BSR     PUSH_STACK
0000135C  163C 000A                428              MOVE.B  #$A,D3                  *new line feed
00001360  6100 308E                429              BSR     PUSH_STACK
00001364  163C 0000                430              MOVE.B  #$0,D3                  *null
00001368  6100 3086                431              BSR     PUSH_STACK
0000136C                           432       
0000136C  6100 305E                433              BSR     PRINT_QUEUE
00001370  183C 0000                434              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
00001374                           435  DISPLAY_30_LINES
00001374                           436              * display 30 lines per page
00001374  5206                     437              ADDI.B  #1,D6
00001376  0C06 001E                438              CMPI.B  #30,D6
0000137A  6C00 0006                439              BGE     NEXTLINES
0000137E  6000 FF50                440              BRA     MAIN
00001382                           441            
00001382                           442  *---------------------------------------------------------------------------*
00001382                           443  * NEXTLINES: receive input from user to print the next 30 lines
00001382                           444  *---------------------------------------------------------------------------*  
00001382  4206                     445  NEXTLINES   CLR.B   D6
00001384  43F9 00004815            446              LEA     DISP_NEXT,A1
0000138A  103C 000E                447              MOVE.B  #14,D0
0000138E  4E4F                     448              TRAP    #15
00001390  43F9 000049C9            449              LEA     TMPINPUT,A1
00001396  103C 0002                450              MOVE.B  #2,D0
0000139A  4E4F                     451              TRAP    #15
0000139C  4EF8 12D0                452              JMP     MAIN
000013A0                           453    
000013A0                           454  *---------------------------------------------------------------------------*
000013A0                           455  * JMPTABLE: OP code jump/branch table used to decode and display opcodes
000013A0                           456  *---------------------------------------------------------------------------*  
000013A0  4EF9 00001400            457  JMPTABLE    JMP     OP0000  * CMPI/ORI/BTST/EORI/SUBI                       *FINISHED - 
000013A6  4EF9 0000197C            458              JMP     OP0001  * MOVE.B                                        *FINISHED - 
000013AC  4EF9 000019EA            459              JMP     OP0010  * MOVE.L/MOVEA.L                                *FINISHED - 
000013B2  4EF9 00001AE8            460              JMP     OP0011  * MOVE.W/MOVEA.W                                *FINISHED - 
000013B8  4EF9 00001BE4            461              JMP     OP0100  * MOVEM/LEA/NEG/NOT/JSR/RTS                     *FINISHED - 
000013BE  4EF9 00001E3A            462              JMP     OP0101  * ADDQ                                          *FINISHED - 
000013C4  4EF9 00001FDE            463              JMP     OP0110  * BRA/Bcc (BEQ/BNE/BLT/BHI)                     *FINISHED - 
000013CA  4EF9 000020E4            464              JMP     OP0111  * MOVEQ (unassigned)                            *FINISHED - NEVER ASSIGNED
000013D0  4EF9 000020E8            465              JMP     OP1000  * DIVS                                          *FINISHED - 
000013D6  4EF9 000021F0            466              JMP     OP1001  * SUB/SUBA                                      *FINISHED - 
000013DC  4EF9 000025AC            467              JMP     OP1010  * Unassigned                                    *FINISHED - NEVER ASSIGNED
000013E2  4EF9 000025B0            468              JMP     OP1011  * CMP/EOR/CMPA                                  *FINISHED - 
000013E8  4EF9 000028B0            469              JMP     OP1100  * MULS/AND                                      *FINISHED - 
000013EE  4EF9 00002C02            470              JMP     OP1101  * ADD/ADDA                                      *FINISHED - 
000013F4  4EF9 00002FDE            471              JMP     OP1110  * LSR/LSL/ASR/ASL/ROL/ROR                       *FINISHED - LSR/LSL/ASR/ASL
000013FA  4EF9 0000369E            472              JMP     OP1111  * Special/Reserved
00001400                           473              
00001400                           474  *---------------------------------------------------------------------------*
00001400                           475  * OP0000: decode CMPI/ORI/BTST/SUBI/EORI
00001400                           476  *---------------------------------------------------------------------------*           
00001400                           477  OP0000                                                                                  
00001400  4281                     478              CLR.L   D1          * to temporarily store the address to process
00001402  4280                     479              CLR.L   D0  
00001404  4284                     480              CLR.L   D4                 
00001406  227C 00000000            481              MOVEA.L #0, A1                
0000140C                           482              * Check for ORI (0000 0000 xx (size) xxx (EA mode) xxx(EA reg)
0000140C                           483              * Check if bit 11,10,9,8 are 0000)
0000140C  2205                     484              MOVE.L  D5,D1
0000140E  0281 00000F00            485              ANDI.L  #$0F00,D1
00001414  0C81 00000000            486              CMPI.L  #$0000,D1   * if they are 0000, it is ORI
0000141A  6700 047C                487              BEQ     OP_ORI
0000141E                           488  
0000141E                           489              * check for CMPI (0000 1100 xx (size) xxx (EA mode) xxx (EA reg)
0000141E                           490              * check if bit 11,10,9,8 are 1100
0000141E  4281                     491              CLR.L   D1
00001420  2205                     492              MOVE.L  D5,D1
00001422  0281 00000F00            493              ANDI.L  #$0F00,D1
00001428  0C81 00000C00            494              CMPI.L  #$0C00,D1
0000142E  6700 037C                495              BEQ     OP0000_CMPI
00001432                           496              
00001432                           497              * check for SUBI
00001432  4281                     498              CLR.L   D1
00001434  2205                     499              MOVE.L  D5,D1
00001436  0281 00000F00            500              ANDI.L  #$0F00,D1
0000143C  0C81 00000400            501              CMPI.L  #$0400,D1
00001442  6700 023A                502              BEQ     OP_SUBI
00001446                           503              
00001446                           504              * check for EORI
00001446  4281                     505              CLR.L   D1
00001448  2205                     506              MOVE.L  D5,D1
0000144A  0281 00000F00            507              ANDI.L  #$0F00,D1
00001450  0C81 00000A00            508              CMPI.L  #$0A00,D1
00001456  6700 0144                509              BEQ     OP_EORI
0000145A                           510              
0000145A                           511              * check for BTST
0000145A  4281                     512              CLR.L   D1
0000145C  2205                     513              MOVE.L  D5,D1
0000145E  E099                     514              ROR.L   #8,D1
00001460  0281 00000001            515              ANDI.L  #$1,D1
00001466  0C01 0001                516              CMPI.B  #$1,D1
0000146A  6700 001E                517              BEQ     OP_BTST
0000146E  4281                     518              CLR.L   D1
00001470  2205                     519              MOVE.L  D5,D1
00001472  EC99                     520              ROR.L   #6,D1
00001474  0281 000003FF            521              ANDI.L  #$03FF,D1
0000147A  0C81 00000020            522              CMPI.L  #%000100000,D1
00001480  6700 0008                523              BEQ     OP_BTST
00001484                           524  
00001484                           525  
00001484                           526              * OP0000 series other than ORI/CMPI/BTST/EORI
00001484  4EF9 00001760            527              JMP     OP_DATA
0000148A                           528              
0000148A                           529  *---------------------------------------------------------------------------*
0000148A                           530  * OP_BTST: display BTST
0000148A                           531  *---------------------------------------------------------------------------* 
0000148A                           532  OP_BTST       
0000148A                           533              *FIGURE OUT IF it is : Dn,<ea> or #<data>,<ea>
0000148A                           534              *bits #8 indicates which
0000148A                           535              *0 - #immediate format
0000148A                           536              *1 - Dn format
0000148A  4281                     537              CLR.L   D1
0000148C  2205                     538              MOVE.L  D5,D1
0000148E  E099                     539              ROR.L   #8,D1
00001490  0281 00000001            540              ANDI.L  #1,D1
00001496  0C01 0001                541              CMPI.B  #1,D1
0000149A  6600 0078                542              BNE     OP_BTST_IMMEDIATE
0000149E                           543  
0000149E                           544             
0000149E                           545             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000149E  13FC 0000 00004D7A       546             MOVE.B   #$00,DEST_REGISTER_FORMAT
000014A6  13FC 0002 00004D7B       547             MOVE.B   #$02,SRC_REGISTER_FORMAT
000014AE                           548             
000014AE                           549             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000014AE  13FC 00B9 00004D7D       550             MOVE.B   #$B9,GET_DST_START_END
000014B6  13FC 0020 00004D7E       551             MOVE.B   #$20,GET_SRC_START_END
000014BE                           552             
000014BE  0285 0000FE3F            553             ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000014C4  0685 00000000            554             ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
000014CA                           555              
000014CA                           556              *CLEAR D3
000014CA  4283                     557              CLR.L   D3
000014CC                           558              *LOAD STACK WITH THIS OPMODE
000014CC  6100 2F22                559              BSR     PUSH_STACK
000014D0  163C 0042                560              MOVE.B  #'B',D3
000014D4  6100 2F1A                561              BSR     PUSH_STACK
000014D8  163C 0054                562              MOVE.B  #'T',D3
000014DC  6100 2F12                563              BSR     PUSH_STACK
000014E0  163C 0053                564              MOVE.B  #'S',D3
000014E4  6100 2F0A                565              BSR     PUSH_STACK
000014E8  163C 0054                566              MOVE.B  #'T',D3
000014EC  6100 2F02                567              BSR     PUSH_STACK
000014F0  163C 002E                568              MOVE.B  #'.',D3
000014F4  6100 2EFA                569              BSR     PUSH_STACK
000014F8  163C 0042                570              MOVE.B  #'B',D3
000014FC  6100 2EF2                571              BSR     PUSH_STACK
00001500                           572              
00001500  6100 2A80                573              BSR     GET_EA_EA_DEST
00001504  163C 002C                574              MOVE.B  #',',D3
00001508  6100 2EE6                575              BSR     PUSH_STACK
0000150C  6100 2644                576              BSR     GET_EA_EA_SRC
00001510                           577              
00001510  6000 0088                578              BRA     OP0000_RETURN_BTST
00001514                           579              
00001514                           580              
00001514                           581              *MOVE **** OR **** CMPI
00001514                           582              
00001514                           583  OP_BTST_IMMEDIATE              
00001514                           584   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001514  13FC 0000 00004D7A       585             MOVE.B   #$00,DEST_REGISTER_FORMAT
0000151C  13FC 0082 00004D7B       586             MOVE.B   #$82,SRC_REGISTER_FORMAT
00001524                           587             
00001524                           588             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001524  13FC 00B9 00004D7D       589             MOVE.B   #$B9,GET_DST_START_END
0000152C  13FC 0020 00004D7E       590             MOVE.B   #$20,GET_SRC_START_END
00001534                           591             
00001534                           592              *CLEAR D3
00001534  4283                     593              CLR.L   D3
00001536                           594              *LOAD STACK WITH THIS OPMODE
00001536  6100 2EB8                595              BSR     PUSH_STACK
0000153A  163C 0042                596              MOVE.B  #'B',D3
0000153E  6100 2EB0                597              BSR     PUSH_STACK
00001542  163C 0054                598              MOVE.B  #'T',D3
00001546  6100 2EA8                599              BSR     PUSH_STACK
0000154A  163C 0053                600              MOVE.B  #'S',D3
0000154E  6100 2EA0                601              BSR     PUSH_STACK
00001552  163C 0054                602              MOVE.B  #'T',D3
00001556  6100 2E98                603              BSR     PUSH_STACK
0000155A  163C 002E                604              MOVE.B  #'.',D3
0000155E  6100 2E90                605              BSR     PUSH_STACK
00001562  163C 0042                606              MOVE.B  #'B',D3
00001566  6100 2E88                607              BSR     PUSH_STACK
0000156A                           608  
0000156A                           609  OP0000_BTST_B
0000156A                           610              *GET DATA FROM ADDQ AND PRINT #0-8
0000156A                           611              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000156A  0285 0000F03F            612              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001570  0685 000001C0            613              ADDI.L  #$01C0,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
00001576                           614  
00001576                           615              *GRAB #IMMEDIATE DATA AS WORD SIZE
00001576                           616             * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
00001576                           617             * MOVE.W    (A5)+,D1
00001576                           618             * MOVE.B  #' ',D3
00001576                           619             * BSR     PUSH_STACK
00001576                           620             * MOVE.B  #'#',D3
00001576                           621             * BSR     PUSH_STACK
00001576                           622             * BSR     HEX2ASCII2STACK
00001576                           623             * BSR     PUSH_STACK
00001576                           624              
00001576  163C 0020                625              MOVE.B  #' ',D3
0000157A  6100 2E74                626              BSR     PUSH_STACK
0000157E  163C 0023                627              MOVE.B  #'#',D3
00001582  6100 2E6C                628              BSR     PUSH_STACK
00001586  6100 29FA                629              BSR     GET_EA_EA_DEST
0000158A  163C 002C                630              MOVE.B  #',',D3
0000158E  6100 2E60                631              BSR     PUSH_STACK
00001592  6100 25BE                632              BSR     GET_EA_EA_SRC
00001596  6000 0002                633              BRA     OP0000_RETURN_BTST
0000159A                           634  OP0000_RETURN_BTST
0000159A                           635              
0000159A  4E75                     636              RTS
0000159C                           637  
0000159C                           638  
0000159C                           639  *---------------------------------------------------------------------------*
0000159C                           640  * OP_EORI: decode and display EORI
0000159C                           641  *---------------------------------------------------------------------------* 
0000159C                           642  OP_EORI
0000159C                           643                         
0000159C                           644  
0000159C                           645   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000159C  13FC 0000 00004D7A       646             MOVE.B   #$00,DEST_REGISTER_FORMAT
000015A4  13FC 0080 00004D7B       647             MOVE.B   #$80,SRC_REGISTER_FORMAT
000015AC                           648             
000015AC                           649             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000015AC  13FC 00B9 00004D7D       650             MOVE.B   #$B9,GET_DST_START_END
000015B4  13FC 0020 00004D7E       651             MOVE.B   #$20,GET_SRC_START_END
000015BC                           652             
000015BC                           653              *CLEAR D3
000015BC  4283                     654              CLR.L   D3
000015BE                           655              *LOAD STACK WITH THIS OPMODE
000015BE  6100 2E30                656              BSR     PUSH_STACK
000015C2  163C 0045                657              MOVE.B  #'E',D3
000015C6  6100 2E28                658              BSR     PUSH_STACK
000015CA  163C 004F                659              MOVE.B  #'O',D3
000015CE  6100 2E20                660              BSR     PUSH_STACK
000015D2  163C 0052                661              MOVE.B  #'R',D3
000015D6  6100 2E18                662              BSR     PUSH_STACK
000015DA  163C 0049                663              MOVE.B  #'I',D3
000015DE  6100 2E10                664              BSR     PUSH_STACK
000015E2  163C 002E                665              MOVE.B  #'.',D3
000015E6  6100 2E08                666              BSR     PUSH_STACK
000015EA                           667              
000015EA                           668              *FIGURE OUT SIZE*
000015EA                           669              *00 = BYTE
000015EA                           670              *01 = WORD
000015EA                           671              *10 = LONG
000015EA                           672              * BITS 7&6
000015EA                           673              
000015EA                           674              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
000015EA  2205                     675              MOVE.L  D5,D1
000015EC  EC99                     676              ROR.L   #6,D1
000015EE  0281 00000003            677              ANDI.L  #$03,D1
000015F4  0C01 0000                678              CMPI.B  #%00,D1
000015F8  6700 001E                679              BEQ     OP0000_EOR_B
000015FC  0281 00000003            680              ANDI.L  #$03,D1
00001602  0C01 0001                681              CMPI.B  #%01,D1
00001606  6700 0028                682              BEQ     OP0000_EOR_W
0000160A  0281 00000003            683              ANDI.L  #$03,D1
00001610  0C01 0002                684              CMPI.B  #%10,D1
00001614  6700 0032                685              BEQ     OP0000_EOR_L
00001618                           686            
00001618                           687  OP0000_EOR_B
00001618                           688              
00001618  163C 0042                689              MOVE.B  #'B',D3
0000161C  6100 2DD2                690              BSR     PUSH_STACK
00001620                           691              
00001620                           692              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001620  0285 0000F03F            693              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001626  0685 000001C0            694              ADDI.L  #%000000111000000,D5   *Add.B  BITS 8-6 TO INDICATE A "(XXX).W" Register (000) 
0000162C                           695  
0000162C                           696              
0000162C  6000 002E                697              BRA     OP0000_RETURN_EOR
00001630                           698  OP0000_EOR_W
00001630                           699              
00001630  163C 0057                700              MOVE.B  #'W',D3
00001634  6100 2DBA                701              BSR     PUSH_STACK
00001638                           702              
00001638                           703              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001638  0285 0000F03F            704              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000163E  0685 000001C0            705              ADDI.L  #%0000000111000000,D5   *Add.B  BITS 8-6 TO INDICATE A "(XXX).W" Register (000) 
00001644                           706  
00001644                           707              
00001644  6000 0016                708              BRA     OP0000_RETURN_EOR
00001648                           709  OP0000_EOR_L
00001648                           710              
00001648  163C 004C                711              MOVE.B  #'L',D3
0000164C  6100 2DA2                712              BSR     PUSH_STACK
00001650                           713              
00001650                           714              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001650  0285 0000FE3F            715              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001656  0685 000009C0            716              ADDI.L  #%0000100111000000,D5   *Add.B  BITS 8-6 TO INDICATE A "(XXX).W" Register (000) 
0000165C                           717  
0000165C                           718  
0000165C                           719  OP0000_RETURN_EOR       
0000165C  163C 0020                720              MOVE.B  #' ',D3
00001660  6100 2D8E                721              BSR     PUSH_STACK
00001664  163C 0023                722              MOVE.B  #'#',D3
00001668  6100 2D86                723              BSR     PUSH_STACK
0000166C  6100 2914                724              BSR     GET_EA_EA_DEST
00001670  163C 002C                725              MOVE.B  #',',D3
00001674  6100 2D7A                726              BSR     PUSH_STACK
00001678  6100 24D8                727              BSR     GET_EA_EA_SRC
0000167C                           728              
0000167C  4E75                     729              RTS
0000167E                           730  
0000167E                           731  *---------------------------------------------------------------------------*
0000167E                           732  * OP_SUBI: decode SUBI.B/.W/.L
0000167E                           733  *---------------------------------------------------------------------------* 
0000167E                           734  OP_SUBI
0000167E                           735             
0000167E                           736   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000167E  13FC 0000 00004D7A       737             MOVE.B   #$00,DEST_REGISTER_FORMAT
00001686  13FC 0080 00004D7B       738             MOVE.B   #$80,SRC_REGISTER_FORMAT
0000168E                           739             
0000168E                           740             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000168E  13FC 00B9 00004D7D       741             MOVE.B   #$B9,GET_DST_START_END
00001696  13FC 0020 00004D7E       742             MOVE.B   #$20,GET_SRC_START_END
0000169E                           743             
0000169E                           744              *CLEAR D3
0000169E  4283                     745              CLR.L   D3
000016A0                           746              *LOAD STACK WITH THIS OPMODE
000016A0  6100 2D4E                747              BSR     PUSH_STACK
000016A4  163C 0053                748              MOVE.B  #'S',D3
000016A8  6100 2D46                749              BSR     PUSH_STACK
000016AC  163C 0055                750              MOVE.B  #'U',D3
000016B0  6100 2D3E                751              BSR     PUSH_STACK
000016B4  163C 0042                752              MOVE.B  #'B',D3
000016B8  6100 2D36                753              BSR     PUSH_STACK
000016BC  163C 0049                754              MOVE.B  #'I',D3
000016C0  6100 2D2E                755              BSR     PUSH_STACK
000016C4  163C 002E                756              MOVE.B  #'.',D3
000016C8  6100 2D26                757              BSR     PUSH_STACK
000016CC                           758              
000016CC                           759              *FIGURE OUT SIZE*
000016CC                           760              *00 = BYTE
000016CC                           761              *01 = WORD
000016CC                           762              *10 = LONG
000016CC                           763              * BITS 7&6
000016CC                           764              
000016CC                           765              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
000016CC  2205                     766              MOVE.L  D5,D1
000016CE  EC99                     767              ROR.L   #6,D1
000016D0  0281 00000003            768              ANDI.L  #$03,D1
000016D6  0C01 0000                769              CMPI.B  #%00,D1
000016DA  6700 001E                770              BEQ     OP0000_SUB_B
000016DE  0281 00000003            771              ANDI.L  #$03,D1
000016E4  0C01 0001                772              CMPI.B  #%01,D1
000016E8  6700 0028                773              BEQ     OP0000_SUB_W
000016EC  0281 00000003            774              ANDI.L  #$03,D1
000016F2  0C01 0002                775              CMPI.B  #%10,D1
000016F6  6700 0032                776              BEQ     OP0000_SUB_L
000016FA                           777            
000016FA                           778  OP0000_SUB_B
000016FA                           779              
000016FA  163C 0042                780              MOVE.B  #'B',D3
000016FE  6100 2CF0                781              BSR     PUSH_STACK
00001702                           782              
00001702                           783              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001702  0285 0000F03F            784              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001708  0685 000001C0            785              ADDI.L  #%000000111000000,D5   *Add.B  BITS 8-6 TO INDICATE A "(XXX).W" Register (000) 
0000170E                           786  
0000170E                           787              
0000170E  6000 002E                788              BRA     OP0000_RETURN_SUBI
00001712                           789  OP0000_SUB_W
00001712                           790              
00001712  163C 0057                791              MOVE.B  #'W',D3
00001716  6100 2CD8                792              BSR     PUSH_STACK
0000171A                           793              
0000171A                           794              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000171A  0285 0000F03F            795              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001720  0685 000001C0            796              ADDI.L  #%0000000111000000,D5   *Add.B  BITS 8-6 TO INDICATE A "(XXX).W" Register (000) 
00001726                           797  
00001726                           798              
00001726  6000 0016                799              BRA     OP0000_RETURN_SUBI
0000172A                           800  OP0000_SUB_L
0000172A                           801              
0000172A  163C 004C                802              MOVE.B  #'L',D3
0000172E  6100 2CC0                803              BSR     PUSH_STACK
00001732                           804              
00001732                           805              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001732  0285 0000F03F            806              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001738  0685 000003C0            807              ADDI.L  #%0000001111000000,D5   *Add.B  BITS 8-6 TO INDICATE A "(XXX).W" Register (000) 
0000173E                           808                      
0000173E                           809  OP0000_RETURN_SUBI            
0000173E  163C 0020                810              MOVE.B  #' ',D3
00001742  6100 2CAC                811              BSR     PUSH_STACK
00001746  163C 0023                812              MOVE.B  #'#',D3
0000174A  6100 2CA4                813              BSR     PUSH_STACK
0000174E  6100 2832                814              BSR     GET_EA_EA_DEST
00001752  163C 002C                815              MOVE.B  #',',D3
00001756  6100 2C98                816              BSR     PUSH_STACK
0000175A  6100 23F6                817              BSR     GET_EA_EA_SRC
0000175E                           818              
0000175E  4E75                     819              RTS
00001760                           820  
00001760                           821              
00001760                           822  *---------------------------------------------------------------------------*
00001760                           823  * OP_DATA : unidentified opcode
00001760                           824  *---------------------------------------------------------------------------* 
00001760                           825  OP_DATA
00001760  4280                     826              CLR.L   D0                   
00001762  4281                     827              CLR.L   D1     
00001764  4284                     828              CLR.L   D4                    
00001766  227C 00000000            829              MOVEA.L #0, A1             
0000176C  4287                     830              CLR.L   D7
0000176E  1E3C 0001                831              MOVE.B  #1,D7                   * error flag is true
00001772                           832              
00001772  43F9 00004AC8            833              LEA     DISP_DATA,A1
00001778  103C 000E                834              MOVE.B  #14,D0
0000177C  4E4F                     835              TRAP    #15
0000177E                           836              
0000177E  4EF9 00001784            837              JMP     EA_DATA
00001784                           838             
00001784                           839             
00001784                           840  *---------------------------------------------------------------------------*
00001784                           841  * EA_DATA
00001784                           842  *---------------------------------------------------------------------------*       
00001784  43F9 00004A19            843  EA_DATA     LEA     TMPOUTPUT,A1    * load the temporarily stored output address
0000178A  2205                     844              MOVE.L  D5,D1           * transfer the processing data to D1
0000178C  7404                     845              MOVE.L  #4,D2           * set to word size
0000178E  4EB8 122E                846              JSR     HEX2ASCII       * prepare output in ascii
00001792  43F9 00004D3B            847              LEA     DISP_HEX,A1     * display $ symbol
00001798  103C 000E                848              MOVE.B  #14,D0      
0000179C  4E4F                     849              TRAP    #15
0000179E  43F9 00004A19            850              LEA     TMPOUTPUT,A1    * display with a new line
000017A4  103C 000D                851              MOVE.B  #13,D0
000017A8  4E4F                     852              TRAP    #15
000017AA                           853  
000017AA  4E75                     854              RTS
000017AC                           855              
000017AC                           856  *---------------------------------------------------------------------------*
000017AC                           857  * OP_CMPI : decode CMPI and its size
000017AC                           858  *---------------------------------------------------------------------------*          
000017AC                           859  OP0000_CMPI
000017AC                           860  
000017AC                           861              
000017AC                           862   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000017AC  13FC 0000 00004D7A       863             MOVE.B   #$00,DEST_REGISTER_FORMAT
000017B4  13FC 0082 00004D7B       864             MOVE.B   #$82,SRC_REGISTER_FORMAT
000017BC                           865             
000017BC                           866             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000017BC  13FC 00B9 00004D7D       867             MOVE.B   #$B9,GET_DST_START_END
000017C4  13FC 0020 00004D7E       868             MOVE.B   #$20,GET_SRC_START_END
000017CC                           869             
000017CC                           870              *CLEAR D3
000017CC  4283                     871              CLR.L   D3
000017CE                           872              *LOAD STACK WITH THIS OPMODE
000017CE  6100 2C20                873              BSR     PUSH_STACK
000017D2  163C 0043                874              MOVE.B  #'C',D3
000017D6  6100 2C18                875              BSR     PUSH_STACK
000017DA  163C 004D                876              MOVE.B  #'M',D3
000017DE  6100 2C10                877              BSR     PUSH_STACK
000017E2  163C 0050                878              MOVE.B  #'P',D3
000017E6  6100 2C08                879              BSR     PUSH_STACK
000017EA  163C 0049                880              MOVE.B  #'I',D3
000017EE  6100 2C00                881              BSR     PUSH_STACK
000017F2  163C 002E                882              MOVE.B  #'.',D3
000017F6  6100 2BF8                883              BSR     PUSH_STACK
000017FA                           884              
000017FA                           885              *FIGURE OUT SIZE*
000017FA                           886              *00 = BYTE
000017FA                           887              *01 = WORD
000017FA                           888              *10 = LONG
000017FA                           889              * BITS 7&6
000017FA                           890              
000017FA                           891              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
000017FA  2205                     892              MOVE.L  D5,D1
000017FC  EC99                     893              ROR.L   #6,D1
000017FE  0281 00000003            894              ANDI.L  #$03,D1
00001804  0C01 0000                895              CMPI.B  #%00,D1
00001808  6700 0018                896              BEQ     OP0000_CMPI_B
0000180C  0C01 0001                897              CMPI.B  #%01,D1
00001810  6700 0038                898              BEQ     OP0000_CMPI_W
00001814  0281 00000003            899              ANDI.L  #$03,D1
0000181A  0C01 0002                900              CMPI.B  #%10,D1
0000181E  6700 0052                901              BEQ     OP0000_CMPI_L
00001822                           902  
00001822                           903  OP0000_CMPI_B
00001822  163C 0042                904              MOVE.B  #'B',D3
00001826  6100 2BC8                905              BSR     PUSH_STACK
0000182A                           906  *GET DATA FROM ADDQ AND PRINT #0-8
0000182A                           907              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000182A  0285 0000F03F            908              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001830  0685 000001C0            909              ADDI.L  #$01C0,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
00001836  6100 274A                910              BSR     GET_EA_EA_DEST
0000183A  163C 002C                911              MOVE.B  #',',D3
0000183E  6100 2BB0                912              BSR     PUSH_STACK
00001842  6100 230E                913              BSR     GET_EA_EA_SRC
00001846  6000 004E                914              BRA     OP0000_RETURN_CMPI
0000184A                           915  
0000184A                           916  OP0000_CMPI_W
0000184A  163C 0057                917              MOVE.B  #'W',D3
0000184E  6100 2BA0                918              BSR     PUSH_STACK
00001852                           919  *GET DATA FROM ADDQ AND PRINT #0-8
00001852                           920              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001852  0285 0000F03F            921              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001858  0685 000001C0            922              ADDI.L  #$01C0,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
0000185E  6100 2722                923              BSR     GET_EA_EA_DEST
00001862  163C 002C                924              MOVE.B  #',',D3
00001866  6100 2B88                925              BSR     PUSH_STACK
0000186A  6100 22E6                926              BSR     GET_EA_EA_SRC
0000186E  6000 0026                927              BRA     OP0000_RETURN_CMPI
00001872                           928  
00001872                           929  OP0000_CMPI_L
00001872  163C 004C                930              MOVE.B  #'L',D3
00001876  6100 2B78                931              BSR     PUSH_STACK
0000187A                           932              *GET DATA FROM ADDQ AND PRINT #0-8
0000187A                           933              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000187A  0285 0000F03F            934              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001880  0685 000003C0            935              ADDI.L  #$03C0,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
00001886  6100 26FA                936              BSR     GET_EA_EA_DEST
0000188A  163C 002C                937              MOVE.B  #',',D3
0000188E  6100 2B60                938              BSR     PUSH_STACK
00001892  6100 22BE                939              BSR     GET_EA_EA_SRC
00001896                           940              
00001896                           941  OP0000_RETURN_CMPI
00001896                           942  
00001896                           943  
00001896                           944              
00001896  4E75                     945              RTS
00001898                           946   
00001898                           947  *---------------------------------------------------------------------------*
00001898                           948  * OP_ORI : decode ORI and its size
00001898                           949  *---------------------------------------------------------------------------* 
00001898                           950  OP_ORI      
00001898                           951           
00001898                           952   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001898  13FC 0000 00004D7A       953             MOVE.B   #$00,DEST_REGISTER_FORMAT
000018A0  13FC 0082 00004D7B       954             MOVE.B   #$82,SRC_REGISTER_FORMAT
000018A8                           955             
000018A8                           956             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000018A8  13FC 00B9 00004D7D       957             MOVE.B   #$B9,GET_DST_START_END
000018B0  13FC 0020 00004D7E       958             MOVE.B   #$20,GET_SRC_START_END
000018B8                           959             
000018B8                           960              *CLEAR D3
000018B8  4283                     961              CLR.L   D3
000018BA                           962              *LOAD STACK WITH THIS OPMODE
000018BA  6100 2B34                963              BSR     PUSH_STACK
000018BE  163C 004F                964              MOVE.B  #'O',D3
000018C2  6100 2B2C                965              BSR     PUSH_STACK
000018C6  163C 0052                966              MOVE.B  #'R',D3
000018CA  6100 2B24                967              BSR     PUSH_STACK
000018CE  163C 0049                968              MOVE.B  #'I',D3
000018D2  6100 2B1C                969              BSR     PUSH_STACK
000018D6  163C 002E                970              MOVE.B  #'.',D3
000018DA  6100 2B14                971              BSR     PUSH_STACK
000018DE                           972              
000018DE                           973              *FIGURE OUT SIZE*
000018DE                           974              *00 = BYTE
000018DE                           975              *01 = WORD
000018DE                           976              *10 = LONG
000018DE                           977              * BITS 7&6
000018DE                           978              
000018DE                           979              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
000018DE  2205                     980              MOVE.L  D5,D1
000018E0  EC99                     981              ROR.L   #6,D1
000018E2  0281 00000003            982              ANDI.L  #$03,D1
000018E8  0C01 0000                983              CMPI.B  #%00,D1
000018EC  6700 0018                984              BEQ     OP0000_ORI_B
000018F0  0C01 0001                985              CMPI.B  #%01,D1
000018F4  6700 0038                986              BEQ     OP0000_ORI_W
000018F8  0281 00000003            987              ANDI.L  #$03,D1
000018FE  0C01 0002                988              CMPI.B  #%10,D1
00001902  6700 0052                989              BEQ     OP0000_ORI_L
00001906                           990  
00001906                           991  OP0000_ORI_B
00001906  163C 0042                992              MOVE.B  #'B',D3
0000190A  6100 2AE4                993              BSR     PUSH_STACK
0000190E                           994  *GET DATA FROM ADDQ AND PRINT #0-8
0000190E                           995              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000190E  0285 0000F03F            996              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001914  0685 000001C0            997              ADDI.L  #$01C0,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
0000191A  6100 2666                998              BSR     GET_EA_EA_DEST
0000191E  163C 002C                999              MOVE.B  #',',D3
00001922  6100 2ACC               1000              BSR     PUSH_STACK
00001926  6100 222A               1001              BSR     GET_EA_EA_SRC
0000192A  6000 004E               1002              BRA     OP0000_RETURN_ORI
0000192E                          1003  
0000192E                          1004  OP0000_ORI_W
0000192E  163C 0057               1005              MOVE.B  #'W',D3
00001932  6100 2ABC               1006              BSR     PUSH_STACK
00001936                          1007  *GET DATA FROM ADDQ AND PRINT #0-8
00001936                          1008              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001936  0285 0000F03F           1009              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000193C  0685 000001C0           1010              ADDI.L  #$01C0,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
00001942  6100 263E               1011              BSR     GET_EA_EA_DEST
00001946  163C 002C               1012              MOVE.B  #',',D3
0000194A  6100 2AA4               1013              BSR     PUSH_STACK
0000194E  6100 2202               1014              BSR     GET_EA_EA_SRC
00001952  6000 0026               1015              BRA     OP0000_RETURN_ORI
00001956                          1016  
00001956                          1017  OP0000_ORI_L
00001956  163C 004C               1018              MOVE.B  #'L',D3
0000195A  6100 2A94               1019              BSR     PUSH_STACK
0000195E                          1020              *GET DATA FROM ADDQ AND PRINT #0-8
0000195E                          1021              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000195E  0285 0000F03F           1022              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001964  0685 000003C0           1023              ADDI.L  #$03C0,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
0000196A  6100 2616               1024              BSR     GET_EA_EA_DEST
0000196E  163C 002C               1025              MOVE.B  #',',D3
00001972  6100 2A7C               1026              BSR     PUSH_STACK
00001976  6100 21DA               1027              BSR     GET_EA_EA_SRC
0000197A                          1028              
0000197A                          1029  OP0000_RETURN_ORI
0000197A                          1030  
0000197A                          1031  
0000197A                          1032              
0000197A  4E75                    1033              RTS
0000197C                          1034  
0000197C                          1035          
0000197C                          1036  *---------------------------------------------------------------------------*
0000197C                          1037  * OP0001: MOVE.B
0000197C                          1038  *---------------------------------------------------------------------------*
0000197C                          1039  OP0001      
0000197C  4EF9 00001982           1040              JMP     OP_MOVE_B   * display MOVE.B
00001982                          1041              
00001982                          1042  *---------------------------------------------------------------------------*
00001982                          1043  * OP_MOVE_B: display MOVE_B and proceed to EA
00001982                          1044  *---------------------------------------------------------------------------*
00001982                          1045  OP_MOVE_B                                                                       
00001982                          1046             
00001982                          1047             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001982  13FC 0082 00004D7A      1048             MOVE.B   #$82,DEST_REGISTER_FORMAT
0000198A  13FC 0000 00004D7B      1049             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001992                          1050             
00001992                          1051             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001992  13FC 00B9 00004D7D      1052             MOVE.B   #$B9,GET_DST_START_END
0000199A  13FC 0020 00004D7E      1053             MOVE.B   #$20,GET_SRC_START_END
000019A2                          1054             
000019A2                          1055              *CLEAR D3
000019A2  4283                    1056              CLR.L   D3
000019A4                          1057              *LOAD STACK WITH THIS OPMODE
000019A4  6100 2A4A               1058              BSR     PUSH_STACK
000019A8  163C 004D               1059              MOVE.B  #'M',D3
000019AC  6100 2A42               1060              BSR     PUSH_STACK
000019B0  163C 004F               1061              MOVE.B  #'O',D3
000019B4  6100 2A3A               1062              BSR     PUSH_STACK
000019B8  163C 0056               1063              MOVE.B  #'V',D3
000019BC  6100 2A32               1064              BSR     PUSH_STACK
000019C0  163C 0045               1065              MOVE.B  #'E',D3
000019C4  6100 2A2A               1066              BSR     PUSH_STACK
000019C8  163C 002E               1067              MOVE.B  #'.',D3
000019CC  6100 2A22               1068              BSR     PUSH_STACK
000019D0  163C 0042               1069              MOVE.B  #'B',D3
000019D4  6100 2A1A               1070              BSR     PUSH_STACK
000019D8                          1071              
000019D8  6100 2178               1072              BSR     GET_EA_EA_SRC
000019DC  163C 002C               1073              MOVE.B  #',',D3
000019E0  6100 2A0E               1074              BSR     PUSH_STACK
000019E4  6100 259C               1075              BSR     GET_EA_EA_DEST
000019E8                          1076              
000019E8  4E75                    1077              RTS
000019EA                          1078              
000019EA                          1079             
000019EA                          1080  *---------------------------------------------------------------------------*
000019EA                          1081  * OP0010: decode MOVE.L/MOVEA.L
000019EA                          1082  *---------------------------------------------------------------------------*
000019EA                          1083  OP0010      
000019EA  183C 0002               1084              MOVE.B  #2,D4
000019EE  4280                    1085              CLR.L   D0                     
000019F0  4281                    1086              CLR.L   D1                      
000019F2  227C 00000000           1087              MOVEA.L #0, A1                 
000019F8                          1088              
000019F8  2205                    1089              MOVE.L  D5,D1
000019FA  EA99                    1090              ROR.L   #5,D1
000019FC  0281 0000000E           1091              ANDI.L  #$E,D1
00001A02  0C01 0002               1092              CMPI.B  #2,D1
00001A06  6700 0070               1093              BEQ     OP_MOVEA_L
00001A0A                          1094  
00001A0A  4EF9 00001A10           1095              JMP     OP_MOVE_L
00001A10                          1096             
00001A10                          1097  
00001A10                          1098  *---------------------------------------------------------------------------*
00001A10                          1099  * OP_MOVE_L: display MOVE_L and proceed to EA
00001A10                          1100  *---------------------------------------------------------------------------*
00001A10                          1101  OP_MOVE_L   
00001A10                          1102             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001A10  13FC 0082 00004D7A      1103             MOVE.B   #$82,DEST_REGISTER_FORMAT
00001A18  13FC 0000 00004D7B      1104             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001A20                          1105             
00001A20                          1106             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001A20  13FC 00B9 00004D7D      1107             MOVE.B   #$B9,GET_DST_START_END
00001A28  13FC 0020 00004D7E      1108             MOVE.B   #$20,GET_SRC_START_END
00001A30                          1109             
00001A30                          1110              *CLEAR D3
00001A30  4283                    1111              CLR.L   D3
00001A32                          1112              *LOAD STACK WITH THIS OPMODE
00001A32  6100 29BC               1113              BSR     PUSH_STACK
00001A36  163C 004D               1114              MOVE.B  #'M',D3
00001A3A  6100 29B4               1115              BSR     PUSH_STACK
00001A3E  163C 004F               1116              MOVE.B  #'O',D3
00001A42  6100 29AC               1117              BSR     PUSH_STACK
00001A46  163C 0056               1118              MOVE.B  #'V',D3
00001A4A  6100 29A4               1119              BSR     PUSH_STACK
00001A4E  163C 0045               1120              MOVE.B  #'E',D3
00001A52  6100 299C               1121              BSR     PUSH_STACK
00001A56  163C 002E               1122              MOVE.B  #'.',D3
00001A5A  6100 2994               1123              BSR     PUSH_STACK
00001A5E  163C 004C               1124              MOVE.B  #'L',D3
00001A62  6100 298C               1125              BSR     PUSH_STACK
00001A66                          1126              
00001A66  6100 20EA               1127              BSR     GET_EA_EA_SRC
00001A6A  163C 002C               1128              MOVE.B  #',',D3
00001A6E  6100 2980               1129              BSR     PUSH_STACK
00001A72  6100 250E               1130              BSR     GET_EA_EA_DEST
00001A76                          1131              
00001A76  4E75                    1132              RTS
00001A78                          1133  
00001A78                          1134  
00001A78                          1135  *---------------------------------------------------------------------------*
00001A78                          1136  * OP_MOVEA_L: display MOVEA_L and proceed to EA
00001A78                          1137  *---------------------------------------------------------------------------*
00001A78                          1138  OP_MOVEA_L 
00001A78                          1139             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001A78  13FC 00FD 00004D7A      1140             MOVE.B   #$FD,DEST_REGISTER_FORMAT
00001A80  13FC 0000 00004D7B      1141             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001A88                          1142             
00001A88                          1143             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001A88  13FC 00B9 00004D7D      1144             MOVE.B   #$B9,GET_DST_START_END
00001A90  13FC 0020 00004D7E      1145             MOVE.B   #$20,GET_SRC_START_END
00001A98                          1146             
00001A98                          1147              *CLEAR D3
00001A98  4283                    1148              CLR.L   D3
00001A9A                          1149              *LOAD STACK WITH THIS OPMODE
00001A9A  6100 2954               1150              BSR     PUSH_STACK
00001A9E  163C 004D               1151              MOVE.B  #'M',D3
00001AA2  6100 294C               1152              BSR     PUSH_STACK
00001AA6  163C 004F               1153              MOVE.B  #'O',D3
00001AAA  6100 2944               1154              BSR     PUSH_STACK
00001AAE  163C 0056               1155              MOVE.B  #'V',D3
00001AB2  6100 293C               1156              BSR     PUSH_STACK
00001AB6  163C 0045               1157              MOVE.B  #'E',D3
00001ABA  6100 2934               1158              BSR     PUSH_STACK           
00001ABE  163C 0041               1159              MOVE.B  #'A',D3
00001AC2  6100 292C               1160              BSR     PUSH_STACK
00001AC6  163C 002E               1161              MOVE.B  #'.',D3
00001ACA  6100 2924               1162              BSR     PUSH_STACK
00001ACE  163C 004C               1163              MOVE.B  #'L',D3
00001AD2  6100 291C               1164              BSR     PUSH_STACK
00001AD6                          1165              
00001AD6  6100 207A               1166              BSR     GET_EA_EA_SRC
00001ADA  163C 002C               1167              MOVE.B  #',',D3
00001ADE  6100 2910               1168              BSR     PUSH_STACK
00001AE2  6100 249E               1169              BSR     GET_EA_EA_DEST
00001AE6                          1170              
00001AE6  4E75                    1171              RTS
00001AE8                          1172  
00001AE8                          1173              
00001AE8                          1174  *---------------------------------------------------------------------------*
00001AE8                          1175  * OP0011: decode MOVE.W/MOVEA.W
00001AE8                          1176  *---------------------------------------------------------------------------*
00001AE8                          1177  OP0011      
00001AE8  4280                    1178              CLR.L   D0                      
00001AEA  4281                    1179              CLR.L   D1  
00001AEC  4284                    1180              CLR.L   D4                   
00001AEE  227C 00000000           1181              MOVEA.L #0, A1 
00001AF4                          1182                
00001AF4  2205                    1183              MOVE.L  D5,D1
00001AF6  EC99                    1184              ROR.L   #6,D1
00001AF8  0281 00000007           1185              ANDI.L  #$07,D1
00001AFE  0C01 0001               1186              CMPI.B  #1,D1
00001B02  6700 0070               1187              BEQ     OP_MOVEA_W
00001B06                          1188              
00001B06  4EF9 00001B0C           1189              JMP     OP_MOVE_W
00001B0C                          1190            
00001B0C                          1191  *---------------------------------------------------------------------------*
00001B0C                          1192  * OP_MOVE_W: display MOVE_W and proceed to EA
00001B0C                          1193  *---------------------------------------------------------------------------*
00001B0C                          1194  OP_MOVE_W   
00001B0C                          1195             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001B0C  13FC 0082 00004D7A      1196             MOVE.B   #$82,DEST_REGISTER_FORMAT
00001B14  13FC 0000 00004D7B      1197             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001B1C                          1198             
00001B1C                          1199             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001B1C  13FC 00B9 00004D7D      1200             MOVE.B   #$B9,GET_DST_START_END
00001B24  13FC 0020 00004D7E      1201             MOVE.B   #$20,GET_SRC_START_END
00001B2C                          1202             
00001B2C                          1203              *CLEAR D3
00001B2C  4283                    1204              CLR.L   D3
00001B2E                          1205              *LOAD STACK WITH THIS OPMODE
00001B2E  6100 28C0               1206              BSR     PUSH_STACK
00001B32  163C 004D               1207              MOVE.B  #'M',D3
00001B36  6100 28B8               1208              BSR     PUSH_STACK
00001B3A  163C 004F               1209              MOVE.B  #'O',D3
00001B3E  6100 28B0               1210              BSR     PUSH_STACK
00001B42  163C 0056               1211              MOVE.B  #'V',D3
00001B46  6100 28A8               1212              BSR     PUSH_STACK
00001B4A  163C 0045               1213              MOVE.B  #'E',D3
00001B4E  6100 28A0               1214              BSR     PUSH_STACK
00001B52  163C 002E               1215              MOVE.B  #'.',D3
00001B56  6100 2898               1216              BSR     PUSH_STACK
00001B5A  163C 0057               1217              MOVE.B  #'W',D3
00001B5E  6100 2890               1218              BSR     PUSH_STACK
00001B62                          1219              
00001B62  6100 1FEE               1220              BSR     GET_EA_EA_SRC
00001B66  163C 002C               1221              MOVE.B  #',',D3
00001B6A  6100 2884               1222              BSR     PUSH_STACK
00001B6E  6100 2412               1223              BSR     GET_EA_EA_DEST
00001B72                          1224              
00001B72  4E75                    1225              RTS
00001B74                          1226  
00001B74                          1227  *---------------------------------------------------------------------------*
00001B74                          1228  * OP_MOVEA_W: display MOVEA and proceed to EA
00001B74                          1229  *---------------------------------------------------------------------------*
00001B74                          1230  OP_MOVEA_W 
00001B74                          1231             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001B74  13FC 00FD 00004D7A      1232             MOVE.B   #$FD,DEST_REGISTER_FORMAT
00001B7C  13FC 0000 00004D7B      1233             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001B84                          1234             
00001B84                          1235             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001B84  13FC 00B9 00004D7D      1236             MOVE.B   #$B9,GET_DST_START_END
00001B8C  13FC 0020 00004D7E      1237             MOVE.B   #$20,GET_SRC_START_END
00001B94                          1238             
00001B94                          1239              *CLEAR D3
00001B94  4283                    1240              CLR.L   D3
00001B96                          1241              *LOAD STACK WITH THIS OPMODE
00001B96  6100 2858               1242              BSR     PUSH_STACK
00001B9A  163C 004D               1243              MOVE.B  #'M',D3
00001B9E  6100 2850               1244              BSR     PUSH_STACK
00001BA2  163C 004F               1245              MOVE.B  #'O',D3
00001BA6  6100 2848               1246              BSR     PUSH_STACK
00001BAA  163C 0056               1247              MOVE.B  #'V',D3
00001BAE  6100 2840               1248              BSR     PUSH_STACK
00001BB2  163C 0045               1249              MOVE.B  #'E',D3
00001BB6  6100 2838               1250              BSR     PUSH_STACK           
00001BBA  163C 0041               1251              MOVE.B  #'A',D3
00001BBE  6100 2830               1252              BSR     PUSH_STACK
00001BC2  163C 002E               1253              MOVE.B  #'.',D3
00001BC6  6100 2828               1254              BSR     PUSH_STACK
00001BCA  163C 0057               1255              MOVE.B  #'W',D3
00001BCE  6100 2820               1256              BSR     PUSH_STACK
00001BD2                          1257              
00001BD2  6100 1F7E               1258              BSR     GET_EA_EA_SRC
00001BD6  163C 002C               1259              MOVE.B  #',',D3
00001BDA  6100 2814               1260              BSR     PUSH_STACK
00001BDE  6100 23A2               1261              BSR     GET_EA_EA_DEST
00001BE2                          1262            
00001BE2  4E75                    1263              RTS
00001BE4                          1264  *---------------------------------------------------------------------------*
00001BE4                          1265  * OP0100: decode MOVEM/LEA/NEG/JSR/RTS/NOT
00001BE4                          1266  *---------------------------------------------------------------------------*
00001BE4                          1267  OP0100
00001BE4  4280                    1268              CLR.L   D0                      
00001BE6  4281                    1269              CLR.L   D1  
00001BE8  4284                    1270              CLR.L   D4                      
00001BEA  227C 00000000           1271              MOVEA.L #0, A1                  
00001BF0  2205                    1272              MOVE.L  D5,D1  
00001BF2                          1273              
00001BF2                          1274              * check for RTS
00001BF2  0C41 4E75               1275              CMPI.W  #$4E75,D1   * 0100 1110 0111 0101
00001BF6  6700 0228               1276              BEQ     OP_RTS
00001BFA                          1277              
00001BFA                          1278              * check for JSR     * 0100 1110 10 xxx (ea mode) xxx (ea reg)
00001BFA  4281                    1279              CLR.L   D1 
00001BFC  2205                    1280              MOVE.L  D5,D1  
00001BFE  0241 0F00               1281              ANDI.W  #$0F00,D1
00001C02  0C41 0E00               1282              CMPI.W  #$0E00,D1
00001C06  6700 0204               1283              BEQ     OP_JSR
00001C0A                          1284  
00001C0A                          1285              * check for NEG     * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
00001C0A  4281                    1286              CLR.L   D1 
00001C0C  2205                    1287              MOVE.L  D5,D1  
00001C0E  0241 0F00               1288              ANDI.W  #$0F00,D1
00001C12  0C41 0400               1289              CMPI.W  #$0400,D1
00001C16  6700 00E8               1290              BEQ     OP_NEG
00001C1A                          1291              
00001C1A                          1292              * check for NOT     * 0100 0110 xx (size) xxx (ea mode) xxx (ea reg)
00001C1A  4281                    1293              CLR.L   D1 
00001C1C  2205                    1294              MOVE.L  D5,D1  
00001C1E  0241 0F00               1295              ANDI.W  #$0F00,D1
00001C22  0C41 0600               1296              CMPI.W  #$0600,D1
00001C26  6700 015E               1297              BEQ     OP_NOT
00001C2A                          1298              
00001C2A                          1299              * check for LEA     * 0100 xxx (reg) 111 xxx (ea mode) xxx (ea reg)
00001C2A  4281                    1300              CLR.L   D1 
00001C2C  2205                    1301              MOVE.L  D5,D1  
00001C2E  EC99                    1302              ROR.L   #6,D1
00001C30  0281 00000007           1303              ANDI.L  #7,D1
00001C36  0C81 00000007           1304              CMPI.L  #7,D1
00001C3C  6700 0054               1305              BEQ     OP_LEA
00001C40                          1306              
00001C40                          1307              * check for MOVEM   * 0100 1 x 001 x (size) xxx (ea mode) xxx (ea reg)
00001C40  4281                    1308              CLR.L   D1 
00001C42  2205                    1309              MOVE.L  D5,D1  
00001C44  EB59                    1310              ROL.W   #5,D1
00001C46  0C01 0001               1311              CMPI.B  #1,D1
00001C4A  6600 FB14               1312              BNE     OP_DATA
00001C4E  E959                    1313              ROL.W   #4,D1
00001C50  0C01 0001               1314              CMPI.B  #1,D1
00001C54  6600 FB0A               1315              BNE     OP_DATA
00001C58  E359                    1316              ROL.W   #1,D1
00001C5A  0C01 0000               1317              CMPI.B  #0,D1
00001C5E  6700 000E               1318              BEQ     OP_MOVEM_W
00001C62  0C01 0001               1319              CMPI.B  #1,D1
00001C66  6700 0018               1320              BEQ     OP_MOVEM_L
00001C6A  4EF8 1760               1321              JMP     OP_DATA
00001C6E                          1322  
00001C6E                          1323  *---------------------------------------------------------------------------*
00001C6E                          1324  * OP_MOVEM_W: display MOVEM_W
00001C6E                          1325  *---------------------------------------------------------------------------*    
00001C6E                          1326  OP_MOVEM_W  
00001C6E  183C 0001               1327              MOVE.B  #1,D4
00001C72  43F9 00004B39           1328              LEA     DISP_MOVEM_W,A1
00001C78  103C 000E               1329              MOVE.B  #14,D0
00001C7C  4E4F                    1330              TRAP    #15
00001C7E  4E75                    1331              RTS
00001C80                          1332  
00001C80                          1333  *---------------------------------------------------------------------------*
00001C80                          1334  * OP_MOVEM_L: display MOVEM_L
00001C80                          1335  *---------------------------------------------------------------------------*
00001C80                          1336  OP_MOVEM_L  
00001C80  183C 0002               1337              MOVE.B  #2,D4
00001C84  43F9 00004B44           1338              LEA     DISP_MOVEM_L,A1
00001C8A  103C 000E               1339              MOVE.B  #14,D0
00001C8E  4E4F                    1340              TRAP    #15
00001C90  4E75                    1341              RTS
00001C92                          1342     
00001C92                          1343  *---------------------------------------------------------------------------*
00001C92                          1344  * OP_LEA: decode and display LEA
00001C92                          1345  *---------------------------------------------------------------------------*
00001C92                          1346  OP_LEA      
00001C92  4281                    1347               CLR.L   D1       
00001C94  4284                    1348              CLR.L   D4                   
00001C96  227C 00000000           1349              MOVEA.L #0, A1              
00001C9C  2205                    1350              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
00001C9E                          1351              *CLEAR D3
00001C9E  4283                    1352              CLR.L   D3
00001CA0                          1353  
00001CA0                          1354  OP_LEA_DN_EA_OR_EA_DN 
00001CA0                          1355              *LOAD STACK WITH THIS OPMODE
00001CA0  6100 274E               1356              BSR     PUSH_STACK
00001CA4  163C 004C               1357              MOVE.B  #'L',D3
00001CA8  6100 2746               1358              BSR     PUSH_STACK
00001CAC  163C 0045               1359              MOVE.B  #'E',D3
00001CB0  6100 273E               1360              BSR     PUSH_STACK
00001CB4  163C 0041               1361              MOVE.B  #'A',D3
00001CB8  6100 2736               1362              BSR     PUSH_STACK
00001CBC  2205                    1363              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00001CBE                          1364          
00001CBE                          1365  
00001CBE                          1366  OP_PRINT_L_LEA
00001CBE                          1367                          
00001CBE                          1368              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001CBE  13FC 0000 00004D7A      1369              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001CC6  13FC 009B 00004D7B      1370              MOVE.B   #$9B,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001CCE                          1371             
00001CCE                          1372              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001CCE  13FC 00B9 00004D7D      1373              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001CD6  13FC 0020 00004D7E      1374              MOVE.B   #$20,GET_SRC_START_END
00001CDE                          1375  
00001CDE                          1376              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001CDE  0285 0000FE3F           1377              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001CE4  0685 00000040           1378              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00001CEA                          1379  
00001CEA  6100 1E66               1380              BSR     GET_EA_EA_SRC      *GETS <ea>
00001CEE  163C 002C               1381              MOVE.B  #',',D3
00001CF2  6100 26FC               1382              BSR     PUSH_STACK           
00001CF6  6100 228A               1383              BSR     GET_EA_EA_DEST       *GETS Dn    
00001CFA                          1384  
00001CFA                          1385              
00001CFA  6000 0002               1386              BRA     OP_LEA_RETURN
00001CFE                          1387              
00001CFE                          1388  OP_LEA_RETURN
00001CFE  4E75                    1389              RTS
00001D00                          1390              
00001D00                          1391  
00001D00                          1392  
00001D00                          1393  *---------------------------------------------------------------------------*
00001D00                          1394  * OP_NEG: decode and display NEG 
00001D00                          1395  *---------------------------------------------------------------------------*
00001D00                          1396  OP_NEG      * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
00001D00  4281                    1397              CLR.L   D1
00001D02  4284                    1398              CLR.L   D4
00001D04  2205                    1399              MOVE.L  D5,D1
00001D06                          1400              
00001D06                          1401              *CLEAR D3
00001D06  4283                    1402              CLR.L   D3
00001D08                          1403              *LOAD STACK WITH THIS OPMODE
00001D08  6100 26E6               1404              BSR     PUSH_STACK
00001D0C  163C 004E               1405              MOVE.B  #'N',D3
00001D10  6100 26DE               1406              BSR     PUSH_STACK
00001D14  163C 0045               1407              MOVE.B  #'E',D3
00001D18  6100 26D6               1408              BSR     PUSH_STACK
00001D1C  163C 0047               1409              MOVE.B  #'G',D3
00001D20  6100 26CE               1410              BSR     PUSH_STACK
00001D24  163C 002E               1411              MOVE.B  #'.',D3
00001D28  6100 26C6               1412              BSR     PUSH_STACK
00001D2C                          1413              
00001D2C                          1414              
00001D2C  EC99                    1415              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001D2E  0281 00000007           1416              ANDI.L  #$07,D1
00001D34                          1417              
00001D34  0C01 0000               1418              CMPI.B  #0,D1
00001D38  6700 0012               1419              BEQ     OP_NEG_B    * size is byte
00001D3C  0C01 0001               1420              CMPI.B  #1,D1
00001D40  6700 0016               1421              BEQ     OP_NEG_W    * size is word
00001D44  0C01 0002               1422              CMPI.B  #2,D1
00001D48  6700 001A               1423              BEQ     OP_NEG_L    * size is long
00001D4C                          1424                         
00001D4C                          1425  
00001D4C                          1426  OP_NEG_B    * size is byte   
00001D4C  163C 0042               1427              MOVE.B  #'B',D3
00001D50  6100 269E               1428              BSR     PUSH_STACK
00001D54  6000 001A               1429              BRA     OP_NEG_PRINT_EA
00001D58                          1430  
00001D58                          1431              
00001D58                          1432  OP_NEG_W    * size is word
00001D58  163C 0057               1433              MOVE.B  #'W',D3
00001D5C  6100 2692               1434              BSR     PUSH_STACK
00001D60  6000 000E               1435              BRA     OP_NEG_PRINT_EA
00001D64                          1436  
00001D64                          1437              
00001D64                          1438  OP_NEG_L    * size is long
00001D64  163C 004C               1439              MOVE.B  #'L',D3
00001D68  6100 2686               1440              BSR     PUSH_STACK
00001D6C  6000 0002               1441              BRA     OP_NEG_PRINT_EA
00001D70                          1442  
00001D70                          1443  
00001D70                          1444  OP_NEG_PRINT_EA
00001D70                          1445   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001D70  13FC 0082 00004D7B      1446             MOVE.B   #$82,SRC_REGISTER_FORMAT
00001D78                          1447             
00001D78                          1448             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001D78  13FC 0020 00004D7E      1449             MOVE.B   #$20,GET_SRC_START_END
00001D80                          1450                         
00001D80                          1451  
00001D80  6100 1DD0               1452              BSR     GET_EA_EA_SRC
00001D84                          1453              
00001D84  4E75                    1454              RTS
00001D86                          1455  
00001D86                          1456  *---------------------------------------------------------------------------*
00001D86                          1457  * OP_NOT: decode and display NOT 
00001D86                          1458  *---------------------------------------------------------------------------*
00001D86                          1459  OP_NOT
00001D86  4281                    1460              CLR.L   D1
00001D88  4284                    1461              CLR.L   D4
00001D8A  2205                    1462              MOVE.L  D5,D1
00001D8C                          1463              
00001D8C                          1464              *CLEAR D3
00001D8C  4283                    1465              CLR.L   D3
00001D8E                          1466              *LOAD STACK WITH THIS OPMODE
00001D8E  6100 2660               1467              BSR     PUSH_STACK
00001D92  163C 004E               1468              MOVE.B  #'N',D3
00001D96  6100 2658               1469              BSR     PUSH_STACK
00001D9A  163C 004F               1470              MOVE.B  #'O',D3
00001D9E  6100 2650               1471              BSR     PUSH_STACK
00001DA2  163C 0054               1472              MOVE.B  #'T',D3
00001DA6  6100 2648               1473              BSR     PUSH_STACK
00001DAA  163C 002E               1474              MOVE.B  #'.',D3
00001DAE  6100 2640               1475              BSR     PUSH_STACK
00001DB2                          1476              
00001DB2                          1477              
00001DB2  EC99                    1478              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001DB4  0281 00000007           1479              ANDI.L  #$07,D1
00001DBA                          1480              
00001DBA  0C01 0000               1481              CMPI.B  #0,D1
00001DBE  6700 0012               1482              BEQ     OP_NOT_B    * size is byte
00001DC2  0C01 0001               1483              CMPI.B  #1,D1
00001DC6  6700 0016               1484              BEQ     OP_NOT_W    * size is word
00001DCA  0C01 0002               1485              CMPI.B  #2,D1
00001DCE  6700 001A               1486              BEQ     OP_NOT_L    * size is long
00001DD2                          1487                         
00001DD2                          1488  
00001DD2                          1489  OP_NOT_B    * size is byte   
00001DD2  163C 0042               1490              MOVE.B  #'B',D3
00001DD6  6100 2618               1491              BSR     PUSH_STACK
00001DDA  6000 001A               1492              BRA     OP_NOT_PRINT_EA
00001DDE                          1493  
00001DDE                          1494              
00001DDE                          1495  OP_NOT_W    * size is word
00001DDE  163C 0057               1496              MOVE.B  #'W',D3
00001DE2  6100 260C               1497              BSR     PUSH_STACK
00001DE6  6000 000E               1498              BRA     OP_NOT_PRINT_EA
00001DEA                          1499  
00001DEA                          1500              
00001DEA                          1501  OP_NOT_L    * size is long
00001DEA  163C 004C               1502              MOVE.B  #'L',D3
00001DEE  6100 2600               1503              BSR     PUSH_STACK
00001DF2  6000 0002               1504              BRA     OP_NOT_PRINT_EA
00001DF6                          1505  
00001DF6                          1506  
00001DF6                          1507  OP_NOT_PRINT_EA
00001DF6                          1508   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001DF6  13FC 0082 00004D7B      1509             MOVE.B   #$82,SRC_REGISTER_FORMAT
00001DFE                          1510             
00001DFE                          1511             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001DFE  13FC 0020 00004D7E      1512             MOVE.B   #$20,GET_SRC_START_END
00001E06  6100 1D4A               1513              BSR     GET_EA_EA_SRC
00001E0A                          1514              
00001E0A  4E75                    1515              RTS
00001E0C                          1516  
00001E0C                          1517  
00001E0C                          1518  *---------------------------------------------------------------------------*
00001E0C                          1519  * OP_JSR: display JSR     
00001E0C                          1520  *---------------------------------------------------------------------------*
00001E0C  43F9 00004AF5           1521  OP_JSR      LEA     DISP_JSR,A1
00001E12  103C 000E               1522              MOVE.B  #14,D0
00001E16  4E4F                    1523              TRAP    #15
00001E18  4EB9 000036A2           1524              JSR     EA_NOSRC
00001E1E                          1525  
00001E1E  4E75                    1526              RTS
00001E20                          1527  
00001E20                          1528  *---------------------------------------------------------------------------*
00001E20                          1529  * OP_RTS: display RTS     
00001E20                          1530  *---------------------------------------------------------------------------* 
00001E20                          1531  OP_RTS      
00001E20  163C 0052               1532              MOVE.B #'R',D3
00001E24  6100 25CA               1533              BSR     PUSH_STACK
00001E28  163C 0054               1534              MOVE.B #'T',D3
00001E2C  6100 25C2               1535              BSR     PUSH_STACK
00001E30  163C 0053               1536              MOVE.B #'S',D3
00001E34  6100 25BA               1537              BSR     PUSH_STACK
00001E38  4E75                    1538              RTS
00001E3A                          1539  
00001E3A                          1540  *---------------------------------------------------------------------------*
00001E3A                          1541  * OP0101: decode ADDQ
00001E3A                          1542  *---------------------------------------------------------------------------* 
00001E3A                          1543  OP0101      
00001E3A                          1544             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001E3A  13FC 0082 00004D7A      1545             MOVE.B   #$82,DEST_REGISTER_FORMAT
00001E42  13FC 0080 00004D7B      1546             MOVE.B   #$80,SRC_REGISTER_FORMAT
00001E4A                          1547             
00001E4A                          1548             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001E4A  13FC 00B9 00004D7D      1549             MOVE.B   #$B9,GET_DST_START_END
00001E52  13FC 0020 00004D7E      1550             MOVE.B   #$20,GET_SRC_START_END
00001E5A                          1551             
00001E5A                          1552              *CLEAR D3
00001E5A  4283                    1553              CLR.L   D3
00001E5C                          1554              *LOAD STACK WITH THIS OPMODE
00001E5C  6100 2592               1555              BSR     PUSH_STACK
00001E60  163C 0041               1556              MOVE.B  #'A',D3
00001E64  6100 258A               1557              BSR     PUSH_STACK
00001E68  163C 0044               1558              MOVE.B  #'D',D3
00001E6C  6100 2582               1559              BSR     PUSH_STACK
00001E70  163C 0044               1560              MOVE.B  #'D',D3
00001E74  6100 257A               1561              BSR     PUSH_STACK
00001E78  163C 0051               1562              MOVE.B  #'Q',D3
00001E7C  6100 2572               1563              BSR     PUSH_STACK
00001E80  163C 002E               1564              MOVE.B  #'.',D3
00001E84  6100 256A               1565              BSR     PUSH_STACK
00001E88                          1566              
00001E88                          1567              *FIGURE OUT SIZE*
00001E88                          1568              *00 = BYTE
00001E88                          1569              *01 = WORD
00001E88                          1570              *10 = LONG
00001E88                          1571              * BITS 7&6
00001E88                          1572              
00001E88                          1573              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
00001E88  2205                    1574              MOVE.L  D5,D1
00001E8A  EC99                    1575              ROR.L   #6,D1
00001E8C  0281 00000003           1576              ANDI.L  #$03,D1
00001E92  0C01 0000               1577              CMPI.B  #%00,D1
00001E96  6700 001E               1578              BEQ     OP0101_ADDQ_B
00001E9A  0281 00000003           1579              ANDI.L  #$03,D1
00001EA0  0C01 0001               1580              CMPI.B  #%01,D1
00001EA4  6700 001C               1581              BEQ     OP0101_ADDQ_W
00001EA8  0281 00000003           1582              ANDI.L  #$03,D1
00001EAE  0C01 0002               1583              CMPI.B  #%10,D1
00001EB2  6700 001A               1584              BEQ     OP0101_ADDQ_L
00001EB6                          1585            
00001EB6                          1586  OP0101_ADDQ_B
00001EB6                          1587              
00001EB6  163C 0042               1588              MOVE.B  #'B',D3
00001EBA  6100 2534               1589              BSR     PUSH_STACK
00001EBE  6000 0016               1590              BRA     OP0101_RETURN
00001EC2                          1591  OP0101_ADDQ_W
00001EC2                          1592              
00001EC2  163C 0057               1593              MOVE.B  #'W',D3
00001EC6  6100 2528               1594              BSR     PUSH_STACK
00001ECA  6000 000A               1595              BRA     OP0101_RETURN
00001ECE                          1596  OP0101_ADDQ_L
00001ECE                          1597              
00001ECE  163C 004C               1598              MOVE.B  #'L',D3
00001ED2  6100 251C               1599              BSR     PUSH_STACK
00001ED6                          1600  OP0101_RETURN            
00001ED6                          1601  
00001ED6                          1602              
00001ED6                          1603  *GET DATA FROM ADDQ AND PRINT #0-8
00001ED6  163C 0020               1604              MOVE.B  #' ',D3
00001EDA  6100 2514               1605              BSR     PUSH_STACK
00001EDE  163C 0023               1606              MOVE.B  #'#',D3
00001EE2  6100 250C               1607              BSR     PUSH_STACK 
00001EE6                          1608  
00001EE6                          1609                       
00001EE6                          1610              *GET DATA #   
00001EE6  2205                    1611              MOVE.L  D5,D1
00001EE8  EC99                    1612              ROR.L   #6,D1            
00001EEA  E699                    1613              ROR.L   #3,D1
00001EEC  0281 00000007           1614              ANDI.L  #$07,D1
00001EF2                          1615              
00001EF2  0C01 0000               1616              CMPI.B  #%000,D1
00001EF6  6700 009A               1617              BEQ     OP0101_ADDQ_B_8
00001EFA  0C01 0001               1618              CMPI.B  #%001,D1
00001EFE  6700 003E               1619              BEQ     OP0101_ADDQ_B_1
00001F02  0C01 0002               1620              CMPI.B  #%010,D1
00001F06  6700 0042               1621              BEQ     OP0101_ADDQ_B_2
00001F0A  0C01 0003               1622              CMPI.B  #%011,D1
00001F0E  6700 0046               1623              BEQ     OP0101_ADDQ_B_3
00001F12  0C01 0004               1624              CMPI.B  #%100,D1
00001F16  6700 004A               1625              BEQ     OP0101_ADDQ_B_4
00001F1A  0C01 0005               1626              CMPI.B  #%101,D1
00001F1E  6700 004E               1627              BEQ     OP0101_ADDQ_B_5
00001F22  0C01 0006               1628              CMPI.B  #%110,D1
00001F26  6700 0052               1629              BEQ     OP0101_ADDQ_B_6
00001F2A  0C01 0007               1630              CMPI.B  #%111,D1
00001F2E  6700 0056               1631              BEQ     OP0101_ADDQ_B_7
00001F32                          1632              
00001F32                          1633  OP0101_ADDQ_B_0
00001F32  163C 0030               1634              MOVE.B  #'0',D3
00001F36  6100 24B8               1635              BSR     PUSH_STACK
00001F3A  6000 005E               1636              BRA     OP0101_RETURN2            
00001F3E                          1637  OP0101_ADDQ_B_1
00001F3E  163C 0031               1638              MOVE.B  #'1',D3
00001F42  6100 24AC               1639              BSR     PUSH_STACK
00001F46  6000 0052               1640              BRA     OP0101_RETURN2            
00001F4A                          1641  OP0101_ADDQ_B_2
00001F4A  163C 0032               1642              MOVE.B  #'2',D3
00001F4E  6100 24A0               1643              BSR     PUSH_STACK
00001F52  6000 0046               1644              BRA     OP0101_RETURN2            
00001F56                          1645  OP0101_ADDQ_B_3
00001F56  163C 0033               1646              MOVE.B  #'3',D3
00001F5A  6100 2494               1647              BSR     PUSH_STACK
00001F5E  6000 003A               1648              BRA     OP0101_RETURN2            
00001F62                          1649  OP0101_ADDQ_B_4
00001F62  163C 0034               1650              MOVE.B  #'4',D3
00001F66  6100 2488               1651              BSR     PUSH_STACK
00001F6A  6000 002E               1652              BRA     OP0101_RETURN2            
00001F6E                          1653  OP0101_ADDQ_B_5
00001F6E  163C 0035               1654              MOVE.B  #'5',D3
00001F72  6100 247C               1655              BSR     PUSH_STACK
00001F76  6000 0022               1656              BRA     OP0101_RETURN2
00001F7A                          1657  OP0101_ADDQ_B_6
00001F7A  163C 0036               1658              MOVE.B  #'6',D3
00001F7E  6100 2470               1659              BSR     PUSH_STACK
00001F82  6000 0016               1660              BRA     OP0101_RETURN2
00001F86                          1661  OP0101_ADDQ_B_7
00001F86  163C 0037               1662              MOVE.B  #'7',D3
00001F8A  6100 2464               1663              BSR     PUSH_STACK
00001F8E  6000 000A               1664              BRA     OP0101_RETURN2
00001F92                          1665  
00001F92                          1666  OP0101_ADDQ_B_8
00001F92  163C 0038               1667              MOVE.B  #'8',D3
00001F96  6100 2458               1668              BSR     PUSH_STACK
00001F9A                          1669              
00001F9A                          1670  OP0101_RETURN2            
00001F9A  163C 002C               1671              MOVE.B  #',',D3
00001F9E  6100 2450               1672              BSR     PUSH_STACK
00001FA2  6100 1BAE               1673              BSR     GET_EA_EA_SRC
00001FA6                          1674              
00001FA6  4E75                    1675              RTS
00001FA8                          1676  
00001FA8                          1677  
00001FA8                          1678              
00001FA8                          1679  *---------------------------------------------------------------------------*
00001FA8                          1680  * OP_ADDQ: display ADDQ
00001FA8                          1681  *---------------------------------------------------------------------------*              
00001FA8                          1682  OP_ADDQ_B    * size is byte   
00001FA8  183C 0000               1683              MOVE.B  #0,D4 
00001FAC  43F9 00004B4F           1684              LEA     DISP_ADDQ_B,A1
00001FB2  103C 000E               1685              MOVE.B  #14,D0
00001FB6  4E4F                    1686              TRAP    #15
00001FB8  4E75                    1687              RTS
00001FBA                          1688              
00001FBA                          1689  OP_ADDQ_W    * size is word
00001FBA  183C 0001               1690              MOVE.B  #1,D4
00001FBE  43F9 00004B59           1691              LEA     DISP_ADDQ_W,A1
00001FC4  103C 000E               1692              MOVE.B  #14,D0
00001FC8  4E4F                    1693              TRAP    #15
00001FCA  4E75                    1694              RTS
00001FCC                          1695              
00001FCC                          1696  OP_ADDQ_L    * size is long
00001FCC  183C 0002               1697              MOVE.B  #2,D4
00001FD0  43F9 00004B63           1698              LEA     DISP_ADDQ_L,A1
00001FD6  103C 000E               1699              MOVE.B  #14,D0
00001FDA  4E4F                    1700              TRAP    #15
00001FDC  4E75                    1701              RTS
00001FDE                          1702  
00001FDE                          1703  *---------------------------------------------------------------------------*
00001FDE                          1704  * OP0110: decode BRA/BEQ/BNE/BLT/BHI
00001FDE                          1705  *---------------------------------------------------------------------------*              
00001FDE  4280                    1706  OP0110      CLR.L   D0                  
00001FE0  4281                    1707              CLR.L   D1   
00001FE2  4284                    1708              CLR.L   D4                 
00001FE4  227C 00000000           1709              MOVEA.L #0,A1
00001FEA  2205                    1710              MOVE.L  D5, D1                
00001FEC  0281 000000FF           1711              ANDI.L  #$00FF, D1              * Get 8-bit displacement 
00001FF2  2205                    1712              MOVE.L  D5,D1                  
00001FF4  0281 00000F00           1713              ANDI.L  #$0F00,D1
00001FFA                          1714                 
00001FFA  0C41 0000               1715              CMPI.W  #$0000,D1               * Check for BRA
00001FFE  6700 0098               1716              BEQ     OP_BRA                  
00002002                          1717                          
00002002  0C41 0D00               1718              CMPI.W  #$0D00,D1               * Check for BLT
00002006  6700 00B6               1719              BEQ     OP_BLT      
0000200A                          1720  
0000200A  0C41 0700               1721              CMPI.W  #$0700,D1               * Check for BEQ
0000200E  6700 0062               1722              BEQ     OP_BEQ      
00002012                          1723  
00002012  0C41 0600               1724              CMPI.W  #$0600,D1               * Check for BNE
00002016  6700 0034               1725              BEQ     OP_BNE  
0000201A                          1726              
0000201A  0C41 0200               1727              CMPI.W  #$0200,D1               * Check for BHI
0000201E  6700 0006               1728              BEQ     OP_BHI
00002022                          1729  
00002022  4EF8 1760               1730              JMP     OP_DATA
00002026                          1731              
00002026  163C 0042               1732  OP_BHI      MOVE.B  #'B',D3
0000202A  6100 23C4               1733              BSR     PUSH_STACK
0000202E  163C 0048               1734              MOVE.B  #'H',D3
00002032  6100 23BC               1735              BSR     PUSH_STACK
00002036  163C 0049               1736              MOVE.B  #'I',D3
0000203A  6100 23B4               1737              BSR     PUSH_STACK
0000203E  163C 0009               1738              MOVE.B  #$9,D3
00002042  6100 23AC               1739              BSR     PUSH_STACK
00002046  6100 2426               1740              BSR     GET_DISPLACEMENT_ADDRESS
0000204A  4E75                    1741              RTS
0000204C                          1742  
0000204C  163C 0042               1743  OP_BNE      MOVE.B  #'B',D3
00002050  6100 239E               1744              BSR     PUSH_STACK
00002054  163C 004E               1745              MOVE.B  #'N',D3
00002058  6100 2396               1746              BSR     PUSH_STACK
0000205C  163C 0045               1747              MOVE.B  #'E',D3
00002060  6100 238E               1748              BSR     PUSH_STACK
00002064  163C 0009               1749              MOVE.B  #$9,D3
00002068  6100 2386               1750              BSR     PUSH_STACK
0000206C  6100 2400               1751              BSR     GET_DISPLACEMENT_ADDRESS
00002070  4E75                    1752              RTS
00002072                          1753  
00002072  163C 0042               1754  OP_BEQ      MOVE.B  #'B',D3
00002076  6100 2378               1755              BSR     PUSH_STACK
0000207A  163C 0045               1756              MOVE.B  #'E',D3
0000207E  6100 2370               1757              BSR     PUSH_STACK
00002082  163C 0051               1758              MOVE.B  #'Q',D3
00002086  6100 2368               1759              BSR     PUSH_STACK
0000208A  163C 0009               1760              MOVE.B  #$9,D3
0000208E  6100 2360               1761              BSR     PUSH_STACK
00002092  6100 23DA               1762              BSR     GET_DISPLACEMENT_ADDRESS
00002096  4E75                    1763              RTS          
00002098                          1764                          
00002098                          1765  OP_BRA      
00002098  163C 0042               1766              MOVE.B  #'B',D3
0000209C  6100 2352               1767              BSR     PUSH_STACK
000020A0  163C 0052               1768              MOVE.B  #'R',D3
000020A4  6100 234A               1769              BSR     PUSH_STACK
000020A8  163C 0041               1770              MOVE.B  #'A',D3
000020AC  6100 2342               1771              BSR     PUSH_STACK
000020B0  163C 0009               1772              MOVE.B  #$9,D3
000020B4  6100 233A               1773              BSR     PUSH_STACK
000020B8  6100 23B4               1774              BSR     GET_DISPLACEMENT_ADDRESS
000020BC                          1775              
000020BC  4E75                    1776              RTS
000020BE                          1777              
000020BE  163C 0042               1778  OP_BLT      MOVE.B  #'B',D3
000020C2  6100 232C               1779              BSR     PUSH_STACK
000020C6  163C 004C               1780              MOVE.B  #'L',D3
000020CA  6100 2324               1781              BSR     PUSH_STACK
000020CE  163C 0054               1782              MOVE.B  #'T',D3
000020D2  6100 231C               1783              BSR     PUSH_STACK
000020D6  163C 0009               1784              MOVE.B  #$9,D3
000020DA  6100 2314               1785              BSR     PUSH_STACK
000020DE  6100 238E               1786              BSR     GET_DISPLACEMENT_ADDRESS
000020E2  4E75                    1787              RTS
000020E4                          1788     
000020E4                          1789  *---------------------------------------------------------------------------*
000020E4                          1790  * OP0111 : MOVEQ not required
000020E4                          1791  *---------------------------------------------------------------------------*           
000020E4  4EF8 1760               1792  OP0111      JMP     OP_DATA
000020E8                          1793             
000020E8                          1794  *---------------------------------------------------------------------------*
000020E8                          1795  * OP1000 : decode DIVS
000020E8                          1796  *---------------------------------------------------------------------------*           
000020E8                          1797  OP1000                           
000020E8  4281                    1798              CLR.L   D1       
000020EA  4284                    1799              CLR.L   D4                   
000020EC  227C 00000000           1800              MOVEA.L #0, A1              
000020F2  2205                    1801              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
000020F4                          1802              *CLEAR D3
000020F4  4283                    1803              CLR.L   D3
000020F6                          1804  
000020F6                          1805  OP1000_DIVS_DN_EA_OR_EA_DN 
000020F6                          1806              *LOAD STACK WITH THIS OPMODE
000020F6  6100 22F8               1807              BSR     PUSH_STACK
000020FA  163C 0044               1808              MOVE.B  #'D',D3
000020FE  6100 22F0               1809              BSR     PUSH_STACK
00002102  163C 0049               1810              MOVE.B  #'I',D3
00002106  6100 22E8               1811              BSR     PUSH_STACK
0000210A  163C 0056               1812              MOVE.B  #'V',D3
0000210E  6100 22E0               1813              BSR     PUSH_STACK
00002112  163C 0053               1814              MOVE.B  #'S',D3
00002116  6100 22D8               1815              BSR     PUSH_STACK
0000211A  163C 002E               1816              MOVE.B  #'.',D3
0000211E  6100 22D0               1817              BSR     PUSH_STACK
00002122                          1818              
00002122  2205                    1819              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00002124                          1820              
00002124                          1821  OP1000_EA_DN_DIVS
00002124                          1822              *BITS (7 TO 6) 
00002124                          1823              *00 = .B
00002124                          1824              *01 = .W
00002124                          1825              *10 = .L 
00002124  2205                    1826              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00002126  EC99                    1827              ROR.L   #6,D1
00002128  0281 00000003           1828              ANDI.L  #$03,D1
0000212E  0C81 00000003           1829              CMPI.L  #%11,D1 *EQUALS .W
00002134  6700 0014               1830              BEQ     OP1000_PRINT_W_DIVS
00002138  0C81 00000000           1831              CMPI.L  #%00,D1 *EQUALS .L
0000213E  6700 0052               1832              BEQ     OP1000_PRINT_L_DIVS
00002142                          1833              
00002142  183C 0001               1834              MOVE.B  #1,D4               *ERROR READ
00002146  6000 0092               1835              BRA     OP1000_DIVS_RETURN
0000214A                          1836  OP1000_PRINT_W_DIVS
0000214A  163C 0057               1837              MOVE.B  #'W',D3
0000214E  6100 22A0               1838              BSR     PUSH_STACK
00002152                          1839  
00002152                          1840              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002152  13FC 0000 00004D7A      1841              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000215A  13FC 0000 00004D7B      1842              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002162                          1843             
00002162                          1844              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002162  13FC 00B9 00004D7D      1845              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000216A  13FC 0020 00004D7E      1846              MOVE.B   #$20,GET_SRC_START_END
00002172                          1847  
00002172                          1848             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002172  0285 0000FE3F           1849              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002178  0685 00000000           1850              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
0000217E                          1851  
0000217E                          1852              
0000217E  6100 19D2               1853              BSR     GET_EA_EA_SRC      *GETS <ea>
00002182  163C 002C               1854              MOVE.B  #',',D3
00002186  6100 2268               1855              BSR     PUSH_STACK
0000218A  6100 1DF6               1856              BSR     GET_EA_EA_DEST       *GETS Dn    
0000218E                          1857              
0000218E  6000 004A               1858              BRA     OP1000_DIVS_RETURN
00002192                          1859  OP1000_PRINT_L_DIVS
00002192  163C 004C               1860              MOVE.B  #'L',D3
00002196  6100 2258               1861              BSR     PUSH_STACK
0000219A                          1862              
0000219A                          1863              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000219A  13FC 0000 00004D7A      1864              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000021A2  13FC 0000 00004D7B      1865              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000021AA                          1866             
000021AA                          1867              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000021AA  13FC 00B9 00004D7D      1868              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000021B2  13FC 0020 00004D7E      1869              MOVE.B   #$20,GET_SRC_START_END
000021BA                          1870  
000021BA                          1871              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000021BA  0285 0000FE3F           1872              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000021C0  0685 00000000           1873              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
000021C6                          1874  
000021C6                          1875                     
000021C6  6100 198A               1876              BSR     GET_EA_EA_SRC      *GETS <ea>
000021CA  163C 002C               1877              MOVE.B  #',',D3
000021CE  6100 2220               1878              BSR     PUSH_STACK                  
000021D2  6100 1DAE               1879              BSR     GET_EA_EA_DEST       *GETS Dn    
000021D6                          1880  
000021D6                          1881              
000021D6  6000 0002               1882              BRA     OP1000_DIVS_RETURN
000021DA                          1883              
000021DA                          1884  OP1000_DIVS_RETURN
000021DA  4E75                    1885              RTS
000021DC                          1886              
000021DC                          1887  
000021DC                          1888  
000021DC                          1889  *---------------------------------------------------------------------------*
000021DC                          1890  * OP_DIVS: display DIVS and proceed to EA
000021DC                          1891  *---------------------------------------------------------------------------*  
000021DC  43F9 00004B6D           1892  OP_DIVS     LEA     DISP_DIVS,A1
000021E2  103C 000E               1893              MOVE.B  #14,D0
000021E6  4E4F                    1894              TRAP    #15
000021E8  4EF9 000036B6           1895              JMP     EA_ARITH
000021EE                          1896  
000021EE  4E75                    1897              RTS
000021F0                          1898              
000021F0                          1899  *---------------------------------------------------------------------------*
000021F0                          1900  * OP1001: decode SUB/SUBA
000021F0                          1901  *---------------------------------------------------------------------------*      
000021F0                          1902  OP1001      
000021F0  4280                    1903              CLR.L   D0                  
000021F2  4281                    1904              CLR.L   D1       
000021F4  4284                    1905              CLR.L   D4                   
000021F6  227C 00000000           1906              MOVEA.L #0, A1              
000021FC  2205                    1907              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
000021FE                          1908              
000021FE                          1909              *CLEAR D3
000021FE  4283                    1910              CLR.L   D3
00002200                          1911              
00002200                          1912              
00002200                          1913              
00002200                          1914              **INTEGRATING SUB.W/.L INTO THIS CODE**
00002200  2205                    1915              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00002202                          1916              *BITS (INDEX 8) 
00002202                          1917              *0 = ADD.B/W/L <EA>,Dn
00002202                          1918              *1 = ADD.B/W/L Dn,<EA> 
00002202  EC99                    1919              ROR.L   #6,D1
00002204  0281 00000007           1920              ANDI.L  #$07,D1                 *MASKS WITH 00000111
0000220A  0C81 00000007           1921              CMPI.L  #$07,D1                 *IF EQUALS <ea>,Dn
00002210  6700 0010               1922              BEQ     OP1001_SUBA_L            *BRANCHES TO ADDA.L
00002214  0C81 00000003           1923              CMPI.L  #$03,D1                 *IF EQUALS <ea>,Dn
0000221A  6700 0078               1924              BEQ     OP1001_SUBA_W           *BRANCHES TO ADDA.W
0000221E  6000 00E6               1925              BRA     OP1001_DETERMINE_DN_EA_OR_EA_DN         *ELSE CHECK ADD.B/.W/.L
00002222                          1926              
00002222                          1927  OP1001_SUBA_L
00002222                          1928              *LOAD STACK WITH THIS OPMODE
00002222  6100 21CC               1929              BSR     PUSH_STACK
00002226  163C 0053               1930              MOVE.B  #'S',D3
0000222A  6100 21C4               1931              BSR     PUSH_STACK
0000222E  163C 0055               1932              MOVE.B  #'U',D3
00002232  6100 21BC               1933              BSR     PUSH_STACK
00002236  163C 0042               1934              MOVE.B  #'B',D3
0000223A  6100 21B4               1935              BSR     PUSH_STACK
0000223E  163C 0041               1936              MOVE.B  #'A',D3
00002242  6100 21AC               1937              BSR     PUSH_STACK
00002246  163C 002E               1938              MOVE.B  #'.',D3
0000224A  6100 21A4               1939              BSR     PUSH_STACK
0000224E  163C 004C               1940              MOVE.B  #'L',D3
00002252  6100 219C               1941              BSR     PUSH_STACK
00002256                          1942              
00002256                          1943             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002256  13FC 0000 00004D7A      1944             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000225E  13FC 0000 00004D7B      1945             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002266                          1946             
00002266                          1947             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002266  13FC 00B9 00004D7D      1948             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000226E  13FC 0020 00004D7E      1949             MOVE.B   #$20,GET_SRC_START_END
00002276                          1950  
00002276                          1951              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002276  0285 0000FE3F           1952              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000227C  0685 00000040           1953              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002282                          1954       
00002282                          1955              *PRINT <EA>,AN
00002282  6100 18CE               1956              BSR     GET_EA_EA_SRC       *GETS <ea>
00002286  163C 002C               1957              MOVE.B  #',',D3
0000228A  6100 2164               1958              BSR     PUSH_STACK                     
0000228E  6100 1CF2               1959              BSR     GET_EA_EA_DEST      *GETS Dn
00002292                          1960  
00002292                          1961              
00002292                          1962              
00002292  4E75                    1963              RTS
00002294                          1964  OP1001_SUBA_W
00002294                          1965              *LOAD STACK WITH THIS OPMODE
00002294  6100 215A               1966              BSR     PUSH_STACK
00002298  163C 0053               1967              MOVE.B  #'S',D3
0000229C  6100 2152               1968              BSR     PUSH_STACK
000022A0  163C 0055               1969              MOVE.B  #'U',D3
000022A4  6100 214A               1970              BSR     PUSH_STACK
000022A8  163C 0042               1971              MOVE.B  #'B',D3
000022AC  6100 2142               1972              BSR     PUSH_STACK
000022B0  163C 0041               1973              MOVE.B  #'A',D3
000022B4  6100 213A               1974              BSR     PUSH_STACK
000022B8  163C 002E               1975              MOVE.B  #'.',D3
000022BC  6100 2132               1976              BSR     PUSH_STACK
000022C0  163C 0057               1977              MOVE.B  #'W',D3
000022C4  6100 212A               1978              BSR     PUSH_STACK
000022C8                          1979              
000022C8                          1980             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000022C8  13FC 0000 00004D7A      1981             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000022D0  13FC 0000 00004D7B      1982             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000022D8                          1983             
000022D8                          1984             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000022D8  13FC 00B9 00004D7D      1985             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000022E0  13FC 0020 00004D7E      1986             MOVE.B   #$20,GET_SRC_START_END
000022E8                          1987  
000022E8                          1988              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000022E8  0285 0000FE3F           1989              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000022EE  0685 00000040           1990              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
000022F4                          1991       
000022F4                          1992              *PRINT <EA>,AN
000022F4  6100 185C               1993              BSR     GET_EA_EA_SRC       *GETS <ea>
000022F8  163C 002C               1994              MOVE.B  #',',D3
000022FC  6100 20F2               1995              BSR     PUSH_STACK                     
00002300  6100 1C80               1996              BSR     GET_EA_EA_DEST      *GETS Dn
00002304                          1997  
00002304  4E75                    1998              RTS
00002306                          1999  
00002306                          2000  OP1001_DETERMINE_DN_EA_OR_EA_DN 
00002306                          2001              *LOAD STACK WITH THIS OPMODE
00002306  6100 20E8               2002              BSR     PUSH_STACK
0000230A  163C 0053               2003              MOVE.B  #'S',D3
0000230E  6100 20E0               2004              BSR     PUSH_STACK
00002312  163C 0055               2005              MOVE.B  #'U',D3
00002316  6100 20D8               2006              BSR     PUSH_STACK
0000231A  163C 0042               2007              MOVE.B  #'B',D3
0000231E  6100 20D0               2008              BSR     PUSH_STACK
00002322  163C 002E               2009              MOVE.B  #'.',D3
00002326  6100 20C8               2010              BSR     PUSH_STACK
0000232A                          2011              
0000232A  2205                    2012              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
0000232C                          2013              
0000232C                          2014              *BITS (INDEX 8) 
0000232C                          2015              *0 = ADD.B/W/L <EA>,Dn
0000232C                          2016              *1 = ADD.B/W/L Dn,<EA> 
0000232C  E099                    2017              ROR.L   #8,D1
0000232E  0281 00000001           2018              ANDI.L  #$01,D1     *MASKS WITH 00000001
00002334  0C81 00000000           2019              CMPI.L  #$00,D1     *IF EQUALS <ea>,Dn
0000233A  6700 0102               2020              BEQ     OP1001_EA_DN
0000233E                          2021              *else procede to Dn_EA
0000233E                          2022              
0000233E                          2023  OP1001_DN_EA
0000233E                          2024              *BITS (7 TO 6) 
0000233E                          2025              *00 = .B
0000233E                          2026              *01 = .W
0000233E                          2027              *10 = .L 
0000233E  2205                    2028              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00002340  EC99                    2029              ROR.L   #6,D1
00002342  0281 00000003           2030              ANDI.L  #$03,D1
00002348  0C81 00000000           2031              CMPI.L  #$00,D1 *EQUALS .B
0000234E  6700 0016               2032              BEQ     OP1001_PRINT_B2
00002352  0C81 00000001           2033              CMPI.L  #$01,D1 *EQUALS .W
00002358  6700 0054               2034              BEQ     OP1001_PRINT_W2
0000235C  0C81 00000002           2035              CMPI.L  #$02,D1 *EQUALS .L
00002362  6700 0092               2036              BEQ     OP1001_PRINT_L2
00002366                          2037  OP1001_PRINT_B2
00002366                          2038              *PUSH 'B'
00002366  163C 0042               2039              MOVE.B  #'B',D3
0000236A  6100 2084               2040              BSR     PUSH_STACK
0000236E                          2041             
0000236E                          2042              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000236E  13FC 0000 00004D7A      2043             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002376  13FC 0083 00004D7B      2044             MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000237E                          2045             
0000237E                          2046             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000237E  13FC 00B9 00004D7D      2047             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002386  13FC 0020 00004D7E      2048             MOVE.B   #$20,GET_SRC_START_END
0000238E                          2049  
0000238E                          2050              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000238E  0285 0000FE3F           2051              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002394  0685 00000040           2052              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
0000239A                          2053       
0000239A  6100 1BE6               2054              BSR     GET_EA_EA_DEST      *GETS Dn
0000239E  163C 002C               2055              MOVE.B  #',',D3
000023A2  6100 204C               2056              BSR     PUSH_STACK                     
000023A6  6100 17AA               2057              BSR     GET_EA_EA_SRC       *GETS <ea>
000023AA                          2058  
000023AA                          2059              
000023AA  6000 0BA4               2060              BRA     OP1101_ADD_RETURN
000023AE                          2061  OP1001_PRINT_W2
000023AE  163C 0057               2062              MOVE.B  #'W',D3
000023B2  6100 203C               2063              BSR     PUSH_STACK
000023B6                          2064  
000023B6                          2065              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000023B6  13FC 0000 00004D7A      2066              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000023BE  13FC 0083 00004D7B      2067              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000023C6                          2068             
000023C6                          2069              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000023C6  13FC 00B9 00004D7D      2070              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000023CE  13FC 0020 00004D7E      2071              MOVE.B   #$20,GET_SRC_START_END
000023D6                          2072  
000023D6                          2073              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000023D6  0285 0000FE3F           2074              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000023DC  0685 00000040           2075              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A An Register (001) 
000023E2                          2076  
000023E2                          2077        
000023E2  6100 1B9E               2078              BSR     GET_EA_EA_DEST      *GETS Dn
000023E6  163C 002C               2079              MOVE.B  #',',D3
000023EA  6100 2004               2080              BSR     PUSH_STACK               
000023EE  6100 1762               2081              BSR     GET_EA_EA_SRC       *GETS <ea>       
000023F2                          2082  
000023F2                          2083  
000023F2                          2084  
000023F2  6000 0B5C               2085              BRA     OP1101_ADD_RETURN
000023F6                          2086  OP1001_PRINT_L2 
000023F6  163C 004C               2087              MOVE.B  #'L',D3
000023FA  6100 1FF4               2088              BSR     PUSH_STACK
000023FE                          2089              
000023FE                          2090              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000023FE  13FC 0000 00004D7A      2091              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002406  13FC 0083 00004D7B      2092              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000240E                          2093             
0000240E                          2094              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000240E  13FC 00B9 00004D7D      2095              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002416  13FC 0020 00004D7E      2096              MOVE.B   #$20,GET_SRC_START_END
0000241E                          2097  
0000241E                          2098             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000241E  0285 0000FE3F           2099              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002424  0685 00000040           2100              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
0000242A                          2101  
0000242A                          2102               
0000242A  6100 1B56               2103              BSR     GET_EA_EA_DEST       *GETS Dn
0000242E  163C 002C               2104              MOVE.B  #',',D3
00002432  6100 1FBC               2105              BSR     PUSH_STACK          
00002436  6100 171A               2106              BSR     GET_EA_EA_SRC        *GETS <ea>
0000243A                          2107  
0000243A  6000 0B14               2108              BRA     OP1101_ADD_RETURN
0000243E                          2109              
0000243E                          2110  OP1001_EA_DN           
0000243E                          2111              *BITS (7 TO 6) 
0000243E                          2112              *00 = .B
0000243E                          2113              *01 = .W
0000243E                          2114              *10 = .L 
0000243E  2205                    2115              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00002440  EC99                    2116              ROR.L   #6,D1
00002442  0281 00000003           2117              ANDI.L  #$03,D1
00002448  0C81 00000000           2118              CMPI.L  #$00,D1 *EQUALS .B
0000244E  6700 0016               2119              BEQ     OP1001_PRINT_B
00002452  0C81 00000001           2120              CMPI.L  #$01,D1 *EQUALS .W
00002458  6700 0054               2121              BEQ     OP1001_PRINT_W
0000245C  0C81 00000002           2122              CMPI.L  #$02,D1 *EQUALS .L
00002462  6700 0092               2123              BEQ     OP1001_PRINT_L
00002466                          2124  OP1001_PRINT_B
00002466  163C 0042               2125              MOVE.B  #'B',D3
0000246A  6100 1F84               2126              BSR     PUSH_STACK
0000246E                          2127                
0000246E                          2128              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000246E  13FC 0000 00004D7A      2129              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002476  13FC 0002 00004D7B      2130              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000247E                          2131             
0000247E                          2132              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000247E  13FC 00B9 00004D7D      2133              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002486  13FC 0020 00004D7E      2134              MOVE.B   #$20,GET_SRC_START_END
0000248E                          2135  
0000248E                          2136             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000248E  0285 0000FE3F           2137              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002494  0685 00000040           2138              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "AN" Register (001) 
0000249A                          2139  
0000249A                          2140              
0000249A  6100 16B6               2141              BSR     GET_EA_EA_SRC      *GETS <ea>
0000249E  163C 002C               2142              MOVE.B  #',',D3
000024A2  6100 1F4C               2143              BSR     PUSH_STACK          
000024A6  6100 1ADA               2144              BSR     GET_EA_EA_DEST       *GETS Dn
000024AA                          2145              
000024AA  6000 0AA4               2146              BRA     OP1101_ADD_RETURN
000024AE                          2147  OP1001_PRINT_W
000024AE  163C 0057               2148              MOVE.B  #'W',D3
000024B2  6100 1F3C               2149              BSR     PUSH_STACK
000024B6                          2150  
000024B6                          2151              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000024B6  13FC 0000 00004D7A      2152              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000024BE  13FC 0000 00004D7B      2153              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000024C6                          2154             
000024C6                          2155              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000024C6  13FC 00B9 00004D7D      2156              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000024CE  13FC 0020 00004D7E      2157              MOVE.B   #$20,GET_SRC_START_END
000024D6                          2158  
000024D6                          2159             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000024D6  0285 0000FE3F           2160              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000024DC  0685 00000040           2161              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
000024E2                          2162  
000024E2                          2163              
000024E2  6100 166E               2164              BSR     GET_EA_EA_SRC      *GETS <ea>
000024E6  163C 002C               2165              MOVE.B  #',',D3
000024EA  6100 1F04               2166              BSR     PUSH_STACK
000024EE  6100 1A92               2167              BSR     GET_EA_EA_DEST       *GETS Dn    
000024F2                          2168              
000024F2  6000 004A               2169              BRA     OP1001_ADD_RETURN
000024F6                          2170  OP1001_PRINT_L 
000024F6  163C 004C               2171              MOVE.B  #'L',D3
000024FA  6100 1EF4               2172              BSR     PUSH_STACK
000024FE                          2173              
000024FE                          2174              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000024FE  13FC 0000 00004D7A      2175              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002506  13FC 0000 00004D7B      2176              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000250E                          2177             
0000250E                          2178              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000250E  13FC 00B9 00004D7D      2179              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002516  13FC 0020 00004D7E      2180              MOVE.B   #$20,GET_SRC_START_END
0000251E                          2181  
0000251E                          2182              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000251E  0285 0000FE3F           2183              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002524  0685 00000040           2184              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
0000252A                          2185  
0000252A                          2186                     
0000252A  6100 1626               2187              BSR     GET_EA_EA_SRC      *GETS <ea>
0000252E  163C 002C               2188              MOVE.B  #',',D3
00002532  6100 1EBC               2189              BSR     PUSH_STACK                  
00002536  6100 1A4A               2190              BSR     GET_EA_EA_DEST       *GETS Dn    
0000253A                          2191  
0000253A                          2192              
0000253A  6000 0002               2193              BRA     OP1001_ADD_RETURN
0000253E                          2194              
0000253E                          2195  OP1001_ADD_RETURN
0000253E  4E75                    2196              RTS
00002540                          2197  
00002540                          2198    
00002540                          2199  *---------------------------------------------------------------------------*
00002540                          2200  * OP_SUB: display SUB and proceed to EA
00002540                          2201  *---------------------------------------------------------------------------*            
00002540  43F9 00004B75           2202  OP_SUB_B    LEA     DISP_SUB_B,A1
00002546  103C 000E               2203              MOVE.B  #14,D0
0000254A  4E4F                    2204              TRAP    #15
0000254C  183C 0000               2205              MOVE.B  #0,D4
00002550  4EF9 00003702           2206              JMP     EA_GEN
00002556                          2207  
00002556  4E75                    2208              RTS
00002558                          2209  
00002558  43F9 00004B7E           2210  OP_SUB_W    LEA     DISP_SUB_W,A1
0000255E  103C 000E               2211              MOVE.B  #14,D0
00002562  4E4F                    2212              TRAP    #15
00002564  183C 0001               2213              MOVE.B  #1,D4
00002568  4EF9 00003702           2214              JMP     EA_GEN
0000256E                          2215  
0000256E  4E75                    2216              RTS
00002570                          2217  
00002570  43F9 00004B87           2218  OP_SUB_L    LEA     DISP_SUB_L,A1
00002576  103C 000E               2219              MOVE.B  #14,D0
0000257A  4E4F                    2220              TRAP    #15
0000257C  183C 0002               2221              MOVE.B  #2,D4
00002580  4EF9 00003702           2222              JMP     EA_GEN
00002586                          2223  
00002586  4E75                    2224              RTS
00002588                          2225  
00002588                          2226  *---------------------------------------------------------------------------*
00002588                          2227  * OP_SUBA: display SUBA
00002588                          2228  *---------------------------------------------------------------------------*  
00002588  43F9 00004BAE           2229  OP_SUBA_W   LEA     DISP_SUBA_W,A1
0000258E  103C 000E               2230              MOVE.B  #14,D0
00002592  4E4F                    2231              TRAP    #15
00002594  183C 0001               2232              MOVE.B  #1,D4
00002598  4E75                    2233              RTS
0000259A                          2234  
0000259A  43F9 00004BB8           2235  OP_SUBA_L   LEA     DISP_SUBA_L,A1
000025A0  103C 000E               2236              MOVE.B  #14,D0
000025A4  4E4F                    2237              TRAP    #15
000025A6  183C 0002               2238              MOVE.B  #2,D4
000025AA  4E75                    2239              RTS         
000025AC                          2240  *---------------------------------------------------------------------------*
000025AC                          2241  * OP1010 : unassigned
000025AC                          2242  *---------------------------------------------------------------------------*           
000025AC  4EF8 1760               2243  OP1010      JMP     OP_DATA
000025B0                          2244              
000025B0                          2245  *---------------------------------------------------------------------------*
000025B0                          2246  * OP1011 : decode CMP/EOR/CMPA
000025B0                          2247  *---------------------------------------------------------------------------*           
000025B0  4280                    2248  OP1011      CLR.L   D0                
000025B2  4281                    2249              CLR.L   D1            
000025B4  4284                    2250              CLR.L   D4                   
000025B6  227C 00000000           2251              MOVEA.L #0, A1               
000025BC  2205                    2252              MOVE.L  D5,D1
000025BE  EA99                    2253              ROR.L   #5,D1
000025C0  0281 0000000E           2254              ANDI.L  #$E,D1
000025C6  0C01 0000               2255              CMPI.B  #$0,D1
000025CA  6700 003E               2256              BEQ     OP1011_CMP
000025CE  0C01 0002               2257              CMPI.B  #$2,D1
000025D2  6700 0036               2258              BEQ     OP1011_CMP
000025D6  0C01 0004               2259              CMPI.B  #$4,D1
000025DA  6700 002E               2260              BEQ     OP1011_CMP
000025DE  0C01 0008               2261              CMPI.B  #$8,D1
000025E2  6700 0178               2262              BEQ     OP1011_EOR
000025E6  0C01 000A               2263              CMPI.B  #$A,D1
000025EA  6700 0170               2264              BEQ     OP1011_EOR
000025EE  0C01 000C               2265              CMPI.B  #$C,D1
000025F2  6700 0168               2266              BEQ     OP1011_EOR  
000025F6  0C01 0006               2267              CMPI.B  #$6,D1
000025FA  6700 00C0               2268              BEQ     OP1011_CMPA
000025FE  0C01 000E               2269              CMPI.B  #$E,D1
00002602  6700 00B8               2270              BEQ     OP1011_CMPA 
00002606                          2271  
00002606  4EF8 1760               2272              JMP     OP_DATA          
0000260A                          2273  
0000260A                          2274  
0000260A                          2275  
0000260A                          2276  
0000260A                          2277  OP1011_CMP
0000260A                          2278             
0000260A                          2279   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000260A  13FC 0082 00004D7A      2280             MOVE.B   #$82,DEST_REGISTER_FORMAT
00002612  13FC 0000 00004D7B      2281             MOVE.B   #$00,SRC_REGISTER_FORMAT
0000261A                          2282             
0000261A                          2283             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000261A  13FC 00B9 00004D7D      2284             MOVE.B   #$B9,GET_DST_START_END
00002622  13FC 0020 00004D7E      2285             MOVE.B   #$20,GET_SRC_START_END
0000262A                          2286             
0000262A                          2287              *CLEAR D3
0000262A  4283                    2288              CLR.L   D3
0000262C                          2289              *LOAD STACK WITH THIS OPMODE
0000262C  6100 1DC2               2290              BSR     PUSH_STACK
00002630  163C 0043               2291              MOVE.B  #'C',D3
00002634  6100 1DBA               2292              BSR     PUSH_STACK
00002638  163C 004D               2293              MOVE.B  #'M',D3
0000263C  6100 1DB2               2294              BSR     PUSH_STACK
00002640  163C 0050               2295              MOVE.B  #'P',D3
00002644  6100 1DAA               2296              BSR     PUSH_STACK
00002648  163C 002E               2297              MOVE.B  #'.',D3
0000264C  6100 1DA2               2298              BSR     PUSH_STACK
00002650                          2299              
00002650                          2300              *FIGURE OUT SIZE*
00002650                          2301              *00 = BYTE
00002650                          2302              *01 = WORD
00002650                          2303              *10 = LONG
00002650                          2304              * BITS 7&6
00002650                          2305              
00002650                          2306              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
00002650  2205                    2307              MOVE.L  D5,D1
00002652  EC99                    2308              ROR.L   #6,D1
00002654  0281 00000003           2309              ANDI.L  #$03,D1
0000265A  0C01 0000               2310              CMPI.B  #%00,D1
0000265E  6700 001E               2311              BEQ     OP1011_CMP_B
00002662  0281 00000003           2312              ANDI.L  #$03,D1
00002668  0C01 0001               2313              CMPI.B  #%01,D1
0000266C  6700 001C               2314              BEQ     OP1011_CMP_W
00002670  0281 00000003           2315              ANDI.L  #$03,D1
00002676  0C01 0002               2316              CMPI.B  #%10,D1
0000267A  6700 001A               2317              BEQ     OP1011_CMP_L
0000267E                          2318            
0000267E                          2319  OP1011_CMP_B
0000267E                          2320              
0000267E  163C 0042               2321              MOVE.B  #'B',D3
00002682  6100 1D6C               2322              BSR     PUSH_STACK
00002686  6000 0016               2323              BRA     OP1011_RETURN_CMP  
0000268A                          2324  OP1011_CMP_W
0000268A                          2325              
0000268A  163C 0057               2326              MOVE.B  #'W',D3
0000268E  6100 1D60               2327              BSR     PUSH_STACK
00002692  6000 000A               2328              BRA     OP1011_RETURN_CMP  
00002696                          2329  OP1011_CMP_L
00002696                          2330              
00002696  163C 004C               2331              MOVE.B  #'L',D3
0000269A  6100 1D54               2332              BSR     PUSH_STACK
0000269E                          2333  OP1011_RETURN_CMP            
0000269E                          2334  
0000269E                          2335              
0000269E                          2336  *GET DATA FROM ADDQ AND PRINT #0-8
0000269E                          2337       
0000269E                          2338              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000269E  0285 0000FE3F           2339              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000026A4  0685 00000000           2340              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
000026AA                          2341  
000026AA  6100 14A6               2342              BSR     GET_EA_EA_SRC
000026AE  163C 002C               2343              MOVE.B  #',',D3
000026B2  6100 1D3C               2344              BSR     PUSH_STACK
000026B6  6100 18CA               2345              BSR     GET_EA_EA_DEST
000026BA                          2346              
000026BA  4E75                    2347              RTS
000026BC                          2348              
000026BC                          2349  
000026BC                          2350  
000026BC                          2351  OP1011_CMPA
000026BC                          2352              
000026BC                          2353   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000026BC  13FC 0080 00004D7A      2354             MOVE.B   #$80,DEST_REGISTER_FORMAT
000026C4  13FC 0000 00004D7B      2355             MOVE.B   #$00,SRC_REGISTER_FORMAT
000026CC                          2356             
000026CC                          2357             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000026CC  13FC 00B9 00004D7D      2358             MOVE.B   #$B9,GET_DST_START_END
000026D4  13FC 0020 00004D7E      2359             MOVE.B   #$20,GET_SRC_START_END
000026DC                          2360             
000026DC                          2361              *CLEAR D3
000026DC  4283                    2362              CLR.L   D3
000026DE                          2363              *LOAD STACK WITH THIS OPMODE
000026DE  6100 1D10               2364              BSR     PUSH_STACK
000026E2  163C 0043               2365              MOVE.B  #'C',D3
000026E6  6100 1D08               2366              BSR     PUSH_STACK
000026EA  163C 004D               2367              MOVE.B  #'M',D3
000026EE  6100 1D00               2368              BSR     PUSH_STACK
000026F2  163C 0050               2369              MOVE.B  #'P',D3
000026F6  6100 1CF8               2370              BSR     PUSH_STACK
000026FA  163C 0041               2371              MOVE.B  #'A',D3
000026FE  6100 1CF0               2372              BSR     PUSH_STACK
00002702  163C 002E               2373              MOVE.B  #'.',D3
00002706  6100 1CE8               2374              BSR     PUSH_STACK
0000270A                          2375              
0000270A                          2376              *FIGURE OUT SIZE*
0000270A                          2377              *00 = BYTE
0000270A                          2378              *01 = WORD
0000270A                          2379              *10 = LONG
0000270A                          2380              * BITS 7&6
0000270A                          2381              
0000270A                          2382              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
0000270A  2205                    2383              MOVE.L  D5,D1
0000270C  EC99                    2384              ROR.L   #6,D1
0000270E  0281 00000003           2385              ANDI.L  #$03,D1
00002714  0C01 0001               2386              CMPI.B  #%01,D1
00002718  6700 0010               2387              BEQ     OP1011_CMPA_W
0000271C  0281 00000003           2388              ANDI.L  #$03,D1
00002722  0C01 0002               2389              CMPI.B  #%10,D1
00002726  6700 000E               2390              BEQ     OP1011_CMPA_L
0000272A                          2391  OP1011_CMPA_W
0000272A                          2392              
0000272A  163C 0057               2393              MOVE.B  #'W',D3
0000272E  6100 1CC0               2394              BSR     PUSH_STACK
00002732  6000 000A               2395              BRA     OP1011_RETURN_CMPA 
00002736                          2396  OP1011_CMPA_L
00002736                          2397              
00002736  163C 004C               2398              MOVE.B  #'L',D3
0000273A  6100 1CB4               2399              BSR     PUSH_STACK
0000273E                          2400  OP1011_RETURN_CMPA            
0000273E                          2401  
0000273E                          2402              
0000273E                          2403  *GET DATA FROM ADDQ AND PRINT #0-8
0000273E                          2404       
0000273E                          2405              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000273E  0285 0000FE3F           2406              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002744  0685 00000040           2407              ADDI.L  #$0040,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
0000274A                          2408  
0000274A  6100 1406               2409              BSR     GET_EA_EA_SRC
0000274E  163C 002C               2410              MOVE.B  #',',D3
00002752  6100 1C9C               2411              BSR     PUSH_STACK
00002756  6100 182A               2412              BSR     GET_EA_EA_DEST
0000275A                          2413              
0000275A  4E75                    2414              RTS
0000275C                          2415  
0000275C                          2416  OP1011_EOR
0000275C                          2417  
0000275C                          2418   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000275C  13FC 0082 00004D7A      2419             MOVE.B   #$82,DEST_REGISTER_FORMAT
00002764  13FC 0080 00004D7B      2420             MOVE.B   #$80,SRC_REGISTER_FORMAT
0000276C                          2421             
0000276C                          2422             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000276C  13FC 00B9 00004D7D      2423             MOVE.B   #$B9,GET_DST_START_END
00002774  13FC 0020 00004D7E      2424             MOVE.B   #$20,GET_SRC_START_END
0000277C                          2425             
0000277C                          2426              *CLEAR D3
0000277C  4283                    2427              CLR.L   D3
0000277E                          2428              *LOAD STACK WITH THIS OPMODE
0000277E  6100 1C70               2429              BSR     PUSH_STACK
00002782  163C 0045               2430              MOVE.B  #'E',D3
00002786  6100 1C68               2431              BSR     PUSH_STACK
0000278A  163C 004F               2432              MOVE.B  #'O',D3
0000278E  6100 1C60               2433              BSR     PUSH_STACK
00002792  163C 0052               2434              MOVE.B  #'R',D3
00002796  6100 1C58               2435              BSR     PUSH_STACK
0000279A  163C 002E               2436              MOVE.B  #'.',D3
0000279E  6100 1C50               2437              BSR     PUSH_STACK
000027A2                          2438              
000027A2                          2439              *FIGURE OUT SIZE*
000027A2                          2440              *00 = BYTE
000027A2                          2441              *01 = WORD
000027A2                          2442              *10 = LONG
000027A2                          2443              * BITS 7&6
000027A2                          2444              
000027A2                          2445              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
000027A2  2205                    2446              MOVE.L  D5,D1
000027A4  EC99                    2447              ROR.L   #6,D1
000027A6  0281 00000003           2448              ANDI.L  #$03,D1
000027AC  0C01 0000               2449              CMPI.B  #%00,D1
000027B0  6700 001E               2450              BEQ     OP1011_EOR_B
000027B4  0281 00000003           2451              ANDI.L  #$03,D1
000027BA  0C01 0001               2452              CMPI.B  #%01,D1
000027BE  6700 001C               2453              BEQ     OP1011_EOR_W
000027C2  0281 00000003           2454              ANDI.L  #$03,D1
000027C8  0C01 0002               2455              CMPI.B  #%10,D1
000027CC  6700 001A               2456              BEQ     OP1011_EOR_L
000027D0                          2457            
000027D0                          2458  OP1011_EOR_B
000027D0                          2459              
000027D0  163C 0042               2460              MOVE.B  #'B',D3
000027D4  6100 1C1A               2461              BSR     PUSH_STACK
000027D8  6000 0016               2462              BRA     OP1011_RETURN
000027DC                          2463  OP1011_EOR_W
000027DC                          2464              
000027DC  163C 0057               2465              MOVE.B  #'W',D3
000027E0  6100 1C0E               2466              BSR     PUSH_STACK
000027E4  6000 000A               2467              BRA     OP1011_RETURN
000027E8                          2468  OP1011_EOR_L
000027E8                          2469              
000027E8  163C 004C               2470              MOVE.B  #'L',D3
000027EC  6100 1C02               2471              BSR     PUSH_STACK
000027F0                          2472  OP1011_RETURN            
000027F0                          2473  
000027F0                          2474              
000027F0                          2475  *GET DATA FROM ADDQ AND PRINT #0-8
000027F0                          2476       
000027F0                          2477              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000027F0  0285 0000FE3F           2478              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000027F6  0685 00000000           2479              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
000027FC                          2480  
000027FC  6100 1784               2481              BSR     GET_EA_EA_DEST
00002800  163C 002C               2482              MOVE.B  #',',D3
00002804  6100 1BEA               2483              BSR     PUSH_STACK
00002808  6100 1348               2484              BSR     GET_EA_EA_SRC
0000280C                          2485              
0000280C  4E75                    2486              RTS
0000280E                          2487              
0000280E                          2488              
0000280E                          2489              
0000280E                          2490              
0000280E                          2491  
0000280E                          2492  *---------------------------------------------------------------------------*
0000280E                          2493  * OP_CMPA: display CMPA 
0000280E                          2494  *---------------------------------------------------------------------------
0000280E  43F9 00004BF8           2495  OP_CMPA_W   LEA     DISP_CMPA_W,A1
00002814  103C 000E               2496              MOVE.B  #14,D0
00002818  4E4F                    2497              TRAP    #15
0000281A  183C 0001               2498              MOVE.B  #1,D4
0000281E  4E75                    2499              RTS
00002820                          2500  
00002820  43F9 00004C02           2501  OP_CMPA_L   LEA     DISP_CMPA_L,A1
00002826  103C 000E               2502              MOVE.B  #14,D0
0000282A  4E4F                    2503              TRAP    #15
0000282C  183C 0002               2504              MOVE.B  #2,D4
00002830  4E75                    2505              RTS
00002832                          2506  
00002832                          2507  *---------------------------------------------------------------------------*
00002832                          2508  * OP_CMP: display CMP and proceed to EA
00002832                          2509  *---------------------------------------------------------------------------*  
00002832  43F9 00004BDD           2510  OP_CMP_B    LEA     DISP_CMP_B,A1
00002838  103C 000E               2511              MOVE.B  #14,D0
0000283C  4E4F                    2512              TRAP    #15
0000283E  183C 0000               2513              MOVE.B  #0,D4
00002842  4EF9 00003702           2514              JMP     EA_GEN
00002848                          2515  
00002848  4E75                    2516              RTS
0000284A                          2517              
0000284A  43F9 00004BE6           2518  OP_CMP_W    LEA     DISP_CMP_W,A1
00002850  103C 000E               2519              MOVE.B  #14,D0
00002854  4E4F                    2520              TRAP    #15
00002856  183C 0001               2521              MOVE.B  #1,D4
0000285A  4EF9 00003702           2522              JMP     EA_GEN
00002860                          2523  
00002860  4E75                    2524              RTS
00002862                          2525              
00002862  43F9 00004BEF           2526  OP_CMP_L    LEA     DISP_CMP_L,A1
00002868  103C 000E               2527              MOVE.B  #14,D0
0000286C  4E4F                    2528              TRAP    #15
0000286E  183C 0002               2529              MOVE.B  #2,D4
00002872  4EF9 00003702           2530              JMP     EA_GEN
00002878                          2531  
00002878  4E75                    2532              RTS
0000287A                          2533              
0000287A                          2534  *---------------------------------------------------------------------------*
0000287A                          2535  * OP_EOR: display EOR
0000287A                          2536  *---------------------------------------------------------------------------*  
0000287A  43F9 00004BC2           2537  OP_EOR_B    LEA     DISP_EOR_B,A1
00002880  103C 000E               2538              MOVE.B  #14,D0
00002884  4E4F                    2539              TRAP    #15
00002886  183C 0000               2540              MOVE.B  #0,D4
0000288A  4E75                    2541              RTS
0000288C                          2542              
0000288C  43F9 00004BCB           2543  OP_EOR_W    LEA     DISP_EOR_W,A1
00002892  103C 000E               2544              MOVE.B  #14,D0
00002896  4E4F                    2545              TRAP    #15
00002898  183C 0001               2546              MOVE.B  #1,D4
0000289C  4E75                    2547              RTS
0000289E                          2548              
0000289E  43F9 00004BD4           2549  OP_EOR_L    LEA     DISP_EOR_L,A1
000028A4  103C 000E               2550              MOVE.B  #14,D0
000028A8  4E4F                    2551              TRAP    #15
000028AA  183C 0002               2552              MOVE.B  #2,D4
000028AE  4E75                    2553              RTS    
000028B0                          2554  
000028B0                          2555  *---------------------------------------------------------------------------*
000028B0                          2556  * OP1100: Decode and display MULS/AND and proceed to EA
000028B0                          2557  *---------------------------------------------------------------------------* 
000028B0  4280                    2558  OP1100      CLR.L   D0                 
000028B2  4281                    2559              CLR.L   D1    
000028B4  4284                    2560              CLR.L   D4                
000028B6  227C 00000000           2561              MOVEA.L #0, A1        
000028BC  2205                    2562              MOVE.L  D5,D1
000028BE  EA89                    2563              LSR.L   #5,D1
000028C0  0281 0000000E           2564              ANDI.L  #$E,D1
000028C6  0C41 000E               2565              CMPI.W  #$E,D1
000028CA  6700 0006               2566              BEQ     OP_MULS
000028CE  6000 00F6               2567              BRA     OP1100_DETERMINE_DN_EA_OR_EA_DN 
000028D2                          2568  
000028D2                          2569  OP_MULS                      
000028D2  4281                    2570              CLR.L   D1       
000028D4  4284                    2571              CLR.L   D4                   
000028D6  227C 00000000           2572              MOVEA.L #0, A1              
000028DC  2205                    2573              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
000028DE                          2574              *CLEAR D3
000028DE  4283                    2575              CLR.L   D3
000028E0                          2576  
000028E0                          2577  OP1100_MULS_DN_EA_OR_EA_DN 
000028E0                          2578              *LOAD STACK WITH THIS OPMODE
000028E0  6100 1B0E               2579              BSR     PUSH_STACK
000028E4  163C 004D               2580              MOVE.B  #'M',D3
000028E8  6100 1B06               2581              BSR     PUSH_STACK
000028EC  163C 0055               2582              MOVE.B  #'U',D3
000028F0  6100 1AFE               2583              BSR     PUSH_STACK
000028F4  163C 004C               2584              MOVE.B  #'L',D3
000028F8  6100 1AF6               2585              BSR     PUSH_STACK
000028FC  163C 0053               2586              MOVE.B  #'S',D3
00002900  6100 1AEE               2587              BSR     PUSH_STACK
00002904  163C 002E               2588              MOVE.B  #'.',D3
00002908  6100 1AE6               2589              BSR     PUSH_STACK
0000290C                          2590              
0000290C  2205                    2591              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
0000290E                          2592              
0000290E                          2593  OP1100_EA_DN_MULS           
0000290E                          2594              *BITS (7 TO 6) 
0000290E                          2595              *00 = .B
0000290E                          2596              *01 = .W
0000290E                          2597              *10 = .L 
0000290E  2205                    2598              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00002910  EC99                    2599              ROR.L   #6,D1
00002912  0281 00000003           2600              ANDI.L  #$03,D1
00002918  0C81 00000003           2601              CMPI.L  #%11,D1 *EQUALS .W
0000291E  6700 0014               2602              BEQ     OP1100_PRINT_W_MULS
00002922  0C81 00000000           2603              CMPI.L  #%00,D1 *EQUALS .L
00002928  6700 0052               2604              BEQ     OP1100_PRINT_L_MULS
0000292C                          2605              
0000292C  183C 0001               2606              MOVE.B  #1,D4               *ERROR READ
00002930  6000 0092               2607              BRA     OP1100_MULS_RETURN
00002934                          2608  OP1100_PRINT_W_MULS
00002934  163C 0057               2609              MOVE.B  #'W',D3
00002938  6100 1AB6               2610              BSR     PUSH_STACK
0000293C                          2611  
0000293C                          2612              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000293C  13FC 0000 00004D7A      2613              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002944  13FC 0000 00004D7B      2614              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000294C                          2615             
0000294C                          2616              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000294C  13FC 00B9 00004D7D      2617              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002954  13FC 0020 00004D7E      2618              MOVE.B   #$20,GET_SRC_START_END
0000295C                          2619  
0000295C                          2620             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000295C  0285 0000FE3F           2621              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002962  0685 00000000           2622              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002968                          2623  
00002968                          2624              
00002968  6100 11E8               2625              BSR     GET_EA_EA_SRC      *GETS <ea>
0000296C  163C 002C               2626              MOVE.B  #',',D3
00002970  6100 1A7E               2627              BSR     PUSH_STACK
00002974  6100 160C               2628              BSR     GET_EA_EA_DEST       *GETS Dn    
00002978                          2629              
00002978  6000 004A               2630              BRA     OP1100_MULS_RETURN
0000297C                          2631  OP1100_PRINT_L_MULS 
0000297C  163C 004C               2632              MOVE.B  #'L',D3
00002980  6100 1A6E               2633              BSR     PUSH_STACK
00002984                          2634              
00002984                          2635              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002984  13FC 0000 00004D7A      2636              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000298C  13FC 0000 00004D7B      2637              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002994                          2638             
00002994                          2639              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002994  13FC 00B9 00004D7D      2640              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000299C  13FC 0020 00004D7E      2641              MOVE.B   #$20,GET_SRC_START_END
000029A4                          2642  
000029A4                          2643              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000029A4  0285 0000FE3F           2644              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000029AA  0685 00000000           2645              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
000029B0                          2646  
000029B0                          2647                     
000029B0  6100 11A0               2648              BSR     GET_EA_EA_SRC      *GETS <ea>
000029B4  163C 002C               2649              MOVE.B  #',',D3
000029B8  6100 1A36               2650              BSR     PUSH_STACK                  
000029BC  6100 15C4               2651              BSR     GET_EA_EA_DEST       *GETS Dn    
000029C0                          2652  
000029C0                          2653              
000029C0  6000 0002               2654              BRA     OP1100_MULS_RETURN
000029C4                          2655              
000029C4                          2656  OP1100_MULS_RETURN
000029C4  4E75                    2657              RTS
000029C6                          2658              
000029C6                          2659  
000029C6                          2660  
000029C6                          2661  
000029C6                          2662  
000029C6                          2663  
000029C6                          2664  
000029C6                          2665  
000029C6                          2666  
000029C6                          2667  
000029C6                          2668  
000029C6                          2669  
000029C6                          2670  
000029C6                          2671  OP1100_DETERMINE_DN_EA_OR_EA_DN 
000029C6                          2672              *LOAD STACK WITH THIS OPMODE
000029C6  4283                    2673              CLR.L   D3
000029C8  6100 1A26               2674              BSR     PUSH_STACK
000029CC  163C 0041               2675              MOVE.B  #'A',D3
000029D0  6100 1A1E               2676              BSR     PUSH_STACK
000029D4  163C 004E               2677              MOVE.B  #'N',D3
000029D8  6100 1A16               2678              BSR     PUSH_STACK
000029DC  163C 0044               2679              MOVE.B  #'D',D3
000029E0  6100 1A0E               2680              BSR     PUSH_STACK
000029E4  163C 002E               2681              MOVE.B  #'.',D3
000029E8  6100 1A06               2682              BSR     PUSH_STACK
000029EC                          2683              
000029EC  2205                    2684              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
000029EE                          2685              
000029EE                          2686              *BITS (INDEX 8) 
000029EE                          2687              *0 = ADD.B/W/L <EA>,Dn
000029EE                          2688              *1 = ADD.B/W/L Dn,<EA> 
000029EE  E099                    2689              ROR.L   #8,D1
000029F0  0281 00000001           2690              ANDI.L  #$01,D1     *MASKS WITH 00000001
000029F6  0C81 00000000           2691              CMPI.L  #$00,D1     *IF EQUALS <ea>,Dn
000029FC  6700 0102               2692              BEQ     OP1100_EA_DN
00002A00                          2693              *else procede to Dn_EA
00002A00                          2694              
00002A00                          2695  OP1100_DN_EA
00002A00                          2696              *BITS (7 TO 6) 
00002A00                          2697              *00 = .B
00002A00                          2698              *01 = .W
00002A00                          2699              *10 = .L 
00002A00  2205                    2700              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00002A02  EC99                    2701              ROR.L   #6,D1
00002A04  0281 00000003           2702              ANDI.L  #$03,D1
00002A0A  0C81 00000000           2703              CMPI.L  #$00,D1 *EQUALS .B
00002A10  6700 0016               2704              BEQ     OP1100_PRINT_B2
00002A14  0C81 00000001           2705              CMPI.L  #$01,D1 *EQUALS .W
00002A1A  6700 0054               2706              BEQ     OP1100_PRINT_W2
00002A1E  0C81 00000002           2707              CMPI.L  #$02,D1 *EQUALS .L
00002A24  6700 0092               2708              BEQ     OP1100_PRINT_L2
00002A28                          2709  OP1100_PRINT_B2
00002A28                          2710              *PUSH 'B'
00002A28  163C 0042               2711              MOVE.B  #'B',D3
00002A2C  6100 19C2               2712              BSR     PUSH_STACK
00002A30                          2713             
00002A30                          2714              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002A30  13FC 0000 00004D7A      2715             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002A38  13FC 0083 00004D7B      2716             MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002A40                          2717             
00002A40                          2718             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002A40  13FC 00B9 00004D7D      2719             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002A48  13FC 0020 00004D7E      2720             MOVE.B   #$20,GET_SRC_START_END
00002A50                          2721  
00002A50                          2722              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002A50  0285 0000FE3F           2723              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002A56  0685 00000000           2724              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002A5C                          2725       
00002A5C  6100 1524               2726              BSR     GET_EA_EA_DEST      *GETS Dn
00002A60  163C 002C               2727              MOVE.B  #',',D3
00002A64  6100 198A               2728              BSR     PUSH_STACK                     
00002A68  6100 10E8               2729              BSR     GET_EA_EA_SRC       *GETS <ea>
00002A6C                          2730  
00002A6C                          2731              
00002A6C  6000 0192               2732              BRA     OP1100_AND_RETURN
00002A70                          2733  OP1100_PRINT_W2
00002A70  163C 0057               2734              MOVE.B  #'W',D3
00002A74  6100 197A               2735              BSR     PUSH_STACK
00002A78                          2736  
00002A78                          2737              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002A78  13FC 0000 00004D7A      2738              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002A80  13FC 0083 00004D7B      2739              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002A88                          2740             
00002A88                          2741              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002A88  13FC 00B9 00004D7D      2742              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002A90  13FC 0020 00004D7E      2743              MOVE.B   #$20,GET_SRC_START_END
00002A98                          2744  
00002A98                          2745              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002A98  0285 0000FE3F           2746              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002A9E  0685 00000000           2747              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A An Register (001) 
00002AA4                          2748  
00002AA4                          2749        
00002AA4  6100 14DC               2750              BSR     GET_EA_EA_DEST      *GETS Dn
00002AA8  163C 002C               2751              MOVE.B  #',',D3
00002AAC  6100 1942               2752              BSR     PUSH_STACK               
00002AB0  6100 10A0               2753              BSR     GET_EA_EA_SRC       *GETS <ea>       
00002AB4                          2754  
00002AB4                          2755  
00002AB4                          2756  
00002AB4  6000 049A               2757              BRA     OP1101_ADD_RETURN
00002AB8                          2758  OP1100_PRINT_L2 
00002AB8  163C 004C               2759              MOVE.B  #'L',D3
00002ABC  6100 1932               2760              BSR     PUSH_STACK
00002AC0                          2761              
00002AC0                          2762              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002AC0  13FC 0000 00004D7A      2763              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002AC8  13FC 0083 00004D7B      2764              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002AD0                          2765             
00002AD0                          2766              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002AD0  13FC 00B9 00004D7D      2767              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002AD8  13FC 0020 00004D7E      2768              MOVE.B   #$20,GET_SRC_START_END
00002AE0                          2769  
00002AE0                          2770             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002AE0  0285 0000FE3F           2771              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002AE6  0685 00000000           2772              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002AEC                          2773  
00002AEC                          2774               
00002AEC  6100 1494               2775              BSR     GET_EA_EA_DEST       *GETS Dn
00002AF0  163C 002C               2776              MOVE.B  #',',D3
00002AF4  6100 18FA               2777              BSR     PUSH_STACK          
00002AF8  6100 1058               2778              BSR     GET_EA_EA_SRC        *GETS <ea>
00002AFC                          2779  
00002AFC  6000 0102               2780              BRA     OP1100_AND_RETURN
00002B00                          2781              
00002B00                          2782  OP1100_EA_DN           
00002B00                          2783              *BITS (7 TO 6) 
00002B00                          2784              *00 = .B
00002B00                          2785              *01 = .W
00002B00                          2786              *10 = .L 
00002B00  2205                    2787              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00002B02  EC99                    2788              ROR.L   #6,D1
00002B04  0281 00000003           2789              ANDI.L  #$03,D1
00002B0A  0C81 00000000           2790              CMPI.L  #$00,D1 *EQUALS .B
00002B10  6700 0016               2791              BEQ     OP1100_PRINT_B
00002B14  0C81 00000001           2792              CMPI.L  #$01,D1 *EQUALS .W
00002B1A  6700 0054               2793              BEQ     OP1100_PRINT_W
00002B1E  0C81 00000002           2794              CMPI.L  #$02,D1 *EQUALS .L
00002B24  6700 0092               2795              BEQ     OP1100_PRINT_L
00002B28                          2796  OP1100_PRINT_B
00002B28  163C 0042               2797              MOVE.B  #'B',D3
00002B2C  6100 18C2               2798              BSR     PUSH_STACK
00002B30                          2799                
00002B30                          2800              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002B30  13FC 0000 00004D7A      2801              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002B38  13FC 0002 00004D7B      2802              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002B40                          2803             
00002B40                          2804              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002B40  13FC 00B9 00004D7D      2805              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002B48  13FC 0020 00004D7E      2806              MOVE.B   #$20,GET_SRC_START_END
00002B50                          2807  
00002B50                          2808             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002B50  0285 0000FE3F           2809              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002B56  0685 00000000           2810              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "AN" Register (001) 
00002B5C                          2811  
00002B5C                          2812              
00002B5C  6100 0FF4               2813              BSR     GET_EA_EA_SRC      *GETS <ea>
00002B60  163C 002C               2814              MOVE.B  #',',D3
00002B64  6100 188A               2815              BSR     PUSH_STACK          
00002B68  6100 1418               2816              BSR     GET_EA_EA_DEST       *GETS Dn
00002B6C                          2817              
00002B6C  6000 03E2               2818              BRA     OP1101_ADD_RETURN
00002B70                          2819  OP1100_PRINT_W
00002B70  163C 0057               2820              MOVE.B  #'W',D3
00002B74  6100 187A               2821              BSR     PUSH_STACK
00002B78                          2822  
00002B78                          2823              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002B78  13FC 0000 00004D7A      2824              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002B80  13FC 0002 00004D7B      2825              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002B88                          2826             
00002B88                          2827              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002B88  13FC 00B9 00004D7D      2828              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002B90  13FC 0020 00004D7E      2829              MOVE.B   #$20,GET_SRC_START_END
00002B98                          2830  
00002B98                          2831             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002B98  0285 0000FE3F           2832              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002B9E  0685 00000000           2833              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002BA4                          2834  
00002BA4                          2835              
00002BA4  6100 0FAC               2836              BSR     GET_EA_EA_SRC      *GETS <ea>
00002BA8  163C 002C               2837              MOVE.B  #',',D3
00002BAC  6100 1842               2838              BSR     PUSH_STACK
00002BB0  6100 13D0               2839              BSR     GET_EA_EA_DEST       *GETS Dn    
00002BB4                          2840              
00002BB4  6000 F988               2841              BRA     OP1001_ADD_RETURN
00002BB8                          2842  OP1100_PRINT_L 
00002BB8  163C 004C               2843              MOVE.B  #'L',D3
00002BBC  6100 1832               2844              BSR     PUSH_STACK
00002BC0                          2845              
00002BC0                          2846              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002BC0  13FC 0000 00004D7A      2847              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002BC8  13FC 0002 00004D7B      2848              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002BD0                          2849             
00002BD0                          2850              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002BD0  13FC 00B9 00004D7D      2851              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002BD8  13FC 0020 00004D7E      2852              MOVE.B   #$20,GET_SRC_START_END
00002BE0                          2853  
00002BE0                          2854              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002BE0  0285 0000FE3F           2855              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002BE6  0685 00000000           2856              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002BEC                          2857  
00002BEC                          2858                     
00002BEC  6100 0F64               2859              BSR     GET_EA_EA_SRC      *GETS <ea>
00002BF0  163C 002C               2860              MOVE.B  #',',D3
00002BF4  6100 17FA               2861              BSR     PUSH_STACK                  
00002BF8  6100 1388               2862              BSR     GET_EA_EA_DEST       *GETS Dn    
00002BFC                          2863  
00002BFC                          2864              
00002BFC  6000 0002               2865              BRA     OP1100_AND_RETURN
00002C00                          2866              
00002C00                          2867  OP1100_AND_RETURN
00002C00  4E75                    2868              RTS
00002C02                          2869  
00002C02                          2870  
00002C02                          2871  *---------------------------------------------------------------------------*
00002C02                          2872  * OP1101: Decode ADD/ADDA
00002C02                          2873  *---------------------------------------------------------------------------* 
00002C02  4280                    2874  OP1101      CLR.L   D0                  
00002C04  4281                    2875              CLR.L   D1       
00002C06  4284                    2876              CLR.L   D4                   
00002C08  227C 00000000           2877              MOVEA.L #0, A1              
00002C0E  2205                    2878              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
00002C10                          2879              
00002C10                          2880              *CLEAR D3
00002C10  4283                    2881              CLR.L   D3
00002C12                          2882              
00002C12                          2883              
00002C12                          2884              
00002C12                          2885              **INTEGRATING ADDA.W/.L INTO THIS CODE**
00002C12  2205                    2886              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00002C14                          2887              *BITS (INDEX 8) 
00002C14                          2888              *0 = ADD.B/W/L <EA>,Dn
00002C14                          2889              *1 = ADD.B/W/L Dn,<EA> 
00002C14  EC99                    2890              ROR.L   #6,D1
00002C16  0281 00000007           2891              ANDI.L  #$07,D1                 *MASKS WITH 00000111
00002C1C  0C81 00000007           2892              CMPI.L  #$07,D1                 *IF EQUALS <ea>,Dn
00002C22  6700 0010               2893              BEQ     OP1101_ADDA_L            *BRANCHES TO ADDA.L
00002C26  0C81 00000003           2894              CMPI.L  #$03,D1                 *IF EQUALS <ea>,Dn
00002C2C  6700 0078               2895              BEQ     OP1101_ADDA_W           *BRANCHES TO ADDA.W
00002C30  6000 00E6               2896              BRA     OP1101_DETERMINE_DN_EA_OR_EA_DN         *ELSE CHECK ADD.B/.W/.L
00002C34                          2897              
00002C34                          2898  OP1101_ADDA_L
00002C34                          2899              *LOAD STACK WITH THIS OPMODE
00002C34  6100 17BA               2900              BSR     PUSH_STACK
00002C38  163C 0041               2901              MOVE.B  #'A',D3
00002C3C  6100 17B2               2902              BSR     PUSH_STACK
00002C40  163C 0044               2903              MOVE.B  #'D',D3
00002C44  6100 17AA               2904              BSR     PUSH_STACK
00002C48  163C 0044               2905              MOVE.B  #'D',D3
00002C4C  6100 17A2               2906              BSR     PUSH_STACK
00002C50  163C 0041               2907              MOVE.B  #'A',D3
00002C54  6100 179A               2908              BSR     PUSH_STACK
00002C58  163C 002E               2909              MOVE.B  #'.',D3
00002C5C  6100 1792               2910              BSR     PUSH_STACK
00002C60  163C 004C               2911              MOVE.B  #'L',D3
00002C64  6100 178A               2912              BSR     PUSH_STACK
00002C68                          2913              
00002C68                          2914             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002C68  13FC 0000 00004D7A      2915             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002C70  13FC 0000 00004D7B      2916             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002C78                          2917             
00002C78                          2918             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002C78  13FC 00B9 00004D7D      2919             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002C80  13FC 0020 00004D7E      2920             MOVE.B   #$20,GET_SRC_START_END
00002C88                          2921  
00002C88                          2922              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002C88  0285 0000FE3F           2923              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002C8E  0685 00000040           2924              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002C94                          2925       
00002C94                          2926              *PRINT <EA>,AN
00002C94  6100 0EBC               2927              BSR     GET_EA_EA_SRC       *GETS <ea>
00002C98  163C 002C               2928              MOVE.B  #',',D3
00002C9C  6100 1752               2929              BSR     PUSH_STACK                     
00002CA0  6100 12E0               2930              BSR     GET_EA_EA_DEST      *GETS Dn
00002CA4                          2931  
00002CA4                          2932              
00002CA4                          2933              
00002CA4  4E75                    2934              RTS
00002CA6                          2935  OP1101_ADDA_W
00002CA6                          2936              *LOAD STACK WITH THIS OPMODE
00002CA6  6100 1748               2937              BSR     PUSH_STACK
00002CAA  163C 0041               2938              MOVE.B  #'A',D3
00002CAE  6100 1740               2939              BSR     PUSH_STACK
00002CB2  163C 0044               2940              MOVE.B  #'D',D3
00002CB6  6100 1738               2941              BSR     PUSH_STACK
00002CBA  163C 0044               2942              MOVE.B  #'D',D3
00002CBE  6100 1730               2943              BSR     PUSH_STACK
00002CC2  163C 0041               2944              MOVE.B  #'A',D3
00002CC6  6100 1728               2945              BSR     PUSH_STACK
00002CCA  163C 002E               2946              MOVE.B  #'.',D3
00002CCE  6100 1720               2947              BSR     PUSH_STACK
00002CD2  163C 0057               2948              MOVE.B  #'W',D3
00002CD6  6100 1718               2949              BSR     PUSH_STACK
00002CDA                          2950              
00002CDA                          2951             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002CDA  13FC 0000 00004D7A      2952             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002CE2  13FC 0000 00004D7B      2953             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002CEA                          2954             
00002CEA                          2955             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002CEA  13FC 00B9 00004D7D      2956             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002CF2  13FC 0020 00004D7E      2957             MOVE.B   #$20,GET_SRC_START_END
00002CFA                          2958  
00002CFA                          2959              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002CFA  0285 0000FE3F           2960              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002D00  0685 00000040           2961              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002D06                          2962       
00002D06                          2963              *PRINT <EA>,AN
00002D06  6100 0E4A               2964              BSR     GET_EA_EA_SRC       *GETS <ea>
00002D0A  163C 002C               2965              MOVE.B  #',',D3
00002D0E  6100 16E0               2966              BSR     PUSH_STACK                     
00002D12  6100 126E               2967              BSR     GET_EA_EA_DEST      *GETS Dn
00002D16                          2968  
00002D16  4E75                    2969              RTS
00002D18                          2970  
00002D18                          2971  OP1101_DETERMINE_DN_EA_OR_EA_DN 
00002D18                          2972              *LOAD STACK WITH THIS OPMODE
00002D18  6100 16D6               2973              BSR     PUSH_STACK
00002D1C  163C 0041               2974              MOVE.B  #'A',D3
00002D20  6100 16CE               2975              BSR     PUSH_STACK
00002D24  163C 0044               2976              MOVE.B  #'D',D3
00002D28  6100 16C6               2977              BSR     PUSH_STACK
00002D2C  163C 0044               2978              MOVE.B  #'D',D3
00002D30  6100 16BE               2979              BSR     PUSH_STACK
00002D34  163C 002E               2980              MOVE.B  #'.',D3
00002D38  6100 16B6               2981              BSR     PUSH_STACK
00002D3C                          2982              
00002D3C  2205                    2983              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00002D3E                          2984              
00002D3E                          2985              *BITS (INDEX 8) 
00002D3E                          2986              *0 = ADD.B/W/L <EA>,Dn
00002D3E                          2987              *1 = ADD.B/W/L Dn,<EA> 
00002D3E  E099                    2988              ROR.L   #8,D1
00002D40  0281 00000001           2989              ANDI.L  #$01,D1     *MASKS WITH 00000001
00002D46  0C81 00000000           2990              CMPI.L  #$00,D1     *IF EQUALS <ea>,Dn
00002D4C  6700 0102               2991              BEQ     OP1101_EA_DN
00002D50                          2992              *else procede to Dn_EA
00002D50                          2993              
00002D50                          2994  OP1101_DN_EA
00002D50                          2995              *BITS (7 TO 6) 
00002D50                          2996              *00 = .B
00002D50                          2997              *01 = .W
00002D50                          2998              *10 = .L 
00002D50  2205                    2999              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00002D52  EC99                    3000              ROR.L   #6,D1
00002D54  0281 00000003           3001              ANDI.L  #$03,D1
00002D5A  0C81 00000000           3002              CMPI.L  #$00,D1 *EQUALS .B
00002D60  6700 0016               3003              BEQ     OP1101_PRINT_B2
00002D64  0C81 00000001           3004              CMPI.L  #$01,D1 *EQUALS .W
00002D6A  6700 0054               3005              BEQ     OP1101_PRINT_W2
00002D6E  0C81 00000002           3006              CMPI.L  #$02,D1 *EQUALS .L
00002D74  6700 0092               3007              BEQ     OP1101_PRINT_L2
00002D78                          3008  OP1101_PRINT_B2
00002D78                          3009              *PUSH 'B'
00002D78  163C 0042               3010              MOVE.B  #'B',D3
00002D7C  6100 1672               3011              BSR     PUSH_STACK
00002D80                          3012             
00002D80                          3013              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002D80  13FC 0002 00004D7A      3014             MOVE.B   #$02,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002D88  13FC 0083 00004D7B      3015             MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002D90                          3016             
00002D90                          3017             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002D90  13FC 00B9 00004D7D      3018             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002D98  13FC 0020 00004D7E      3019             MOVE.B   #$20,GET_SRC_START_END
00002DA0                          3020  
00002DA0                          3021              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002DA0  0285 0000FE3F           3022              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002DA6  0685 00000000           3023              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002DAC                          3024       
00002DAC  6100 11D4               3025              BSR     GET_EA_EA_DEST      *GETS Dn
00002DB0  163C 002C               3026              MOVE.B  #',',D3
00002DB4  6100 163A               3027              BSR     PUSH_STACK                     
00002DB8  6100 0D98               3028              BSR     GET_EA_EA_SRC       *GETS <ea>
00002DBC                          3029  
00002DBC                          3030              
00002DBC  6000 0192               3031              BRA     OP1101_ADD_RETURN
00002DC0                          3032  OP1101_PRINT_W2
00002DC0  163C 0057               3033              MOVE.B  #'W',D3
00002DC4  6100 162A               3034              BSR     PUSH_STACK
00002DC8                          3035  
00002DC8                          3036              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002DC8  13FC 0000 00004D7A      3037              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002DD0  13FC 0083 00004D7B      3038              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002DD8                          3039             
00002DD8                          3040              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002DD8  13FC 00B9 00004D7D      3041              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002DE0  13FC 0020 00004D7E      3042              MOVE.B   #$20,GET_SRC_START_END
00002DE8                          3043  
00002DE8                          3044              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002DE8  0285 0000FE3F           3045              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002DEE  0685 00000000           3046              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002DF4                          3047  
00002DF4                          3048        
00002DF4  6100 118C               3049              BSR     GET_EA_EA_DEST      *GETS Dn
00002DF8  163C 002C               3050              MOVE.B  #',',D3
00002DFC  6100 15F2               3051              BSR     PUSH_STACK               
00002E00  6100 0D50               3052              BSR     GET_EA_EA_SRC       *GETS <ea>       
00002E04                          3053  
00002E04                          3054  
00002E04                          3055  
00002E04  6000 014A               3056              BRA     OP1101_ADD_RETURN
00002E08                          3057  OP1101_PRINT_L2 
00002E08  163C 004C               3058              MOVE.B  #'L',D3
00002E0C  6100 15E2               3059              BSR     PUSH_STACK
00002E10                          3060              
00002E10                          3061              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002E10  13FC 0000 00004D7A      3062              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002E18  13FC 0083 00004D7B      3063              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002E20                          3064             
00002E20                          3065              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002E20  13FC 00B9 00004D7D      3066              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002E28  13FC 0020 00004D7E      3067              MOVE.B   #$20,GET_SRC_START_END
00002E30                          3068  
00002E30                          3069             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002E30  0285 0000FE3F           3070              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002E36  0685 00000000           3071              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002E3C                          3072  
00002E3C                          3073               
00002E3C  6100 1144               3074              BSR     GET_EA_EA_DEST       *GETS Dn
00002E40  163C 002C               3075              MOVE.B  #',',D3
00002E44  6100 15AA               3076              BSR     PUSH_STACK          
00002E48  6100 0D08               3077              BSR     GET_EA_EA_SRC        *GETS <ea>
00002E4C                          3078  
00002E4C  6000 0102               3079              BRA     OP1101_ADD_RETURN
00002E50                          3080              
00002E50                          3081  OP1101_EA_DN           
00002E50                          3082              *BITS (7 TO 6) 
00002E50                          3083              *00 = .B
00002E50                          3084              *01 = .W
00002E50                          3085              *10 = .L 
00002E50  2205                    3086              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00002E52  EC99                    3087              ROR.L   #6,D1
00002E54  0281 00000003           3088              ANDI.L  #$03,D1
00002E5A  0C81 00000000           3089              CMPI.L  #$00,D1 *EQUALS .B
00002E60  6700 0016               3090              BEQ     OP1101_PRINT_B
00002E64  0C81 00000001           3091              CMPI.L  #$01,D1 *EQUALS .W
00002E6A  6700 0054               3092              BEQ     OP1101_PRINT_W
00002E6E  0C81 00000002           3093              CMPI.L  #$02,D1 *EQUALS .L
00002E74  6700 0092               3094              BEQ     OP1101_PRINT_L
00002E78                          3095  OP1101_PRINT_B
00002E78  163C 0042               3096              MOVE.B  #'B',D3
00002E7C  6100 1572               3097              BSR     PUSH_STACK
00002E80                          3098                
00002E80                          3099              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002E80  13FC 0002 00004D7A      3100              MOVE.B   #$02,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002E88  13FC 0002 00004D7B      3101              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002E90                          3102             
00002E90                          3103              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002E90  13FC 00B9 00004D7D      3104              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002E98  13FC 0020 00004D7E      3105              MOVE.B   #$20,GET_SRC_START_END
00002EA0                          3106  
00002EA0                          3107             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002EA0  0285 0000FE3F           3108              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002EA6  0685 00000000           3109              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002EAC                          3110  
00002EAC                          3111              
00002EAC  6100 0CA4               3112              BSR     GET_EA_EA_SRC      *GETS <ea>
00002EB0  163C 002C               3113              MOVE.B  #',',D3
00002EB4  6100 153A               3114              BSR     PUSH_STACK          
00002EB8  6100 10C8               3115              BSR     GET_EA_EA_DEST       *GETS Dn
00002EBC                          3116              
00002EBC  6000 0092               3117              BRA     OP1101_ADD_RETURN
00002EC0                          3118  OP1101_PRINT_W
00002EC0  163C 0057               3119              MOVE.B  #'W',D3
00002EC4  6100 152A               3120              BSR     PUSH_STACK
00002EC8                          3121  
00002EC8                          3122              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002EC8  13FC 0000 00004D7A      3123              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002ED0  13FC 0000 00004D7B      3124              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002ED8                          3125             
00002ED8                          3126              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002ED8  13FC 00B9 00004D7D      3127              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002EE0  13FC 0020 00004D7E      3128              MOVE.B   #$20,GET_SRC_START_END
00002EE8                          3129  
00002EE8                          3130             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002EE8  0285 0000FE3F           3131              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002EEE  0685 00000000           3132              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002EF4                          3133  
00002EF4                          3134              
00002EF4  6100 0C5C               3135              BSR     GET_EA_EA_SRC      *GETS <ea>
00002EF8  163C 002C               3136              MOVE.B  #',',D3
00002EFC  6100 14F2               3137              BSR     PUSH_STACK
00002F00  6100 1080               3138              BSR     GET_EA_EA_DEST       *GETS Dn    
00002F04                          3139              
00002F04  6000 004A               3140              BRA     OP1101_ADD_RETURN
00002F08                          3141  OP1101_PRINT_L 
00002F08  163C 004C               3142              MOVE.B  #'L',D3
00002F0C  6100 14E2               3143              BSR     PUSH_STACK
00002F10                          3144              
00002F10                          3145              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002F10  13FC 0000 00004D7A      3146              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002F18  13FC 0000 00004D7B      3147              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002F20                          3148             
00002F20                          3149              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002F20  13FC 00B9 00004D7D      3150              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002F28  13FC 0020 00004D7E      3151              MOVE.B   #$20,GET_SRC_START_END
00002F30                          3152  
00002F30                          3153              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002F30  0285 0000FE3F           3154              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002F36  0685 00000000           3155              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002F3C                          3156  
00002F3C                          3157                     
00002F3C  6100 0C14               3158              BSR     GET_EA_EA_SRC      *GETS <ea>
00002F40  163C 002C               3159              MOVE.B  #',',D3
00002F44  6100 14AA               3160              BSR     PUSH_STACK                  
00002F48  6100 1038               3161              BSR     GET_EA_EA_DEST       *GETS Dn    
00002F4C                          3162  
00002F4C                          3163              
00002F4C  6000 0002               3164              BRA     OP1101_ADD_RETURN
00002F50                          3165              
00002F50                          3166  OP1101_ADD_RETURN
00002F50  4E75                    3167              RTS
00002F52                          3168              
00002F52                          3169              *ADDW
00002F52  0C01 0006               3170              CMPI.B  #$6,D1
00002F56  6700 0056               3171              BEQ     OP_ADDA_W
00002F5A  0C01 000E               3172              CMPI.B  #$E,D1
00002F5E  6700 0066               3173              BEQ     OP_ADDA_L 
00002F62                          3174  
00002F62  4EF8 1760               3175              JMP     OP_DATA  
00002F66                          3176            
00002F66                          3177  *---------------------------------------------------------------------------*
00002F66                          3178  * OP_ADD: display ADD and proceed to EA
00002F66                          3179  *---------------------------------------------------------------------------*  
00002F66  43F9 00004C31           3180  OP_ADD_B    LEA     DISP_ADD_B,A1
00002F6C  103C 000E               3181              MOVE.B  #14,D0
00002F70  4E4F                    3182              TRAP    #15
00002F72  183C 0000               3183              MOVE.B  #0,D4
00002F76  4EF9 00003702           3184              JMP     EA_GEN
00002F7C                          3185  
00002F7C  4E75                    3186              RTS
00002F7E                          3187  
00002F7E  43F9 00004C3A           3188  OP_ADD_W    LEA     DISP_ADD_W,A1
00002F84  103C 000E               3189              MOVE.B  #14,D0
00002F88  4E4F                    3190              TRAP    #15
00002F8A  183C 0001               3191              MOVE.B  #1,D4
00002F8E  4EF9 00003702           3192              JMP     EA_GEN
00002F94                          3193  
00002F94  4E75                    3194              RTS
00002F96                          3195  
00002F96  43F9 00004C43           3196  OP_ADD_L    LEA     DISP_ADD_L,A1
00002F9C  103C 000E               3197              MOVE.B  #14,D0
00002FA0  4E4F                    3198              TRAP    #15
00002FA2  183C 0002               3199              MOVE.B  #2,D4
00002FA6  4EF9 00003702           3200              JMP     EA_GEN
00002FAC                          3201  
00002FAC  4E75                    3202              RTS
00002FAE                          3203  
00002FAE                          3204  *---------------------------------------------------------------------------*
00002FAE                          3205  * OP_ADDA: display ADDA and proceed to EA
00002FAE                          3206  *---------------------------------------------------------------------------*  
00002FAE  43F9 00004C4C           3207  OP_ADDA_W   LEA     DISP_ADDA_W,A1
00002FB4  103C 000E               3208              MOVE.B  #14,D0
00002FB8  4E4F                    3209              TRAP    #15
00002FBA  183C 0001               3210              MOVE.B  #1,D4
00002FBE  4EF9 00003702           3211              JMP     EA_GEN
00002FC4                          3212  
00002FC4  4E75                    3213              RTS
00002FC6                          3214  
00002FC6  43F9 00004C56           3215  OP_ADDA_L   LEA     DISP_ADDA_L,A1
00002FCC  103C 000E               3216              MOVE.B  #14,D0
00002FD0  4E4F                    3217              TRAP    #15
00002FD2  183C 0002               3218              MOVE.B  #2,D4
00002FD6  4EF9 00003702           3219              JMP     EA_GEN
00002FDC                          3220  
00002FDC  4E75                    3221              RTS
00002FDE                          3222              
00002FDE                          3223  *---------------------------------------------------------------------------*
00002FDE                          3224  * OP1110: LSR/LSL/ASR/ASL/ROL/ROR
00002FDE                          3225  *---------------------------------------------------------------------------* 
00002FDE  4280                    3226  OP1110      CLR.L   D0                  
00002FE0  4281                    3227              CLR.L   D1   
00002FE2  4284                    3228              CLR.L   D4                   
00002FE4  227C 00000000           3229              MOVEA.L #0, A1                 
00002FEA  2205                    3230              MOVE.L  D5,D1
00002FEC                          3231              
00002FEC                          3232              *1)CHECK FOR MEMORY ROTATE/SHIFT FIRST
00002FEC  2205                    3233              MOVE.L  D5,D1                   *RESET
00002FEE  0281 0000FEC0           3234              ANDI.L  #%1111111011000000,D1
00002FF4  0C81 0000E0C0           3235              CMPI.L  #%1110000011000000,D1
00002FFA  6700 0276               3236              BEQ     OP_ASX                  *ASX
00002FFE                          3237  
00002FFE                          3238              
00002FFE  0281 0000FEC0           3239              ANDI.L  #%1111111011000000,D1
00003004  0C81 0000E6C0           3240              CMPI.L  #%1110011011000000,D1
0000300A  6700 0480               3241              BEQ     OP_ROX                  *ROX
0000300E                          3242  
0000300E  2205                    3243              MOVE.L  D5,D1                   *RESET
00003010  0281 0000FEC0           3244              ANDI.L  #%1111111011000000,D1
00003016  0C81 0000E2C0           3245              CMPI.L  #%1110001011000000,D1
0000301C  6700 003A               3246              BEQ     OP_LSX                  *LSX
00003020                          3247  
00003020                          3248    
00003020                          3249              *2) CHECK FOR REGISTER SHIFTS
00003020  2205                    3250              MOVE.L  D5,D1                   *RESET
00003022  0281 0000F018           3251              ANDI.L  #%1111000000011000,D1
00003028  0C81 0000E008           3252              CMPI.L  #%1110000000001000,D1
0000302E  6700 0028               3253              BEQ     OP_LSX                  *LSX
00003032                          3254  
00003032                          3255              
00003032  2205                    3256              MOVE.L  D5,D1                   *RESET
00003034  0281 0000F018           3257              ANDI.L  #%1111000000011000,D1
0000303A  0C81 0000E000           3258              CMPI.L  #%1110000000000000,D1
00003040  6700 0230               3259              BEQ     OP_ASX                  *ASX
00003044                          3260  
00003044                          3261              
00003044  2205                    3262              MOVE.L  D5,D1                   *RESET
00003046  0281 0000F018           3263              ANDI.L  #%1111000000011000,D1
0000304C  0C81 0000E018           3264              CMPI.L  #%1110000000011000,D1
00003052  6700 0438               3265              BEQ     OP_ROX                  *ROX
00003056                          3266  
00003056                          3267  
00003056                          3268                          
00003056                          3269  OP1110_RETURN       
00003056  4E75                    3270              RTS
00003058                          3271  
00003058                          3272  
00003058                          3273  *---------------------------------------------------------------------------*
00003058                          3274  * OP_LSR: decode and display LSR
00003058                          3275  *---------------------------------------------------------------------------*        
00003058                          3276  OP_LSX     
00003058  163C 004C               3277              MOVE.B  #'L',D3
0000305C  6100 1392               3278              BSR     PUSH_STACK
00003060  163C 0053               3279              MOVE.B  #'S',D3
00003064  6100 138A               3280              BSR     PUSH_STACK
00003068                          3281              
00003068                          3282              *FIND IF ITS RIGHT OR LEFT DIR
00003068  2205                    3283              MOVE.L  D5,D1                   *RESET
0000306A  0281 00000100           3284              ANDI.L  #%0000000100000000,D1
00003070  0C81 00000000           3285              CMPI.L  #%0000000000000000,D1   * RIGHT CHECK
00003076  6700 000E               3286              BEQ     OP_LSX_R      
0000307A  163C 004C               3287              MOVE.B  #'L',D3
0000307E  6100 1370               3288              BSR     PUSH_STACK
00003082  6000 000A               3289              BRA     OP_LSX_DIR
00003086                          3290  OP_LSX_R           
00003086  163C 0052               3291              MOVE.B  #'R',D3
0000308A  6100 1364               3292              BSR     PUSH_STACK
0000308E                          3293              
0000308E                          3294  OP_LSX_DIR
0000308E  163C 002E               3295              MOVE.B  #'.',D3
00003092  6100 135C               3296              BSR     PUSH_STACK
00003096                          3297  
00003096                          3298              *FIND SIZE OF OPCODE
00003096  2205                    3299              MOVE.L  D5,D1                   *RESET
00003098  0281 000000C0           3300              ANDI.L  #%0000000011000000,D1
0000309E  0C81 00000080           3301              CMPI.L  #%0000000010000000,D1            *L
000030A4  6700 0016               3302              BEQ     OP_LSX_L
000030A8  0C81 00000040           3303              CMPI.L  #%0000000001000000,D1            *W
000030AE  6700 0018               3304              BEQ     OP_LSX_W  
000030B2  0C81 00000000           3305              CMPI.L  #%0000000000000000,D1            *W
000030B8  6700 001A               3306              BEQ     OP_LSX_B       
000030BC                          3307                                      *OTHERWISE B    
000030BC                          3308              
000030BC                          3309  OP_LSX_L
000030BC  163C 004C               3310              MOVE.B  #'L',D3
000030C0  6100 132E               3311              BSR     PUSH_STACK
000030C4  6000 001A               3312              BRA     OP_LSX_CHECK_FORMAT 
000030C8                          3313  OP_LSX_W
000030C8  163C 0057               3314              MOVE.B  #'W',D3
000030CC  6100 1322               3315              BSR     PUSH_STACK
000030D0  6000 000E               3316              BRA     OP_LSX_CHECK_FORMAT 
000030D4                          3317  OP_LSX_B
000030D4  163C 0042               3318              MOVE.B  #'B',D3
000030D8  6100 1316               3319              BSR     PUSH_STACK
000030DC  6000 0002               3320              BRA     OP_LSX_CHECK_FORMAT 
000030E0                          3321                        
000030E0                          3322  OP_LSX_CHECK_FORMAT              
000030E0                          3323              * CHECKS IF ITS A MEMORY SHIFT FORMAT
000030E0  2205                    3324              MOVE.L  D5,D1                   *RESET
000030E2  0281 0000FEC0           3325              ANDI.L  #%1111111011000000,D1
000030E8  0C81 0000E2C0           3326              CMPI.L  #%1110001011000000,D1
000030EE  6700 0156               3327              BEQ     OP_LSX_MEMORY           
000030F2                          3328              
000030F2                          3329              *ELSE ITS REGISTER
000030F2                          3330  OP_LSX_REGISTER
000030F2                          3331             *TODO
000030F2                          3332             *CHECK IF ITS INTERMEDIATE OR REGISTER
000030F2  2205                    3333             MOVE.L  D5,D1                   *RESET
000030F4  EA99                    3334             ROR.L   #5,D1 
000030F6  0281 00000001           3335             ANDI.L  #1,D1
000030FC  0C81 00000000           3336             CMPI.L  #0,D1                    * 1=DATA REGISTER 0= INTERMEDIATE(1-7)
00003102  6700 003E               3337             BEQ     OP_LSX_INTERMEDIATE
00003106                          3338             *ELSE ITS DATA REGISTER
00003106                          3339  
00003106                          3340             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00003106  13FC 0082 00004D7A      3341             MOVE.B   #$82,DEST_REGISTER_FORMAT
0000310E  13FC 0000 00004D7B      3342             MOVE.B   #$00,SRC_REGISTER_FORMAT
00003116                          3343             
00003116                          3344             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00003116  13FC 00B9 00004D7D      3345             MOVE.B   #$B9,GET_DST_START_END
0000311E  13FC 0020 00004D7E      3346             MOVE.B   #$20,GET_SRC_START_END
00003126                          3347             
00003126                          3348             *SETS BOTH SRC/DEST MODES TO "Dn"
00003126  0285 0000FE07           3349             ANDI.L   #%1111111000000111,D5
0000312C  0685 00000000           3350             ADDI.L   #%0000000000000000,D5
00003132                          3351             
00003132                          3352              *CLEAR D3
00003132  4283                    3353              CLR.L   D3
00003134                          3354           
00003134  163C 002C               3355              MOVE.B  #',',D3
00003138  6100 12B6               3356              BSR     PUSH_STACK
0000313C  6100 0A14               3357              BSR     GET_EA_EA_SRC
00003140                          3358              
00003140  4E75                    3359              RTS
00003142                          3360  
00003142                          3361  OP_LSX_INTERMEDIATE
00003142                          3362             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00003142  13FC 0082 00004D7A      3363             MOVE.B   #$82,DEST_REGISTER_FORMAT
0000314A  13FC 0000 00004D7B      3364             MOVE.B   #$00,SRC_REGISTER_FORMAT
00003152                          3365             
00003152                          3366             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00003152  13FC 00B9 00004D7D      3367             MOVE.B   #$B9,GET_DST_START_END
0000315A  13FC 0020 00004D7E      3368             MOVE.B   #$20,GET_SRC_START_END
00003162                          3369             
00003162                          3370             *SETS BOTH SRC/DEST MODES TO "Dn"
00003162  0285 0000FE07           3371             ANDI.L   #%1111111000000111,D5
00003168  0685 00000000           3372             ADDI.L   #%0000000000000000,D5
0000316E                          3373             
0000316E                          3374              *CLEAR D3
0000316E  4283                    3375              CLR.L   D3
00003170                          3376             
00003170                          3377  *-------------------------grabbing #immediate data-----------------------*
00003170                          3378  
00003170                          3379  *GET DATA FROM ADDQ AND PRINT #0-8
00003170  163C 0020               3380              MOVE.B  #' ',D3
00003174  6100 127A               3381              BSR     PUSH_STACK
00003178  163C 0023               3382              MOVE.B  #'#',D3
0000317C  6100 1272               3383              BSR     PUSH_STACK 
00003180                          3384  
00003180                          3385                       
00003180                          3386              *GET DATA #   
00003180  2205                    3387              MOVE.L  D5,D1
00003182  EC99                    3388              ROR.L   #6,D1            
00003184  E699                    3389              ROR.L   #3,D1
00003186  0281 00000007           3390              ANDI.L  #$07,D1
0000318C                          3391              
0000318C  0C01 0000               3392              CMPI.B  #%000,D1
00003190  6700 003A               3393              BEQ     OP_LSX_0
00003194  0C01 0001               3394              CMPI.B  #%001,D1
00003198  6700 003E               3395              BEQ     OP_LSX_1
0000319C  0C01 0002               3396              CMPI.B  #%010,D1
000031A0  6700 0042               3397              BEQ     OP_LSX_2
000031A4  0C01 0003               3398              CMPI.B  #%011,D1
000031A8  6700 0046               3399              BEQ     OP_LSX_3
000031AC  0C01 0004               3400              CMPI.B  #%100,D1
000031B0  6700 004A               3401              BEQ     OP_LSX_4
000031B4  0C01 0005               3402              CMPI.B  #%101,D1
000031B8  6700 004E               3403              BEQ     OP_LSX_5
000031BC  0C01 0006               3404              CMPI.B  #%110,D1
000031C0  6700 0052               3405              BEQ     OP_LSX_6
000031C4  0C01 0007               3406              CMPI.B  #%111,D1
000031C8  6700 0056               3407              BEQ     OP_LSX_7
000031CC                          3408              
000031CC                          3409  OP_LSX_0
000031CC  163C 0030               3410              MOVE.B  #'0',D3
000031D0  6100 121E               3411              BSR     PUSH_STACK
000031D4  6000 005E               3412              BRA     OP_LSX_AFTER_IMMEDIATE            
000031D8                          3413  OP_LSX_1
000031D8  163C 0031               3414              MOVE.B  #'1',D3
000031DC  6100 1212               3415              BSR     PUSH_STACK
000031E0  6000 0052               3416              BRA     OP_LSX_AFTER_IMMEDIATE            
000031E4                          3417  OP_LSX_2
000031E4  163C 0032               3418              MOVE.B  #'2',D3
000031E8  6100 1206               3419              BSR     PUSH_STACK
000031EC  6000 0046               3420              BRA     OP_LSX_AFTER_IMMEDIATE            
000031F0                          3421  OP_LSX_3
000031F0  163C 0033               3422              MOVE.B  #'3',D3
000031F4  6100 11FA               3423              BSR     PUSH_STACK
000031F8  6000 003A               3424              BRA     OP_LSX_AFTER_IMMEDIATE            
000031FC                          3425  OP_LSX_4
000031FC  163C 0034               3426              MOVE.B  #'4',D3
00003200  6100 11EE               3427              BSR     PUSH_STACK
00003204  6000 002E               3428              BRA     OP_LSX_AFTER_IMMEDIATE           
00003208                          3429  OP_LSX_5
00003208  163C 0035               3430              MOVE.B  #'5',D3
0000320C  6100 11E2               3431              BSR     PUSH_STACK
00003210  6000 0022               3432              BRA     OP_LSX_AFTER_IMMEDIATE
00003214                          3433  OP_LSX_6
00003214  163C 0036               3434              MOVE.B  #'6',D3
00003218  6100 11D6               3435              BSR     PUSH_STACK
0000321C  6000 0016               3436              BRA     OP_LSX_AFTER_IMMEDIATE
00003220                          3437  OP_LSX_7
00003220  163C 0037               3438              MOVE.B  #'7',D3
00003224  6100 11CA               3439              BSR     PUSH_STACK
00003228  6000 000A               3440              BRA     OP_LSX_AFTER_IMMEDIATE
0000322C                          3441  
0000322C                          3442  OP_LSX_8
0000322C  163C 0038               3443              MOVE.B  #'8',D3
00003230  6100 11BE               3444              BSR     PUSH_STACK
00003234                          3445              
00003234                          3446  OP_LSX_AFTER_IMMEDIATE            
00003234                          3447  
00003234                          3448  *-------------------------grabbing #immediate data-----------------------*
00003234                          3449  
00003234  163C 002C               3450              MOVE.B  #',',D3
00003238  6100 11B6               3451              BSR     PUSH_STACK
0000323C  6100 0914               3452              BSR     GET_EA_EA_SRC
00003240                          3453              
00003240  4E75                    3454              RTS
00003242                          3455  
00003242  6000 002A               3456              BRA     OP_LSX_RETURN
00003246                          3457              
00003246                          3458              
00003246                          3459  OP_LSX_MEMORY
00003246                          3460             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00003246  13FC 0083 00004D7B      3461             MOVE.B   #$83,SRC_REGISTER_FORMAT
0000324E                          3462             
0000324E                          3463             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000324E  13FC 00B9 00004D7D      3464             MOVE.B   #$B9,GET_DST_START_END
00003256  13FC 0020 00004D7E      3465             MOVE.B   #$20,GET_SRC_START_END
0000325E                          3466             
0000325E                          3467             *pop previous thing out
0000325E  6100 1198               3468             BSR      POP_STACK
00003262                          3469             
00003262                          3470             *print w
00003262  163C 0057               3471             MOVE.B  #'W',D3
00003266  6100 1188               3472             BSR     PUSH_STACK
0000326A  6100 08E6               3473             BSR     GET_EA_EA_SRC
0000326E                          3474  
0000326E                          3475  OP_LSX_RETURN
0000326E  6000 FDE6               3476              BRA     OP1110_RETURN  
00003272                          3477              
00003272                          3478  *---------------------------------------------------------------------------*
00003272                          3479  * OP_LSR: decode and display LSR IMMEDIATE/REGISTER
00003272                          3480  *---------------------------------------------------------------------------*        
00003272                          3481  OP_ASX
00003272  163C 0041               3482              MOVE.B  #'A',D3
00003276  6100 1178               3483              BSR     PUSH_STACK
0000327A  163C 0053               3484              MOVE.B  #'S',D3
0000327E  6100 1170               3485              BSR     PUSH_STACK
00003282                          3486              
00003282                          3487              *FIND IF ITS RIGHT OR LEFT DIR
00003282  2205                    3488              MOVE.L  D5,D1                   *RESET
00003284  0281 00000100           3489              ANDI.L  #%0000000100000000,D1
0000328A  0C81 00000000           3490              CMPI.L  #%0000000000000000,D1   * RIGHT CHECK
00003290  6700 000E               3491              BEQ     OP_ASX_R      
00003294  163C 004C               3492              MOVE.B  #'L',D3
00003298  6100 1156               3493              BSR     PUSH_STACK
0000329C  6000 000A               3494              BRA     OP_ASX_DIR
000032A0                          3495  OP_ASX_R           
000032A0  163C 0052               3496              MOVE.B  #'R',D3
000032A4  6100 114A               3497              BSR     PUSH_STACK
000032A8                          3498              
000032A8                          3499  OP_ASX_DIR
000032A8  163C 002E               3500              MOVE.B  #'.',D3
000032AC  6100 1142               3501              BSR     PUSH_STACK
000032B0                          3502  
000032B0                          3503              *FIND SIZE OF OPCODE
000032B0  2205                    3504              MOVE.L  D5,D1                   *RESET
000032B2  0281 000000C0           3505              ANDI.L  #%0000000011000000,D1
000032B8  0C81 00000080           3506              CMPI.L  #%0000000010000000,D1            *L
000032BE  6700 0016               3507              BEQ     OP_ASX_L
000032C2  0C81 00000040           3508              CMPI.L  #%0000000001000000,D1            *W
000032C8  6700 0018               3509              BEQ     OP_ASX_W  
000032CC  0C81 00000000           3510              CMPI.L  #%0000000000000000,D1            *W
000032D2  6700 001A               3511              BEQ     OP_ASX_B       
000032D6                          3512                                      *OTHERWISE B    
000032D6                          3513              
000032D6                          3514  OP_ASX_L
000032D6  163C 004C               3515              MOVE.B  #'L',D3
000032DA  6100 1114               3516              BSR     PUSH_STACK
000032DE  6000 001A               3517              BRA     OP_ASX_CHECK_FORMAT 
000032E2                          3518  OP_ASX_W
000032E2  163C 0057               3519              MOVE.B  #'W',D3
000032E6  6100 1108               3520              BSR     PUSH_STACK
000032EA  6000 000E               3521              BRA     OP_ASX_CHECK_FORMAT 
000032EE                          3522  OP_ASX_B
000032EE  163C 0042               3523              MOVE.B  #'B',D3
000032F2  6100 10FC               3524              BSR     PUSH_STACK
000032F6  6000 0002               3525              BRA     OP_ASX_CHECK_FORMAT 
000032FA                          3526                        
000032FA                          3527  OP_ASX_CHECK_FORMAT              
000032FA                          3528              * CHECKS IF ITS A MEMORY SHIFT FORMAT
000032FA  2205                    3529              MOVE.L  D5,D1                   *RESET
000032FC  0281 0000FEC0           3530              ANDI.L  #%1111111011000000,D1
00003302  0C81 0000E0C0           3531              CMPI.L  #%1110000011000000,D1
00003308  6700 0156               3532              BEQ     OP_ASX_MEMORY           
0000330C                          3533              
0000330C                          3534              *ELSE ITS REGISTER
0000330C                          3535  OP_ASX_REGISTER
0000330C                          3536             *TODO
0000330C                          3537             *CHECK IF ITS INTERMEDIATE OR REGISTER
0000330C  2205                    3538             MOVE.L  D5,D1                   *RESET
0000330E  EA99                    3539             ROR.L   #5,D1 
00003310  0281 00000001           3540             ANDI.L  #1,D1
00003316  0C81 00000000           3541             CMPI.L  #0,D1                    * 1=DATA REGISTER 0= INTERMEDIATE(1-7)
0000331C  6700 003E               3542             BEQ     OP_ASX_INTERMEDIATE
00003320                          3543             *ELSE ITS DATA REGISTER
00003320                          3544  
00003320                          3545             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00003320  13FC 0082 00004D7A      3546             MOVE.B   #$82,DEST_REGISTER_FORMAT
00003328  13FC 0000 00004D7B      3547             MOVE.B   #$00,SRC_REGISTER_FORMAT
00003330                          3548             
00003330                          3549             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00003330  13FC 00B9 00004D7D      3550             MOVE.B   #$B9,GET_DST_START_END
00003338  13FC 0020 00004D7E      3551             MOVE.B   #$20,GET_SRC_START_END
00003340                          3552             
00003340                          3553             *SETS BOTH SRC/DEST MODES TO "Dn"
00003340  0285 0000FE07           3554             ANDI.L   #%1111111000000111,D5
00003346  0685 00000000           3555             ADDI.L   #%0000000000000000,D5
0000334C                          3556             
0000334C                          3557              *CLEAR D3
0000334C  4283                    3558              CLR.L   D3
0000334E                          3559           
0000334E  163C 002C               3560              MOVE.B  #',',D3
00003352  6100 109C               3561              BSR     PUSH_STACK
00003356  6100 07FA               3562              BSR     GET_EA_EA_SRC
0000335A                          3563              
0000335A  4E75                    3564              RTS
0000335C                          3565  
0000335C                          3566  OP_ASX_INTERMEDIATE
0000335C                          3567             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000335C  13FC 0082 00004D7A      3568             MOVE.B   #$82,DEST_REGISTER_FORMAT
00003364  13FC 0000 00004D7B      3569             MOVE.B   #$00,SRC_REGISTER_FORMAT
0000336C                          3570             
0000336C                          3571             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000336C  13FC 00B9 00004D7D      3572             MOVE.B   #$B9,GET_DST_START_END
00003374  13FC 0020 00004D7E      3573             MOVE.B   #$20,GET_SRC_START_END
0000337C                          3574             
0000337C                          3575             *SETS BOTH SRC/DEST MODES TO "Dn"
0000337C  0285 0000FE07           3576             ANDI.L   #%1111111000000111,D5
00003382  0685 00000000           3577             ADDI.L   #%0000000000000000,D5
00003388                          3578             
00003388                          3579              *CLEAR D3
00003388  4283                    3580              CLR.L   D3
0000338A                          3581             
0000338A                          3582  *-------------------------grabbing #immediate data-----------------------*
0000338A                          3583  
0000338A                          3584  *GET DATA FROM ADDQ AND PRINT #0-8
0000338A  163C 0020               3585              MOVE.B  #' ',D3
0000338E  6100 1060               3586              BSR     PUSH_STACK
00003392  163C 0023               3587              MOVE.B  #'#',D3
00003396  6100 1058               3588              BSR     PUSH_STACK 
0000339A                          3589  
0000339A                          3590                       
0000339A                          3591              *GET DATA #   
0000339A  2205                    3592              MOVE.L  D5,D1
0000339C  EC99                    3593              ROR.L   #6,D1            
0000339E  E699                    3594              ROR.L   #3,D1
000033A0  0281 00000007           3595              ANDI.L  #$07,D1
000033A6                          3596              
000033A6  0C01 0000               3597              CMPI.B  #%000,D1
000033AA  6700 003A               3598              BEQ     OP_ASX_0
000033AE  0C01 0001               3599              CMPI.B  #%001,D1
000033B2  6700 003E               3600              BEQ     OP_ASX_1
000033B6  0C01 0002               3601              CMPI.B  #%010,D1
000033BA  6700 0042               3602              BEQ     OP_ASX_2
000033BE  0C01 0003               3603              CMPI.B  #%011,D1
000033C2  6700 0046               3604              BEQ     OP_ASX_3
000033C6  0C01 0004               3605              CMPI.B  #%100,D1
000033CA  6700 004A               3606              BEQ     OP_ASX_4
000033CE  0C01 0005               3607              CMPI.B  #%101,D1
000033D2  6700 004E               3608              BEQ     OP_ASX_5
000033D6  0C01 0006               3609              CMPI.B  #%110,D1
000033DA  6700 0052               3610              BEQ     OP_ASX_6
000033DE  0C01 0007               3611              CMPI.B  #%111,D1
000033E2  6700 0056               3612              BEQ     OP_ASX_7
000033E6                          3613              
000033E6                          3614  OP_ASX_0
000033E6  163C 0030               3615              MOVE.B  #'0',D3
000033EA  6100 1004               3616              BSR     PUSH_STACK
000033EE  6000 005E               3617              BRA     OP_ASX_AFTER_IMMEDIATE            
000033F2                          3618  OP_ASX_1
000033F2  163C 0031               3619              MOVE.B  #'1',D3
000033F6  6100 0FF8               3620              BSR     PUSH_STACK
000033FA  6000 0052               3621              BRA     OP_ASX_AFTER_IMMEDIATE            
000033FE                          3622  OP_ASX_2
000033FE  163C 0032               3623              MOVE.B  #'2',D3
00003402  6100 0FEC               3624              BSR     PUSH_STACK
00003406  6000 0046               3625              BRA     OP_ASX_AFTER_IMMEDIATE            
0000340A                          3626  OP_ASX_3
0000340A  163C 0033               3627              MOVE.B  #'3',D3
0000340E  6100 0FE0               3628              BSR     PUSH_STACK
00003412  6000 003A               3629              BRA     OP_ASX_AFTER_IMMEDIATE            
00003416                          3630  OP_ASX_4
00003416  163C 0034               3631              MOVE.B  #'4',D3
0000341A  6100 0FD4               3632              BSR     PUSH_STACK
0000341E  6000 002E               3633              BRA     OP_ASX_AFTER_IMMEDIATE           
00003422                          3634  OP_ASX_5
00003422  163C 0035               3635              MOVE.B  #'5',D3
00003426  6100 0FC8               3636              BSR     PUSH_STACK
0000342A  6000 0022               3637              BRA     OP_ASX_AFTER_IMMEDIATE
0000342E                          3638  OP_ASX_6
0000342E  163C 0036               3639              MOVE.B  #'6',D3
00003432  6100 0FBC               3640              BSR     PUSH_STACK
00003436  6000 0016               3641              BRA     OP_ASX_AFTER_IMMEDIATE
0000343A                          3642  OP_ASX_7
0000343A  163C 0037               3643              MOVE.B  #'7',D3
0000343E  6100 0FB0               3644              BSR     PUSH_STACK
00003442  6000 000A               3645              BRA     OP_ASX_AFTER_IMMEDIATE
00003446                          3646  
00003446                          3647  OP_ASX_8
00003446  163C 0038               3648              MOVE.B  #'8',D3
0000344A  6100 0FA4               3649              BSR     PUSH_STACK
0000344E                          3650              
0000344E                          3651  OP_ASX_AFTER_IMMEDIATE            
0000344E                          3652  
0000344E                          3653  *-------------------------grabbing #immediate data-----------------------*
0000344E                          3654  
0000344E  163C 002C               3655              MOVE.B  #',',D3
00003452  6100 0F9C               3656              BSR     PUSH_STACK
00003456  6100 06FA               3657              BSR     GET_EA_EA_SRC
0000345A                          3658              
0000345A  4E75                    3659              RTS
0000345C                          3660  
0000345C  6000 002A               3661              BRA     OP_ASX_RETURN
00003460                          3662              
00003460                          3663              
00003460                          3664  OP_ASX_MEMORY
00003460                          3665             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00003460  13FC 0083 00004D7B      3666             MOVE.B   #$83,SRC_REGISTER_FORMAT
00003468                          3667             
00003468                          3668             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00003468  13FC 00B9 00004D7D      3669             MOVE.B   #$B9,GET_DST_START_END
00003470  13FC 0020 00004D7E      3670             MOVE.B   #$20,GET_SRC_START_END
00003478                          3671             
00003478                          3672             *pop previous thing out
00003478  6100 0F7E               3673             BSR      POP_STACK
0000347C                          3674             
0000347C                          3675             *print w
0000347C  163C 0057               3676             MOVE.B  #'W',D3
00003480  6100 0F6E               3677             BSR     PUSH_STACK
00003484  6100 06CC               3678             BSR     GET_EA_EA_SRC
00003488                          3679  
00003488                          3680  OP_ASX_RETURN
00003488  6000 FBCC               3681              BRA     OP1110_RETURN 
0000348C                          3682      
0000348C                          3683  *---------------------------------------------------------------------------*
0000348C                          3684  * OP_ROX: decode and display LSR IMMEDIATE/REGISTER
0000348C                          3685  *---------------------------------------------------------------------------*        
0000348C                          3686  OP_ROX
0000348C                          3687  
0000348C  163C 0052               3688              MOVE.B  #'R',D3
00003490  6100 0F5E               3689              BSR     PUSH_STACK
00003494  163C 004F               3690              MOVE.B  #'O',D3
00003498  6100 0F56               3691              BSR     PUSH_STACK
0000349C                          3692              
0000349C                          3693              *FIND IF ITS RIGHT OR LEFT DIR
0000349C  2205                    3694              MOVE.L  D5,D1                   *RESET
0000349E  0281 00000100           3695              ANDI.L  #%0000000100000000,D1
000034A4  0C81 00000000           3696              CMPI.L  #%0000000000000000,D1   * RIGHT CHECK
000034AA  6700 000E               3697              BEQ     OP_ROX_R      
000034AE  163C 004C               3698              MOVE.B  #'L',D3
000034B2  6100 0F3C               3699              BSR     PUSH_STACK
000034B6  6000 000A               3700              BRA     OP_ROX_DIR
000034BA                          3701  OP_ROX_R           
000034BA  163C 0052               3702              MOVE.B  #'R',D3
000034BE  6100 0F30               3703              BSR     PUSH_STACK
000034C2                          3704              
000034C2                          3705  OP_ROX_DIR
000034C2  163C 002E               3706              MOVE.B  #'.',D3
000034C6  6100 0F28               3707              BSR     PUSH_STACK
000034CA                          3708  
000034CA                          3709              *FIND SIZE OF OPCODE
000034CA  2205                    3710              MOVE.L  D5,D1                   *RESET
000034CC  0281 000000C0           3711              ANDI.L  #%0000000011000000,D1
000034D2  0C81 00000080           3712              CMPI.L  #%0000000010000000,D1            *L
000034D8  6700 0016               3713              BEQ     OP_ROX_L
000034DC  0C81 00000040           3714              CMPI.L  #%0000000001000000,D1            *W
000034E2  6700 0018               3715              BEQ     OP_ROX_W  
000034E6  0C81 00000000           3716              CMPI.L  #%0000000000000000,D1            *W
000034EC  6700 001A               3717              BEQ     OP_ROX_B       
000034F0                          3718                                      *OTHERWISE B    
000034F0                          3719              
000034F0                          3720  OP_ROX_L
000034F0  163C 004C               3721              MOVE.B  #'L',D3
000034F4  6100 0EFA               3722              BSR     PUSH_STACK
000034F8  6000 001A               3723              BRA     OP_ROX_CHECK_FORMAT 
000034FC                          3724  OP_ROX_W
000034FC  163C 0057               3725              MOVE.B  #'W',D3
00003500  6100 0EEE               3726              BSR     PUSH_STACK
00003504  6000 000E               3727              BRA     OP_ROX_CHECK_FORMAT 
00003508                          3728  OP_ROX_B
00003508  163C 0042               3729              MOVE.B  #'B',D3
0000350C  6100 0EE2               3730              BSR     PUSH_STACK
00003510  6000 0002               3731              BRA     OP_ROX_CHECK_FORMAT 
00003514                          3732                        
00003514                          3733  OP_ROX_CHECK_FORMAT              
00003514                          3734              * CHECKS IF ITS A MEMORY SHIFT FORMAT
00003514  2205                    3735              MOVE.L  D5,D1                   *RESET
00003516  0281 0000FEC0           3736              ANDI.L  #%1111111011000000,D1
0000351C  0C81 0000E6C0           3737              CMPI.L  #%1110011011000000,D1
00003522  6700 0156               3738              BEQ     OP_ROX_MEMORY           
00003526                          3739              
00003526                          3740              *ELSE ITS REGISTER
00003526                          3741  OP_ROX_REGISTER
00003526                          3742             *TODO
00003526                          3743             *CHECK IF ITS INTERMEDIATE OR REGISTER
00003526  2205                    3744             MOVE.L  D5,D1                   *RESET
00003528  EA99                    3745             ROR.L   #5,D1 
0000352A  0281 00000001           3746             ANDI.L  #1,D1
00003530  0C81 00000000           3747             CMPI.L  #0,D1                    * 1=DATA REGISTER 0= INTERMEDIATE(1-7)
00003536  6700 003E               3748             BEQ     OP_ROX_INTERMEDIATE
0000353A                          3749             *ELSE ITS DATA REGISTER
0000353A                          3750  
0000353A                          3751             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000353A  13FC 0082 00004D7A      3752             MOVE.B   #$82,DEST_REGISTER_FORMAT
00003542  13FC 0000 00004D7B      3753             MOVE.B   #$00,SRC_REGISTER_FORMAT
0000354A                          3754             
0000354A                          3755             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000354A  13FC 00B9 00004D7D      3756             MOVE.B   #$B9,GET_DST_START_END
00003552  13FC 0020 00004D7E      3757             MOVE.B   #$20,GET_SRC_START_END
0000355A                          3758             
0000355A                          3759             *SETS BOTH SRC/DEST MODES TO "Dn"
0000355A  0285 0000FE07           3760             ANDI.L   #%1111111000000111,D5
00003560  0685 00000000           3761             ADDI.L   #%0000000000000000,D5
00003566                          3762             
00003566                          3763              *CLEAR D3
00003566  4283                    3764              CLR.L   D3
00003568                          3765           
00003568  163C 002C               3766              MOVE.B  #',',D3
0000356C  6100 0E82               3767              BSR     PUSH_STACK
00003570  6100 05E0               3768              BSR     GET_EA_EA_SRC
00003574                          3769              
00003574  4E75                    3770              RTS
00003576                          3771  
00003576                          3772  OP_ROX_INTERMEDIATE
00003576                          3773             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00003576  13FC 0082 00004D7A      3774             MOVE.B   #$82,DEST_REGISTER_FORMAT
0000357E  13FC 0000 00004D7B      3775             MOVE.B   #$00,SRC_REGISTER_FORMAT
00003586                          3776             
00003586                          3777             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00003586  13FC 00B9 00004D7D      3778             MOVE.B   #$B9,GET_DST_START_END
0000358E  13FC 0020 00004D7E      3779             MOVE.B   #$20,GET_SRC_START_END
00003596                          3780             
00003596                          3781             *SETS BOTH SRC/DEST MODES TO "Dn"
00003596  0285 0000FE07           3782             ANDI.L   #%1111111000000111,D5
0000359C  0685 00000000           3783             ADDI.L   #%0000000000000000,D5
000035A2                          3784             
000035A2                          3785              *CLEAR D3
000035A2  4283                    3786              CLR.L   D3
000035A4                          3787             
000035A4                          3788  *-------------------------grabbing #immediate data-----------------------*
000035A4                          3789  
000035A4                          3790  *GET DATA FROM ADDQ AND PRINT #0-8
000035A4  163C 0020               3791              MOVE.B  #' ',D3
000035A8  6100 0E46               3792              BSR     PUSH_STACK
000035AC  163C 0023               3793              MOVE.B  #'#',D3
000035B0  6100 0E3E               3794              BSR     PUSH_STACK 
000035B4                          3795  
000035B4                          3796                       
000035B4                          3797              *GET DATA #   
000035B4  2205                    3798              MOVE.L  D5,D1
000035B6  EC99                    3799              ROR.L   #6,D1            
000035B8  E699                    3800              ROR.L   #3,D1
000035BA  0281 00000007           3801              ANDI.L  #$07,D1
000035C0                          3802              
000035C0  0C01 0000               3803              CMPI.B  #%000,D1
000035C4  6700 003A               3804              BEQ     OP_ROX_0
000035C8  0C01 0001               3805              CMPI.B  #%001,D1
000035CC  6700 003E               3806              BEQ     OP_ROX_1
000035D0  0C01 0002               3807              CMPI.B  #%010,D1
000035D4  6700 0042               3808              BEQ     OP_ROX_2
000035D8  0C01 0003               3809              CMPI.B  #%011,D1
000035DC  6700 0046               3810              BEQ     OP_ROX_3
000035E0  0C01 0004               3811              CMPI.B  #%100,D1
000035E4  6700 004A               3812              BEQ     OP_ROX_4
000035E8  0C01 0005               3813              CMPI.B  #%101,D1
000035EC  6700 004E               3814              BEQ     OP_ROX_5
000035F0  0C01 0006               3815              CMPI.B  #%110,D1
000035F4  6700 0052               3816              BEQ     OP_ROX_6
000035F8  0C01 0007               3817              CMPI.B  #%111,D1
000035FC  6700 0056               3818              BEQ     OP_ROX_7
00003600                          3819              
00003600                          3820  OP_ROX_0
00003600  163C 0030               3821              MOVE.B  #'0',D3
00003604  6100 0DEA               3822              BSR     PUSH_STACK
00003608  6000 005E               3823              BRA     OP_ROX_AFTER_IMMEDIATE            
0000360C                          3824  OP_ROX_1
0000360C  163C 0031               3825              MOVE.B  #'1',D3
00003610  6100 0DDE               3826              BSR     PUSH_STACK
00003614  6000 0052               3827              BRA     OP_ROX_AFTER_IMMEDIATE            
00003618                          3828  OP_ROX_2
00003618  163C 0032               3829              MOVE.B  #'2',D3
0000361C  6100 0DD2               3830              BSR     PUSH_STACK
00003620  6000 0046               3831              BRA     OP_ROX_AFTER_IMMEDIATE            
00003624                          3832  OP_ROX_3
00003624  163C 0033               3833              MOVE.B  #'3',D3
00003628  6100 0DC6               3834              BSR     PUSH_STACK
0000362C  6000 003A               3835              BRA     OP_ROX_AFTER_IMMEDIATE            
00003630                          3836  OP_ROX_4
00003630  163C 0034               3837              MOVE.B  #'4',D3
00003634  6100 0DBA               3838              BSR     PUSH_STACK
00003638  6000 002E               3839              BRA     OP_ROX_AFTER_IMMEDIATE           
0000363C                          3840  OP_ROX_5
0000363C  163C 0035               3841              MOVE.B  #'5',D3
00003640  6100 0DAE               3842              BSR     PUSH_STACK
00003644  6000 0022               3843              BRA     OP_ROX_AFTER_IMMEDIATE
00003648                          3844  OP_ROX_6
00003648  163C 0036               3845              MOVE.B  #'6',D3
0000364C  6100 0DA2               3846              BSR     PUSH_STACK
00003650  6000 0016               3847              BRA     OP_ROX_AFTER_IMMEDIATE
00003654                          3848  OP_ROX_7
00003654  163C 0037               3849              MOVE.B  #'7',D3
00003658  6100 0D96               3850              BSR     PUSH_STACK
0000365C  6000 000A               3851              BRA     OP_ROX_AFTER_IMMEDIATE
00003660                          3852  
00003660                          3853  OP_ROX_8
00003660  163C 0038               3854              MOVE.B  #'8',D3
00003664  6100 0D8A               3855              BSR     PUSH_STACK
00003668                          3856              
00003668                          3857  OP_ROX_AFTER_IMMEDIATE            
00003668                          3858  
00003668                          3859  *-------------------------grabbing #immediate data-----------------------*
00003668                          3860  
00003668  163C 002C               3861              MOVE.B  #',',D3
0000366C  6100 0D82               3862              BSR     PUSH_STACK
00003670  6100 04E0               3863              BSR     GET_EA_EA_SRC
00003674                          3864              
00003674  4E75                    3865              RTS
00003676                          3866  
00003676  6000 0022               3867              BRA     OP_ROX_RETURN
0000367A                          3868              
0000367A                          3869              
0000367A                          3870  OP_ROX_MEMORY
0000367A                          3871             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000367A  13FC 0083 00004D7B      3872             MOVE.B   #$83,SRC_REGISTER_FORMAT
00003682                          3873             
00003682                          3874             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00003682  13FC 0020 00004D7E      3875             MOVE.B   #$20,GET_SRC_START_END
0000368A                          3876             
0000368A                          3877             *pop previous thing out
0000368A  6100 0D6C               3878             BSR      POP_STACK
0000368E                          3879             
0000368E                          3880             *print w
0000368E  163C 0057               3881             MOVE.B  #'W',D3
00003692  6100 0D5C               3882             BSR     PUSH_STACK
00003696  6100 04BA               3883             BSR     GET_EA_EA_SRC
0000369A                          3884  
0000369A                          3885  OP_ROX_RETURN
0000369A  6000 F9BA               3886              BRA     OP1110_RETURN 
0000369E                          3887  
0000369E                          3888  
0000369E                          3889  
0000369E                          3890  
0000369E                          3891  
0000369E                          3892  
0000369E                          3893  
0000369E                          3894  
0000369E                          3895  
0000369E                          3896  
0000369E                          3897  
0000369E                          3898  
0000369E                          3899  
0000369E                          3900  
0000369E                          3901  
0000369E                          3902  
0000369E                          3903  
0000369E                          3904  
0000369E                          3905  
0000369E                          3906  
0000369E                          3907  
0000369E                          3908  
0000369E                          3909  
0000369E                          3910  
0000369E                          3911              
0000369E                          3912  *---------------------------------------------------------------------------*
0000369E                          3913  * OP1111 : Special reserved
0000369E                          3914  *---------------------------------------------------------------------------*           
0000369E  4EF8 1760               3915  OP1111      JMP     OP_DATA
000036A2                          3916  
000036A2                          3917  *---------------------------------------------------------------------------*
000036A2                          3918  * EA_NOSRC: decode and display effective addresses for NEG/JSR
000036A2                          3919  *---------------------------------------------------------------------------*
000036A2                          3920  EA_NOSRC    
000036A2  4EB9 00003760           3921              JSR     SRC_MODE
000036A8  43F9 000049C6           3922              LEA     ENDLINE_M,A1
000036AE  103C 000E               3923              MOVE.B  #14,D0
000036B2  4E4F                    3924              TRAP    #15
000036B4  4E75                    3925              RTS
000036B6                          3926              
000036B6                          3927  *---------------------------------------------------------------------------*
000036B6                          3928  * EA_ARITH: decode and display effective addresses for DIVS/MULS
000036B6                          3929  *---------------------------------------------------------------------------*
000036B6                          3930  EA_ARITH
000036B6  4EB9 00003760           3931              JSR     SRC_MODE
000036BC  43F9 00004D40           3932              LEA     DISP_D,A1
000036C2  103C 000E               3933              MOVE.B  #14,D0
000036C6  4E4F                    3934              TRAP    #15
000036C8  4EB9 000039EC           3935              JSR     DEST_REGISTER
000036CE  43F9 000049C6           3936              LEA     ENDLINE_M,A1
000036D4  103C 000E               3937              MOVE.B  #14,D0
000036D8  4E4F                    3938              TRAP    #15
000036DA  4E75                    3939              RTS
000036DC                          3940              
000036DC                          3941  *---------------------------------------------------------------------------*
000036DC                          3942  * EA_MOVEA: decode and display effective addresses for MOVEA/LEA
000036DC                          3943  *---------------------------------------------------------------------------*
000036DC                          3944  EA_MOVEA
000036DC  4EB9 00003760           3945              JSR     SRC_MODE
000036E2  43F9 00004D51           3946              LEA     DISP_AOP,A1
000036E8  103C 000E               3947              MOVE.B  #14,D0
000036EC  4E4F                    3948              TRAP    #15
000036EE  4EB9 000039EC           3949              JSR     DEST_REGISTER
000036F4  43F9 00004D4F           3950              LEA     DISP_CP,A1
000036FA  103C 000D               3951              MOVE.B  #13,D0
000036FE  4E4F                    3952              TRAP    #15
00003700  4E75                    3953              RTS
00003702                          3954              
00003702                          3955  *---------------------------------------------------------------------------*
00003702                          3956  * EA_GEN: decode and display effective addresses for MOVE
00003702                          3957  *---------------------------------------------------------------------------*
00003702                          3958  EA_GEN          
00003702                          3959              * retrieve/display source mode/register
00003702  4EB9 00003760           3960              JSR     SRC_MODE
00003708                          3961              
00003708                          3962              * retrieve/display destination mode/register
00003708  4EB9 0000371C           3963              JSR     DEST_MODE
0000370E                          3964              
0000370E  43F9 000049C6           3965              LEA     ENDLINE_M,A1
00003714  103C 000E               3966              MOVE.B  #14,D0
00003718  4E4F                    3967              TRAP    #15
0000371A                          3968              
0000371A  4E75                    3969              RTS
0000371C                          3970  
0000371C                          3971  *---------------------------------------------------------------------------*
0000371C                          3972  * DEST_MODE: decode and display destination mode (bit 8 - 6)
0000371C                          3973  *---------------------------------------------------------------------------*           
0000371C                          3974  DEST_MODE   
0000371C                          3975              * clear registers to store temp data
0000371C  4280                    3976              CLR.L   D0                      
0000371E  4281                    3977              CLR.L   D1                      
00003720  207C 00000000           3978              MOVEA.L #0, A0                  
00003726  227C 00000000           3979              MOVEA.L #0, A1                  
0000372C  2205                    3980              MOVE.L  D5,D1
0000372E  EC89                    3981              LSR.L   #6,D1
00003730  0281 00000007           3982              ANDI.L  #$7,D1
00003736  0C01 0000               3983              CMPI.B  #0,D1   * Dn
0000373A  6700 0082               3984              BEQ     D_MODE000
0000373E  0C01 0002               3985              CMPI.B  #2,D1   * (An)
00003742  6700 00C2               3986              BEQ     D_MODE010
00003746  0C01 0003               3987              CMPI.B  #3,D1   * (An)+
0000374A  6700 011A               3988              BEQ     D_MODE011
0000374E  0C01 0004               3989              CMPI.B  #4,D1   * -(An)
00003752  6700 0132               3990              BEQ     D_MODE100
00003756  0C01 0007               3991              CMPI.B  #7,D1  * abs
0000375A  6700 017C               3992              BEQ     D_MODE111 
0000375E  4E75                    3993              RTS
00003760                          3994  
00003760                          3995  *---------------------------------------------------------------------------*
00003760                          3996  * SRC_MODE: decode and display source mode (bit 5 - 3)
00003760                          3997  *---------------------------------------------------------------------------*  
00003760                          3998  SRC_MODE    
00003760                          3999              * clear registers to store temp data
00003760  4280                    4000              CLR.L   D0                      
00003762  4281                    4001              CLR.L   D1                      
00003764  207C 00000000           4002              MOVEA.L #0, A0                  
0000376A  227C 00000000           4003              MOVEA.L #0, A1                  
00003770  2205                    4004              MOVE.L  D5,D1
00003772  E489                    4005              LSR.L   #2,D1
00003774  0281 0000000E           4006              ANDI.L  #$E,D1
0000377A                          4007              
0000377A  0C01 0000               4008              CMPI.B  #0,D1   * Dn
0000377E  6700 002A               4009              BEQ     MODE000
00003782  0C01 0002               4010              CMPI.B  #2,D1   * An 
00003786  6700 004A               4011              BEQ     MODE001
0000378A  0C01 0004               4012              CMPI.B  #4,D1   * (An)
0000378E  6700 0056               4013              BEQ     MODE010
00003792  0C01 0006               4014              CMPI.B  #6,D1   * (An)+
00003796  6700 008E               4015              BEQ     MODE011
0000379A  0C01 0008               4016              CMPI.B  #8,D1   * -(An)
0000379E  6700 00A6               4017              BEQ     MODE100
000037A2  0C01 000F               4018              CMPI.B  #15,D1  * abs/immediate
000037A6  6700 00FE               4019              BEQ     MODE111 
000037AA                          4020        
000037AA                          4021  *---------------------------------------------------------------------------*
000037AA                          4022  * MODE000: decode and display source mode Dn
000037AA                          4023  *---------------------------------------------------------------------------*           
000037AA                          4024  MODE000     *Dn
000037AA  43F9 00004D40           4025              LEA     DISP_D,A1
000037B0  103C 000E               4026              MOVE.B  #14,D0
000037B4  4E4F                    4027              TRAP    #15
000037B6  4EB9 00003A48           4028              JSR     SRC_REGISTER
000037BC  4E75                    4029              RTS
000037BE                          4030  
000037BE                          4031  *---------------------------------------------------------------------------*
000037BE                          4032  * D_MODE000: decode and display dest mode Dn
000037BE                          4033  *---------------------------------------------------------------------------*
000037BE                          4034  D_MODE000     *Dn
000037BE  43F9 00004D40           4035              LEA     DISP_D,A1
000037C4  103C 000E               4036              MOVE.B  #14,D0
000037C8  4E4F                    4037              TRAP    #15
000037CA  4EB9 000039EC           4038              JSR     DEST_REGISTER
000037D0  4E75                    4039              RTS
000037D2                          4040  
000037D2                          4041  *---------------------------------------------------------------------------*
000037D2                          4042  * MODE001: decode and display source mode An
000037D2                          4043  *---------------------------------------------------------------------------* 
000037D2                          4044  MODE001 *An
000037D2  43F9 00004D45           4045              LEA     DISP_A,A1
000037D8  103C 000E               4046              MOVE.B  #14,D0
000037DC  4E4F                    4047              TRAP    #15
000037DE  4EB9 00003A48           4048              JSR     SRC_REGISTER
000037E4                          4049          
000037E4  4E75                    4050              RTS
000037E6                          4051  
000037E6                          4052  *---------------------------------------------------------------------------*
000037E6                          4053  * MODE010: decode and display source mode (An)
000037E6                          4054  *---------------------------------------------------------------------------*    
000037E6                          4055  MODE010 *(An)
000037E6  43F9 00004D51           4056              LEA     DISP_AOP,A1  *display (A
000037EC  103C 000E               4057              MOVE.B  #14,D0
000037F0  4E4F                    4058              TRAP    #15
000037F2                          4059  
000037F2  4EB9 00003A48           4060              JSR     SRC_REGISTER * display register
000037F8                          4061  
000037F8  43F9 00004D4F           4062              LEA     DISP_CP,A1   *display )
000037FE  103C 000E               4063              MOVE.B  #14,D0
00003802  4E4F                    4064              TRAP    #15
00003804                          4065              
00003804  4E75                    4066              RTS
00003806                          4067  
00003806                          4068  *---------------------------------------------------------------------------*
00003806                          4069  * D_MODE010: decode and display dest mode (An)
00003806                          4070  *---------------------------------------------------------------------------*
00003806                          4071  D_MODE010 *(An)
00003806  43F9 00004D51           4072              LEA     DISP_AOP,A1  *display (A
0000380C  103C 000E               4073              MOVE.B  #14,D0
00003810  4E4F                    4074              TRAP    #15
00003812                          4075     
00003812  4EB9 000039EC           4076              JSR     DEST_REGISTER * display register
00003818                          4077  
00003818  43F9 00004D4F           4078              LEA     DISP_CP,A1   *display )
0000381E  103C 000E               4079              MOVE.B  #14,D0
00003822  4E4F                    4080              TRAP    #15
00003824                          4081              
00003824  4E75                    4082              RTS
00003826                          4083  
00003826                          4084  *---------------------------------------------------------------------------*
00003826                          4085  * MODE011: decode and display source mode (An)+
00003826                          4086  *---------------------------------------------------------------------------*
00003826                          4087  MODE011 *(An)+
00003826  43F9 00004D51           4088              LEA     DISP_AOP,A1      *display (A
0000382C  103C 000E               4089              MOVE.B  #14,D0
00003830  4E4F                    4090              TRAP    #15
00003832                          4091              
00003832  4EB9 00003A48           4092              JSR     SRC_REGISTER    * display register
00003838                          4093  
00003838  43F9 00004D5E           4094              LEA     DISP_POST,A1    *display )+
0000383E  103C 000E               4095              MOVE.B  #14,D0
00003842  4E4F                    4096              TRAP    #15
00003844                          4097              
00003844  4E75                    4098              RTS
00003846                          4099              
00003846                          4100  *---------------------------------------------------------------------------*
00003846                          4101  * MODE100: decode and display source mode -(An)
00003846                          4102  *---------------------------------------------------------------------------*
00003846                          4103  MODE100 *-(An)
00003846  43F9 00004D57           4104              LEA     DISP_PRE,A1    *display -(A
0000384C  103C 000E               4105              MOVE.B  #14,D0
00003850  4E4F                    4106              TRAP    #15
00003852                          4107  
00003852  4EB9 00003A48           4108              JSR     SRC_REGISTER    *display register
00003858                          4109  
00003858  43F9 00004D4F           4110              LEA     DISP_CP,A1   *display )
0000385E  103C 000E               4111              MOVE.B  #14,D0
00003862  4E4F                    4112              TRAP    #15
00003864                          4113              
00003864  4E75                    4114              RTS
00003866                          4115  
00003866                          4116  *---------------------------------------------------------------------------*
00003866                          4117  * D_MODE011: decode and display dest mode (An)+
00003866                          4118  *---------------------------------------------------------------------------*
00003866                          4119  D_MODE011 *(An)+
00003866  43F9 00004D51           4120              LEA     DISP_AOP,A1      *display (A
0000386C  103C 000E               4121              MOVE.B  #14,D0
00003870  4E4F                    4122              TRAP    #15
00003872                          4123  
00003872  4EB9 000039EC           4124              JSR     DEST_REGISTER    * display register
00003878                          4125  
00003878  43F9 00004D5E           4126              LEA     DISP_POST,A1    *display )+
0000387E  103C 000E               4127              MOVE.B  #14,D0
00003882  4E4F                    4128              TRAP    #15
00003884                          4129              
00003884  4E75                    4130              RTS
00003886                          4131              
00003886                          4132  *---------------------------------------------------------------------------*
00003886                          4133  * D_MODE100: decode and display dest mode -(An)
00003886                          4134  *---------------------------------------------------------------------------*            
00003886                          4135  D_MODE100 *-(An)
00003886  43F9 00004D57           4136              LEA     DISP_PRE,A1    *display -(A
0000388C  103C 000E               4137              MOVE.B  #14,D0
00003890  4E4F                    4138              TRAP    #15
00003892                          4139              
00003892  4EB9 000039EC           4140              JSR     DEST_REGISTER    *display register
00003898                          4141  
00003898  43F9 00004D4F           4142              LEA     DISP_CP,A1   *display )
0000389E  103C 000E               4143              MOVE.B  #14,D0
000038A2  4E4F                    4144              TRAP    #15
000038A4                          4145              
000038A4  4E75                    4146              RTS
000038A6                          4147  
000038A6                          4148  *---------------------------------------------------------------------------*
000038A6                          4149  * MODE111: decode and display source mode absolute/immediate
000038A6                          4150  *---------------------------------------------------------------------------*
000038A6                          4151  MODE111     * abs/immediate
000038A6                          4152              * clear registers to store temp data
000038A6  4280                    4153              CLR.L   D0                      
000038A8  4281                    4154              CLR.L   D1                      
000038AA  207C 00000000           4155              MOVEA.L #0, A0                  
000038B0  227C 00000000           4156              MOVEA.L #0, A1                  
000038B6  2205                    4157              MOVE.L  D5,D1
000038B8                          4158              
000038B8                          4159              * retrieve source register for MODE 111
000038B8  E389                    4160              LSL.L   #1,D1   * shift the bits to left by 1
000038BA  0281 0000000E           4161              ANDI.L  #$E,D1  * mask the first 4 bits 
000038C0  0C01 0000               4162              CMPI.B  #0, D1  * if it's 0000, absolute word address
000038C4  6700 003E               4163              BEQ     WORDMODE
000038C8  0C01 0002               4164              CMPI.B  #2, D1  * if it's 0010, absolute long address
000038CC  6700 0062               4165              BEQ     LONGMODE
000038D0  0C01 0008               4166              CMPI.B  #8, D1  * if it's 1000, immediate data
000038D4  6700 0086               4167              BEQ     IMMEDIATE
000038D8                          4168       
000038D8                          4169  *---------------------------------------------------------------------------*
000038D8                          4170  * D_MODE111: decode and display dest mode absolute/immediate
000038D8                          4171  *---------------------------------------------------------------------------*           
000038D8                          4172  D_MODE111   * abs
000038D8                          4173              * clear registers to store temp data
000038D8  4280                    4174              CLR.L   D0                      
000038DA  4281                    4175              CLR.L   D1                      
000038DC  207C 00000000           4176              MOVEA.L #0, A0                  
000038E2  227C 00000000           4177              MOVEA.L #0, A1                  
000038E8  2205                    4178              MOVE.L  D5,D1
000038EA                          4179              
000038EA                          4180              * retrieve dest register for MODE 111
000038EA  EC89                    4181              LSR.L   #6,D1   * shift the bits to right by 6
000038EC  E689                    4182              LSR.L   #3,D1   * shift the bits to right by extra 3
000038EE  0201 0001               4183              ANDI.B  #1,D1   * mask the first 2 bits 
000038F2  0C01 0000               4184              CMPI.B  #0, D1  * if it's 000, absolute word address
000038F6  6700 000C               4185              BEQ     WORDMODE
000038FA  0C01 0001               4186              CMPI.B  #1, D1  * if it's 001, absolute long address
000038FE  6700 0030               4187              BEQ     LONGMODE
00003902                          4188              *JSR     OP_DATA *not sure..
00003902  4E75                    4189              RTS
00003904                          4190  
00003904                          4191  
00003904                          4192  *---------------------------------------------------------------------------*
00003904                          4193  * WORDMODE: absolute word address
00003904                          4194  *---------------------------------------------------------------------------*
00003904  43F9 00004D3B           4195  WORDMODE    LEA     DISP_HEX,A1
0000390A  103C 000E               4196              MOVE.B  #14,D0
0000390E  4E4F                    4197              TRAP    #15
00003910                          4198              
00003910  4285                    4199              CLR.L   D5
00003912  3A1D                    4200              MOVE.W  (A5)+,D5
00003914                          4201              
00003914  43F9 00004A19           4202              LEA     TMPOUTPUT,A1
0000391A  2205                    4203              MOVE.L  D5,D1
0000391C  7404                    4204              MOVE.L  #4,D2       *move word size 4
0000391E  4EB8 122E               4205              JSR     HEX2ASCII
00003922  43F9 00004A19           4206              LEA     TMPOUTPUT,A1
00003928  103C 000E               4207              MOVE.B  #14,D0
0000392C  4E4F                    4208              TRAP    #15
0000392E                          4209              
0000392E  4E75                    4210              RTS
00003930                          4211  
00003930                          4212  *---------------------------------------------------------------------------*
00003930                          4213  * LONGMODE: absolute long address
00003930                          4214  *---------------------------------------------------------------------------*
00003930  43F9 00004D3B           4215  LONGMODE    LEA     DISP_HEX,A1
00003936  103C 000E               4216              MOVE.B  #14,D0
0000393A  4E4F                    4217              TRAP    #15
0000393C                          4218              
0000393C  4285                    4219              CLR.L   D5
0000393E  2A1D                    4220              MOVE.L  (A5)+,D5
00003940                          4221              
00003940  43F9 00004A19           4222              LEA     TMPOUTPUT,A1
00003946  2205                    4223              MOVE.L  D5,D1
00003948  7408                    4224              MOVE.L  #8,D2           *move longword size 8
0000394A  4EB8 122E               4225              JSR     HEX2ASCII
0000394E  43F9 00004A19           4226              LEA     TMPOUTPUT,A1
00003954  103C 000E               4227              MOVE.B  #14,D0
00003958  4E4F                    4228              TRAP    #15
0000395A                          4229              
0000395A  4E75                    4230              RTS
0000395C                          4231  
0000395C                          4232  
0000395C                          4233  *---------------------------------------------------------------------------*
0000395C                          4234  * IMMEDIATE: immediate address
0000395C                          4235  *---------------------------------------------------------------------------*
0000395C  43F9 00004D61           4236  IMMEDIATE   LEA     DISP_LB,A1
00003962  103C 000E               4237              MOVE.B  #14,D0
00003966  4E4F                    4238              TRAP    #15
00003968  43F9 00004D3B           4239              LEA     DISP_HEX,A1
0000396E  103C 000E               4240              MOVE.B  #14,D0
00003972  4E4F                    4241              TRAP    #15
00003974                          4242              
00003974                          4243              * check for size
00003974  0C04 0000               4244              CMPI.B  #0,D4
00003978  6700 0012               4245              BEQ     IMMD_B
0000397C  0C04 0001               4246              CMPI.B  #1,D4
00003980  6700 002A               4247              BEQ     IMMD_W
00003984  0C04 0002               4248              CMPI.B  #2,D4
00003988  6700 0042               4249              BEQ     IMMD_L
0000398C                          4250  
0000398C                          4251  IMMD_B
0000398C  4285                    4252              CLR.L   D5
0000398E  3A1D                    4253              MOVE.W  (A5)+,D5
00003990                          4254              
00003990  43F9 00004A19           4255              LEA     TMPOUTPUT,A1
00003996  2205                    4256              MOVE.L  D5,D1
00003998  7402                    4257              MOVE.L  #2,D2
0000399A  4EB8 122E               4258              JSR     HEX2ASCII
0000399E  43F9 00004A19           4259              LEA     TMPOUTPUT,A1
000039A4  103C 000E               4260              MOVE.B  #14,D0
000039A8  4E4F                    4261              TRAP    #15
000039AA  4E75                    4262              RTS
000039AC                          4263              
000039AC                          4264  IMMD_W
000039AC  4285                    4265              CLR.L   D5
000039AE  3A1D                    4266              MOVE.W  (A5)+,D5
000039B0                          4267              
000039B0  43F9 00004A19           4268              LEA     TMPOUTPUT,A1
000039B6  2205                    4269              MOVE.L  D5,D1
000039B8  7404                    4270              MOVE.L  #4,D2
000039BA  4EB8 122E               4271              JSR     HEX2ASCII
000039BE  43F9 00004A19           4272              LEA     TMPOUTPUT,A1
000039C4  103C 000E               4273              MOVE.B  #14,D0
000039C8  4E4F                    4274              TRAP    #15
000039CA  4E75                    4275              RTS
000039CC                          4276              
000039CC                          4277  
000039CC                          4278  IMMD_L
000039CC  4285                    4279              CLR.L   D5
000039CE  3A1D                    4280              MOVE.W  (A5)+,D5
000039D0                          4281              
000039D0  43F9 00004A19           4282              LEA     TMPOUTPUT,A1
000039D6  2205                    4283              MOVE.L  D5,D1
000039D8  7408                    4284              MOVE.L  #8,D2
000039DA  4EB8 122E               4285              JSR     HEX2ASCII
000039DE  43F9 00004A19           4286              LEA     TMPOUTPUT,A1
000039E4  103C 000E               4287              MOVE.B  #14,D0
000039E8  4E4F                    4288              TRAP    #15
000039EA  4E75                    4289              RTS
000039EC                          4290  
000039EC                          4291  
000039EC                          4292  *---------------------------------------------------------------------------*
000039EC                          4293  * DEST_REGISTER: decode and display destination register (bit 11 - 9)
000039EC                          4294  *---------------------------------------------------------------------------*
000039EC                          4295  DEST_REGISTER
000039EC                          4296              * clear registers to store temp data
000039EC  4280                    4297              CLR.L   D0                      
000039EE  4281                    4298              CLR.L   D1                      
000039F0  207C 00000000           4299              MOVEA.L #0, A0                  
000039F6  227C 00000000           4300              MOVEA.L #0, A1 
000039FC                          4301              
000039FC  2205                    4302              MOVE.L  D5,D1
000039FE  EC89                    4303              LSR.L   #6,D1
00003A00  E689                    4304              LSR.L   #3,D1
00003A02  0281 00000007           4305              ANDI.L  #7,D1
00003A08                          4306              
00003A08  0C01 0000               4307              CMPI.B  #0,D1
00003A0C  6700 0092               4308              BEQ     REG_0
00003A10  0C01 0001               4309              CMPI.B  #1,D1
00003A14  6700 0098               4310              BEQ     REG_1
00003A18  0C01 0002               4311              CMPI.B  #2,D1
00003A1C  6700 009E               4312              BEQ     REG_2
00003A20  0C01 0003               4313              CMPI.B  #3,D1
00003A24  6700 00A4               4314              BEQ     REG_3
00003A28  0C01 0004               4315              CMPI.B  #4,D1
00003A2C  6700 00AA               4316              BEQ     REG_4
00003A30  0C01 0005               4317              CMPI.B  #5,D1
00003A34  6700 00B0               4318              BEQ     REG_5
00003A38  0C01 0006               4319              CMPI.B  #6,D1
00003A3C  6700 00B6               4320              BEQ     REG_6
00003A40  0C01 0007               4321              CMPI.B  #7,D1
00003A44  6700 00BC               4322              BEQ     REG_7
00003A48                          4323  
00003A48                          4324  *---------------------------------------------------------------------------*
00003A48                          4325  * SRC_REGISTER: decode and display source register (bit 2 - 0)
00003A48                          4326  *---------------------------------------------------------------------------*           
00003A48                          4327  SRC_REGISTER 
00003A48                          4328              * clear registers to store temp data
00003A48  4280                    4329              CLR.L   D0                      
00003A4A  4281                    4330              CLR.L   D1                      
00003A4C  207C 00000000           4331              MOVEA.L #0, A0                  
00003A52  227C 00000000           4332              MOVEA.L #0, A1                  
00003A58                          4333              
00003A58  2205                    4334              MOVE.L  D5,D1   * temp store the processing data
00003A5A  0281 00000007           4335              ANDI.L  #7,D1   * mask the first 4 bits with 0111
00003A60                          4336              
00003A60  0C01 0000               4337              CMPI.B  #0,D1
00003A64  6700 003A               4338              BEQ     REG_0
00003A68  0C01 0001               4339              CMPI.B  #1,D1
00003A6C  6700 0040               4340              BEQ     REG_1
00003A70  0C01 0002               4341              CMPI.B  #2,D1
00003A74  6700 0046               4342              BEQ     REG_2
00003A78  0C01 0003               4343              CMPI.B  #3,D1
00003A7C  6700 004C               4344              BEQ     REG_3
00003A80  0C01 0004               4345              CMPI.B  #4,D1
00003A84  6700 0052               4346              BEQ     REG_4
00003A88  0C01 0005               4347              CMPI.B  #5,D1
00003A8C  6700 0058               4348              BEQ     REG_5
00003A90  0C01 0006               4349              CMPI.B  #6,D1
00003A94  6700 005E               4350              BEQ     REG_6
00003A98  0C01 0007               4351              CMPI.B  #7,D1
00003A9C  6700 0064               4352              BEQ     REG_7
00003AA0                          4353  
00003AA0                          4354  *---------------------------------------------------------------------------*
00003AA0                          4355  * REG_0 ~ REG_7: display register 0 to 7
00003AA0                          4356  *---------------------------------------------------------------------------*
00003AA0  43F9 00004D66           4357  REG_0       LEA     DISP_0,A1
00003AA6  103C 000E               4358              MOVE.B  #14,D0
00003AAA  4E4F                    4359              TRAP    #15
00003AAC  4E75                    4360              RTS
00003AAE                          4361              
00003AAE  43F9 00004D68           4362  REG_1       LEA     DISP_1,A1
00003AB4  103C 000E               4363              MOVE.B  #14,D0
00003AB8  4E4F                    4364              TRAP    #15
00003ABA  4E75                    4365              RTS
00003ABC                          4366              
00003ABC                          4367  
00003ABC  43F9 00004D6A           4368  REG_2       LEA     DISP_2,A1
00003AC2  103C 000E               4369              MOVE.B  #14,D0
00003AC6  4E4F                    4370              TRAP    #15
00003AC8  4E75                    4371              RTS
00003ACA                          4372            
00003ACA  43F9 00004D6C           4373  REG_3       LEA     DISP_3,A1
00003AD0  103C 000E               4374              MOVE.B  #14,D0
00003AD4  4E4F                    4375              TRAP    #15
00003AD6  4E75                    4376              RTS
00003AD8                          4377              
00003AD8  43F9 00004D6E           4378  REG_4       LEA     DISP_4,A1
00003ADE  103C 000E               4379              MOVE.B  #14,D0
00003AE2  4E4F                    4380              TRAP    #15
00003AE4  4E75                    4381              RTS
00003AE6                          4382              
00003AE6  43F9 00004D70           4383  REG_5       LEA     DISP_5,A1
00003AEC  103C 000E               4384              MOVE.B  #14,D0
00003AF0  4E4F                    4385              TRAP    #15
00003AF2  4E75                    4386              RTS
00003AF4                          4387              
00003AF4  43F9 00004D72           4388  REG_6       LEA     DISP_6,A1
00003AFA  103C 000E               4389              MOVE.B  #14,D0
00003AFE  4E4F                    4390              TRAP    #15
00003B00  4E75                    4391              RTS
00003B02                          4392              
00003B02  43F9 00004D74           4393  REG_7       LEA     DISP_7,A1
00003B08  103C 000E               4394              MOVE.B  #14,D0
00003B0C  4E4F                    4395              TRAP    #15
00003B0E  4E75                    4396              RTS
00003B10                          4397              
00003B10                          4398  *---------------------------------------------------------------------------*
00003B10                          4399  * REPEAT : Ask user whether they wish to run the program again
00003B10                          4400  *---------------------------------------------------------------------------*           
00003B10  4246                    4401  REPEAT      CLR.W   D6                      * Reset D6 (Loop Count)
00003B12  43F9 0000483F           4402              LEA     REPEATMSG,A1
00003B18  103C 000E               4403              MOVE.B  #14,D0
00003B1C  4E4F                    4404              TRAP    #15
00003B1E                          4405              
00003B1E  43F9 000049C9           4406              LEA     TMPINPUT,A1             * allocate space to temp store user input
00003B24  103C 0002               4407              MOVE.B  #2,D0
00003B28  4E4F                    4408              TRAP    #15
00003B2A                          4409  
00003B2A  0C01 0001               4410              CMPI.B  #1,D1                   * check for length of user input
00003B2E  66E0                    4411              BNE     REPEAT                  * return to the beginning of the function if unequal
00003B30                          4412              
00003B30  0C11 0059               4413              CMPI.B  #$59,(A1)               * compare the input with Y    
00003B34  6700 D4D4               4414              BEQ     PROGLP                  * repeat the program
00003B38                          4415              
00003B38  0C11 0079               4416              CMPI.B  #$79,(A1)               * compare the input with y    
00003B3C  6700 D4CC               4417              BEQ     PROGLP                  * repeat the program
00003B40                          4418              
00003B40  0C11 004E               4419              CMPI.B  #$4E,(A1)               * compare the input with N    
00003B44  6700 098C               4420              BEQ     TERMINATE               * finish program
00003B48                          4421              
00003B48  0C11 006E               4422              CMPI.B  #$6E,(A1)               * compare the input with n    
00003B4C  6700 0984               4423              BEQ     TERMINATE               * finish program
00003B50                          4424              
00003B50  60BE                    4425              BRA     REPEAT                  * invalid input/repeat the function
00003B52                          4426  
00003B52                          4427  *---------------------------------------------------------------------------*
00003B52                          4428  * EA DECODING INTERFACE
00003B52                          4429  * [A0] - RESERVED FOR USE
00003B52                          4430  * [D2] - RESERVED FOR USE
00003B52                          4431  * RETURNS - ERROR FLAG IF FAILED TO PUSH SRC EA INTO STACK
00003B52                          4432  *---------------------------------------------------------------------------*
00003B52                          4433  GET_EA_EA_SRC
00003B52                          4434      *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
00003B52                          4435      
00003B52                          4436      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
00003B52  2405                    4437      MOVE.L  D5,D2                           * CLEAN COPY TO D2
00003B54  E68A                    4438      LSR.L   #3,D2                           * [D2] Temporarily used D2 for shifting bits            *TODO: DYNAMIC FOR ANY LOCATION OF SOURCE
00003B56  23C2 00004D8C           4439      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
00003B5C  7407                    4440      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
00003B5E  C5B9 00004D8C           4441      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
00003B64                          4442                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
00003B64                          4443      
00003B64                          4444      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
00003B64                          4445      *DESTINATION REGISTER FORMAT STANDARD         *
00003B64                          4446      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
00003B64                          4447      *WHEN BIT = 0(VALID ADDRESS MODE)             *
00003B64                          4448      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
00003B64                          4449      *0 - Dn                                       *
00003B64                          4450      *1 - An                                       *
00003B64                          4451      *2 - (An)                                     *
00003B64                          4452      *3 - (An)+                                    *
00003B64                          4453      *4 - -(An)                                    *
00003B64                          4454      *5 - (XXX).W                                  *
00003B64                          4455      *6 - (XXX).L                                  *
00003B64                          4456      *7 - #<data>                                  *
00003B64                          4457      ***********************************************
00003B64                          4458      
00003B64                          4459      *** Check if source ...  <ea> = Dn
00003B64                          4460  CHECK0    
00003B64  41F9 00004D7C           4461            LEA     TEMP_REGISTER_FORMAT,A0
00003B6A  1439 00004D7B           4462            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003B70  1082                    4463            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003B72  0239 0001 00004D7C      4464            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
00003B7A  0C39 0001 00004D7C      4465            CMPI.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
00003B82  6700 006A               4466            BEQ     CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00003B86  0CB9 00000000 00004D8C  4467            CMPI.L     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn) - COMPARE MODES TO SEE IF IT IS THIS MODE
00003B90  6600 005C               4468            BNE     CHECK1
00003B94                          4469            
00003B94                          4470            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003B94  163C 0020               4471            MOVE.B    #' ',D3
00003B98  6100 0856               4472            BSR       PUSH_STACK
00003B9C  163C 0044               4473            MOVE.B    #'D',D3
00003BA0  6100 084E               4474            BSR       PUSH_STACK
00003BA4                          4475  
00003BA4                          4476            *FIND REGISTER NUMBER END LOCATION*  
00003BA4  13F9 00004D7E 00004D84  4477            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00003BAE  0239 000F 00004D84      4478            AND.B   #$0F,VAR_BYTE_END
00003BB6                          4479            
00003BB6                          4480            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003BB6  23C5 00004D88           4481            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003BBC  1439 00004D84           4482            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003BC2                          4483            
00003BC2                          4484            *INTITIALIZE FOR BIT SHIFTING
00003BC2  41F9 00004D88           4485            LEA     VAR_TEMP_CLEANCOPY,A0
00003BC8  2639 00004D88           4486            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003BCE                          4487  LOOP_SHIFTING
00003BCE  0C02 0000               4488            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003BD2  6700 0008               4489            BEQ     MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00003BD6  E24B                    4490            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003BD8  5302                    4491            SUB.B   #1,D2                     *DECREMENT COUNTER
00003BDA  60F2                    4492            BRA     LOOP_SHIFTING             *CONTINUE SHIFTING
00003BDC                          4493  MASKING_NEXT
00003BDC  C6BC 00000007           4494            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003BE2  0603 0030               4495            ADD.B   #$30,D3                   *CONVERT TO CHAR
00003BE6  6100 0808               4496            BSR     PUSH_STACK                *PUSH TO STACK
00003BEA                          4497            
00003BEA  6000 0394               4498            BRA     GET_SRC_SUCCESS           *RETURN          
00003BEE                          4499            
00003BEE                          4500            
00003BEE                          4501            *** Check if source ...  <ea> = An
00003BEE  41F9 00004D7C           4502  CHECK1    LEA     TEMP_REGISTER_FORMAT,A0
00003BF4  1439 00004D7B           4503            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003BFA  1082                    4504            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003BFC  0239 0002 00004D7C      4505            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
00003C04  0C39 0002 00004D7C      4506            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
00003C0C  6700 006A               4507            BEQ     CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00003C10  0CB9 00000001 00004D8C  4508            CMPI.L  #1,VAR_LONG_ADDRESS_MODE_CHECK                      * An - COMPARE MODES TO SEE IF IT IS THIS MODE
00003C1A  6600 005C               4509            BNE     CHECK2
00003C1E                          4510            
00003C1E                          4511            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003C1E  163C 0020               4512            MOVE.B    #' ',D3
00003C22  6100 07CC               4513            BSR       PUSH_STACK
00003C26  163C 0041               4514            MOVE.B    #'A',D3
00003C2A  6100 07C4               4515            BSR       PUSH_STACK
00003C2E                          4516  
00003C2E                          4517            
00003C2E                          4518            *FIND REGISTER NUMBER END LOCATION*  
00003C2E  13F9 00004D7E 00004D84  4519            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00003C38  0239 000F 00004D84      4520            AND.B   #$0F,VAR_BYTE_END
00003C40                          4521            
00003C40                          4522            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003C40  23C5 00004D88           4523            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003C46  1439 00004D84           4524            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
00003C4C                          4525            
00003C4C                          4526            *INTITIALIZE FOR BIT SHIFTING
00003C4C  41F9 00004D88           4527            LEA     VAR_TEMP_CLEANCOPY,A0
00003C52  2639 00004D88           4528            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003C58                          4529  LOOP_SHIFTING1
00003C58  0C02 0000               4530            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003C5C  6700 0008               4531            BEQ     MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00003C60  E24B                    4532            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003C62  5302                    4533            SUB.B   #1,D2                     *DECREMENT COUNTER
00003C64  60F2                    4534            BRA     LOOP_SHIFTING1             *CONTINUE SHIFTING
00003C66                          4535  MASKING_NEXT1
00003C66  C6BC 00000007           4536            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003C6C  0603 0030               4537            ADD.B   #$30,D3                   *CONVERT TO CHAR
00003C70  6100 077E               4538            BSR     PUSH_STACK                *PUSH TO STACK
00003C74                          4539            
00003C74  6000 030A               4540            BRA     GET_SRC_SUCCESS                   *RETURN 
00003C78                          4541            
00003C78                          4542            
00003C78                          4543            
00003C78                          4544            
00003C78                          4545            *** Check if source ...  <ea> = (An)       
00003C78  41F9 00004D7C           4546  CHECK2    LEA     TEMP_REGISTER_FORMAT,A0
00003C7E  1439 00004D7B           4547            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003C84  1082                    4548            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003C86  0239 0004 00004D7C      4549            ANDI.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
00003C8E  0C39 0004 00004D7C      4550            CMPI.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
00003C96  6700 007A               4551            BEQ     CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00003C9A  0CB9 00000002 00004D8C  4552            CMPI.L   #2,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)  COMPARE MODES TO SEE IF IT IS THIS MODE                                                                *change: checkx++*
00003CA4  6600 006C               4553            BNE     CHECK3
00003CA8                          4554            
00003CA8                          4555            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00003CA8  163C 0020               4556            MOVE.B    #' ',D3
00003CAC  6100 0742               4557            BSR       PUSH_STACK
00003CB0  163C 0028               4558            MOVE.B    #'(',D3
00003CB4  6100 073A               4559            BSR       PUSH_STACK
00003CB8  163C 0041               4560            MOVE.B    #'A',D3
00003CBC  6100 0732               4561            BSR       PUSH_STACK
00003CC0                          4562  
00003CC0                          4563            
00003CC0                          4564            *FIND REGISTER NUMBER END LOCATION*  
00003CC0  13F9 00004D7E 00004D84  4565            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00003CCA  0239 000F 00004D84      4566            AND.B   #$0F,VAR_BYTE_END
00003CD2                          4567            
00003CD2                          4568            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003CD2  23C5 00004D88           4569            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003CD8  1439 00004D84           4570            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003CDE                          4571            
00003CDE                          4572            *INTITIALIZE FOR BIT SHIFTING
00003CDE  41F9 00004D88           4573            LEA     VAR_TEMP_CLEANCOPY,A0
00003CE4  2639 00004D88           4574            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003CEA                          4575  LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
00003CEA  0C02 0000               4576            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003CEE  6700 0008               4577            BEQ     MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00003CF2  E24B                    4578            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003CF4  5302                    4579            SUB.B   #1,D2                     *DECREMENT COUNTER
00003CF6  60F2                    4580            BRA     LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
00003CF8                          4581  MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
00003CF8  0283 00000007           4582            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003CFE  0603 0030               4583            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00003D02  6100 06EC               4584            BSR     PUSH_STACK                *PUSH TO STACK
00003D06                          4585            
00003D06  163C 0029               4586            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003D0A  6100 06E4               4587            BSR       PUSH_STACK
00003D0E                          4588            
00003D0E  6000 0270               4589            BRA     GET_SRC_SUCCESS                   *RETURN 
00003D12                          4590  
00003D12                          4591            
00003D12                          4592            
00003D12                          4593                      
00003D12                          4594  *** Check if source ...  <ea> = (An)+       
00003D12  41F9 00004D7C           4595  CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
00003D18  1439 00004D7B           4596            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003D1E  1082                    4597            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003D20  0239 0008 00004D7C      4598            ANDI.B  #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
00003D28  0C39 0008 00004D7C      4599            CMPI.B  #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
00003D30  6700 0082               4600            BEQ     CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00003D34  0CB9 00000003 00004D8C  4601            CMPI.L  #3,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)+ - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00003D3E  6600 0074               4602            BNE     CHECK4
00003D42                          4603            
00003D42                          4604            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00003D42  163C 0020               4605            MOVE.B    #' ',D3
00003D46  6100 06A8               4606            BSR       PUSH_STACK
00003D4A  163C 0028               4607            MOVE.B    #'(',D3
00003D4E  6100 06A0               4608            BSR       PUSH_STACK
00003D52  163C 0041               4609            MOVE.B    #'A',D3
00003D56  6100 0698               4610            BSR       PUSH_STACK
00003D5A                          4611  
00003D5A                          4612            
00003D5A                          4613            *FIND REGISTER NUMBER END LOCATION*  
00003D5A  13F9 00004D7E 00004D84  4614            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00003D64  0239 000F 00004D84      4615            ANDI.B   #$0F,VAR_BYTE_END
00003D6C                          4616            
00003D6C                          4617            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003D6C  23C5 00004D88           4618            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003D72  1439 00004D84           4619            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003D78                          4620            
00003D78                          4621            *INTITIALIZE FOR BIT SHIFTING
00003D78  41F9 00004D88           4622            LEA     VAR_TEMP_CLEANCOPY,A0
00003D7E  2639 00004D88           4623            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003D84                          4624            
00003D84                          4625  LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
00003D84  0C02 0000               4626            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003D88  6700 0008               4627            BEQ     MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00003D8C  E24B                    4628            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003D8E  5302                    4629            SUBI.B   #1,D2                     *DECREMENT COUNTER
00003D90  60F2                    4630            BRA     LOOP_SHIFTING3            *CONTINUE SHIFTING 
00003D92                          4631                                               *change: NAME OF LABEL*
00003D92                          4632  MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
00003D92  0283 00000007           4633            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003D98  0603 0030               4634            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00003D9C  6100 0652               4635            BSR     PUSH_STACK                *PUSH TO STACK
00003DA0                          4636            
00003DA0  163C 0029               4637            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003DA4  6100 064A               4638            BSR       PUSH_STACK
00003DA8  163C 002B               4639            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003DAC  6100 0642               4640            BSR       PUSH_STACK
00003DB0                          4641            
00003DB0  6000 01CE               4642            BRA       GET_SRC_SUCCESS                   *RETURN 
00003DB4                          4643  
00003DB4                          4644            
00003DB4                          4645            
00003DB4                          4646                      
00003DB4                          4647            *** Check if source ...  <ea> = -(An)       
00003DB4  41F9 00004D7C           4648  CHECK4    LEA     TEMP_REGISTER_FORMAT,A0
00003DBA  1439 00004D7B           4649            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003DC0  1082                    4650            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003DC2  0239 0010 00004D7C      4651            ANDI.B  #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
00003DCA  0C39 0010 00004D7C      4652            CMPI.B  #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003DD2  6700 0082               4653            BEQ     CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00003DD6  0CB9 00000004 00004D8C  4654            CMPI.L  #4,VAR_LONG_ADDRESS_MODE_CHECK                      * -(An) - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00003DE0  6600 0074               4655            BNE     CHECK7
00003DE4                          4656            
00003DE4                          4657            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00003DE4  163C 0020               4658            MOVE.B    #' ',D3
00003DE8  6100 0606               4659            BSR       PUSH_STACK
00003DEC  163C 002D               4660            MOVE.B    #'-',D3
00003DF0  6100 05FE               4661            BSR       PUSH_STACK
00003DF4  163C 0028               4662            MOVE.B    #'(',D3
00003DF8  6100 05F6               4663            BSR       PUSH_STACK
00003DFC  163C 0041               4664            MOVE.B    #'A',D3
00003E00  6100 05EE               4665            BSR       PUSH_STACK
00003E04                          4666  
00003E04                          4667            
00003E04                          4668            *FIND REGISTER NUMBER END LOCATION*  
00003E04  13F9 00004D7E 00004D84  4669            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00003E0E  0239 000F 00004D84      4670            AND.B   #$0F,VAR_BYTE_END
00003E16                          4671            
00003E16                          4672            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003E16  23C5 00004D88           4673            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003E1C  1439 00004D84           4674            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003E22                          4675            
00003E22                          4676            *INTITIALIZE FOR BIT SHIFTING
00003E22  41F9 00004D88           4677            LEA     VAR_TEMP_CLEANCOPY,A0
00003E28  2639 00004D88           4678            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003E2E                          4679            
00003E2E                          4680  LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
00003E2E  0C02 0000               4681            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003E32  6700 0008               4682            BEQ     MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00003E36  E24B                    4683            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003E38  5302                    4684            SUBI.B   #1,D2                     *DECREMENT COUNTER
00003E3A  60F2                    4685            BRA     LOOP_SHIFTING4            *CONTINUE SHIFTING 
00003E3C                          4686                                               *change: NAME OF LABEL*
00003E3C                          4687  MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
00003E3C  0283 00000007           4688            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003E42  0603 0030               4689            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00003E46  6100 05A8               4690            BSR     PUSH_STACK                *PUSH TO STACK
00003E4A                          4691            
00003E4A  163C 0029               4692            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003E4E  6100 05A0               4693            BSR       PUSH_STACK
00003E52                          4694            
00003E52  6000 012C               4695            BRA     GET_SRC_SUCCESS                   *RETURN
00003E56                          4696            
00003E56                          4697                      
00003E56                          4698            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
00003E56  0CB9 00000007 00004D8C  4699  CHECK7    CMPI.L  #7,VAR_LONG_ADDRESS_MODE_CHECK                      *IF (MODE != 111)
00003E60  6600 011A               4700            BNE     GET_SRC_FAILED                                      *THAN BRANCH TO UNCESSFULL SRC MODE READ
00003E64                          4701                   
00003E64                          4702            *NEXT: (MODE == 111) 
00003E64                          4703            *NOW: CHECK FOR SRC REGISTER 
00003E64                          4704                  *(000 = (xxx).W)
00003E64                          4705                  *(001 = (xxx).L)
00003E64                          4706                  *(010 = #<data>)
00003E64                          4707                  
00003E64                          4708            *FIND REGISTER NUMBER END LOCATION*  
00003E64  13F9 00004D7E 00004D84  4709            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00003E6E  0239 000F 00004D84      4710            AND.B   #$0F,VAR_BYTE_END
00003E76                          4711            
00003E76                          4712            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003E76  23C5 00004D88           4713            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003E7C  1439 00004D84           4714            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003E82                          4715            
00003E82                          4716            *INTITIALIZE FOR BIT SHIFTING
00003E82  41F9 00004D88           4717            LEA     VAR_TEMP_CLEANCOPY,A0
00003E88  2C39 00004D88           4718            MOVE.L  VAR_TEMP_CLEANCOPY,D6
00003E8E                          4719  SRC_LOOP_SHIFTING
00003E8E  0C02 0000               4720            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003E92  6700 0008               4721            BEQ     SRC_MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00003E96  E24E                    4722            LSR     #1,D6                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003E98  5302                    4723            SUB.B   #1,D2                     *DECREMENT COUNTER
00003E9A  60F2                    4724            BRA     SRC_LOOP_SHIFTING             *CONTINUE SHIFTING
00003E9C                          4725  SRC_MASKING_NEXT
00003E9C  CCBC 00000007           4726            AND.L   #7,D6                     *MASK, ONLY NEED 0-2 BIT INDEXES 
00003EA2                          4727           *D3 - REGISTER NUMBER NEEDED TO CHECK WHICH W/L/#<DATA>*
00003EA2                          4728           
00003EA2                          4729  CHECK_WORD  
00003EA2  41F9 00004D7C           4730            LEA     TEMP_REGISTER_FORMAT,A0
00003EA8  1439 00004D7B           4731            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003EAE  1082                    4732            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003EB0  0239 0020 00004D7C      4733            ANDI.B  #$20,TEMP_REGISTER_FORMAT                           * MASKS 0010 0000                                                     *change <SRC>*
00003EB8  0C39 0020 00004D7C      4734            CMPI.B  #$20,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0010 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003EC0  6700 0026               4735            BEQ     CHECK_LONG                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00003EC4  0C06 0000               4736            CMPI.B  #0,D6                          
00003EC8  6600 001E               4737            BNE     CHECK_LONG 
00003ECC                          4738            
00003ECC                          4739            *IT IS A WORD AT THIS POINT*
00003ECC                          4740            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003ECC  163C 0020               4741            MOVE.B    #' ',D3
00003ED0  6100 051E               4742            BSR       PUSH_STACK
00003ED4  163C 0024               4743            MOVE.B    #'$',D3
00003ED8  6100 0516               4744            BSR       PUSH_STACK
00003EDC  321D                    4745            MOVE.W    (A5)+,D1
00003EDE  7404                    4746            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003EE0  6100 D38E               4747            BSR       HEX2ASCII2STACK
00003EE4  6000 009A               4748            BRA     GET_SRC_SUCCESS
00003EE8                          4749  
00003EE8                          4750  CHECK_LONG
00003EE8  41F9 00004D7C           4751            LEA     TEMP_REGISTER_FORMAT,A0
00003EEE  1439 00004D7B           4752            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003EF4  1082                    4753            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003EF6  0239 0040 00004D7C      4754            ANDI.B  #$40,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00003EFE  0C39 0040 00004D7C      4755            CMPI.B  #$40,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003F06  6700 002E               4756            BEQ     CHECK_IMMEDIATE                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00003F0A  0C06 0001               4757            CMPI.B  #1,D6                          
00003F0E  6600 0026               4758            BNE     CHECK_IMMEDIATE  
00003F12                          4759  
00003F12                          4760            *IT IS A WORD AT THIS POINT*
00003F12                          4761            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003F12  163C 0020               4762            MOVE.B    #' ',D3
00003F16  6100 04D8               4763            BSR       PUSH_STACK
00003F1A  163C 0024               4764            MOVE.B    #'$',D3
00003F1E  6100 04D0               4765            BSR       PUSH_STACK
00003F22  321D                    4766            MOVE.W    (A5)+,D1
00003F24  7404                    4767            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003F26  6100 D348               4768            BSR       HEX2ASCII2STACK
00003F2A  321D                    4769            MOVE.W    (A5)+,D1
00003F2C  7404                    4770            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003F2E  6100 D340               4771            BSR       HEX2ASCII2STACK
00003F32  6000 004C               4772            BRA     GET_SRC_SUCCESS
00003F36                          4773            
00003F36                          4774  CHECK_IMMEDIATE
00003F36  41F9 00004D7C           4775            LEA     TEMP_REGISTER_FORMAT,A0
00003F3C  1439 00004D7B           4776            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003F42  1082                    4777            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003F44  0239 0080 00004D7C      4778            ANDI.B  #$80,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00003F4C  0C39 0080 00004D7C      4779            CMPI.B  #$80,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003F54  6700 0026               4780            BEQ     GET_SRC_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00003F58  0C06 0004               4781            CMPI.B  #4,D6                          
00003F5C  6600 001E               4782            BNE     GET_SRC_FAILED 
00003F60                          4783  
00003F60                          4784            *IT IS A WORD AT THIS POINT*
00003F60                          4785            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003F60  163C 0020               4786            MOVE.B    #' ',D3
00003F64  6100 048A               4787            BSR       PUSH_STACK
00003F68  163C 0023               4788            MOVE.B    #'#',D3
00003F6C  6100 0482               4789            BSR       PUSH_STACK
00003F70  321D                    4790            MOVE.W    (A5)+,D1
00003F72  7404                    4791            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003F74  6100 D2FA               4792            BSR       HEX2ASCII2STACK
00003F78  6000 0006               4793            BRA     GET_SRC_SUCCESS
00003F7C                          4794            
00003F7C                          4795  GET_SRC_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
00003F7C  7801                    4796            MOVE.L #1,D4
00003F7E  4E75                    4797            RTS
00003F80                          4798  GET_SRC_SUCCESS 
00003F80  4E75                    4799            RTS
00003F82                          4800                                 
00003F82                          4801      
00003F82                          4802  
00003F82                          4803  
00003F82                          4804  
00003F82                          4805  
00003F82                          4806  
00003F82                          4807  
00003F82                          4808  GET_EA_EA_DEST
00003F82                          4809  *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
00003F82                          4810      
00003F82                          4811      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
00003F82  2405                    4812      MOVE.L  D5,D2                           * CLEAN COPY TO D2
00003F84  EC8A                    4813      LSR.L   #6,D2                           * [D2] Temporarily used D2 for shifting bits                *TODO: DYNAMIC MODE LOCATION
00003F86  23C2 00004D8C           4814      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
00003F8C  7407                    4815      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
00003F8E  C5B9 00004D8C           4816      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
00003F94                          4817                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
00003F94                          4818      
00003F94                          4819      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
00003F94                          4820      *DESTINATION REGISTER FORMAT STANDARD         *
00003F94                          4821      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
00003F94                          4822      *WHEN BIT = 0(VALID ADDRESS MODE)             *
00003F94                          4823      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
00003F94                          4824      *0 - Dn                                       *
00003F94                          4825      *1 - An                                       *
00003F94                          4826      *2 - (An)                                     *
00003F94                          4827      *3 - (An)+                                    *
00003F94                          4828      *4 - -(An)                                    *
00003F94                          4829      *5 - (XXX).W                                  *
00003F94                          4830      *6 - (XXX).L                                  *
00003F94                          4831      *7 - #<data>                                  *
00003F94                          4832      ***********************************************
00003F94                          4833      
00003F94                          4834      *** Check if source ...  <ea> = Dn
00003F94                          4835  DEST_CHECK0    
00003F94  41F9 00004D7C           4836            LEA     TEMP_REGISTER_FORMAT,A0
00003F9A  1439 00004D7A           4837            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003FA0  1082                    4838            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003FA2  0239 0001 00004D7C      4839            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
00003FAA  0C39 0001 00004D7C      4840            CMPI.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
00003FB2  6700 006A               4841            BEQ     DEST_CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00003FB6  0CB9 00000000 00004D8C  4842            CMPI.L     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn) - COMPARE MODES TO SEE IF IT IS THIS MODE
00003FC0  6600 005C               4843            BNE     DEST_CHECK1
00003FC4                          4844            
00003FC4                          4845            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003FC4  163C 0020               4846            MOVE.B    #' ',D3
00003FC8  6100 0426               4847            BSR       PUSH_STACK
00003FCC  163C 0044               4848            MOVE.B    #'D',D3
00003FD0  6100 041E               4849            BSR       PUSH_STACK
00003FD4                          4850  
00003FD4                          4851            *FIND REGISTER NUMBER END LOCATION*  
00003FD4  13F9 00004D7D 00004D84  4852            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00003FDE  0239 000F 00004D84      4853            AND.B   #$0F,VAR_BYTE_END
00003FE6                          4854            
00003FE6                          4855            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003FE6  23C5 00004D88           4856            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003FEC  1439 00004D84           4857            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003FF2                          4858            
00003FF2                          4859            *INTITIALIZE FOR BIT SHIFTING
00003FF2  41F9 00004D88           4860            LEA     VAR_TEMP_CLEANCOPY,A0
00003FF8  2639 00004D88           4861            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003FFE                          4862  DEST_LOOP_SHIFTING
00003FFE  0C02 0000               4863            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00004002  6700 0008               4864            BEQ     DEST_MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00004006  E24B                    4865            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00004008  5302                    4866            SUB.B   #1,D2                     *DECREMENT COUNTER
0000400A  60F2                    4867            BRA     DEST_LOOP_SHIFTING             *CONTINUE SHIFTING
0000400C                          4868  DEST_MASKING_NEXT
0000400C  C6BC 00000007           4869            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00004012  0603 0030               4870            ADD.B   #$30,D3                   *CONVERT TO CHAR
00004016  6100 03D8               4871            BSR     PUSH_STACK                *PUSH TO STACK
0000401A                          4872            
0000401A  6000 0394               4873            BRA     GET_DST_SUCCESS           *RETURN          
0000401E                          4874            
0000401E                          4875            
0000401E                          4876            *** Check if source ...  <ea> = An
0000401E                          4877  DEST_CHECK1    
0000401E  41F9 00004D7C           4878            LEA     TEMP_REGISTER_FORMAT,A0
00004024  1439 00004D7A           4879            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000402A  1082                    4880            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000402C  0239 0002 00004D7C      4881            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
00004034  0C39 0002 00004D7C      4882            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
0000403C  6700 006A               4883            BEQ     DEST_CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00004040  0CB9 00000001 00004D8C  4884            CMPI.L  #1,VAR_LONG_ADDRESS_MODE_CHECK                      * An - COMPARE MODES TO SEE IF IT IS THIS MODE
0000404A  6600 005C               4885            BNE     DEST_CHECK2
0000404E                          4886            
0000404E                          4887            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
0000404E  163C 0020               4888            MOVE.B    #' ',D3
00004052  6100 039C               4889            BSR       PUSH_STACK
00004056  163C 0041               4890            MOVE.B    #'A',D3
0000405A  6100 0394               4891            BSR       PUSH_STACK
0000405E                          4892  
0000405E                          4893            
0000405E                          4894            *FIND REGISTER NUMBER END LOCATION*  
0000405E  13F9 00004D7D 00004D84  4895            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00004068  0239 000F 00004D84      4896            AND.B   #$0F,VAR_BYTE_END
00004070                          4897            
00004070                          4898            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00004070  23C5 00004D88           4899            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00004076  1439 00004D84           4900            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
0000407C                          4901            
0000407C                          4902            *INTITIALIZE FOR BIT SHIFTING
0000407C  41F9 00004D88           4903            LEA     VAR_TEMP_CLEANCOPY,A0
00004082  2639 00004D88           4904            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00004088                          4905  DEST_LOOP_SHIFTING1
00004088  0C02 0000               4906            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000408C  6700 0008               4907            BEQ     DEST_MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00004090  E24B                    4908            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00004092  5302                    4909            SUB.B   #1,D2                     *DECREMENT COUNTER
00004094  60F2                    4910            BRA     DEST_LOOP_SHIFTING1             *CONTINUE SHIFTING
00004096                          4911  DEST_MASKING_NEXT1
00004096  C6BC 00000007           4912            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
0000409C  0603 0030               4913            ADD.B   #$30,D3                   *CONVERT TO CHAR
000040A0  6100 034E               4914            BSR     PUSH_STACK                *PUSH TO STACK
000040A4                          4915            
000040A4  6000 030A               4916            BRA     GET_DST_SUCCESS                   *RETURN 
000040A8                          4917            
000040A8                          4918            
000040A8                          4919            
000040A8                          4920            
000040A8                          4921            *** Check if source ...  <ea> = (An)       
000040A8                          4922  DEST_CHECK2    
000040A8  41F9 00004D7C           4923            LEA     TEMP_REGISTER_FORMAT,A0
000040AE  1439 00004D7A           4924            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000040B4  1082                    4925            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000040B6  0239 0004 00004D7C      4926            ANDI.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
000040BE  0C39 0004 00004D7C      4927            CMPI.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
000040C6  6700 007A               4928            BEQ     DEST_CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
000040CA  0CB9 00000002 00004D8C  4929            CMPI.L   #2,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)  COMPARE MODES TO SEE IF IT IS THIS MODE                                                                *change: checkx++*
000040D4  6600 006C               4930            BNE     DEST_CHECK3
000040D8                          4931            
000040D8                          4932            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
000040D8  163C 0020               4933            MOVE.B    #' ',D3
000040DC  6100 0312               4934            BSR       PUSH_STACK
000040E0  163C 0028               4935            MOVE.B    #'(',D3
000040E4  6100 030A               4936            BSR       PUSH_STACK
000040E8  163C 0041               4937            MOVE.B    #'A',D3
000040EC  6100 0302               4938            BSR       PUSH_STACK
000040F0                          4939  
000040F0                          4940            
000040F0                          4941            *FIND REGISTER NUMBER END LOCATION*  
000040F0  13F9 00004D7D 00004D84  4942            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
000040FA  0239 000F 00004D84      4943            AND.B   #$0F,VAR_BYTE_END
00004102                          4944            
00004102                          4945            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00004102  23C5 00004D88           4946            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00004108  1439 00004D84           4947            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
0000410E                          4948            
0000410E                          4949            *INTITIALIZE FOR BIT SHIFTING
0000410E  41F9 00004D88           4950            LEA     VAR_TEMP_CLEANCOPY,A0
00004114  2639 00004D88           4951            MOVE.L  VAR_TEMP_CLEANCOPY,D3
0000411A                          4952  DEST_LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
0000411A  0C02 0000               4953            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000411E  6700 0008               4954            BEQ     DEST_MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00004122  E24B                    4955            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00004124  5302                    4956            SUB.B   #1,D2                     *DECREMENT COUNTER
00004126  60F2                    4957            BRA     DEST_LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
00004128                          4958  DEST_MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
00004128  0283 00000007           4959            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
0000412E  0603 0030               4960            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00004132  6100 02BC               4961            BSR     PUSH_STACK                *PUSH TO STACK
00004136                          4962            
00004136  163C 0029               4963            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
0000413A  6100 02B4               4964            BSR       PUSH_STACK
0000413E                          4965            
0000413E  6000 0270               4966            BRA     GET_DST_SUCCESS                   *RETURN 
00004142                          4967  
00004142                          4968            
00004142                          4969            
00004142                          4970                      
00004142                          4971  *** Check if source ...  <ea> = (An)+       
00004142  41F9 00004D7C           4972  DEST_CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
00004148  1439 00004D7A           4973            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000414E  1082                    4974            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00004150  0239 0008 00004D7C      4975            ANDI.B  #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
00004158  0C39 0008 00004D7C      4976            CMPI.B  #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
00004160  6700 0082               4977            BEQ     DEST_CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00004164  0CB9 00000003 00004D8C  4978            CMPI.L  #3,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)+ - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
0000416E  6600 0074               4979            BNE     DEST_CHECK4
00004172                          4980            
00004172                          4981            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00004172  163C 0020               4982            MOVE.B    #' ',D3
00004176  6100 0278               4983            BSR       PUSH_STACK
0000417A  163C 0028               4984            MOVE.B    #'(',D3
0000417E  6100 0270               4985            BSR       PUSH_STACK
00004182  163C 0041               4986            MOVE.B    #'A',D3
00004186  6100 0268               4987            BSR       PUSH_STACK
0000418A                          4988  
0000418A                          4989            
0000418A                          4990            *FIND REGISTER NUMBER END LOCATION*  
0000418A  13F9 00004D7D 00004D84  4991            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00004194  0239 000F 00004D84      4992            ANDI.B   #$0F,VAR_BYTE_END
0000419C                          4993            
0000419C                          4994            *GET INDEX OF THE END OF SRC REGISTER NUMBER
0000419C  23C5 00004D88           4995            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000041A2  1439 00004D84           4996            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000041A8                          4997            
000041A8                          4998            *INTITIALIZE FOR BIT SHIFTING
000041A8  41F9 00004D88           4999            LEA     VAR_TEMP_CLEANCOPY,A0
000041AE  2639 00004D88           5000            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000041B4                          5001            
000041B4                          5002  DEST_LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
000041B4  0C02 0000               5003            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000041B8  6700 0008               5004            BEQ     DEST_MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
000041BC  E24B                    5005            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000041BE  5302                    5006            SUBI.B   #1,D2                     *DECREMENT COUNTER
000041C0  60F2                    5007            BRA     DEST_LOOP_SHIFTING3            *CONTINUE SHIFTING 
000041C2                          5008                                               *change: NAME OF LABEL*
000041C2                          5009  DEST_MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
000041C2  0283 00000007           5010            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000041C8  0603 0030               5011            ADDI.B   #$30,D3                   *CONVERT TO CHAR
000041CC  6100 0222               5012            BSR     PUSH_STACK                *PUSH TO STACK
000041D0                          5013            
000041D0  163C 0029               5014            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
000041D4  6100 021A               5015            BSR       PUSH_STACK
000041D8  163C 002B               5016            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
000041DC  6100 0212               5017            BSR       PUSH_STACK
000041E0                          5018            
000041E0  6000 01CE               5019            BRA       GET_DST_SUCCESS                   *RETURN 
000041E4                          5020  
000041E4                          5021            
000041E4                          5022            
000041E4                          5023                      
000041E4                          5024            *** Check if source ...  <ea> = -(An)       
000041E4                          5025  DEST_CHECK4    
000041E4  41F9 00004D7C           5026            LEA     TEMP_REGISTER_FORMAT,A0
000041EA  1439 00004D7A           5027            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000041F0  1082                    5028            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000041F2  0239 0010 00004D7C      5029            ANDI.B  #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
000041FA  0C39 0010 00004D7C      5030            CMPI.B  #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00004202  6700 0082               5031            BEQ     DEST_CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00004206  0CB9 00000004 00004D8C  5032            CMPI.L  #4,VAR_LONG_ADDRESS_MODE_CHECK                      * -(An) - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00004210  6600 0074               5033            BNE     DEST_CHECK7
00004214                          5034            
00004214                          5035            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00004214  163C 0020               5036            MOVE.B    #' ',D3
00004218  6100 01D6               5037            BSR       PUSH_STACK
0000421C  163C 002D               5038            MOVE.B    #'-',D3
00004220  6100 01CE               5039            BSR       PUSH_STACK
00004224  163C 0028               5040            MOVE.B    #'(',D3
00004228  6100 01C6               5041            BSR       PUSH_STACK
0000422C  163C 0041               5042            MOVE.B    #'A',D3
00004230  6100 01BE               5043            BSR       PUSH_STACK
00004234                          5044  
00004234                          5045            
00004234                          5046            *FIND REGISTER NUMBER END LOCATION*  
00004234  13F9 00004D7D 00004D84  5047            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
0000423E  0239 000F 00004D84      5048            AND.B   #$0F,VAR_BYTE_END
00004246                          5049            
00004246                          5050            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00004246  23C5 00004D88           5051            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
0000424C  1439 00004D84           5052            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00004252                          5053            
00004252                          5054            *INTITIALIZE FOR BIT SHIFTING
00004252  41F9 00004D88           5055            LEA     VAR_TEMP_CLEANCOPY,A0
00004258  2639 00004D88           5056            MOVE.L  VAR_TEMP_CLEANCOPY,D3
0000425E                          5057            
0000425E                          5058  DEST_LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
0000425E  0C02 0000               5059            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00004262  6700 0008               5060            BEQ     DEST_MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00004266  E24B                    5061            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00004268  5302                    5062            SUBI.B   #1,D2                     *DECREMENT COUNTER
0000426A  60F2                    5063            BRA     DEST_LOOP_SHIFTING4            *CONTINUE SHIFTING 
0000426C                          5064                                               *change: NAME OF LABEL*
0000426C                          5065  DEST_MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
0000426C  0283 00000007           5066            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00004272  0603 0030               5067            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00004276  6100 0178               5068            BSR     PUSH_STACK                *PUSH TO STACK
0000427A                          5069            
0000427A  163C 0029               5070            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
0000427E  6100 0170               5071            BSR       PUSH_STACK
00004282                          5072            
00004282  6000 012C               5073            BRA     GET_DST_SUCCESS                   *RETURN
00004286                          5074            
00004286                          5075                      
00004286                          5076            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
00004286                          5077  DEST_CHECK7    
00004286  0CB9 00000007 00004D8C  5078            CMPI.L  #7,VAR_LONG_ADDRESS_MODE_CHECK                      *IF (MODE != 111)
00004290  6600 011A               5079            BNE     GET_DST_FAILED                                      *THAN BRANCH TO UNCESSFULL SRC MODE READ
00004294                          5080                   
00004294                          5081            *NEXT: (MODE == 111) 
00004294                          5082            *NOW: CHECK FOR SRC REGISTER 
00004294                          5083                  *(000 = (xxx).W)
00004294                          5084                  *(001 = (xxx).L)
00004294                          5085                  *(010 = #<data>)
00004294                          5086                  
00004294                          5087            *FIND REGISTER NUMBER END LOCATION*  
00004294  13F9 00004D7D 00004D84  5088            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
0000429E  0239 000F 00004D84      5089            AND.B   #$0F,VAR_BYTE_END
000042A6                          5090            
000042A6                          5091            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000042A6  23C5 00004D88           5092            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000042AC  1439 00004D84           5093            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000042B2                          5094            
000042B2                          5095            *INTITIALIZE FOR BIT SHIFTING
000042B2  41F9 00004D88           5096            LEA     VAR_TEMP_CLEANCOPY,A0
000042B8  2C39 00004D88           5097            MOVE.L  VAR_TEMP_CLEANCOPY,D6
000042BE                          5098  DEST_LOOP_SHIFTING7
000042BE  0C02 0000               5099            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000042C2  6700 0008               5100            BEQ     DEST_MASKING_NEXT7              *IF SHIFTING FINISHED MOVE ON TO MASKING 
000042C6  E24E                    5101            LSR     #1,D6                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000042C8  5302                    5102            SUB.B   #1,D2                     *DECREMENT COUNTER
000042CA  60F2                    5103            BRA     DEST_LOOP_SHIFTING7             *CONTINUE SHIFTING
000042CC                          5104  DEST_MASKING_NEXT7
000042CC  CCBC 00000007           5105            AND.L   #7,D6                     *MASK, ONLY NEED 0-2 BIT INDEXES 
000042D2                          5106           *D3 - REGISTER NUMBER NEEDED TO CHECK WHICH W/L/#<DATA>*
000042D2                          5107            
000042D2                          5108  DEST_CHECK_WORD  
000042D2  41F9 00004D7C           5109            LEA     TEMP_REGISTER_FORMAT,A0
000042D8  1439 00004D7A           5110            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000042DE  1082                    5111            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000042E0  0239 0020 00004D7C      5112            ANDI.B  #$20,TEMP_REGISTER_FORMAT                           * MASKS 0010 0000                                                     *change <SRC>*
000042E8  0C39 0020 00004D7C      5113            CMPI.B  #$20,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0010 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
000042F0  6700 0026               5114            BEQ     DEST_CHECK_LONG                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
000042F4  0C06 0000               5115            CMPI.B  #0,D6                                                   *COMPARE REGISTER NUMBER WITH (000 == 000) FOR WORD
000042F8  6600 001E               5116            BNE     DEST_CHECK_LONG                                      * THE REGISTER NUMBER DOESN'T MATCH "(XXX).W" -> SO MOVE ON       
000042FC                          5117            *IT IS A WORD AT THIS POINT*
000042FC                          5118            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000042FC  163C 0020               5119            MOVE.B    #' ',D3
00004300  6100 00EE               5120            BSR       PUSH_STACK
00004304  163C 0024               5121            MOVE.B    #'$',D3
00004308  6100 00E6               5122            BSR       PUSH_STACK
0000430C  321D                    5123            MOVE.W    (A5)+,D1
0000430E  7404                    5124            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00004310  6100 CF5E               5125            BSR       HEX2ASCII2STACK
00004314  6000 009A               5126            BRA       GET_DST_SUCCESS
00004318                          5127  
00004318                          5128  DEST_CHECK_LONG
00004318  41F9 00004D7C           5129            LEA     TEMP_REGISTER_FORMAT,A0
0000431E  1439 00004D7A           5130            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00004324  1082                    5131            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00004326  0239 0040 00004D7C      5132            ANDI.B  #$40,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
0000432E  0C39 0040 00004D7C      5133            CMPI.B  #$40,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00004336  6700 002E               5134            BEQ     DEST_CHECK_IMMEDIATE                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
0000433A  0C06 0001               5135            CMPI.B  #1,D6                                                   *COMPARE REGISTER NUMBER WITH (001 == 001) FOR WORD
0000433E  6600 0026               5136            BNE     DEST_CHECK_IMMEDIATE                                      * THE REGISTER NUMBER DOESN'T MATCH "(XXX).L" -> SO MOVE ON 
00004342                          5137            *IT IS A WORD AT THIS POINT*
00004342                          5138            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00004342  163C 0020               5139            MOVE.B    #' ',D3
00004346  6100 00A8               5140            BSR       PUSH_STACK
0000434A  163C 0024               5141            MOVE.B    #'$',D3
0000434E  6100 00A0               5142            BSR       PUSH_STACK
00004352  321D                    5143            MOVE.W    (A5)+,D1        * GET NEXT WORD INTO STACK
00004354  7404                    5144            MOVE.L    #4,D2           * SETS SIZE = 4 FOR CONVERSION TO ASCII
00004356  6100 CF18               5145            BSR       HEX2ASCII2STACK
0000435A  321D                    5146            MOVE.W    (A5)+,D1        * GET NEXT WORD INTO STACK
0000435C  7404                    5147            MOVE.L    #4,D2          
0000435E  6100 CF10               5148            BSR       HEX2ASCII2STACK
00004362  6000 004C               5149            BRA     GET_DST_SUCCESS
00004366                          5150            
00004366                          5151  DEST_CHECK_IMMEDIATE
00004366  41F9 00004D7C           5152            LEA     TEMP_REGISTER_FORMAT,A0
0000436C  1439 00004D7A           5153            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00004372  1082                    5154            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00004374  0239 0080 00004D7C      5155            ANDI.B  #$80,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
0000437C  0C39 0080 00004D7C      5156            CMPI.B  #$80,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00004384  6700 0026               5157            BEQ     GET_DST_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00004388  0C06 0004               5158            CMPI.B  #4,D6                                               * COMPARE REGISTER NUMBER WITH (010 == 010) FOR WORD
0000438C  6600 001E               5159            BNE     GET_DST_FAILED                                      * THE REGISTER NUMBER DOESN'T MATCH "#<DATA>" -> SO MOVE ON 
00004390                          5160            
00004390                          5161            *IT IS A WORD AT THIS POINT*
00004390                          5162            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00004390  163C 0020               5163            MOVE.B    #' ',D3
00004394  6100 005A               5164            BSR       PUSH_STACK
00004398  163C 0023               5165            MOVE.B    #'#',D3
0000439C  6100 0052               5166            BSR       PUSH_STACK
000043A0  321D                    5167            MOVE.W    (A5)+,D1
000043A2  7404                    5168            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
000043A4  6100 CECA               5169            BSR       HEX2ASCII2STACK
000043A8  6000 0006               5170            BRA       GET_DST_SUCCESS
000043AC                          5171            
000043AC                          5172  GET_DST_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
000043AC  7801                    5173            MOVE.L #1,D4
000043AE  4E75                    5174            RTS
000043B0                          5175  GET_DST_SUCCESS 
000043B0  4E75                    5176            RTS
000043B2                          5177  
000043B2                          5178  
000043B2                          5179  *---------------------------------------------------------------------------*
000043B2                          5180  * STACK/QUEUE INTERFACE
000043B2                          5181  *---------------------------------------------------------------------------*
000043B2                          5182  PRINT_STACK
000043B2  0C39 0000 00004D76      5183            CMP.B     #0,COUNTER
000043BA  6700 000E               5184            BEQ       PRINT_STACK_RETURN             *CHECK IF LOOP IS FINISHED
000043BE                          5185            
000043BE                          5186  PRINT_STACK_HELPER
000043BE  6100 0038               5187            BSR      POP_STACK          *PRINTS ADDRESS
000043C2  103C 0006               5188            MOVE.B   #6,D0              *Display single character in D1.B. 
000043C6  4E4F                    5189            TRAP     #15             *ACTIVATES PRINT
000043C8                          5190  
000043C8  60E8                    5191            BRA       PRINT_STACK
000043CA                          5192  PRINT_STACK_RETURN
000043CA  4E75                    5193            RTS
000043CC                          5194            
000043CC                          5195            
000043CC                          5196  PRINT_QUEUE
000043CC  0C39 0000 00004D76      5197            CMP.B     #0,COUNTER
000043D4  6700 0018               5198            BEQ       PRINT_QUEUE_RETURN             *CHECK IF LOOP IS FINISHED
000043D8                          5199            
000043D8                          5200  PRINT_QUEUE_HELPER
000043D8  33F9 00004D76 00004D78  5201            MOVE.W   COUNTER,QUEUE_COUNTER
000043E2  6100 0022               5202            BSR      POP_FRONT          *PRINTS ADDRESS
000043E6  103C 0006               5203            MOVE.B   #6,D0              *Display single character in D1.B. 
000043EA  4E4F                    5204            TRAP     #15             *ACTIVATES PRINT
000043EC                          5205  
000043EC  60DE                    5206            BRA       PRINT_QUEUE
000043EE                          5207  PRINT_QUEUE_RETURN
000043EE  4E75                    5208            RTS
000043F0                          5209            
000043F0                          5210  *PUSHES.W CONTENTS OF [D3] INTO STACK          
000043F0                          5211  PUSH_STACK
000043F0  1503                    5212              MOVE.B  D3,-(A2)
000043F2  6100 0058               5213              BSR     INCREMENT
000043F6  4E75                    5214              RTS
000043F8                          5215  *POPS.W TOP OF STACK INTO [D1], SO ITS READY TO PRINT WITH TRAP 15
000043F8                          5216  *         MOVE.W   (A2)+,D1           *PRINTS ADDRESS
000043F8                          5217  *         MOVE.B   #15,D0             *PRINTS ACCORDING TO D2 BASE VALUE
000043F8                          5218  *         MOVE.B   #16,D2             *PRINTS BASED 16 NUMBER
000043F8                          5219  *         TRAP        #15             *ACTIVATES PRINT
000043F8                          5220  POP_STACK
000043F8  BECA                    5221              CMPA.W   A2,SP            *CHECKS IF THERE IS ANYTHING TO PUSH
000043FA  6700 0008               5222              BEQ     POP_RETURN        *IF NOTHING TO PUSH THAN JUST RETURN
000043FE  121A                    5223              MOVE.B  (A2)+,D1 
00004400  6100 0052               5224              BSR     DECREMENT
00004404                          5225  POP_RETURN
00004404  4E75                    5226              RTS 
00004406                          5227        
00004406                          5228  *USE [A4] AS SECOND POINTER IN SHIFTING      
00004406  0C39 0000 00004D78      5229  POP_FRONT   CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
0000440E  6700 0030               5230              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
00004412                          5231              
00004412                          5232              
00004412                          5233              *POSITION THE POINTERS A[4] RIGHT BEHIND A[2] WHICH IS RIGHT BEHIND STACK
00004412  347C 7000               5234              MOVEA.W #STACK,A2   *START A2 AT STACK
00004416  0622 0000               5235              ADD.B   #0,-(A2)    *SHIFT A2 TO THE BOTTOM OF THE STACK
0000441A  384A                    5236              MOVEA.W A2,A4     *START A4 RIGHT ABOVE A2
0000441C  0624 0000               5237              ADD.B   #0,-(A4)  *leash one more higher in stack (a4)
00004420  1212                    5238              MOVE.B  (A2),D1     *POP CONTENTS INTO D1
00004422                          5239  POP_SHIFT_LOOP
00004422  0C39 0000 00004D78      5240              CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
0000442A  6700 0014               5241              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
0000442E  1494                    5242              MOVE.B  (A4),(A2)   *SHIFT CONTENT DOWN THE STACK
00004430  0624 0000               5243              ADD.B   #0,-(A4)
00004434  0622 0000               5244              ADD.B   #0,-(A2) *SHIFT POINTERS DOWN THE STACK
00004438  5339 00004D78           5245              SUB.B   #1,QUEUE_COUNTER *DECREMENT INTERNAL QUEUE COUNTER
0000443E                          5246              
0000443E  60E2                    5247              BRA     POP_SHIFT_LOOP
00004440                          5248                          
00004440                          5249  POP_FRONT_RETURN 
00004440                          5250              *RESET A2 BACK TO SP
00004440  347C 7000               5251              MOVEA.W #STACK,A2    
00004444  5339 00004D76           5252              SUB.B   #1,COUNTER *DECREMENT STACK COUNTER       
0000444A  4E75                    5253              RTS   
0000444C                          5254  
0000444C                          5255  INCREMENT
0000444C  5239 00004D76           5256              ADD.B   #1, COUNTER
00004452  4E75                    5257              RTS           
00004454                          5258  DECREMENT
00004454  5339 00004D76           5259              SUB.B   #1, COUNTER
0000445A  4E75                    5260              RTS           
0000445C                          5261  CLEAR_STACK
0000445C  0C39 0000 00004D76      5262              CMP.B     #0,COUNTER
00004464  6700 0006               5263              BEQ       CLEAR_RETURN
00004468  618E                    5264              BSR       POP_STACK
0000446A  60F0                    5265              BRA       CLEAR_STACK
0000446C                          5266   
0000446C                          5267  CLEAR_RETURN
0000446C  4E75                    5268              RTS    
0000446E                          5269              
0000446E                          5270  *---------------------------------------------------------------------------*
0000446E                          5271  * 8/16/32-bit Address getter
0000446E                          5272  *---------------------------------------------------------------------------*
0000446E                          5273  *get displacement value from bits 0 to 8
0000446E                          5274  *if displacement is not $00, than it is 8 otherwise check for word
0000446E                          5275  *if displacement is not $FF, than it is a long
0000446E                          5276  *add the displacement to the current address being processed + a word
0000446E                          5277  *place results into D3, so that it can be pushed to stack
0000446E                          5278  GET_DISPLACEMENT_ADDRESS
0000446E  2805                    5279              MOVE.L  D5,D4                   * COPIES DATA INTO D6
00004470  0286 000000FF           5280              ANDI.L  #$00FF,D6               * MASKS DATA
00004476  0C84 00000000           5281              CMPI.L  #$00,D4                 * COMPARES DATA IF IT IS WORD
0000447C  6700 0022               5282              BEQ     GET_DISPLACEMENT_WORD
00004480  0C84 000000FF           5283              CMPI.L  #$FF,D4                 * COMPARES DATA IF IT IS LONG
00004486  6700 0030               5284              BEQ     GET_DISPLACEMENT_LONG
0000448A                          5285              
0000448A  2E3C 00000100           5286              MOVE.L  #$100,D7                 *FILL D7 WITH FF SO THAT IT CAN BE SUBTRACTED BY THE DISPLACEMENT GIVING US THE REAL DISPLACEMENT
00004490  9E04                    5287              SUB.B   D4,D7
00004492                          5288              
00004492  280D                    5289              MOVE.L  A5,D4                   * PC+2 ADDRESS INTO D6
00004494  9807                    5290              SUB.B   D7,D4                   * SUBTRACT "DISPLACEMENT + 2 " TO GET THE ORIGINAL ADDRESS BEING BRANCH TO
00004496  7404                    5291              MOVE.L  #4,D2
00004498  2204                    5292              MOVE.L  D4,D1  
0000449A  6100 CDD4               5293              BSR     HEX2ASCII2STACK
0000449E  4E75                    5294              RTS
000044A0                          5295              
000044A0                          5296  GET_DISPLACEMENT_WORD
000044A0  2E3C 000000FF           5297              MOVE.L  #$FF,D7                 *FILL D7 WITH FF SO THAT IT CAN BE SUBTRACTED BY THE DISPLACEMENT GIVING US THE REAL DISPLACEMENT
000044A6  9E04                    5298              SUB.B   D4,D7
000044A8                          5299              
000044A8  280D                    5300              MOVE.L  A5,D4                   * PC+2 ADDRESS INTO D6
000044AA  9807                    5301              SUB.B   D7,D4                   * SUBTRACT "DISPLACEMENT + 2 " TO GET THE ORIGINAL ADDRESS BEING BRANCH TO
000044AC  7404                    5302              MOVE.L  #4,D2
000044AE  2604                    5303              MOVE.L  D4,D3
000044B0  2204                    5304              MOVE.L  D4,D1
000044B2  6100 CDBC               5305              BSR     HEX2ASCII2STACK
000044B6  4E75                    5306              RTS     
000044B8                          5307  GET_DISPLACEMENT_LONG   
000044B8  2E3C 000000FF           5308              MOVE.L  #$FF,D7                 *FILL D7 WITH FF SO THAT IT CAN BE SUBTRACTED BY THE DISPLACEMENT GIVING US THE REAL DISPLACEMENT
000044BE  9E04                    5309              SUB.B   D4,D7
000044C0                          5310              
000044C0  280D                    5311              MOVE.L  A5,D4                   * PC+2 ADDRESS INTO D6
000044C2  9807                    5312              SUB.B   D7,D4                   * SUBTRACT "DISPLACEMENT + 2 " TO GET THE ORIGINAL ADDRESS BEING BRANCH TO
000044C4  7408                    5313              MOVE.L  #8,D2
000044C6  2604                    5314              MOVE.L  D4,D3                   * PREPARE TO PUSH
000044C8  2204                    5315              MOVE.L  D4,D1
000044CA  6100 CDA4               5316              BSR     HEX2ASCII2STACK
000044CE                          5317  
000044CE  4284                    5318              CLR.L   D4
000044D0  4E75                    5319              RTS
000044D2                          5320  
000044D2                          5321  *---------------------------------------------------------------------------*
000044D2                          5322  * TERMINATE
000044D2                          5323  *---------------------------------------------------------------------------*
000044D2                          5324  TERMINATE   
000044D2  43F9 00004882           5325              LEA     FINMSG,A1
000044D8  103C 000E               5326              MOVE.B  #14,D0
000044DC  4E4F                    5327              TRAP    #15
000044DE                          5328  
000044DE  103C 0009               5329              MOVE.B  #9,D0
000044E2  4E4F                    5330              TRAP    #15
000044E4                          5331  
000044E4                          5332  *---------------------------------------------------------------------------*
000044E4                          5333  * Data storage                                                 
000044E4                          5334  *---------------------------------------------------------------------------*  
000044E4                          5335  WELCOME
000044E4= 20 20 20 20 20 20 ...   5336              DC.B '                         ___     ___ ___        ___   ___ ___                 ',CR,LF
00004534= 3D 3D 3D 3D 3D 20 ...   5337              DC.B '=====           \  /\  /|___|   |   |   ||\  /||___    | |   |           =====',CR,LF
00004584= 3D 3D 3D 3D 3D 20 ...   5338              DC.B '=====            \/  \/ |___|___|___|___|| \/ ||___    | |___|           =====',CR,LF
000045D4                          5339      
000045D4= 20 20 20 20 20 20 ...   5340              DC.B '                        ___ ___ ___  ___      ___                             ',CR,LF
00004624= 20 20 20 20 20 20 ...   5341              DC.B '                       |     | |___)|    |   |___                             ',CR,LF 
00004674= 20 20 20 20 20 20 ...   5342              DC.B '                       |___ _|_|\___|___ |___|___                             ',CR,LF
000046C4                          5343      
000046C4= 20 20 20 20 20 20 ...   5344              DC.B '           __  ___ ___   _   ___  ___  ___        ___      ___ ___            ',CR,LF
00004714= 3D 3D 3D 3D 3D 20 ...   5345              DC.B '=====     |  \  | |___  /_\ |___ |___ |___ |\  /||___||   |___|___)      =====',CR,LF 
00004764= 3D 3D 3D 3D 3D 20 ...   5346              DC.B '=====     |__/ _|_ ___|/   \ ___| ___||___ | \/ ||___||___|___|\___      =====',CR,LF,CR,LF,CR,LF,0
000047B9                          5347  
000047B9                          5348  PROMPT_START
000047B9= 50 6C 65 61 73 65 ...   5349              DC.B    'Please enter a hexadecimal starting address.',CR,LF,0
000047E8                          5350      
000047E8                          5351  PROMPT_END
000047E8= 50 6C 65 61 73 65 ...   5352              DC.B    'Please enter a hexadecimal ending address.',CR,LF,0
00004815= 0D 0A 48 69 74 20 ...   5353  DISP_NEXT   DC.B    CR,LF,'Hit Enter to print the next 30 lines.',CR,LF,0            
0000483F= 57 6F 75 6C 64 20 ...   5354  REPEATMSG   DC.B    'Would you like to run again? Press Y to continue or N to finish.',CR,LF,0
00004882= 54 68 61 6E 6B 20 ...   5355  FINMSG      DC.B    'Thank you for using Circle Disassembler.',CR,LF,0
000048AD= 45 72 72 6F 72 3A ...   5356  ERRMSG_1    DC.B    'Error: Invalid Input Address',CR,LF,0
000048CC= 45 72 72 6F 72 3A ...   5357  ERRMSG_3    DC.B    'Error: Invalid Input Address (Odd)',CR,LF,0
000048F1= 45 72 72 6F 72 3A ...   5358  ERRMSG_5    DC.B    'Error: Invalid Input Address (start > end)',CR,LF,0
0000491E                          5359  
0000491E                          5360  VR_S_ADDR   DS.B    80                      * allocate storage space for the starting address
0000496E                          5361  VR_E_ADDR   DS.B    80                      * allocate storage space for the ending address
000049BE                          5362  S_ADDR_HX   DS.L    1                       * allocate storage space for the starting address in hex
000049C2                          5363  E_ADDR_HX   DS.L    1                       * allocate storage space for the ending address in hex
000049C6= 0D 0A 00                5364  ENDLINE_M   DC.B    CR,LF,0
000049C9                          5365  TMPINPUT    DS.B    80                      * temp store user input
00004A19                          5366  TMPOUTPUT   DS.B    80                      * temp store prog output
00004A69= 20 20 20 4F 52 49 ...   5367  DISP_ORI_B  DC.B    '   ORI.B',0
00004A72= 20 20 20 4F 52 49 ...   5368  DISP_ORI_W  DC.B    '   ORI.W',0
00004A7B= 20 20 20 4F 52 49 ...   5369  DISP_ORI_L  DC.B    '   ORI.L',0
00004A84= 20 20 20 45 4F 52 ...   5370  DISP_EORI_B  DC.B    '   EORI.B',0
00004A8E= 20 20 20 45 4F 52 ...   5371  DISP_EORI_W  DC.B    '   EORI.W',0
00004A98= 20 20 20 45 4F 52 ...   5372  DISP_EORI_L  DC.B    '   EORI.L',0
00004AA2= 20 20 20 42 54 53 ...   5373  DISP_BTST   DC.B    '   BTST',0
00004AAA= 20 20 20 43 4D 50 ...   5374  DISP_CMPI_B  DC.B    '   CMPI.B',0
00004AB4= 20 20 20 43 4D 50 ...   5375  DISP_CMPI_W  DC.B    '   CMPI.W',0
00004ABE= 20 20 20 43 4D 50 ...   5376  DISP_CMPI_L  DC.B    '   CMPI.L',0
00004AC8= 20 20 20 44 41 54 ...   5377  DISP_DATA   DC.B    '   DATA',0
00004AD0= 20 20 20 4D 4F 56 ...   5378  DISP_MOVE_B DC.B    '   MOVE.B',0
00004ADA= 20 20 20 4D 4F 56 ...   5379  DISP_MOVE_W DC.B    '   MOVE.W',0
00004AE4= 20 20 20 4D 4F 56 ...   5380  DISP_MOVE_L DC.B    '   MOVE.L',0
00004AEE= 20 20 20 52 54 53 00    5381  DISP_RTS    DC.B    '   RTS',0
00004AF5= 20 20 20 4A 53 52 00    5382  DISP_JSR    DC.B    '   JSR',0
00004AFC= 20 20 20 4E 45 47 ...   5383  DISP_NEG_B    DC.B    '   NEG.B',0
00004B05= 20 20 20 4E 45 47 ...   5384  DISP_NEG_W    DC.B    '   NEG.W',0
00004B0E= 20 20 20 4E 45 47 ...   5385  DISP_NEG_L    DC.B    '   NEG.L',0
00004B17= 20 20 20 4E 4F 54 ...   5386  DISP_NOT_B  DC.B    '   NOT.B',0
00004B20= 20 20 20 4E 4F 54 ...   5387  DISP_NOT_W  DC.B    '   NOT.W',0
00004B29= 20 20 20 4E 4F 54 ...   5388  DISP_NOT_L  DC.B    '   NOT.L',0
00004B32= 20 20 20 4C 45 41 00    5389  DISP_LEA    DC.B    '   LEA',0
00004B39= 20 20 20 4D 4F 56 ...   5390  DISP_MOVEM_W    DC.B    '   MOVEM.W',0
00004B44= 20 20 20 4D 4F 56 ...   5391  DISP_MOVEM_L    DC.B    '   MOVEM.L',0
00004B4F= 20 20 20 41 44 44 ...   5392  DISP_ADDQ_B DC.B    '   ADDQ.B',0
00004B59= 20 20 20 41 44 44 ...   5393  DISP_ADDQ_W DC.B    '   ADDQ.W',0
00004B63= 20 20 20 41 44 44 ...   5394  DISP_ADDQ_L DC.B    '   ADDQ.L',0
00004B6D= 20 20 20 44 49 56 ...   5395  DISP_DIVS   DC.B    '   DIVS',0
00004B75= 20 20 20 53 55 42 ...   5396  DISP_SUB_B  DC.B    '   SUB.B',0
00004B7E= 20 20 20 53 55 42 ...   5397  DISP_SUB_W  DC.B    '   SUB.W',0
00004B87= 20 20 20 53 55 42 ...   5398  DISP_SUB_L  DC.B    '   SUB.L',0
00004B90= 20 20 20 53 55 42 ...   5399  DISP_SUBI_B  DC.B    '   SUBI.B',0
00004B9A= 20 20 20 53 55 42 ...   5400  DISP_SUBI_W  DC.B    '   SUBI.W',0
00004BA4= 20 20 20 53 55 42 ...   5401  DISP_SUBI_L  DC.B    '   SUBI.L',0
00004BAE= 20 20 20 53 55 42 ...   5402  DISP_SUBA_W  DC.B    '   SUBA.W',0
00004BB8= 20 20 20 53 55 42 ...   5403  DISP_SUBA_L  DC.B    '   SUBA.L',0
00004BC2= 20 20 20 45 4F 52 ...   5404  DISP_EOR_B  DC.B    '   EOR.B',0
00004BCB= 20 20 20 45 4F 52 ...   5405  DISP_EOR_W  DC.B    '   EOR.W',0
00004BD4= 20 20 20 45 4F 52 ...   5406  DISP_EOR_L  DC.B    '   EOR.L',0
00004BDD= 20 20 20 43 4D 50 ...   5407  DISP_CMP_B  DC.B    '   CMP.B',0
00004BE6= 20 20 20 43 4D 50 ...   5408  DISP_CMP_W  DC.B    '   CMP.W',0
00004BEF= 20 20 20 43 4D 50 ...   5409  DISP_CMP_L  DC.B    '   CMP.L',0
00004BF8= 20 20 20 43 4D 50 ...   5410  DISP_CMPA_W  DC.B    '   CMPA.W',0
00004C02= 20 20 20 43 4D 50 ...   5411  DISP_CMPA_L  DC.B    '   CMPA.L',0
00004C0C= 20 20 20 4D 55 4C ...   5412  DISP_MULS_W DC.B    '   MULS.W',0
00004C16= 20 20 20 41 4E 44 ...   5413  DISP_AND_B  DC.B    '   AND.B',0
00004C1F= 20 20 20 41 4E 44 ...   5414  DISP_AND_W  DC.B    '   AND.W',0
00004C28= 20 20 20 41 4E 44 ...   5415  DISP_AND_L  DC.B    '   AND.L',0
00004C31= 20 20 20 41 44 44 ...   5416  DISP_ADD_B  DC.B    '   ADD.B',0
00004C3A= 20 20 20 41 44 44 ...   5417  DISP_ADD_W  DC.B    '   ADD.W',0
00004C43= 20 20 20 41 44 44 ...   5418  DISP_ADD_L  DC.B    '   ADD.L',0
00004C4C= 20 20 20 41 44 44 ...   5419  DISP_ADDA_W DC.B    '   ADDA.W',0
00004C56= 20 20 20 41 44 44 ...   5420  DISP_ADDA_L DC.B    '   ADDA.L',0
00004C60= 20 20 20 4C 53 52 ...   5421  DISP_LSR_B  DC.B    '   LSR.B',0
00004C69= 20 20 20 4C 53 4C ...   5422  DISP_LSL_B  DC.B    '   LSL.B',0
00004C72= 20 20 20 4C 53 52 ...   5423  DISP_LSR_W  DC.B    '   LSR.W',0
00004C7B= 20 20 20 4C 53 4C ...   5424  DISP_LSL_W  DC.B    '   LSL.W',0
00004C84= 20 20 20 4C 53 52 ...   5425  DISP_LSR_L  DC.B    '   LSR.L',0
00004C8D= 20 20 20 4C 53 4C ...   5426  DISP_LSL_L  DC.B    '   LSL.L',0
00004C96= 20 20 20 41 53 52 ...   5427  DISP_ASR_B  DC.B    '   ASR.B',0
00004C9F= 20 20 20 41 53 4C ...   5428  DISP_ASL_B  DC.B    '   ASL.B',0
00004CA8= 20 20 20 41 53 52 ...   5429  DISP_ASR_W  DC.B    '   ASR.W',0
00004CB1= 20 20 20 41 53 4C ...   5430  DISP_ASL_W  DC.B    '   ASL.W',0
00004CBA= 20 20 20 41 53 52 ...   5431  DISP_ASR_L  DC.B    '   ASR.L',0
00004CC3= 20 20 20 41 53 4C ...   5432  DISP_ASL_L  DC.B    '   ASL.L',0
00004CCC= 20 20 20 52 4F 52 ...   5433  DISP_ROR_B  DC.B    '   ROR.B',0
00004CD5= 20 20 20 52 4F 4C ...   5434  DISP_ROL_B  DC.B    '   ROL.B',0
00004CDE= 20 20 20 52 4F 52 ...   5435  DISP_ROR_W  DC.B    '   ROR.W',0
00004CE7= 20 20 20 52 4F 4C ...   5436  DISP_ROL_W  DC.B    '   ROL.W',0
00004CF0= 20 20 20 52 4F 52 ...   5437  DISP_ROR_L  DC.B    '   ROR.L',0
00004CF9= 20 20 20 52 4F 4C ...   5438  DISP_ROL_L  DC.B    '   ROL.L',0
00004D02= 20 20 20 42 52 41 00    5439  DISP_BRA    DC.B    '   BRA',0
00004D09= 20 20 20 42 4C 54 00    5440  DISP_BLT    DC.B    '   BLT',0
00004D10= 20 20 20 42 45 51 00    5441  DISP_BEQ    DC.B    '   BEQ',0
00004D17= 20 20 20 42 4E 45 00    5442  DISP_BNE    DC.B    '   BNE',0
00004D1E= 20 20 20 42 48 49 00    5443  DISP_BHI    DC.B    '   BHI',0
00004D25= 20 20 20 4D 4F 56 ...   5444  DISP_MOVEA_W    DC.B    '   MOVEA.W',0
00004D30= 20 20 20 4D 4F 56 ...   5445  DISP_MOVEA_L    DC.B    '   MOVEA.L',0
00004D3B                          5446  
00004D3B= 20 20 20 24 00          5447  DISP_HEX     DC.B    '   $',0
00004D40= 20 20 20 44 00          5448  DISP_D  DC.B    '   D',0
00004D45= 20 20 20 41 00          5449  DISP_A  DC.B    '   A',0
00004D4A= 20 20 20 28 00          5450  DISP_OP  DC.B    '   (',0
00004D4F= 29 00                   5451  DISP_CP  DC.B   ')',0
00004D51= 20 20 20 28 41 00       5452  DISP_AOP  DC.B    '   (A',0
00004D57                          5453  
00004D57= 20 20 20 2D 28 41 00    5454  DISP_PRE    DC.B    '   -(A',0
00004D5E= 29 2B 00                5455  DISP_POST   DC.B    ')+',0
00004D61= 20 20 20 23 00          5456  DISP_LB DC.B    '   #',0
00004D66= 30 00                   5457  DISP_0  DC.B    '0',0
00004D68= 31 00                   5458  DISP_1  DC.B    '1',0
00004D6A= 32 00                   5459  DISP_2  DC.B    '2',0
00004D6C= 33 00                   5460  DISP_3  DC.B    '3',0
00004D6E= 34 00                   5461  DISP_4  DC.B    '4',0
00004D70= 35 00                   5462  DISP_5  DC.B    '5',0
00004D72= 36 00                   5463  DISP_6  DC.B    '6',0
00004D74= 37 00                   5464  DISP_7  DC.B    '7',0
00004D76                          5465  
00004D76                          5466  *STACK INTERFACE VARIABLES*
00004D76                          5467  COUNTER         DS.W    1
00004D78                          5468  QUEUE_COUNTER   DS.W    1
00004D7A                          5469  
00004D7A                          5470  *EA DECODING INTERFACE VARIABLES* 
00004D7A                          5471  DEST_REGISTER_FORMAT    DS.B    1           *all address modes acceptable standard
00004D7B                          5472  SRC_REGISTER_FORMAT  DS.B    1           *all address modes acceptable standard
00004D7C                          5473  TEMP_REGISTER_FORMAT    DS.B    1           *place holder for masking other register formats
00004D7D                          5474  
00004D7D                          5475  *FORMAT OF WHERE TO GET THE EA BY THE ENDING BIT AND STARTING BIT
00004D7D                          5476  * WORD + WORD = LONG
00004D7D                          5477  * (STARTING BIT) + (ENDING BIT) = 2 HEX CHAR
00004D7D                          5478  * A              + F            = AF         <= EXAMPLE
00004D7D                          5479  *(10TH BIT)      + (15TH BIT)   = CHECK BITS 15 THROUGH 10
00004D7D                          5480  GET_DST_START_END    DS.B    1
00004D7E                          5481  GET_SRC_START_END    DS.B    1
00004D7F                          5482  
00004D7F                          5483  *STORES THE START + END BITS HERE (FROM ABOVE)
00004D80                          5484  VAR_BYTE_START      DS.L    1
00004D84                          5485  VAR_BYTE_END        DS.L    1
00004D88                          5486  VAR_TEMP_CLEANCOPY  DS.L    1
00004D8C                          5487  
00004D8C                          5488  VAR_LONG_ADDRESS_MODE_CHECK        DS.L    1       *holds the bits 0-2 in long form
00004D90                          5489  
00004D90                          5490  *MORE FOR STACK USAGE*
00004D90= 2C 00                   5491  DISP_COMMA  DC.B    ',',0
00004D92= 20 20 20 00             5492  DISP_INDENT  DC.B    '   ',0
00004D96                          5493  
00004D96                          5494  *NEXT WORD POINTER: FOR IDENTIFING (xxx).W or (xxx).L*
00004D96                          5495  POINTER_WORD    DS.W       1
00004D98                          5496  
00004D98                          5497  
00004D98                          5498  
00004D98                          5499  *---------------------------------------------------------------------------*
00004D98                          5500  * Ends program
00004D98                          5501  *---------------------------------------------------------------------------*
00004D98                          5502              END    START                    * last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASC2HXLP            1164
ASC2HXLP2STACK      11CC
ASCII2HEX           115E
ASCII2HEX2STACK     11C6
ASC_ERR             11C0
ASC_ERR2STACK       1228
ASC_LOW             11A2
ASC_LOW2STACK       120A
ASC_NUM             11B2
ASC_NUM2STACK       121A
ASC_SFT             11BA
ASC_SFT2STACK       1222
ASC_UPP             11AA
ASC_UPP2STACK       1212
CHECK0              3B64
CHECK1              3BEE
CHECK2              3C78
CHECK3              3D12
CHECK4              3DB4
CHECK7              3E56
CHECK_IMMEDIATE     3F36
CHECK_LONG          3EE8
CHECK_WORD          3EA2
CLEAR_RETURN        446C
CLEAR_STACK         445C
COUNTER             4D76
CR                  D
DECREMENT           4454
DEST_CHECK0         3F94
DEST_CHECK1         401E
DEST_CHECK2         40A8
DEST_CHECK3         4142
DEST_CHECK4         41E4
DEST_CHECK7         4286
DEST_CHECK_IMMEDIATE  4366
DEST_CHECK_LONG     4318
DEST_CHECK_WORD     42D2
DEST_LOOP_SHIFTING  3FFE
DEST_LOOP_SHIFTING1  4088
DEST_LOOP_SHIFTING2  411A
DEST_LOOP_SHIFTING3  41B4
DEST_LOOP_SHIFTING4  425E
DEST_LOOP_SHIFTING7  42BE
DEST_MASKING_NEXT   400C
DEST_MASKING_NEXT1  4096
DEST_MASKING_NEXT2  4128
DEST_MASKING_NEXT3  41C2
DEST_MASKING_NEXT4  426C
DEST_MASKING_NEXT7  42CC
DEST_MODE           371C
DEST_REGISTER       39EC
DEST_REGISTER_FORMAT  4D7A
DISPLAY_30_LINES    1374
DISP_0              4D66
DISP_1              4D68
DISP_2              4D6A
DISP_3              4D6C
DISP_4              4D6E
DISP_5              4D70
DISP_6              4D72
DISP_7              4D74
DISP_A              4D45
DISP_ADDA_L         4C56
DISP_ADDA_W         4C4C
DISP_ADDQ_B         4B4F
DISP_ADDQ_L         4B63
DISP_ADDQ_W         4B59
DISP_ADD_B          4C31
DISP_ADD_L          4C43
DISP_ADD_W          4C3A
DISP_AND_B          4C16
DISP_AND_L          4C28
DISP_AND_W          4C1F
DISP_AOP            4D51
DISP_ASL_B          4C9F
DISP_ASL_L          4CC3
DISP_ASL_W          4CB1
DISP_ASR_B          4C96
DISP_ASR_L          4CBA
DISP_ASR_W          4CA8
DISP_BEQ            4D10
DISP_BHI            4D1E
DISP_BLT            4D09
DISP_BNE            4D17
DISP_BRA            4D02
DISP_BTST           4AA2
DISP_CMPA_L         4C02
DISP_CMPA_W         4BF8
DISP_CMPI_B         4AAA
DISP_CMPI_L         4ABE
DISP_CMPI_W         4AB4
DISP_CMP_B          4BDD
DISP_CMP_L          4BEF
DISP_CMP_W          4BE6
DISP_COMMA          4D90
DISP_CP             4D4F
DISP_D              4D40
DISP_DATA           4AC8
DISP_DIVS           4B6D
DISP_EORI_B         4A84
DISP_EORI_L         4A98
DISP_EORI_W         4A8E
DISP_EOR_B          4BC2
DISP_EOR_L          4BD4
DISP_EOR_W          4BCB
DISP_HEX            4D3B
DISP_INDENT         4D92
DISP_JSR            4AF5
DISP_LB             4D61
DISP_LEA            4B32
DISP_LSL_B          4C69
DISP_LSL_L          4C8D
DISP_LSL_W          4C7B
DISP_LSR_B          4C60
DISP_LSR_L          4C84
DISP_LSR_W          4C72
DISP_MOVEA_L        4D30
DISP_MOVEA_W        4D25
DISP_MOVEM_L        4B44
DISP_MOVEM_W        4B39
DISP_MOVE_B         4AD0
DISP_MOVE_L         4AE4
DISP_MOVE_W         4ADA
DISP_MULS_W         4C0C
DISP_NEG_B          4AFC
DISP_NEG_L          4B0E
DISP_NEG_W          4B05
DISP_NEXT           4815
DISP_NOT_B          4B17
DISP_NOT_L          4B29
DISP_NOT_W          4B20
DISP_OP             4D4A
DISP_ORI_B          4A69
DISP_ORI_L          4A7B
DISP_ORI_W          4A72
DISP_POST           4D5E
DISP_PRE            4D57
DISP_ROL_B          4CD5
DISP_ROL_L          4CF9
DISP_ROL_W          4CE7
DISP_ROR_B          4CCC
DISP_ROR_L          4CF0
DISP_ROR_W          4CDE
DISP_RTS            4AEE
DISP_SUBA_L         4BB8
DISP_SUBA_W         4BAE
DISP_SUBI_B         4B90
DISP_SUBI_L         4BA4
DISP_SUBI_W         4B9A
DISP_SUB_B          4B75
DISP_SUB_L          4B87
DISP_SUB_W          4B7E
D_MODE000           37BE
D_MODE010           3806
D_MODE011           3866
D_MODE100           3886
D_MODE111           38D8
EA_ARITH            36B6
EA_DATA             1784
EA_GEN              3702
EA_MOVEA            36DC
EA_NOSRC            36A2
ENDLINE_M           49C6
END_ADDR            10AA
ERRMSG_1            48AD
ERRMSG_3            48CC
ERRMSG_5            48F1
ERROR_1             110E
ERROR_2             111E
ERROR_3             112E
ERROR_4             113E
ERROR_5             114E
E_ADDR_HX           49C2
FINMSG              4882
GET_DISPLACEMENT_ADDRESS  446E
GET_DISPLACEMENT_LONG  44B8
GET_DISPLACEMENT_WORD  44A0
GET_DST_FAILED      43AC
GET_DST_START_END   4D7D
GET_DST_SUCCESS     43B0
GET_EA_EA_DEST      3F82
GET_EA_EA_SRC       3B52
GET_SRC_FAILED      3F7C
GET_SRC_START_END   4D7E
GET_SRC_SUCCESS     3F80
HEX2ASCII           122E
HEX2ASCII2STACK     1270
HEX_CHAR            125C
HEX_CONT            1260
HEX_LOOP            1242
IMMD_B              398C
IMMD_L              39CC
IMMD_W              39AC
IMMEDIATE           395C
INCREMENT           444C
INTRO               1028
IS_ODD              12B4
IS_ODD_ERR          12CA
JMPTABLE            13A0
LF                  A
LONGMODE            3930
LOOP_SHIFTING       3BCE
LOOP_SHIFTING1      3C58
LOOP_SHIFTING2      3CEA
LOOP_SHIFTING3      3D84
LOOP_SHIFTING4      3E2E
MAIN                12D0
MASKING_NEXT        3BDC
MASKING_NEXT1       3C66
MASKING_NEXT2       3CF8
MASKING_NEXT3       3D92
MASKING_NEXT4       3E3C
MODE000             37AA
MODE001             37D2
MODE010             37E6
MODE011             3826
MODE100             3846
MODE111             38A6
NEXTLINES           1382
OP0000              1400
OP0000_BTST_B       156A
OP0000_CMPI         17AC
OP0000_CMPI_B       1822
OP0000_CMPI_L       1872
OP0000_CMPI_W       184A
OP0000_EOR_B        1618
OP0000_EOR_L        1648
OP0000_EOR_W        1630
OP0000_ORI_B        1906
OP0000_ORI_L        1956
OP0000_ORI_W        192E
OP0000_RETURN_BTST  159A
OP0000_RETURN_CMPI  1896
OP0000_RETURN_EOR   165C
OP0000_RETURN_ORI   197A
OP0000_RETURN_SUBI  173E
OP0000_SUB_B        16FA
OP0000_SUB_L        172A
OP0000_SUB_W        1712
OP0001              197C
OP0010              19EA
OP0011              1AE8
OP0100              1BE4
OP0101              1E3A
OP0101_ADDQ_B       1EB6
OP0101_ADDQ_B_0     1F32
OP0101_ADDQ_B_1     1F3E
OP0101_ADDQ_B_2     1F4A
OP0101_ADDQ_B_3     1F56
OP0101_ADDQ_B_4     1F62
OP0101_ADDQ_B_5     1F6E
OP0101_ADDQ_B_6     1F7A
OP0101_ADDQ_B_7     1F86
OP0101_ADDQ_B_8     1F92
OP0101_ADDQ_L       1ECE
OP0101_ADDQ_W       1EC2
OP0101_RETURN       1ED6
OP0101_RETURN2      1F9A
OP0110              1FDE
OP0111              20E4
OP1000              20E8
OP1000_DIVS_DN_EA_OR_EA_DN  20F6
OP1000_DIVS_RETURN  21DA
OP1000_EA_DN_DIVS   2124
OP1000_PRINT_L_DIVS  2192
OP1000_PRINT_W_DIVS  214A
OP1001              21F0
OP1001_ADD_RETURN   253E
OP1001_DETERMINE_DN_EA_OR_EA_DN  2306
OP1001_DN_EA        233E
OP1001_EA_DN        243E
OP1001_PRINT_B      2466
OP1001_PRINT_B2     2366
OP1001_PRINT_L      24F6
OP1001_PRINT_L2     23F6
OP1001_PRINT_W      24AE
OP1001_PRINT_W2     23AE
OP1001_SUBA_L       2222
OP1001_SUBA_W       2294
OP1010              25AC
OP1011              25B0
OP1011_CMP          260A
OP1011_CMPA         26BC
OP1011_CMPA_L       2736
OP1011_CMPA_W       272A
OP1011_CMP_B        267E
OP1011_CMP_L        2696
OP1011_CMP_W        268A
OP1011_EOR          275C
OP1011_EOR_B        27D0
OP1011_EOR_L        27E8
OP1011_EOR_W        27DC
OP1011_RETURN       27F0
OP1011_RETURN_CMP   269E
OP1011_RETURN_CMPA  273E
OP1100              28B0
OP1100_AND_RETURN   2C00
OP1100_DETERMINE_DN_EA_OR_EA_DN  29C6
OP1100_DN_EA        2A00
OP1100_EA_DN        2B00
OP1100_EA_DN_MULS   290E
OP1100_MULS_DN_EA_OR_EA_DN  28E0
OP1100_MULS_RETURN  29C4
OP1100_PRINT_B      2B28
OP1100_PRINT_B2     2A28
OP1100_PRINT_L      2BB8
OP1100_PRINT_L2     2AB8
OP1100_PRINT_L_MULS  297C
OP1100_PRINT_W      2B70
OP1100_PRINT_W2     2A70
OP1100_PRINT_W_MULS  2934
OP1101              2C02
OP1101_ADDA_L       2C34
OP1101_ADDA_W       2CA6
OP1101_ADD_RETURN   2F50
OP1101_DETERMINE_DN_EA_OR_EA_DN  2D18
OP1101_DN_EA        2D50
OP1101_EA_DN        2E50
OP1101_PRINT_B      2E78
OP1101_PRINT_B2     2D78
OP1101_PRINT_L      2F08
OP1101_PRINT_L2     2E08
OP1101_PRINT_W      2EC0
OP1101_PRINT_W2     2DC0
OP1110              2FDE
OP1110_RETURN       3056
OP1111              369E
OP_ADDA_L           2FC6
OP_ADDA_W           2FAE
OP_ADDQ_B           1FA8
OP_ADDQ_L           1FCC
OP_ADDQ_W           1FBA
OP_ADD_B            2F66
OP_ADD_L            2F96
OP_ADD_W            2F7E
OP_ASX              3272
OP_ASX_0            33E6
OP_ASX_1            33F2
OP_ASX_2            33FE
OP_ASX_3            340A
OP_ASX_4            3416
OP_ASX_5            3422
OP_ASX_6            342E
OP_ASX_7            343A
OP_ASX_8            3446
OP_ASX_AFTER_IMMEDIATE  344E
OP_ASX_B            32EE
OP_ASX_CHECK_FORMAT  32FA
OP_ASX_DIR          32A8
OP_ASX_INTERMEDIATE  335C
OP_ASX_L            32D6
OP_ASX_MEMORY       3460
OP_ASX_R            32A0
OP_ASX_REGISTER     330C
OP_ASX_RETURN       3488
OP_ASX_W            32E2
OP_BEQ              2072
OP_BHI              2026
OP_BLT              20BE
OP_BNE              204C
OP_BRA              2098
OP_BTST             148A
OP_BTST_IMMEDIATE   1514
OP_CMPA_L           2820
OP_CMPA_W           280E
OP_CMP_B            2832
OP_CMP_L            2862
OP_CMP_W            284A
OP_DATA             1760
OP_DIVS             21DC
OP_EORI             159C
OP_EOR_B            287A
OP_EOR_L            289E
OP_EOR_W            288C
OP_JSR              1E0C
OP_LEA              1C92
OP_LEA_DN_EA_OR_EA_DN  1CA0
OP_LEA_RETURN       1CFE
OP_LSX              3058
OP_LSX_0            31CC
OP_LSX_1            31D8
OP_LSX_2            31E4
OP_LSX_3            31F0
OP_LSX_4            31FC
OP_LSX_5            3208
OP_LSX_6            3214
OP_LSX_7            3220
OP_LSX_8            322C
OP_LSX_AFTER_IMMEDIATE  3234
OP_LSX_B            30D4
OP_LSX_CHECK_FORMAT  30E0
OP_LSX_DIR          308E
OP_LSX_INTERMEDIATE  3142
OP_LSX_L            30BC
OP_LSX_MEMORY       3246
OP_LSX_R            3086
OP_LSX_REGISTER     30F2
OP_LSX_RETURN       326E
OP_LSX_W            30C8
OP_MOVEA_L          1A78
OP_MOVEA_W          1B74
OP_MOVEM_L          1C80
OP_MOVEM_W          1C6E
OP_MOVE_B           1982
OP_MOVE_L           1A10
OP_MOVE_W           1B0C
OP_MULS             28D2
OP_NEG              1D00
OP_NEG_B            1D4C
OP_NEG_L            1D64
OP_NEG_PRINT_EA     1D70
OP_NEG_W            1D58
OP_NOT              1D86
OP_NOT_B            1DD2
OP_NOT_L            1DEA
OP_NOT_PRINT_EA     1DF6
OP_NOT_W            1DDE
OP_ORI              1898
OP_PRINT_L_LEA      1CBE
OP_ROX              348C
OP_ROX_0            3600
OP_ROX_1            360C
OP_ROX_2            3618
OP_ROX_3            3624
OP_ROX_4            3630
OP_ROX_5            363C
OP_ROX_6            3648
OP_ROX_7            3654
OP_ROX_8            3660
OP_ROX_AFTER_IMMEDIATE  3668
OP_ROX_B            3508
OP_ROX_CHECK_FORMAT  3514
OP_ROX_DIR          34C2
OP_ROX_INTERMEDIATE  3576
OP_ROX_L            34F0
OP_ROX_MEMORY       367A
OP_ROX_R            34BA
OP_ROX_REGISTER     3526
OP_ROX_RETURN       369A
OP_ROX_W            34FC
OP_RTS              1E20
OP_SUBA_L           259A
OP_SUBA_W           2588
OP_SUBI             167E
OP_SUB_B            2540
OP_SUB_L            2570
OP_SUB_W            2558
OUTPUT_PROCESSED_DATA  1354
POINTER_WORD        4D96
POP_FRONT           4406
POP_FRONT_RETURN    4440
POP_RETURN          4404
POP_SHIFT_LOOP      4422
POP_STACK           43F8
PRINT_QUEUE         43CC
PRINT_QUEUE_HELPER  43D8
PRINT_QUEUE_RETURN  43EE
PRINT_STACK         43B2
PRINT_STACK_HELPER  43BE
PRINT_STACK_RETURN  43CA
PROGLP              100A
PROMPT_END          47E8
PROMPT_START        47B9
PUSH_STACK          43F0
QUEUE_COUNTER       4D78
REG_0               3AA0
REG_1               3AAE
REG_2               3ABC
REG_3               3ACA
REG_4               3AD8
REG_5               3AE6
REG_6               3AF4
REG_7               3B02
REPEAT              3B10
REPEATMSG           483F
RETURN              11C4
RETURN2STACK        122C
SRC_LOOP_SHIFTING   3E8E
SRC_MASKING_NEXT    3E9C
SRC_MODE            3760
SRC_REGISTER        3A48
SRC_REGISTER_FORMAT  4D7B
STACK               7000
STACK_HEX_CHAR      129E
STACK_HEX_CONT      12A2
STACK_HEX_LOOP      1284
START               1004
START_ADDR          1058
S_ADDR_HX           49BE
TEMP_REGISTER_FORMAT  4D7C
TERMINATE           44D2
TESTING             1036
TMPINPUT            49C9
TMPOUTPUT           4A19
VAR_BYTE_END        4D84
VAR_BYTE_START      4D80
VAR_LONG_ADDRESS_MODE_CHECK  4D8C
VAR_TEMP_CLEANCOPY  4D88
VR_E_ADDR           496E
VR_S_ADDR           491E
WELCOME             44E4
WORDMODE            3904

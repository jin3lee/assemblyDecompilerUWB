00001004 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/9/2014 11:01:31 AM

00000000                             1  *---------------------------------------------------------------------------*
00000000                             2  * Title      : 68K Disassembler
00000000                             3  * Written by : Team Circle
00000000                             4  * Date       : 12/05/14
00000000                             5  * Description: Scans a section of memory and converts its
00000000                             6  *              contents to a listing of valid assembly 
00000000                             7  *              language instructions
00000000                             8  *---------------------------------------------------------------------------*
00000000                             9  
00000000                            10  *---------------------------------------------------------------------------*
00000000                            11  * System Equates                                                 
00000000                            12  *---------------------------------------------------------------------------*
00000000  =0000000D                 13  CR          EQU     $0D                     * ASCII for Carriage Return
00000000  =0000000A                 14  LF          EQU     $0A                     * ASCII for Line Feed 
00000000  =00007000                 15  STACK       EQU     $7000                   * Initial Stack Pointer                         
00000000                            16              
00000000                            17  *---------------------------------------------------------------------------*
00000000                            18  * Reserved Registers
00000000                            19  *---------------------------------------------------------------------------*  
00000000                            20  * D0 - I/O
00000000                            21  * D1 - Temporary storage of processing data
00000000                            22  * D3 - [PUSH_STACK]
00000000                            23  * D4 - Opcode size (0 - byte; 1- word; 2-long)
00000000                            24  * D5 - Processing data
00000000                            25  * D6 - Loop counter to print 30 lines
00000000                            26  * D7 - Error flag
00000000                            27  * A2 - [STACK POINTER]
00000000                            28  * A5 - Processing address in hex
00000000                            29  
00000000                            30  *---------------------------------------------------------------------------*
00000000                            31  * Start and loop program
00000000                            32  *---------------------------------------------------------------------------*  
00001000                            33              ORG     $1000
00001000  4FF8 7000                 34              LEA     STACK,SP
00001004                            35  START:            
00001004  4EB9 00001028             36              JSR     INTRO                 
0000100A  4EB9 00001060             37  PROGLP      JSR     START_ADDR
00001010  4EB9 000010B2             38              JSR     END_ADDR
00001016  43F9 000036D4             39              LEA     ENDLINE_M,A1           * Add a new line
0000101C  103C 000E                 40              MOVE.B  #14, D0                  * Display A1
00001020  4E4F                      41              TRAP    #15
00001022                            42              
00001022  4EF9 00001270             43              JMP     MAIN
00001028                            44              
00001028                            45  *---------------------------------------------------------------------------*
00001028                            46  * INTRO: Display the introduction of the program
00001028                            47  *---------------------------------------------------------------------------*
00001028  43F9 000031F2             48  INTRO       LEA     WELCOME,A1              * Load PROMPT_START
0000102E  103C 000E                 49              MOVE.B  #14,D0                  * Display A1
00001032  4E4F                      50              TRAP    #15
00001034  4E75                      51              RTS
00001036                            52  TESTING     
00001036  D5C2                      53              ADDA.L   D2,A2
00001038  D5C9                      54              ADDA.L   A1,A2   
0000103A  D7D3                      55              ADDA.L  (A3),A3
0000103C  D9DC                      56              ADDA.L  (A4)+,A4
0000103E  DBE5                      57              ADDA.L  -(A5),A5
00001040  DDF8 3331                 58              ADDA.L  $3331,A6
00001044  DFF9 44444441             59              ADDA.L  $44444441,A7
0000104A                            60              
0000104A  D4C2                      61              ADDA.W   D2,A2
0000104C  D4C9                      62              ADDA.W   A1,A2   
0000104E  D6D3                      63              ADDA.W  (A3),A3
00001050  D8DC                      64              ADDA.W  (A4)+,A4
00001052  DAE5                      65              ADDA.W  -(A5),A5
00001054  DCF8 3331                 66              ADDA.W  $3331,A6
00001058  DEF9 44444441             67              ADDA.W  $44444441,A7
0000105E                            68              
0000105E                            69  
0000105E                            70              
0000105E  4E75                      71              RTS
00001060                            72  *---------------------------------------------------------------------------*
00001060                            73  * START_ADDR: Compute the starting address
00001060                            74  *---------------------------------------------------------------------------*
00001060                            75  START_ADDR
00001060                            76              * Output
00001060  43F9 000034C7             77              LEA     PROMPT_START,A1         * Load PROMPT_START 
00001066  103C 000E                 78              MOVE.B  #14,D0                  * Display PROMPT_START
0000106A  4E4F                      79              TRAP    #15
0000106C                            80      
0000106C                            81              * Input
0000106C  43F9 0000362C             82              LEA     VR_S_ADDR,A1            * Load VR_S_ADDR
00001072  103C 0002                 83              MOVE.B  #2,D0                   * Ask user for input
00001076  4E4F                      84              TRAP    #15
00001078                            85              
00001078                            86              * Error Checking (length)
00001078  0C01 0000                 87              CMPI.B  #0, D1                  * Check if input length <= 0
0000107C  6F00 0098                 88              BLE     ERROR_1
00001080  0C01 0008                 89              CMPI.B  #8, D1                  * Check if input length > 8
00001084  6E00 0090                 90              BGT     ERROR_1
00001088                            91              
00001088                            92              * Conversion & Storage
00001088  4EB9 00001166             93              JSR     ASCII2HEX               * Jump to ASCII2HEX
0000108E  0C07 0001                 94              CMPI.B  #1, D7                  * Check for error
00001092  6700 0082                 95              BEQ     ERROR_1                 
00001096  23C1 000036CC             96              MOVE.L  D1, S_ADDR_HX           * Move the result to S_ADDR_HX 
0000109C                            97              
0000109C                            98              * Error Checking (Odd)
0000109C  43F9 000036CC             99              LEA     S_ADDR_HX, A1           * Load 'S_ADDR_HX' for odd error
000010A2  4EB9 00001254            100              JSR     IS_ODD                  * Check if the input address is odd
000010A8  0C07 0001                101              CMPI.B  #1, D7                  * Check for error
000010AC  6700 0088                102              BEQ     ERROR_3
000010B0                           103              
000010B0                           104              * Return
000010B0  4E75                     105              RTS     
000010B2                           106  *---------------------------------------------------------------------------*
000010B2                           107  * END_ADDR: Compute the ending address
000010B2                           108  *---------------------------------------------------------------------------*
000010B2                           109  END_ADDR
000010B2                           110              * Output
000010B2  43F9 000034F6            111              LEA     PROMPT_END,A1           * Load PROMPT_END
000010B8  103C 000E                112              MOVE.B  #14,D0                  * Display PROMPT_END
000010BC  4E4F                     113              TRAP    #15
000010BE                           114  
000010BE                           115              * Input
000010BE  43F9 0000367C            116              LEA     VR_E_ADDR,A1            * Load VR_E_ADDR
000010C4  103C 0002                117              MOVE.B  #2,D0                   * Ask user for input
000010C8  4E4F                     118              TRAP    #15
000010CA                           119              
000010CA                           120              * Error Checking (length)
000010CA  0C01 0000                121              CMPI.B  #0, D1                  * Check if input length <= 0
000010CE  6F00 0056                122              BLE     ERROR_2
000010D2  0C01 0008                123              CMPI.B  #8, D1                  * Check if input length > 8
000010D6  6E00 004E                124              BGT     ERROR_2
000010DA                           125              
000010DA                           126              * Conversion & Storage
000010DA  4EB9 00001166            127              JSR     ASCII2HEX               * Jump to ASCII2HEX
000010E0  0C07 0001                128              CMPI.B  #1, D7                  * Check for error
000010E4  6700 0040                129              BEQ     ERROR_2
000010E8  23C1 000036D0            130              MOVE.L  D1, E_ADDR_HX           * Move the result to E_ADDR_HX
000010EE                           131              
000010EE                           132              * Error Checking (start > end case)
000010EE  2439 000036CC            133              MOVE.L  S_ADDR_HX, D2           * Move the starting address to D2
000010F4  B282                     134              CMP.L   D2, D1                  * Compare starting and ending address
000010F6  6300 005E                135              BLS     ERROR_5                 * Go to ERROR_5 if ending < starting
000010FA                           136              
000010FA                           137              * Error Checking (Odd case)
000010FA  43F9 000036D0            138              LEA     E_ADDR_HX, A1           * Move the ending address
00001100  4EB9 00001254            139              JSR     IS_ODD                  * Go to IS_ODD for odd address checking
00001106  0C07 0001                140              CMPI.B  #1, D7                  * Check for an error flag
0000110A  6700 003A                141              BEQ     ERROR_4
0000110E                           142              
0000110E                           143              * Inputs are valid
0000110E  2A79 000036CC            144              MOVE.L  S_ADDR_HX, A5           * Store the valid input in A5
00001114                           145              
00001114  4E75                     146              RTS
00001116                           147              
00001116                           148  *---------------------------------------------------------------------------*
00001116                           149  * ERROR_1: Address error (Invalid starting address)
00001116                           150  *---------------------------------------------------------------------------*
00001116                           151  ERROR_1
00001116  43F9 000035BB            152              LEA     ERRMSG_1, A1            * Load ERRMSG_1
0000111C  103C 000E                153              MOVE.B  #14, D0                 * Display ERRMSG_1
00001120  4E4F                     154              TRAP    #15
00001122  4EF8 1060                155              JMP     START_ADDR              * Jump to START_ADDR
00001126                           156      
00001126                           157  *---------------------------------------------------------------------------*
00001126                           158  * ERROR_2: Address error (Invalid ending address)
00001126                           159  *---------------------------------------------------------------------------*
00001126                           160  ERROR_2
00001126  43F9 000035BB            161              LEA     ERRMSG_1, A1            * Load ERRMSG_1
0000112C  103C 000E                162              MOVE.B  #14, D0                 * Display ERRMSG_1
00001130  4E4F                     163              TRAP    #15
00001132  4EF8 10B2                164              JMP     END_ADDR                * Jump to END_ADDR
00001136                           165  
00001136                           166  *---------------------------------------------------------------------------*
00001136                           167  * ERROR_3: Address error (Odd starting address)
00001136                           168  *---------------------------------------------------------------------------*
00001136                           169  ERROR_3
00001136  43F9 000035DA            170              LEA     ERRMSG_3, A1
0000113C  103C 000E                171              MOVE.B  #14, D0
00001140  4E4F                     172              TRAP    #15
00001142  4EF8 1060                173              JMP     START_ADDR
00001146                           174     
00001146                           175  *---------------------------------------------------------------------------*
00001146                           176  * ERROR_4: Address error (Odd ending address)
00001146                           177  *---------------------------------------------------------------------------*         
00001146                           178  ERROR_4
00001146  43F9 000035DA            179              LEA     ERRMSG_3, A1
0000114C  103C 000E                180              MOVE.B  #14, D0
00001150  4E4F                     181              TRAP    #15
00001152  4EF8 10B2                182              JMP     END_ADDR
00001156                           183            
00001156                           184  *---------------------------------------------------------------------------*
00001156                           185  * ERROR_3: Address error (Ending address is less than starting address)
00001156                           186  *---------------------------------------------------------------------------*
00001156                           187  ERROR_5
00001156  43F9 000035FF            188              LEA     ERRMSG_5, A1
0000115C  103C 000E                189              MOVE.B  #14, D0
00001160  4E4F                     190              TRAP    #15
00001162  4EF8 10B2                191              JMP     END_ADDR
00001166                           192    
00001166                           193  *---------------------------------------------------------------------------*
00001166                           194  * ASCII2HEX: Convert ASCii to Hexadecimal
00001166                           195  * Reserved registers: A1 = Source, D1 = Destination, D2 = Byte, D7 = Error
00001166                           196  *---------------------------------------------------------------------------*
00001166  4281                     197  ASCII2HEX   CLR.L   D1                      * Clear the destination 
00001168  4287                     198              CLR.L   D7                      * Set the error flag to 0
0000116A  4282                     199              CLR.L   D2                      * Clear D2 for temp storage
0000116C                           200              
0000116C  1419                     201  ASC2HXLP    MOVE.B  (A1)+, D2               * Read a byte to D2
0000116E  0C02 0000                202              CMPI.B  #0, D2                  * Check for NULL (indicates the end of source)
00001172  6700 0058                203              BEQ     RETURN                  * If it's NULL, go to return
00001176  0C02 0066                204              CMPI.B  #102, D2                * Decimal ASCII value of f is 102
0000117A  6E00 004C                205              BGT     ASC_ERR                 * ASCII > f (invalid input) 
0000117E  0C02 0061                206              CMPI.B  #97, D2                 * Decimal ASCII value of a is 97
00001182  6C00 0026                207              BGE     ASC_LOW                 * ASCII >= a (valid input)
00001186  0C02 0046                208              CMPI.B  #70, D2                 * Decimal ASCII value of F is 70
0000118A  6E00 003C                209              BGT     ASC_ERR                 * ASCII > F (invalid input)
0000118E  0C02 0041                210              CMPI.B  #65, D2                 * Decimal ASCII value of A is 65
00001192  6C00 001E                211              BGE     ASC_UPP                 * ASCII >= A (valid input)
00001196  0C02 0039                212              CMPI.B  #57, D2                 * Decimal value of 9 is 57
0000119A  6E00 002C                213              BGT     ASC_ERR                 * ASCII > 9 (invalid input)
0000119E  0C02 0030                214              CMPI.B  #48, D2                 * Decimal ASCII value of 0 is 48
000011A2  6C00 0016                215              BGE     ASC_NUM                 * ASCII >= 0 (valid input)
000011A6  6000 0020                216              BRA     ASC_ERR                 * Invalid input
000011AA                           217  
000011AA  0442 0057                218  ASC_LOW     SUBI    #87, D2                 * Convert the ASCII input to Hex
000011AE  6000 0012                219              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011B2                           220              
000011B2  0442 0037                221  ASC_UPP     SUBI    #55, D2                 * Convert the ASCII input to Hex
000011B6  6000 000A                222              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011BA                           223              
000011BA  0442 0030                224  ASC_NUM     SUBI    #48, D2                 * Convert the ASCII input to Hex
000011BE  6000 0002                225              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011C2                           226              
000011C2  E981                     227  ASC_SFT     ASL.L   #4, D1                  * Shift the dest to left by 4 bits
000011C4  D202                     228              ADD.B   D2, D1                  * Add the converted input to D1
000011C6  60A4                     229              BRA     ASC2HXLP                * Loop
000011C8                           230  
000011C8  1E3C 0001                231  ASC_ERR     MOVE.B  #1, D7                  * Set the error flag to 1            
000011CC  4E75                     232  RETURN      RTS     
000011CE                           233  
000011CE                           234  *---------------------------------------------------------------------------*
000011CE                           235  * HEX2ASCII: Convert Hexadecimal to ASCii 
000011CE                           236  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
000011CE                           237  *---------------------------------------------------------------------------*
000011CE  0C02 0008                238  HEX2ASCII   CMPI.B  #8, D2                  * Check to see if the size is long
000011D2  6700 000E                239              BEQ     HEX_LOOP
000011D6  4841                     240              SWAP    D1
000011D8  0C02 0002                241              CMPI.B  #2,D2
000011DC  6600 0004                242              BNE     HEX_LOOP
000011E0  E189                     243              LSL.L   #8,D1
000011E2                           244             
000011E2  E999                     245  HEX_LOOP    ROL.L   #4, D1                  * Roll D1 to left
000011E4  2601                     246              MOVE.L  D1, D3                  * Move D1 to D3
000011E6  0283 0000000F            247              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
000011EC  0C03 0009                248              CMPI.B  #9, D3                  * Compare te digit
000011F0  6E00 000A                249              BGT     HEX_CHAR              
000011F4  0603 0030                250              ADDI.B  #48,D3                  * Add 48 for numerical output
000011F8  6000 0006                251              BRA     HEX_CONT
000011FC                           252              
000011FC  0603 0037                253  HEX_CHAR    ADDI.B  #55,D3                  * Add 55 for character output
00001200                           254  
00001200  12C3                     255  HEX_CONT    MOVE.B  D3, (A1)+               * Place into A1
00001202  5342                     256              SUBI    #1, D2                  * Decrement the size
00001204  0C02 0000                257              CMPI.B  #0, D2                  * Check if D2 is 0
00001208  66D8                     258              BNE     HEX_LOOP                * Loop
0000120A  12BC 0000                259              MOVE.B  #$0,(A1)                * Null terminator
0000120E  4E75                     260              RTS
00001210                           261  *---------------------------------------------------------------------------*
00001210                           262  * HEX2ASCII2STACK: Convert Hexadecimal to ASCii 
00001210                           263  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
00001210                           264  *---------------------------------------------------------------------------*
00001210                           265  HEX2ASCII2STACK
00001210  0C02 0008                266              CMPI.B  #8, D2                  * Check to see if the size is long
00001214  6700 000E                267              BEQ     STACK_HEX_LOOP
00001218  4841                     268              SWAP    D1
0000121A  0C02 0002                269              CMPI.B  #2,D2
0000121E  6600 0004                270              BNE     STACK_HEX_LOOP
00001222  E189                     271              LSL.L   #8,D1
00001224                           272             
00001224                           273  STACK_HEX_LOOP    
00001224  E999                     274              ROL.L   #4, D1                  * Roll D1 to left
00001226  2601                     275              MOVE.L  D1, D3                  * Move D1 to D3
00001228  0283 0000000F            276              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
0000122E  0C03 0009                277              CMPI.B  #9, D3                  * Compare te digit
00001232  6E00 000A                278              BGT     STACK_HEX_CHAR              
00001236  0603 0030                279              ADDI.B  #48,D3                  * Add 48 for numerical output
0000123A  6000 0006                280              BRA     STACK_HEX_CONT
0000123E                           281              
0000123E                           282  STACK_HEX_CHAR    
0000123E  0603 0037                283              ADDI.B  #55,D3                  * Add 55 for character output
00001242                           284  
00001242                           285  STACK_HEX_CONT    
00001242  6100 1F1E                286              BSR     PUSH_STACK              *PLACE INTO STACK
00001246  5342                     287              SUBI    #1, D2                  * Decrement the size
00001248  0C02 0000                288              CMPI.B  #0, D2                  * Check if D2 is 0
0000124C  66D6                     289              BNE     STACK_HEX_LOOP                * Loop
0000124E  12BC 0000                290              MOVE.B  #$0,(A1)                * Null terminator
00001252  4E75                     291              RTS
00001254                           292  
00001254                           293  
00001254                           294  *---------------------------------------------------------------------------*
00001254                           295  * IS_ODD: Check whether the source address is odd
00001254                           296  * Reserved registers: A1 = Source, D1 = Result, D7 = error flag
00001254                           297  *---------------------------------------------------------------------------*
00001254  4281                     298  IS_ODD      CLR.L   D1                      * Clear the result
00001256  4287                     299              CLR.L   D7                      * Set the error flag to 0
00001258  2211                     300              MOVE.L  (A1),D1                * Temp store the checking address to D1
0000125A  82FC 0002                301              DIVU    #2, D1                  * Divide the result by 2
0000125E  4841                     302              SWAP    D1                      * Swap remainder with quotient
00001260  0C01 0001                303              CMPI.B  #1, D1                  * Check for error
00001264  6700 0004                304              BEQ     IS_ODD_ERR
00001268  4E75                     305              RTS
0000126A                           306              
0000126A  1E3C 0001                307  IS_ODD_ERR  MOVE.B  #1, D7
0000126E  4E75                     308              RTS
00001270                           309  
00001270                           310  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*
00001270                           311  * MAIN                    
00001270                           312  * A2: STACK POINTER                                                      MAIN                                                                        MAIN
00001270                           313  * A5: Processing address
00001270                           314  *
00001270                           315  * D3: USED FOR PUSHING INTO STACK
00001270                           316  *     To push into stack => MOVE.W #DATA,D3 
00001270                           317  *                           BSR    PUSH_STACK
00001270                           318  *     To print stack     => BSR    PRINT_STACK 
00001270                           319  *     To clear stack     => BSR    CLEAR_STACK
00001270                           320  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*  
00001270                           321  MAIN        
00001270                           322              *initialize stack pointer
00001270  33FC 0000 00003A84       323              MOVE.W  #0,COUNTER
00001278  347C 7000                324              MOVEA.W #STACK,A2
0000127C  163C 0020                325              MOVE.B  #' ',D3
00001280  6100 1EE0                326              BSR     PUSH_STACK
00001284  6100 1EDC                327              BSR     PUSH_STACK
00001288  6100 1ED8                328              BSR     PUSH_STACK
0000128C                           329              
0000128C                           330              * clear registers for temp storage
0000128C  4280                     331              CLR.L   D0                   
0000128E  4281                     332              CLR.L   D1                   
00001290  227C 00000000            333              MOVEA.L #0, A1                
00001296                           334              
00001296  220D                     335              MOVE.L  A5,D1                   * check to see if the address is fully read
00001298  23CD 000036CC            336              MOVE.L  A5,S_ADDR_HX
0000129E  B2B9 000036D0            337              CMP.L   E_ADDR_HX,D1
000012A4  6C00 15DC                338              BGE     REPEAT                  * go to repeat for user action
000012A8                           339  
000012A8  43F9 00003727            340              LEA     TMPOUTPUT,A1            * allocate storage to hold output
000012AE  143C 0008                341              MOVE.B  #8,D2                   * set the output size
000012B2  4EB8 11CE                342              JSR     HEX2ASCII               
000012B6  43F9 00003727            343              LEA     TMPOUTPUT,A1
000012BC  103C 000E                344              MOVE.B  #14,D0
000012C0  4E4F                     345              TRAP    #15
000012C2                           346              
000012C2  4285                     347              CLR.L    D5                      * clear the processing data
000012C4  3A1D                     348              MOVE.W  (A5)+,D5                 * copy the currently processing data in A5 over to D5
000012C6                           349                                               * advance the current instruction pointer to the next
000012C6                           350                                               * instruction in memory
000012C6                           351  *----------------------------------------*
000012C6                           352  * Registers          
000012C6                           353  * [D1] - COPY OF D5
000012C6                           354  * [D5] - DATA TO BE PROCESSED
000012C6                           355  * [D6] - COUNTER FOR LINES PROCESSED
000012C6                           356  *
000012C6                           357  * [D4]      - ERROR FLAG BEFORE PRINTING
000012C6                           358  * [STACK]   - PRINTS PROCESS DATA
000012C6                           359  * [COUNTER] - KEEPS TRACK OF STACK INCREMENT
000012C6                           360  *
000012C6                           361  * [A1] - USED FOR JUMPING/PRINTING
000012C6                           362  *
000012C6                           363  *----------------------------------------*
000012C6                           364  
000012C6                           365              
000012C6                           366              *Processing the first 4 most significant bits 
000012C6  2205                     367              MOVE.L  D5,D1                    * copy the current processing data to D1
000012C8  143C 000C                368              MOVE.B  #12,D2                   * shift to right by 12 bits
000012CC  E469                     369              LSR.W   D2,D1                    * [D2] Temporarily used D2 for shifting bits
000012CE  C2FC 0006                370              MULU    #6,D1                    * form offset
000012D2  43F9 00001340            371              LEA     JMPTABLE,A1              * index into table
000012D8  4EB1 1000                372              JSR     0(A1,D1)                 * jump indirect with index
000012DC                           373              
000012DC                           374              *SECURED EA*
000012DC  B83C 0001                375              CMP.B   #1,D4                    * ERROR FLAG CHECK [ERROR WHEN D4 == 1]
000012E0  6600 0012                376              BNE     OUTPUT_PROCESSED_DATA    * PRINTS PROCESSED OP-CODE & EA
000012E4  6100 01E8                377              BSR     OP_DATA                  * PRINT ERROR MESSAGE "DATA"
000012E8  6100 1EE4                378              BSR     CLEAR_STACK              * CLEARS THE STACK 
000012EC  183C 0000                379              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
000012F0  6000 0022                380              BRA     DISPLAY_30_LINES         * GO TO LAST STEP
000012F4                           381             
000012F4                           382  OUTPUT_PROCESSED_DATA       
000012F4  163C 000D                383              MOVE.B  #$D,D3                  *carriage return
000012F8  6100 1E68                384              BSR     PUSH_STACK
000012FC  163C 000A                385              MOVE.B  #$A,D3                  *new line feed
00001300  6100 1E60                386              BSR     PUSH_STACK
00001304  163C 0000                387              MOVE.B  #$0,D3                  *null
00001308  6100 1E58                388              BSR     PUSH_STACK
0000130C                           389       
0000130C  6100 1E30                390              BSR     PRINT_QUEUE
00001310  183C 0000                391              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
00001314                           392  DISPLAY_30_LINES
00001314                           393              * display 30 lines per page
00001314  5206                     394              ADDI.B  #1,D6
00001316  0C06 001E                395              CMPI.B  #30,D6
0000131A  6C00 0006                396              BGE     NEXTLINES
0000131E  6000 FF50                397              BRA     MAIN
00001322                           398            
00001322                           399  *---------------------------------------------------------------------------*
00001322                           400  * NEXTLINES: receive input from user to print the next 30 lines
00001322                           401  *---------------------------------------------------------------------------*  
00001322  4206                     402  NEXTLINES   CLR.B   D6
00001324  43F9 00003523            403              LEA     DISP_NEXT,A1
0000132A  103C 000E                404              MOVE.B  #14,D0
0000132E  4E4F                     405              TRAP    #15
00001330  43F9 000036D7            406              LEA     TMPINPUT,A1
00001336  103C 0002                407              MOVE.B  #2,D0
0000133A  4E4F                     408              TRAP    #15
0000133C  4EF8 1270                409              JMP     MAIN
00001340                           410    
00001340                           411  *---------------------------------------------------------------------------*
00001340                           412  * JMPTABLE: OP code jump/branch table used to decode and display opcodes
00001340                           413  *---------------------------------------------------------------------------*  
00001340  4EF9 000013A0            414  JMPTABLE    JMP     OP0000  * CMPI/ORI/BTST/EORI/SUBI/BTST
00001346  4EF9 000015C6            415              JMP     OP0001  * MOVE.B                                        *WORKING ON - JOSEPH
0000134C  4EF9 00001634            416              JMP     OP0010  * MOVE.L/MOVEA.L
00001352  4EF9 00001732            417              JMP     OP0011  * MOVE.W/MOVEA.W
00001358  4EF9 0000182E            418              JMP     OP0100  * MOVEM/LEA/NEG/NOT/JSR/RTS
0000135E  4EF9 000019C8            419              JMP     OP0101  * ADDQ
00001364  4EF9 00001A44            420              JMP     OP0110  * BRA/Bcc (BEQ/BNE/BLT/BHI)
0000136A  4EF9 00001AD2            421              JMP     OP0111  * MOVEQ (unassigned)
00001370  4EF9 00001AD6            422              JMP     OP1000  * DIVS
00001376  4EF9 00001B12            423              JMP     OP1001  * SUB/SUBA
0000137C  4EF9 00001BEA            424              JMP     OP1010  * Unassigned 
00001382  4EF9 00001BEE            425              JMP     OP1011  * CMP/EOR/CMPA
00001388  4EF9 00001CEA            426              JMP     OP1100  * MULS/AND
0000138E  4EF9 00001D86            427              JMP     OP1101  * ADD/ADDA
00001394  4EF9 00002162            428              JMP     OP1110  * LSR/LSL/ASR/ASL/ROL/ROR
0000139A  4EF9 00002410            429              JMP     OP1111  * Special/Reserved
000013A0                           430              
000013A0                           431  *---------------------------------------------------------------------------*
000013A0                           432  * OP0000: decode CMPI/ORI/BTST/SUBI/EORI
000013A0                           433  *---------------------------------------------------------------------------*           
000013A0                           434  OP0000                                                                                  
000013A0  4281                     435              CLR.L   D1          * to temporarily store the address to process
000013A2  4280                     436              CLR.L   D0  
000013A4  4284                     437              CLR.L   D4                 
000013A6  227C 00000000            438              MOVEA.L #0, A1                
000013AC                           439              * Check for ORI (0000 0000 xx (size) xxx (EA mode) xxx(EA reg)
000013AC                           440              * Check if bit 11,10,9,8 are 0000)
000013AC  2205                     441              MOVE.L  D5,D1
000013AE  0281 00000F00            442              ANDI.L  #$0F00,D1
000013B4  0C81 00000000            443              CMPI.L  #$0000,D1   * if they are 0000, it is ORI
000013BA  6700 01B4                444              BEQ     OP_ORI
000013BE                           445  
000013BE                           446              * check for CMPI (0000 1100 xx (size) xxx (EA mode) xxx (EA reg)
000013BE                           447              * check if bit 11,10,9,8 are 1100
000013BE  4281                     448              CLR.L   D1
000013C0  2205                     449              MOVE.L  D5,D1
000013C2  0281 00000F00            450              ANDI.L  #$0F00,D1
000013C8  0C81 00000C00            451              CMPI.L  #$0C00,D1
000013CE  6700 014A                452              BEQ     OP_CMPI
000013D2                           453              
000013D2                           454              * check for SUBI
000013D2  4281                     455              CLR.L   D1
000013D4  2205                     456              MOVE.L  D5,D1
000013D6  0281 00000F00            457              ANDI.L  #$0F00,D1
000013DC  0C81 00000400            458              CMPI.L  #$0400,D1
000013E2  6700 0094                459              BEQ     OP_SUBI
000013E6                           460              
000013E6                           461              * check for EORI
000013E6  4281                     462              CLR.L   D1
000013E8  2205                     463              MOVE.L  D5,D1
000013EA  0281 00000F00            464              ANDI.L  #$0F00,D1
000013F0  0C81 00000A00            465              CMPI.L  #$0A00,D1
000013F6  6700 002A                466              BEQ     OP_EORI
000013FA                           467              
000013FA                           468              * check for BTST
000013FA  4281                     469              CLR.L   D1
000013FC  2205                     470              MOVE.L  D5,D1
000013FE  EA99                     471              ROR.L   #5,D1
00001400  0281 00000008            472              ANDI.L  #$8,D1
00001406  0C01 0008                473              CMPI.B  #8,D1
0000140A  6700 0008                474              BEQ     OP_BTST
0000140E                           475  
0000140E                           476              * OP0000 series other than ORI/CMPI/BTST/EORI
0000140E  4EF9 000014CE            477              JMP     OP_DATA
00001414                           478              
00001414                           479  *---------------------------------------------------------------------------*
00001414                           480  * OP_BTST: display BTST
00001414                           481  *---------------------------------------------------------------------------* 
00001414  43F9 000037B0            482  OP_BTST     LEA     DISP_BTST,A1
0000141A  103C 000E                483              MOVE.B  #14,D0
0000141E  4E4F                     484              TRAP    #15
00001420  4E75                     485              RTS
00001422                           486  
00001422                           487  *---------------------------------------------------------------------------*
00001422                           488  * OP_EORI: decode and display EORI
00001422                           489  *---------------------------------------------------------------------------* 
00001422                           490  OP_EORI
00001422  4281                     491              CLR.L   D1
00001424  4284                     492              CLR.L   D4
00001426  2205                     493              MOVE.L  D5,D1
00001428  EC99                     494              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
0000142A  0C01 0000                495              CMPI.B  #0,D1
0000142E  6700 0012                496              BEQ     OP_EORI_B    * size is byte
00001432  0C01 0001                497              CMPI.B  #1,D1
00001436  6700 001C                498              BEQ     OP_EORI_W    * size is word
0000143A  0C01 0002                499              CMPI.B  #2,D1
0000143E  6700 0026                500              BEQ     OP_EORI_L    * size is long
00001442                           501  
00001442                           502  OP_EORI_B    * size is byte    
00001442  183C 0000                503              MOVE.B  #0,D4
00001446  43F9 00003792            504              LEA     DISP_EORI_B,A1
0000144C  103C 000E                505              MOVE.B  #14,D0
00001450  4E4F                     506              TRAP    #15
00001452  4E75                     507              RTS
00001454                           508              
00001454                           509  OP_EORI_W    * size is word
00001454  183C 0001                510              MOVE.B  #1,D4
00001458  43F9 0000379C            511              LEA     DISP_EORI_W,A1
0000145E  103C 000E                512              MOVE.B  #14,D0
00001462  4E4F                     513              TRAP    #15
00001464  4E75                     514              RTS
00001466                           515              
00001466                           516  OP_EORI_L    * size is long
00001466  183C 0002                517              MOVE.B  #2,D4
0000146A  43F9 000037A6            518              LEA     DISP_EORI_L,A1
00001470  103C 000E                519              MOVE.B  #14,D0
00001474  4E4F                     520              TRAP    #15
00001476  4E75                     521              RTS
00001478                           522              
00001478                           523  *---------------------------------------------------------------------------*
00001478                           524  * OP_SUBI: decode SUBI.B/.W/.L
00001478                           525  *---------------------------------------------------------------------------* 
00001478                           526  OP_SUBI
00001478  4281                     527              CLR.L   D1
0000147A  4284                     528              CLR.L   D4
0000147C  2205                     529              MOVE.L  D5,D1
0000147E  EC99                     530              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001480  0C01 0000                531              CMPI.B  #0,D1
00001484  6700 0012                532              BEQ     OP_SUBI_B    * size is byte
00001488  0C01 0001                533              CMPI.B  #1,D1
0000148C  6700 001C                534              BEQ     OP_SUBI_W    * size is word
00001490  0C01 0002                535              CMPI.B  #2,D1
00001494  6700 0026                536              BEQ     OP_SUBI_L    * size is long
00001498                           537  
00001498                           538  OP_SUBI_B    * size is byte    
00001498  183C 0000                539              MOVE.B  #0,D4
0000149C  43F9 0000389E            540              LEA     DISP_SUBI_B,A1
000014A2  103C 000E                541              MOVE.B  #14,D0
000014A6  4E4F                     542              TRAP    #15
000014A8  4E75                     543              RTS
000014AA                           544              
000014AA                           545  OP_SUBI_W    * size is word
000014AA  183C 0001                546              MOVE.B  #1,D4
000014AE  43F9 000038A8            547              LEA     DISP_SUBI_W,A1
000014B4  103C 000E                548              MOVE.B  #14,D0
000014B8  4E4F                     549              TRAP    #15
000014BA  4E75                     550              RTS
000014BC                           551              
000014BC                           552  OP_SUBI_L    * size is long
000014BC  183C 0002                553              MOVE.B  #2,D4
000014C0  43F9 000038B2            554              LEA     DISP_SUBI_L,A1
000014C6  103C 000E                555              MOVE.B  #14,D0
000014CA  4E4F                     556              TRAP    #15
000014CC  4E75                     557              RTS
000014CE                           558              
000014CE                           559  *---------------------------------------------------------------------------*
000014CE                           560  * OP_DATA : unidentified opcode
000014CE                           561  *---------------------------------------------------------------------------* 
000014CE                           562  OP_DATA
000014CE  4280                     563              CLR.L   D0                   
000014D0  4281                     564              CLR.L   D1     
000014D2  4284                     565              CLR.L   D4                    
000014D4  227C 00000000            566              MOVEA.L #0, A1             
000014DA  4287                     567              CLR.L   D7
000014DC  1E3C 0001                568              MOVE.B  #1,D7                   * error flag is true
000014E0                           569              
000014E0  43F9 000037D6            570              LEA     DISP_DATA,A1
000014E6  103C 000E                571              MOVE.B  #14,D0
000014EA  4E4F                     572              TRAP    #15
000014EC                           573              
000014EC  4EF9 000014F2            574              JMP     EA_DATA
000014F2                           575             
000014F2                           576             
000014F2                           577  *---------------------------------------------------------------------------*
000014F2                           578  * EA_DATA
000014F2                           579  *---------------------------------------------------------------------------*       
000014F2  43F9 00003727            580  EA_DATA     LEA     TMPOUTPUT,A1    * load the temporarily stored output address
000014F8  2205                     581              MOVE.L  D5,D1           * transfer the processing data to D1
000014FA  7404                     582              MOVE.L  #4,D2           * set to word size
000014FC  4EB8 11CE                583              JSR     HEX2ASCII       * prepare output in ascii
00001500  43F9 00003A49            584              LEA     DISP_HEX,A1     * display $ symbol
00001506  103C 000E                585              MOVE.B  #14,D0      
0000150A  4E4F                     586              TRAP    #15
0000150C  43F9 00003727            587              LEA     TMPOUTPUT,A1    * display with a new line
00001512  103C 000D                588              MOVE.B  #13,D0
00001516  4E4F                     589              TRAP    #15
00001518                           590  
00001518  4E75                     591              RTS
0000151A                           592              
0000151A                           593  *---------------------------------------------------------------------------*
0000151A                           594  * OP_CMPI : decode CMPI and its size
0000151A                           595  *---------------------------------------------------------------------------*          
0000151A                           596  OP_CMPI
0000151A  4281                     597              CLR.L   D1
0000151C  4284                     598              CLR.L   D4
0000151E  2205                     599              MOVE.L  D5,D1
00001520  EC99                     600              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001522  0C01 0000                601              CMPI.B  #0,D1
00001526  6700 0012                602              BEQ     OP_CMPI_B    * size is byte
0000152A  0C01 0001                603              CMPI.B  #1,D1
0000152E  6700 001C                604              BEQ     OP_CMPI_W    * size is word
00001532  0C01 0002                605              CMPI.B  #2,D1
00001536  6700 0026                606              BEQ     OP_CMPI_L    * size is long
0000153A                           607  
0000153A                           608  OP_CMPI_B    * size is byte    
0000153A  183C 0000                609              MOVE.B  #0,D4
0000153E  43F9 000037B8            610              LEA     DISP_CMPI_B,A1
00001544  103C 000E                611              MOVE.B  #14,D0
00001548  4E4F                     612              TRAP    #15
0000154A  4E75                     613              RTS
0000154C                           614              
0000154C                           615  OP_CMPI_W    * size is word
0000154C  183C 0001                616              MOVE.B  #1,D4
00001550  43F9 000037C2            617              LEA     DISP_CMPI_W,A1
00001556  103C 000E                618              MOVE.B  #14,D0
0000155A  4E4F                     619              TRAP    #15
0000155C  4E75                     620              RTS
0000155E                           621              
0000155E                           622  OP_CMPI_L    * size is long
0000155E  183C 0002                623              MOVE.B  #2,D4
00001562  43F9 000037CC            624              LEA     DISP_CMPI_L,A1
00001568  103C 000E                625              MOVE.B  #14,D0
0000156C  4E4F                     626              TRAP    #15
0000156E  4E75                     627              RTS
00001570                           628   
00001570                           629  *---------------------------------------------------------------------------*
00001570                           630  * OP_ORI : decode ORI and its size
00001570                           631  *---------------------------------------------------------------------------* 
00001570                           632  OP_ORI      
00001570  4281                     633              CLR.L   D1
00001572  4284                     634              CLR.L   D4
00001574  2205                     635              MOVE.L  D5,D1
00001576  EC99                     636              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001578  0C01 0000                637              CMPI.B  #0,D1
0000157C  6700 0012                638              BEQ     OP_ORI_B    * size is byte
00001580  0C01 0001                639              CMPI.B  #1,D1
00001584  6700 001C                640              BEQ     OP_ORI_W    * size is word
00001588  0C01 0002                641              CMPI.B  #2,D1
0000158C  6700 0026                642              BEQ     OP_ORI_L    * size is long
00001590                           643  
00001590                           644  OP_ORI_B    * size is byte    
00001590  183C 0000                645              MOVE.B  #0,D4
00001594  43F9 00003777            646              LEA     DISP_ORI_B,A1
0000159A  103C 000E                647              MOVE.B  #14,D0
0000159E  4E4F                     648              TRAP    #15
000015A0  4E75                     649              RTS
000015A2                           650              
000015A2                           651  OP_ORI_W    * size is word
000015A2  183C 0001                652              MOVE.B  #1,D4
000015A6  43F9 00003780            653              LEA     DISP_ORI_W,A1
000015AC  103C 000E                654              MOVE.B  #14,D0
000015B0  4E4F                     655              TRAP    #15
000015B2  4E75                     656              RTS
000015B4                           657              
000015B4                           658  OP_ORI_L    * size is long
000015B4  183C 0002                659              MOVE.B  #2,D4
000015B8  43F9 00003789            660              LEA     DISP_ORI_L,A1
000015BE  103C 000E                661              MOVE.B  #14,D0
000015C2  4E4F                     662              TRAP    #15
000015C4  4E75                     663              RTS
000015C6                           664          
000015C6                           665  *---------------------------------------------------------------------------*
000015C6                           666  * OP0001: MOVE.B
000015C6                           667  *---------------------------------------------------------------------------*
000015C6                           668  OP0001      
000015C6  4EF9 000015CC            669              JMP     OP_MOVE_B   * display MOVE.B
000015CC                           670              
000015CC                           671  *---------------------------------------------------------------------------*
000015CC                           672  * OP_MOVE_B: display MOVE_B and proceed to EA
000015CC                           673  *---------------------------------------------------------------------------*
000015CC                           674  OP_MOVE_B                                                                       
000015CC                           675             
000015CC                           676             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000015CC  13FC 0082 00003A88       677             MOVE.B   #$82,DEST_REGISTER_FORMAT
000015D4  13FC 0000 00003A89       678             MOVE.B   #$00,SRC_REGISTER_FORMAT
000015DC                           679             
000015DC                           680             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000015DC  13FC 00B9 00003A8B       681             MOVE.B   #$B9,GET_DST_START_END
000015E4  13FC 0020 00003A8C       682             MOVE.B   #$20,GET_SRC_START_END
000015EC                           683             
000015EC                           684              *CLEAR D3
000015EC  4283                     685              CLR.L   D3
000015EE                           686              *LOAD STACK WITH THIS OPMODE
000015EE  6100 1B72                687              BSR     PUSH_STACK
000015F2  163C 004D                688              MOVE.B  #'M',D3
000015F6  6100 1B6A                689              BSR     PUSH_STACK
000015FA  163C 004F                690              MOVE.B  #'O',D3
000015FE  6100 1B62                691              BSR     PUSH_STACK
00001602  163C 0056                692              MOVE.B  #'V',D3
00001606  6100 1B5A                693              BSR     PUSH_STACK
0000160A  163C 0045                694              MOVE.B  #'E',D3
0000160E  6100 1B52                695              BSR     PUSH_STACK
00001612  163C 002E                696              MOVE.B  #'.',D3
00001616  6100 1B4A                697              BSR     PUSH_STACK
0000161A  163C 0042                698              MOVE.B  #'B',D3
0000161E  6100 1B42                699              BSR     PUSH_STACK
00001622                           700              
00001622  6100 12A0                701              BSR     GET_EA_EA_SRC
00001626  163C 002C                702              MOVE.B  #',',D3
0000162A  6100 1B36                703              BSR     PUSH_STACK
0000162E  6100 16C4                704              BSR     GET_EA_EA_DEST
00001632                           705              
00001632  4E75                     706              RTS
00001634                           707              
00001634                           708             
00001634                           709  *---------------------------------------------------------------------------*
00001634                           710  * OP0010: decode MOVE.L/MOVEA.L
00001634                           711  *---------------------------------------------------------------------------*
00001634                           712  OP0010      
00001634  183C 0002                713              MOVE.B  #2,D4
00001638  4280                     714              CLR.L   D0                     
0000163A  4281                     715              CLR.L   D1                      
0000163C  227C 00000000            716              MOVEA.L #0, A1                 
00001642                           717              
00001642  2205                     718              MOVE.L  D5,D1
00001644  EA99                     719              ROR.L   #5,D1
00001646  0281 0000000E            720              ANDI.L  #$E,D1
0000164C  0C01 0002                721              CMPI.B  #2,D1
00001650  6700 0070                722              BEQ     OP_MOVEA_L
00001654                           723  
00001654  4EF9 0000165A            724              JMP     OP_MOVE_L
0000165A                           725             
0000165A                           726  
0000165A                           727  *---------------------------------------------------------------------------*
0000165A                           728  * OP_MOVE_L: display MOVE_L and proceed to EA
0000165A                           729  *---------------------------------------------------------------------------*
0000165A                           730  OP_MOVE_L   
0000165A                           731             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000165A  13FC 0082 00003A88       732             MOVE.B   #$82,DEST_REGISTER_FORMAT
00001662  13FC 0000 00003A89       733             MOVE.B   #$00,SRC_REGISTER_FORMAT
0000166A                           734             
0000166A                           735             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000166A  13FC 00B9 00003A8B       736             MOVE.B   #$B9,GET_DST_START_END
00001672  13FC 0020 00003A8C       737             MOVE.B   #$20,GET_SRC_START_END
0000167A                           738             
0000167A                           739              *CLEAR D3
0000167A  4283                     740              CLR.L   D3
0000167C                           741              *LOAD STACK WITH THIS OPMODE
0000167C  6100 1AE4                742              BSR     PUSH_STACK
00001680  163C 004D                743              MOVE.B  #'M',D3
00001684  6100 1ADC                744              BSR     PUSH_STACK
00001688  163C 004F                745              MOVE.B  #'O',D3
0000168C  6100 1AD4                746              BSR     PUSH_STACK
00001690  163C 0056                747              MOVE.B  #'V',D3
00001694  6100 1ACC                748              BSR     PUSH_STACK
00001698  163C 0045                749              MOVE.B  #'E',D3
0000169C  6100 1AC4                750              BSR     PUSH_STACK
000016A0  163C 002E                751              MOVE.B  #'.',D3
000016A4  6100 1ABC                752              BSR     PUSH_STACK
000016A8  163C 004C                753              MOVE.B  #'L',D3
000016AC  6100 1AB4                754              BSR     PUSH_STACK
000016B0                           755              
000016B0  6100 1212                756              BSR     GET_EA_EA_SRC
000016B4  163C 002C                757              MOVE.B  #',',D3
000016B8  6100 1AA8                758              BSR     PUSH_STACK
000016BC  6100 1636                759              BSR     GET_EA_EA_DEST
000016C0                           760              
000016C0  4E75                     761              RTS
000016C2                           762  
000016C2                           763  
000016C2                           764  *---------------------------------------------------------------------------*
000016C2                           765  * OP_MOVEA_L: display MOVEA_L and proceed to EA
000016C2                           766  *---------------------------------------------------------------------------*
000016C2                           767  OP_MOVEA_L 
000016C2                           768             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000016C2  13FC 00FD 00003A88       769             MOVE.B   #$FD,DEST_REGISTER_FORMAT
000016CA  13FC 0000 00003A89       770             MOVE.B   #$00,SRC_REGISTER_FORMAT
000016D2                           771             
000016D2                           772             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000016D2  13FC 00B9 00003A8B       773             MOVE.B   #$B9,GET_DST_START_END
000016DA  13FC 0020 00003A8C       774             MOVE.B   #$20,GET_SRC_START_END
000016E2                           775             
000016E2                           776              *CLEAR D3
000016E2  4283                     777              CLR.L   D3
000016E4                           778              *LOAD STACK WITH THIS OPMODE
000016E4  6100 1A7C                779              BSR     PUSH_STACK
000016E8  163C 004D                780              MOVE.B  #'M',D3
000016EC  6100 1A74                781              BSR     PUSH_STACK
000016F0  163C 004F                782              MOVE.B  #'O',D3
000016F4  6100 1A6C                783              BSR     PUSH_STACK
000016F8  163C 0056                784              MOVE.B  #'V',D3
000016FC  6100 1A64                785              BSR     PUSH_STACK
00001700  163C 0045                786              MOVE.B  #'E',D3
00001704  6100 1A5C                787              BSR     PUSH_STACK           
00001708  163C 0041                788              MOVE.B  #'A',D3
0000170C  6100 1A54                789              BSR     PUSH_STACK
00001710  163C 002E                790              MOVE.B  #'.',D3
00001714  6100 1A4C                791              BSR     PUSH_STACK
00001718  163C 004C                792              MOVE.B  #'L',D3
0000171C  6100 1A44                793              BSR     PUSH_STACK
00001720                           794              
00001720  6100 11A2                795              BSR     GET_EA_EA_SRC
00001724  163C 002C                796              MOVE.B  #',',D3
00001728  6100 1A38                797              BSR     PUSH_STACK
0000172C  6100 15C6                798              BSR     GET_EA_EA_DEST
00001730                           799              
00001730  4E75                     800              RTS
00001732                           801  
00001732                           802              
00001732                           803  *---------------------------------------------------------------------------*
00001732                           804  * OP0011: decode MOVE.W/MOVEA.W
00001732                           805  *---------------------------------------------------------------------------*
00001732                           806  OP0011      
00001732  4280                     807              CLR.L   D0                      
00001734  4281                     808              CLR.L   D1  
00001736  4284                     809              CLR.L   D4                   
00001738  227C 00000000            810              MOVEA.L #0, A1 
0000173E                           811                
0000173E  2205                     812              MOVE.L  D5,D1
00001740  EC99                     813              ROR.L   #6,D1
00001742  0281 00000007            814              ANDI.L  #$07,D1
00001748  0C01 0001                815              CMPI.B  #1,D1
0000174C  6700 0070                816              BEQ     OP_MOVEA_W
00001750                           817              
00001750  4EF9 00001756            818              JMP     OP_MOVE_W
00001756                           819            
00001756                           820  *---------------------------------------------------------------------------*
00001756                           821  * OP_MOVE_W: display MOVE_W and proceed to EA
00001756                           822  *---------------------------------------------------------------------------*
00001756                           823  OP_MOVE_W   
00001756                           824             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001756  13FC 0082 00003A88       825             MOVE.B   #$82,DEST_REGISTER_FORMAT
0000175E  13FC 0000 00003A89       826             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001766                           827             
00001766                           828             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001766  13FC 00B9 00003A8B       829             MOVE.B   #$B9,GET_DST_START_END
0000176E  13FC 0020 00003A8C       830             MOVE.B   #$20,GET_SRC_START_END
00001776                           831             
00001776                           832              *CLEAR D3
00001776  4283                     833              CLR.L   D3
00001778                           834              *LOAD STACK WITH THIS OPMODE
00001778  6100 19E8                835              BSR     PUSH_STACK
0000177C  163C 004D                836              MOVE.B  #'M',D3
00001780  6100 19E0                837              BSR     PUSH_STACK
00001784  163C 004F                838              MOVE.B  #'O',D3
00001788  6100 19D8                839              BSR     PUSH_STACK
0000178C  163C 0056                840              MOVE.B  #'V',D3
00001790  6100 19D0                841              BSR     PUSH_STACK
00001794  163C 0045                842              MOVE.B  #'E',D3
00001798  6100 19C8                843              BSR     PUSH_STACK
0000179C  163C 002E                844              MOVE.B  #'.',D3
000017A0  6100 19C0                845              BSR     PUSH_STACK
000017A4  163C 0057                846              MOVE.B  #'W',D3
000017A8  6100 19B8                847              BSR     PUSH_STACK
000017AC                           848              
000017AC  6100 1116                849              BSR     GET_EA_EA_SRC
000017B0  163C 002C                850              MOVE.B  #',',D3
000017B4  6100 19AC                851              BSR     PUSH_STACK
000017B8  6100 153A                852              BSR     GET_EA_EA_DEST
000017BC                           853              
000017BC  4E75                     854              RTS
000017BE                           855  
000017BE                           856  *---------------------------------------------------------------------------*
000017BE                           857  * OP_MOVEA_W: display MOVEA and proceed to EA
000017BE                           858  *---------------------------------------------------------------------------*
000017BE                           859  OP_MOVEA_W 
000017BE                           860             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000017BE  13FC 00FD 00003A88       861             MOVE.B   #$FD,DEST_REGISTER_FORMAT
000017C6  13FC 0000 00003A89       862             MOVE.B   #$00,SRC_REGISTER_FORMAT
000017CE                           863             
000017CE                           864             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000017CE  13FC 00B9 00003A8B       865             MOVE.B   #$B9,GET_DST_START_END
000017D6  13FC 0020 00003A8C       866             MOVE.B   #$20,GET_SRC_START_END
000017DE                           867             
000017DE                           868              *CLEAR D3
000017DE  4283                     869              CLR.L   D3
000017E0                           870              *LOAD STACK WITH THIS OPMODE
000017E0  6100 1980                871              BSR     PUSH_STACK
000017E4  163C 004D                872              MOVE.B  #'M',D3
000017E8  6100 1978                873              BSR     PUSH_STACK
000017EC  163C 004F                874              MOVE.B  #'O',D3
000017F0  6100 1970                875              BSR     PUSH_STACK
000017F4  163C 0056                876              MOVE.B  #'V',D3
000017F8  6100 1968                877              BSR     PUSH_STACK
000017FC  163C 0045                878              MOVE.B  #'E',D3
00001800  6100 1960                879              BSR     PUSH_STACK           
00001804  163C 0041                880              MOVE.B  #'A',D3
00001808  6100 1958                881              BSR     PUSH_STACK
0000180C  163C 002E                882              MOVE.B  #'.',D3
00001810  6100 1950                883              BSR     PUSH_STACK
00001814  163C 0057                884              MOVE.B  #'W',D3
00001818  6100 1948                885              BSR     PUSH_STACK
0000181C                           886              
0000181C  6100 10A6                887              BSR     GET_EA_EA_SRC
00001820  163C 002C                888              MOVE.B  #',',D3
00001824  6100 193C                889              BSR     PUSH_STACK
00001828  6100 14CA                890              BSR     GET_EA_EA_DEST
0000182C                           891            
0000182C  4E75                     892              RTS
0000182E                           893  *---------------------------------------------------------------------------*
0000182E                           894  * OP0100: decode MOVEM/LEA/NEG/JSR/RTS/NOT
0000182E                           895  *---------------------------------------------------------------------------*
0000182E                           896  OP0100
0000182E  4280                     897              CLR.L   D0                      
00001830  4281                     898              CLR.L   D1  
00001832  4284                     899              CLR.L   D4                      
00001834  227C 00000000            900              MOVEA.L #0, A1                  
0000183A  2205                     901              MOVE.L  D5,D1  
0000183C                           902              
0000183C                           903              * check for RTS
0000183C  0C41 4E75                904              CMPI.W  #$4E75,D1   * 0100 1110 0111 0101
00001840  6700 0178                905              BEQ     OP_RTS
00001844                           906              
00001844                           907              * check for JSR     * 0100 1110 10 xxx (ea mode) xxx (ea reg)
00001844  4281                     908              CLR.L   D1 
00001846  2205                     909              MOVE.L  D5,D1  
00001848  0241 0F00                910              ANDI.W  #$0F00,D1
0000184C  0C41 0E00                911              CMPI.W  #$0E00,D1
00001850  6700 0154                912              BEQ     OP_JSR
00001854                           913  
00001854                           914              * check for NEG     * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
00001854  4281                     915              CLR.L   D1 
00001856  2205                     916              MOVE.L  D5,D1  
00001858  0241 0F00                917              ANDI.W  #$0F00,D1
0000185C  0C41 0400                918              CMPI.W  #$0400,D1
00001860  6700 0086                919              BEQ     OP_NEG
00001864                           920              
00001864                           921              * check for NOT     * 0100 0110 xx (size) xxx (ea mode) xxx (ea reg)
00001864  4281                     922              CLR.L   D1 
00001866  2205                     923              MOVE.L  D5,D1  
00001868  0241 0F00                924              ANDI.W  #$0F00,D1
0000186C  0C41 0600                925              CMPI.W  #$0600,D1
00001870  6700 00DE                926              BEQ     OP_NOT
00001874                           927              
00001874                           928              * check for LEA     * 0100 xxx (reg) 111 xxx (ea mode) xxx (ea reg)
00001874  4281                     929              CLR.L   D1 
00001876  2205                     930              MOVE.L  D5,D1  
00001878  E099                     931              ROR.L   #8,D1
0000187A  0C01 0001                932              CMPI.B  #1,D1
0000187E  6700 0054                933              BEQ     OP_LEA
00001882                           934              
00001882                           935              * check for MOVEM   * 0100 1 x 001 x (size) xxx (ea mode) xxx (ea reg)
00001882  4281                     936              CLR.L   D1 
00001884  2205                     937              MOVE.L  D5,D1  
00001886  EB59                     938              ROL.W   #5,D1
00001888  0C01 0001                939              CMPI.B  #1,D1
0000188C  6600 FC40                940              BNE     OP_DATA
00001890  E959                     941              ROL.W   #4,D1
00001892  0C01 0001                942              CMPI.B  #1,D1
00001896  6600 FC36                943              BNE     OP_DATA
0000189A  E359                     944              ROL.W   #1,D1
0000189C  0C01 0000                945              CMPI.B  #0,D1
000018A0  6700 000E                946              BEQ     OP_MOVEM_W
000018A4  0C01 0001                947              CMPI.B  #1,D1
000018A8  6700 0018                948              BEQ     OP_MOVEM_L
000018AC  4EF8 14CE                949              JMP     OP_DATA
000018B0                           950  
000018B0                           951  *---------------------------------------------------------------------------*
000018B0                           952  * OP_MOVEM_W: display MOVEM_W
000018B0                           953  *---------------------------------------------------------------------------*    
000018B0                           954  OP_MOVEM_W  
000018B0  183C 0001                955              MOVE.B  #1,D4
000018B4  43F9 00003847            956              LEA     DISP_MOVEM_W,A1
000018BA  103C 000E                957              MOVE.B  #14,D0
000018BE  4E4F                     958              TRAP    #15
000018C0  4E75                     959              RTS
000018C2                           960  
000018C2                           961  *---------------------------------------------------------------------------*
000018C2                           962  * OP_MOVEM_L: display MOVEM_L
000018C2                           963  *---------------------------------------------------------------------------*
000018C2                           964  OP_MOVEM_L  
000018C2  183C 0002                965              MOVE.B  #2,D4
000018C6  43F9 00003852            966              LEA     DISP_MOVEM_L,A1
000018CC  103C 000E                967              MOVE.B  #14,D0
000018D0  4E4F                     968              TRAP    #15
000018D2  4E75                     969              RTS
000018D4                           970     
000018D4                           971  *---------------------------------------------------------------------------*
000018D4                           972  * OP_LEA: decode and display LEA
000018D4                           973  *---------------------------------------------------------------------------*
000018D4                           974  OP_LEA      
000018D4  43F9 00003840            975              LEA     DISP_LEA,A1
000018DA  103C 000E                976              MOVE.B  #14,D0
000018DE  4E4F                     977              TRAP    #15
000018E0  4EF9 0000244E            978              JMP     EA_MOVEA
000018E6                           979  
000018E6  4E75                     980              RTS
000018E8                           981  
000018E8                           982  *---------------------------------------------------------------------------*
000018E8                           983  * OP_NEG: decode and display NEG 
000018E8                           984  *---------------------------------------------------------------------------*
000018E8                           985  OP_NEG      * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
000018E8  4281                     986              CLR.L   D1
000018EA  4284                     987              CLR.L   D4
000018EC  2205                     988              MOVE.L  D5,D1
000018EE  EC99                     989              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000018F0  0C01 0000                990              CMPI.B  #0,D1
000018F4  6700 0012                991              BEQ     OP_NEG_B    * size is byte
000018F8  0C01 0001                992              CMPI.B  #1,D1
000018FC  6700 0022                993              BEQ     OP_NEG_W    * size is word
00001900  0C01 0002                994              CMPI.B  #2,D1
00001904  6700 0032                995              BEQ     OP_NEG_L    * size is long
00001908                           996                         
00001908                           997  OP_NEG_B    * size is byte   
00001908  183C 0000                998              MOVE.B  #0,D4 
0000190C  43F9 0000380A            999              LEA     DISP_NEG_B,A1
00001912  103C 000E               1000              MOVE.B  #14,D0
00001916  4E4F                    1001              TRAP    #15
00001918                          1002              
00001918  4EB9 00002414           1003              JSR     EA_NOSRC
0000191E  4E75                    1004              RTS
00001920                          1005              
00001920                          1006  OP_NEG_W    * size is word
00001920  183C 0001               1007              MOVE.B  #1,D4
00001924  43F9 00003813           1008              LEA     DISP_NEG_W,A1
0000192A  103C 000E               1009              MOVE.B  #14,D0
0000192E  4E4F                    1010              TRAP    #15
00001930  4EB9 00002414           1011              JSR     EA_NOSRC
00001936  4E75                    1012              RTS
00001938                          1013              
00001938                          1014  OP_NEG_L    * size is long
00001938  183C 0002               1015              MOVE.B  #2,D4
0000193C  43F9 0000381C           1016              LEA     DISP_NEG_L,A1
00001942  103C 000E               1017              MOVE.B  #14,D0
00001946  4E4F                    1018              TRAP    #15
00001948  4EB9 00002414           1019              JSR     EA_NOSRC
0000194E                          1020              
0000194E  4E75                    1021              RTS
00001950                          1022  
00001950                          1023  *---------------------------------------------------------------------------*
00001950                          1024  * OP_NOT: decode and display NOT 
00001950                          1025  *---------------------------------------------------------------------------*
00001950                          1026  OP_NOT
00001950  4281                    1027              CLR.L   D1
00001952  4284                    1028              CLR.L   D4
00001954  2205                    1029              MOVE.L  D5,D1
00001956  EC99                    1030              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001958  0C01 0000               1031              CMPI.B  #0,D1
0000195C  6700 0012               1032              BEQ     OP_NOT_B    * size is byte
00001960  0C01 0001               1033              CMPI.B  #1,D1
00001964  6700 001C               1034              BEQ     OP_NOT_W    * size is word
00001968  0C01 0002               1035              CMPI.B  #2,D1
0000196C  6700 0026               1036              BEQ     OP_NOT_L    * size is long
00001970                          1037                         
00001970                          1038  OP_NOT_B    * size is byte   
00001970  183C 0000               1039              MOVE.B  #0,D4 
00001974  43F9 00003825           1040              LEA     DISP_NOT_B,A1
0000197A  103C 000E               1041              MOVE.B  #14,D0
0000197E  4E4F                    1042              TRAP    #15
00001980  4E75                    1043              RTS
00001982                          1044              
00001982                          1045  OP_NOT_W    * size is word
00001982  183C 0001               1046              MOVE.B  #1,D4
00001986  43F9 0000382E           1047              LEA     DISP_NOT_W,A1
0000198C  103C 000E               1048              MOVE.B  #14,D0
00001990  4E4F                    1049              TRAP    #15
00001992  4E75                    1050              RTS
00001994                          1051              
00001994                          1052  OP_NOT_L    * size is long
00001994  183C 0002               1053              MOVE.B  #2,D4
00001998  43F9 00003837           1054              LEA     DISP_NOT_L,A1
0000199E  103C 000E               1055              MOVE.B  #14,D0
000019A2  4E4F                    1056              TRAP    #15
000019A4  4E75                    1057              RTS
000019A6                          1058  
000019A6                          1059  *---------------------------------------------------------------------------*
000019A6                          1060  * OP_JSR: display JSR     
000019A6                          1061  *---------------------------------------------------------------------------*
000019A6  43F9 00003803           1062  OP_JSR      LEA     DISP_JSR,A1
000019AC  103C 000E               1063              MOVE.B  #14,D0
000019B0  4E4F                    1064              TRAP    #15
000019B2  4EB9 00002414           1065              JSR     EA_NOSRC
000019B8                          1066  
000019B8  4E75                    1067              RTS
000019BA                          1068  
000019BA                          1069  *---------------------------------------------------------------------------*
000019BA                          1070  * OP_RTS: display RTS     
000019BA                          1071  *---------------------------------------------------------------------------* 
000019BA  43F9 000037FC           1072  OP_RTS      LEA     DISP_RTS,A1
000019C0  103C 000E               1073              MOVE.B  #14,D0
000019C4  4E4F                    1074              TRAP    #15
000019C6  4E75                    1075              RTS
000019C8                          1076  
000019C8                          1077  *---------------------------------------------------------------------------*
000019C8                          1078  * OP0101: decode ADDQ
000019C8                          1079  *---------------------------------------------------------------------------* 
000019C8  4280                    1080  OP0101      CLR.L   D0               * clear registers for temp storage       
000019CA  4281                    1081              CLR.L   D1
000019CC  4284                    1082              CLR.L   D4                  
000019CE  227C 00000000           1083              MOVEA.L #0, A1  
000019D4                          1084              
000019D4  2205                    1085              MOVE.L  D5,D1           * copy the processing data 
000019D6  E089                    1086              LSR.L   #8,D1           * shift to right by 8 bits to check the value of bit 8
000019D8  0201 0001               1087              ANDI.B  #$1,D1          * mask all bits except the last 2 bits
000019DC  0C01 0000               1088              CMPI.B  #0,D1           * if the value is 0, it's ADDQ
000019E0  6700 0006               1089              BEQ     OP_ADDQ
000019E4                          1090              
000019E4  4EF8 14CE               1091              JMP     OP_DATA
000019E8                          1092       
000019E8  4281                    1093  OP_ADDQ     CLR.L   D1
000019EA  2205                    1094              MOVE.L  D5,D1
000019EC  EC99                    1095              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000019EE  0281 00000003           1096              ANDI.L  #$3,D1
000019F4  0C01 0000               1097              CMPI.B  #0,D1
000019F8  6700 0014               1098              BEQ     OP_ADDQ_B    * size is byte
000019FC  0C41 0001               1099              CMPI.W  #1,D1
00001A00  6700 001E               1100              BEQ     OP_ADDQ_W    * size is word
00001A04  0C81 00000002           1101              CMPI.L  #2,D1
00001A0A  6700 0026               1102              BEQ     OP_ADDQ_L    * size is long
00001A0E                          1103              
00001A0E                          1104  *---------------------------------------------------------------------------*
00001A0E                          1105  * OP_ADDQ: display ADDQ
00001A0E                          1106  *---------------------------------------------------------------------------*              
00001A0E                          1107  OP_ADDQ_B    * size is byte   
00001A0E  183C 0000               1108              MOVE.B  #0,D4 
00001A12  43F9 0000385D           1109              LEA     DISP_ADDQ_B,A1
00001A18  103C 000E               1110              MOVE.B  #14,D0
00001A1C  4E4F                    1111              TRAP    #15
00001A1E  4E75                    1112              RTS
00001A20                          1113              
00001A20                          1114  OP_ADDQ_W    * size is word
00001A20  183C 0001               1115              MOVE.B  #1,D4
00001A24  43F9 00003867           1116              LEA     DISP_ADDQ_W,A1
00001A2A  103C 000E               1117              MOVE.B  #14,D0
00001A2E  4E4F                    1118              TRAP    #15
00001A30  4E75                    1119              RTS
00001A32                          1120              
00001A32                          1121  OP_ADDQ_L    * size is long
00001A32  183C 0002               1122              MOVE.B  #2,D4
00001A36  43F9 00003871           1123              LEA     DISP_ADDQ_L,A1
00001A3C  103C 000E               1124              MOVE.B  #14,D0
00001A40  4E4F                    1125              TRAP    #15
00001A42  4E75                    1126              RTS
00001A44                          1127  
00001A44                          1128  *---------------------------------------------------------------------------*
00001A44                          1129  * OP0110: decode BRA/BEQ/BNE/BLT/BHI
00001A44                          1130  *---------------------------------------------------------------------------*              
00001A44  4280                    1131  OP0110      CLR.L   D0                  
00001A46  4281                    1132              CLR.L   D1   
00001A48  4284                    1133              CLR.L   D4                 
00001A4A  227C 00000000           1134              MOVEA.L #0,A1
00001A50  2205                    1135              MOVE.L  D5, D1                
00001A52  0281 000000FF           1136              ANDI.L  #$00FF, D1              * Get 8-bit displacement 
00001A58  2205                    1137              MOVE.L  D5,D1                  
00001A5A  0281 00000F00           1138              ANDI.L  #$0F00,D1
00001A60                          1139                 
00001A60  0C41 0000               1140              CMPI.W  #$0000,D1               * Check for BRA
00001A64  6700 0050               1141              BEQ     OP_BRA                  
00001A68                          1142                          
00001A68  0C41 0D00               1143              CMPI.W  #$0D00,D1               * Check for BLT
00001A6C  6700 0056               1144              BEQ     OP_BLT      
00001A70                          1145  
00001A70  0C41 0700               1146              CMPI.W  #$0700,D1               * Check for BEQ
00001A74  6700 0032               1147              BEQ     OP_BEQ      
00001A78                          1148  
00001A78  0C41 0600               1149              CMPI.W  #$0600,D1               * Check for BNE
00001A7C  6700 001C               1150              BEQ     OP_BNE  
00001A80                          1151              
00001A80  0C41 0200               1152              CMPI.W  #$0200,D1               * Check for BHI
00001A84  6700 0006               1153              BEQ     OP_BHI
00001A88                          1154  
00001A88  4EF8 14CE               1155              JMP     OP_DATA
00001A8C                          1156              
00001A8C  43F9 00003A2C           1157  OP_BHI      LEA     DISP_BHI,A1             
00001A92  103C 000E               1158              MOVE.B  #14,D0
00001A96  4E4F                    1159              TRAP    #15
00001A98  4E75                    1160              RTS
00001A9A                          1161  
00001A9A  43F9 00003A25           1162  OP_BNE      LEA     DISP_BNE,A1             
00001AA0  103C 000E               1163              MOVE.B  #14,D0
00001AA4  4E4F                    1164              TRAP    #15
00001AA6  4E75                    1165              RTS
00001AA8                          1166  
00001AA8  43F9 00003A1E           1167  OP_BEQ      LEA     DISP_BEQ,A1             
00001AAE  103C 000E               1168              MOVE.B  #14,D0
00001AB2  4E4F                    1169              TRAP    #15
00001AB4  4E75                    1170              RTS          
00001AB6                          1171                          
00001AB6  43F9 00003A10           1172  OP_BRA      LEA     DISP_BRA,A1             
00001ABC  103C 000E               1173              MOVE.B  #14,D0
00001AC0  4E4F                    1174              TRAP    #15
00001AC2  4E75                    1175              RTS
00001AC4                          1176              
00001AC4  43F9 00003A17           1177  OP_BLT      LEA     DISP_BLT,A1          
00001ACA  103C 000E               1178              MOVE.B  #14,D0
00001ACE  4E4F                    1179              TRAP    #15
00001AD0  4E75                    1180              RTS
00001AD2                          1181     
00001AD2                          1182  *---------------------------------------------------------------------------*
00001AD2                          1183  * OP0111 : MOVEQ not required
00001AD2                          1184  *---------------------------------------------------------------------------*           
00001AD2  4EF8 14CE               1185  OP0111      JMP     OP_DATA
00001AD6                          1186             
00001AD6                          1187  *---------------------------------------------------------------------------*
00001AD6                          1188  * OP1000 : decode DIVS
00001AD6                          1189  *---------------------------------------------------------------------------*           
00001AD6                          1190  OP1000      
00001AD6  4280                    1191              CLR.L   D0                
00001AD8  4281                    1192              CLR.L   D1   
00001ADA  4284                    1193              CLR.L   D4                
00001ADC  207C 00000000           1194              MOVEA.L #0, A0               
00001AE2  227C 00000000           1195              MOVEA.L #0, A1               
00001AE8                          1196              
00001AE8  2205                    1197              MOVE.L  D5,D1
00001AEA  EA89                    1198              LSR.L   #5,D1
00001AEC  0281 0000000E           1199              ANDI.L  #$E,D1
00001AF2                          1200    
00001AF2  0C01 000E               1201              CMPI.B  #$E,D1
00001AF6  6700 0006               1202              BEQ     OP_DIVS
00001AFA                          1203              
00001AFA  4EF8 14CE               1204              JMP     OP_DATA
00001AFE                          1205  
00001AFE                          1206  *---------------------------------------------------------------------------*
00001AFE                          1207  * OP_DIVS: display DIVS and proceed to EA
00001AFE                          1208  *---------------------------------------------------------------------------*  
00001AFE  43F9 0000387B           1209  OP_DIVS     LEA     DISP_DIVS,A1
00001B04  103C 000E               1210              MOVE.B  #14,D0
00001B08  4E4F                    1211              TRAP    #15
00001B0A  4EF9 00002428           1212              JMP     EA_ARITH
00001B10                          1213  
00001B10  4E75                    1214              RTS
00001B12                          1215              
00001B12                          1216  *---------------------------------------------------------------------------*
00001B12                          1217  * OP1001: decode SUB/SUBA
00001B12                          1218  *---------------------------------------------------------------------------*      
00001B12  4280                    1219  OP1001      CLR.L   D0                
00001B14  4281                    1220              CLR.L   D1   
00001B16  4284                    1221              CLR.L   D4                 
00001B18  207C 00000000           1222              MOVEA.L #0, A0                 
00001B1E  227C 00000000           1223              MOVEA.L #0, A1               
00001B24                          1224              
00001B24  2205                    1225              MOVE.L  D5,D1
00001B26  EA89                    1226              LSR.L   #5,D1
00001B28  0281 0000000E           1227              ANDI.L  #$E,D1
00001B2E                          1228    
00001B2E  0C01 0000               1229              CMPI.B  #$0,D1
00001B32  6700 004A               1230              BEQ     OP_SUB_B
00001B36  0C01 0002               1231              CMPI.B  #$2,D1
00001B3A  6700 005A               1232              BEQ     OP_SUB_W
00001B3E  0C01 0004               1233              CMPI.B  #$4,D1
00001B42  6700 006A               1234              BEQ     OP_SUB_L
00001B46  0C01 0008               1235              CMPI.B  #$8,D1
00001B4A  6700 0032               1236              BEQ     OP_SUB_B
00001B4E  0C01 000A               1237              CMPI.B  #$A,D1
00001B52  6700 0042               1238              BEQ     OP_SUB_W
00001B56  0C01 000C               1239              CMPI.B  #$C,D1
00001B5A  6700 0052               1240              BEQ     OP_SUB_L
00001B5E                          1241              
00001B5E  4241                    1242              CLR     D1
00001B60  2205                    1243              MOVE.L  D5,D1
00001B62  EC89                    1244              LSR.L   #6,D1
00001B64  0281 0000000F           1245              ANDI.L  #$F,D1
00001B6A  0C01 0003               1246              CMPI.B  #3,D1
00001B6E  6700 0056               1247              BEQ     OP_SUBA_W
00001B72  0C01 0007               1248              CMPI.B  #7,D1
00001B76  6700 0060               1249              BEQ     OP_SUBA_L
00001B7A                          1250              
00001B7A  4EF8 14CE               1251              JMP     OP_DATA
00001B7E                          1252    
00001B7E                          1253  *---------------------------------------------------------------------------*
00001B7E                          1254  * OP_SUB: display SUB and proceed to EA
00001B7E                          1255  *---------------------------------------------------------------------------*            
00001B7E  43F9 00003883           1256  OP_SUB_B    LEA     DISP_SUB_B,A1
00001B84  103C 000E               1257              MOVE.B  #14,D0
00001B88  4E4F                    1258              TRAP    #15
00001B8A  183C 0000               1259              MOVE.B  #0,D4
00001B8E  4EF9 00002474           1260              JMP     EA_GEN
00001B94                          1261  
00001B94  4E75                    1262              RTS
00001B96                          1263  
00001B96  43F9 0000388C           1264  OP_SUB_W    LEA     DISP_SUB_W,A1
00001B9C  103C 000E               1265              MOVE.B  #14,D0
00001BA0  4E4F                    1266              TRAP    #15
00001BA2  183C 0001               1267              MOVE.B  #1,D4
00001BA6  4EF9 00002474           1268              JMP     EA_GEN
00001BAC                          1269  
00001BAC  4E75                    1270              RTS
00001BAE                          1271  
00001BAE  43F9 00003895           1272  OP_SUB_L    LEA     DISP_SUB_L,A1
00001BB4  103C 000E               1273              MOVE.B  #14,D0
00001BB8  4E4F                    1274              TRAP    #15
00001BBA  183C 0002               1275              MOVE.B  #2,D4
00001BBE  4EF9 00002474           1276              JMP     EA_GEN
00001BC4                          1277  
00001BC4  4E75                    1278              RTS
00001BC6                          1279  
00001BC6                          1280  *---------------------------------------------------------------------------*
00001BC6                          1281  * OP_SUBA: display SUBA
00001BC6                          1282  *---------------------------------------------------------------------------*  
00001BC6  43F9 000038BC           1283  OP_SUBA_W   LEA     DISP_SUBA_W,A1
00001BCC  103C 000E               1284              MOVE.B  #14,D0
00001BD0  4E4F                    1285              TRAP    #15
00001BD2  183C 0001               1286              MOVE.B  #1,D4
00001BD6  4E75                    1287              RTS
00001BD8                          1288  
00001BD8  43F9 000038C6           1289  OP_SUBA_L   LEA     DISP_SUBA_L,A1
00001BDE  103C 000E               1290              MOVE.B  #14,D0
00001BE2  4E4F                    1291              TRAP    #15
00001BE4  183C 0002               1292              MOVE.B  #2,D4
00001BE8  4E75                    1293              RTS         
00001BEA                          1294  *---------------------------------------------------------------------------*
00001BEA                          1295  * OP1010 : unassigned
00001BEA                          1296  *---------------------------------------------------------------------------*           
00001BEA  4EF8 14CE               1297  OP1010      JMP     OP_DATA
00001BEE                          1298              
00001BEE                          1299  *---------------------------------------------------------------------------*
00001BEE                          1300  * OP1011 : decode CMP/EOR/CMPA
00001BEE                          1301  *---------------------------------------------------------------------------*           
00001BEE  4280                    1302  OP1011      CLR.L   D0                
00001BF0  4281                    1303              CLR.L   D1            
00001BF2  4284                    1304              CLR.L   D4                   
00001BF4  227C 00000000           1305              MOVEA.L #0, A1               
00001BFA  2205                    1306              MOVE.L  D5,D1
00001BFC  EA99                    1307              ROR.L   #5,D1
00001BFE  0281 0000000E           1308              ANDI.L  #$E,D1
00001C04  0C01 0000               1309              CMPI.B  #$0,D1
00001C08  6700 0062               1310              BEQ     OP_CMP_B
00001C0C  0C01 0002               1311              CMPI.B  #$2,D1
00001C10  6700 0072               1312              BEQ     OP_CMP_W
00001C14  0C01 0004               1313              CMPI.B  #$4,D1
00001C18  6700 0082               1314              BEQ     OP_CMP_L
00001C1C  0C01 0008               1315              CMPI.B  #$8,D1
00001C20  6700 0092               1316              BEQ     OP_EOR_B
00001C24  0C01 000A               1317              CMPI.B  #$A,D1
00001C28  6700 009C               1318              BEQ     OP_EOR_W
00001C2C  0C01 000C               1319              CMPI.B  #$C,D1
00001C30  6700 00A6               1320              BEQ     OP_EOR_L  
00001C34  0C01 0006               1321              CMPI.B  #$6,D1
00001C38  6700 000E               1322              BEQ     OP_CMPA_W
00001C3C  0C01 000E               1323              CMPI.B  #$E,D1
00001C40  6700 0018               1324              BEQ     OP_CMPA_L 
00001C44                          1325  
00001C44  4EF8 14CE               1326              JMP     OP_DATA          
00001C48                          1327  
00001C48                          1328  *---------------------------------------------------------------------------*
00001C48                          1329  * OP_CMPA: display CMPA 
00001C48                          1330  *---------------------------------------------------------------------------
00001C48  43F9 00003906           1331  OP_CMPA_W   LEA     DISP_CMPA_W,A1
00001C4E  103C 000E               1332              MOVE.B  #14,D0
00001C52  4E4F                    1333              TRAP    #15
00001C54  183C 0001               1334              MOVE.B  #1,D4
00001C58  4E75                    1335              RTS
00001C5A                          1336  
00001C5A  43F9 00003910           1337  OP_CMPA_L   LEA     DISP_CMPA_L,A1
00001C60  103C 000E               1338              MOVE.B  #14,D0
00001C64  4E4F                    1339              TRAP    #15
00001C66  183C 0002               1340              MOVE.B  #2,D4
00001C6A  4E75                    1341              RTS
00001C6C                          1342  
00001C6C                          1343  *---------------------------------------------------------------------------*
00001C6C                          1344  * OP_CMP: display CMP and proceed to EA
00001C6C                          1345  *---------------------------------------------------------------------------*  
00001C6C  43F9 000038EB           1346  OP_CMP_B    LEA     DISP_CMP_B,A1
00001C72  103C 000E               1347              MOVE.B  #14,D0
00001C76  4E4F                    1348              TRAP    #15
00001C78  183C 0000               1349              MOVE.B  #0,D4
00001C7C  4EF9 00002474           1350              JMP     EA_GEN
00001C82                          1351  
00001C82  4E75                    1352              RTS
00001C84                          1353              
00001C84  43F9 000038F4           1354  OP_CMP_W    LEA     DISP_CMP_W,A1
00001C8A  103C 000E               1355              MOVE.B  #14,D0
00001C8E  4E4F                    1356              TRAP    #15
00001C90  183C 0001               1357              MOVE.B  #1,D4
00001C94  4EF9 00002474           1358              JMP     EA_GEN
00001C9A                          1359  
00001C9A  4E75                    1360              RTS
00001C9C                          1361              
00001C9C  43F9 000038FD           1362  OP_CMP_L    LEA     DISP_CMP_L,A1
00001CA2  103C 000E               1363              MOVE.B  #14,D0
00001CA6  4E4F                    1364              TRAP    #15
00001CA8  183C 0002               1365              MOVE.B  #2,D4
00001CAC  4EF9 00002474           1366              JMP     EA_GEN
00001CB2                          1367  
00001CB2  4E75                    1368              RTS
00001CB4                          1369              
00001CB4                          1370  *---------------------------------------------------------------------------*
00001CB4                          1371  * OP_EOR: display EOR
00001CB4                          1372  *---------------------------------------------------------------------------*  
00001CB4  43F9 000038D0           1373  OP_EOR_B    LEA     DISP_EOR_B,A1
00001CBA  103C 000E               1374              MOVE.B  #14,D0
00001CBE  4E4F                    1375              TRAP    #15
00001CC0  183C 0000               1376              MOVE.B  #0,D4
00001CC4  4E75                    1377              RTS
00001CC6                          1378              
00001CC6  43F9 000038D9           1379  OP_EOR_W    LEA     DISP_EOR_W,A1
00001CCC  103C 000E               1380              MOVE.B  #14,D0
00001CD0  4E4F                    1381              TRAP    #15
00001CD2  183C 0001               1382              MOVE.B  #1,D4
00001CD6  4E75                    1383              RTS
00001CD8                          1384              
00001CD8  43F9 000038E2           1385  OP_EOR_L    LEA     DISP_EOR_L,A1
00001CDE  103C 000E               1386              MOVE.B  #14,D0
00001CE2  4E4F                    1387              TRAP    #15
00001CE4  183C 0002               1388              MOVE.B  #2,D4
00001CE8  4E75                    1389              RTS    
00001CEA                          1390  
00001CEA                          1391  *---------------------------------------------------------------------------*
00001CEA                          1392  * OP1100: Decode and display MULS/AND and proceed to EA
00001CEA                          1393  *---------------------------------------------------------------------------* 
00001CEA  4280                    1394  OP1100      CLR.L   D0                 
00001CEC  4281                    1395              CLR.L   D1    
00001CEE  4284                    1396              CLR.L   D4                
00001CF0  227C 00000000           1397              MOVEA.L #0, A1             
00001CF6                          1398              
00001CF6  2205                    1399              MOVE.L  D5,D1
00001CF8  EA89                    1400              LSR.L   #5,D1
00001CFA  0281 0000000E           1401              ANDI.L  #$E,D1
00001D00  0C41 000E               1402              CMPI.W  #$E,D1
00001D04  6700 0036               1403              BEQ     OP_MULS
00001D08  0C41 0000               1404              CMPI.W  #$0,D1
00001D0C  6700 0042               1405              BEQ     OP_AND_B
00001D10  0C41 0002               1406              CMPI.W  #$2,D1
00001D14  6700 004C               1407              BEQ     OP_AND_W
00001D18  0C41 0004               1408              CMPI.W  #$4,D1
00001D1C  6700 0056               1409              BEQ     OP_AND_L
00001D20  0C41 0008               1410              CMPI.W  #$8,D1
00001D24  6700 002A               1411              BEQ     OP_AND_B
00001D28  0C41 000A               1412              CMPI.W  #$A,D1
00001D2C  6700 0034               1413              BEQ     OP_AND_W
00001D30  0C41 000C               1414              CMPI.W  #$C,D1
00001D34  6700 003E               1415              BEQ     OP_AND_L
00001D38                          1416  
00001D38  4EF8 14CE               1417              JMP     OP_DATA
00001D3C                          1418  
00001D3C  43F9 0000391A           1419  OP_MULS     LEA     DISP_MULS_W,A1
00001D42  103C 000E               1420              MOVE.B  #14,D0
00001D46  4E4F                    1421              TRAP    #15
00001D48  4EF9 00002428           1422              JMP     EA_ARITH
00001D4E  4E75                    1423              RTS
00001D50                          1424              
00001D50                          1425  OP_AND_B    
00001D50  43F9 00003924           1426              LEA     DISP_AND_B,A1
00001D56  103C 000E               1427              MOVE.B  #14,D0
00001D5A  4E4F                    1428              TRAP    #15
00001D5C  183C 0000               1429              MOVE.B  #0,D4
00001D60  4E75                    1430              RTS
00001D62                          1431  
00001D62                          1432  OP_AND_W
00001D62  43F9 0000392D           1433              LEA     DISP_AND_W,A1
00001D68  103C 000E               1434              MOVE.B  #14,D0
00001D6C  4E4F                    1435              TRAP    #15
00001D6E  183C 0001               1436              MOVE.B  #1,D4
00001D72  4E75                    1437              RTS
00001D74                          1438  
00001D74                          1439  OP_AND_L
00001D74  43F9 00003936           1440              LEA     DISP_AND_L,A1
00001D7A  103C 000E               1441              MOVE.B  #14,D0
00001D7E  4E4F                    1442              TRAP    #15
00001D80  183C 0002               1443              MOVE.B  #2,D4
00001D84  4E75                    1444              RTS
00001D86                          1445  
00001D86                          1446  *---------------------------------------------------------------------------*
00001D86                          1447  * OP1101: Decode ADD/ADDA
00001D86                          1448  *---------------------------------------------------------------------------* 
00001D86  4280                    1449  OP1101      CLR.L   D0                  
00001D88  4281                    1450              CLR.L   D1       
00001D8A  4284                    1451              CLR.L   D4                   
00001D8C  227C 00000000           1452              MOVEA.L #0, A1              
00001D92  2205                    1453              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
00001D94                          1454              
00001D94                          1455              *CLEAR D3
00001D94  4283                    1456              CLR.L   D3
00001D96                          1457              
00001D96                          1458              
00001D96                          1459              
00001D96                          1460              **INTEGRATING ADDA.W/.L INTO THIS CODE**
00001D96  2205                    1461              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00001D98                          1462              *BITS (INDEX 8) 
00001D98                          1463              *0 = ADD.B/W/L <EA>,Dn
00001D98                          1464              *1 = ADD.B/W/L Dn,<EA> 
00001D98  EC99                    1465              ROR.L   #6,D1
00001D9A  0281 00000007           1466              ANDI.L  #$07,D1                 *MASKS WITH 00000111
00001DA0  0C81 00000007           1467              CMPI.L  #$07,D1                 *IF EQUALS <ea>,Dn
00001DA6  6700 0010               1468              BEQ     OP1101_ADDA_L            *BRANCHES TO ADDA.L
00001DAA  0C81 00000003           1469              CMPI.L  #$03,D1                 *IF EQUALS <ea>,Dn
00001DB0  6700 0078               1470              BEQ     OP1101_ADDA_W           *BRANCHES TO ADDA.W
00001DB4  6000 00E6               1471              BRA     OP1101_DETERMINE_DN_EA_OR_EA_DN         *ELSE CHECK ADD.B/.W/.L
00001DB8                          1472              
00001DB8                          1473  OP1101_ADDA_L
00001DB8                          1474              *LOAD STACK WITH THIS OPMODE
00001DB8  6100 13A8               1475              BSR     PUSH_STACK
00001DBC  163C 0041               1476              MOVE.B  #'A',D3
00001DC0  6100 13A0               1477              BSR     PUSH_STACK
00001DC4  163C 0044               1478              MOVE.B  #'D',D3
00001DC8  6100 1398               1479              BSR     PUSH_STACK
00001DCC  163C 0044               1480              MOVE.B  #'D',D3
00001DD0  6100 1390               1481              BSR     PUSH_STACK
00001DD4  163C 0041               1482              MOVE.B  #'A',D3
00001DD8  6100 1388               1483              BSR     PUSH_STACK
00001DDC  163C 002E               1484              MOVE.B  #'.',D3
00001DE0  6100 1380               1485              BSR     PUSH_STACK
00001DE4  163C 004C               1486              MOVE.B  #'L',D3
00001DE8  6100 1378               1487              BSR     PUSH_STACK
00001DEC                          1488              
00001DEC                          1489             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001DEC  13FC 0000 00003A88      1490             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001DF4  13FC 0000 00003A89      1491             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001DFC                          1492             
00001DFC                          1493             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001DFC  13FC 00B9 00003A8B      1494             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001E04  13FC 0020 00003A8C      1495             MOVE.B   #$20,GET_SRC_START_END
00001E0C                          1496  
00001E0C                          1497              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001E0C  0285 0000FE3F           1498              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001E12  0685 00000040           1499              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00001E18                          1500       
00001E18                          1501              *PRINT <EA>,AN
00001E18  6100 0AAA               1502              BSR     GET_EA_EA_SRC       *GETS <ea>
00001E1C  163C 002C               1503              MOVE.B  #',',D3
00001E20  6100 1340               1504              BSR     PUSH_STACK                     
00001E24  6100 0ECE               1505              BSR     GET_EA_EA_DEST      *GETS Dn
00001E28                          1506  
00001E28                          1507              
00001E28                          1508              
00001E28  4E75                    1509              RTS
00001E2A                          1510  OP1101_ADDA_W
00001E2A                          1511              *LOAD STACK WITH THIS OPMODE
00001E2A  6100 1336               1512              BSR     PUSH_STACK
00001E2E  163C 0041               1513              MOVE.B  #'A',D3
00001E32  6100 132E               1514              BSR     PUSH_STACK
00001E36  163C 0044               1515              MOVE.B  #'D',D3
00001E3A  6100 1326               1516              BSR     PUSH_STACK
00001E3E  163C 0044               1517              MOVE.B  #'D',D3
00001E42  6100 131E               1518              BSR     PUSH_STACK
00001E46  163C 0041               1519              MOVE.B  #'A',D3
00001E4A  6100 1316               1520              BSR     PUSH_STACK
00001E4E  163C 002E               1521              MOVE.B  #'.',D3
00001E52  6100 130E               1522              BSR     PUSH_STACK
00001E56  163C 0057               1523              MOVE.B  #'W',D3
00001E5A  6100 1306               1524              BSR     PUSH_STACK
00001E5E                          1525              
00001E5E                          1526             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001E5E  13FC 0000 00003A88      1527             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001E66  13FC 0000 00003A89      1528             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001E6E                          1529             
00001E6E                          1530             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001E6E  13FC 00B9 00003A8B      1531             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001E76  13FC 0020 00003A8C      1532             MOVE.B   #$20,GET_SRC_START_END
00001E7E                          1533  
00001E7E                          1534              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001E7E  0285 0000FE3F           1535              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001E84  0685 00000040           1536              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00001E8A                          1537       
00001E8A                          1538              *PRINT <EA>,AN
00001E8A  6100 0A38               1539              BSR     GET_EA_EA_SRC       *GETS <ea>
00001E8E  163C 002C               1540              MOVE.B  #',',D3
00001E92  6100 12CE               1541              BSR     PUSH_STACK                     
00001E96  6100 0E5C               1542              BSR     GET_EA_EA_DEST      *GETS Dn
00001E9A                          1543  
00001E9A  4E75                    1544              RTS
00001E9C                          1545  
00001E9C                          1546  OP1101_DETERMINE_DN_EA_OR_EA_DN 
00001E9C                          1547              *LOAD STACK WITH THIS OPMODE
00001E9C  6100 12C4               1548              BSR     PUSH_STACK
00001EA0  163C 0041               1549              MOVE.B  #'A',D3
00001EA4  6100 12BC               1550              BSR     PUSH_STACK
00001EA8  163C 0044               1551              MOVE.B  #'D',D3
00001EAC  6100 12B4               1552              BSR     PUSH_STACK
00001EB0  163C 0044               1553              MOVE.B  #'D',D3
00001EB4  6100 12AC               1554              BSR     PUSH_STACK
00001EB8  163C 002E               1555              MOVE.B  #'.',D3
00001EBC  6100 12A4               1556              BSR     PUSH_STACK
00001EC0                          1557              
00001EC0  2205                    1558              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00001EC2                          1559              
00001EC2                          1560              *BITS (INDEX 8) 
00001EC2                          1561              *0 = ADD.B/W/L <EA>,Dn
00001EC2                          1562              *1 = ADD.B/W/L Dn,<EA> 
00001EC2  E099                    1563              ROR.L   #8,D1
00001EC4  0281 00000001           1564              ANDI.L  #$01,D1     *MASKS WITH 00000001
00001ECA  0C81 00000000           1565              CMPI.L  #$00,D1     *IF EQUALS <ea>,Dn
00001ED0  6700 0102               1566              BEQ     OP1101_EA_DN
00001ED4                          1567              *else procede to Dn_EA
00001ED4                          1568              
00001ED4                          1569  OP1101_DN_EA
00001ED4                          1570              *BITS (7 TO 6) 
00001ED4                          1571              *00 = .B
00001ED4                          1572              *01 = .W
00001ED4                          1573              *10 = .L 
00001ED4  2205                    1574              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00001ED6  EC99                    1575              ROR.L   #6,D1
00001ED8  0281 00000003           1576              ANDI.L  #$03,D1
00001EDE  0C81 00000000           1577              CMPI.L  #$00,D1 *EQUALS .B
00001EE4  6700 0016               1578              BEQ     OP1101_PRINT_B2
00001EE8  0C81 00000001           1579              CMPI.L  #$01,D1 *EQUALS .W
00001EEE  6700 0054               1580              BEQ     OP1101_PRINT_W2
00001EF2  0C81 00000002           1581              CMPI.L  #$02,D1 *EQUALS .L
00001EF8  6700 0092               1582              BEQ     OP1101_PRINT_L2
00001EFC                          1583  OP1101_PRINT_B2
00001EFC                          1584              *PUSH 'B'
00001EFC  163C 0042               1585              MOVE.B  #'B',D3
00001F00  6100 1260               1586              BSR     PUSH_STACK
00001F04                          1587             
00001F04                          1588              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001F04  13FC 0002 00003A88      1589             MOVE.B   #$02,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001F0C  13FC 0083 00003A89      1590             MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001F14                          1591             
00001F14                          1592             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001F14  13FC 00B9 00003A8B      1593             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001F1C  13FC 0020 00003A8C      1594             MOVE.B   #$20,GET_SRC_START_END
00001F24                          1595  
00001F24                          1596              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001F24  0285 0000FE3F           1597              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001F2A  0685 00000000           1598              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00001F30                          1599       
00001F30  6100 0DC2               1600              BSR     GET_EA_EA_DEST      *GETS Dn
00001F34  163C 002C               1601              MOVE.B  #',',D3
00001F38  6100 1228               1602              BSR     PUSH_STACK                     
00001F3C  6100 0986               1603              BSR     GET_EA_EA_SRC       *GETS <ea>
00001F40                          1604  
00001F40                          1605              
00001F40  6000 0192               1606              BRA     OP1101_ADD_RETURN
00001F44                          1607  OP1101_PRINT_W2
00001F44  163C 0057               1608              MOVE.B  #'W',D3
00001F48  6100 1218               1609              BSR     PUSH_STACK
00001F4C                          1610  
00001F4C                          1611              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001F4C  13FC 0000 00003A88      1612              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001F54  13FC 0083 00003A89      1613              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001F5C                          1614             
00001F5C                          1615              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001F5C  13FC 00B9 00003A8B      1616              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001F64  13FC 0020 00003A8C      1617              MOVE.B   #$20,GET_SRC_START_END
00001F6C                          1618  
00001F6C                          1619              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001F6C  0285 0000FE3F           1620              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001F72  0685 00000000           1621              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00001F78                          1622  
00001F78                          1623        
00001F78  6100 0D7A               1624              BSR     GET_EA_EA_DEST      *GETS Dn
00001F7C  163C 002C               1625              MOVE.B  #',',D3
00001F80  6100 11E0               1626              BSR     PUSH_STACK               
00001F84  6100 093E               1627              BSR     GET_EA_EA_SRC       *GETS <ea>       
00001F88                          1628  
00001F88                          1629  
00001F88                          1630  
00001F88  6000 014A               1631              BRA     OP1101_ADD_RETURN
00001F8C                          1632  OP1101_PRINT_L2 
00001F8C  163C 004C               1633              MOVE.B  #'L',D3
00001F90  6100 11D0               1634              BSR     PUSH_STACK
00001F94                          1635              
00001F94                          1636              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001F94  13FC 0000 00003A88      1637              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001F9C  13FC 0083 00003A89      1638              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001FA4                          1639             
00001FA4                          1640              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001FA4  13FC 00B9 00003A8B      1641              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001FAC  13FC 0020 00003A8C      1642              MOVE.B   #$20,GET_SRC_START_END
00001FB4                          1643  
00001FB4                          1644             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001FB4  0285 0000FE3F           1645              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001FBA  0685 00000000           1646              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00001FC0                          1647  
00001FC0                          1648               
00001FC0  6100 0D32               1649              BSR     GET_EA_EA_DEST       *GETS Dn
00001FC4  163C 002C               1650              MOVE.B  #',',D3
00001FC8  6100 1198               1651              BSR     PUSH_STACK          
00001FCC  6100 08F6               1652              BSR     GET_EA_EA_SRC        *GETS <ea>
00001FD0                          1653  
00001FD0  6000 0102               1654              BRA     OP1101_ADD_RETURN
00001FD4                          1655              
00001FD4                          1656  OP1101_EA_DN           
00001FD4                          1657              *BITS (7 TO 6) 
00001FD4                          1658              *00 = .B
00001FD4                          1659              *01 = .W
00001FD4                          1660              *10 = .L 
00001FD4  2205                    1661              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00001FD6  EC99                    1662              ROR.L   #6,D1
00001FD8  0281 00000003           1663              ANDI.L  #$03,D1
00001FDE  0C81 00000000           1664              CMPI.L  #$00,D1 *EQUALS .B
00001FE4  6700 0016               1665              BEQ     OP1101_PRINT_B
00001FE8  0C81 00000001           1666              CMPI.L  #$01,D1 *EQUALS .W
00001FEE  6700 0054               1667              BEQ     OP1101_PRINT_W
00001FF2  0C81 00000002           1668              CMPI.L  #$02,D1 *EQUALS .L
00001FF8  6700 0092               1669              BEQ     OP1101_PRINT_L
00001FFC                          1670  OP1101_PRINT_B
00001FFC  163C 0042               1671              MOVE.B  #'B',D3
00002000  6100 1160               1672              BSR     PUSH_STACK
00002004                          1673                
00002004                          1674              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002004  13FC 0002 00003A88      1675              MOVE.B   #$02,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000200C  13FC 0002 00003A89      1676              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002014                          1677             
00002014                          1678              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002014  13FC 00B9 00003A8B      1679              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000201C  13FC 0020 00003A8C      1680              MOVE.B   #$20,GET_SRC_START_END
00002024                          1681  
00002024                          1682             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002024  0285 0000FE3F           1683              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000202A  0685 00000000           1684              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002030                          1685  
00002030                          1686              
00002030  6100 0892               1687              BSR     GET_EA_EA_SRC      *GETS <ea>
00002034  163C 002C               1688              MOVE.B  #',',D3
00002038  6100 1128               1689              BSR     PUSH_STACK          
0000203C  6100 0CB6               1690              BSR     GET_EA_EA_DEST       *GETS Dn
00002040                          1691              
00002040  6000 0092               1692              BRA     OP1101_ADD_RETURN
00002044                          1693  OP1101_PRINT_W
00002044  163C 0057               1694              MOVE.B  #'W',D3
00002048  6100 1118               1695              BSR     PUSH_STACK
0000204C                          1696  
0000204C                          1697              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000204C  13FC 0000 00003A88      1698              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002054  13FC 0000 00003A89      1699              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000205C                          1700             
0000205C                          1701              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000205C  13FC 00B9 00003A8B      1702              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002064  13FC 0020 00003A8C      1703              MOVE.B   #$20,GET_SRC_START_END
0000206C                          1704  
0000206C                          1705             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000206C  0285 0000FE3F           1706              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002072  0685 00000000           1707              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002078                          1708  
00002078                          1709              
00002078  6100 084A               1710              BSR     GET_EA_EA_SRC      *GETS <ea>
0000207C  163C 002C               1711              MOVE.B  #',',D3
00002080  6100 10E0               1712              BSR     PUSH_STACK
00002084  6100 0C6E               1713              BSR     GET_EA_EA_DEST       *GETS Dn    
00002088                          1714              
00002088  6000 004A               1715              BRA     OP1101_ADD_RETURN
0000208C                          1716  OP1101_PRINT_L 
0000208C  163C 004C               1717              MOVE.B  #'L',D3
00002090  6100 10D0               1718              BSR     PUSH_STACK
00002094                          1719              
00002094                          1720              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002094  13FC 0000 00003A88      1721              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000209C  13FC 0000 00003A89      1722              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000020A4                          1723             
000020A4                          1724              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000020A4  13FC 00B9 00003A8B      1725              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000020AC  13FC 0020 00003A8C      1726              MOVE.B   #$20,GET_SRC_START_END
000020B4                          1727  
000020B4                          1728              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000020B4  0285 0000FE3F           1729              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000020BA  0685 00000000           1730              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
000020C0                          1731  
000020C0                          1732                     
000020C0  6100 0802               1733              BSR     GET_EA_EA_SRC      *GETS <ea>
000020C4  163C 002C               1734              MOVE.B  #',',D3
000020C8  6100 1098               1735              BSR     PUSH_STACK                  
000020CC  6100 0C26               1736              BSR     GET_EA_EA_DEST       *GETS Dn    
000020D0                          1737  
000020D0                          1738              
000020D0  6000 0002               1739              BRA     OP1101_ADD_RETURN
000020D4                          1740              
000020D4                          1741  OP1101_ADD_RETURN
000020D4  4E75                    1742              RTS
000020D6                          1743              
000020D6                          1744              *ADDW
000020D6  0C01 0006               1745              CMPI.B  #$6,D1
000020DA  6700 0056               1746              BEQ     OP_ADDA_W
000020DE  0C01 000E               1747              CMPI.B  #$E,D1
000020E2  6700 0066               1748              BEQ     OP_ADDA_L 
000020E6                          1749  
000020E6  4EF8 14CE               1750              JMP     OP_DATA  
000020EA                          1751            
000020EA                          1752  *---------------------------------------------------------------------------*
000020EA                          1753  * OP_ADD: display ADD and proceed to EA
000020EA                          1754  *---------------------------------------------------------------------------*  
000020EA  43F9 0000393F           1755  OP_ADD_B    LEA     DISP_ADD_B,A1
000020F0  103C 000E               1756              MOVE.B  #14,D0
000020F4  4E4F                    1757              TRAP    #15
000020F6  183C 0000               1758              MOVE.B  #0,D4
000020FA  4EF9 00002474           1759              JMP     EA_GEN
00002100                          1760  
00002100  4E75                    1761              RTS
00002102                          1762  
00002102  43F9 00003948           1763  OP_ADD_W    LEA     DISP_ADD_W,A1
00002108  103C 000E               1764              MOVE.B  #14,D0
0000210C  4E4F                    1765              TRAP    #15
0000210E  183C 0001               1766              MOVE.B  #1,D4
00002112  4EF9 00002474           1767              JMP     EA_GEN
00002118                          1768  
00002118  4E75                    1769              RTS
0000211A                          1770  
0000211A  43F9 00003951           1771  OP_ADD_L    LEA     DISP_ADD_L,A1
00002120  103C 000E               1772              MOVE.B  #14,D0
00002124  4E4F                    1773              TRAP    #15
00002126  183C 0002               1774              MOVE.B  #2,D4
0000212A  4EF9 00002474           1775              JMP     EA_GEN
00002130                          1776  
00002130  4E75                    1777              RTS
00002132                          1778  
00002132                          1779  *---------------------------------------------------------------------------*
00002132                          1780  * OP_ADDA: display ADDA and proceed to EA
00002132                          1781  *---------------------------------------------------------------------------*  
00002132  43F9 0000395A           1782  OP_ADDA_W   LEA     DISP_ADDA_W,A1
00002138  103C 000E               1783              MOVE.B  #14,D0
0000213C  4E4F                    1784              TRAP    #15
0000213E  183C 0001               1785              MOVE.B  #1,D4
00002142  4EF9 00002474           1786              JMP     EA_GEN
00002148                          1787  
00002148  4E75                    1788              RTS
0000214A                          1789  
0000214A  43F9 00003964           1790  OP_ADDA_L   LEA     DISP_ADDA_L,A1
00002150  103C 000E               1791              MOVE.B  #14,D0
00002154  4E4F                    1792              TRAP    #15
00002156  183C 0002               1793              MOVE.B  #2,D4
0000215A  4EF9 00002474           1794              JMP     EA_GEN
00002160                          1795  
00002160  4E75                    1796              RTS
00002162                          1797              
00002162                          1798  *---------------------------------------------------------------------------*
00002162                          1799  * OP1110: LSR/LSL/ASR/ASL/ROL/ROR
00002162                          1800  *---------------------------------------------------------------------------* 
00002162  4280                    1801  OP1110      CLR.L   D0                  
00002164  4281                    1802              CLR.L   D1   
00002166  4284                    1803              CLR.L   D4                   
00002168  227C 00000000           1804              MOVEA.L #0, A1                 
0000216E  2205                    1805              MOVE.L  D5,D1
00002170                          1806              
00002170                          1807              * check for LSX
00002170  E699                    1808              ROR.L   #3,D1
00002172  0281 00000001           1809              ANDI.L  #$1,D1
00002178  0C01 0001               1810              CMPI.B  #1,D1
0000217C  6700 002E               1811              BEQ     OP_LSX
00002180                          1812              
00002180                          1813              * reset D1 and check for ASX
00002180  4281                    1814              CLR.L   D1
00002182  2205                    1815              MOVE.L  D5,D1
00002184  E699                    1816              ROR.L   #3,D1
00002186  0281 00000001           1817              ANDI.L  #$1,D1
0000218C  0C01 0000               1818              CMPI.B  #0,D1
00002190  6700 0032               1819              BEQ     OP_ASX
00002194                          1820  
00002194                          1821              * reset D1 and check for ROX
00002194  4281                    1822              CLR.L   D1
00002196  2205                    1823              MOVE.L  D5,D1
00002198  E699                    1824              ROR.L   #3,D1
0000219A  0281 00000001           1825              ANDI.L  #$1,D1
000021A0  0C01 0003               1826              CMPI.B  #3,D1
000021A4  6700 0036               1827              BEQ     OP_ROX
000021A8                          1828              
000021A8  4EF8 14CE               1829              JMP     OP_DATA
000021AC                          1830  
000021AC                          1831  *---------------------------------------------------------------------------*
000021AC                          1832  * OP_LSX: process LSR/LSL
000021AC                          1833  *---------------------------------------------------------------------------*            
000021AC  EA99                    1834  OP_LSX      ROR.L   #5,D1
000021AE  0281 00000001           1835              ANDI.L  #$1,D1
000021B4  0C01 0000               1836              CMPI.B  #0,D1
000021B8  6700 003A               1837              BEQ     OP_LSR
000021BC  0C01 0001               1838              CMPI.B  #1,D1
000021C0  6700 008C               1839              BEQ     OP_LSL
000021C4                          1840              
000021C4                          1841  *---------------------------------------------------------------------------*
000021C4                          1842  * OP_ASX: process ASR/ASL
000021C4                          1843  *---------------------------------------------------------------------------*  
000021C4  EA99                    1844  OP_ASX      ROR.L   #5,D1
000021C6  0281 00000001           1845              ANDI.L  #$1,D1
000021CC  0C01 0000               1846              CMPI.B  #0,D1
000021D0  6700 00D6               1847              BEQ     OP_ASR
000021D4  0C01 0001               1848              CMPI.B  #1,D1
000021D8  6700 0128               1849              BEQ     OP_ASL
000021DC                          1850              
000021DC                          1851  *---------------------------------------------------------------------------*
000021DC                          1852  * OP_ROX: process ROR/ROL
000021DC                          1853  *---------------------------------------------------------------------------*  
000021DC  EA99                    1854  OP_ROX      ROR.L   #5,D1
000021DE  0281 00000001           1855              ANDI.L  #$1,D1
000021E4  0C01 0000               1856              CMPI.B  #0,D1
000021E8  6700 0172               1857              BEQ     OP_ROR
000021EC  0C01 0001               1858              CMPI.B  #1,D1
000021F0  6700 01C4               1859              BEQ     OP_ROL
000021F4                          1860  
000021F4                          1861  *---------------------------------------------------------------------------*
000021F4                          1862  * OP_LSR: decode and display LSR
000021F4                          1863  *---------------------------------------------------------------------------*        
000021F4  E599                    1864  OP_LSR      ROL.L   #2,D1
000021F6  0281 00000003           1865              ANDI.L  #$3,D1
000021FC  0C01 0000               1866              CMPI.B  #0,D1
00002200  6700 0016               1867              BEQ     OP_LSR_B
00002204  0C01 0001               1868              CMPI.B  #$1,D1
00002208  6700 0032               1869              BEQ     OP_LSR_W
0000220C  0C01 0002               1870              CMPI.B  #$2,D1
00002210  6700 0018               1871              BEQ     OP_LSR_L
00002214                          1872              
00002214  4EF8 14CE               1873              JMP     OP_DATA
00002218                          1874  
00002218  43F9 0000396E           1875  OP_LSR_B    LEA     DISP_LSR_B,A1
0000221E  103C 000E               1876              MOVE.B  #14,D0
00002222  4E4F                    1877              TRAP    #15
00002224  183C 0000               1878              MOVE.B  #0,D4
00002228  4E75                    1879              RTS
0000222A                          1880  
0000222A  43F9 00003992           1881  OP_LSR_L    LEA     DISP_LSR_L,A1
00002230  103C 000E               1882              MOVE.B  #14,D0
00002234  4E4F                    1883              TRAP    #15
00002236  183C 0002               1884              MOVE.B  #2,D4
0000223A  4E75                    1885              RTS
0000223C                          1886  
0000223C  43F9 00003980           1887  OP_LSR_W    LEA     DISP_LSR_W,A1
00002242  103C 000E               1888              MOVE.B  #14,D0
00002246  4E4F                    1889              TRAP    #15
00002248  183C 0001               1890              MOVE.B  #1,D4
0000224C  4E75                    1891              RTS
0000224E                          1892   
0000224E                          1893  *---------------------------------------------------------------------------*
0000224E                          1894  * OP_LSL: decode and display LSL
0000224E                          1895  *---------------------------------------------------------------------------*             
0000224E  E599                    1896  OP_LSL      ROL.L   #2,D1
00002250  0281 00000003           1897              ANDI.L  #$3,D1
00002256  0C01 0000               1898              CMPI.B  #0,D1
0000225A  6700 0016               1899              BEQ     OP_LSL_B
0000225E  0C01 0001               1900              CMPI.B  #$1,D1
00002262  6700 0032               1901              BEQ     OP_LSL_W
00002266  0C01 0002               1902              CMPI.B  #$2,D1
0000226A  6700 0018               1903              BEQ     OP_LSL_L
0000226E                          1904              
0000226E  4EF8 14CE               1905              JMP OP_DATA
00002272                          1906  
00002272  43F9 00003977           1907  OP_LSL_B    LEA     DISP_LSL_B,A1
00002278  103C 000E               1908              MOVE.B  #14,D0
0000227C  4E4F                    1909              TRAP    #15
0000227E  183C 0000               1910              MOVE.B  #0,D4
00002282  4E75                    1911              RTS
00002284                          1912  
00002284  43F9 0000399B           1913  OP_LSL_L    LEA     DISP_LSL_L,A1
0000228A  103C 000E               1914              MOVE.B  #14,D0
0000228E  4E4F                    1915              TRAP    #15
00002290  183C 0002               1916              MOVE.B  #2,D4
00002294  4E75                    1917              RTS
00002296                          1918  
00002296  43F9 00003989           1919  OP_LSL_W    LEA     DISP_LSL_W,A1
0000229C  103C 000E               1920              MOVE.B  #14,D0
000022A0  4E4F                    1921              TRAP    #15
000022A2  183C 0001               1922              MOVE.B  #1,D4
000022A6  4E75                    1923              RTS
000022A8                          1924   
000022A8                          1925  *---------------------------------------------------------------------------*
000022A8                          1926  * OP_ASR: decode and display ASR
000022A8                          1927  *---------------------------------------------------------------------------*             
000022A8  E599                    1928  OP_ASR      ROL.L   #2,D1
000022AA  0281 00000003           1929              ANDI.L  #$3,D1
000022B0  0C01 0000               1930              CMPI.B  #0,D1
000022B4  6700 0016               1931              BEQ     OP_ASR_B
000022B8  0C01 0001               1932              CMPI.B  #$1,D1
000022BC  6700 0032               1933              BEQ     OP_ASR_W
000022C0  0C01 0002               1934              CMPI.B  #$2,D1
000022C4  6700 0018               1935              BEQ     OP_ASR_L
000022C8                          1936              
000022C8  4EF8 14CE               1937              JMP OP_DATA
000022CC                          1938  
000022CC  43F9 000039A4           1939  OP_ASR_B    LEA     DISP_ASR_B,A1
000022D2  103C 000E               1940              MOVE.B  #14,D0
000022D6  4E4F                    1941              TRAP    #15
000022D8  183C 0000               1942              MOVE.B  #0,D4
000022DC  4E75                    1943              RTS
000022DE                          1944  
000022DE  43F9 000039C8           1945  OP_ASR_L    LEA     DISP_ASR_L,A1
000022E4  103C 000E               1946              MOVE.B  #14,D0
000022E8  4E4F                    1947              TRAP    #15
000022EA  183C 0002               1948              MOVE.B  #2,D4
000022EE  4E75                    1949              RTS
000022F0                          1950  
000022F0  43F9 000039B6           1951  OP_ASR_W    LEA     DISP_ASR_W,A1
000022F6  103C 000E               1952              MOVE.B  #14,D0
000022FA  4E4F                    1953              TRAP    #15
000022FC  183C 0001               1954              MOVE.B  #1,D4
00002300  4E75                    1955              RTS
00002302                          1956       
00002302                          1957  *---------------------------------------------------------------------------*
00002302                          1958  * OP_ASL: decode and display ASL
00002302                          1959  *---------------------------------------------------------------------------*         
00002302  E599                    1960  OP_ASL      ROL.L   #2,D1
00002304  0281 00000003           1961              ANDI.L  #$3,D1
0000230A  0C01 0000               1962              CMPI.B  #0,D1
0000230E  6700 0016               1963              BEQ     OP_ASL_B
00002312  0C01 0001               1964              CMPI.B  #$1,D1
00002316  6700 0032               1965              BEQ     OP_ASL_W
0000231A  0C01 0002               1966              CMPI.B  #$2,D1
0000231E  6700 0018               1967              BEQ     OP_ASL_L
00002322                          1968              
00002322  4EF8 14CE               1969              JMP OP_DATA
00002326                          1970  
00002326  43F9 000039AD           1971  OP_ASL_B    LEA     DISP_ASL_B,A1
0000232C  103C 000E               1972              MOVE.B  #14,D0
00002330  4E4F                    1973              TRAP    #15
00002332  183C 0000               1974              MOVE.B  #0,D4
00002336  4E75                    1975              RTS
00002338                          1976  
00002338  43F9 000039D1           1977  OP_ASL_L    LEA     DISP_ASL_L,A1
0000233E  103C 000E               1978              MOVE.B  #14,D0
00002342  4E4F                    1979              TRAP    #15
00002344  183C 0002               1980              MOVE.B  #2,D4
00002348  4E75                    1981              RTS
0000234A                          1982  
0000234A  43F9 000039BF           1983  OP_ASL_W    LEA     DISP_ASL_W,A1
00002350  103C 000E               1984              MOVE.B  #14,D0
00002354  4E4F                    1985              TRAP    #15
00002356  183C 0001               1986              MOVE.B  #1,D4
0000235A  4E75                    1987              RTS
0000235C                          1988   
0000235C                          1989  *---------------------------------------------------------------------------*
0000235C                          1990  * OP_ROR: decode and display ROR
0000235C                          1991  *---------------------------------------------------------------------------*             
0000235C  E599                    1992  OP_ROR      ROL.L   #2,D1
0000235E  0281 00000003           1993              ANDI.L  #$3,D1
00002364  0C01 0000               1994              CMPI.B  #0,D1
00002368  6700 0016               1995              BEQ     OP_ROR_B
0000236C  0C01 0001               1996              CMPI.B  #$1,D1
00002370  6700 0032               1997              BEQ     OP_ROR_W
00002374  0C01 0002               1998              CMPI.B  #$2,D1
00002378  6700 0018               1999              BEQ     OP_ROR_L
0000237C                          2000              
0000237C  4EF8 14CE               2001              JMP OP_DATA
00002380                          2002  
00002380  43F9 000039DA           2003  OP_ROR_B    LEA     DISP_ROR_B,A1
00002386  103C 000E               2004              MOVE.B  #14,D0
0000238A  4E4F                    2005              TRAP    #15
0000238C  183C 0000               2006              MOVE.B  #0,D4
00002390  4E75                    2007              RTS
00002392                          2008  
00002392  43F9 000039FE           2009  OP_ROR_L    LEA     DISP_ROR_L,A1
00002398  103C 000E               2010              MOVE.B  #14,D0
0000239C  4E4F                    2011              TRAP    #15
0000239E  183C 0002               2012              MOVE.B  #2,D4
000023A2  4E75                    2013              RTS
000023A4                          2014  
000023A4  43F9 000039EC           2015  OP_ROR_W    LEA     DISP_ROR_W,A1
000023AA  103C 000E               2016              MOVE.B  #14,D0
000023AE  4E4F                    2017              TRAP    #15
000023B0  183C 0001               2018              MOVE.B  #1,D4
000023B4  4E75                    2019              RTS
000023B6                          2020  
000023B6                          2021  *---------------------------------------------------------------------------*
000023B6                          2022  * OP_ROL: decode and display ROL
000023B6                          2023  *---------------------------------------------------------------------------*             
000023B6  E599                    2024  OP_ROL      ROL.L   #2,D1
000023B8  0281 00000003           2025              ANDI.L  #$3,D1
000023BE  0C01 0000               2026              CMPI.B  #0,D1
000023C2  6700 0016               2027              BEQ     OP_ROL_B
000023C6  0C01 0001               2028              CMPI.B  #$1,D1
000023CA  6700 0032               2029              BEQ     OP_ROL_W
000023CE  0C01 0002               2030              CMPI.B  #$2,D1
000023D2  6700 0018               2031              BEQ     OP_ROL_L
000023D6                          2032              
000023D6  4EF8 14CE               2033              JMP OP_DATA
000023DA                          2034  
000023DA                          2035  
000023DA  43F9 000039E3           2036  OP_ROL_B    LEA     DISP_ROL_B,A1
000023E0  103C 000E               2037              MOVE.B  #14,D0
000023E4  4E4F                    2038              TRAP    #15
000023E6  183C 0000               2039              MOVE.B  #0,D4
000023EA  4E75                    2040              RTS
000023EC                          2041  
000023EC  43F9 00003A07           2042  OP_ROL_L    LEA     DISP_ROL_L,A1
000023F2  103C 000E               2043              MOVE.B  #14,D0
000023F6  4E4F                    2044              TRAP    #15
000023F8  183C 0002               2045              MOVE.B  #2,D4
000023FC  4E75                    2046              RTS
000023FE                          2047  
000023FE  43F9 000039F5           2048  OP_ROL_W    LEA     DISP_ROL_W,A1
00002404  103C 000E               2049              MOVE.B  #14,D0
00002408  4E4F                    2050              TRAP    #15
0000240A  183C 0001               2051              MOVE.B  #1,D4
0000240E  4E75                    2052              RTS
00002410                          2053              
00002410                          2054  *---------------------------------------------------------------------------*
00002410                          2055  * OP1111 : Special reserved
00002410                          2056  *---------------------------------------------------------------------------*           
00002410  4EF8 14CE               2057  OP1111      JMP     OP_DATA
00002414                          2058  
00002414                          2059  *---------------------------------------------------------------------------*
00002414                          2060  * EA_NOSRC: decode and display effective addresses for NEG/JSR
00002414                          2061  *---------------------------------------------------------------------------*
00002414                          2062  EA_NOSRC    
00002414  4EB9 000024D2           2063              JSR     SRC_MODE
0000241A  43F9 000036D4           2064              LEA     ENDLINE_M,A1
00002420  103C 000E               2065              MOVE.B  #14,D0
00002424  4E4F                    2066              TRAP    #15
00002426  4E75                    2067              RTS
00002428                          2068              
00002428                          2069  *---------------------------------------------------------------------------*
00002428                          2070  * EA_ARITH: decode and display effective addresses for DIVS/MULS
00002428                          2071  *---------------------------------------------------------------------------*
00002428                          2072  EA_ARITH
00002428  4EB9 000024D2           2073              JSR     SRC_MODE
0000242E  43F9 00003A4E           2074              LEA     DISP_D,A1
00002434  103C 000E               2075              MOVE.B  #14,D0
00002438  4E4F                    2076              TRAP    #15
0000243A  4EB9 0000275E           2077              JSR     DEST_REGISTER
00002440  43F9 000036D4           2078              LEA     ENDLINE_M,A1
00002446  103C 000E               2079              MOVE.B  #14,D0
0000244A  4E4F                    2080              TRAP    #15
0000244C  4E75                    2081              RTS
0000244E                          2082              
0000244E                          2083  *---------------------------------------------------------------------------*
0000244E                          2084  * EA_MOVEA: decode and display effective addresses for MOVEA/LEA
0000244E                          2085  *---------------------------------------------------------------------------*
0000244E                          2086  EA_MOVEA
0000244E  4EB9 000024D2           2087              JSR     SRC_MODE
00002454  43F9 00003A5F           2088              LEA     DISP_AOP,A1
0000245A  103C 000E               2089              MOVE.B  #14,D0
0000245E  4E4F                    2090              TRAP    #15
00002460  4EB9 0000275E           2091              JSR     DEST_REGISTER
00002466  43F9 00003A5D           2092              LEA     DISP_CP,A1
0000246C  103C 000D               2093              MOVE.B  #13,D0
00002470  4E4F                    2094              TRAP    #15
00002472  4E75                    2095              RTS
00002474                          2096              
00002474                          2097  *---------------------------------------------------------------------------*
00002474                          2098  * EA_GEN: decode and display effective addresses for MOVE
00002474                          2099  *---------------------------------------------------------------------------*
00002474                          2100  EA_GEN          
00002474                          2101              * retrieve/display source mode/register
00002474  4EB9 000024D2           2102              JSR     SRC_MODE
0000247A                          2103              
0000247A                          2104              * retrieve/display destination mode/register
0000247A  4EB9 0000248E           2105              JSR     DEST_MODE
00002480                          2106              
00002480  43F9 000036D4           2107              LEA     ENDLINE_M,A1
00002486  103C 000E               2108              MOVE.B  #14,D0
0000248A  4E4F                    2109              TRAP    #15
0000248C                          2110              
0000248C  4E75                    2111              RTS
0000248E                          2112  
0000248E                          2113  *---------------------------------------------------------------------------*
0000248E                          2114  * DEST_MODE: decode and display destination mode (bit 8 - 6)
0000248E                          2115  *---------------------------------------------------------------------------*           
0000248E                          2116  DEST_MODE   
0000248E                          2117              * clear registers to store temp data
0000248E  4280                    2118              CLR.L   D0                      
00002490  4281                    2119              CLR.L   D1                      
00002492  207C 00000000           2120              MOVEA.L #0, A0                  
00002498  227C 00000000           2121              MOVEA.L #0, A1                  
0000249E  2205                    2122              MOVE.L  D5,D1
000024A0  EC89                    2123              LSR.L   #6,D1
000024A2  0281 00000007           2124              ANDI.L  #$7,D1
000024A8  0C01 0000               2125              CMPI.B  #0,D1   * Dn
000024AC  6700 0082               2126              BEQ     D_MODE000
000024B0  0C01 0002               2127              CMPI.B  #2,D1   * (An)
000024B4  6700 00C2               2128              BEQ     D_MODE010
000024B8  0C01 0003               2129              CMPI.B  #3,D1   * (An)+
000024BC  6700 011A               2130              BEQ     D_MODE011
000024C0  0C01 0004               2131              CMPI.B  #4,D1   * -(An)
000024C4  6700 0132               2132              BEQ     D_MODE100
000024C8  0C01 0007               2133              CMPI.B  #7,D1  * abs
000024CC  6700 017C               2134              BEQ     D_MODE111 
000024D0  4E75                    2135              RTS
000024D2                          2136  
000024D2                          2137  *---------------------------------------------------------------------------*
000024D2                          2138  * SRC_MODE: decode and display source mode (bit 5 - 3)
000024D2                          2139  *---------------------------------------------------------------------------*  
000024D2                          2140  SRC_MODE    
000024D2                          2141              * clear registers to store temp data
000024D2  4280                    2142              CLR.L   D0                      
000024D4  4281                    2143              CLR.L   D1                      
000024D6  207C 00000000           2144              MOVEA.L #0, A0                  
000024DC  227C 00000000           2145              MOVEA.L #0, A1                  
000024E2  2205                    2146              MOVE.L  D5,D1
000024E4  E489                    2147              LSR.L   #2,D1
000024E6  0281 0000000E           2148              ANDI.L  #$E,D1
000024EC                          2149              
000024EC  0C01 0000               2150              CMPI.B  #0,D1   * Dn
000024F0  6700 002A               2151              BEQ     MODE000
000024F4  0C01 0002               2152              CMPI.B  #2,D1   * An 
000024F8  6700 004A               2153              BEQ     MODE001
000024FC  0C01 0004               2154              CMPI.B  #4,D1   * (An)
00002500  6700 0056               2155              BEQ     MODE010
00002504  0C01 0006               2156              CMPI.B  #6,D1   * (An)+
00002508  6700 008E               2157              BEQ     MODE011
0000250C  0C01 0008               2158              CMPI.B  #8,D1   * -(An)
00002510  6700 00A6               2159              BEQ     MODE100
00002514  0C01 000F               2160              CMPI.B  #15,D1  * abs/immediate
00002518  6700 00FE               2161              BEQ     MODE111 
0000251C                          2162        
0000251C                          2163  *---------------------------------------------------------------------------*
0000251C                          2164  * MODE000: decode and display source mode Dn
0000251C                          2165  *---------------------------------------------------------------------------*           
0000251C                          2166  MODE000     *Dn
0000251C  43F9 00003A4E           2167              LEA     DISP_D,A1
00002522  103C 000E               2168              MOVE.B  #14,D0
00002526  4E4F                    2169              TRAP    #15
00002528  4EB9 000027BA           2170              JSR     SRC_REGISTER
0000252E  4E75                    2171              RTS
00002530                          2172  
00002530                          2173  *---------------------------------------------------------------------------*
00002530                          2174  * D_MODE000: decode and display dest mode Dn
00002530                          2175  *---------------------------------------------------------------------------*
00002530                          2176  D_MODE000     *Dn
00002530  43F9 00003A4E           2177              LEA     DISP_D,A1
00002536  103C 000E               2178              MOVE.B  #14,D0
0000253A  4E4F                    2179              TRAP    #15
0000253C  4EB9 0000275E           2180              JSR     DEST_REGISTER
00002542  4E75                    2181              RTS
00002544                          2182  
00002544                          2183  *---------------------------------------------------------------------------*
00002544                          2184  * MODE001: decode and display source mode An
00002544                          2185  *---------------------------------------------------------------------------* 
00002544                          2186  MODE001 *An
00002544  43F9 00003A53           2187              LEA     DISP_A,A1
0000254A  103C 000E               2188              MOVE.B  #14,D0
0000254E  4E4F                    2189              TRAP    #15
00002550  4EB9 000027BA           2190              JSR     SRC_REGISTER
00002556                          2191          
00002556  4E75                    2192              RTS
00002558                          2193  
00002558                          2194  *---------------------------------------------------------------------------*
00002558                          2195  * MODE010: decode and display source mode (An)
00002558                          2196  *---------------------------------------------------------------------------*    
00002558                          2197  MODE010 *(An)
00002558  43F9 00003A5F           2198              LEA     DISP_AOP,A1  *display (A
0000255E  103C 000E               2199              MOVE.B  #14,D0
00002562  4E4F                    2200              TRAP    #15
00002564                          2201  
00002564  4EB9 000027BA           2202              JSR     SRC_REGISTER * display register
0000256A                          2203  
0000256A  43F9 00003A5D           2204              LEA     DISP_CP,A1   *display )
00002570  103C 000E               2205              MOVE.B  #14,D0
00002574  4E4F                    2206              TRAP    #15
00002576                          2207              
00002576  4E75                    2208              RTS
00002578                          2209  
00002578                          2210  *---------------------------------------------------------------------------*
00002578                          2211  * D_MODE010: decode and display dest mode (An)
00002578                          2212  *---------------------------------------------------------------------------*
00002578                          2213  D_MODE010 *(An)
00002578  43F9 00003A5F           2214              LEA     DISP_AOP,A1  *display (A
0000257E  103C 000E               2215              MOVE.B  #14,D0
00002582  4E4F                    2216              TRAP    #15
00002584                          2217     
00002584  4EB9 0000275E           2218              JSR     DEST_REGISTER * display register
0000258A                          2219  
0000258A  43F9 00003A5D           2220              LEA     DISP_CP,A1   *display )
00002590  103C 000E               2221              MOVE.B  #14,D0
00002594  4E4F                    2222              TRAP    #15
00002596                          2223              
00002596  4E75                    2224              RTS
00002598                          2225  
00002598                          2226  *---------------------------------------------------------------------------*
00002598                          2227  * MODE011: decode and display source mode (An)+
00002598                          2228  *---------------------------------------------------------------------------*
00002598                          2229  MODE011 *(An)+
00002598  43F9 00003A5F           2230              LEA     DISP_AOP,A1      *display (A
0000259E  103C 000E               2231              MOVE.B  #14,D0
000025A2  4E4F                    2232              TRAP    #15
000025A4                          2233              
000025A4  4EB9 000027BA           2234              JSR     SRC_REGISTER    * display register
000025AA                          2235  
000025AA  43F9 00003A6C           2236              LEA     DISP_POST,A1    *display )+
000025B0  103C 000E               2237              MOVE.B  #14,D0
000025B4  4E4F                    2238              TRAP    #15
000025B6                          2239              
000025B6  4E75                    2240              RTS
000025B8                          2241              
000025B8                          2242  *---------------------------------------------------------------------------*
000025B8                          2243  * MODE100: decode and display source mode -(An)
000025B8                          2244  *---------------------------------------------------------------------------*
000025B8                          2245  MODE100 *-(An)
000025B8  43F9 00003A65           2246              LEA     DISP_PRE,A1    *display -(A
000025BE  103C 000E               2247              MOVE.B  #14,D0
000025C2  4E4F                    2248              TRAP    #15
000025C4                          2249  
000025C4  4EB9 000027BA           2250              JSR     SRC_REGISTER    *display register
000025CA                          2251  
000025CA  43F9 00003A5D           2252              LEA     DISP_CP,A1   *display )
000025D0  103C 000E               2253              MOVE.B  #14,D0
000025D4  4E4F                    2254              TRAP    #15
000025D6                          2255              
000025D6  4E75                    2256              RTS
000025D8                          2257  
000025D8                          2258  *---------------------------------------------------------------------------*
000025D8                          2259  * D_MODE011: decode and display dest mode (An)+
000025D8                          2260  *---------------------------------------------------------------------------*
000025D8                          2261  D_MODE011 *(An)+
000025D8  43F9 00003A5F           2262              LEA     DISP_AOP,A1      *display (A
000025DE  103C 000E               2263              MOVE.B  #14,D0
000025E2  4E4F                    2264              TRAP    #15
000025E4                          2265  
000025E4  4EB9 0000275E           2266              JSR     DEST_REGISTER    * display register
000025EA                          2267  
000025EA  43F9 00003A6C           2268              LEA     DISP_POST,A1    *display )+
000025F0  103C 000E               2269              MOVE.B  #14,D0
000025F4  4E4F                    2270              TRAP    #15
000025F6                          2271              
000025F6  4E75                    2272              RTS
000025F8                          2273              
000025F8                          2274  *---------------------------------------------------------------------------*
000025F8                          2275  * D_MODE100: decode and display dest mode -(An)
000025F8                          2276  *---------------------------------------------------------------------------*            
000025F8                          2277  D_MODE100 *-(An)
000025F8  43F9 00003A65           2278              LEA     DISP_PRE,A1    *display -(A
000025FE  103C 000E               2279              MOVE.B  #14,D0
00002602  4E4F                    2280              TRAP    #15
00002604                          2281              
00002604  4EB9 0000275E           2282              JSR     DEST_REGISTER    *display register
0000260A                          2283  
0000260A  43F9 00003A5D           2284              LEA     DISP_CP,A1   *display )
00002610  103C 000E               2285              MOVE.B  #14,D0
00002614  4E4F                    2286              TRAP    #15
00002616                          2287              
00002616  4E75                    2288              RTS
00002618                          2289  
00002618                          2290  *---------------------------------------------------------------------------*
00002618                          2291  * MODE111: decode and display source mode absolute/immediate
00002618                          2292  *---------------------------------------------------------------------------*
00002618                          2293  MODE111     * abs/immediate
00002618                          2294              * clear registers to store temp data
00002618  4280                    2295              CLR.L   D0                      
0000261A  4281                    2296              CLR.L   D1                      
0000261C  207C 00000000           2297              MOVEA.L #0, A0                  
00002622  227C 00000000           2298              MOVEA.L #0, A1                  
00002628  2205                    2299              MOVE.L  D5,D1
0000262A                          2300              
0000262A                          2301              * retrieve source register for MODE 111
0000262A  E389                    2302              LSL.L   #1,D1   * shift the bits to left by 1
0000262C  0281 0000000E           2303              ANDI.L  #$E,D1  * mask the first 4 bits 
00002632  0C01 0000               2304              CMPI.B  #0, D1  * if it's 0000, absolute word address
00002636  6700 003E               2305              BEQ     WORDMODE
0000263A  0C01 0002               2306              CMPI.B  #2, D1  * if it's 0010, absolute long address
0000263E  6700 0062               2307              BEQ     LONGMODE
00002642  0C01 0008               2308              CMPI.B  #8, D1  * if it's 1000, immediate data
00002646  6700 0086               2309              BEQ     IMMEDIATE
0000264A                          2310       
0000264A                          2311  *---------------------------------------------------------------------------*
0000264A                          2312  * D_MODE111: decode and display dest mode absolute/immediate
0000264A                          2313  *---------------------------------------------------------------------------*           
0000264A                          2314  D_MODE111   * abs
0000264A                          2315              * clear registers to store temp data
0000264A  4280                    2316              CLR.L   D0                      
0000264C  4281                    2317              CLR.L   D1                      
0000264E  207C 00000000           2318              MOVEA.L #0, A0                  
00002654  227C 00000000           2319              MOVEA.L #0, A1                  
0000265A  2205                    2320              MOVE.L  D5,D1
0000265C                          2321              
0000265C                          2322              * retrieve dest register for MODE 111
0000265C  EC89                    2323              LSR.L   #6,D1   * shift the bits to right by 6
0000265E  E689                    2324              LSR.L   #3,D1   * shift the bits to right by extra 3
00002660  0201 0001               2325              ANDI.B  #1,D1   * mask the first 2 bits 
00002664  0C01 0000               2326              CMPI.B  #0, D1  * if it's 000, absolute word address
00002668  6700 000C               2327              BEQ     WORDMODE
0000266C  0C01 0001               2328              CMPI.B  #1, D1  * if it's 001, absolute long address
00002670  6700 0030               2329              BEQ     LONGMODE
00002674                          2330              *JSR     OP_DATA *not sure..
00002674  4E75                    2331              RTS
00002676                          2332  
00002676                          2333  
00002676                          2334  *---------------------------------------------------------------------------*
00002676                          2335  * WORDMODE: absolute word address
00002676                          2336  *---------------------------------------------------------------------------*
00002676  43F9 00003A49           2337  WORDMODE    LEA     DISP_HEX,A1
0000267C  103C 000E               2338              MOVE.B  #14,D0
00002680  4E4F                    2339              TRAP    #15
00002682                          2340              
00002682  4285                    2341              CLR.L   D5
00002684  3A1D                    2342              MOVE.W  (A5)+,D5
00002686                          2343              
00002686  43F9 00003727           2344              LEA     TMPOUTPUT,A1
0000268C  2205                    2345              MOVE.L  D5,D1
0000268E  7404                    2346              MOVE.L  #4,D2       *move word size 4
00002690  4EB8 11CE               2347              JSR     HEX2ASCII
00002694  43F9 00003727           2348              LEA     TMPOUTPUT,A1
0000269A  103C 000E               2349              MOVE.B  #14,D0
0000269E  4E4F                    2350              TRAP    #15
000026A0                          2351              
000026A0  4E75                    2352              RTS
000026A2                          2353  
000026A2                          2354  *---------------------------------------------------------------------------*
000026A2                          2355  * LONGMODE: absolute long address
000026A2                          2356  *---------------------------------------------------------------------------*
000026A2  43F9 00003A49           2357  LONGMODE    LEA     DISP_HEX,A1
000026A8  103C 000E               2358              MOVE.B  #14,D0
000026AC  4E4F                    2359              TRAP    #15
000026AE                          2360              
000026AE  4285                    2361              CLR.L   D5
000026B0  2A1D                    2362              MOVE.L  (A5)+,D5
000026B2                          2363              
000026B2  43F9 00003727           2364              LEA     TMPOUTPUT,A1
000026B8  2205                    2365              MOVE.L  D5,D1
000026BA  7408                    2366              MOVE.L  #8,D2           *move longword size 8
000026BC  4EB8 11CE               2367              JSR     HEX2ASCII
000026C0  43F9 00003727           2368              LEA     TMPOUTPUT,A1
000026C6  103C 000E               2369              MOVE.B  #14,D0
000026CA  4E4F                    2370              TRAP    #15
000026CC                          2371              
000026CC  4E75                    2372              RTS
000026CE                          2373  
000026CE                          2374  
000026CE                          2375  *---------------------------------------------------------------------------*
000026CE                          2376  * IMMEDIATE: immediate address
000026CE                          2377  *---------------------------------------------------------------------------*
000026CE  43F9 00003A6F           2378  IMMEDIATE   LEA     DISP_LB,A1
000026D4  103C 000E               2379              MOVE.B  #14,D0
000026D8  4E4F                    2380              TRAP    #15
000026DA  43F9 00003A49           2381              LEA     DISP_HEX,A1
000026E0  103C 000E               2382              MOVE.B  #14,D0
000026E4  4E4F                    2383              TRAP    #15
000026E6                          2384              
000026E6                          2385              * check for size
000026E6  0C04 0000               2386              CMPI.B  #0,D4
000026EA  6700 0012               2387              BEQ     IMMD_B
000026EE  0C04 0001               2388              CMPI.B  #1,D4
000026F2  6700 002A               2389              BEQ     IMMD_W
000026F6  0C04 0002               2390              CMPI.B  #2,D4
000026FA  6700 0042               2391              BEQ     IMMD_L
000026FE                          2392  
000026FE                          2393  IMMD_B
000026FE  4285                    2394              CLR.L   D5
00002700  3A1D                    2395              MOVE.W  (A5)+,D5
00002702                          2396              
00002702  43F9 00003727           2397              LEA     TMPOUTPUT,A1
00002708  2205                    2398              MOVE.L  D5,D1
0000270A  7402                    2399              MOVE.L  #2,D2
0000270C  4EB8 11CE               2400              JSR     HEX2ASCII
00002710  43F9 00003727           2401              LEA     TMPOUTPUT,A1
00002716  103C 000E               2402              MOVE.B  #14,D0
0000271A  4E4F                    2403              TRAP    #15
0000271C  4E75                    2404              RTS
0000271E                          2405              
0000271E                          2406  IMMD_W
0000271E  4285                    2407              CLR.L   D5
00002720  3A1D                    2408              MOVE.W  (A5)+,D5
00002722                          2409              
00002722  43F9 00003727           2410              LEA     TMPOUTPUT,A1
00002728  2205                    2411              MOVE.L  D5,D1
0000272A  7404                    2412              MOVE.L  #4,D2
0000272C  4EB8 11CE               2413              JSR     HEX2ASCII
00002730  43F9 00003727           2414              LEA     TMPOUTPUT,A1
00002736  103C 000E               2415              MOVE.B  #14,D0
0000273A  4E4F                    2416              TRAP    #15
0000273C  4E75                    2417              RTS
0000273E                          2418              
0000273E                          2419  
0000273E                          2420  IMMD_L
0000273E  4285                    2421              CLR.L   D5
00002740  3A1D                    2422              MOVE.W  (A5)+,D5
00002742                          2423              
00002742  43F9 00003727           2424              LEA     TMPOUTPUT,A1
00002748  2205                    2425              MOVE.L  D5,D1
0000274A  7408                    2426              MOVE.L  #8,D2
0000274C  4EB8 11CE               2427              JSR     HEX2ASCII
00002750  43F9 00003727           2428              LEA     TMPOUTPUT,A1
00002756  103C 000E               2429              MOVE.B  #14,D0
0000275A  4E4F                    2430              TRAP    #15
0000275C  4E75                    2431              RTS
0000275E                          2432  
0000275E                          2433  
0000275E                          2434  *---------------------------------------------------------------------------*
0000275E                          2435  * DEST_REGISTER: decode and display destination register (bit 11 - 9)
0000275E                          2436  *---------------------------------------------------------------------------*
0000275E                          2437  DEST_REGISTER
0000275E                          2438              * clear registers to store temp data
0000275E  4280                    2439              CLR.L   D0                      
00002760  4281                    2440              CLR.L   D1                      
00002762  207C 00000000           2441              MOVEA.L #0, A0                  
00002768  227C 00000000           2442              MOVEA.L #0, A1 
0000276E                          2443              
0000276E  2205                    2444              MOVE.L  D5,D1
00002770  EC89                    2445              LSR.L   #6,D1
00002772  E689                    2446              LSR.L   #3,D1
00002774  0281 00000007           2447              ANDI.L  #7,D1
0000277A                          2448              
0000277A  0C01 0000               2449              CMPI.B  #0,D1
0000277E  6700 0092               2450              BEQ     REG_0
00002782  0C01 0001               2451              CMPI.B  #1,D1
00002786  6700 0098               2452              BEQ     REG_1
0000278A  0C01 0002               2453              CMPI.B  #2,D1
0000278E  6700 009E               2454              BEQ     REG_2
00002792  0C01 0003               2455              CMPI.B  #3,D1
00002796  6700 00A4               2456              BEQ     REG_3
0000279A  0C01 0004               2457              CMPI.B  #4,D1
0000279E  6700 00AA               2458              BEQ     REG_4
000027A2  0C01 0005               2459              CMPI.B  #5,D1
000027A6  6700 00B0               2460              BEQ     REG_5
000027AA  0C01 0006               2461              CMPI.B  #6,D1
000027AE  6700 00B6               2462              BEQ     REG_6
000027B2  0C01 0007               2463              CMPI.B  #7,D1
000027B6  6700 00BC               2464              BEQ     REG_7
000027BA                          2465  
000027BA                          2466  *---------------------------------------------------------------------------*
000027BA                          2467  * SRC_REGISTER: decode and display source register (bit 2 - 0)
000027BA                          2468  *---------------------------------------------------------------------------*           
000027BA                          2469  SRC_REGISTER 
000027BA                          2470              * clear registers to store temp data
000027BA  4280                    2471              CLR.L   D0                      
000027BC  4281                    2472              CLR.L   D1                      
000027BE  207C 00000000           2473              MOVEA.L #0, A0                  
000027C4  227C 00000000           2474              MOVEA.L #0, A1                  
000027CA                          2475              
000027CA  2205                    2476              MOVE.L  D5,D1   * temp store the processing data
000027CC  0281 00000007           2477              ANDI.L  #7,D1   * mask the first 4 bits with 0111
000027D2                          2478              
000027D2  0C01 0000               2479              CMPI.B  #0,D1
000027D6  6700 003A               2480              BEQ     REG_0
000027DA  0C01 0001               2481              CMPI.B  #1,D1
000027DE  6700 0040               2482              BEQ     REG_1
000027E2  0C01 0002               2483              CMPI.B  #2,D1
000027E6  6700 0046               2484              BEQ     REG_2
000027EA  0C01 0003               2485              CMPI.B  #3,D1
000027EE  6700 004C               2486              BEQ     REG_3
000027F2  0C01 0004               2487              CMPI.B  #4,D1
000027F6  6700 0052               2488              BEQ     REG_4
000027FA  0C01 0005               2489              CMPI.B  #5,D1
000027FE  6700 0058               2490              BEQ     REG_5
00002802  0C01 0006               2491              CMPI.B  #6,D1
00002806  6700 005E               2492              BEQ     REG_6
0000280A  0C01 0007               2493              CMPI.B  #7,D1
0000280E  6700 0064               2494              BEQ     REG_7
00002812                          2495  
00002812                          2496  *---------------------------------------------------------------------------*
00002812                          2497  * REG_0 ~ REG_7: display register 0 to 7
00002812                          2498  *---------------------------------------------------------------------------*
00002812  43F9 00003A74           2499  REG_0       LEA     DISP_0,A1
00002818  103C 000E               2500              MOVE.B  #14,D0
0000281C  4E4F                    2501              TRAP    #15
0000281E  4E75                    2502              RTS
00002820                          2503              
00002820  43F9 00003A76           2504  REG_1       LEA     DISP_1,A1
00002826  103C 000E               2505              MOVE.B  #14,D0
0000282A  4E4F                    2506              TRAP    #15
0000282C  4E75                    2507              RTS
0000282E                          2508              
0000282E                          2509  
0000282E  43F9 00003A78           2510  REG_2       LEA     DISP_2,A1
00002834  103C 000E               2511              MOVE.B  #14,D0
00002838  4E4F                    2512              TRAP    #15
0000283A  4E75                    2513              RTS
0000283C                          2514            
0000283C  43F9 00003A7A           2515  REG_3       LEA     DISP_3,A1
00002842  103C 000E               2516              MOVE.B  #14,D0
00002846  4E4F                    2517              TRAP    #15
00002848  4E75                    2518              RTS
0000284A                          2519              
0000284A  43F9 00003A7C           2520  REG_4       LEA     DISP_4,A1
00002850  103C 000E               2521              MOVE.B  #14,D0
00002854  4E4F                    2522              TRAP    #15
00002856  4E75                    2523              RTS
00002858                          2524              
00002858  43F9 00003A7E           2525  REG_5       LEA     DISP_5,A1
0000285E  103C 000E               2526              MOVE.B  #14,D0
00002862  4E4F                    2527              TRAP    #15
00002864  4E75                    2528              RTS
00002866                          2529              
00002866  43F9 00003A80           2530  REG_6       LEA     DISP_6,A1
0000286C  103C 000E               2531              MOVE.B  #14,D0
00002870  4E4F                    2532              TRAP    #15
00002872  4E75                    2533              RTS
00002874                          2534              
00002874  43F9 00003A82           2535  REG_7       LEA     DISP_7,A1
0000287A  103C 000E               2536              MOVE.B  #14,D0
0000287E  4E4F                    2537              TRAP    #15
00002880  4E75                    2538              RTS
00002882                          2539              
00002882                          2540  *---------------------------------------------------------------------------*
00002882                          2541  * REPEAT : Ask user whether they wish to run the program again
00002882                          2542  *---------------------------------------------------------------------------*           
00002882  4246                    2543  REPEAT      CLR.W   D6                      * Reset D6 (Loop Count)
00002884  43F9 0000354D           2544              LEA     REPEATMSG,A1
0000288A  103C 000E               2545              MOVE.B  #14,D0
0000288E  4E4F                    2546              TRAP    #15
00002890                          2547              
00002890  43F9 000036D7           2548              LEA     TMPINPUT,A1             * allocate space to temp store user input
00002896  103C 0002               2549              MOVE.B  #2,D0
0000289A  4E4F                    2550              TRAP    #15
0000289C                          2551  
0000289C  0C01 0001               2552              CMPI.B  #1,D1                   * check for length of user input
000028A0  66E0                    2553              BNE     REPEAT                  * return to the beginning of the function if unequal
000028A2                          2554              
000028A2  0C11 0059               2555              CMPI.B  #$59,(A1)               * compare the input with Y    
000028A6  6700 E762               2556              BEQ     PROGLP                  * repeat the program
000028AA                          2557              
000028AA  0C11 0079               2558              CMPI.B  #$79,(A1)               * compare the input with y    
000028AE  6700 E75A               2559              BEQ     PROGLP                  * repeat the program
000028B2                          2560              
000028B2  0C11 004E               2561              CMPI.B  #$4E,(A1)               * compare the input with N    
000028B6  6700 0928               2562              BEQ     TERMINATE               * finish program
000028BA                          2563              
000028BA  0C11 006E               2564              CMPI.B  #$6E,(A1)               * compare the input with n    
000028BE  6700 0920               2565              BEQ     TERMINATE               * finish program
000028C2                          2566              
000028C2  60BE                    2567              BRA     REPEAT                  * invalid input/repeat the function
000028C4                          2568  
000028C4                          2569  *---------------------------------------------------------------------------*
000028C4                          2570  * EA DECODING INTERFACE
000028C4                          2571  * [A0] - RESERVED FOR USE
000028C4                          2572  * [D2] - RESERVED FOR USE
000028C4                          2573  * RETURNS - ERROR FLAG IF FAILED TO PUSH SRC EA INTO STACK
000028C4                          2574  *---------------------------------------------------------------------------*
000028C4                          2575  GET_EA_EA_SRC
000028C4                          2576      *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
000028C4                          2577      
000028C4                          2578      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
000028C4  2405                    2579      MOVE.L  D5,D2                           * CLEAN COPY TO D2
000028C6  E68A                    2580      LSR.L   #3,D2                           * [D2] Temporarily used D2 for shifting bits            *TODO: DYNAMIC FOR ANY LOCATION OF SOURCE
000028C8  23C2 00003A9A           2581      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
000028CE  7407                    2582      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
000028D0  C5B9 00003A9A           2583      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
000028D6                          2584                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
000028D6                          2585      
000028D6                          2586      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
000028D6                          2587      *DESTINATION REGISTER FORMAT STANDARD         *
000028D6                          2588      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
000028D6                          2589      *WHEN BIT = 0(VALID ADDRESS MODE)             *
000028D6                          2590      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
000028D6                          2591      *0 - Dn                                       *
000028D6                          2592      *1 - An                                       *
000028D6                          2593      *2 - (An)                                     *
000028D6                          2594      *3 - (An)+                                    *
000028D6                          2595      *4 - -(An)                                    *
000028D6                          2596      *5 - (XXX).W                                  *
000028D6                          2597      *6 - (XXX).L                                  *
000028D6                          2598      *7 - #<data>                                  *
000028D6                          2599      ***********************************************
000028D6                          2600      
000028D6                          2601      *** Check if source ...  <ea> = Dn
000028D6                          2602  CHECK0    
000028D6  41F9 00003A8A           2603            LEA     TEMP_REGISTER_FORMAT,A0
000028DC  1439 00003A89           2604            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000028E2  1082                    2605            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000028E4  0239 0001 00003A8A      2606            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
000028EC  0C39 0001 00003A8A      2607            CMPI.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
000028F4  6700 006A               2608            BEQ     CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
000028F8  0CB9 00000000 00003A9A  2609            CMPI.L     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn) - COMPARE MODES TO SEE IF IT IS THIS MODE
00002902  6600 005C               2610            BNE     CHECK1
00002906                          2611            
00002906                          2612            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002906  163C 0020               2613            MOVE.B    #' ',D3
0000290A  6100 0856               2614            BSR       PUSH_STACK
0000290E  163C 0044               2615            MOVE.B    #'D',D3
00002912  6100 084E               2616            BSR       PUSH_STACK
00002916                          2617  
00002916                          2618            *FIND REGISTER NUMBER END LOCATION*  
00002916  13F9 00003A8C 00003A92  2619            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002920  0239 000F 00003A92      2620            AND.B   #$0F,VAR_BYTE_END
00002928                          2621            
00002928                          2622            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002928  23C5 00003A96           2623            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
0000292E  1439 00003A92           2624            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002934                          2625            
00002934                          2626            *INTITIALIZE FOR BIT SHIFTING
00002934  41F9 00003A96           2627            LEA     VAR_TEMP_CLEANCOPY,A0
0000293A  2639 00003A96           2628            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002940                          2629  LOOP_SHIFTING
00002940  0C02 0000               2630            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002944  6700 0008               2631            BEQ     MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00002948  E24B                    2632            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
0000294A  5302                    2633            SUB.B   #1,D2                     *DECREMENT COUNTER
0000294C  60F2                    2634            BRA     LOOP_SHIFTING             *CONTINUE SHIFTING
0000294E                          2635  MASKING_NEXT
0000294E  C6BC 00000007           2636            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002954  0603 0030               2637            ADD.B   #$30,D3                   *CONVERT TO CHAR
00002958  6100 0808               2638            BSR     PUSH_STACK                *PUSH TO STACK
0000295C                          2639            
0000295C  6000 0394               2640            BRA     GET_SRC_SUCCESS           *RETURN          
00002960                          2641            
00002960                          2642            
00002960                          2643            *** Check if source ...  <ea> = An
00002960  41F9 00003A8A           2644  CHECK1    LEA     TEMP_REGISTER_FORMAT,A0
00002966  1439 00003A89           2645            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000296C  1082                    2646            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000296E  0239 0002 00003A8A      2647            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
00002976  0C39 0002 00003A8A      2648            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
0000297E  6700 006A               2649            BEQ     CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00002982  0CB9 00000001 00003A9A  2650            CMPI.L  #1,VAR_LONG_ADDRESS_MODE_CHECK                      * An - COMPARE MODES TO SEE IF IT IS THIS MODE
0000298C  6600 005C               2651            BNE     CHECK2
00002990                          2652            
00002990                          2653            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002990  163C 0020               2654            MOVE.B    #' ',D3
00002994  6100 07CC               2655            BSR       PUSH_STACK
00002998  163C 0041               2656            MOVE.B    #'A',D3
0000299C  6100 07C4               2657            BSR       PUSH_STACK
000029A0                          2658  
000029A0                          2659            
000029A0                          2660            *FIND REGISTER NUMBER END LOCATION*  
000029A0  13F9 00003A8C 00003A92  2661            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
000029AA  0239 000F 00003A92      2662            AND.B   #$0F,VAR_BYTE_END
000029B2                          2663            
000029B2                          2664            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000029B2  23C5 00003A96           2665            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000029B8  1439 00003A92           2666            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
000029BE                          2667            
000029BE                          2668            *INTITIALIZE FOR BIT SHIFTING
000029BE  41F9 00003A96           2669            LEA     VAR_TEMP_CLEANCOPY,A0
000029C4  2639 00003A96           2670            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000029CA                          2671  LOOP_SHIFTING1
000029CA  0C02 0000               2672            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000029CE  6700 0008               2673            BEQ     MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
000029D2  E24B                    2674            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000029D4  5302                    2675            SUB.B   #1,D2                     *DECREMENT COUNTER
000029D6  60F2                    2676            BRA     LOOP_SHIFTING1             *CONTINUE SHIFTING
000029D8                          2677  MASKING_NEXT1
000029D8  C6BC 00000007           2678            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000029DE  0603 0030               2679            ADD.B   #$30,D3                   *CONVERT TO CHAR
000029E2  6100 077E               2680            BSR     PUSH_STACK                *PUSH TO STACK
000029E6                          2681            
000029E6  6000 030A               2682            BRA     GET_SRC_SUCCESS                   *RETURN 
000029EA                          2683            
000029EA                          2684            
000029EA                          2685            
000029EA                          2686            
000029EA                          2687            *** Check if source ...  <ea> = (An)       
000029EA  41F9 00003A8A           2688  CHECK2    LEA     TEMP_REGISTER_FORMAT,A0
000029F0  1439 00003A89           2689            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000029F6  1082                    2690            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000029F8  0239 0004 00003A8A      2691            ANDI.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
00002A00  0C39 0004 00003A8A      2692            CMPI.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
00002A08  6700 007A               2693            BEQ     CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002A0C  0CB9 00000002 00003A9A  2694            CMPI.L   #2,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)  COMPARE MODES TO SEE IF IT IS THIS MODE                                                                *change: checkx++*
00002A16  6600 006C               2695            BNE     CHECK3
00002A1A                          2696            
00002A1A                          2697            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002A1A  163C 0020               2698            MOVE.B    #' ',D3
00002A1E  6100 0742               2699            BSR       PUSH_STACK
00002A22  163C 0028               2700            MOVE.B    #'(',D3
00002A26  6100 073A               2701            BSR       PUSH_STACK
00002A2A  163C 0041               2702            MOVE.B    #'A',D3
00002A2E  6100 0732               2703            BSR       PUSH_STACK
00002A32                          2704  
00002A32                          2705            
00002A32                          2706            *FIND REGISTER NUMBER END LOCATION*  
00002A32  13F9 00003A8C 00003A92  2707            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002A3C  0239 000F 00003A92      2708            AND.B   #$0F,VAR_BYTE_END
00002A44                          2709            
00002A44                          2710            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002A44  23C5 00003A96           2711            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002A4A  1439 00003A92           2712            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002A50                          2713            
00002A50                          2714            *INTITIALIZE FOR BIT SHIFTING
00002A50  41F9 00003A96           2715            LEA     VAR_TEMP_CLEANCOPY,A0
00002A56  2639 00003A96           2716            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002A5C                          2717  LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
00002A5C  0C02 0000               2718            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002A60  6700 0008               2719            BEQ     MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002A64  E24B                    2720            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002A66  5302                    2721            SUB.B   #1,D2                     *DECREMENT COUNTER
00002A68  60F2                    2722            BRA     LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
00002A6A                          2723  MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
00002A6A  0283 00000007           2724            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002A70  0603 0030               2725            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002A74  6100 06EC               2726            BSR     PUSH_STACK                *PUSH TO STACK
00002A78                          2727            
00002A78  163C 0029               2728            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002A7C  6100 06E4               2729            BSR       PUSH_STACK
00002A80                          2730            
00002A80  6000 0270               2731            BRA     GET_SRC_SUCCESS                   *RETURN 
00002A84                          2732  
00002A84                          2733            
00002A84                          2734            
00002A84                          2735                      
00002A84                          2736  *** Check if source ...  <ea> = (An)+       
00002A84  41F9 00003A8A           2737  CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
00002A8A  1439 00003A89           2738            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002A90  1082                    2739            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002A92  0239 0008 00003A8A      2740            ANDI.B  #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
00002A9A  0C39 0008 00003A8A      2741            CMPI.B  #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
00002AA2  6700 0082               2742            BEQ     CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002AA6  0CB9 00000003 00003A9A  2743            CMPI.L  #3,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)+ - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00002AB0  6600 0074               2744            BNE     CHECK4
00002AB4                          2745            
00002AB4                          2746            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002AB4  163C 0020               2747            MOVE.B    #' ',D3
00002AB8  6100 06A8               2748            BSR       PUSH_STACK
00002ABC  163C 0028               2749            MOVE.B    #'(',D3
00002AC0  6100 06A0               2750            BSR       PUSH_STACK
00002AC4  163C 0041               2751            MOVE.B    #'A',D3
00002AC8  6100 0698               2752            BSR       PUSH_STACK
00002ACC                          2753  
00002ACC                          2754            
00002ACC                          2755            *FIND REGISTER NUMBER END LOCATION*  
00002ACC  13F9 00003A8C 00003A92  2756            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002AD6  0239 000F 00003A92      2757            ANDI.B   #$0F,VAR_BYTE_END
00002ADE                          2758            
00002ADE                          2759            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002ADE  23C5 00003A96           2760            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002AE4  1439 00003A92           2761            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002AEA                          2762            
00002AEA                          2763            *INTITIALIZE FOR BIT SHIFTING
00002AEA  41F9 00003A96           2764            LEA     VAR_TEMP_CLEANCOPY,A0
00002AF0  2639 00003A96           2765            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002AF6                          2766            
00002AF6                          2767  LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
00002AF6  0C02 0000               2768            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002AFA  6700 0008               2769            BEQ     MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002AFE  E24B                    2770            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002B00  5302                    2771            SUBI.B   #1,D2                     *DECREMENT COUNTER
00002B02  60F2                    2772            BRA     LOOP_SHIFTING3            *CONTINUE SHIFTING 
00002B04                          2773                                               *change: NAME OF LABEL*
00002B04                          2774  MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
00002B04  0283 00000007           2775            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002B0A  0603 0030               2776            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002B0E  6100 0652               2777            BSR     PUSH_STACK                *PUSH TO STACK
00002B12                          2778            
00002B12  163C 0029               2779            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002B16  6100 064A               2780            BSR       PUSH_STACK
00002B1A  163C 002B               2781            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002B1E  6100 0642               2782            BSR       PUSH_STACK
00002B22                          2783            
00002B22  6000 01CE               2784            BRA       GET_SRC_SUCCESS                   *RETURN 
00002B26                          2785  
00002B26                          2786            
00002B26                          2787            
00002B26                          2788                      
00002B26                          2789            *** Check if source ...  <ea> = -(An)       
00002B26  41F9 00003A8A           2790  CHECK4    LEA     TEMP_REGISTER_FORMAT,A0
00002B2C  1439 00003A89           2791            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002B32  1082                    2792            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002B34  0239 0010 00003A8A      2793            ANDI.B  #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
00002B3C  0C39 0010 00003A8A      2794            CMPI.B  #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002B44  6700 0082               2795            BEQ     CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002B48  0CB9 00000004 00003A9A  2796            CMPI.L  #4,VAR_LONG_ADDRESS_MODE_CHECK                      * -(An) - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00002B52  6600 0074               2797            BNE     CHECK7
00002B56                          2798            
00002B56                          2799            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002B56  163C 0020               2800            MOVE.B    #' ',D3
00002B5A  6100 0606               2801            BSR       PUSH_STACK
00002B5E  163C 002D               2802            MOVE.B    #'-',D3
00002B62  6100 05FE               2803            BSR       PUSH_STACK
00002B66  163C 0028               2804            MOVE.B    #'(',D3
00002B6A  6100 05F6               2805            BSR       PUSH_STACK
00002B6E  163C 0041               2806            MOVE.B    #'A',D3
00002B72  6100 05EE               2807            BSR       PUSH_STACK
00002B76                          2808  
00002B76                          2809            
00002B76                          2810            *FIND REGISTER NUMBER END LOCATION*  
00002B76  13F9 00003A8C 00003A92  2811            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002B80  0239 000F 00003A92      2812            AND.B   #$0F,VAR_BYTE_END
00002B88                          2813            
00002B88                          2814            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002B88  23C5 00003A96           2815            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002B8E  1439 00003A92           2816            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002B94                          2817            
00002B94                          2818            *INTITIALIZE FOR BIT SHIFTING
00002B94  41F9 00003A96           2819            LEA     VAR_TEMP_CLEANCOPY,A0
00002B9A  2639 00003A96           2820            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002BA0                          2821            
00002BA0                          2822  LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
00002BA0  0C02 0000               2823            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002BA4  6700 0008               2824            BEQ     MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002BA8  E24B                    2825            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002BAA  5302                    2826            SUBI.B   #1,D2                     *DECREMENT COUNTER
00002BAC  60F2                    2827            BRA     LOOP_SHIFTING4            *CONTINUE SHIFTING 
00002BAE                          2828                                               *change: NAME OF LABEL*
00002BAE                          2829  MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
00002BAE  0283 00000007           2830            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002BB4  0603 0030               2831            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002BB8  6100 05A8               2832            BSR     PUSH_STACK                *PUSH TO STACK
00002BBC                          2833            
00002BBC  163C 0029               2834            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002BC0  6100 05A0               2835            BSR       PUSH_STACK
00002BC4                          2836            
00002BC4  6000 012C               2837            BRA     GET_SRC_SUCCESS                   *RETURN
00002BC8                          2838            
00002BC8                          2839                      
00002BC8                          2840            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
00002BC8  0CB9 00000007 00003A9A  2841  CHECK7    CMPI.L  #7,VAR_LONG_ADDRESS_MODE_CHECK                      *IF (MODE != 111)
00002BD2  6600 011A               2842            BNE     GET_SRC_FAILED                                      *THAN BRANCH TO UNCESSFULL SRC MODE READ
00002BD6                          2843                   
00002BD6                          2844            *NEXT: (MODE == 111) 
00002BD6                          2845            *NOW: CHECK FOR SRC REGISTER 
00002BD6                          2846                  *(000 = (xxx).W)
00002BD6                          2847                  *(001 = (xxx).L)
00002BD6                          2848                  *(010 = #<data>)
00002BD6                          2849                  
00002BD6                          2850            *FIND REGISTER NUMBER END LOCATION*  
00002BD6  13F9 00003A8C 00003A92  2851            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002BE0  0239 000F 00003A92      2852            AND.B   #$0F,VAR_BYTE_END
00002BE8                          2853            
00002BE8                          2854            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002BE8  23C5 00003A96           2855            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002BEE  1439 00003A92           2856            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002BF4                          2857            
00002BF4                          2858            *INTITIALIZE FOR BIT SHIFTING
00002BF4  41F9 00003A96           2859            LEA     VAR_TEMP_CLEANCOPY,A0
00002BFA  2C39 00003A96           2860            MOVE.L  VAR_TEMP_CLEANCOPY,D6
00002C00                          2861  SRC_LOOP_SHIFTING
00002C00  0C02 0000               2862            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002C04  6700 0008               2863            BEQ     SRC_MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00002C08  E24E                    2864            LSR     #1,D6                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002C0A  5302                    2865            SUB.B   #1,D2                     *DECREMENT COUNTER
00002C0C  60F2                    2866            BRA     SRC_LOOP_SHIFTING             *CONTINUE SHIFTING
00002C0E                          2867  SRC_MASKING_NEXT
00002C0E  CCBC 00000007           2868            AND.L   #7,D6                     *MASK, ONLY NEED 0-2 BIT INDEXES 
00002C14                          2869           *D3 - REGISTER NUMBER NEEDED TO CHECK WHICH W/L/#<DATA>*
00002C14                          2870           
00002C14                          2871  CHECK_WORD  
00002C14  41F9 00003A8A           2872            LEA     TEMP_REGISTER_FORMAT,A0
00002C1A  1439 00003A89           2873            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002C20  1082                    2874            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002C22  0239 0020 00003A8A      2875            ANDI.B  #$20,TEMP_REGISTER_FORMAT                           * MASKS 0010 0000                                                     *change <SRC>*
00002C2A  0C39 0020 00003A8A      2876            CMPI.B  #$20,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0010 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002C32  6700 0026               2877            BEQ     CHECK_LONG                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00002C36  0C06 0000               2878            CMPI.B  #0,D6                          
00002C3A  6600 001E               2879            BNE     CHECK_LONG 
00002C3E                          2880            
00002C3E                          2881            *IT IS A WORD AT THIS POINT*
00002C3E                          2882            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002C3E  163C 0020               2883            MOVE.B    #' ',D3
00002C42  6100 051E               2884            BSR       PUSH_STACK
00002C46  163C 0024               2885            MOVE.B    #'$',D3
00002C4A  6100 0516               2886            BSR       PUSH_STACK
00002C4E  321D                    2887            MOVE.W    (A5)+,D1
00002C50  7404                    2888            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00002C52  6100 E5BC               2889            BSR       HEX2ASCII2STACK
00002C56  6000 009A               2890            BRA     GET_SRC_SUCCESS
00002C5A                          2891  
00002C5A                          2892  CHECK_LONG
00002C5A  41F9 00003A8A           2893            LEA     TEMP_REGISTER_FORMAT,A0
00002C60  1439 00003A89           2894            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002C66  1082                    2895            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002C68  0239 0040 00003A8A      2896            ANDI.B  #$40,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00002C70  0C39 0040 00003A8A      2897            CMPI.B  #$40,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002C78  6700 002E               2898            BEQ     CHECK_IMMEDIATE                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00002C7C  0C06 0001               2899            CMPI.B  #1,D6                          
00002C80  6600 0026               2900            BNE     CHECK_IMMEDIATE  
00002C84                          2901  
00002C84                          2902            *IT IS A WORD AT THIS POINT*
00002C84                          2903            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002C84  163C 0020               2904            MOVE.B    #' ',D3
00002C88  6100 04D8               2905            BSR       PUSH_STACK
00002C8C  163C 0024               2906            MOVE.B    #'$',D3
00002C90  6100 04D0               2907            BSR       PUSH_STACK
00002C94  321D                    2908            MOVE.W    (A5)+,D1
00002C96  7404                    2909            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00002C98  6100 E576               2910            BSR       HEX2ASCII2STACK
00002C9C  321D                    2911            MOVE.W    (A5)+,D1
00002C9E  7404                    2912            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00002CA0  6100 E56E               2913            BSR       HEX2ASCII2STACK
00002CA4  6000 004C               2914            BRA     GET_SRC_SUCCESS
00002CA8                          2915            
00002CA8                          2916  CHECK_IMMEDIATE
00002CA8  41F9 00003A8A           2917            LEA     TEMP_REGISTER_FORMAT,A0
00002CAE  1439 00003A89           2918            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002CB4  1082                    2919            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002CB6  0239 0080 00003A8A      2920            ANDI.B  #$80,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00002CBE  0C39 0080 00003A8A      2921            CMPI.B  #$80,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002CC6  6700 0026               2922            BEQ     GET_SRC_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00002CCA  0C06 0004               2923            CMPI.B  #4,D6                          
00002CCE  6600 001E               2924            BNE     GET_SRC_FAILED 
00002CD2                          2925  
00002CD2                          2926            *IT IS A WORD AT THIS POINT*
00002CD2                          2927            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002CD2  163C 0020               2928            MOVE.B    #' ',D3
00002CD6  6100 048A               2929            BSR       PUSH_STACK
00002CDA  163C 0023               2930            MOVE.B    #'#',D3
00002CDE  6100 0482               2931            BSR       PUSH_STACK
00002CE2  321D                    2932            MOVE.W    (A5)+,D1
00002CE4  7404                    2933            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00002CE6  6100 E528               2934            BSR       HEX2ASCII2STACK
00002CEA  6000 0006               2935            BRA     GET_SRC_SUCCESS
00002CEE                          2936            
00002CEE                          2937  GET_SRC_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
00002CEE  7801                    2938            MOVE.L #1,D4
00002CF0  4E75                    2939            RTS
00002CF2                          2940  GET_SRC_SUCCESS 
00002CF2  4E75                    2941            RTS
00002CF4                          2942                                 
00002CF4                          2943      
00002CF4                          2944  
00002CF4                          2945  
00002CF4                          2946  
00002CF4                          2947  
00002CF4                          2948  
00002CF4                          2949  
00002CF4                          2950  GET_EA_EA_DEST
00002CF4                          2951  *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
00002CF4                          2952      
00002CF4                          2953      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
00002CF4  2405                    2954      MOVE.L  D5,D2                           * CLEAN COPY TO D2
00002CF6  EC8A                    2955      LSR.L   #6,D2                           * [D2] Temporarily used D2 for shifting bits                *TODO: DYNAMIC MODE LOCATION
00002CF8  23C2 00003A9A           2956      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
00002CFE  7407                    2957      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
00002D00  C5B9 00003A9A           2958      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
00002D06                          2959                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
00002D06                          2960      
00002D06                          2961      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
00002D06                          2962      *DESTINATION REGISTER FORMAT STANDARD         *
00002D06                          2963      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
00002D06                          2964      *WHEN BIT = 0(VALID ADDRESS MODE)             *
00002D06                          2965      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
00002D06                          2966      *0 - Dn                                       *
00002D06                          2967      *1 - An                                       *
00002D06                          2968      *2 - (An)                                     *
00002D06                          2969      *3 - (An)+                                    *
00002D06                          2970      *4 - -(An)                                    *
00002D06                          2971      *5 - (XXX).W                                  *
00002D06                          2972      *6 - (XXX).L                                  *
00002D06                          2973      *7 - #<data>                                  *
00002D06                          2974      ***********************************************
00002D06                          2975      
00002D06                          2976      *** Check if source ...  <ea> = Dn
00002D06                          2977  DEST_CHECK0    
00002D06  41F9 00003A8A           2978            LEA     TEMP_REGISTER_FORMAT,A0
00002D0C  1439 00003A88           2979            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002D12  1082                    2980            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002D14  0239 0001 00003A8A      2981            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
00002D1C  0C39 0001 00003A8A      2982            CMPI.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
00002D24  6700 006A               2983            BEQ     DEST_CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00002D28  0CB9 00000000 00003A9A  2984            CMPI.L     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn) - COMPARE MODES TO SEE IF IT IS THIS MODE
00002D32  6600 005C               2985            BNE     DEST_CHECK1
00002D36                          2986            
00002D36                          2987            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002D36  163C 0020               2988            MOVE.B    #' ',D3
00002D3A  6100 0426               2989            BSR       PUSH_STACK
00002D3E  163C 0044               2990            MOVE.B    #'D',D3
00002D42  6100 041E               2991            BSR       PUSH_STACK
00002D46                          2992  
00002D46                          2993            *FIND REGISTER NUMBER END LOCATION*  
00002D46  13F9 00003A8B 00003A92  2994            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002D50  0239 000F 00003A92      2995            AND.B   #$0F,VAR_BYTE_END
00002D58                          2996            
00002D58                          2997            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002D58  23C5 00003A96           2998            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002D5E  1439 00003A92           2999            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002D64                          3000            
00002D64                          3001            *INTITIALIZE FOR BIT SHIFTING
00002D64  41F9 00003A96           3002            LEA     VAR_TEMP_CLEANCOPY,A0
00002D6A  2639 00003A96           3003            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002D70                          3004  DEST_LOOP_SHIFTING
00002D70  0C02 0000               3005            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002D74  6700 0008               3006            BEQ     DEST_MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00002D78  E24B                    3007            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002D7A  5302                    3008            SUB.B   #1,D2                     *DECREMENT COUNTER
00002D7C  60F2                    3009            BRA     DEST_LOOP_SHIFTING             *CONTINUE SHIFTING
00002D7E                          3010  DEST_MASKING_NEXT
00002D7E  C6BC 00000007           3011            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002D84  0603 0030               3012            ADD.B   #$30,D3                   *CONVERT TO CHAR
00002D88  6100 03D8               3013            BSR     PUSH_STACK                *PUSH TO STACK
00002D8C                          3014            
00002D8C  6000 0394               3015            BRA     GET_DST_SUCCESS           *RETURN          
00002D90                          3016            
00002D90                          3017            
00002D90                          3018            *** Check if source ...  <ea> = An
00002D90                          3019  DEST_CHECK1    
00002D90  41F9 00003A8A           3020            LEA     TEMP_REGISTER_FORMAT,A0
00002D96  1439 00003A88           3021            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002D9C  1082                    3022            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002D9E  0239 0002 00003A8A      3023            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
00002DA6  0C39 0002 00003A8A      3024            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
00002DAE  6700 006A               3025            BEQ     DEST_CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00002DB2  0CB9 00000001 00003A9A  3026            CMPI.L  #1,VAR_LONG_ADDRESS_MODE_CHECK                      * An - COMPARE MODES TO SEE IF IT IS THIS MODE
00002DBC  6600 005C               3027            BNE     DEST_CHECK2
00002DC0                          3028            
00002DC0                          3029            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002DC0  163C 0020               3030            MOVE.B    #' ',D3
00002DC4  6100 039C               3031            BSR       PUSH_STACK
00002DC8  163C 0041               3032            MOVE.B    #'A',D3
00002DCC  6100 0394               3033            BSR       PUSH_STACK
00002DD0                          3034  
00002DD0                          3035            
00002DD0                          3036            *FIND REGISTER NUMBER END LOCATION*  
00002DD0  13F9 00003A8B 00003A92  3037            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002DDA  0239 000F 00003A92      3038            AND.B   #$0F,VAR_BYTE_END
00002DE2                          3039            
00002DE2                          3040            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002DE2  23C5 00003A96           3041            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002DE8  1439 00003A92           3042            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
00002DEE                          3043            
00002DEE                          3044            *INTITIALIZE FOR BIT SHIFTING
00002DEE  41F9 00003A96           3045            LEA     VAR_TEMP_CLEANCOPY,A0
00002DF4  2639 00003A96           3046            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002DFA                          3047  DEST_LOOP_SHIFTING1
00002DFA  0C02 0000               3048            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002DFE  6700 0008               3049            BEQ     DEST_MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00002E02  E24B                    3050            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002E04  5302                    3051            SUB.B   #1,D2                     *DECREMENT COUNTER
00002E06  60F2                    3052            BRA     DEST_LOOP_SHIFTING1             *CONTINUE SHIFTING
00002E08                          3053  DEST_MASKING_NEXT1
00002E08  C6BC 00000007           3054            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002E0E  0603 0030               3055            ADD.B   #$30,D3                   *CONVERT TO CHAR
00002E12  6100 034E               3056            BSR     PUSH_STACK                *PUSH TO STACK
00002E16                          3057            
00002E16  6000 030A               3058            BRA     GET_DST_SUCCESS                   *RETURN 
00002E1A                          3059            
00002E1A                          3060            
00002E1A                          3061            
00002E1A                          3062            
00002E1A                          3063            *** Check if source ...  <ea> = (An)       
00002E1A                          3064  DEST_CHECK2    
00002E1A  41F9 00003A8A           3065            LEA     TEMP_REGISTER_FORMAT,A0
00002E20  1439 00003A88           3066            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002E26  1082                    3067            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002E28  0239 0004 00003A8A      3068            ANDI.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
00002E30  0C39 0004 00003A8A      3069            CMPI.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
00002E38  6700 007A               3070            BEQ     DEST_CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002E3C  0CB9 00000002 00003A9A  3071            CMPI.L   #2,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)  COMPARE MODES TO SEE IF IT IS THIS MODE                                                                *change: checkx++*
00002E46  6600 006C               3072            BNE     DEST_CHECK3
00002E4A                          3073            
00002E4A                          3074            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002E4A  163C 0020               3075            MOVE.B    #' ',D3
00002E4E  6100 0312               3076            BSR       PUSH_STACK
00002E52  163C 0028               3077            MOVE.B    #'(',D3
00002E56  6100 030A               3078            BSR       PUSH_STACK
00002E5A  163C 0041               3079            MOVE.B    #'A',D3
00002E5E  6100 0302               3080            BSR       PUSH_STACK
00002E62                          3081  
00002E62                          3082            
00002E62                          3083            *FIND REGISTER NUMBER END LOCATION*  
00002E62  13F9 00003A8B 00003A92  3084            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002E6C  0239 000F 00003A92      3085            AND.B   #$0F,VAR_BYTE_END
00002E74                          3086            
00002E74                          3087            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002E74  23C5 00003A96           3088            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002E7A  1439 00003A92           3089            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002E80                          3090            
00002E80                          3091            *INTITIALIZE FOR BIT SHIFTING
00002E80  41F9 00003A96           3092            LEA     VAR_TEMP_CLEANCOPY,A0
00002E86  2639 00003A96           3093            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002E8C                          3094  DEST_LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
00002E8C  0C02 0000               3095            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002E90  6700 0008               3096            BEQ     DEST_MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002E94  E24B                    3097            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002E96  5302                    3098            SUB.B   #1,D2                     *DECREMENT COUNTER
00002E98  60F2                    3099            BRA     DEST_LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
00002E9A                          3100  DEST_MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
00002E9A  0283 00000007           3101            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002EA0  0603 0030               3102            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002EA4  6100 02BC               3103            BSR     PUSH_STACK                *PUSH TO STACK
00002EA8                          3104            
00002EA8  163C 0029               3105            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002EAC  6100 02B4               3106            BSR       PUSH_STACK
00002EB0                          3107            
00002EB0  6000 0270               3108            BRA     GET_DST_SUCCESS                   *RETURN 
00002EB4                          3109  
00002EB4                          3110            
00002EB4                          3111            
00002EB4                          3112                      
00002EB4                          3113  *** Check if source ...  <ea> = (An)+       
00002EB4  41F9 00003A8A           3114  DEST_CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
00002EBA  1439 00003A88           3115            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002EC0  1082                    3116            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002EC2  0239 0008 00003A8A      3117            ANDI.B  #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
00002ECA  0C39 0008 00003A8A      3118            CMPI.B  #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
00002ED2  6700 0082               3119            BEQ     DEST_CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002ED6  0CB9 00000003 00003A9A  3120            CMPI.L  #3,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)+ - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00002EE0  6600 0074               3121            BNE     DEST_CHECK4
00002EE4                          3122            
00002EE4                          3123            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002EE4  163C 0020               3124            MOVE.B    #' ',D3
00002EE8  6100 0278               3125            BSR       PUSH_STACK
00002EEC  163C 0028               3126            MOVE.B    #'(',D3
00002EF0  6100 0270               3127            BSR       PUSH_STACK
00002EF4  163C 0041               3128            MOVE.B    #'A',D3
00002EF8  6100 0268               3129            BSR       PUSH_STACK
00002EFC                          3130  
00002EFC                          3131            
00002EFC                          3132            *FIND REGISTER NUMBER END LOCATION*  
00002EFC  13F9 00003A8B 00003A92  3133            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002F06  0239 000F 00003A92      3134            ANDI.B   #$0F,VAR_BYTE_END
00002F0E                          3135            
00002F0E                          3136            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002F0E  23C5 00003A96           3137            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002F14  1439 00003A92           3138            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002F1A                          3139            
00002F1A                          3140            *INTITIALIZE FOR BIT SHIFTING
00002F1A  41F9 00003A96           3141            LEA     VAR_TEMP_CLEANCOPY,A0
00002F20  2639 00003A96           3142            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002F26                          3143            
00002F26                          3144  DEST_LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
00002F26  0C02 0000               3145            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002F2A  6700 0008               3146            BEQ     DEST_MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002F2E  E24B                    3147            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002F30  5302                    3148            SUBI.B   #1,D2                     *DECREMENT COUNTER
00002F32  60F2                    3149            BRA     DEST_LOOP_SHIFTING3            *CONTINUE SHIFTING 
00002F34                          3150                                               *change: NAME OF LABEL*
00002F34                          3151  DEST_MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
00002F34  0283 00000007           3152            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002F3A  0603 0030               3153            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002F3E  6100 0222               3154            BSR     PUSH_STACK                *PUSH TO STACK
00002F42                          3155            
00002F42  163C 0029               3156            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002F46  6100 021A               3157            BSR       PUSH_STACK
00002F4A  163C 002B               3158            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002F4E  6100 0212               3159            BSR       PUSH_STACK
00002F52                          3160            
00002F52  6000 01CE               3161            BRA       GET_DST_SUCCESS                   *RETURN 
00002F56                          3162  
00002F56                          3163            
00002F56                          3164            
00002F56                          3165                      
00002F56                          3166            *** Check if source ...  <ea> = -(An)       
00002F56                          3167  DEST_CHECK4    
00002F56  41F9 00003A8A           3168            LEA     TEMP_REGISTER_FORMAT,A0
00002F5C  1439 00003A88           3169            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002F62  1082                    3170            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002F64  0239 0010 00003A8A      3171            ANDI.B  #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
00002F6C  0C39 0010 00003A8A      3172            CMPI.B  #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002F74  6700 0082               3173            BEQ     DEST_CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002F78  0CB9 00000004 00003A9A  3174            CMPI.L  #4,VAR_LONG_ADDRESS_MODE_CHECK                      * -(An) - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00002F82  6600 0074               3175            BNE     DEST_CHECK7
00002F86                          3176            
00002F86                          3177            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002F86  163C 0020               3178            MOVE.B    #' ',D3
00002F8A  6100 01D6               3179            BSR       PUSH_STACK
00002F8E  163C 002D               3180            MOVE.B    #'-',D3
00002F92  6100 01CE               3181            BSR       PUSH_STACK
00002F96  163C 0028               3182            MOVE.B    #'(',D3
00002F9A  6100 01C6               3183            BSR       PUSH_STACK
00002F9E  163C 0041               3184            MOVE.B    #'A',D3
00002FA2  6100 01BE               3185            BSR       PUSH_STACK
00002FA6                          3186  
00002FA6                          3187            
00002FA6                          3188            *FIND REGISTER NUMBER END LOCATION*  
00002FA6  13F9 00003A8B 00003A92  3189            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002FB0  0239 000F 00003A92      3190            AND.B   #$0F,VAR_BYTE_END
00002FB8                          3191            
00002FB8                          3192            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002FB8  23C5 00003A96           3193            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002FBE  1439 00003A92           3194            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002FC4                          3195            
00002FC4                          3196            *INTITIALIZE FOR BIT SHIFTING
00002FC4  41F9 00003A96           3197            LEA     VAR_TEMP_CLEANCOPY,A0
00002FCA  2639 00003A96           3198            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002FD0                          3199            
00002FD0                          3200  DEST_LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
00002FD0  0C02 0000               3201            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002FD4  6700 0008               3202            BEQ     DEST_MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002FD8  E24B                    3203            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002FDA  5302                    3204            SUBI.B   #1,D2                     *DECREMENT COUNTER
00002FDC  60F2                    3205            BRA     DEST_LOOP_SHIFTING4            *CONTINUE SHIFTING 
00002FDE                          3206                                               *change: NAME OF LABEL*
00002FDE                          3207  DEST_MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
00002FDE  0283 00000007           3208            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002FE4  0603 0030               3209            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002FE8  6100 0178               3210            BSR     PUSH_STACK                *PUSH TO STACK
00002FEC                          3211            
00002FEC  163C 0029               3212            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002FF0  6100 0170               3213            BSR       PUSH_STACK
00002FF4                          3214            
00002FF4  6000 012C               3215            BRA     GET_DST_SUCCESS                   *RETURN
00002FF8                          3216            
00002FF8                          3217                      
00002FF8                          3218            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
00002FF8                          3219  DEST_CHECK7    
00002FF8  0CB9 00000007 00003A9A  3220            CMPI.L  #7,VAR_LONG_ADDRESS_MODE_CHECK                      *IF (MODE != 111)
00003002  6600 011A               3221            BNE     GET_DST_FAILED                                      *THAN BRANCH TO UNCESSFULL SRC MODE READ
00003006                          3222                   
00003006                          3223            *NEXT: (MODE == 111) 
00003006                          3224            *NOW: CHECK FOR SRC REGISTER 
00003006                          3225                  *(000 = (xxx).W)
00003006                          3226                  *(001 = (xxx).L)
00003006                          3227                  *(010 = #<data>)
00003006                          3228                  
00003006                          3229            *FIND REGISTER NUMBER END LOCATION*  
00003006  13F9 00003A8B 00003A92  3230            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00003010  0239 000F 00003A92      3231            AND.B   #$0F,VAR_BYTE_END
00003018                          3232            
00003018                          3233            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003018  23C5 00003A96           3234            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
0000301E  1439 00003A92           3235            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003024                          3236            
00003024                          3237            *INTITIALIZE FOR BIT SHIFTING
00003024  41F9 00003A96           3238            LEA     VAR_TEMP_CLEANCOPY,A0
0000302A  2C39 00003A96           3239            MOVE.L  VAR_TEMP_CLEANCOPY,D6
00003030                          3240  DEST_LOOP_SHIFTING7
00003030  0C02 0000               3241            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003034  6700 0008               3242            BEQ     DEST_MASKING_NEXT7              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00003038  E24E                    3243            LSR     #1,D6                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
0000303A  5302                    3244            SUB.B   #1,D2                     *DECREMENT COUNTER
0000303C  60F2                    3245            BRA     DEST_LOOP_SHIFTING7             *CONTINUE SHIFTING
0000303E                          3246  DEST_MASKING_NEXT7
0000303E  CCBC 00000007           3247            AND.L   #7,D6                     *MASK, ONLY NEED 0-2 BIT INDEXES 
00003044                          3248           *D3 - REGISTER NUMBER NEEDED TO CHECK WHICH W/L/#<DATA>*
00003044                          3249            
00003044                          3250  DEST_CHECK_WORD  
00003044  41F9 00003A8A           3251            LEA     TEMP_REGISTER_FORMAT,A0
0000304A  1439 00003A88           3252            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003050  1082                    3253            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003052  0239 0020 00003A8A      3254            ANDI.B  #$20,TEMP_REGISTER_FORMAT                           * MASKS 0010 0000                                                     *change <SRC>*
0000305A  0C39 0020 00003A8A      3255            CMPI.B  #$20,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0010 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003062  6700 0026               3256            BEQ     DEST_CHECK_LONG                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00003066  0C06 0000               3257            CMPI.B  #0,D6                                                   *COMPARE REGISTER NUMBER WITH (000 == 000) FOR WORD
0000306A  6600 001E               3258            BNE     DEST_CHECK_LONG                                      * THE REGISTER NUMBER DOESN'T MATCH "(XXX).W" -> SO MOVE ON       
0000306E                          3259            *IT IS A WORD AT THIS POINT*
0000306E                          3260            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
0000306E  163C 0020               3261            MOVE.B    #' ',D3
00003072  6100 00EE               3262            BSR       PUSH_STACK
00003076  163C 0024               3263            MOVE.B    #'$',D3
0000307A  6100 00E6               3264            BSR       PUSH_STACK
0000307E  321D                    3265            MOVE.W    (A5)+,D1
00003080  7404                    3266            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003082  6100 E18C               3267            BSR       HEX2ASCII2STACK
00003086  6000 009A               3268            BRA       GET_DST_SUCCESS
0000308A                          3269  
0000308A                          3270  DEST_CHECK_LONG
0000308A  41F9 00003A8A           3271            LEA     TEMP_REGISTER_FORMAT,A0
00003090  1439 00003A88           3272            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003096  1082                    3273            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003098  0239 0040 00003A8A      3274            ANDI.B  #$40,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
000030A0  0C39 0040 00003A8A      3275            CMPI.B  #$40,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
000030A8  6700 002E               3276            BEQ     DEST_CHECK_IMMEDIATE                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
000030AC  0C06 0001               3277            CMPI.B  #1,D6                                                   *COMPARE REGISTER NUMBER WITH (001 == 001) FOR WORD
000030B0  6600 0026               3278            BNE     DEST_CHECK_IMMEDIATE                                      * THE REGISTER NUMBER DOESN'T MATCH "(XXX).L" -> SO MOVE ON 
000030B4                          3279            *IT IS A WORD AT THIS POINT*
000030B4                          3280            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000030B4  163C 0020               3281            MOVE.B    #' ',D3
000030B8  6100 00A8               3282            BSR       PUSH_STACK
000030BC  163C 0024               3283            MOVE.B    #'$',D3
000030C0  6100 00A0               3284            BSR       PUSH_STACK
000030C4  321D                    3285            MOVE.W    (A5)+,D1        * GET NEXT WORD INTO STACK
000030C6  7404                    3286            MOVE.L    #4,D2           * SETS SIZE = 4 FOR CONVERSION TO ASCII
000030C8  6100 E146               3287            BSR       HEX2ASCII2STACK
000030CC  321D                    3288            MOVE.W    (A5)+,D1        * GET NEXT WORD INTO STACK
000030CE  7404                    3289            MOVE.L    #4,D2          
000030D0  6100 E13E               3290            BSR       HEX2ASCII2STACK
000030D4  6000 004C               3291            BRA     GET_DST_SUCCESS
000030D8                          3292            
000030D8                          3293  DEST_CHECK_IMMEDIATE
000030D8  41F9 00003A8A           3294            LEA     TEMP_REGISTER_FORMAT,A0
000030DE  1439 00003A88           3295            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000030E4  1082                    3296            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000030E6  0239 0080 00003A8A      3297            ANDI.B  #$80,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
000030EE  0C39 0080 00003A8A      3298            CMPI.B  #$80,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
000030F6  6700 0026               3299            BEQ     GET_DST_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
000030FA  0C06 0004               3300            CMPI.B  #4,D6                                               * COMPARE REGISTER NUMBER WITH (010 == 010) FOR WORD
000030FE  6600 001E               3301            BNE     GET_DST_FAILED                                      * THE REGISTER NUMBER DOESN'T MATCH "#<DATA>" -> SO MOVE ON 
00003102                          3302            
00003102                          3303            *IT IS A WORD AT THIS POINT*
00003102                          3304            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003102  163C 0020               3305            MOVE.B    #' ',D3
00003106  6100 005A               3306            BSR       PUSH_STACK
0000310A  163C 0023               3307            MOVE.B    #'#',D3
0000310E  6100 0052               3308            BSR       PUSH_STACK
00003112  321D                    3309            MOVE.W    (A5)+,D1
00003114  7404                    3310            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003116  6100 E0F8               3311            BSR       HEX2ASCII2STACK
0000311A  6000 0006               3312            BRA       GET_DST_SUCCESS
0000311E                          3313            
0000311E                          3314  GET_DST_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
0000311E  7801                    3315            MOVE.L #1,D4
00003120  4E75                    3316            RTS
00003122                          3317  GET_DST_SUCCESS 
00003122  4E75                    3318            RTS
00003124                          3319  
00003124                          3320  
00003124                          3321  *---------------------------------------------------------------------------*
00003124                          3322  * STACK/QUEUE INTERFACE
00003124                          3323  *---------------------------------------------------------------------------*
00003124                          3324  PRINT_STACK
00003124  0C39 0000 00003A84      3325            CMP.B     #0,COUNTER
0000312C  6700 000E               3326            BEQ       PRINT_STACK_RETURN             *CHECK IF LOOP IS FINISHED
00003130                          3327            
00003130                          3328  PRINT_STACK_HELPER
00003130  6100 0038               3329            BSR      POP_STACK          *PRINTS ADDRESS
00003134  103C 0006               3330            MOVE.B   #6,D0              *Display single character in D1.B. 
00003138  4E4F                    3331            TRAP     #15             *ACTIVATES PRINT
0000313A                          3332  
0000313A  60E8                    3333            BRA       PRINT_STACK
0000313C                          3334  PRINT_STACK_RETURN
0000313C  4E75                    3335            RTS
0000313E                          3336            
0000313E                          3337            
0000313E                          3338  PRINT_QUEUE
0000313E  0C39 0000 00003A84      3339            CMP.B     #0,COUNTER
00003146  6700 0018               3340            BEQ       PRINT_QUEUE_RETURN             *CHECK IF LOOP IS FINISHED
0000314A                          3341            
0000314A                          3342  PRINT_QUEUE_HELPER
0000314A  33F9 00003A84 00003A86  3343            MOVE.W   COUNTER,QUEUE_COUNTER
00003154  6100 0022               3344            BSR      POP_FRONT          *PRINTS ADDRESS
00003158  103C 0006               3345            MOVE.B   #6,D0              *Display single character in D1.B. 
0000315C  4E4F                    3346            TRAP     #15             *ACTIVATES PRINT
0000315E                          3347  
0000315E  60DE                    3348            BRA       PRINT_QUEUE
00003160                          3349  PRINT_QUEUE_RETURN
00003160  4E75                    3350            RTS
00003162                          3351            
00003162                          3352  *PUSHES.W CONTENTS OF [D3] INTO STACK          
00003162                          3353  PUSH_STACK
00003162  1503                    3354              MOVE.B  D3,-(A2)
00003164  6100 0058               3355              BSR     INCREMENT
00003168  4E75                    3356              RTS
0000316A                          3357  *POPS.W TOP OF STACK INTO [D1], SO ITS READY TO PRINT WITH TRAP 15
0000316A                          3358  *         MOVE.W   (A2)+,D1           *PRINTS ADDRESS
0000316A                          3359  *         MOVE.B   #15,D0             *PRINTS ACCORDING TO D2 BASE VALUE
0000316A                          3360  *         MOVE.B   #16,D2             *PRINTS BASED 16 NUMBER
0000316A                          3361  *         TRAP        #15             *ACTIVATES PRINT
0000316A                          3362  POP_STACK
0000316A  BECA                    3363              CMPA.W   A2,SP            *CHECKS IF THERE IS ANYTHING TO PUSH
0000316C  6700 0008               3364              BEQ     POP_RETURN        *IF NOTHING TO PUSH THAN JUST RETURN
00003170  121A                    3365              MOVE.B  (A2)+,D1 
00003172  6100 0052               3366              BSR     DECREMENT
00003176                          3367  POP_RETURN
00003176  4E75                    3368              RTS 
00003178                          3369        
00003178                          3370  *USE [A4] AS SECOND POINTER IN SHIFTING      
00003178  0C39 0000 00003A86      3371  POP_FRONT   CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
00003180  6700 0030               3372              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
00003184                          3373              
00003184                          3374              
00003184                          3375              *POSITION THE POINTERS A[4] RIGHT BEHIND A[2] WHICH IS RIGHT BEHIND STACK
00003184  347C 7000               3376              MOVEA.W #STACK,A2   *START A2 AT STACK
00003188  0622 0000               3377              ADD.B   #0,-(A2)    *SHIFT A2 TO THE BOTTOM OF THE STACK
0000318C  384A                    3378              MOVEA.W A2,A4     *START A4 RIGHT ABOVE A2
0000318E  0624 0000               3379              ADD.B   #0,-(A4)  *leash one more higher in stack (a4)
00003192  1212                    3380              MOVE.B  (A2),D1     *POP CONTENTS INTO D1
00003194                          3381  POP_SHIFT_LOOP
00003194  0C39 0000 00003A86      3382              CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
0000319C  6700 0014               3383              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
000031A0  1494                    3384              MOVE.B  (A4),(A2)   *SHIFT CONTENT DOWN THE STACK
000031A2  0624 0000               3385              ADD.B   #0,-(A4)
000031A6  0622 0000               3386              ADD.B   #0,-(A2) *SHIFT POINTERS DOWN THE STACK
000031AA  5339 00003A86           3387              SUB.B   #1,QUEUE_COUNTER *DECREMENT INTERNAL QUEUE COUNTER
000031B0                          3388              
000031B0  60E2                    3389              BRA     POP_SHIFT_LOOP
000031B2                          3390                          
000031B2                          3391  POP_FRONT_RETURN 
000031B2                          3392              *RESET A2 BACK TO SP
000031B2  347C 7000               3393              MOVEA.W #STACK,A2    
000031B6  5339 00003A84           3394              SUB.B   #1,COUNTER *DECREMENT STACK COUNTER       
000031BC  4E75                    3395              RTS   
000031BE                          3396  
000031BE                          3397  INCREMENT
000031BE  5239 00003A84           3398              ADD.B   #1, COUNTER
000031C4  4E75                    3399              RTS           
000031C6                          3400  DECREMENT
000031C6  5339 00003A84           3401              SUB.B   #1, COUNTER
000031CC  4E75                    3402              RTS           
000031CE                          3403  CLEAR_STACK
000031CE  0C39 0000 00003A84      3404              CMP.B     #0,COUNTER
000031D6  6700 0006               3405              BEQ       CLEAR_RETURN
000031DA  618E                    3406              BSR       POP_STACK
000031DC  60F0                    3407              BRA       CLEAR_STACK
000031DE                          3408   
000031DE                          3409  CLEAR_RETURN
000031DE  4E75                    3410              RTS    
000031E0                          3411  *---------------------------------------------------------------------------*
000031E0                          3412  * TERMINATE
000031E0                          3413  *---------------------------------------------------------------------------*
000031E0                          3414  TERMINATE   
000031E0  43F9 00003590           3415              LEA     FINMSG,A1
000031E6  103C 000E               3416              MOVE.B  #14,D0
000031EA  4E4F                    3417              TRAP    #15
000031EC                          3418  
000031EC  103C 0009               3419              MOVE.B  #9,D0
000031F0  4E4F                    3420              TRAP    #15
000031F2                          3421  
000031F2                          3422  *---------------------------------------------------------------------------*
000031F2                          3423  * Data storage                                                 
000031F2                          3424  *---------------------------------------------------------------------------*  
000031F2                          3425  WELCOME
000031F2= 20 20 20 20 20 20 ...   3426              DC.B '                         ___     ___ ___        ___   ___ ___                 ',CR,LF
00003242= 3D 3D 3D 3D 3D 20 ...   3427              DC.B '=====           \  /\  /|___|   |   |   ||\  /||___    | |   |           =====',CR,LF
00003292= 3D 3D 3D 3D 3D 20 ...   3428              DC.B '=====            \/  \/ |___|___|___|___|| \/ ||___    | |___|           =====',CR,LF
000032E2                          3429      
000032E2= 20 20 20 20 20 20 ...   3430              DC.B '                        ___ ___ ___  ___      ___                             ',CR,LF
00003332= 20 20 20 20 20 20 ...   3431              DC.B '                       |     | |___)|    |   |___                             ',CR,LF 
00003382= 20 20 20 20 20 20 ...   3432              DC.B '                       |___ _|_|\___|___ |___|___                             ',CR,LF
000033D2                          3433      
000033D2= 20 20 20 20 20 20 ...   3434              DC.B '           __  ___ ___   _   ___  ___  ___        ___      ___ ___            ',CR,LF
00003422= 3D 3D 3D 3D 3D 20 ...   3435              DC.B '=====     |  \  | |___  /_\ |___ |___ |___ |\  /||___||   |___|___)      =====',CR,LF 
00003472= 3D 3D 3D 3D 3D 20 ...   3436              DC.B '=====     |__/ _|_ ___|/   \ ___| ___||___ | \/ ||___||___|___|\___      =====',CR,LF,CR,LF,CR,LF,0
000034C7                          3437  
000034C7                          3438  PROMPT_START
000034C7= 50 6C 65 61 73 65 ...   3439              DC.B    'Please enter a hexadecimal starting address.',CR,LF,0
000034F6                          3440      
000034F6                          3441  PROMPT_END
000034F6= 50 6C 65 61 73 65 ...   3442              DC.B    'Please enter a hexadecimal ending address.',CR,LF,0
00003523= 0D 0A 48 69 74 20 ...   3443  DISP_NEXT   DC.B    CR,LF,'Hit Enter to print the next 30 lines.',CR,LF,0            
0000354D= 57 6F 75 6C 64 20 ...   3444  REPEATMSG   DC.B    'Would you like to run again? Press Y to continue or N to finish.',CR,LF,0
00003590= 54 68 61 6E 6B 20 ...   3445  FINMSG      DC.B    'Thank you for using Circle Disassembler.',CR,LF,0
000035BB= 45 72 72 6F 72 3A ...   3446  ERRMSG_1    DC.B    'Error: Invalid Input Address',CR,LF,0
000035DA= 45 72 72 6F 72 3A ...   3447  ERRMSG_3    DC.B    'Error: Invalid Input Address (Odd)',CR,LF,0
000035FF= 45 72 72 6F 72 3A ...   3448  ERRMSG_5    DC.B    'Error: Invalid Input Address (start > end)',CR,LF,0
0000362C                          3449  
0000362C                          3450  VR_S_ADDR   DS.B    80                      * allocate storage space for the starting address
0000367C                          3451  VR_E_ADDR   DS.B    80                      * allocate storage space for the ending address
000036CC                          3452  S_ADDR_HX   DS.L    1                       * allocate storage space for the starting address in hex
000036D0                          3453  E_ADDR_HX   DS.L    1                       * allocate storage space for the ending address in hex
000036D4= 0D 0A 00                3454  ENDLINE_M   DC.B    CR,LF,0
000036D7                          3455  TMPINPUT    DS.B    80                      * temp store user input
00003727                          3456  TMPOUTPUT   DS.B    80                      * temp store prog output
00003777= 20 20 20 4F 52 49 ...   3457  DISP_ORI_B  DC.B    '   ORI.B',0
00003780= 20 20 20 4F 52 49 ...   3458  DISP_ORI_W  DC.B    '   ORI.W',0
00003789= 20 20 20 4F 52 49 ...   3459  DISP_ORI_L  DC.B    '   ORI.L',0
00003792= 20 20 20 45 4F 52 ...   3460  DISP_EORI_B  DC.B    '   EORI.B',0
0000379C= 20 20 20 45 4F 52 ...   3461  DISP_EORI_W  DC.B    '   EORI.W',0
000037A6= 20 20 20 45 4F 52 ...   3462  DISP_EORI_L  DC.B    '   EORI.L',0
000037B0= 20 20 20 42 54 53 ...   3463  DISP_BTST   DC.B    '   BTST',0
000037B8= 20 20 20 43 4D 50 ...   3464  DISP_CMPI_B  DC.B    '   CMPI.B',0
000037C2= 20 20 20 43 4D 50 ...   3465  DISP_CMPI_W  DC.B    '   CMPI.W',0
000037CC= 20 20 20 43 4D 50 ...   3466  DISP_CMPI_L  DC.B    '   CMPI.L',0
000037D6= 20 20 20 44 41 54 ...   3467  DISP_DATA   DC.B    '   DATA',0
000037DE= 20 20 20 4D 4F 56 ...   3468  DISP_MOVE_B DC.B    '   MOVE.B',0
000037E8= 20 20 20 4D 4F 56 ...   3469  DISP_MOVE_W DC.B    '   MOVE.W',0
000037F2= 20 20 20 4D 4F 56 ...   3470  DISP_MOVE_L DC.B    '   MOVE.L',0
000037FC= 20 20 20 52 54 53 00    3471  DISP_RTS    DC.B    '   RTS',0
00003803= 20 20 20 4A 53 52 00    3472  DISP_JSR    DC.B    '   JSR',0
0000380A= 20 20 20 4E 45 47 ...   3473  DISP_NEG_B    DC.B    '   NEG.B',0
00003813= 20 20 20 4E 45 47 ...   3474  DISP_NEG_W    DC.B    '   NEG.W',0
0000381C= 20 20 20 4E 45 47 ...   3475  DISP_NEG_L    DC.B    '   NEG.L',0
00003825= 20 20 20 4E 4F 54 ...   3476  DISP_NOT_B  DC.B    '   NOT.B',0
0000382E= 20 20 20 4E 4F 54 ...   3477  DISP_NOT_W  DC.B    '   NOT.W',0
00003837= 20 20 20 4E 4F 54 ...   3478  DISP_NOT_L  DC.B    '   NOT.L',0
00003840= 20 20 20 4C 45 41 00    3479  DISP_LEA    DC.B    '   LEA',0
00003847= 20 20 20 4D 4F 56 ...   3480  DISP_MOVEM_W    DC.B    '   MOVEM.W',0
00003852= 20 20 20 4D 4F 56 ...   3481  DISP_MOVEM_L    DC.B    '   MOVEM.L',0
0000385D= 20 20 20 41 44 44 ...   3482  DISP_ADDQ_B DC.B    '   ADDQ.B',0
00003867= 20 20 20 41 44 44 ...   3483  DISP_ADDQ_W DC.B    '   ADDQ.W',0
00003871= 20 20 20 41 44 44 ...   3484  DISP_ADDQ_L DC.B    '   ADDQ.L',0
0000387B= 20 20 20 44 49 56 ...   3485  DISP_DIVS   DC.B    '   DIVS',0
00003883= 20 20 20 53 55 42 ...   3486  DISP_SUB_B  DC.B    '   SUB.B',0
0000388C= 20 20 20 53 55 42 ...   3487  DISP_SUB_W  DC.B    '   SUB.W',0
00003895= 20 20 20 53 55 42 ...   3488  DISP_SUB_L  DC.B    '   SUB.L',0
0000389E= 20 20 20 53 55 42 ...   3489  DISP_SUBI_B  DC.B    '   SUBI.B',0
000038A8= 20 20 20 53 55 42 ...   3490  DISP_SUBI_W  DC.B    '   SUBI.W',0
000038B2= 20 20 20 53 55 42 ...   3491  DISP_SUBI_L  DC.B    '   SUBI.L',0
000038BC= 20 20 20 53 55 42 ...   3492  DISP_SUBA_W  DC.B    '   SUBA.W',0
000038C6= 20 20 20 53 55 42 ...   3493  DISP_SUBA_L  DC.B    '   SUBA.L',0
000038D0= 20 20 20 45 4F 52 ...   3494  DISP_EOR_B  DC.B    '   EOR.B',0
000038D9= 20 20 20 45 4F 52 ...   3495  DISP_EOR_W  DC.B    '   EOR.W',0
000038E2= 20 20 20 45 4F 52 ...   3496  DISP_EOR_L  DC.B    '   EOR.L',0
000038EB= 20 20 20 43 4D 50 ...   3497  DISP_CMP_B  DC.B    '   CMP.B',0
000038F4= 20 20 20 43 4D 50 ...   3498  DISP_CMP_W  DC.B    '   CMP.W',0
000038FD= 20 20 20 43 4D 50 ...   3499  DISP_CMP_L  DC.B    '   CMP.L',0
00003906= 20 20 20 43 4D 50 ...   3500  DISP_CMPA_W  DC.B    '   CMPA.W',0
00003910= 20 20 20 43 4D 50 ...   3501  DISP_CMPA_L  DC.B    '   CMPA.L',0
0000391A= 20 20 20 4D 55 4C ...   3502  DISP_MULS_W DC.B    '   MULS.W',0
00003924= 20 20 20 41 4E 44 ...   3503  DISP_AND_B  DC.B    '   AND.B',0
0000392D= 20 20 20 41 4E 44 ...   3504  DISP_AND_W  DC.B    '   AND.W',0
00003936= 20 20 20 41 4E 44 ...   3505  DISP_AND_L  DC.B    '   AND.L',0
0000393F= 20 20 20 41 44 44 ...   3506  DISP_ADD_B  DC.B    '   ADD.B',0
00003948= 20 20 20 41 44 44 ...   3507  DISP_ADD_W  DC.B    '   ADD.W',0
00003951= 20 20 20 41 44 44 ...   3508  DISP_ADD_L  DC.B    '   ADD.L',0
0000395A= 20 20 20 41 44 44 ...   3509  DISP_ADDA_W DC.B    '   ADDA.W',0
00003964= 20 20 20 41 44 44 ...   3510  DISP_ADDA_L DC.B    '   ADDA.L',0
0000396E= 20 20 20 4C 53 52 ...   3511  DISP_LSR_B  DC.B    '   LSR.B',0
00003977= 20 20 20 4C 53 4C ...   3512  DISP_LSL_B  DC.B    '   LSL.B',0
00003980= 20 20 20 4C 53 52 ...   3513  DISP_LSR_W  DC.B    '   LSR.W',0
00003989= 20 20 20 4C 53 4C ...   3514  DISP_LSL_W  DC.B    '   LSL.W',0
00003992= 20 20 20 4C 53 52 ...   3515  DISP_LSR_L  DC.B    '   LSR.L',0
0000399B= 20 20 20 4C 53 4C ...   3516  DISP_LSL_L  DC.B    '   LSL.L',0
000039A4= 20 20 20 41 53 52 ...   3517  DISP_ASR_B  DC.B    '   ASR.B',0
000039AD= 20 20 20 41 53 4C ...   3518  DISP_ASL_B  DC.B    '   ASL.B',0
000039B6= 20 20 20 41 53 52 ...   3519  DISP_ASR_W  DC.B    '   ASR.W',0
000039BF= 20 20 20 41 53 4C ...   3520  DISP_ASL_W  DC.B    '   ASL.W',0
000039C8= 20 20 20 41 53 52 ...   3521  DISP_ASR_L  DC.B    '   ASR.L',0
000039D1= 20 20 20 41 53 4C ...   3522  DISP_ASL_L  DC.B    '   ASL.L',0
000039DA= 20 20 20 52 4F 52 ...   3523  DISP_ROR_B  DC.B    '   ROR.B',0
000039E3= 20 20 20 52 4F 4C ...   3524  DISP_ROL_B  DC.B    '   ROL.B',0
000039EC= 20 20 20 52 4F 52 ...   3525  DISP_ROR_W  DC.B    '   ROR.W',0
000039F5= 20 20 20 52 4F 4C ...   3526  DISP_ROL_W  DC.B    '   ROL.W',0
000039FE= 20 20 20 52 4F 52 ...   3527  DISP_ROR_L  DC.B    '   ROR.L',0
00003A07= 20 20 20 52 4F 4C ...   3528  DISP_ROL_L  DC.B    '   ROL.L',0
00003A10= 20 20 20 42 52 41 00    3529  DISP_BRA    DC.B    '   BRA',0
00003A17= 20 20 20 42 4C 54 00    3530  DISP_BLT    DC.B    '   BLT',0
00003A1E= 20 20 20 42 45 51 00    3531  DISP_BEQ    DC.B    '   BEQ',0
00003A25= 20 20 20 42 4E 45 00    3532  DISP_BNE    DC.B    '   BNE',0
00003A2C= 20 20 20 42 48 49 00    3533  DISP_BHI    DC.B    '   BHI',0
00003A33= 20 20 20 4D 4F 56 ...   3534  DISP_MOVEA_W    DC.B    '   MOVEA.W',0
00003A3E= 20 20 20 4D 4F 56 ...   3535  DISP_MOVEA_L    DC.B    '   MOVEA.L',0
00003A49                          3536  
00003A49= 20 20 20 24 00          3537  DISP_HEX     DC.B    '   $',0
00003A4E= 20 20 20 44 00          3538  DISP_D  DC.B    '   D',0
00003A53= 20 20 20 41 00          3539  DISP_A  DC.B    '   A',0
00003A58= 20 20 20 28 00          3540  DISP_OP  DC.B    '   (',0
00003A5D= 29 00                   3541  DISP_CP  DC.B   ')',0
00003A5F= 20 20 20 28 41 00       3542  DISP_AOP  DC.B    '   (A',0
00003A65                          3543  
00003A65= 20 20 20 2D 28 41 00    3544  DISP_PRE    DC.B    '   -(A',0
00003A6C= 29 2B 00                3545  DISP_POST   DC.B    ')+',0
00003A6F= 20 20 20 23 00          3546  DISP_LB DC.B    '   #',0
00003A74= 30 00                   3547  DISP_0  DC.B    '0',0
00003A76= 31 00                   3548  DISP_1  DC.B    '1',0
00003A78= 32 00                   3549  DISP_2  DC.B    '2',0
00003A7A= 33 00                   3550  DISP_3  DC.B    '3',0
00003A7C= 34 00                   3551  DISP_4  DC.B    '4',0
00003A7E= 35 00                   3552  DISP_5  DC.B    '5',0
00003A80= 36 00                   3553  DISP_6  DC.B    '6',0
00003A82= 37 00                   3554  DISP_7  DC.B    '7',0
00003A84                          3555  
00003A84                          3556  *STACK INTERFACE VARIABLES*
00003A84                          3557  COUNTER         DS.W    1
00003A86                          3558  QUEUE_COUNTER   DS.W    1
00003A88                          3559  
00003A88                          3560  *EA DECODING INTERFACE VARIABLES* 
00003A88                          3561  DEST_REGISTER_FORMAT    DS.B    1           *all address modes acceptable standard
00003A89                          3562  SRC_REGISTER_FORMAT  DS.B    1           *all address modes acceptable standard
00003A8A                          3563  TEMP_REGISTER_FORMAT    DS.B    1           *place holder for masking other register formats
00003A8B                          3564  
00003A8B                          3565  *FORMAT OF WHERE TO GET THE EA BY THE ENDING BIT AND STARTING BIT
00003A8B                          3566  * WORD + WORD = LONG
00003A8B                          3567  * (STARTING BIT) + (ENDING BIT) = 2 HEX CHAR
00003A8B                          3568  * A              + F            = AF         <= EXAMPLE
00003A8B                          3569  *(10TH BIT)      + (15TH BIT)   = CHECK BITS 15 THROUGH 10
00003A8B                          3570  GET_DST_START_END    DS.B    1
00003A8C                          3571  GET_SRC_START_END    DS.B    1
00003A8D                          3572  
00003A8D                          3573  *STORES THE START + END BITS HERE (FROM ABOVE)
00003A8E                          3574  VAR_BYTE_START      DS.L    1
00003A92                          3575  VAR_BYTE_END        DS.L    1
00003A96                          3576  VAR_TEMP_CLEANCOPY  DS.L    1
00003A9A                          3577  
00003A9A                          3578  VAR_LONG_ADDRESS_MODE_CHECK        DS.L    1       *holds the bits 0-2 in long form
00003A9E                          3579  
00003A9E                          3580  *MORE FOR STACK USAGE*
00003A9E= 2C 00                   3581  DISP_COMMA  DC.B    ',',0
00003AA0= 20 20 20 00             3582  DISP_INDENT  DC.B    '   ',0
00003AA4                          3583  
00003AA4                          3584  *NEXT WORD POINTER: FOR IDENTIFING (xxx).W or (xxx).L*
00003AA4                          3585  POINTER_WORD    DS.W       1
00003AA6                          3586  
00003AA6                          3587  
00003AA6                          3588  
00003AA6                          3589  *---------------------------------------------------------------------------*
00003AA6                          3590  * Ends program
00003AA6                          3591  *---------------------------------------------------------------------------*
00003AA6                          3592              END    START                    * last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASC2HXLP            116C
ASCII2HEX           1166
ASC_ERR             11C8
ASC_LOW             11AA
ASC_NUM             11BA
ASC_SFT             11C2
ASC_UPP             11B2
CHECK0              28D6
CHECK1              2960
CHECK2              29EA
CHECK3              2A84
CHECK4              2B26
CHECK7              2BC8
CHECK_IMMEDIATE     2CA8
CHECK_LONG          2C5A
CHECK_WORD          2C14
CLEAR_RETURN        31DE
CLEAR_STACK         31CE
COUNTER             3A84
CR                  D
DECREMENT           31C6
DEST_CHECK0         2D06
DEST_CHECK1         2D90
DEST_CHECK2         2E1A
DEST_CHECK3         2EB4
DEST_CHECK4         2F56
DEST_CHECK7         2FF8
DEST_CHECK_IMMEDIATE  30D8
DEST_CHECK_LONG     308A
DEST_CHECK_WORD     3044
DEST_LOOP_SHIFTING  2D70
DEST_LOOP_SHIFTING1  2DFA
DEST_LOOP_SHIFTING2  2E8C
DEST_LOOP_SHIFTING3  2F26
DEST_LOOP_SHIFTING4  2FD0
DEST_LOOP_SHIFTING7  3030
DEST_MASKING_NEXT   2D7E
DEST_MASKING_NEXT1  2E08
DEST_MASKING_NEXT2  2E9A
DEST_MASKING_NEXT3  2F34
DEST_MASKING_NEXT4  2FDE
DEST_MASKING_NEXT7  303E
DEST_MODE           248E
DEST_REGISTER       275E
DEST_REGISTER_FORMAT  3A88
DISPLAY_30_LINES    1314
DISP_0              3A74
DISP_1              3A76
DISP_2              3A78
DISP_3              3A7A
DISP_4              3A7C
DISP_5              3A7E
DISP_6              3A80
DISP_7              3A82
DISP_A              3A53
DISP_ADDA_L         3964
DISP_ADDA_W         395A
DISP_ADDQ_B         385D
DISP_ADDQ_L         3871
DISP_ADDQ_W         3867
DISP_ADD_B          393F
DISP_ADD_L          3951
DISP_ADD_W          3948
DISP_AND_B          3924
DISP_AND_L          3936
DISP_AND_W          392D
DISP_AOP            3A5F
DISP_ASL_B          39AD
DISP_ASL_L          39D1
DISP_ASL_W          39BF
DISP_ASR_B          39A4
DISP_ASR_L          39C8
DISP_ASR_W          39B6
DISP_BEQ            3A1E
DISP_BHI            3A2C
DISP_BLT            3A17
DISP_BNE            3A25
DISP_BRA            3A10
DISP_BTST           37B0
DISP_CMPA_L         3910
DISP_CMPA_W         3906
DISP_CMPI_B         37B8
DISP_CMPI_L         37CC
DISP_CMPI_W         37C2
DISP_CMP_B          38EB
DISP_CMP_L          38FD
DISP_CMP_W          38F4
DISP_COMMA          3A9E
DISP_CP             3A5D
DISP_D              3A4E
DISP_DATA           37D6
DISP_DIVS           387B
DISP_EORI_B         3792
DISP_EORI_L         37A6
DISP_EORI_W         379C
DISP_EOR_B          38D0
DISP_EOR_L          38E2
DISP_EOR_W          38D9
DISP_HEX            3A49
DISP_INDENT         3AA0
DISP_JSR            3803
DISP_LB             3A6F
DISP_LEA            3840
DISP_LSL_B          3977
DISP_LSL_L          399B
DISP_LSL_W          3989
DISP_LSR_B          396E
DISP_LSR_L          3992
DISP_LSR_W          3980
DISP_MOVEA_L        3A3E
DISP_MOVEA_W        3A33
DISP_MOVEM_L        3852
DISP_MOVEM_W        3847
DISP_MOVE_B         37DE
DISP_MOVE_L         37F2
DISP_MOVE_W         37E8
DISP_MULS_W         391A
DISP_NEG_B          380A
DISP_NEG_L          381C
DISP_NEG_W          3813
DISP_NEXT           3523
DISP_NOT_B          3825
DISP_NOT_L          3837
DISP_NOT_W          382E
DISP_OP             3A58
DISP_ORI_B          3777
DISP_ORI_L          3789
DISP_ORI_W          3780
DISP_POST           3A6C
DISP_PRE            3A65
DISP_ROL_B          39E3
DISP_ROL_L          3A07
DISP_ROL_W          39F5
DISP_ROR_B          39DA
DISP_ROR_L          39FE
DISP_ROR_W          39EC
DISP_RTS            37FC
DISP_SUBA_L         38C6
DISP_SUBA_W         38BC
DISP_SUBI_B         389E
DISP_SUBI_L         38B2
DISP_SUBI_W         38A8
DISP_SUB_B          3883
DISP_SUB_L          3895
DISP_SUB_W          388C
D_MODE000           2530
D_MODE010           2578
D_MODE011           25D8
D_MODE100           25F8
D_MODE111           264A
EA_ARITH            2428
EA_DATA             14F2
EA_GEN              2474
EA_MOVEA            244E
EA_NOSRC            2414
ENDLINE_M           36D4
END_ADDR            10B2
ERRMSG_1            35BB
ERRMSG_3            35DA
ERRMSG_5            35FF
ERROR_1             1116
ERROR_2             1126
ERROR_3             1136
ERROR_4             1146
ERROR_5             1156
E_ADDR_HX           36D0
FINMSG              3590
GET_DST_FAILED      311E
GET_DST_START_END   3A8B
GET_DST_SUCCESS     3122
GET_EA_EA_DEST      2CF4
GET_EA_EA_SRC       28C4
GET_SRC_FAILED      2CEE
GET_SRC_START_END   3A8C
GET_SRC_SUCCESS     2CF2
HEX2ASCII           11CE
HEX2ASCII2STACK     1210
HEX_CHAR            11FC
HEX_CONT            1200
HEX_LOOP            11E2
IMMD_B              26FE
IMMD_L              273E
IMMD_W              271E
IMMEDIATE           26CE
INCREMENT           31BE
INTRO               1028
IS_ODD              1254
IS_ODD_ERR          126A
JMPTABLE            1340
LF                  A
LONGMODE            26A2
LOOP_SHIFTING       2940
LOOP_SHIFTING1      29CA
LOOP_SHIFTING2      2A5C
LOOP_SHIFTING3      2AF6
LOOP_SHIFTING4      2BA0
MAIN                1270
MASKING_NEXT        294E
MASKING_NEXT1       29D8
MASKING_NEXT2       2A6A
MASKING_NEXT3       2B04
MASKING_NEXT4       2BAE
MODE000             251C
MODE001             2544
MODE010             2558
MODE011             2598
MODE100             25B8
MODE111             2618
NEXTLINES           1322
OP0000              13A0
OP0001              15C6
OP0010              1634
OP0011              1732
OP0100              182E
OP0101              19C8
OP0110              1A44
OP0111              1AD2
OP1000              1AD6
OP1001              1B12
OP1010              1BEA
OP1011              1BEE
OP1100              1CEA
OP1101              1D86
OP1101_ADDA_L       1DB8
OP1101_ADDA_W       1E2A
OP1101_ADD_RETURN   20D4
OP1101_DETERMINE_DN_EA_OR_EA_DN  1E9C
OP1101_DN_EA        1ED4
OP1101_EA_DN        1FD4
OP1101_PRINT_B      1FFC
OP1101_PRINT_B2     1EFC
OP1101_PRINT_L      208C
OP1101_PRINT_L2     1F8C
OP1101_PRINT_W      2044
OP1101_PRINT_W2     1F44
OP1110              2162
OP1111              2410
OP_ADDA_L           214A
OP_ADDA_W           2132
OP_ADDQ             19E8
OP_ADDQ_B           1A0E
OP_ADDQ_L           1A32
OP_ADDQ_W           1A20
OP_ADD_B            20EA
OP_ADD_L            211A
OP_ADD_W            2102
OP_AND_B            1D50
OP_AND_L            1D74
OP_AND_W            1D62
OP_ASL              2302
OP_ASL_B            2326
OP_ASL_L            2338
OP_ASL_W            234A
OP_ASR              22A8
OP_ASR_B            22CC
OP_ASR_L            22DE
OP_ASR_W            22F0
OP_ASX              21C4
OP_BEQ              1AA8
OP_BHI              1A8C
OP_BLT              1AC4
OP_BNE              1A9A
OP_BRA              1AB6
OP_BTST             1414
OP_CMPA_L           1C5A
OP_CMPA_W           1C48
OP_CMPI             151A
OP_CMPI_B           153A
OP_CMPI_L           155E
OP_CMPI_W           154C
OP_CMP_B            1C6C
OP_CMP_L            1C9C
OP_CMP_W            1C84
OP_DATA             14CE
OP_DIVS             1AFE
OP_EORI             1422
OP_EORI_B           1442
OP_EORI_L           1466
OP_EORI_W           1454
OP_EOR_B            1CB4
OP_EOR_L            1CD8
OP_EOR_W            1CC6
OP_JSR              19A6
OP_LEA              18D4
OP_LSL              224E
OP_LSL_B            2272
OP_LSL_L            2284
OP_LSL_W            2296
OP_LSR              21F4
OP_LSR_B            2218
OP_LSR_L            222A
OP_LSR_W            223C
OP_LSX              21AC
OP_MOVEA_L          16C2
OP_MOVEA_W          17BE
OP_MOVEM_L          18C2
OP_MOVEM_W          18B0
OP_MOVE_B           15CC
OP_MOVE_L           165A
OP_MOVE_W           1756
OP_MULS             1D3C
OP_NEG              18E8
OP_NEG_B            1908
OP_NEG_L            1938
OP_NEG_W            1920
OP_NOT              1950
OP_NOT_B            1970
OP_NOT_L            1994
OP_NOT_W            1982
OP_ORI              1570
OP_ORI_B            1590
OP_ORI_L            15B4
OP_ORI_W            15A2
OP_ROL              23B6
OP_ROL_B            23DA
OP_ROL_L            23EC
OP_ROL_W            23FE
OP_ROR              235C
OP_ROR_B            2380
OP_ROR_L            2392
OP_ROR_W            23A4
OP_ROX              21DC
OP_RTS              19BA
OP_SUBA_L           1BD8
OP_SUBA_W           1BC6
OP_SUBI             1478
OP_SUBI_B           1498
OP_SUBI_L           14BC
OP_SUBI_W           14AA
OP_SUB_B            1B7E
OP_SUB_L            1BAE
OP_SUB_W            1B96
OUTPUT_PROCESSED_DATA  12F4
POINTER_WORD        3AA4
POP_FRONT           3178
POP_FRONT_RETURN    31B2
POP_RETURN          3176
POP_SHIFT_LOOP      3194
POP_STACK           316A
PRINT_QUEUE         313E
PRINT_QUEUE_HELPER  314A
PRINT_QUEUE_RETURN  3160
PRINT_STACK         3124
PRINT_STACK_HELPER  3130
PRINT_STACK_RETURN  313C
PROGLP              100A
PROMPT_END          34F6
PROMPT_START        34C7
PUSH_STACK          3162
QUEUE_COUNTER       3A86
REG_0               2812
REG_1               2820
REG_2               282E
REG_3               283C
REG_4               284A
REG_5               2858
REG_6               2866
REG_7               2874
REPEAT              2882
REPEATMSG           354D
RETURN              11CC
SRC_LOOP_SHIFTING   2C00
SRC_MASKING_NEXT    2C0E
SRC_MODE            24D2
SRC_REGISTER        27BA
SRC_REGISTER_FORMAT  3A89
STACK               7000
STACK_HEX_CHAR      123E
STACK_HEX_CONT      1242
STACK_HEX_LOOP      1224
START               1004
START_ADDR          1060
S_ADDR_HX           36CC
TEMP_REGISTER_FORMAT  3A8A
TERMINATE           31E0
TESTING             1036
TMPINPUT            36D7
TMPOUTPUT           3727
VAR_BYTE_END        3A92
VAR_BYTE_START      3A8E
VAR_LONG_ADDRESS_MODE_CHECK  3A9A
VAR_TEMP_CLEANCOPY  3A96
VR_E_ADDR           367C
VR_S_ADDR           362C
WELCOME             31F2
WORDMODE            2676

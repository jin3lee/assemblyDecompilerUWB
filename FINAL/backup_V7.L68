00001004 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/9/2014 3:37:01 PM

00000000                             1  *---------------------------------------------------------------------------*
00000000                             2  * Title      : 68K Disassembler
00000000                             3  * Written by : Team Circle
00000000                             4  * Date       : 12/05/14
00000000                             5  * Description: Scans a section of memory and converts its
00000000                             6  *              contents to a listing of valid assembly 
00000000                             7  *              language instructions
00000000                             8  *---------------------------------------------------------------------------*
00000000                             9  
00000000                            10  *---------------------------------------------------------------------------*
00000000                            11  * System Equates                                                 
00000000                            12  *---------------------------------------------------------------------------*
00000000  =0000000D                 13  CR          EQU     $0D                     * ASCII for Carriage Return
00000000  =0000000A                 14  LF          EQU     $0A                     * ASCII for Line Feed 
00000000  =00007000                 15  STACK       EQU     $7000                   * Initial Stack Pointer                         
00000000                            16              
00000000                            17  *---------------------------------------------------------------------------*
00000000                            18  * Reserved Registers
00000000                            19  *---------------------------------------------------------------------------*  
00000000                            20  * D0 - I/O
00000000                            21  * D1 - Temporary storage of processing data
00000000                            22  * D3 - [PUSH_STACK]
00000000                            23  * D4 - Opcode size (0 - byte; 1- word; 2-long)
00000000                            24  * D5 - Processing data
00000000                            25  * D6 - Loop counter to print 30 lines
00000000                            26  * D7 - Error flag
00000000                            27  * A2 - [STACK POINTER]
00000000                            28  * A5 - Processing address in hex
00000000                            29  
00000000                            30  *---------------------------------------------------------------------------*
00000000                            31  * Start and loop program
00000000                            32  *---------------------------------------------------------------------------*  
00001000                            33              ORG     $1000
00001000  4FF8 7000                 34              LEA     STACK,SP
00001004                            35  START:            
00001004  4EB9 00001028             36              JSR     INTRO                 
0000100A  4EB9 0000106C             37  PROGLP      JSR     START_ADDR
00001010  4EB9 000010BE             38              JSR     END_ADDR
00001016  43F9 000041C4             39              LEA     ENDLINE_M,A1           * Add a new line
0000101C  103C 000E                 40              MOVE.B  #14, D0                  * Display A1
00001020  4E4F                      41              TRAP    #15
00001022                            42              
00001022  4EF9 0000127C             43              JMP     MAIN
00001028                            44              
00001028                            45  *---------------------------------------------------------------------------*
00001028                            46  * INTRO: Display the introduction of the program
00001028                            47  *---------------------------------------------------------------------------*
00001028  43F9 00003CE2             48  INTRO       LEA     WELCOME,A1              * Load PROMPT_START
0000102E  103C 000E                 49              MOVE.B  #14,D0                  * Display A1
00001032  4E4F                      50              TRAP    #15
00001034  4E75                      51              RTS
00001036                            52  TESTING     
00001036                            53  
00001036  0C53 1111                 54              CMPI.W  #$1111,(A3)
0000103A  0C5C 0111                 55              CMPI.W  #$111,(A4)+
0000103E  0C65 0011                 56              CMPI.W  #$11,-(A5)
00001042  0C78 0001 3331            57              CMPI.W  #$1,$3331
00001048  0C79 0001 44444441        58              CMPI.W  #$1,$44444441
00001050  0C13 0001                 59              CMPI.B  #$1,(A3)
00001054  0C1C 0001                 60              CMPI.B  #$1,(A4)+
00001058  0C25 0001                 61              CMPI.B  #$1,-(A5)
0000105C  0C38 0011 3331            62              CMPI.B  #$11,$3331
00001062  0C39 0001 44444441        63              CMPI.B  #$1,$44444441
0000106A                            64  
0000106A                            65  
0000106A                            66  
0000106A  4E75                      67              RTS
0000106C                            68  *---------------------------------------------------------------------------*
0000106C                            69  * START_ADDR: Compute the starting address
0000106C                            70  *---------------------------------------------------------------------------*
0000106C                            71  START_ADDR
0000106C                            72              * Output
0000106C  43F9 00003FB7             73              LEA     PROMPT_START,A1         * Load PROMPT_START 
00001072  103C 000E                 74              MOVE.B  #14,D0                  * Display PROMPT_START
00001076  4E4F                      75              TRAP    #15
00001078                            76      
00001078                            77              * Input
00001078  43F9 0000411C             78              LEA     VR_S_ADDR,A1            * Load VR_S_ADDR
0000107E  103C 0002                 79              MOVE.B  #2,D0                   * Ask user for input
00001082  4E4F                      80              TRAP    #15
00001084                            81              
00001084                            82              * Error Checking (length)
00001084  0C01 0000                 83              CMPI.B  #0, D1                  * Check if input length <= 0
00001088  6F00 0098                 84              BLE     ERROR_1
0000108C  0C01 0008                 85              CMPI.B  #8, D1                  * Check if input length > 8
00001090  6E00 0090                 86              BGT     ERROR_1
00001094                            87              
00001094                            88              * Conversion & Storage
00001094  4EB9 00001172             89              JSR     ASCII2HEX               * Jump to ASCII2HEX
0000109A  0C07 0001                 90              CMPI.B  #1, D7                  * Check for error
0000109E  6700 0082                 91              BEQ     ERROR_1                 
000010A2  23C1 000041BC             92              MOVE.L  D1, S_ADDR_HX           * Move the result to S_ADDR_HX 
000010A8                            93              
000010A8                            94              * Error Checking (Odd)
000010A8  43F9 000041BC             95              LEA     S_ADDR_HX, A1           * Load 'S_ADDR_HX' for odd error
000010AE  4EB9 00001260             96              JSR     IS_ODD                  * Check if the input address is odd
000010B4  0C07 0001                 97              CMPI.B  #1, D7                  * Check for error
000010B8  6700 0088                 98              BEQ     ERROR_3
000010BC                            99              
000010BC                           100              * Return
000010BC  4E75                     101              RTS     
000010BE                           102  *---------------------------------------------------------------------------*
000010BE                           103  * END_ADDR: Compute the ending address
000010BE                           104  *---------------------------------------------------------------------------*
000010BE                           105  END_ADDR
000010BE                           106              * Output
000010BE  43F9 00003FE6            107              LEA     PROMPT_END,A1           * Load PROMPT_END
000010C4  103C 000E                108              MOVE.B  #14,D0                  * Display PROMPT_END
000010C8  4E4F                     109              TRAP    #15
000010CA                           110  
000010CA                           111              * Input
000010CA  43F9 0000416C            112              LEA     VR_E_ADDR,A1            * Load VR_E_ADDR
000010D0  103C 0002                113              MOVE.B  #2,D0                   * Ask user for input
000010D4  4E4F                     114              TRAP    #15
000010D6                           115              
000010D6                           116              * Error Checking (length)
000010D6  0C01 0000                117              CMPI.B  #0, D1                  * Check if input length <= 0
000010DA  6F00 0056                118              BLE     ERROR_2
000010DE  0C01 0008                119              CMPI.B  #8, D1                  * Check if input length > 8
000010E2  6E00 004E                120              BGT     ERROR_2
000010E6                           121              
000010E6                           122              * Conversion & Storage
000010E6  4EB9 00001172            123              JSR     ASCII2HEX               * Jump to ASCII2HEX
000010EC  0C07 0001                124              CMPI.B  #1, D7                  * Check for error
000010F0  6700 0040                125              BEQ     ERROR_2
000010F4  23C1 000041C0            126              MOVE.L  D1, E_ADDR_HX           * Move the result to E_ADDR_HX
000010FA                           127              
000010FA                           128              * Error Checking (start > end case)
000010FA  2439 000041BC            129              MOVE.L  S_ADDR_HX, D2           * Move the starting address to D2
00001100  B282                     130              CMP.L   D2, D1                  * Compare starting and ending address
00001102  6300 005E                131              BLS     ERROR_5                 * Go to ERROR_5 if ending < starting
00001106                           132              
00001106                           133              * Error Checking (Odd case)
00001106  43F9 000041C0            134              LEA     E_ADDR_HX, A1           * Move the ending address
0000110C  4EB9 00001260            135              JSR     IS_ODD                  * Go to IS_ODD for odd address checking
00001112  0C07 0001                136              CMPI.B  #1, D7                  * Check for an error flag
00001116  6700 003A                137              BEQ     ERROR_4
0000111A                           138              
0000111A                           139              * Inputs are valid
0000111A  2A79 000041BC            140              MOVE.L  S_ADDR_HX, A5           * Store the valid input in A5
00001120                           141              
00001120  4E75                     142              RTS
00001122                           143              
00001122                           144  *---------------------------------------------------------------------------*
00001122                           145  * ERROR_1: Address error (Invalid starting address)
00001122                           146  *---------------------------------------------------------------------------*
00001122                           147  ERROR_1
00001122  43F9 000040AB            148              LEA     ERRMSG_1, A1            * Load ERRMSG_1
00001128  103C 000E                149              MOVE.B  #14, D0                 * Display ERRMSG_1
0000112C  4E4F                     150              TRAP    #15
0000112E  4EF8 106C                151              JMP     START_ADDR              * Jump to START_ADDR
00001132                           152      
00001132                           153  *---------------------------------------------------------------------------*
00001132                           154  * ERROR_2: Address error (Invalid ending address)
00001132                           155  *---------------------------------------------------------------------------*
00001132                           156  ERROR_2
00001132  43F9 000040AB            157              LEA     ERRMSG_1, A1            * Load ERRMSG_1
00001138  103C 000E                158              MOVE.B  #14, D0                 * Display ERRMSG_1
0000113C  4E4F                     159              TRAP    #15
0000113E  4EF8 10BE                160              JMP     END_ADDR                * Jump to END_ADDR
00001142                           161  
00001142                           162  *---------------------------------------------------------------------------*
00001142                           163  * ERROR_3: Address error (Odd starting address)
00001142                           164  *---------------------------------------------------------------------------*
00001142                           165  ERROR_3
00001142  43F9 000040CA            166              LEA     ERRMSG_3, A1
00001148  103C 000E                167              MOVE.B  #14, D0
0000114C  4E4F                     168              TRAP    #15
0000114E  4EF8 106C                169              JMP     START_ADDR
00001152                           170     
00001152                           171  *---------------------------------------------------------------------------*
00001152                           172  * ERROR_4: Address error (Odd ending address)
00001152                           173  *---------------------------------------------------------------------------*         
00001152                           174  ERROR_4
00001152  43F9 000040CA            175              LEA     ERRMSG_3, A1
00001158  103C 000E                176              MOVE.B  #14, D0
0000115C  4E4F                     177              TRAP    #15
0000115E  4EF8 10BE                178              JMP     END_ADDR
00001162                           179            
00001162                           180  *---------------------------------------------------------------------------*
00001162                           181  * ERROR_3: Address error (Ending address is less than starting address)
00001162                           182  *---------------------------------------------------------------------------*
00001162                           183  ERROR_5
00001162  43F9 000040EF            184              LEA     ERRMSG_5, A1
00001168  103C 000E                185              MOVE.B  #14, D0
0000116C  4E4F                     186              TRAP    #15
0000116E  4EF8 10BE                187              JMP     END_ADDR
00001172                           188    
00001172                           189  *---------------------------------------------------------------------------*
00001172                           190  * ASCII2HEX: Convert ASCii to Hexadecimal
00001172                           191  * Reserved registers: A1 = Source, D1 = Destination, D2 = Byte, D7 = Error
00001172                           192  *---------------------------------------------------------------------------*
00001172  4281                     193  ASCII2HEX   CLR.L   D1                      * Clear the destination 
00001174  4287                     194              CLR.L   D7                      * Set the error flag to 0
00001176  4282                     195              CLR.L   D2                      * Clear D2 for temp storage
00001178                           196              
00001178  1419                     197  ASC2HXLP    MOVE.B  (A1)+, D2               * Read a byte to D2
0000117A  0C02 0000                198              CMPI.B  #0, D2                  * Check for NULL (indicates the end of source)
0000117E  6700 0058                199              BEQ     RETURN                  * If it's NULL, go to return
00001182  0C02 0066                200              CMPI.B  #102, D2                * Decimal ASCII value of f is 102
00001186  6E00 004C                201              BGT     ASC_ERR                 * ASCII > f (invalid input) 
0000118A  0C02 0061                202              CMPI.B  #97, D2                 * Decimal ASCII value of a is 97
0000118E  6C00 0026                203              BGE     ASC_LOW                 * ASCII >= a (valid input)
00001192  0C02 0046                204              CMPI.B  #70, D2                 * Decimal ASCII value of F is 70
00001196  6E00 003C                205              BGT     ASC_ERR                 * ASCII > F (invalid input)
0000119A  0C02 0041                206              CMPI.B  #65, D2                 * Decimal ASCII value of A is 65
0000119E  6C00 001E                207              BGE     ASC_UPP                 * ASCII >= A (valid input)
000011A2  0C02 0039                208              CMPI.B  #57, D2                 * Decimal value of 9 is 57
000011A6  6E00 002C                209              BGT     ASC_ERR                 * ASCII > 9 (invalid input)
000011AA  0C02 0030                210              CMPI.B  #48, D2                 * Decimal ASCII value of 0 is 48
000011AE  6C00 0016                211              BGE     ASC_NUM                 * ASCII >= 0 (valid input)
000011B2  6000 0020                212              BRA     ASC_ERR                 * Invalid input
000011B6                           213  
000011B6  0442 0057                214  ASC_LOW     SUBI    #87, D2                 * Convert the ASCII input to Hex
000011BA  6000 0012                215              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011BE                           216              
000011BE  0442 0037                217  ASC_UPP     SUBI    #55, D2                 * Convert the ASCII input to Hex
000011C2  6000 000A                218              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011C6                           219              
000011C6  0442 0030                220  ASC_NUM     SUBI    #48, D2                 * Convert the ASCII input to Hex
000011CA  6000 0002                221              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011CE                           222              
000011CE  E981                     223  ASC_SFT     ASL.L   #4, D1                  * Shift the dest to left by 4 bits
000011D0  D202                     224              ADD.B   D2, D1                  * Add the converted input to D1
000011D2  60A4                     225              BRA     ASC2HXLP                * Loop
000011D4                           226  
000011D4  1E3C 0001                227  ASC_ERR     MOVE.B  #1, D7                  * Set the error flag to 1            
000011D8  4E75                     228  RETURN      RTS     
000011DA                           229  
000011DA                           230  *---------------------------------------------------------------------------*
000011DA                           231  * HEX2ASCII: Convert Hexadecimal to ASCii 
000011DA                           232  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
000011DA                           233  *---------------------------------------------------------------------------*
000011DA  0C02 0008                234  HEX2ASCII   CMPI.B  #8, D2                  * Check to see if the size is long
000011DE  6700 000E                235              BEQ     HEX_LOOP
000011E2  4841                     236              SWAP    D1
000011E4  0C02 0002                237              CMPI.B  #2,D2
000011E8  6600 0004                238              BNE     HEX_LOOP
000011EC  E189                     239              LSL.L   #8,D1
000011EE                           240             
000011EE  E999                     241  HEX_LOOP    ROL.L   #4, D1                  * Roll D1 to left
000011F0  2601                     242              MOVE.L  D1, D3                  * Move D1 to D3
000011F2  0283 0000000F            243              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
000011F8  0C03 0009                244              CMPI.B  #9, D3                  * Compare te digit
000011FC  6E00 000A                245              BGT     HEX_CHAR              
00001200  0603 0030                246              ADDI.B  #48,D3                  * Add 48 for numerical output
00001204  6000 0006                247              BRA     HEX_CONT
00001208                           248              
00001208  0603 0037                249  HEX_CHAR    ADDI.B  #55,D3                  * Add 55 for character output
0000120C                           250  
0000120C  12C3                     251  HEX_CONT    MOVE.B  D3, (A1)+               * Place into A1
0000120E  5342                     252              SUBI    #1, D2                  * Decrement the size
00001210  0C02 0000                253              CMPI.B  #0, D2                  * Check if D2 is 0
00001214  66D8                     254              BNE     HEX_LOOP                * Loop
00001216  12BC 0000                255              MOVE.B  #$0,(A1)                * Null terminator
0000121A  4E75                     256              RTS
0000121C                           257  *---------------------------------------------------------------------------*
0000121C                           258  * HEX2ASCII2STACK: Convert Hexadecimal to ASCii 
0000121C                           259  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
0000121C                           260  *---------------------------------------------------------------------------*
0000121C                           261  HEX2ASCII2STACK
0000121C  0C02 0008                262              CMPI.B  #8, D2                  * Check to see if the size is long
00001220  6700 000E                263              BEQ     STACK_HEX_LOOP
00001224  4841                     264              SWAP    D1
00001226  0C02 0002                265              CMPI.B  #2,D2
0000122A  6600 0004                266              BNE     STACK_HEX_LOOP
0000122E  E189                     267              LSL.L   #8,D1
00001230                           268             
00001230                           269  STACK_HEX_LOOP    
00001230  E999                     270              ROL.L   #4, D1                  * Roll D1 to left
00001232  2601                     271              MOVE.L  D1, D3                  * Move D1 to D3
00001234  0283 0000000F            272              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
0000123A  0C03 0009                273              CMPI.B  #9, D3                  * Compare te digit
0000123E  6E00 000A                274              BGT     STACK_HEX_CHAR              
00001242  0603 0030                275              ADDI.B  #48,D3                  * Add 48 for numerical output
00001246  6000 0006                276              BRA     STACK_HEX_CONT
0000124A                           277              
0000124A                           278  STACK_HEX_CHAR    
0000124A  0603 0037                279              ADDI.B  #55,D3                  * Add 55 for character output
0000124E                           280  
0000124E                           281  STACK_HEX_CONT    
0000124E  6100 2A02                282              BSR     PUSH_STACK              *PLACE INTO STACK
00001252  5342                     283              SUBI    #1, D2                  * Decrement the size
00001254  0C02 0000                284              CMPI.B  #0, D2                  * Check if D2 is 0
00001258  66D6                     285              BNE     STACK_HEX_LOOP                * Loop
0000125A  12BC 0000                286              MOVE.B  #$0,(A1)                * Null terminator
0000125E  4E75                     287              RTS
00001260                           288  
00001260                           289  
00001260                           290  *---------------------------------------------------------------------------*
00001260                           291  * IS_ODD: Check whether the source address is odd
00001260                           292  * Reserved registers: A1 = Source, D1 = Result, D7 = error flag
00001260                           293  *---------------------------------------------------------------------------*
00001260  4281                     294  IS_ODD      CLR.L   D1                      * Clear the result
00001262  4287                     295              CLR.L   D7                      * Set the error flag to 0
00001264  2211                     296              MOVE.L  (A1),D1                * Temp store the checking address to D1
00001266  82FC 0002                297              DIVU    #2, D1                  * Divide the result by 2
0000126A  4841                     298              SWAP    D1                      * Swap remainder with quotient
0000126C  0C01 0001                299              CMPI.B  #1, D1                  * Check for error
00001270  6700 0004                300              BEQ     IS_ODD_ERR
00001274  4E75                     301              RTS
00001276                           302              
00001276  1E3C 0001                303  IS_ODD_ERR  MOVE.B  #1, D7
0000127A  4E75                     304              RTS
0000127C                           305  
0000127C                           306  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*
0000127C                           307  * MAIN                    
0000127C                           308  * A2: STACK POINTER                                                      MAIN                                                                        MAIN
0000127C                           309  * A5: Processing address
0000127C                           310  *
0000127C                           311  * D3: USED FOR PUSHING INTO STACK
0000127C                           312  *     To push into stack => MOVE.W #DATA,D3 
0000127C                           313  *                           BSR    PUSH_STACK
0000127C                           314  *     To print stack     => BSR    PRINT_STACK 
0000127C                           315  *     To clear stack     => BSR    CLEAR_STACK
0000127C                           316  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*  
0000127C                           317  MAIN        
0000127C                           318              *initialize stack pointer
0000127C  33FC 0000 00004574       319              MOVE.W  #0,COUNTER
00001284  347C 7000                320              MOVEA.W #STACK,A2
00001288  163C 0020                321              MOVE.B  #' ',D3
0000128C  6100 29C4                322              BSR     PUSH_STACK
00001290  6100 29C0                323              BSR     PUSH_STACK
00001294  6100 29BC                324              BSR     PUSH_STACK
00001298                           325              
00001298                           326              * clear registers for temp storage
00001298  4280                     327              CLR.L   D0                   
0000129A  4281                     328              CLR.L   D1                   
0000129C  227C 00000000            329              MOVEA.L #0, A1                
000012A2                           330              
000012A2  220D                     331              MOVE.L  A5,D1                   * check to see if the address is fully read
000012A4  23CD 000041BC            332              MOVE.L  A5,S_ADDR_HX
000012AA  B2B9 000041C0            333              CMP.L   E_ADDR_HX,D1
000012B0  6C00 20C0                334              BGE     REPEAT                  * go to repeat for user action
000012B4                           335  
000012B4  43F9 00004217            336              LEA     TMPOUTPUT,A1            * allocate storage to hold output
000012BA  143C 0008                337              MOVE.B  #8,D2                   * set the output size
000012BE  4EB8 11DA                338              JSR     HEX2ASCII               
000012C2  43F9 00004217            339              LEA     TMPOUTPUT,A1
000012C8  103C 000E                340              MOVE.B  #14,D0
000012CC  4E4F                     341              TRAP    #15
000012CE                           342              
000012CE  4285                     343              CLR.L    D5                      * clear the processing data
000012D0  3A1D                     344              MOVE.W  (A5)+,D5                 * copy the currently processing data in A5 over to D5
000012D2                           345                                               * advance the current instruction pointer to the next
000012D2                           346                                               * instruction in memory
000012D2                           347  *----------------------------------------*
000012D2                           348  * Registers          
000012D2                           349  * [D1] - COPY OF D5
000012D2                           350  * [D5] - DATA TO BE PROCESSED
000012D2                           351  * [D6] - COUNTER FOR LINES PROCESSED
000012D2                           352  *
000012D2                           353  * [D4]      - ERROR FLAG BEFORE PRINTING
000012D2                           354  * [STACK]   - PRINTS PROCESS DATA
000012D2                           355  * [COUNTER] - KEEPS TRACK OF STACK INCREMENT
000012D2                           356  *
000012D2                           357  * [A1] - USED FOR JUMPING/PRINTING
000012D2                           358  *
000012D2                           359  *----------------------------------------*
000012D2                           360  
000012D2                           361              
000012D2                           362              *Processing the first 4 most significant bits 
000012D2  2205                     363              MOVE.L  D5,D1                    * copy the current processing data to D1
000012D4  143C 000C                364              MOVE.B  #12,D2                   * shift to right by 12 bits
000012D8  E469                     365              LSR.W   D2,D1                    * [D2] Temporarily used D2 for shifting bits
000012DA  C2FC 0006                366              MULU    #6,D1                    * form offset
000012DE  43F9 0000134C            367              LEA     JMPTABLE,A1              * index into table
000012E4  4EB1 1000                368              JSR     0(A1,D1)                 * jump indirect with index
000012E8                           369              
000012E8                           370              *SECURED EA*
000012E8  B83C 0001                371              CMP.B   #1,D4                    * ERROR FLAG CHECK [ERROR WHEN D4 == 1]
000012EC  6600 0012                372              BNE     OUTPUT_PROCESSED_DATA    * PRINTS PROCESSED OP-CODE & EA
000012F0  6100 01E8                373              BSR     OP_DATA                  * PRINT ERROR MESSAGE "DATA"
000012F4  6100 29C8                374              BSR     CLEAR_STACK              * CLEARS THE STACK 
000012F8  183C 0000                375              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
000012FC  6000 0022                376              BRA     DISPLAY_30_LINES         * GO TO LAST STEP
00001300                           377             
00001300                           378  OUTPUT_PROCESSED_DATA       
00001300  163C 000D                379              MOVE.B  #$D,D3                  *carriage return
00001304  6100 294C                380              BSR     PUSH_STACK
00001308  163C 000A                381              MOVE.B  #$A,D3                  *new line feed
0000130C  6100 2944                382              BSR     PUSH_STACK
00001310  163C 0000                383              MOVE.B  #$0,D3                  *null
00001314  6100 293C                384              BSR     PUSH_STACK
00001318                           385       
00001318  6100 2914                386              BSR     PRINT_QUEUE
0000131C  183C 0000                387              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
00001320                           388  DISPLAY_30_LINES
00001320                           389              * display 30 lines per page
00001320  5206                     390              ADDI.B  #1,D6
00001322  0C06 001E                391              CMPI.B  #30,D6
00001326  6C00 0006                392              BGE     NEXTLINES
0000132A  6000 FF50                393              BRA     MAIN
0000132E                           394            
0000132E                           395  *---------------------------------------------------------------------------*
0000132E                           396  * NEXTLINES: receive input from user to print the next 30 lines
0000132E                           397  *---------------------------------------------------------------------------*  
0000132E  4206                     398  NEXTLINES   CLR.B   D6
00001330  43F9 00004013            399              LEA     DISP_NEXT,A1
00001336  103C 000E                400              MOVE.B  #14,D0
0000133A  4E4F                     401              TRAP    #15
0000133C  43F9 000041C7            402              LEA     TMPINPUT,A1
00001342  103C 0002                403              MOVE.B  #2,D0
00001346  4E4F                     404              TRAP    #15
00001348  4EF8 127C                405              JMP     MAIN
0000134C                           406    
0000134C                           407  *---------------------------------------------------------------------------*
0000134C                           408  * JMPTABLE: OP code jump/branch table used to decode and display opcodes
0000134C                           409  *---------------------------------------------------------------------------*  
0000134C  4EF9 000013AC            410  JMPTABLE    JMP     OP0000  * CMPI/ORI/BTST/EORI/SUBI/BTST
00001352  4EF9 00001668            411              JMP     OP0001  * MOVE.B                                        *FINISHED - JOSEPH
00001358  4EF9 000016D6            412              JMP     OP0010  * MOVE.L/MOVEA.L                                *FINISHED - JOSEPH
0000135E  4EF9 000017D4            413              JMP     OP0011  * MOVE.W/MOVEA.W                                *FINISHED - JOSEPH
00001364  4EF9 000018D0            414              JMP     OP0100  * MOVEM/LEA/NEG/NOT/JSR/RTS                     *FINISHED - JOSEPH
0000136A  4EF9 00001B26            415              JMP     OP0101  * ADDQ                                          *FINISHED - JOSEPH
00001370  4EF9 00001CCA            416              JMP     OP0110  * BRA/Bcc (BEQ/BNE/BLT/BHI)                     *NOT FINISHED - LYN
00001376  4EF9 00001D58            417              JMP     OP0111  * MOVEQ (unassigned)                            *FINISHED - NEVER ASSIGNED
0000137C  4EF9 00001D5C            418              JMP     OP1000  * DIVS                                          *FINISHED - JOSEPH
00001382  4EF9 00001E64            419              JMP     OP1001  * SUB/SUBA                                      *FINISHED - JOSEPH
00001388  4EF9 00002220            420              JMP     OP1010  * Unassigned                                    *FINISHED - NEVER ASSIGNED
0000138E  4EF9 00002224            421              JMP     OP1011  * CMP/EOR/CMPA                                  *FINISHED - JOSEPH
00001394  4EF9 00002524            422              JMP     OP1100  * MULS/AND                                      *FINISHED - JOSEPH
0000139A  4EF9 00002876            423              JMP     OP1101  * ADD/ADDA                                      *FINISHED - JOSEPH
000013A0  4EF9 00002C52            424              JMP     OP1110  * LSR/LSL/ASR/ASL/ROL/ROR
000013A6  4EF9 00002F00            425              JMP     OP1111  * Special/Reserved
000013AC                           426              
000013AC                           427  *---------------------------------------------------------------------------*
000013AC                           428  * OP0000: decode CMPI/ORI/BTST/SUBI/EORI
000013AC                           429  *---------------------------------------------------------------------------*           
000013AC                           430  OP0000                                                                                  
000013AC  4281                     431              CLR.L   D1          * to temporarily store the address to process
000013AE  4280                     432              CLR.L   D0  
000013B0  4284                     433              CLR.L   D4                 
000013B2  227C 00000000            434              MOVEA.L #0, A1                
000013B8                           435              * Check for ORI (0000 0000 xx (size) xxx (EA mode) xxx(EA reg)
000013B8                           436              * Check if bit 11,10,9,8 are 0000)
000013B8  2205                     437              MOVE.L  D5,D1
000013BA  0281 00000F00            438              ANDI.L  #$0F00,D1
000013C0  0C81 00000000            439              CMPI.L  #$0000,D1   * if they are 0000, it is ORI
000013C6  6700 024A                440              BEQ     OP_ORI
000013CA                           441  
000013CA                           442              * check for CMPI (0000 1100 xx (size) xxx (EA mode) xxx (EA reg)
000013CA                           443              * check if bit 11,10,9,8 are 1100
000013CA  4281                     444              CLR.L   D1
000013CC  2205                     445              MOVE.L  D5,D1
000013CE  0281 00000F00            446              ANDI.L  #$0F00,D1
000013D4  0C81 00000C00            447              CMPI.L  #$0C00,D1
000013DA  6700 014A                448              BEQ     OP0000_CMPI
000013DE                           449              
000013DE                           450              * check for SUBI
000013DE  4281                     451              CLR.L   D1
000013E0  2205                     452              MOVE.L  D5,D1
000013E2  0281 00000F00            453              ANDI.L  #$0F00,D1
000013E8  0C81 00000400            454              CMPI.L  #$0400,D1
000013EE  6700 0094                455              BEQ     OP_SUBI
000013F2                           456              
000013F2                           457              * check for EORI
000013F2  4281                     458              CLR.L   D1
000013F4  2205                     459              MOVE.L  D5,D1
000013F6  0281 00000F00            460              ANDI.L  #$0F00,D1
000013FC  0C81 00000A00            461              CMPI.L  #$0A00,D1
00001402  6700 002A                462              BEQ     OP_EORI
00001406                           463              
00001406                           464              * check for BTST
00001406  4281                     465              CLR.L   D1
00001408  2205                     466              MOVE.L  D5,D1
0000140A  EA99                     467              ROR.L   #5,D1
0000140C  0281 00000008            468              ANDI.L  #$8,D1
00001412  0C01 0008                469              CMPI.B  #8,D1
00001416  6700 0008                470              BEQ     OP_BTST
0000141A                           471  
0000141A                           472              * OP0000 series other than ORI/CMPI/BTST/EORI
0000141A  4EF9 000014DA            473              JMP     OP_DATA
00001420                           474              
00001420                           475  *---------------------------------------------------------------------------*
00001420                           476  * OP_BTST: display BTST
00001420                           477  *---------------------------------------------------------------------------* 
00001420  43F9 000042A0            478  OP_BTST     LEA     DISP_BTST,A1
00001426  103C 000E                479              MOVE.B  #14,D0
0000142A  4E4F                     480              TRAP    #15
0000142C  4E75                     481              RTS
0000142E                           482  
0000142E                           483  *---------------------------------------------------------------------------*
0000142E                           484  * OP_EORI: decode and display EORI
0000142E                           485  *---------------------------------------------------------------------------* 
0000142E                           486  OP_EORI
0000142E  4281                     487              CLR.L   D1
00001430  4284                     488              CLR.L   D4
00001432  2205                     489              MOVE.L  D5,D1
00001434  EC99                     490              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001436  0C01 0000                491              CMPI.B  #0,D1
0000143A  6700 0012                492              BEQ     OP_EORI_B    * size is byte
0000143E  0C01 0001                493              CMPI.B  #1,D1
00001442  6700 001C                494              BEQ     OP_EORI_W    * size is word
00001446  0C01 0002                495              CMPI.B  #2,D1
0000144A  6700 0026                496              BEQ     OP_EORI_L    * size is long
0000144E                           497  
0000144E                           498  OP_EORI_B    * size is byte    
0000144E  183C 0000                499              MOVE.B  #0,D4
00001452  43F9 00004282            500              LEA     DISP_EORI_B,A1
00001458  103C 000E                501              MOVE.B  #14,D0
0000145C  4E4F                     502              TRAP    #15
0000145E  4E75                     503              RTS
00001460                           504              
00001460                           505  OP_EORI_W    * size is word
00001460  183C 0001                506              MOVE.B  #1,D4
00001464  43F9 0000428C            507              LEA     DISP_EORI_W,A1
0000146A  103C 000E                508              MOVE.B  #14,D0
0000146E  4E4F                     509              TRAP    #15
00001470  4E75                     510              RTS
00001472                           511              
00001472                           512  OP_EORI_L    * size is long
00001472  183C 0002                513              MOVE.B  #2,D4
00001476  43F9 00004296            514              LEA     DISP_EORI_L,A1
0000147C  103C 000E                515              MOVE.B  #14,D0
00001480  4E4F                     516              TRAP    #15
00001482  4E75                     517              RTS
00001484                           518              
00001484                           519  *---------------------------------------------------------------------------*
00001484                           520  * OP_SUBI: decode SUBI.B/.W/.L
00001484                           521  *---------------------------------------------------------------------------* 
00001484                           522  OP_SUBI
00001484  4281                     523              CLR.L   D1
00001486  4284                     524              CLR.L   D4
00001488  2205                     525              MOVE.L  D5,D1
0000148A  EC99                     526              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
0000148C  0C01 0000                527              CMPI.B  #0,D1
00001490  6700 0012                528              BEQ     OP_SUBI_B    * size is byte
00001494  0C01 0001                529              CMPI.B  #1,D1
00001498  6700 001C                530              BEQ     OP_SUBI_W    * size is word
0000149C  0C01 0002                531              CMPI.B  #2,D1
000014A0  6700 0026                532              BEQ     OP_SUBI_L    * size is long
000014A4                           533  
000014A4                           534  OP_SUBI_B    * size is byte    
000014A4  183C 0000                535              MOVE.B  #0,D4
000014A8  43F9 0000438E            536              LEA     DISP_SUBI_B,A1
000014AE  103C 000E                537              MOVE.B  #14,D0
000014B2  4E4F                     538              TRAP    #15
000014B4  4E75                     539              RTS
000014B6                           540              
000014B6                           541  OP_SUBI_W    * size is word
000014B6  183C 0001                542              MOVE.B  #1,D4
000014BA  43F9 00004398            543              LEA     DISP_SUBI_W,A1
000014C0  103C 000E                544              MOVE.B  #14,D0
000014C4  4E4F                     545              TRAP    #15
000014C6  4E75                     546              RTS
000014C8                           547              
000014C8                           548  OP_SUBI_L    * size is long
000014C8  183C 0002                549              MOVE.B  #2,D4
000014CC  43F9 000043A2            550              LEA     DISP_SUBI_L,A1
000014D2  103C 000E                551              MOVE.B  #14,D0
000014D6  4E4F                     552              TRAP    #15
000014D8  4E75                     553              RTS
000014DA                           554              
000014DA                           555  *---------------------------------------------------------------------------*
000014DA                           556  * OP_DATA : unidentified opcode
000014DA                           557  *---------------------------------------------------------------------------* 
000014DA                           558  OP_DATA
000014DA  4280                     559              CLR.L   D0                   
000014DC  4281                     560              CLR.L   D1     
000014DE  4284                     561              CLR.L   D4                    
000014E0  227C 00000000            562              MOVEA.L #0, A1             
000014E6  4287                     563              CLR.L   D7
000014E8  1E3C 0001                564              MOVE.B  #1,D7                   * error flag is true
000014EC                           565              
000014EC  43F9 000042C6            566              LEA     DISP_DATA,A1
000014F2  103C 000E                567              MOVE.B  #14,D0
000014F6  4E4F                     568              TRAP    #15
000014F8                           569              
000014F8  4EF9 000014FE            570              JMP     EA_DATA
000014FE                           571             
000014FE                           572             
000014FE                           573  *---------------------------------------------------------------------------*
000014FE                           574  * EA_DATA
000014FE                           575  *---------------------------------------------------------------------------*       
000014FE  43F9 00004217            576  EA_DATA     LEA     TMPOUTPUT,A1    * load the temporarily stored output address
00001504  2205                     577              MOVE.L  D5,D1           * transfer the processing data to D1
00001506  7404                     578              MOVE.L  #4,D2           * set to word size
00001508  4EB8 11DA                579              JSR     HEX2ASCII       * prepare output in ascii
0000150C  43F9 00004539            580              LEA     DISP_HEX,A1     * display $ symbol
00001512  103C 000E                581              MOVE.B  #14,D0      
00001516  4E4F                     582              TRAP    #15
00001518  43F9 00004217            583              LEA     TMPOUTPUT,A1    * display with a new line
0000151E  103C 000D                584              MOVE.B  #13,D0
00001522  4E4F                     585              TRAP    #15
00001524                           586  
00001524  4E75                     587              RTS
00001526                           588              
00001526                           589  *---------------------------------------------------------------------------*
00001526                           590  * OP_CMPI : decode CMPI and its size
00001526                           591  *---------------------------------------------------------------------------*          
00001526                           592  OP0000_CMPI
00001526                           593  
00001526                           594              
00001526                           595   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001526  13FC 0000 00004578       596             MOVE.B   #$00,DEST_REGISTER_FORMAT
0000152E  13FC 0082 00004579       597             MOVE.B   #$82,SRC_REGISTER_FORMAT
00001536                           598             
00001536                           599             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001536  13FC 00B9 0000457B       600             MOVE.B   #$B9,GET_DST_START_END
0000153E  13FC 0020 0000457C       601             MOVE.B   #$20,GET_SRC_START_END
00001546                           602             
00001546                           603              *CLEAR D3
00001546  4283                     604              CLR.L   D3
00001548                           605              *LOAD STACK WITH THIS OPMODE
00001548  6100 2708                606              BSR     PUSH_STACK
0000154C  163C 0043                607              MOVE.B  #'C',D3
00001550  6100 2700                608              BSR     PUSH_STACK
00001554  163C 004D                609              MOVE.B  #'M',D3
00001558  6100 26F8                610              BSR     PUSH_STACK
0000155C  163C 0050                611              MOVE.B  #'P',D3
00001560  6100 26F0                612              BSR     PUSH_STACK
00001564  163C 0049                613              MOVE.B  #'I',D3
00001568  6100 26E8                614              BSR     PUSH_STACK
0000156C  163C 002E                615              MOVE.B  #'.',D3
00001570  6100 26E0                616              BSR     PUSH_STACK
00001574                           617              
00001574                           618              *FIGURE OUT SIZE*
00001574                           619              *00 = BYTE
00001574                           620              *01 = WORD
00001574                           621              *10 = LONG
00001574                           622              * BITS 7&6
00001574                           623              
00001574                           624              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
00001574  2205                     625              MOVE.L  D5,D1
00001576  EC99                     626              ROR.L   #6,D1
00001578  0281 00000003            627              ANDI.L  #$03,D1
0000157E  0C01 0000                628              CMPI.B  #%00,D1
00001582  6700 0018                629              BEQ     OP0000_CMPI_B
00001586  0C01 0001                630              CMPI.B  #%01,D1
0000158A  6700 0038                631              BEQ     OP0000_CMPI_W
0000158E  0281 00000003            632              ANDI.L  #$03,D1
00001594  0C01 0002                633              CMPI.B  #%10,D1
00001598  6700 0052                634              BEQ     OP0000_CMPI_L
0000159C                           635  
0000159C                           636  OP0000_CMPI_B
0000159C  163C 0042                637              MOVE.B  #'B',D3
000015A0  6100 26B0                638              BSR     PUSH_STACK
000015A4                           639  *GET DATA FROM ADDQ AND PRINT #0-8
000015A4                           640              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000015A4  0285 0000F03F            641              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000015AA  0685 000001C0            642              ADDI.L  #$01C0,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
000015B0  6100 2232                643              BSR     GET_EA_EA_DEST
000015B4  163C 002C                644              MOVE.B  #',',D3
000015B8  6100 2698                645              BSR     PUSH_STACK
000015BC  6100 1DF6                646              BSR     GET_EA_EA_SRC
000015C0  6000 004E                647              BRA     OP0000_RETURN_CMPI
000015C4                           648  
000015C4                           649  OP0000_CMPI_W
000015C4  163C 0057                650              MOVE.B  #'W',D3
000015C8  6100 2688                651              BSR     PUSH_STACK
000015CC                           652  *GET DATA FROM ADDQ AND PRINT #0-8
000015CC                           653              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000015CC  0285 0000F03F            654              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000015D2  0685 000001C0            655              ADDI.L  #$01C0,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
000015D8  6100 220A                656              BSR     GET_EA_EA_DEST
000015DC  163C 002C                657              MOVE.B  #',',D3
000015E0  6100 2670                658              BSR     PUSH_STACK
000015E4  6100 1DCE                659              BSR     GET_EA_EA_SRC
000015E8  6000 0026                660              BRA     OP0000_RETURN_CMPI
000015EC                           661  
000015EC                           662  OP0000_CMPI_L
000015EC  163C 004C                663              MOVE.B  #'L',D3
000015F0  6100 2660                664              BSR     PUSH_STACK
000015F4                           665              *GET DATA FROM ADDQ AND PRINT #0-8
000015F4                           666              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000015F4  0285 0000F03F            667              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000015FA  0685 000003C0            668              ADDI.L  #$03C0,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
00001600  6100 21E2                669              BSR     GET_EA_EA_DEST
00001604  163C 002C                670              MOVE.B  #',',D3
00001608  6100 2648                671              BSR     PUSH_STACK
0000160C  6100 1DA6                672              BSR     GET_EA_EA_SRC
00001610                           673              
00001610                           674  OP0000_RETURN_CMPI
00001610                           675  
00001610                           676  
00001610                           677              
00001610  4E75                     678              RTS
00001612                           679   
00001612                           680  *---------------------------------------------------------------------------*
00001612                           681  * OP_ORI : decode ORI and its size
00001612                           682  *---------------------------------------------------------------------------* 
00001612                           683  OP_ORI      
00001612  4281                     684              CLR.L   D1
00001614  4284                     685              CLR.L   D4
00001616  2205                     686              MOVE.L  D5,D1
00001618  EC99                     687              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
0000161A  0C01 0000                688              CMPI.B  #0,D1
0000161E  6700 0012                689              BEQ     OP_ORI_B    * size is byte
00001622  0C01 0001                690              CMPI.B  #1,D1
00001626  6700 001C                691              BEQ     OP_ORI_W    * size is word
0000162A  0C01 0002                692              CMPI.B  #2,D1
0000162E  6700 0026                693              BEQ     OP_ORI_L    * size is long
00001632                           694  
00001632                           695  OP_ORI_B    * size is byte    
00001632  183C 0000                696              MOVE.B  #0,D4
00001636  43F9 00004267            697              LEA     DISP_ORI_B,A1
0000163C  103C 000E                698              MOVE.B  #14,D0
00001640  4E4F                     699              TRAP    #15
00001642  4E75                     700              RTS
00001644                           701              
00001644                           702  OP_ORI_W    * size is word
00001644  183C 0001                703              MOVE.B  #1,D4
00001648  43F9 00004270            704              LEA     DISP_ORI_W,A1
0000164E  103C 000E                705              MOVE.B  #14,D0
00001652  4E4F                     706              TRAP    #15
00001654  4E75                     707              RTS
00001656                           708              
00001656                           709  OP_ORI_L    * size is long
00001656  183C 0002                710              MOVE.B  #2,D4
0000165A  43F9 00004279            711              LEA     DISP_ORI_L,A1
00001660  103C 000E                712              MOVE.B  #14,D0
00001664  4E4F                     713              TRAP    #15
00001666  4E75                     714              RTS
00001668                           715          
00001668                           716  *---------------------------------------------------------------------------*
00001668                           717  * OP0001: MOVE.B
00001668                           718  *---------------------------------------------------------------------------*
00001668                           719  OP0001      
00001668  4EF9 0000166E            720              JMP     OP_MOVE_B   * display MOVE.B
0000166E                           721              
0000166E                           722  *---------------------------------------------------------------------------*
0000166E                           723  * OP_MOVE_B: display MOVE_B and proceed to EA
0000166E                           724  *---------------------------------------------------------------------------*
0000166E                           725  OP_MOVE_B                                                                       
0000166E                           726             
0000166E                           727             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000166E  13FC 0082 00004578       728             MOVE.B   #$82,DEST_REGISTER_FORMAT
00001676  13FC 0000 00004579       729             MOVE.B   #$00,SRC_REGISTER_FORMAT
0000167E                           730             
0000167E                           731             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000167E  13FC 00B9 0000457B       732             MOVE.B   #$B9,GET_DST_START_END
00001686  13FC 0020 0000457C       733             MOVE.B   #$20,GET_SRC_START_END
0000168E                           734             
0000168E                           735              *CLEAR D3
0000168E  4283                     736              CLR.L   D3
00001690                           737              *LOAD STACK WITH THIS OPMODE
00001690  6100 25C0                738              BSR     PUSH_STACK
00001694  163C 004D                739              MOVE.B  #'M',D3
00001698  6100 25B8                740              BSR     PUSH_STACK
0000169C  163C 004F                741              MOVE.B  #'O',D3
000016A0  6100 25B0                742              BSR     PUSH_STACK
000016A4  163C 0056                743              MOVE.B  #'V',D3
000016A8  6100 25A8                744              BSR     PUSH_STACK
000016AC  163C 0045                745              MOVE.B  #'E',D3
000016B0  6100 25A0                746              BSR     PUSH_STACK
000016B4  163C 002E                747              MOVE.B  #'.',D3
000016B8  6100 2598                748              BSR     PUSH_STACK
000016BC  163C 0042                749              MOVE.B  #'B',D3
000016C0  6100 2590                750              BSR     PUSH_STACK
000016C4                           751              
000016C4  6100 1CEE                752              BSR     GET_EA_EA_SRC
000016C8  163C 002C                753              MOVE.B  #',',D3
000016CC  6100 2584                754              BSR     PUSH_STACK
000016D0  6100 2112                755              BSR     GET_EA_EA_DEST
000016D4                           756              
000016D4  4E75                     757              RTS
000016D6                           758              
000016D6                           759             
000016D6                           760  *---------------------------------------------------------------------------*
000016D6                           761  * OP0010: decode MOVE.L/MOVEA.L
000016D6                           762  *---------------------------------------------------------------------------*
000016D6                           763  OP0010      
000016D6  183C 0002                764              MOVE.B  #2,D4
000016DA  4280                     765              CLR.L   D0                     
000016DC  4281                     766              CLR.L   D1                      
000016DE  227C 00000000            767              MOVEA.L #0, A1                 
000016E4                           768              
000016E4  2205                     769              MOVE.L  D5,D1
000016E6  EA99                     770              ROR.L   #5,D1
000016E8  0281 0000000E            771              ANDI.L  #$E,D1
000016EE  0C01 0002                772              CMPI.B  #2,D1
000016F2  6700 0070                773              BEQ     OP_MOVEA_L
000016F6                           774  
000016F6  4EF9 000016FC            775              JMP     OP_MOVE_L
000016FC                           776             
000016FC                           777  
000016FC                           778  *---------------------------------------------------------------------------*
000016FC                           779  * OP_MOVE_L: display MOVE_L and proceed to EA
000016FC                           780  *---------------------------------------------------------------------------*
000016FC                           781  OP_MOVE_L   
000016FC                           782             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000016FC  13FC 0082 00004578       783             MOVE.B   #$82,DEST_REGISTER_FORMAT
00001704  13FC 0000 00004579       784             MOVE.B   #$00,SRC_REGISTER_FORMAT
0000170C                           785             
0000170C                           786             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000170C  13FC 00B9 0000457B       787             MOVE.B   #$B9,GET_DST_START_END
00001714  13FC 0020 0000457C       788             MOVE.B   #$20,GET_SRC_START_END
0000171C                           789             
0000171C                           790              *CLEAR D3
0000171C  4283                     791              CLR.L   D3
0000171E                           792              *LOAD STACK WITH THIS OPMODE
0000171E  6100 2532                793              BSR     PUSH_STACK
00001722  163C 004D                794              MOVE.B  #'M',D3
00001726  6100 252A                795              BSR     PUSH_STACK
0000172A  163C 004F                796              MOVE.B  #'O',D3
0000172E  6100 2522                797              BSR     PUSH_STACK
00001732  163C 0056                798              MOVE.B  #'V',D3
00001736  6100 251A                799              BSR     PUSH_STACK
0000173A  163C 0045                800              MOVE.B  #'E',D3
0000173E  6100 2512                801              BSR     PUSH_STACK
00001742  163C 002E                802              MOVE.B  #'.',D3
00001746  6100 250A                803              BSR     PUSH_STACK
0000174A  163C 004C                804              MOVE.B  #'L',D3
0000174E  6100 2502                805              BSR     PUSH_STACK
00001752                           806              
00001752  6100 1C60                807              BSR     GET_EA_EA_SRC
00001756  163C 002C                808              MOVE.B  #',',D3
0000175A  6100 24F6                809              BSR     PUSH_STACK
0000175E  6100 2084                810              BSR     GET_EA_EA_DEST
00001762                           811              
00001762  4E75                     812              RTS
00001764                           813  
00001764                           814  
00001764                           815  *---------------------------------------------------------------------------*
00001764                           816  * OP_MOVEA_L: display MOVEA_L and proceed to EA
00001764                           817  *---------------------------------------------------------------------------*
00001764                           818  OP_MOVEA_L 
00001764                           819             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001764  13FC 00FD 00004578       820             MOVE.B   #$FD,DEST_REGISTER_FORMAT
0000176C  13FC 0000 00004579       821             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001774                           822             
00001774                           823             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001774  13FC 00B9 0000457B       824             MOVE.B   #$B9,GET_DST_START_END
0000177C  13FC 0020 0000457C       825             MOVE.B   #$20,GET_SRC_START_END
00001784                           826             
00001784                           827              *CLEAR D3
00001784  4283                     828              CLR.L   D3
00001786                           829              *LOAD STACK WITH THIS OPMODE
00001786  6100 24CA                830              BSR     PUSH_STACK
0000178A  163C 004D                831              MOVE.B  #'M',D3
0000178E  6100 24C2                832              BSR     PUSH_STACK
00001792  163C 004F                833              MOVE.B  #'O',D3
00001796  6100 24BA                834              BSR     PUSH_STACK
0000179A  163C 0056                835              MOVE.B  #'V',D3
0000179E  6100 24B2                836              BSR     PUSH_STACK
000017A2  163C 0045                837              MOVE.B  #'E',D3
000017A6  6100 24AA                838              BSR     PUSH_STACK           
000017AA  163C 0041                839              MOVE.B  #'A',D3
000017AE  6100 24A2                840              BSR     PUSH_STACK
000017B2  163C 002E                841              MOVE.B  #'.',D3
000017B6  6100 249A                842              BSR     PUSH_STACK
000017BA  163C 004C                843              MOVE.B  #'L',D3
000017BE  6100 2492                844              BSR     PUSH_STACK
000017C2                           845              
000017C2  6100 1BF0                846              BSR     GET_EA_EA_SRC
000017C6  163C 002C                847              MOVE.B  #',',D3
000017CA  6100 2486                848              BSR     PUSH_STACK
000017CE  6100 2014                849              BSR     GET_EA_EA_DEST
000017D2                           850              
000017D2  4E75                     851              RTS
000017D4                           852  
000017D4                           853              
000017D4                           854  *---------------------------------------------------------------------------*
000017D4                           855  * OP0011: decode MOVE.W/MOVEA.W
000017D4                           856  *---------------------------------------------------------------------------*
000017D4                           857  OP0011      
000017D4  4280                     858              CLR.L   D0                      
000017D6  4281                     859              CLR.L   D1  
000017D8  4284                     860              CLR.L   D4                   
000017DA  227C 00000000            861              MOVEA.L #0, A1 
000017E0                           862                
000017E0  2205                     863              MOVE.L  D5,D1
000017E2  EC99                     864              ROR.L   #6,D1
000017E4  0281 00000007            865              ANDI.L  #$07,D1
000017EA  0C01 0001                866              CMPI.B  #1,D1
000017EE  6700 0070                867              BEQ     OP_MOVEA_W
000017F2                           868              
000017F2  4EF9 000017F8            869              JMP     OP_MOVE_W
000017F8                           870            
000017F8                           871  *---------------------------------------------------------------------------*
000017F8                           872  * OP_MOVE_W: display MOVE_W and proceed to EA
000017F8                           873  *---------------------------------------------------------------------------*
000017F8                           874  OP_MOVE_W   
000017F8                           875             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000017F8  13FC 0082 00004578       876             MOVE.B   #$82,DEST_REGISTER_FORMAT
00001800  13FC 0000 00004579       877             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001808                           878             
00001808                           879             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001808  13FC 00B9 0000457B       880             MOVE.B   #$B9,GET_DST_START_END
00001810  13FC 0020 0000457C       881             MOVE.B   #$20,GET_SRC_START_END
00001818                           882             
00001818                           883              *CLEAR D3
00001818  4283                     884              CLR.L   D3
0000181A                           885              *LOAD STACK WITH THIS OPMODE
0000181A  6100 2436                886              BSR     PUSH_STACK
0000181E  163C 004D                887              MOVE.B  #'M',D3
00001822  6100 242E                888              BSR     PUSH_STACK
00001826  163C 004F                889              MOVE.B  #'O',D3
0000182A  6100 2426                890              BSR     PUSH_STACK
0000182E  163C 0056                891              MOVE.B  #'V',D3
00001832  6100 241E                892              BSR     PUSH_STACK
00001836  163C 0045                893              MOVE.B  #'E',D3
0000183A  6100 2416                894              BSR     PUSH_STACK
0000183E  163C 002E                895              MOVE.B  #'.',D3
00001842  6100 240E                896              BSR     PUSH_STACK
00001846  163C 0057                897              MOVE.B  #'W',D3
0000184A  6100 2406                898              BSR     PUSH_STACK
0000184E                           899              
0000184E  6100 1B64                900              BSR     GET_EA_EA_SRC
00001852  163C 002C                901              MOVE.B  #',',D3
00001856  6100 23FA                902              BSR     PUSH_STACK
0000185A  6100 1F88                903              BSR     GET_EA_EA_DEST
0000185E                           904              
0000185E  4E75                     905              RTS
00001860                           906  
00001860                           907  *---------------------------------------------------------------------------*
00001860                           908  * OP_MOVEA_W: display MOVEA and proceed to EA
00001860                           909  *---------------------------------------------------------------------------*
00001860                           910  OP_MOVEA_W 
00001860                           911             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001860  13FC 00FD 00004578       912             MOVE.B   #$FD,DEST_REGISTER_FORMAT
00001868  13FC 0000 00004579       913             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001870                           914             
00001870                           915             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001870  13FC 00B9 0000457B       916             MOVE.B   #$B9,GET_DST_START_END
00001878  13FC 0020 0000457C       917             MOVE.B   #$20,GET_SRC_START_END
00001880                           918             
00001880                           919              *CLEAR D3
00001880  4283                     920              CLR.L   D3
00001882                           921              *LOAD STACK WITH THIS OPMODE
00001882  6100 23CE                922              BSR     PUSH_STACK
00001886  163C 004D                923              MOVE.B  #'M',D3
0000188A  6100 23C6                924              BSR     PUSH_STACK
0000188E  163C 004F                925              MOVE.B  #'O',D3
00001892  6100 23BE                926              BSR     PUSH_STACK
00001896  163C 0056                927              MOVE.B  #'V',D3
0000189A  6100 23B6                928              BSR     PUSH_STACK
0000189E  163C 0045                929              MOVE.B  #'E',D3
000018A2  6100 23AE                930              BSR     PUSH_STACK           
000018A6  163C 0041                931              MOVE.B  #'A',D3
000018AA  6100 23A6                932              BSR     PUSH_STACK
000018AE  163C 002E                933              MOVE.B  #'.',D3
000018B2  6100 239E                934              BSR     PUSH_STACK
000018B6  163C 0057                935              MOVE.B  #'W',D3
000018BA  6100 2396                936              BSR     PUSH_STACK
000018BE                           937              
000018BE  6100 1AF4                938              BSR     GET_EA_EA_SRC
000018C2  163C 002C                939              MOVE.B  #',',D3
000018C6  6100 238A                940              BSR     PUSH_STACK
000018CA  6100 1F18                941              BSR     GET_EA_EA_DEST
000018CE                           942            
000018CE  4E75                     943              RTS
000018D0                           944  *---------------------------------------------------------------------------*
000018D0                           945  * OP0100: decode MOVEM/LEA/NEG/JSR/RTS/NOT
000018D0                           946  *---------------------------------------------------------------------------*
000018D0                           947  OP0100
000018D0  4280                     948              CLR.L   D0                      
000018D2  4281                     949              CLR.L   D1  
000018D4  4284                     950              CLR.L   D4                      
000018D6  227C 00000000            951              MOVEA.L #0, A1                  
000018DC  2205                     952              MOVE.L  D5,D1  
000018DE                           953              
000018DE                           954              * check for RTS
000018DE  0C41 4E75                955              CMPI.W  #$4E75,D1   * 0100 1110 0111 0101
000018E2  6700 0228                956              BEQ     OP_RTS
000018E6                           957              
000018E6                           958              * check for JSR     * 0100 1110 10 xxx (ea mode) xxx (ea reg)
000018E6  4281                     959              CLR.L   D1 
000018E8  2205                     960              MOVE.L  D5,D1  
000018EA  0241 0F00                961              ANDI.W  #$0F00,D1
000018EE  0C41 0E00                962              CMPI.W  #$0E00,D1
000018F2  6700 0204                963              BEQ     OP_JSR
000018F6                           964  
000018F6                           965              * check for NEG     * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
000018F6  4281                     966              CLR.L   D1 
000018F8  2205                     967              MOVE.L  D5,D1  
000018FA  0241 0F00                968              ANDI.W  #$0F00,D1
000018FE  0C41 0400                969              CMPI.W  #$0400,D1
00001902  6700 00E8                970              BEQ     OP_NEG
00001906                           971              
00001906                           972              * check for NOT     * 0100 0110 xx (size) xxx (ea mode) xxx (ea reg)
00001906  4281                     973              CLR.L   D1 
00001908  2205                     974              MOVE.L  D5,D1  
0000190A  0241 0F00                975              ANDI.W  #$0F00,D1
0000190E  0C41 0600                976              CMPI.W  #$0600,D1
00001912  6700 015E                977              BEQ     OP_NOT
00001916                           978              
00001916                           979              * check for LEA     * 0100 xxx (reg) 111 xxx (ea mode) xxx (ea reg)
00001916  4281                     980              CLR.L   D1 
00001918  2205                     981              MOVE.L  D5,D1  
0000191A  EC99                     982              ROR.L   #6,D1
0000191C  0281 00000007            983              ANDI.L  #7,D1
00001922  0C81 00000007            984              CMPI.L  #7,D1
00001928  6700 0054                985              BEQ     OP_LEA
0000192C                           986              
0000192C                           987              * check for MOVEM   * 0100 1 x 001 x (size) xxx (ea mode) xxx (ea reg)
0000192C  4281                     988              CLR.L   D1 
0000192E  2205                     989              MOVE.L  D5,D1  
00001930  EB59                     990              ROL.W   #5,D1
00001932  0C01 0001                991              CMPI.B  #1,D1
00001936  6600 FBA2                992              BNE     OP_DATA
0000193A  E959                     993              ROL.W   #4,D1
0000193C  0C01 0001                994              CMPI.B  #1,D1
00001940  6600 FB98                995              BNE     OP_DATA
00001944  E359                     996              ROL.W   #1,D1
00001946  0C01 0000                997              CMPI.B  #0,D1
0000194A  6700 000E                998              BEQ     OP_MOVEM_W
0000194E  0C01 0001                999              CMPI.B  #1,D1
00001952  6700 0018               1000              BEQ     OP_MOVEM_L
00001956  4EF8 14DA               1001              JMP     OP_DATA
0000195A                          1002  
0000195A                          1003  *---------------------------------------------------------------------------*
0000195A                          1004  * OP_MOVEM_W: display MOVEM_W
0000195A                          1005  *---------------------------------------------------------------------------*    
0000195A                          1006  OP_MOVEM_W  
0000195A  183C 0001               1007              MOVE.B  #1,D4
0000195E  43F9 00004337           1008              LEA     DISP_MOVEM_W,A1
00001964  103C 000E               1009              MOVE.B  #14,D0
00001968  4E4F                    1010              TRAP    #15
0000196A  4E75                    1011              RTS
0000196C                          1012  
0000196C                          1013  *---------------------------------------------------------------------------*
0000196C                          1014  * OP_MOVEM_L: display MOVEM_L
0000196C                          1015  *---------------------------------------------------------------------------*
0000196C                          1016  OP_MOVEM_L  
0000196C  183C 0002               1017              MOVE.B  #2,D4
00001970  43F9 00004342           1018              LEA     DISP_MOVEM_L,A1
00001976  103C 000E               1019              MOVE.B  #14,D0
0000197A  4E4F                    1020              TRAP    #15
0000197C  4E75                    1021              RTS
0000197E                          1022     
0000197E                          1023  *---------------------------------------------------------------------------*
0000197E                          1024  * OP_LEA: decode and display LEA
0000197E                          1025  *---------------------------------------------------------------------------*
0000197E                          1026  OP_LEA      
0000197E  4281                    1027               CLR.L   D1       
00001980  4284                    1028              CLR.L   D4                   
00001982  227C 00000000           1029              MOVEA.L #0, A1              
00001988  2205                    1030              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
0000198A                          1031              *CLEAR D3
0000198A  4283                    1032              CLR.L   D3
0000198C                          1033  
0000198C                          1034  OP_LEA_DN_EA_OR_EA_DN 
0000198C                          1035              *LOAD STACK WITH THIS OPMODE
0000198C  6100 22C4               1036              BSR     PUSH_STACK
00001990  163C 004C               1037              MOVE.B  #'L',D3
00001994  6100 22BC               1038              BSR     PUSH_STACK
00001998  163C 0045               1039              MOVE.B  #'E',D3
0000199C  6100 22B4               1040              BSR     PUSH_STACK
000019A0  163C 0041               1041              MOVE.B  #'A',D3
000019A4  6100 22AC               1042              BSR     PUSH_STACK
000019A8  2205                    1043              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
000019AA                          1044          
000019AA                          1045  
000019AA                          1046  OP_PRINT_L_LEA
000019AA                          1047                          
000019AA                          1048              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000019AA  13FC 0000 00004578      1049              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000019B2  13FC 009B 00004579      1050              MOVE.B   #$9B,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000019BA                          1051             
000019BA                          1052              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000019BA  13FC 00B9 0000457B      1053              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000019C2  13FC 0020 0000457C      1054              MOVE.B   #$20,GET_SRC_START_END
000019CA                          1055  
000019CA                          1056              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000019CA  0285 0000FE3F           1057              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000019D0  0685 00000040           1058              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
000019D6                          1059  
000019D6  6100 19DC               1060              BSR     GET_EA_EA_SRC      *GETS <ea>
000019DA  163C 002C               1061              MOVE.B  #',',D3
000019DE  6100 2272               1062              BSR     PUSH_STACK           
000019E2  6100 1E00               1063              BSR     GET_EA_EA_DEST       *GETS Dn    
000019E6                          1064  
000019E6                          1065              
000019E6  6000 0002               1066              BRA     OP_LEA_RETURN
000019EA                          1067              
000019EA                          1068  OP_LEA_RETURN
000019EA  4E75                    1069              RTS
000019EC                          1070              
000019EC                          1071  
000019EC                          1072  
000019EC                          1073  *---------------------------------------------------------------------------*
000019EC                          1074  * OP_NEG: decode and display NEG 
000019EC                          1075  *---------------------------------------------------------------------------*
000019EC                          1076  OP_NEG      * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
000019EC  4281                    1077              CLR.L   D1
000019EE  4284                    1078              CLR.L   D4
000019F0  2205                    1079              MOVE.L  D5,D1
000019F2                          1080              
000019F2                          1081              *CLEAR D3
000019F2  4283                    1082              CLR.L   D3
000019F4                          1083              *LOAD STACK WITH THIS OPMODE
000019F4  6100 225C               1084              BSR     PUSH_STACK
000019F8  163C 004E               1085              MOVE.B  #'N',D3
000019FC  6100 2254               1086              BSR     PUSH_STACK
00001A00  163C 0045               1087              MOVE.B  #'E',D3
00001A04  6100 224C               1088              BSR     PUSH_STACK
00001A08  163C 0047               1089              MOVE.B  #'G',D3
00001A0C  6100 2244               1090              BSR     PUSH_STACK
00001A10  163C 002E               1091              MOVE.B  #'.',D3
00001A14  6100 223C               1092              BSR     PUSH_STACK
00001A18                          1093              
00001A18                          1094              
00001A18  EC99                    1095              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001A1A  0281 00000007           1096              ANDI.L  #$07,D1
00001A20                          1097              
00001A20  0C01 0000               1098              CMPI.B  #0,D1
00001A24  6700 0012               1099              BEQ     OP_NEG_B    * size is byte
00001A28  0C01 0001               1100              CMPI.B  #1,D1
00001A2C  6700 0016               1101              BEQ     OP_NEG_W    * size is word
00001A30  0C01 0002               1102              CMPI.B  #2,D1
00001A34  6700 001A               1103              BEQ     OP_NEG_L    * size is long
00001A38                          1104                         
00001A38                          1105  
00001A38                          1106  OP_NEG_B    * size is byte   
00001A38  163C 0042               1107              MOVE.B  #'B',D3
00001A3C  6100 2214               1108              BSR     PUSH_STACK
00001A40  6000 001A               1109              BRA     OP_NEG_PRINT_EA
00001A44                          1110  
00001A44                          1111              
00001A44                          1112  OP_NEG_W    * size is word
00001A44  163C 0057               1113              MOVE.B  #'W',D3
00001A48  6100 2208               1114              BSR     PUSH_STACK
00001A4C  6000 000E               1115              BRA     OP_NEG_PRINT_EA
00001A50                          1116  
00001A50                          1117              
00001A50                          1118  OP_NEG_L    * size is long
00001A50  163C 004C               1119              MOVE.B  #'L',D3
00001A54  6100 21FC               1120              BSR     PUSH_STACK
00001A58  6000 0002               1121              BRA     OP_NEG_PRINT_EA
00001A5C                          1122  
00001A5C                          1123  
00001A5C                          1124  OP_NEG_PRINT_EA
00001A5C                          1125   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001A5C  13FC 0082 00004579      1126             MOVE.B   #$82,SRC_REGISTER_FORMAT
00001A64                          1127             
00001A64                          1128             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001A64  13FC 0020 0000457C      1129             MOVE.B   #$20,GET_SRC_START_END
00001A6C                          1130                         
00001A6C                          1131  
00001A6C  6100 1946               1132              BSR     GET_EA_EA_SRC
00001A70                          1133              
00001A70  4E75                    1134              RTS
00001A72                          1135  
00001A72                          1136  *---------------------------------------------------------------------------*
00001A72                          1137  * OP_NOT: decode and display NOT 
00001A72                          1138  *---------------------------------------------------------------------------*
00001A72                          1139  OP_NOT
00001A72  4281                    1140              CLR.L   D1
00001A74  4284                    1141              CLR.L   D4
00001A76  2205                    1142              MOVE.L  D5,D1
00001A78                          1143              
00001A78                          1144              *CLEAR D3
00001A78  4283                    1145              CLR.L   D3
00001A7A                          1146              *LOAD STACK WITH THIS OPMODE
00001A7A  6100 21D6               1147              BSR     PUSH_STACK
00001A7E  163C 004E               1148              MOVE.B  #'N',D3
00001A82  6100 21CE               1149              BSR     PUSH_STACK
00001A86  163C 004F               1150              MOVE.B  #'O',D3
00001A8A  6100 21C6               1151              BSR     PUSH_STACK
00001A8E  163C 0054               1152              MOVE.B  #'T',D3
00001A92  6100 21BE               1153              BSR     PUSH_STACK
00001A96  163C 002E               1154              MOVE.B  #'.',D3
00001A9A  6100 21B6               1155              BSR     PUSH_STACK
00001A9E                          1156              
00001A9E                          1157              
00001A9E  EC99                    1158              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001AA0  0281 00000007           1159              ANDI.L  #$07,D1
00001AA6                          1160              
00001AA6  0C01 0000               1161              CMPI.B  #0,D1
00001AAA  6700 0012               1162              BEQ     OP_NOT_B    * size is byte
00001AAE  0C01 0001               1163              CMPI.B  #1,D1
00001AB2  6700 0016               1164              BEQ     OP_NOT_W    * size is word
00001AB6  0C01 0002               1165              CMPI.B  #2,D1
00001ABA  6700 001A               1166              BEQ     OP_NOT_L    * size is long
00001ABE                          1167                         
00001ABE                          1168  
00001ABE                          1169  OP_NOT_B    * size is byte   
00001ABE  163C 0042               1170              MOVE.B  #'B',D3
00001AC2  6100 218E               1171              BSR     PUSH_STACK
00001AC6  6000 001A               1172              BRA     OP_NOT_PRINT_EA
00001ACA                          1173  
00001ACA                          1174              
00001ACA                          1175  OP_NOT_W    * size is word
00001ACA  163C 0057               1176              MOVE.B  #'W',D3
00001ACE  6100 2182               1177              BSR     PUSH_STACK
00001AD2  6000 000E               1178              BRA     OP_NOT_PRINT_EA
00001AD6                          1179  
00001AD6                          1180              
00001AD6                          1181  OP_NOT_L    * size is long
00001AD6  163C 004C               1182              MOVE.B  #'L',D3
00001ADA  6100 2176               1183              BSR     PUSH_STACK
00001ADE  6000 0002               1184              BRA     OP_NOT_PRINT_EA
00001AE2                          1185  
00001AE2                          1186  
00001AE2                          1187  OP_NOT_PRINT_EA
00001AE2                          1188   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001AE2  13FC 0082 00004579      1189             MOVE.B   #$82,SRC_REGISTER_FORMAT
00001AEA                          1190             
00001AEA                          1191             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001AEA  13FC 0020 0000457C      1192             MOVE.B   #$20,GET_SRC_START_END
00001AF2  6100 18C0               1193              BSR     GET_EA_EA_SRC
00001AF6                          1194              
00001AF6  4E75                    1195              RTS
00001AF8                          1196  
00001AF8                          1197  
00001AF8                          1198  *---------------------------------------------------------------------------*
00001AF8                          1199  * OP_JSR: display JSR     
00001AF8                          1200  *---------------------------------------------------------------------------*
00001AF8  43F9 000042F3           1201  OP_JSR      LEA     DISP_JSR,A1
00001AFE  103C 000E               1202              MOVE.B  #14,D0
00001B02  4E4F                    1203              TRAP    #15
00001B04  4EB9 00002F04           1204              JSR     EA_NOSRC
00001B0A                          1205  
00001B0A  4E75                    1206              RTS
00001B0C                          1207  
00001B0C                          1208  *---------------------------------------------------------------------------*
00001B0C                          1209  * OP_RTS: display RTS     
00001B0C                          1210  *---------------------------------------------------------------------------* 
00001B0C                          1211  OP_RTS      
00001B0C  163C 0052               1212              MOVE.B #'R',D3
00001B10  6100 2140               1213              BSR     PUSH_STACK
00001B14  163C 0054               1214              MOVE.B #'T',D3
00001B18  6100 2138               1215              BSR     PUSH_STACK
00001B1C  163C 0053               1216              MOVE.B #'S',D3
00001B20  6100 2130               1217              BSR     PUSH_STACK
00001B24  4E75                    1218              RTS
00001B26                          1219  
00001B26                          1220  *---------------------------------------------------------------------------*
00001B26                          1221  * OP0101: decode ADDQ
00001B26                          1222  *---------------------------------------------------------------------------* 
00001B26                          1223  OP0101      
00001B26                          1224             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001B26  13FC 0082 00004578      1225             MOVE.B   #$82,DEST_REGISTER_FORMAT
00001B2E  13FC 0080 00004579      1226             MOVE.B   #$80,SRC_REGISTER_FORMAT
00001B36                          1227             
00001B36                          1228             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001B36  13FC 00B9 0000457B      1229             MOVE.B   #$B9,GET_DST_START_END
00001B3E  13FC 0020 0000457C      1230             MOVE.B   #$20,GET_SRC_START_END
00001B46                          1231             
00001B46                          1232              *CLEAR D3
00001B46  4283                    1233              CLR.L   D3
00001B48                          1234              *LOAD STACK WITH THIS OPMODE
00001B48  6100 2108               1235              BSR     PUSH_STACK
00001B4C  163C 0041               1236              MOVE.B  #'A',D3
00001B50  6100 2100               1237              BSR     PUSH_STACK
00001B54  163C 0044               1238              MOVE.B  #'D',D3
00001B58  6100 20F8               1239              BSR     PUSH_STACK
00001B5C  163C 0044               1240              MOVE.B  #'D',D3
00001B60  6100 20F0               1241              BSR     PUSH_STACK
00001B64  163C 0051               1242              MOVE.B  #'Q',D3
00001B68  6100 20E8               1243              BSR     PUSH_STACK
00001B6C  163C 002E               1244              MOVE.B  #'.',D3
00001B70  6100 20E0               1245              BSR     PUSH_STACK
00001B74                          1246              
00001B74                          1247              *FIGURE OUT SIZE*
00001B74                          1248              *00 = BYTE
00001B74                          1249              *01 = WORD
00001B74                          1250              *10 = LONG
00001B74                          1251              * BITS 7&6
00001B74                          1252              
00001B74                          1253              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
00001B74  2205                    1254              MOVE.L  D5,D1
00001B76  EC99                    1255              ROR.L   #6,D1
00001B78  0281 00000003           1256              ANDI.L  #$03,D1
00001B7E  0C01 0000               1257              CMPI.B  #%00,D1
00001B82  6700 001E               1258              BEQ     OP0101_ADDQ_B
00001B86  0281 00000003           1259              ANDI.L  #$03,D1
00001B8C  0C01 0001               1260              CMPI.B  #%01,D1
00001B90  6700 001C               1261              BEQ     OP0101_ADDQ_W
00001B94  0281 00000003           1262              ANDI.L  #$03,D1
00001B9A  0C01 0002               1263              CMPI.B  #%10,D1
00001B9E  6700 001A               1264              BEQ     OP0101_ADDQ_L
00001BA2                          1265            
00001BA2                          1266  OP0101_ADDQ_B
00001BA2                          1267              
00001BA2  163C 0042               1268              MOVE.B  #'B',D3
00001BA6  6100 20AA               1269              BSR     PUSH_STACK
00001BAA  6000 0016               1270              BRA     OP0101_RETURN
00001BAE                          1271  OP0101_ADDQ_W
00001BAE                          1272              
00001BAE  163C 0057               1273              MOVE.B  #'W',D3
00001BB2  6100 209E               1274              BSR     PUSH_STACK
00001BB6  6000 000A               1275              BRA     OP0101_RETURN
00001BBA                          1276  OP0101_ADDQ_L
00001BBA                          1277              
00001BBA  163C 004C               1278              MOVE.B  #'L',D3
00001BBE  6100 2092               1279              BSR     PUSH_STACK
00001BC2                          1280  OP0101_RETURN            
00001BC2                          1281  
00001BC2                          1282              
00001BC2                          1283  *GET DATA FROM ADDQ AND PRINT #0-8
00001BC2  163C 0020               1284              MOVE.B  #' ',D3
00001BC6  6100 208A               1285              BSR     PUSH_STACK
00001BCA  163C 0023               1286              MOVE.B  #'#',D3
00001BCE  6100 2082               1287              BSR     PUSH_STACK 
00001BD2                          1288  
00001BD2                          1289                       
00001BD2                          1290              *GET DATA #   
00001BD2  2205                    1291              MOVE.L  D5,D1
00001BD4  EC99                    1292              ROR.L   #6,D1            
00001BD6  E699                    1293              ROR.L   #3,D1
00001BD8  0281 00000007           1294              ANDI.L  #$07,D1
00001BDE                          1295              
00001BDE  0C01 0000               1296              CMPI.B  #%000,D1
00001BE2  6700 009A               1297              BEQ     OP0101_ADDQ_B_8
00001BE6  0C01 0001               1298              CMPI.B  #%001,D1
00001BEA  6700 003E               1299              BEQ     OP0101_ADDQ_B_1
00001BEE  0C01 0002               1300              CMPI.B  #%010,D1
00001BF2  6700 0042               1301              BEQ     OP0101_ADDQ_B_2
00001BF6  0C01 0003               1302              CMPI.B  #%011,D1
00001BFA  6700 0046               1303              BEQ     OP0101_ADDQ_B_3
00001BFE  0C01 0004               1304              CMPI.B  #%100,D1
00001C02  6700 004A               1305              BEQ     OP0101_ADDQ_B_4
00001C06  0C01 0005               1306              CMPI.B  #%101,D1
00001C0A  6700 004E               1307              BEQ     OP0101_ADDQ_B_5
00001C0E  0C01 0006               1308              CMPI.B  #%110,D1
00001C12  6700 0052               1309              BEQ     OP0101_ADDQ_B_6
00001C16  0C01 0007               1310              CMPI.B  #%111,D1
00001C1A  6700 0056               1311              BEQ     OP0101_ADDQ_B_7
00001C1E                          1312              
00001C1E                          1313  OP0101_ADDQ_B_0
00001C1E  163C 0030               1314              MOVE.B  #'0',D3
00001C22  6100 202E               1315              BSR     PUSH_STACK
00001C26  6000 005E               1316              BRA     OP0101_RETURN2            
00001C2A                          1317  OP0101_ADDQ_B_1
00001C2A  163C 0031               1318              MOVE.B  #'1',D3
00001C2E  6100 2022               1319              BSR     PUSH_STACK
00001C32  6000 0052               1320              BRA     OP0101_RETURN2            
00001C36                          1321  OP0101_ADDQ_B_2
00001C36  163C 0032               1322              MOVE.B  #'2',D3
00001C3A  6100 2016               1323              BSR     PUSH_STACK
00001C3E  6000 0046               1324              BRA     OP0101_RETURN2            
00001C42                          1325  OP0101_ADDQ_B_3
00001C42  163C 0033               1326              MOVE.B  #'3',D3
00001C46  6100 200A               1327              BSR     PUSH_STACK
00001C4A  6000 003A               1328              BRA     OP0101_RETURN2            
00001C4E                          1329  OP0101_ADDQ_B_4
00001C4E  163C 0034               1330              MOVE.B  #'4',D3
00001C52  6100 1FFE               1331              BSR     PUSH_STACK
00001C56  6000 002E               1332              BRA     OP0101_RETURN2            
00001C5A                          1333  OP0101_ADDQ_B_5
00001C5A  163C 0035               1334              MOVE.B  #'5',D3
00001C5E  6100 1FF2               1335              BSR     PUSH_STACK
00001C62  6000 0022               1336              BRA     OP0101_RETURN2
00001C66                          1337  OP0101_ADDQ_B_6
00001C66  163C 0036               1338              MOVE.B  #'6',D3
00001C6A  6100 1FE6               1339              BSR     PUSH_STACK
00001C6E  6000 0016               1340              BRA     OP0101_RETURN2
00001C72                          1341  OP0101_ADDQ_B_7
00001C72  163C 0037               1342              MOVE.B  #'7',D3
00001C76  6100 1FDA               1343              BSR     PUSH_STACK
00001C7A  6000 000A               1344              BRA     OP0101_RETURN2
00001C7E                          1345  
00001C7E                          1346  OP0101_ADDQ_B_8
00001C7E  163C 0038               1347              MOVE.B  #'8',D3
00001C82  6100 1FCE               1348              BSR     PUSH_STACK
00001C86                          1349              
00001C86                          1350  OP0101_RETURN2            
00001C86  163C 002C               1351              MOVE.B  #',',D3
00001C8A  6100 1FC6               1352              BSR     PUSH_STACK
00001C8E  6100 1724               1353              BSR     GET_EA_EA_SRC
00001C92                          1354              
00001C92  4E75                    1355              RTS
00001C94                          1356  
00001C94                          1357  
00001C94                          1358              
00001C94                          1359  *---------------------------------------------------------------------------*
00001C94                          1360  * OP_ADDQ: display ADDQ
00001C94                          1361  *---------------------------------------------------------------------------*              
00001C94                          1362  OP_ADDQ_B    * size is byte   
00001C94  183C 0000               1363              MOVE.B  #0,D4 
00001C98  43F9 0000434D           1364              LEA     DISP_ADDQ_B,A1
00001C9E  103C 000E               1365              MOVE.B  #14,D0
00001CA2  4E4F                    1366              TRAP    #15
00001CA4  4E75                    1367              RTS
00001CA6                          1368              
00001CA6                          1369  OP_ADDQ_W    * size is word
00001CA6  183C 0001               1370              MOVE.B  #1,D4
00001CAA  43F9 00004357           1371              LEA     DISP_ADDQ_W,A1
00001CB0  103C 000E               1372              MOVE.B  #14,D0
00001CB4  4E4F                    1373              TRAP    #15
00001CB6  4E75                    1374              RTS
00001CB8                          1375              
00001CB8                          1376  OP_ADDQ_L    * size is long
00001CB8  183C 0002               1377              MOVE.B  #2,D4
00001CBC  43F9 00004361           1378              LEA     DISP_ADDQ_L,A1
00001CC2  103C 000E               1379              MOVE.B  #14,D0
00001CC6  4E4F                    1380              TRAP    #15
00001CC8  4E75                    1381              RTS
00001CCA                          1382  
00001CCA                          1383  *---------------------------------------------------------------------------*
00001CCA                          1384  * OP0110: decode BRA/BEQ/BNE/BLT/BHI
00001CCA                          1385  *---------------------------------------------------------------------------*              
00001CCA  4280                    1386  OP0110      CLR.L   D0                  
00001CCC  4281                    1387              CLR.L   D1   
00001CCE  4284                    1388              CLR.L   D4                 
00001CD0  227C 00000000           1389              MOVEA.L #0,A1
00001CD6  2205                    1390              MOVE.L  D5, D1                
00001CD8  0281 000000FF           1391              ANDI.L  #$00FF, D1              * Get 8-bit displacement 
00001CDE  2205                    1392              MOVE.L  D5,D1                  
00001CE0  0281 00000F00           1393              ANDI.L  #$0F00,D1
00001CE6                          1394                 
00001CE6  0C41 0000               1395              CMPI.W  #$0000,D1               * Check for BRA
00001CEA  6700 0050               1396              BEQ     OP_BRA                  
00001CEE                          1397                          
00001CEE  0C41 0D00               1398              CMPI.W  #$0D00,D1               * Check for BLT
00001CF2  6700 0056               1399              BEQ     OP_BLT      
00001CF6                          1400  
00001CF6  0C41 0700               1401              CMPI.W  #$0700,D1               * Check for BEQ
00001CFA  6700 0032               1402              BEQ     OP_BEQ      
00001CFE                          1403  
00001CFE  0C41 0600               1404              CMPI.W  #$0600,D1               * Check for BNE
00001D02  6700 001C               1405              BEQ     OP_BNE  
00001D06                          1406              
00001D06  0C41 0200               1407              CMPI.W  #$0200,D1               * Check for BHI
00001D0A  6700 0006               1408              BEQ     OP_BHI
00001D0E                          1409  
00001D0E  4EF8 14DA               1410              JMP     OP_DATA
00001D12                          1411              
00001D12  43F9 0000451C           1412  OP_BHI      LEA     DISP_BHI,A1             
00001D18  103C 000E               1413              MOVE.B  #14,D0
00001D1C  4E4F                    1414              TRAP    #15
00001D1E  4E75                    1415              RTS
00001D20                          1416  
00001D20  43F9 00004515           1417  OP_BNE      LEA     DISP_BNE,A1             
00001D26  103C 000E               1418              MOVE.B  #14,D0
00001D2A  4E4F                    1419              TRAP    #15
00001D2C  4E75                    1420              RTS
00001D2E                          1421  
00001D2E  43F9 0000450E           1422  OP_BEQ      LEA     DISP_BEQ,A1             
00001D34  103C 000E               1423              MOVE.B  #14,D0
00001D38  4E4F                    1424              TRAP    #15
00001D3A  4E75                    1425              RTS          
00001D3C                          1426                          
00001D3C  43F9 00004500           1427  OP_BRA      LEA     DISP_BRA,A1             
00001D42  103C 000E               1428              MOVE.B  #14,D0
00001D46  4E4F                    1429              TRAP    #15
00001D48  4E75                    1430              RTS
00001D4A                          1431              
00001D4A  43F9 00004507           1432  OP_BLT      LEA     DISP_BLT,A1          
00001D50  103C 000E               1433              MOVE.B  #14,D0
00001D54  4E4F                    1434              TRAP    #15
00001D56  4E75                    1435              RTS
00001D58                          1436     
00001D58                          1437  *---------------------------------------------------------------------------*
00001D58                          1438  * OP0111 : MOVEQ not required
00001D58                          1439  *---------------------------------------------------------------------------*           
00001D58  4EF8 14DA               1440  OP0111      JMP     OP_DATA
00001D5C                          1441             
00001D5C                          1442  *---------------------------------------------------------------------------*
00001D5C                          1443  * OP1000 : decode DIVS
00001D5C                          1444  *---------------------------------------------------------------------------*           
00001D5C                          1445  OP1000                           
00001D5C  4281                    1446              CLR.L   D1       
00001D5E  4284                    1447              CLR.L   D4                   
00001D60  227C 00000000           1448              MOVEA.L #0, A1              
00001D66  2205                    1449              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
00001D68                          1450              *CLEAR D3
00001D68  4283                    1451              CLR.L   D3
00001D6A                          1452  
00001D6A                          1453  OP1000_DIVS_DN_EA_OR_EA_DN 
00001D6A                          1454              *LOAD STACK WITH THIS OPMODE
00001D6A  6100 1EE6               1455              BSR     PUSH_STACK
00001D6E  163C 0044               1456              MOVE.B  #'D',D3
00001D72  6100 1EDE               1457              BSR     PUSH_STACK
00001D76  163C 0049               1458              MOVE.B  #'I',D3
00001D7A  6100 1ED6               1459              BSR     PUSH_STACK
00001D7E  163C 0056               1460              MOVE.B  #'V',D3
00001D82  6100 1ECE               1461              BSR     PUSH_STACK
00001D86  163C 0053               1462              MOVE.B  #'S',D3
00001D8A  6100 1EC6               1463              BSR     PUSH_STACK
00001D8E  163C 002E               1464              MOVE.B  #'.',D3
00001D92  6100 1EBE               1465              BSR     PUSH_STACK
00001D96                          1466              
00001D96  2205                    1467              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00001D98                          1468              
00001D98                          1469  OP1000_EA_DN_DIVS
00001D98                          1470              *BITS (7 TO 6) 
00001D98                          1471              *00 = .B
00001D98                          1472              *01 = .W
00001D98                          1473              *10 = .L 
00001D98  2205                    1474              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00001D9A  EC99                    1475              ROR.L   #6,D1
00001D9C  0281 00000003           1476              ANDI.L  #$03,D1
00001DA2  0C81 00000003           1477              CMPI.L  #%11,D1 *EQUALS .W
00001DA8  6700 0014               1478              BEQ     OP1000_PRINT_W_DIVS
00001DAC  0C81 00000000           1479              CMPI.L  #%00,D1 *EQUALS .L
00001DB2  6700 0052               1480              BEQ     OP1000_PRINT_L_DIVS
00001DB6                          1481              
00001DB6  183C 0001               1482              MOVE.B  #1,D4               *ERROR READ
00001DBA  6000 0092               1483              BRA     OP1000_DIVS_RETURN
00001DBE                          1484  OP1000_PRINT_W_DIVS
00001DBE  163C 0057               1485              MOVE.B  #'W',D3
00001DC2  6100 1E8E               1486              BSR     PUSH_STACK
00001DC6                          1487  
00001DC6                          1488              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001DC6  13FC 0000 00004578      1489              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001DCE  13FC 0000 00004579      1490              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001DD6                          1491             
00001DD6                          1492              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001DD6  13FC 00B9 0000457B      1493              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001DDE  13FC 0020 0000457C      1494              MOVE.B   #$20,GET_SRC_START_END
00001DE6                          1495  
00001DE6                          1496             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001DE6  0285 0000FE3F           1497              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001DEC  0685 00000000           1498              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00001DF2                          1499  
00001DF2                          1500              
00001DF2  6100 15C0               1501              BSR     GET_EA_EA_SRC      *GETS <ea>
00001DF6  163C 002C               1502              MOVE.B  #',',D3
00001DFA  6100 1E56               1503              BSR     PUSH_STACK
00001DFE  6100 19E4               1504              BSR     GET_EA_EA_DEST       *GETS Dn    
00001E02                          1505              
00001E02  6000 004A               1506              BRA     OP1000_DIVS_RETURN
00001E06                          1507  OP1000_PRINT_L_DIVS
00001E06  163C 004C               1508              MOVE.B  #'L',D3
00001E0A  6100 1E46               1509              BSR     PUSH_STACK
00001E0E                          1510              
00001E0E                          1511              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001E0E  13FC 0000 00004578      1512              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001E16  13FC 0000 00004579      1513              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001E1E                          1514             
00001E1E                          1515              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001E1E  13FC 00B9 0000457B      1516              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001E26  13FC 0020 0000457C      1517              MOVE.B   #$20,GET_SRC_START_END
00001E2E                          1518  
00001E2E                          1519              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001E2E  0285 0000FE3F           1520              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001E34  0685 00000000           1521              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00001E3A                          1522  
00001E3A                          1523                     
00001E3A  6100 1578               1524              BSR     GET_EA_EA_SRC      *GETS <ea>
00001E3E  163C 002C               1525              MOVE.B  #',',D3
00001E42  6100 1E0E               1526              BSR     PUSH_STACK                  
00001E46  6100 199C               1527              BSR     GET_EA_EA_DEST       *GETS Dn    
00001E4A                          1528  
00001E4A                          1529              
00001E4A  6000 0002               1530              BRA     OP1000_DIVS_RETURN
00001E4E                          1531              
00001E4E                          1532  OP1000_DIVS_RETURN
00001E4E  4E75                    1533              RTS
00001E50                          1534              
00001E50                          1535  
00001E50                          1536  
00001E50                          1537  *---------------------------------------------------------------------------*
00001E50                          1538  * OP_DIVS: display DIVS and proceed to EA
00001E50                          1539  *---------------------------------------------------------------------------*  
00001E50  43F9 0000436B           1540  OP_DIVS     LEA     DISP_DIVS,A1
00001E56  103C 000E               1541              MOVE.B  #14,D0
00001E5A  4E4F                    1542              TRAP    #15
00001E5C  4EF9 00002F18           1543              JMP     EA_ARITH
00001E62                          1544  
00001E62  4E75                    1545              RTS
00001E64                          1546              
00001E64                          1547  *---------------------------------------------------------------------------*
00001E64                          1548  * OP1001: decode SUB/SUBA
00001E64                          1549  *---------------------------------------------------------------------------*      
00001E64                          1550  OP1001      
00001E64  4280                    1551              CLR.L   D0                  
00001E66  4281                    1552              CLR.L   D1       
00001E68  4284                    1553              CLR.L   D4                   
00001E6A  227C 00000000           1554              MOVEA.L #0, A1              
00001E70  2205                    1555              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
00001E72                          1556              
00001E72                          1557              *CLEAR D3
00001E72  4283                    1558              CLR.L   D3
00001E74                          1559              
00001E74                          1560              
00001E74                          1561              
00001E74                          1562              **INTEGRATING SUB.W/.L INTO THIS CODE**
00001E74  2205                    1563              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00001E76                          1564              *BITS (INDEX 8) 
00001E76                          1565              *0 = ADD.B/W/L <EA>,Dn
00001E76                          1566              *1 = ADD.B/W/L Dn,<EA> 
00001E76  EC99                    1567              ROR.L   #6,D1
00001E78  0281 00000007           1568              ANDI.L  #$07,D1                 *MASKS WITH 00000111
00001E7E  0C81 00000007           1569              CMPI.L  #$07,D1                 *IF EQUALS <ea>,Dn
00001E84  6700 0010               1570              BEQ     OP1001_SUBA_L            *BRANCHES TO ADDA.L
00001E88  0C81 00000003           1571              CMPI.L  #$03,D1                 *IF EQUALS <ea>,Dn
00001E8E  6700 0078               1572              BEQ     OP1001_SUBA_W           *BRANCHES TO ADDA.W
00001E92  6000 00E6               1573              BRA     OP1001_DETERMINE_DN_EA_OR_EA_DN         *ELSE CHECK ADD.B/.W/.L
00001E96                          1574              
00001E96                          1575  OP1001_SUBA_L
00001E96                          1576              *LOAD STACK WITH THIS OPMODE
00001E96  6100 1DBA               1577              BSR     PUSH_STACK
00001E9A  163C 0053               1578              MOVE.B  #'S',D3
00001E9E  6100 1DB2               1579              BSR     PUSH_STACK
00001EA2  163C 0055               1580              MOVE.B  #'U',D3
00001EA6  6100 1DAA               1581              BSR     PUSH_STACK
00001EAA  163C 0042               1582              MOVE.B  #'B',D3
00001EAE  6100 1DA2               1583              BSR     PUSH_STACK
00001EB2  163C 0041               1584              MOVE.B  #'A',D3
00001EB6  6100 1D9A               1585              BSR     PUSH_STACK
00001EBA  163C 002E               1586              MOVE.B  #'.',D3
00001EBE  6100 1D92               1587              BSR     PUSH_STACK
00001EC2  163C 004C               1588              MOVE.B  #'L',D3
00001EC6  6100 1D8A               1589              BSR     PUSH_STACK
00001ECA                          1590              
00001ECA                          1591             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001ECA  13FC 0000 00004578      1592             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001ED2  13FC 0000 00004579      1593             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001EDA                          1594             
00001EDA                          1595             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001EDA  13FC 00B9 0000457B      1596             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001EE2  13FC 0020 0000457C      1597             MOVE.B   #$20,GET_SRC_START_END
00001EEA                          1598  
00001EEA                          1599              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001EEA  0285 0000FE3F           1600              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001EF0  0685 00000040           1601              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00001EF6                          1602       
00001EF6                          1603              *PRINT <EA>,AN
00001EF6  6100 14BC               1604              BSR     GET_EA_EA_SRC       *GETS <ea>
00001EFA  163C 002C               1605              MOVE.B  #',',D3
00001EFE  6100 1D52               1606              BSR     PUSH_STACK                     
00001F02  6100 18E0               1607              BSR     GET_EA_EA_DEST      *GETS Dn
00001F06                          1608  
00001F06                          1609              
00001F06                          1610              
00001F06  4E75                    1611              RTS
00001F08                          1612  OP1001_SUBA_W
00001F08                          1613              *LOAD STACK WITH THIS OPMODE
00001F08  6100 1D48               1614              BSR     PUSH_STACK
00001F0C  163C 0053               1615              MOVE.B  #'S',D3
00001F10  6100 1D40               1616              BSR     PUSH_STACK
00001F14  163C 0055               1617              MOVE.B  #'U',D3
00001F18  6100 1D38               1618              BSR     PUSH_STACK
00001F1C  163C 0042               1619              MOVE.B  #'B',D3
00001F20  6100 1D30               1620              BSR     PUSH_STACK
00001F24  163C 0041               1621              MOVE.B  #'A',D3
00001F28  6100 1D28               1622              BSR     PUSH_STACK
00001F2C  163C 002E               1623              MOVE.B  #'.',D3
00001F30  6100 1D20               1624              BSR     PUSH_STACK
00001F34  163C 0057               1625              MOVE.B  #'W',D3
00001F38  6100 1D18               1626              BSR     PUSH_STACK
00001F3C                          1627              
00001F3C                          1628             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001F3C  13FC 0000 00004578      1629             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001F44  13FC 0000 00004579      1630             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001F4C                          1631             
00001F4C                          1632             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001F4C  13FC 00B9 0000457B      1633             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001F54  13FC 0020 0000457C      1634             MOVE.B   #$20,GET_SRC_START_END
00001F5C                          1635  
00001F5C                          1636              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001F5C  0285 0000FE3F           1637              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001F62  0685 00000040           1638              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00001F68                          1639       
00001F68                          1640              *PRINT <EA>,AN
00001F68  6100 144A               1641              BSR     GET_EA_EA_SRC       *GETS <ea>
00001F6C  163C 002C               1642              MOVE.B  #',',D3
00001F70  6100 1CE0               1643              BSR     PUSH_STACK                     
00001F74  6100 186E               1644              BSR     GET_EA_EA_DEST      *GETS Dn
00001F78                          1645  
00001F78  4E75                    1646              RTS
00001F7A                          1647  
00001F7A                          1648  OP1001_DETERMINE_DN_EA_OR_EA_DN 
00001F7A                          1649              *LOAD STACK WITH THIS OPMODE
00001F7A  6100 1CD6               1650              BSR     PUSH_STACK
00001F7E  163C 0053               1651              MOVE.B  #'S',D3
00001F82  6100 1CCE               1652              BSR     PUSH_STACK
00001F86  163C 0055               1653              MOVE.B  #'U',D3
00001F8A  6100 1CC6               1654              BSR     PUSH_STACK
00001F8E  163C 0042               1655              MOVE.B  #'B',D3
00001F92  6100 1CBE               1656              BSR     PUSH_STACK
00001F96  163C 002E               1657              MOVE.B  #'.',D3
00001F9A  6100 1CB6               1658              BSR     PUSH_STACK
00001F9E                          1659              
00001F9E  2205                    1660              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00001FA0                          1661              
00001FA0                          1662              *BITS (INDEX 8) 
00001FA0                          1663              *0 = ADD.B/W/L <EA>,Dn
00001FA0                          1664              *1 = ADD.B/W/L Dn,<EA> 
00001FA0  E099                    1665              ROR.L   #8,D1
00001FA2  0281 00000001           1666              ANDI.L  #$01,D1     *MASKS WITH 00000001
00001FA8  0C81 00000000           1667              CMPI.L  #$00,D1     *IF EQUALS <ea>,Dn
00001FAE  6700 0102               1668              BEQ     OP1001_EA_DN
00001FB2                          1669              *else procede to Dn_EA
00001FB2                          1670              
00001FB2                          1671  OP1001_DN_EA
00001FB2                          1672              *BITS (7 TO 6) 
00001FB2                          1673              *00 = .B
00001FB2                          1674              *01 = .W
00001FB2                          1675              *10 = .L 
00001FB2  2205                    1676              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00001FB4  EC99                    1677              ROR.L   #6,D1
00001FB6  0281 00000003           1678              ANDI.L  #$03,D1
00001FBC  0C81 00000000           1679              CMPI.L  #$00,D1 *EQUALS .B
00001FC2  6700 0016               1680              BEQ     OP1001_PRINT_B2
00001FC6  0C81 00000001           1681              CMPI.L  #$01,D1 *EQUALS .W
00001FCC  6700 0054               1682              BEQ     OP1001_PRINT_W2
00001FD0  0C81 00000002           1683              CMPI.L  #$02,D1 *EQUALS .L
00001FD6  6700 0092               1684              BEQ     OP1001_PRINT_L2
00001FDA                          1685  OP1001_PRINT_B2
00001FDA                          1686              *PUSH 'B'
00001FDA  163C 0042               1687              MOVE.B  #'B',D3
00001FDE  6100 1C72               1688              BSR     PUSH_STACK
00001FE2                          1689             
00001FE2                          1690              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001FE2  13FC 0000 00004578      1691             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001FEA  13FC 0083 00004579      1692             MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001FF2                          1693             
00001FF2                          1694             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001FF2  13FC 00B9 0000457B      1695             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001FFA  13FC 0020 0000457C      1696             MOVE.B   #$20,GET_SRC_START_END
00002002                          1697  
00002002                          1698              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002002  0285 0000FE3F           1699              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002008  0685 00000040           1700              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
0000200E                          1701       
0000200E  6100 17D4               1702              BSR     GET_EA_EA_DEST      *GETS Dn
00002012  163C 002C               1703              MOVE.B  #',',D3
00002016  6100 1C3A               1704              BSR     PUSH_STACK                     
0000201A  6100 1398               1705              BSR     GET_EA_EA_SRC       *GETS <ea>
0000201E                          1706  
0000201E                          1707              
0000201E  6000 0BA4               1708              BRA     OP1101_ADD_RETURN
00002022                          1709  OP1001_PRINT_W2
00002022  163C 0057               1710              MOVE.B  #'W',D3
00002026  6100 1C2A               1711              BSR     PUSH_STACK
0000202A                          1712  
0000202A                          1713              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000202A  13FC 0000 00004578      1714              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002032  13FC 0083 00004579      1715              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000203A                          1716             
0000203A                          1717              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000203A  13FC 00B9 0000457B      1718              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002042  13FC 0020 0000457C      1719              MOVE.B   #$20,GET_SRC_START_END
0000204A                          1720  
0000204A                          1721              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000204A  0285 0000FE3F           1722              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002050  0685 00000040           1723              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A An Register (001) 
00002056                          1724  
00002056                          1725        
00002056  6100 178C               1726              BSR     GET_EA_EA_DEST      *GETS Dn
0000205A  163C 002C               1727              MOVE.B  #',',D3
0000205E  6100 1BF2               1728              BSR     PUSH_STACK               
00002062  6100 1350               1729              BSR     GET_EA_EA_SRC       *GETS <ea>       
00002066                          1730  
00002066                          1731  
00002066                          1732  
00002066  6000 0B5C               1733              BRA     OP1101_ADD_RETURN
0000206A                          1734  OP1001_PRINT_L2 
0000206A  163C 004C               1735              MOVE.B  #'L',D3
0000206E  6100 1BE2               1736              BSR     PUSH_STACK
00002072                          1737              
00002072                          1738              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002072  13FC 0000 00004578      1739              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000207A  13FC 0083 00004579      1740              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002082                          1741             
00002082                          1742              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002082  13FC 00B9 0000457B      1743              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000208A  13FC 0020 0000457C      1744              MOVE.B   #$20,GET_SRC_START_END
00002092                          1745  
00002092                          1746             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002092  0285 0000FE3F           1747              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002098  0685 00000040           1748              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
0000209E                          1749  
0000209E                          1750               
0000209E  6100 1744               1751              BSR     GET_EA_EA_DEST       *GETS Dn
000020A2  163C 002C               1752              MOVE.B  #',',D3
000020A6  6100 1BAA               1753              BSR     PUSH_STACK          
000020AA  6100 1308               1754              BSR     GET_EA_EA_SRC        *GETS <ea>
000020AE                          1755  
000020AE  6000 0B14               1756              BRA     OP1101_ADD_RETURN
000020B2                          1757              
000020B2                          1758  OP1001_EA_DN           
000020B2                          1759              *BITS (7 TO 6) 
000020B2                          1760              *00 = .B
000020B2                          1761              *01 = .W
000020B2                          1762              *10 = .L 
000020B2  2205                    1763              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
000020B4  EC99                    1764              ROR.L   #6,D1
000020B6  0281 00000003           1765              ANDI.L  #$03,D1
000020BC  0C81 00000000           1766              CMPI.L  #$00,D1 *EQUALS .B
000020C2  6700 0016               1767              BEQ     OP1001_PRINT_B
000020C6  0C81 00000001           1768              CMPI.L  #$01,D1 *EQUALS .W
000020CC  6700 0054               1769              BEQ     OP1001_PRINT_W
000020D0  0C81 00000002           1770              CMPI.L  #$02,D1 *EQUALS .L
000020D6  6700 0092               1771              BEQ     OP1001_PRINT_L
000020DA                          1772  OP1001_PRINT_B
000020DA  163C 0042               1773              MOVE.B  #'B',D3
000020DE  6100 1B72               1774              BSR     PUSH_STACK
000020E2                          1775                
000020E2                          1776              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000020E2  13FC 0000 00004578      1777              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000020EA  13FC 0002 00004579      1778              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000020F2                          1779             
000020F2                          1780              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000020F2  13FC 00B9 0000457B      1781              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000020FA  13FC 0020 0000457C      1782              MOVE.B   #$20,GET_SRC_START_END
00002102                          1783  
00002102                          1784             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002102  0285 0000FE3F           1785              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002108  0685 00000040           1786              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "AN" Register (001) 
0000210E                          1787  
0000210E                          1788              
0000210E  6100 12A4               1789              BSR     GET_EA_EA_SRC      *GETS <ea>
00002112  163C 002C               1790              MOVE.B  #',',D3
00002116  6100 1B3A               1791              BSR     PUSH_STACK          
0000211A  6100 16C8               1792              BSR     GET_EA_EA_DEST       *GETS Dn
0000211E                          1793              
0000211E  6000 0AA4               1794              BRA     OP1101_ADD_RETURN
00002122                          1795  OP1001_PRINT_W
00002122  163C 0057               1796              MOVE.B  #'W',D3
00002126  6100 1B2A               1797              BSR     PUSH_STACK
0000212A                          1798  
0000212A                          1799              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000212A  13FC 0000 00004578      1800              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002132  13FC 0000 00004579      1801              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000213A                          1802             
0000213A                          1803              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000213A  13FC 00B9 0000457B      1804              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002142  13FC 0020 0000457C      1805              MOVE.B   #$20,GET_SRC_START_END
0000214A                          1806  
0000214A                          1807             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000214A  0285 0000FE3F           1808              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002150  0685 00000040           1809              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002156                          1810  
00002156                          1811              
00002156  6100 125C               1812              BSR     GET_EA_EA_SRC      *GETS <ea>
0000215A  163C 002C               1813              MOVE.B  #',',D3
0000215E  6100 1AF2               1814              BSR     PUSH_STACK
00002162  6100 1680               1815              BSR     GET_EA_EA_DEST       *GETS Dn    
00002166                          1816              
00002166  6000 004A               1817              BRA     OP1001_ADD_RETURN
0000216A                          1818  OP1001_PRINT_L 
0000216A  163C 004C               1819              MOVE.B  #'L',D3
0000216E  6100 1AE2               1820              BSR     PUSH_STACK
00002172                          1821              
00002172                          1822              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002172  13FC 0000 00004578      1823              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000217A  13FC 0000 00004579      1824              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002182                          1825             
00002182                          1826              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002182  13FC 00B9 0000457B      1827              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000218A  13FC 0020 0000457C      1828              MOVE.B   #$20,GET_SRC_START_END
00002192                          1829  
00002192                          1830              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002192  0285 0000FE3F           1831              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002198  0685 00000040           1832              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
0000219E                          1833  
0000219E                          1834                     
0000219E  6100 1214               1835              BSR     GET_EA_EA_SRC      *GETS <ea>
000021A2  163C 002C               1836              MOVE.B  #',',D3
000021A6  6100 1AAA               1837              BSR     PUSH_STACK                  
000021AA  6100 1638               1838              BSR     GET_EA_EA_DEST       *GETS Dn    
000021AE                          1839  
000021AE                          1840              
000021AE  6000 0002               1841              BRA     OP1001_ADD_RETURN
000021B2                          1842              
000021B2                          1843  OP1001_ADD_RETURN
000021B2  4E75                    1844              RTS
000021B4                          1845  
000021B4                          1846    
000021B4                          1847  *---------------------------------------------------------------------------*
000021B4                          1848  * OP_SUB: display SUB and proceed to EA
000021B4                          1849  *---------------------------------------------------------------------------*            
000021B4  43F9 00004373           1850  OP_SUB_B    LEA     DISP_SUB_B,A1
000021BA  103C 000E               1851              MOVE.B  #14,D0
000021BE  4E4F                    1852              TRAP    #15
000021C0  183C 0000               1853              MOVE.B  #0,D4
000021C4  4EF9 00002F64           1854              JMP     EA_GEN
000021CA                          1855  
000021CA  4E75                    1856              RTS
000021CC                          1857  
000021CC  43F9 0000437C           1858  OP_SUB_W    LEA     DISP_SUB_W,A1
000021D2  103C 000E               1859              MOVE.B  #14,D0
000021D6  4E4F                    1860              TRAP    #15
000021D8  183C 0001               1861              MOVE.B  #1,D4
000021DC  4EF9 00002F64           1862              JMP     EA_GEN
000021E2                          1863  
000021E2  4E75                    1864              RTS
000021E4                          1865  
000021E4  43F9 00004385           1866  OP_SUB_L    LEA     DISP_SUB_L,A1
000021EA  103C 000E               1867              MOVE.B  #14,D0
000021EE  4E4F                    1868              TRAP    #15
000021F0  183C 0002               1869              MOVE.B  #2,D4
000021F4  4EF9 00002F64           1870              JMP     EA_GEN
000021FA                          1871  
000021FA  4E75                    1872              RTS
000021FC                          1873  
000021FC                          1874  *---------------------------------------------------------------------------*
000021FC                          1875  * OP_SUBA: display SUBA
000021FC                          1876  *---------------------------------------------------------------------------*  
000021FC  43F9 000043AC           1877  OP_SUBA_W   LEA     DISP_SUBA_W,A1
00002202  103C 000E               1878              MOVE.B  #14,D0
00002206  4E4F                    1879              TRAP    #15
00002208  183C 0001               1880              MOVE.B  #1,D4
0000220C  4E75                    1881              RTS
0000220E                          1882  
0000220E  43F9 000043B6           1883  OP_SUBA_L   LEA     DISP_SUBA_L,A1
00002214  103C 000E               1884              MOVE.B  #14,D0
00002218  4E4F                    1885              TRAP    #15
0000221A  183C 0002               1886              MOVE.B  #2,D4
0000221E  4E75                    1887              RTS         
00002220                          1888  *---------------------------------------------------------------------------*
00002220                          1889  * OP1010 : unassigned
00002220                          1890  *---------------------------------------------------------------------------*           
00002220  4EF8 14DA               1891  OP1010      JMP     OP_DATA
00002224                          1892              
00002224                          1893  *---------------------------------------------------------------------------*
00002224                          1894  * OP1011 : decode CMP/EOR/CMPA
00002224                          1895  *---------------------------------------------------------------------------*           
00002224  4280                    1896  OP1011      CLR.L   D0                
00002226  4281                    1897              CLR.L   D1            
00002228  4284                    1898              CLR.L   D4                   
0000222A  227C 00000000           1899              MOVEA.L #0, A1               
00002230  2205                    1900              MOVE.L  D5,D1
00002232  EA99                    1901              ROR.L   #5,D1
00002234  0281 0000000E           1902              ANDI.L  #$E,D1
0000223A  0C01 0000               1903              CMPI.B  #$0,D1
0000223E  6700 003E               1904              BEQ     OP1011_CMP
00002242  0C01 0002               1905              CMPI.B  #$2,D1
00002246  6700 0036               1906              BEQ     OP1011_CMP
0000224A  0C01 0004               1907              CMPI.B  #$4,D1
0000224E  6700 002E               1908              BEQ     OP1011_CMP
00002252  0C01 0008               1909              CMPI.B  #$8,D1
00002256  6700 0178               1910              BEQ     OP1011_EOR
0000225A  0C01 000A               1911              CMPI.B  #$A,D1
0000225E  6700 0170               1912              BEQ     OP1011_EOR
00002262  0C01 000C               1913              CMPI.B  #$C,D1
00002266  6700 0168               1914              BEQ     OP1011_EOR  
0000226A  0C01 0006               1915              CMPI.B  #$6,D1
0000226E  6700 00C0               1916              BEQ     OP1011_CMPA
00002272  0C01 000E               1917              CMPI.B  #$E,D1
00002276  6700 00B8               1918              BEQ     OP1011_CMPA 
0000227A                          1919  
0000227A  4EF8 14DA               1920              JMP     OP_DATA          
0000227E                          1921  
0000227E                          1922  
0000227E                          1923  
0000227E                          1924  
0000227E                          1925  OP1011_CMP
0000227E                          1926             
0000227E                          1927   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000227E  13FC 0082 00004578      1928             MOVE.B   #$82,DEST_REGISTER_FORMAT
00002286  13FC 0000 00004579      1929             MOVE.B   #$00,SRC_REGISTER_FORMAT
0000228E                          1930             
0000228E                          1931             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000228E  13FC 00B9 0000457B      1932             MOVE.B   #$B9,GET_DST_START_END
00002296  13FC 0020 0000457C      1933             MOVE.B   #$20,GET_SRC_START_END
0000229E                          1934             
0000229E                          1935              *CLEAR D3
0000229E  4283                    1936              CLR.L   D3
000022A0                          1937              *LOAD STACK WITH THIS OPMODE
000022A0  6100 19B0               1938              BSR     PUSH_STACK
000022A4  163C 0043               1939              MOVE.B  #'C',D3
000022A8  6100 19A8               1940              BSR     PUSH_STACK
000022AC  163C 004D               1941              MOVE.B  #'M',D3
000022B0  6100 19A0               1942              BSR     PUSH_STACK
000022B4  163C 0050               1943              MOVE.B  #'P',D3
000022B8  6100 1998               1944              BSR     PUSH_STACK
000022BC  163C 002E               1945              MOVE.B  #'.',D3
000022C0  6100 1990               1946              BSR     PUSH_STACK
000022C4                          1947              
000022C4                          1948              *FIGURE OUT SIZE*
000022C4                          1949              *00 = BYTE
000022C4                          1950              *01 = WORD
000022C4                          1951              *10 = LONG
000022C4                          1952              * BITS 7&6
000022C4                          1953              
000022C4                          1954              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
000022C4  2205                    1955              MOVE.L  D5,D1
000022C6  EC99                    1956              ROR.L   #6,D1
000022C8  0281 00000003           1957              ANDI.L  #$03,D1
000022CE  0C01 0000               1958              CMPI.B  #%00,D1
000022D2  6700 001E               1959              BEQ     OP1011_CMP_B
000022D6  0281 00000003           1960              ANDI.L  #$03,D1
000022DC  0C01 0001               1961              CMPI.B  #%01,D1
000022E0  6700 001C               1962              BEQ     OP1011_CMP_W
000022E4  0281 00000003           1963              ANDI.L  #$03,D1
000022EA  0C01 0002               1964              CMPI.B  #%10,D1
000022EE  6700 001A               1965              BEQ     OP1011_CMP_L
000022F2                          1966            
000022F2                          1967  OP1011_CMP_B
000022F2                          1968              
000022F2  163C 0042               1969              MOVE.B  #'B',D3
000022F6  6100 195A               1970              BSR     PUSH_STACK
000022FA  6000 0016               1971              BRA     OP1011_RETURN_CMP  
000022FE                          1972  OP1011_CMP_W
000022FE                          1973              
000022FE  163C 0057               1974              MOVE.B  #'W',D3
00002302  6100 194E               1975              BSR     PUSH_STACK
00002306  6000 000A               1976              BRA     OP1011_RETURN_CMP  
0000230A                          1977  OP1011_CMP_L
0000230A                          1978              
0000230A  163C 004C               1979              MOVE.B  #'L',D3
0000230E  6100 1942               1980              BSR     PUSH_STACK
00002312                          1981  OP1011_RETURN_CMP            
00002312                          1982  
00002312                          1983              
00002312                          1984  *GET DATA FROM ADDQ AND PRINT #0-8
00002312                          1985       
00002312                          1986              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002312  0285 0000FE3F           1987              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002318  0685 00000000           1988              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
0000231E                          1989  
0000231E  6100 1094               1990              BSR     GET_EA_EA_SRC
00002322  163C 002C               1991              MOVE.B  #',',D3
00002326  6100 192A               1992              BSR     PUSH_STACK
0000232A  6100 14B8               1993              BSR     GET_EA_EA_DEST
0000232E                          1994              
0000232E  4E75                    1995              RTS
00002330                          1996              
00002330                          1997  
00002330                          1998  
00002330                          1999  OP1011_CMPA
00002330                          2000              
00002330                          2001   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002330  13FC 0080 00004578      2002             MOVE.B   #$80,DEST_REGISTER_FORMAT
00002338  13FC 0000 00004579      2003             MOVE.B   #$00,SRC_REGISTER_FORMAT
00002340                          2004             
00002340                          2005             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002340  13FC 00B9 0000457B      2006             MOVE.B   #$B9,GET_DST_START_END
00002348  13FC 0020 0000457C      2007             MOVE.B   #$20,GET_SRC_START_END
00002350                          2008             
00002350                          2009              *CLEAR D3
00002350  4283                    2010              CLR.L   D3
00002352                          2011              *LOAD STACK WITH THIS OPMODE
00002352  6100 18FE               2012              BSR     PUSH_STACK
00002356  163C 0043               2013              MOVE.B  #'C',D3
0000235A  6100 18F6               2014              BSR     PUSH_STACK
0000235E  163C 004D               2015              MOVE.B  #'M',D3
00002362  6100 18EE               2016              BSR     PUSH_STACK
00002366  163C 0050               2017              MOVE.B  #'P',D3
0000236A  6100 18E6               2018              BSR     PUSH_STACK
0000236E  163C 0041               2019              MOVE.B  #'A',D3
00002372  6100 18DE               2020              BSR     PUSH_STACK
00002376  163C 002E               2021              MOVE.B  #'.',D3
0000237A  6100 18D6               2022              BSR     PUSH_STACK
0000237E                          2023              
0000237E                          2024              *FIGURE OUT SIZE*
0000237E                          2025              *00 = BYTE
0000237E                          2026              *01 = WORD
0000237E                          2027              *10 = LONG
0000237E                          2028              * BITS 7&6
0000237E                          2029              
0000237E                          2030              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
0000237E  2205                    2031              MOVE.L  D5,D1
00002380  EC99                    2032              ROR.L   #6,D1
00002382  0281 00000003           2033              ANDI.L  #$03,D1
00002388  0C01 0001               2034              CMPI.B  #%01,D1
0000238C  6700 0010               2035              BEQ     OP1011_CMPA_W
00002390  0281 00000003           2036              ANDI.L  #$03,D1
00002396  0C01 0002               2037              CMPI.B  #%10,D1
0000239A  6700 000E               2038              BEQ     OP1011_CMPA_L
0000239E                          2039  OP1011_CMPA_W
0000239E                          2040              
0000239E  163C 0057               2041              MOVE.B  #'W',D3
000023A2  6100 18AE               2042              BSR     PUSH_STACK
000023A6  6000 000A               2043              BRA     OP1011_RETURN_CMPA 
000023AA                          2044  OP1011_CMPA_L
000023AA                          2045              
000023AA  163C 004C               2046              MOVE.B  #'L',D3
000023AE  6100 18A2               2047              BSR     PUSH_STACK
000023B2                          2048  OP1011_RETURN_CMPA            
000023B2                          2049  
000023B2                          2050              
000023B2                          2051  *GET DATA FROM ADDQ AND PRINT #0-8
000023B2                          2052       
000023B2                          2053              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000023B2  0285 0000FE3F           2054              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000023B8  0685 00000040           2055              ADDI.L  #$0040,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
000023BE                          2056  
000023BE  6100 0FF4               2057              BSR     GET_EA_EA_SRC
000023C2  163C 002C               2058              MOVE.B  #',',D3
000023C6  6100 188A               2059              BSR     PUSH_STACK
000023CA  6100 1418               2060              BSR     GET_EA_EA_DEST
000023CE                          2061              
000023CE  4E75                    2062              RTS
000023D0                          2063  
000023D0                          2064  OP1011_EOR
000023D0                          2065  
000023D0                          2066   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000023D0  13FC 0082 00004578      2067             MOVE.B   #$82,DEST_REGISTER_FORMAT
000023D8  13FC 0080 00004579      2068             MOVE.B   #$80,SRC_REGISTER_FORMAT
000023E0                          2069             
000023E0                          2070             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000023E0  13FC 00B9 0000457B      2071             MOVE.B   #$B9,GET_DST_START_END
000023E8  13FC 0020 0000457C      2072             MOVE.B   #$20,GET_SRC_START_END
000023F0                          2073             
000023F0                          2074              *CLEAR D3
000023F0  4283                    2075              CLR.L   D3
000023F2                          2076              *LOAD STACK WITH THIS OPMODE
000023F2  6100 185E               2077              BSR     PUSH_STACK
000023F6  163C 0045               2078              MOVE.B  #'E',D3
000023FA  6100 1856               2079              BSR     PUSH_STACK
000023FE  163C 004F               2080              MOVE.B  #'O',D3
00002402  6100 184E               2081              BSR     PUSH_STACK
00002406  163C 0052               2082              MOVE.B  #'R',D3
0000240A  6100 1846               2083              BSR     PUSH_STACK
0000240E  163C 002E               2084              MOVE.B  #'.',D3
00002412  6100 183E               2085              BSR     PUSH_STACK
00002416                          2086              
00002416                          2087              *FIGURE OUT SIZE*
00002416                          2088              *00 = BYTE
00002416                          2089              *01 = WORD
00002416                          2090              *10 = LONG
00002416                          2091              * BITS 7&6
00002416                          2092              
00002416                          2093              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
00002416  2205                    2094              MOVE.L  D5,D1
00002418  EC99                    2095              ROR.L   #6,D1
0000241A  0281 00000003           2096              ANDI.L  #$03,D1
00002420  0C01 0000               2097              CMPI.B  #%00,D1
00002424  6700 001E               2098              BEQ     OP1011_EOR_B
00002428  0281 00000003           2099              ANDI.L  #$03,D1
0000242E  0C01 0001               2100              CMPI.B  #%01,D1
00002432  6700 001C               2101              BEQ     OP1011_EOR_W
00002436  0281 00000003           2102              ANDI.L  #$03,D1
0000243C  0C01 0002               2103              CMPI.B  #%10,D1
00002440  6700 001A               2104              BEQ     OP1011_EOR_L
00002444                          2105            
00002444                          2106  OP1011_EOR_B
00002444                          2107              
00002444  163C 0042               2108              MOVE.B  #'B',D3
00002448  6100 1808               2109              BSR     PUSH_STACK
0000244C  6000 0016               2110              BRA     OP1011_RETURN
00002450                          2111  OP1011_EOR_W
00002450                          2112              
00002450  163C 0057               2113              MOVE.B  #'W',D3
00002454  6100 17FC               2114              BSR     PUSH_STACK
00002458  6000 000A               2115              BRA     OP1011_RETURN
0000245C                          2116  OP1011_EOR_L
0000245C                          2117              
0000245C  163C 004C               2118              MOVE.B  #'L',D3
00002460  6100 17F0               2119              BSR     PUSH_STACK
00002464                          2120  OP1011_RETURN            
00002464                          2121  
00002464                          2122              
00002464                          2123  *GET DATA FROM ADDQ AND PRINT #0-8
00002464                          2124       
00002464                          2125              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002464  0285 0000FE3F           2126              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000246A  0685 00000000           2127              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002470                          2128  
00002470  6100 1372               2129              BSR     GET_EA_EA_DEST
00002474  163C 002C               2130              MOVE.B  #',',D3
00002478  6100 17D8               2131              BSR     PUSH_STACK
0000247C  6100 0F36               2132              BSR     GET_EA_EA_SRC
00002480                          2133              
00002480  4E75                    2134              RTS
00002482                          2135              
00002482                          2136              
00002482                          2137              
00002482                          2138              
00002482                          2139  
00002482                          2140  *---------------------------------------------------------------------------*
00002482                          2141  * OP_CMPA: display CMPA 
00002482                          2142  *---------------------------------------------------------------------------
00002482  43F9 000043F6           2143  OP_CMPA_W   LEA     DISP_CMPA_W,A1
00002488  103C 000E               2144              MOVE.B  #14,D0
0000248C  4E4F                    2145              TRAP    #15
0000248E  183C 0001               2146              MOVE.B  #1,D4
00002492  4E75                    2147              RTS
00002494                          2148  
00002494  43F9 00004400           2149  OP_CMPA_L   LEA     DISP_CMPA_L,A1
0000249A  103C 000E               2150              MOVE.B  #14,D0
0000249E  4E4F                    2151              TRAP    #15
000024A0  183C 0002               2152              MOVE.B  #2,D4
000024A4  4E75                    2153              RTS
000024A6                          2154  
000024A6                          2155  *---------------------------------------------------------------------------*
000024A6                          2156  * OP_CMP: display CMP and proceed to EA
000024A6                          2157  *---------------------------------------------------------------------------*  
000024A6  43F9 000043DB           2158  OP_CMP_B    LEA     DISP_CMP_B,A1
000024AC  103C 000E               2159              MOVE.B  #14,D0
000024B0  4E4F                    2160              TRAP    #15
000024B2  183C 0000               2161              MOVE.B  #0,D4
000024B6  4EF9 00002F64           2162              JMP     EA_GEN
000024BC                          2163  
000024BC  4E75                    2164              RTS
000024BE                          2165              
000024BE  43F9 000043E4           2166  OP_CMP_W    LEA     DISP_CMP_W,A1
000024C4  103C 000E               2167              MOVE.B  #14,D0
000024C8  4E4F                    2168              TRAP    #15
000024CA  183C 0001               2169              MOVE.B  #1,D4
000024CE  4EF9 00002F64           2170              JMP     EA_GEN
000024D4                          2171  
000024D4  4E75                    2172              RTS
000024D6                          2173              
000024D6  43F9 000043ED           2174  OP_CMP_L    LEA     DISP_CMP_L,A1
000024DC  103C 000E               2175              MOVE.B  #14,D0
000024E0  4E4F                    2176              TRAP    #15
000024E2  183C 0002               2177              MOVE.B  #2,D4
000024E6  4EF9 00002F64           2178              JMP     EA_GEN
000024EC                          2179  
000024EC  4E75                    2180              RTS
000024EE                          2181              
000024EE                          2182  *---------------------------------------------------------------------------*
000024EE                          2183  * OP_EOR: display EOR
000024EE                          2184  *---------------------------------------------------------------------------*  
000024EE  43F9 000043C0           2185  OP_EOR_B    LEA     DISP_EOR_B,A1
000024F4  103C 000E               2186              MOVE.B  #14,D0
000024F8  4E4F                    2187              TRAP    #15
000024FA  183C 0000               2188              MOVE.B  #0,D4
000024FE  4E75                    2189              RTS
00002500                          2190              
00002500  43F9 000043C9           2191  OP_EOR_W    LEA     DISP_EOR_W,A1
00002506  103C 000E               2192              MOVE.B  #14,D0
0000250A  4E4F                    2193              TRAP    #15
0000250C  183C 0001               2194              MOVE.B  #1,D4
00002510  4E75                    2195              RTS
00002512                          2196              
00002512  43F9 000043D2           2197  OP_EOR_L    LEA     DISP_EOR_L,A1
00002518  103C 000E               2198              MOVE.B  #14,D0
0000251C  4E4F                    2199              TRAP    #15
0000251E  183C 0002               2200              MOVE.B  #2,D4
00002522  4E75                    2201              RTS    
00002524                          2202  
00002524                          2203  *---------------------------------------------------------------------------*
00002524                          2204  * OP1100: Decode and display MULS/AND and proceed to EA
00002524                          2205  *---------------------------------------------------------------------------* 
00002524  4280                    2206  OP1100      CLR.L   D0                 
00002526  4281                    2207              CLR.L   D1    
00002528  4284                    2208              CLR.L   D4                
0000252A  227C 00000000           2209              MOVEA.L #0, A1        
00002530  2205                    2210              MOVE.L  D5,D1
00002532  EA89                    2211              LSR.L   #5,D1
00002534  0281 0000000E           2212              ANDI.L  #$E,D1
0000253A  0C41 000E               2213              CMPI.W  #$E,D1
0000253E  6700 0006               2214              BEQ     OP_MULS
00002542  6000 00F6               2215              BRA     OP1100_DETERMINE_DN_EA_OR_EA_DN 
00002546                          2216  
00002546                          2217  OP_MULS                      
00002546  4281                    2218              CLR.L   D1       
00002548  4284                    2219              CLR.L   D4                   
0000254A  227C 00000000           2220              MOVEA.L #0, A1              
00002550  2205                    2221              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
00002552                          2222              *CLEAR D3
00002552  4283                    2223              CLR.L   D3
00002554                          2224  
00002554                          2225  OP1100_MULS_DN_EA_OR_EA_DN 
00002554                          2226              *LOAD STACK WITH THIS OPMODE
00002554  6100 16FC               2227              BSR     PUSH_STACK
00002558  163C 004D               2228              MOVE.B  #'M',D3
0000255C  6100 16F4               2229              BSR     PUSH_STACK
00002560  163C 0055               2230              MOVE.B  #'U',D3
00002564  6100 16EC               2231              BSR     PUSH_STACK
00002568  163C 004C               2232              MOVE.B  #'L',D3
0000256C  6100 16E4               2233              BSR     PUSH_STACK
00002570  163C 0053               2234              MOVE.B  #'S',D3
00002574  6100 16DC               2235              BSR     PUSH_STACK
00002578  163C 002E               2236              MOVE.B  #'.',D3
0000257C  6100 16D4               2237              BSR     PUSH_STACK
00002580                          2238              
00002580  2205                    2239              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00002582                          2240              
00002582                          2241  OP1100_EA_DN_MULS           
00002582                          2242              *BITS (7 TO 6) 
00002582                          2243              *00 = .B
00002582                          2244              *01 = .W
00002582                          2245              *10 = .L 
00002582  2205                    2246              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00002584  EC99                    2247              ROR.L   #6,D1
00002586  0281 00000003           2248              ANDI.L  #$03,D1
0000258C  0C81 00000003           2249              CMPI.L  #%11,D1 *EQUALS .W
00002592  6700 0014               2250              BEQ     OP1100_PRINT_W_MULS
00002596  0C81 00000000           2251              CMPI.L  #%00,D1 *EQUALS .L
0000259C  6700 0052               2252              BEQ     OP1100_PRINT_L_MULS
000025A0                          2253              
000025A0  183C 0001               2254              MOVE.B  #1,D4               *ERROR READ
000025A4  6000 0092               2255              BRA     OP1100_MULS_RETURN
000025A8                          2256  OP1100_PRINT_W_MULS
000025A8  163C 0057               2257              MOVE.B  #'W',D3
000025AC  6100 16A4               2258              BSR     PUSH_STACK
000025B0                          2259  
000025B0                          2260              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000025B0  13FC 0000 00004578      2261              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000025B8  13FC 0000 00004579      2262              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000025C0                          2263             
000025C0                          2264              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000025C0  13FC 00B9 0000457B      2265              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000025C8  13FC 0020 0000457C      2266              MOVE.B   #$20,GET_SRC_START_END
000025D0                          2267  
000025D0                          2268             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000025D0  0285 0000FE3F           2269              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000025D6  0685 00000000           2270              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
000025DC                          2271  
000025DC                          2272              
000025DC  6100 0DD6               2273              BSR     GET_EA_EA_SRC      *GETS <ea>
000025E0  163C 002C               2274              MOVE.B  #',',D3
000025E4  6100 166C               2275              BSR     PUSH_STACK
000025E8  6100 11FA               2276              BSR     GET_EA_EA_DEST       *GETS Dn    
000025EC                          2277              
000025EC  6000 004A               2278              BRA     OP1100_MULS_RETURN
000025F0                          2279  OP1100_PRINT_L_MULS 
000025F0  163C 004C               2280              MOVE.B  #'L',D3
000025F4  6100 165C               2281              BSR     PUSH_STACK
000025F8                          2282              
000025F8                          2283              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000025F8  13FC 0000 00004578      2284              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002600  13FC 0000 00004579      2285              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002608                          2286             
00002608                          2287              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002608  13FC 00B9 0000457B      2288              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002610  13FC 0020 0000457C      2289              MOVE.B   #$20,GET_SRC_START_END
00002618                          2290  
00002618                          2291              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002618  0285 0000FE3F           2292              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000261E  0685 00000000           2293              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002624                          2294  
00002624                          2295                     
00002624  6100 0D8E               2296              BSR     GET_EA_EA_SRC      *GETS <ea>
00002628  163C 002C               2297              MOVE.B  #',',D3
0000262C  6100 1624               2298              BSR     PUSH_STACK                  
00002630  6100 11B2               2299              BSR     GET_EA_EA_DEST       *GETS Dn    
00002634                          2300  
00002634                          2301              
00002634  6000 0002               2302              BRA     OP1100_MULS_RETURN
00002638                          2303              
00002638                          2304  OP1100_MULS_RETURN
00002638  4E75                    2305              RTS
0000263A                          2306              
0000263A                          2307  
0000263A                          2308  
0000263A                          2309  
0000263A                          2310  
0000263A                          2311  
0000263A                          2312  
0000263A                          2313  
0000263A                          2314  
0000263A                          2315  
0000263A                          2316  
0000263A                          2317  
0000263A                          2318  
0000263A                          2319  OP1100_DETERMINE_DN_EA_OR_EA_DN 
0000263A                          2320              *LOAD STACK WITH THIS OPMODE
0000263A  4283                    2321              CLR.L   D3
0000263C  6100 1614               2322              BSR     PUSH_STACK
00002640  163C 0041               2323              MOVE.B  #'A',D3
00002644  6100 160C               2324              BSR     PUSH_STACK
00002648  163C 004E               2325              MOVE.B  #'N',D3
0000264C  6100 1604               2326              BSR     PUSH_STACK
00002650  163C 0044               2327              MOVE.B  #'D',D3
00002654  6100 15FC               2328              BSR     PUSH_STACK
00002658  163C 002E               2329              MOVE.B  #'.',D3
0000265C  6100 15F4               2330              BSR     PUSH_STACK
00002660                          2331              
00002660  2205                    2332              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00002662                          2333              
00002662                          2334              *BITS (INDEX 8) 
00002662                          2335              *0 = ADD.B/W/L <EA>,Dn
00002662                          2336              *1 = ADD.B/W/L Dn,<EA> 
00002662  E099                    2337              ROR.L   #8,D1
00002664  0281 00000001           2338              ANDI.L  #$01,D1     *MASKS WITH 00000001
0000266A  0C81 00000000           2339              CMPI.L  #$00,D1     *IF EQUALS <ea>,Dn
00002670  6700 0102               2340              BEQ     OP1100_EA_DN
00002674                          2341              *else procede to Dn_EA
00002674                          2342              
00002674                          2343  OP1100_DN_EA
00002674                          2344              *BITS (7 TO 6) 
00002674                          2345              *00 = .B
00002674                          2346              *01 = .W
00002674                          2347              *10 = .L 
00002674  2205                    2348              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00002676  EC99                    2349              ROR.L   #6,D1
00002678  0281 00000003           2350              ANDI.L  #$03,D1
0000267E  0C81 00000000           2351              CMPI.L  #$00,D1 *EQUALS .B
00002684  6700 0016               2352              BEQ     OP1100_PRINT_B2
00002688  0C81 00000001           2353              CMPI.L  #$01,D1 *EQUALS .W
0000268E  6700 0054               2354              BEQ     OP1100_PRINT_W2
00002692  0C81 00000002           2355              CMPI.L  #$02,D1 *EQUALS .L
00002698  6700 0092               2356              BEQ     OP1100_PRINT_L2
0000269C                          2357  OP1100_PRINT_B2
0000269C                          2358              *PUSH 'B'
0000269C  163C 0042               2359              MOVE.B  #'B',D3
000026A0  6100 15B0               2360              BSR     PUSH_STACK
000026A4                          2361             
000026A4                          2362              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000026A4  13FC 0000 00004578      2363             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000026AC  13FC 0083 00004579      2364             MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000026B4                          2365             
000026B4                          2366             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000026B4  13FC 00B9 0000457B      2367             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000026BC  13FC 0020 0000457C      2368             MOVE.B   #$20,GET_SRC_START_END
000026C4                          2369  
000026C4                          2370              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000026C4  0285 0000FE3F           2371              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000026CA  0685 00000000           2372              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
000026D0                          2373       
000026D0  6100 1112               2374              BSR     GET_EA_EA_DEST      *GETS Dn
000026D4  163C 002C               2375              MOVE.B  #',',D3
000026D8  6100 1578               2376              BSR     PUSH_STACK                     
000026DC  6100 0CD6               2377              BSR     GET_EA_EA_SRC       *GETS <ea>
000026E0                          2378  
000026E0                          2379              
000026E0  6000 0192               2380              BRA     OP1100_AND_RETURN
000026E4                          2381  OP1100_PRINT_W2
000026E4  163C 0057               2382              MOVE.B  #'W',D3
000026E8  6100 1568               2383              BSR     PUSH_STACK
000026EC                          2384  
000026EC                          2385              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000026EC  13FC 0000 00004578      2386              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000026F4  13FC 0083 00004579      2387              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000026FC                          2388             
000026FC                          2389              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000026FC  13FC 00B9 0000457B      2390              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002704  13FC 0020 0000457C      2391              MOVE.B   #$20,GET_SRC_START_END
0000270C                          2392  
0000270C                          2393              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000270C  0285 0000FE3F           2394              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002712  0685 00000000           2395              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A An Register (001) 
00002718                          2396  
00002718                          2397        
00002718  6100 10CA               2398              BSR     GET_EA_EA_DEST      *GETS Dn
0000271C  163C 002C               2399              MOVE.B  #',',D3
00002720  6100 1530               2400              BSR     PUSH_STACK               
00002724  6100 0C8E               2401              BSR     GET_EA_EA_SRC       *GETS <ea>       
00002728                          2402  
00002728                          2403  
00002728                          2404  
00002728  6000 049A               2405              BRA     OP1101_ADD_RETURN
0000272C                          2406  OP1100_PRINT_L2 
0000272C  163C 004C               2407              MOVE.B  #'L',D3
00002730  6100 1520               2408              BSR     PUSH_STACK
00002734                          2409              
00002734                          2410              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002734  13FC 0000 00004578      2411              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000273C  13FC 0083 00004579      2412              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002744                          2413             
00002744                          2414              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002744  13FC 00B9 0000457B      2415              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000274C  13FC 0020 0000457C      2416              MOVE.B   #$20,GET_SRC_START_END
00002754                          2417  
00002754                          2418             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002754  0285 0000FE3F           2419              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000275A  0685 00000000           2420              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002760                          2421  
00002760                          2422               
00002760  6100 1082               2423              BSR     GET_EA_EA_DEST       *GETS Dn
00002764  163C 002C               2424              MOVE.B  #',',D3
00002768  6100 14E8               2425              BSR     PUSH_STACK          
0000276C  6100 0C46               2426              BSR     GET_EA_EA_SRC        *GETS <ea>
00002770                          2427  
00002770  6000 0102               2428              BRA     OP1100_AND_RETURN
00002774                          2429              
00002774                          2430  OP1100_EA_DN           
00002774                          2431              *BITS (7 TO 6) 
00002774                          2432              *00 = .B
00002774                          2433              *01 = .W
00002774                          2434              *10 = .L 
00002774  2205                    2435              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00002776  EC99                    2436              ROR.L   #6,D1
00002778  0281 00000003           2437              ANDI.L  #$03,D1
0000277E  0C81 00000000           2438              CMPI.L  #$00,D1 *EQUALS .B
00002784  6700 0016               2439              BEQ     OP1100_PRINT_B
00002788  0C81 00000001           2440              CMPI.L  #$01,D1 *EQUALS .W
0000278E  6700 0054               2441              BEQ     OP1100_PRINT_W
00002792  0C81 00000002           2442              CMPI.L  #$02,D1 *EQUALS .L
00002798  6700 0092               2443              BEQ     OP1100_PRINT_L
0000279C                          2444  OP1100_PRINT_B
0000279C  163C 0042               2445              MOVE.B  #'B',D3
000027A0  6100 14B0               2446              BSR     PUSH_STACK
000027A4                          2447                
000027A4                          2448              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000027A4  13FC 0000 00004578      2449              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000027AC  13FC 0002 00004579      2450              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000027B4                          2451             
000027B4                          2452              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000027B4  13FC 00B9 0000457B      2453              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000027BC  13FC 0020 0000457C      2454              MOVE.B   #$20,GET_SRC_START_END
000027C4                          2455  
000027C4                          2456             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000027C4  0285 0000FE3F           2457              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000027CA  0685 00000000           2458              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "AN" Register (001) 
000027D0                          2459  
000027D0                          2460              
000027D0  6100 0BE2               2461              BSR     GET_EA_EA_SRC      *GETS <ea>
000027D4  163C 002C               2462              MOVE.B  #',',D3
000027D8  6100 1478               2463              BSR     PUSH_STACK          
000027DC  6100 1006               2464              BSR     GET_EA_EA_DEST       *GETS Dn
000027E0                          2465              
000027E0  6000 03E2               2466              BRA     OP1101_ADD_RETURN
000027E4                          2467  OP1100_PRINT_W
000027E4  163C 0057               2468              MOVE.B  #'W',D3
000027E8  6100 1468               2469              BSR     PUSH_STACK
000027EC                          2470  
000027EC                          2471              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000027EC  13FC 0000 00004578      2472              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000027F4  13FC 0002 00004579      2473              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000027FC                          2474             
000027FC                          2475              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000027FC  13FC 00B9 0000457B      2476              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002804  13FC 0020 0000457C      2477              MOVE.B   #$20,GET_SRC_START_END
0000280C                          2478  
0000280C                          2479             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000280C  0285 0000FE3F           2480              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002812  0685 00000000           2481              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002818                          2482  
00002818                          2483              
00002818  6100 0B9A               2484              BSR     GET_EA_EA_SRC      *GETS <ea>
0000281C  163C 002C               2485              MOVE.B  #',',D3
00002820  6100 1430               2486              BSR     PUSH_STACK
00002824  6100 0FBE               2487              BSR     GET_EA_EA_DEST       *GETS Dn    
00002828                          2488              
00002828  6000 F988               2489              BRA     OP1001_ADD_RETURN
0000282C                          2490  OP1100_PRINT_L 
0000282C  163C 004C               2491              MOVE.B  #'L',D3
00002830  6100 1420               2492              BSR     PUSH_STACK
00002834                          2493              
00002834                          2494              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002834  13FC 0000 00004578      2495              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000283C  13FC 0002 00004579      2496              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002844                          2497             
00002844                          2498              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002844  13FC 00B9 0000457B      2499              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000284C  13FC 0020 0000457C      2500              MOVE.B   #$20,GET_SRC_START_END
00002854                          2501  
00002854                          2502              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002854  0285 0000FE3F           2503              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000285A  0685 00000000           2504              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002860                          2505  
00002860                          2506                     
00002860  6100 0B52               2507              BSR     GET_EA_EA_SRC      *GETS <ea>
00002864  163C 002C               2508              MOVE.B  #',',D3
00002868  6100 13E8               2509              BSR     PUSH_STACK                  
0000286C  6100 0F76               2510              BSR     GET_EA_EA_DEST       *GETS Dn    
00002870                          2511  
00002870                          2512              
00002870  6000 0002               2513              BRA     OP1100_AND_RETURN
00002874                          2514              
00002874                          2515  OP1100_AND_RETURN
00002874  4E75                    2516              RTS
00002876                          2517  
00002876                          2518  
00002876                          2519  *---------------------------------------------------------------------------*
00002876                          2520  * OP1101: Decode ADD/ADDA
00002876                          2521  *---------------------------------------------------------------------------* 
00002876  4280                    2522  OP1101      CLR.L   D0                  
00002878  4281                    2523              CLR.L   D1       
0000287A  4284                    2524              CLR.L   D4                   
0000287C  227C 00000000           2525              MOVEA.L #0, A1              
00002882  2205                    2526              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
00002884                          2527              
00002884                          2528              *CLEAR D3
00002884  4283                    2529              CLR.L   D3
00002886                          2530              
00002886                          2531              
00002886                          2532              
00002886                          2533              **INTEGRATING ADDA.W/.L INTO THIS CODE**
00002886  2205                    2534              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00002888                          2535              *BITS (INDEX 8) 
00002888                          2536              *0 = ADD.B/W/L <EA>,Dn
00002888                          2537              *1 = ADD.B/W/L Dn,<EA> 
00002888  EC99                    2538              ROR.L   #6,D1
0000288A  0281 00000007           2539              ANDI.L  #$07,D1                 *MASKS WITH 00000111
00002890  0C81 00000007           2540              CMPI.L  #$07,D1                 *IF EQUALS <ea>,Dn
00002896  6700 0010               2541              BEQ     OP1101_ADDA_L            *BRANCHES TO ADDA.L
0000289A  0C81 00000003           2542              CMPI.L  #$03,D1                 *IF EQUALS <ea>,Dn
000028A0  6700 0078               2543              BEQ     OP1101_ADDA_W           *BRANCHES TO ADDA.W
000028A4  6000 00E6               2544              BRA     OP1101_DETERMINE_DN_EA_OR_EA_DN         *ELSE CHECK ADD.B/.W/.L
000028A8                          2545              
000028A8                          2546  OP1101_ADDA_L
000028A8                          2547              *LOAD STACK WITH THIS OPMODE
000028A8  6100 13A8               2548              BSR     PUSH_STACK
000028AC  163C 0041               2549              MOVE.B  #'A',D3
000028B0  6100 13A0               2550              BSR     PUSH_STACK
000028B4  163C 0044               2551              MOVE.B  #'D',D3
000028B8  6100 1398               2552              BSR     PUSH_STACK
000028BC  163C 0044               2553              MOVE.B  #'D',D3
000028C0  6100 1390               2554              BSR     PUSH_STACK
000028C4  163C 0041               2555              MOVE.B  #'A',D3
000028C8  6100 1388               2556              BSR     PUSH_STACK
000028CC  163C 002E               2557              MOVE.B  #'.',D3
000028D0  6100 1380               2558              BSR     PUSH_STACK
000028D4  163C 004C               2559              MOVE.B  #'L',D3
000028D8  6100 1378               2560              BSR     PUSH_STACK
000028DC                          2561              
000028DC                          2562             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000028DC  13FC 0000 00004578      2563             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000028E4  13FC 0000 00004579      2564             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000028EC                          2565             
000028EC                          2566             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000028EC  13FC 00B9 0000457B      2567             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000028F4  13FC 0020 0000457C      2568             MOVE.B   #$20,GET_SRC_START_END
000028FC                          2569  
000028FC                          2570              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000028FC  0285 0000FE3F           2571              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002902  0685 00000040           2572              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002908                          2573       
00002908                          2574              *PRINT <EA>,AN
00002908  6100 0AAA               2575              BSR     GET_EA_EA_SRC       *GETS <ea>
0000290C  163C 002C               2576              MOVE.B  #',',D3
00002910  6100 1340               2577              BSR     PUSH_STACK                     
00002914  6100 0ECE               2578              BSR     GET_EA_EA_DEST      *GETS Dn
00002918                          2579  
00002918                          2580              
00002918                          2581              
00002918  4E75                    2582              RTS
0000291A                          2583  OP1101_ADDA_W
0000291A                          2584              *LOAD STACK WITH THIS OPMODE
0000291A  6100 1336               2585              BSR     PUSH_STACK
0000291E  163C 0041               2586              MOVE.B  #'A',D3
00002922  6100 132E               2587              BSR     PUSH_STACK
00002926  163C 0044               2588              MOVE.B  #'D',D3
0000292A  6100 1326               2589              BSR     PUSH_STACK
0000292E  163C 0044               2590              MOVE.B  #'D',D3
00002932  6100 131E               2591              BSR     PUSH_STACK
00002936  163C 0041               2592              MOVE.B  #'A',D3
0000293A  6100 1316               2593              BSR     PUSH_STACK
0000293E  163C 002E               2594              MOVE.B  #'.',D3
00002942  6100 130E               2595              BSR     PUSH_STACK
00002946  163C 0057               2596              MOVE.B  #'W',D3
0000294A  6100 1306               2597              BSR     PUSH_STACK
0000294E                          2598              
0000294E                          2599             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000294E  13FC 0000 00004578      2600             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002956  13FC 0000 00004579      2601             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000295E                          2602             
0000295E                          2603             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000295E  13FC 00B9 0000457B      2604             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002966  13FC 0020 0000457C      2605             MOVE.B   #$20,GET_SRC_START_END
0000296E                          2606  
0000296E                          2607              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000296E  0285 0000FE3F           2608              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002974  0685 00000040           2609              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
0000297A                          2610       
0000297A                          2611              *PRINT <EA>,AN
0000297A  6100 0A38               2612              BSR     GET_EA_EA_SRC       *GETS <ea>
0000297E  163C 002C               2613              MOVE.B  #',',D3
00002982  6100 12CE               2614              BSR     PUSH_STACK                     
00002986  6100 0E5C               2615              BSR     GET_EA_EA_DEST      *GETS Dn
0000298A                          2616  
0000298A  4E75                    2617              RTS
0000298C                          2618  
0000298C                          2619  OP1101_DETERMINE_DN_EA_OR_EA_DN 
0000298C                          2620              *LOAD STACK WITH THIS OPMODE
0000298C  6100 12C4               2621              BSR     PUSH_STACK
00002990  163C 0041               2622              MOVE.B  #'A',D3
00002994  6100 12BC               2623              BSR     PUSH_STACK
00002998  163C 0044               2624              MOVE.B  #'D',D3
0000299C  6100 12B4               2625              BSR     PUSH_STACK
000029A0  163C 0044               2626              MOVE.B  #'D',D3
000029A4  6100 12AC               2627              BSR     PUSH_STACK
000029A8  163C 002E               2628              MOVE.B  #'.',D3
000029AC  6100 12A4               2629              BSR     PUSH_STACK
000029B0                          2630              
000029B0  2205                    2631              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
000029B2                          2632              
000029B2                          2633              *BITS (INDEX 8) 
000029B2                          2634              *0 = ADD.B/W/L <EA>,Dn
000029B2                          2635              *1 = ADD.B/W/L Dn,<EA> 
000029B2  E099                    2636              ROR.L   #8,D1
000029B4  0281 00000001           2637              ANDI.L  #$01,D1     *MASKS WITH 00000001
000029BA  0C81 00000000           2638              CMPI.L  #$00,D1     *IF EQUALS <ea>,Dn
000029C0  6700 0102               2639              BEQ     OP1101_EA_DN
000029C4                          2640              *else procede to Dn_EA
000029C4                          2641              
000029C4                          2642  OP1101_DN_EA
000029C4                          2643              *BITS (7 TO 6) 
000029C4                          2644              *00 = .B
000029C4                          2645              *01 = .W
000029C4                          2646              *10 = .L 
000029C4  2205                    2647              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
000029C6  EC99                    2648              ROR.L   #6,D1
000029C8  0281 00000003           2649              ANDI.L  #$03,D1
000029CE  0C81 00000000           2650              CMPI.L  #$00,D1 *EQUALS .B
000029D4  6700 0016               2651              BEQ     OP1101_PRINT_B2
000029D8  0C81 00000001           2652              CMPI.L  #$01,D1 *EQUALS .W
000029DE  6700 0054               2653              BEQ     OP1101_PRINT_W2
000029E2  0C81 00000002           2654              CMPI.L  #$02,D1 *EQUALS .L
000029E8  6700 0092               2655              BEQ     OP1101_PRINT_L2
000029EC                          2656  OP1101_PRINT_B2
000029EC                          2657              *PUSH 'B'
000029EC  163C 0042               2658              MOVE.B  #'B',D3
000029F0  6100 1260               2659              BSR     PUSH_STACK
000029F4                          2660             
000029F4                          2661              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000029F4  13FC 0002 00004578      2662             MOVE.B   #$02,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000029FC  13FC 0083 00004579      2663             MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002A04                          2664             
00002A04                          2665             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002A04  13FC 00B9 0000457B      2666             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002A0C  13FC 0020 0000457C      2667             MOVE.B   #$20,GET_SRC_START_END
00002A14                          2668  
00002A14                          2669              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002A14  0285 0000FE3F           2670              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002A1A  0685 00000000           2671              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002A20                          2672       
00002A20  6100 0DC2               2673              BSR     GET_EA_EA_DEST      *GETS Dn
00002A24  163C 002C               2674              MOVE.B  #',',D3
00002A28  6100 1228               2675              BSR     PUSH_STACK                     
00002A2C  6100 0986               2676              BSR     GET_EA_EA_SRC       *GETS <ea>
00002A30                          2677  
00002A30                          2678              
00002A30  6000 0192               2679              BRA     OP1101_ADD_RETURN
00002A34                          2680  OP1101_PRINT_W2
00002A34  163C 0057               2681              MOVE.B  #'W',D3
00002A38  6100 1218               2682              BSR     PUSH_STACK
00002A3C                          2683  
00002A3C                          2684              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002A3C  13FC 0000 00004578      2685              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002A44  13FC 0083 00004579      2686              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002A4C                          2687             
00002A4C                          2688              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002A4C  13FC 00B9 0000457B      2689              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002A54  13FC 0020 0000457C      2690              MOVE.B   #$20,GET_SRC_START_END
00002A5C                          2691  
00002A5C                          2692              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002A5C  0285 0000FE3F           2693              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002A62  0685 00000000           2694              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002A68                          2695  
00002A68                          2696        
00002A68  6100 0D7A               2697              BSR     GET_EA_EA_DEST      *GETS Dn
00002A6C  163C 002C               2698              MOVE.B  #',',D3
00002A70  6100 11E0               2699              BSR     PUSH_STACK               
00002A74  6100 093E               2700              BSR     GET_EA_EA_SRC       *GETS <ea>       
00002A78                          2701  
00002A78                          2702  
00002A78                          2703  
00002A78  6000 014A               2704              BRA     OP1101_ADD_RETURN
00002A7C                          2705  OP1101_PRINT_L2 
00002A7C  163C 004C               2706              MOVE.B  #'L',D3
00002A80  6100 11D0               2707              BSR     PUSH_STACK
00002A84                          2708              
00002A84                          2709              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002A84  13FC 0000 00004578      2710              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002A8C  13FC 0083 00004579      2711              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002A94                          2712             
00002A94                          2713              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002A94  13FC 00B9 0000457B      2714              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002A9C  13FC 0020 0000457C      2715              MOVE.B   #$20,GET_SRC_START_END
00002AA4                          2716  
00002AA4                          2717             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002AA4  0285 0000FE3F           2718              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002AAA  0685 00000000           2719              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002AB0                          2720  
00002AB0                          2721               
00002AB0  6100 0D32               2722              BSR     GET_EA_EA_DEST       *GETS Dn
00002AB4  163C 002C               2723              MOVE.B  #',',D3
00002AB8  6100 1198               2724              BSR     PUSH_STACK          
00002ABC  6100 08F6               2725              BSR     GET_EA_EA_SRC        *GETS <ea>
00002AC0                          2726  
00002AC0  6000 0102               2727              BRA     OP1101_ADD_RETURN
00002AC4                          2728              
00002AC4                          2729  OP1101_EA_DN           
00002AC4                          2730              *BITS (7 TO 6) 
00002AC4                          2731              *00 = .B
00002AC4                          2732              *01 = .W
00002AC4                          2733              *10 = .L 
00002AC4  2205                    2734              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00002AC6  EC99                    2735              ROR.L   #6,D1
00002AC8  0281 00000003           2736              ANDI.L  #$03,D1
00002ACE  0C81 00000000           2737              CMPI.L  #$00,D1 *EQUALS .B
00002AD4  6700 0016               2738              BEQ     OP1101_PRINT_B
00002AD8  0C81 00000001           2739              CMPI.L  #$01,D1 *EQUALS .W
00002ADE  6700 0054               2740              BEQ     OP1101_PRINT_W
00002AE2  0C81 00000002           2741              CMPI.L  #$02,D1 *EQUALS .L
00002AE8  6700 0092               2742              BEQ     OP1101_PRINT_L
00002AEC                          2743  OP1101_PRINT_B
00002AEC  163C 0042               2744              MOVE.B  #'B',D3
00002AF0  6100 1160               2745              BSR     PUSH_STACK
00002AF4                          2746                
00002AF4                          2747              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002AF4  13FC 0002 00004578      2748              MOVE.B   #$02,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002AFC  13FC 0002 00004579      2749              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002B04                          2750             
00002B04                          2751              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002B04  13FC 00B9 0000457B      2752              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002B0C  13FC 0020 0000457C      2753              MOVE.B   #$20,GET_SRC_START_END
00002B14                          2754  
00002B14                          2755             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002B14  0285 0000FE3F           2756              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002B1A  0685 00000000           2757              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002B20                          2758  
00002B20                          2759              
00002B20  6100 0892               2760              BSR     GET_EA_EA_SRC      *GETS <ea>
00002B24  163C 002C               2761              MOVE.B  #',',D3
00002B28  6100 1128               2762              BSR     PUSH_STACK          
00002B2C  6100 0CB6               2763              BSR     GET_EA_EA_DEST       *GETS Dn
00002B30                          2764              
00002B30  6000 0092               2765              BRA     OP1101_ADD_RETURN
00002B34                          2766  OP1101_PRINT_W
00002B34  163C 0057               2767              MOVE.B  #'W',D3
00002B38  6100 1118               2768              BSR     PUSH_STACK
00002B3C                          2769  
00002B3C                          2770              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002B3C  13FC 0000 00004578      2771              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002B44  13FC 0000 00004579      2772              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002B4C                          2773             
00002B4C                          2774              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002B4C  13FC 00B9 0000457B      2775              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002B54  13FC 0020 0000457C      2776              MOVE.B   #$20,GET_SRC_START_END
00002B5C                          2777  
00002B5C                          2778             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002B5C  0285 0000FE3F           2779              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002B62  0685 00000000           2780              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002B68                          2781  
00002B68                          2782              
00002B68  6100 084A               2783              BSR     GET_EA_EA_SRC      *GETS <ea>
00002B6C  163C 002C               2784              MOVE.B  #',',D3
00002B70  6100 10E0               2785              BSR     PUSH_STACK
00002B74  6100 0C6E               2786              BSR     GET_EA_EA_DEST       *GETS Dn    
00002B78                          2787              
00002B78  6000 004A               2788              BRA     OP1101_ADD_RETURN
00002B7C                          2789  OP1101_PRINT_L 
00002B7C  163C 004C               2790              MOVE.B  #'L',D3
00002B80  6100 10D0               2791              BSR     PUSH_STACK
00002B84                          2792              
00002B84                          2793              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002B84  13FC 0000 00004578      2794              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002B8C  13FC 0000 00004579      2795              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002B94                          2796             
00002B94                          2797              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002B94  13FC 00B9 0000457B      2798              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002B9C  13FC 0020 0000457C      2799              MOVE.B   #$20,GET_SRC_START_END
00002BA4                          2800  
00002BA4                          2801              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002BA4  0285 0000FE3F           2802              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002BAA  0685 00000000           2803              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002BB0                          2804  
00002BB0                          2805                     
00002BB0  6100 0802               2806              BSR     GET_EA_EA_SRC      *GETS <ea>
00002BB4  163C 002C               2807              MOVE.B  #',',D3
00002BB8  6100 1098               2808              BSR     PUSH_STACK                  
00002BBC  6100 0C26               2809              BSR     GET_EA_EA_DEST       *GETS Dn    
00002BC0                          2810  
00002BC0                          2811              
00002BC0  6000 0002               2812              BRA     OP1101_ADD_RETURN
00002BC4                          2813              
00002BC4                          2814  OP1101_ADD_RETURN
00002BC4  4E75                    2815              RTS
00002BC6                          2816              
00002BC6                          2817              *ADDW
00002BC6  0C01 0006               2818              CMPI.B  #$6,D1
00002BCA  6700 0056               2819              BEQ     OP_ADDA_W
00002BCE  0C01 000E               2820              CMPI.B  #$E,D1
00002BD2  6700 0066               2821              BEQ     OP_ADDA_L 
00002BD6                          2822  
00002BD6  4EF8 14DA               2823              JMP     OP_DATA  
00002BDA                          2824            
00002BDA                          2825  *---------------------------------------------------------------------------*
00002BDA                          2826  * OP_ADD: display ADD and proceed to EA
00002BDA                          2827  *---------------------------------------------------------------------------*  
00002BDA  43F9 0000442F           2828  OP_ADD_B    LEA     DISP_ADD_B,A1
00002BE0  103C 000E               2829              MOVE.B  #14,D0
00002BE4  4E4F                    2830              TRAP    #15
00002BE6  183C 0000               2831              MOVE.B  #0,D4
00002BEA  4EF9 00002F64           2832              JMP     EA_GEN
00002BF0                          2833  
00002BF0  4E75                    2834              RTS
00002BF2                          2835  
00002BF2  43F9 00004438           2836  OP_ADD_W    LEA     DISP_ADD_W,A1
00002BF8  103C 000E               2837              MOVE.B  #14,D0
00002BFC  4E4F                    2838              TRAP    #15
00002BFE  183C 0001               2839              MOVE.B  #1,D4
00002C02  4EF9 00002F64           2840              JMP     EA_GEN
00002C08                          2841  
00002C08  4E75                    2842              RTS
00002C0A                          2843  
00002C0A  43F9 00004441           2844  OP_ADD_L    LEA     DISP_ADD_L,A1
00002C10  103C 000E               2845              MOVE.B  #14,D0
00002C14  4E4F                    2846              TRAP    #15
00002C16  183C 0002               2847              MOVE.B  #2,D4
00002C1A  4EF9 00002F64           2848              JMP     EA_GEN
00002C20                          2849  
00002C20  4E75                    2850              RTS
00002C22                          2851  
00002C22                          2852  *---------------------------------------------------------------------------*
00002C22                          2853  * OP_ADDA: display ADDA and proceed to EA
00002C22                          2854  *---------------------------------------------------------------------------*  
00002C22  43F9 0000444A           2855  OP_ADDA_W   LEA     DISP_ADDA_W,A1
00002C28  103C 000E               2856              MOVE.B  #14,D0
00002C2C  4E4F                    2857              TRAP    #15
00002C2E  183C 0001               2858              MOVE.B  #1,D4
00002C32  4EF9 00002F64           2859              JMP     EA_GEN
00002C38                          2860  
00002C38  4E75                    2861              RTS
00002C3A                          2862  
00002C3A  43F9 00004454           2863  OP_ADDA_L   LEA     DISP_ADDA_L,A1
00002C40  103C 000E               2864              MOVE.B  #14,D0
00002C44  4E4F                    2865              TRAP    #15
00002C46  183C 0002               2866              MOVE.B  #2,D4
00002C4A  4EF9 00002F64           2867              JMP     EA_GEN
00002C50                          2868  
00002C50  4E75                    2869              RTS
00002C52                          2870              
00002C52                          2871  *---------------------------------------------------------------------------*
00002C52                          2872  * OP1110: LSR/LSL/ASR/ASL/ROL/ROR
00002C52                          2873  *---------------------------------------------------------------------------* 
00002C52  4280                    2874  OP1110      CLR.L   D0                  
00002C54  4281                    2875              CLR.L   D1   
00002C56  4284                    2876              CLR.L   D4                   
00002C58  227C 00000000           2877              MOVEA.L #0, A1                 
00002C5E  2205                    2878              MOVE.L  D5,D1
00002C60                          2879              
00002C60                          2880              * check for LSX
00002C60  E699                    2881              ROR.L   #3,D1
00002C62  0281 00000001           2882              ANDI.L  #$1,D1
00002C68  0C01 0001               2883              CMPI.B  #1,D1
00002C6C  6700 002E               2884              BEQ     OP_LSX
00002C70                          2885              
00002C70                          2886              * reset D1 and check for ASX
00002C70  4281                    2887              CLR.L   D1
00002C72  2205                    2888              MOVE.L  D5,D1
00002C74  E699                    2889              ROR.L   #3,D1
00002C76  0281 00000001           2890              ANDI.L  #$1,D1
00002C7C  0C01 0000               2891              CMPI.B  #0,D1
00002C80  6700 0032               2892              BEQ     OP_ASX
00002C84                          2893  
00002C84                          2894              * reset D1 and check for ROX
00002C84  4281                    2895              CLR.L   D1
00002C86  2205                    2896              MOVE.L  D5,D1
00002C88  E699                    2897              ROR.L   #3,D1
00002C8A  0281 00000001           2898              ANDI.L  #$1,D1
00002C90  0C01 0003               2899              CMPI.B  #3,D1
00002C94  6700 0036               2900              BEQ     OP_ROX
00002C98                          2901              
00002C98  4EF8 14DA               2902              JMP     OP_DATA
00002C9C                          2903  
00002C9C                          2904  *---------------------------------------------------------------------------*
00002C9C                          2905  * OP_LSX: process LSR/LSL
00002C9C                          2906  *---------------------------------------------------------------------------*            
00002C9C  EA99                    2907  OP_LSX      ROR.L   #5,D1
00002C9E  0281 00000001           2908              ANDI.L  #$1,D1
00002CA4  0C01 0000               2909              CMPI.B  #0,D1
00002CA8  6700 003A               2910              BEQ     OP_LSR
00002CAC  0C01 0001               2911              CMPI.B  #1,D1
00002CB0  6700 008C               2912              BEQ     OP_LSL
00002CB4                          2913              
00002CB4                          2914  *---------------------------------------------------------------------------*
00002CB4                          2915  * OP_ASX: process ASR/ASL
00002CB4                          2916  *---------------------------------------------------------------------------*  
00002CB4  EA99                    2917  OP_ASX      ROR.L   #5,D1
00002CB6  0281 00000001           2918              ANDI.L  #$1,D1
00002CBC  0C01 0000               2919              CMPI.B  #0,D1
00002CC0  6700 00D6               2920              BEQ     OP_ASR
00002CC4  0C01 0001               2921              CMPI.B  #1,D1
00002CC8  6700 0128               2922              BEQ     OP_ASL
00002CCC                          2923              
00002CCC                          2924  *---------------------------------------------------------------------------*
00002CCC                          2925  * OP_ROX: process ROR/ROL
00002CCC                          2926  *---------------------------------------------------------------------------*  
00002CCC  EA99                    2927  OP_ROX      ROR.L   #5,D1
00002CCE  0281 00000001           2928              ANDI.L  #$1,D1
00002CD4  0C01 0000               2929              CMPI.B  #0,D1
00002CD8  6700 0172               2930              BEQ     OP_ROR
00002CDC  0C01 0001               2931              CMPI.B  #1,D1
00002CE0  6700 01C4               2932              BEQ     OP_ROL
00002CE4                          2933  
00002CE4                          2934  *---------------------------------------------------------------------------*
00002CE4                          2935  * OP_LSR: decode and display LSR
00002CE4                          2936  *---------------------------------------------------------------------------*        
00002CE4  E599                    2937  OP_LSR      ROL.L   #2,D1
00002CE6  0281 00000003           2938              ANDI.L  #$3,D1
00002CEC  0C01 0000               2939              CMPI.B  #0,D1
00002CF0  6700 0016               2940              BEQ     OP_LSR_B
00002CF4  0C01 0001               2941              CMPI.B  #$1,D1
00002CF8  6700 0032               2942              BEQ     OP_LSR_W
00002CFC  0C01 0002               2943              CMPI.B  #$2,D1
00002D00  6700 0018               2944              BEQ     OP_LSR_L
00002D04                          2945              
00002D04  4EF8 14DA               2946              JMP     OP_DATA
00002D08                          2947  
00002D08  43F9 0000445E           2948  OP_LSR_B    LEA     DISP_LSR_B,A1
00002D0E  103C 000E               2949              MOVE.B  #14,D0
00002D12  4E4F                    2950              TRAP    #15
00002D14  183C 0000               2951              MOVE.B  #0,D4
00002D18  4E75                    2952              RTS
00002D1A                          2953  
00002D1A  43F9 00004482           2954  OP_LSR_L    LEA     DISP_LSR_L,A1
00002D20  103C 000E               2955              MOVE.B  #14,D0
00002D24  4E4F                    2956              TRAP    #15
00002D26  183C 0002               2957              MOVE.B  #2,D4
00002D2A  4E75                    2958              RTS
00002D2C                          2959  
00002D2C  43F9 00004470           2960  OP_LSR_W    LEA     DISP_LSR_W,A1
00002D32  103C 000E               2961              MOVE.B  #14,D0
00002D36  4E4F                    2962              TRAP    #15
00002D38  183C 0001               2963              MOVE.B  #1,D4
00002D3C  4E75                    2964              RTS
00002D3E                          2965   
00002D3E                          2966  *---------------------------------------------------------------------------*
00002D3E                          2967  * OP_LSL: decode and display LSL
00002D3E                          2968  *---------------------------------------------------------------------------*             
00002D3E  E599                    2969  OP_LSL      ROL.L   #2,D1
00002D40  0281 00000003           2970              ANDI.L  #$3,D1
00002D46  0C01 0000               2971              CMPI.B  #0,D1
00002D4A  6700 0016               2972              BEQ     OP_LSL_B
00002D4E  0C01 0001               2973              CMPI.B  #$1,D1
00002D52  6700 0032               2974              BEQ     OP_LSL_W
00002D56  0C01 0002               2975              CMPI.B  #$2,D1
00002D5A  6700 0018               2976              BEQ     OP_LSL_L
00002D5E                          2977              
00002D5E  4EF8 14DA               2978              JMP OP_DATA
00002D62                          2979  
00002D62  43F9 00004467           2980  OP_LSL_B    LEA     DISP_LSL_B,A1
00002D68  103C 000E               2981              MOVE.B  #14,D0
00002D6C  4E4F                    2982              TRAP    #15
00002D6E  183C 0000               2983              MOVE.B  #0,D4
00002D72  4E75                    2984              RTS
00002D74                          2985  
00002D74  43F9 0000448B           2986  OP_LSL_L    LEA     DISP_LSL_L,A1
00002D7A  103C 000E               2987              MOVE.B  #14,D0
00002D7E  4E4F                    2988              TRAP    #15
00002D80  183C 0002               2989              MOVE.B  #2,D4
00002D84  4E75                    2990              RTS
00002D86                          2991  
00002D86  43F9 00004479           2992  OP_LSL_W    LEA     DISP_LSL_W,A1
00002D8C  103C 000E               2993              MOVE.B  #14,D0
00002D90  4E4F                    2994              TRAP    #15
00002D92  183C 0001               2995              MOVE.B  #1,D4
00002D96  4E75                    2996              RTS
00002D98                          2997   
00002D98                          2998  *---------------------------------------------------------------------------*
00002D98                          2999  * OP_ASR: decode and display ASR
00002D98                          3000  *---------------------------------------------------------------------------*             
00002D98  E599                    3001  OP_ASR      ROL.L   #2,D1
00002D9A  0281 00000003           3002              ANDI.L  #$3,D1
00002DA0  0C01 0000               3003              CMPI.B  #0,D1
00002DA4  6700 0016               3004              BEQ     OP_ASR_B
00002DA8  0C01 0001               3005              CMPI.B  #$1,D1
00002DAC  6700 0032               3006              BEQ     OP_ASR_W
00002DB0  0C01 0002               3007              CMPI.B  #$2,D1
00002DB4  6700 0018               3008              BEQ     OP_ASR_L
00002DB8                          3009              
00002DB8  4EF8 14DA               3010              JMP OP_DATA
00002DBC                          3011  
00002DBC  43F9 00004494           3012  OP_ASR_B    LEA     DISP_ASR_B,A1
00002DC2  103C 000E               3013              MOVE.B  #14,D0
00002DC6  4E4F                    3014              TRAP    #15
00002DC8  183C 0000               3015              MOVE.B  #0,D4
00002DCC  4E75                    3016              RTS
00002DCE                          3017  
00002DCE  43F9 000044B8           3018  OP_ASR_L    LEA     DISP_ASR_L,A1
00002DD4  103C 000E               3019              MOVE.B  #14,D0
00002DD8  4E4F                    3020              TRAP    #15
00002DDA  183C 0002               3021              MOVE.B  #2,D4
00002DDE  4E75                    3022              RTS
00002DE0                          3023  
00002DE0  43F9 000044A6           3024  OP_ASR_W    LEA     DISP_ASR_W,A1
00002DE6  103C 000E               3025              MOVE.B  #14,D0
00002DEA  4E4F                    3026              TRAP    #15
00002DEC  183C 0001               3027              MOVE.B  #1,D4
00002DF0  4E75                    3028              RTS
00002DF2                          3029       
00002DF2                          3030  *---------------------------------------------------------------------------*
00002DF2                          3031  * OP_ASL: decode and display ASL
00002DF2                          3032  *---------------------------------------------------------------------------*         
00002DF2  E599                    3033  OP_ASL      ROL.L   #2,D1
00002DF4  0281 00000003           3034              ANDI.L  #$3,D1
00002DFA  0C01 0000               3035              CMPI.B  #0,D1
00002DFE  6700 0016               3036              BEQ     OP_ASL_B
00002E02  0C01 0001               3037              CMPI.B  #$1,D1
00002E06  6700 0032               3038              BEQ     OP_ASL_W
00002E0A  0C01 0002               3039              CMPI.B  #$2,D1
00002E0E  6700 0018               3040              BEQ     OP_ASL_L
00002E12                          3041              
00002E12  4EF8 14DA               3042              JMP OP_DATA
00002E16                          3043  
00002E16  43F9 0000449D           3044  OP_ASL_B    LEA     DISP_ASL_B,A1
00002E1C  103C 000E               3045              MOVE.B  #14,D0
00002E20  4E4F                    3046              TRAP    #15
00002E22  183C 0000               3047              MOVE.B  #0,D4
00002E26  4E75                    3048              RTS
00002E28                          3049  
00002E28  43F9 000044C1           3050  OP_ASL_L    LEA     DISP_ASL_L,A1
00002E2E  103C 000E               3051              MOVE.B  #14,D0
00002E32  4E4F                    3052              TRAP    #15
00002E34  183C 0002               3053              MOVE.B  #2,D4
00002E38  4E75                    3054              RTS
00002E3A                          3055  
00002E3A  43F9 000044AF           3056  OP_ASL_W    LEA     DISP_ASL_W,A1
00002E40  103C 000E               3057              MOVE.B  #14,D0
00002E44  4E4F                    3058              TRAP    #15
00002E46  183C 0001               3059              MOVE.B  #1,D4
00002E4A  4E75                    3060              RTS
00002E4C                          3061   
00002E4C                          3062  *---------------------------------------------------------------------------*
00002E4C                          3063  * OP_ROR: decode and display ROR
00002E4C                          3064  *---------------------------------------------------------------------------*             
00002E4C  E599                    3065  OP_ROR      ROL.L   #2,D1
00002E4E  0281 00000003           3066              ANDI.L  #$3,D1
00002E54  0C01 0000               3067              CMPI.B  #0,D1
00002E58  6700 0016               3068              BEQ     OP_ROR_B
00002E5C  0C01 0001               3069              CMPI.B  #$1,D1
00002E60  6700 0032               3070              BEQ     OP_ROR_W
00002E64  0C01 0002               3071              CMPI.B  #$2,D1
00002E68  6700 0018               3072              BEQ     OP_ROR_L
00002E6C                          3073              
00002E6C  4EF8 14DA               3074              JMP OP_DATA
00002E70                          3075  
00002E70  43F9 000044CA           3076  OP_ROR_B    LEA     DISP_ROR_B,A1
00002E76  103C 000E               3077              MOVE.B  #14,D0
00002E7A  4E4F                    3078              TRAP    #15
00002E7C  183C 0000               3079              MOVE.B  #0,D4
00002E80  4E75                    3080              RTS
00002E82                          3081  
00002E82  43F9 000044EE           3082  OP_ROR_L    LEA     DISP_ROR_L,A1
00002E88  103C 000E               3083              MOVE.B  #14,D0
00002E8C  4E4F                    3084              TRAP    #15
00002E8E  183C 0002               3085              MOVE.B  #2,D4
00002E92  4E75                    3086              RTS
00002E94                          3087  
00002E94  43F9 000044DC           3088  OP_ROR_W    LEA     DISP_ROR_W,A1
00002E9A  103C 000E               3089              MOVE.B  #14,D0
00002E9E  4E4F                    3090              TRAP    #15
00002EA0  183C 0001               3091              MOVE.B  #1,D4
00002EA4  4E75                    3092              RTS
00002EA6                          3093  
00002EA6                          3094  *---------------------------------------------------------------------------*
00002EA6                          3095  * OP_ROL: decode and display ROL
00002EA6                          3096  *---------------------------------------------------------------------------*             
00002EA6  E599                    3097  OP_ROL      ROL.L   #2,D1
00002EA8  0281 00000003           3098              ANDI.L  #$3,D1
00002EAE  0C01 0000               3099              CMPI.B  #0,D1
00002EB2  6700 0016               3100              BEQ     OP_ROL_B
00002EB6  0C01 0001               3101              CMPI.B  #$1,D1
00002EBA  6700 0032               3102              BEQ     OP_ROL_W
00002EBE  0C01 0002               3103              CMPI.B  #$2,D1
00002EC2  6700 0018               3104              BEQ     OP_ROL_L
00002EC6                          3105              
00002EC6  4EF8 14DA               3106              JMP OP_DATA
00002ECA                          3107  
00002ECA                          3108  
00002ECA  43F9 000044D3           3109  OP_ROL_B    LEA     DISP_ROL_B,A1
00002ED0  103C 000E               3110              MOVE.B  #14,D0
00002ED4  4E4F                    3111              TRAP    #15
00002ED6  183C 0000               3112              MOVE.B  #0,D4
00002EDA  4E75                    3113              RTS
00002EDC                          3114  
00002EDC  43F9 000044F7           3115  OP_ROL_L    LEA     DISP_ROL_L,A1
00002EE2  103C 000E               3116              MOVE.B  #14,D0
00002EE6  4E4F                    3117              TRAP    #15
00002EE8  183C 0002               3118              MOVE.B  #2,D4
00002EEC  4E75                    3119              RTS
00002EEE                          3120  
00002EEE  43F9 000044E5           3121  OP_ROL_W    LEA     DISP_ROL_W,A1
00002EF4  103C 000E               3122              MOVE.B  #14,D0
00002EF8  4E4F                    3123              TRAP    #15
00002EFA  183C 0001               3124              MOVE.B  #1,D4
00002EFE  4E75                    3125              RTS
00002F00                          3126              
00002F00                          3127  *---------------------------------------------------------------------------*
00002F00                          3128  * OP1111 : Special reserved
00002F00                          3129  *---------------------------------------------------------------------------*           
00002F00  4EF8 14DA               3130  OP1111      JMP     OP_DATA
00002F04                          3131  
00002F04                          3132  *---------------------------------------------------------------------------*
00002F04                          3133  * EA_NOSRC: decode and display effective addresses for NEG/JSR
00002F04                          3134  *---------------------------------------------------------------------------*
00002F04                          3135  EA_NOSRC    
00002F04  4EB9 00002FC2           3136              JSR     SRC_MODE
00002F0A  43F9 000041C4           3137              LEA     ENDLINE_M,A1
00002F10  103C 000E               3138              MOVE.B  #14,D0
00002F14  4E4F                    3139              TRAP    #15
00002F16  4E75                    3140              RTS
00002F18                          3141              
00002F18                          3142  *---------------------------------------------------------------------------*
00002F18                          3143  * EA_ARITH: decode and display effective addresses for DIVS/MULS
00002F18                          3144  *---------------------------------------------------------------------------*
00002F18                          3145  EA_ARITH
00002F18  4EB9 00002FC2           3146              JSR     SRC_MODE
00002F1E  43F9 0000453E           3147              LEA     DISP_D,A1
00002F24  103C 000E               3148              MOVE.B  #14,D0
00002F28  4E4F                    3149              TRAP    #15
00002F2A  4EB9 0000324E           3150              JSR     DEST_REGISTER
00002F30  43F9 000041C4           3151              LEA     ENDLINE_M,A1
00002F36  103C 000E               3152              MOVE.B  #14,D0
00002F3A  4E4F                    3153              TRAP    #15
00002F3C  4E75                    3154              RTS
00002F3E                          3155              
00002F3E                          3156  *---------------------------------------------------------------------------*
00002F3E                          3157  * EA_MOVEA: decode and display effective addresses for MOVEA/LEA
00002F3E                          3158  *---------------------------------------------------------------------------*
00002F3E                          3159  EA_MOVEA
00002F3E  4EB9 00002FC2           3160              JSR     SRC_MODE
00002F44  43F9 0000454F           3161              LEA     DISP_AOP,A1
00002F4A  103C 000E               3162              MOVE.B  #14,D0
00002F4E  4E4F                    3163              TRAP    #15
00002F50  4EB9 0000324E           3164              JSR     DEST_REGISTER
00002F56  43F9 0000454D           3165              LEA     DISP_CP,A1
00002F5C  103C 000D               3166              MOVE.B  #13,D0
00002F60  4E4F                    3167              TRAP    #15
00002F62  4E75                    3168              RTS
00002F64                          3169              
00002F64                          3170  *---------------------------------------------------------------------------*
00002F64                          3171  * EA_GEN: decode and display effective addresses for MOVE
00002F64                          3172  *---------------------------------------------------------------------------*
00002F64                          3173  EA_GEN          
00002F64                          3174              * retrieve/display source mode/register
00002F64  4EB9 00002FC2           3175              JSR     SRC_MODE
00002F6A                          3176              
00002F6A                          3177              * retrieve/display destination mode/register
00002F6A  4EB9 00002F7E           3178              JSR     DEST_MODE
00002F70                          3179              
00002F70  43F9 000041C4           3180              LEA     ENDLINE_M,A1
00002F76  103C 000E               3181              MOVE.B  #14,D0
00002F7A  4E4F                    3182              TRAP    #15
00002F7C                          3183              
00002F7C  4E75                    3184              RTS
00002F7E                          3185  
00002F7E                          3186  *---------------------------------------------------------------------------*
00002F7E                          3187  * DEST_MODE: decode and display destination mode (bit 8 - 6)
00002F7E                          3188  *---------------------------------------------------------------------------*           
00002F7E                          3189  DEST_MODE   
00002F7E                          3190              * clear registers to store temp data
00002F7E  4280                    3191              CLR.L   D0                      
00002F80  4281                    3192              CLR.L   D1                      
00002F82  207C 00000000           3193              MOVEA.L #0, A0                  
00002F88  227C 00000000           3194              MOVEA.L #0, A1                  
00002F8E  2205                    3195              MOVE.L  D5,D1
00002F90  EC89                    3196              LSR.L   #6,D1
00002F92  0281 00000007           3197              ANDI.L  #$7,D1
00002F98  0C01 0000               3198              CMPI.B  #0,D1   * Dn
00002F9C  6700 0082               3199              BEQ     D_MODE000
00002FA0  0C01 0002               3200              CMPI.B  #2,D1   * (An)
00002FA4  6700 00C2               3201              BEQ     D_MODE010
00002FA8  0C01 0003               3202              CMPI.B  #3,D1   * (An)+
00002FAC  6700 011A               3203              BEQ     D_MODE011
00002FB0  0C01 0004               3204              CMPI.B  #4,D1   * -(An)
00002FB4  6700 0132               3205              BEQ     D_MODE100
00002FB8  0C01 0007               3206              CMPI.B  #7,D1  * abs
00002FBC  6700 017C               3207              BEQ     D_MODE111 
00002FC0  4E75                    3208              RTS
00002FC2                          3209  
00002FC2                          3210  *---------------------------------------------------------------------------*
00002FC2                          3211  * SRC_MODE: decode and display source mode (bit 5 - 3)
00002FC2                          3212  *---------------------------------------------------------------------------*  
00002FC2                          3213  SRC_MODE    
00002FC2                          3214              * clear registers to store temp data
00002FC2  4280                    3215              CLR.L   D0                      
00002FC4  4281                    3216              CLR.L   D1                      
00002FC6  207C 00000000           3217              MOVEA.L #0, A0                  
00002FCC  227C 00000000           3218              MOVEA.L #0, A1                  
00002FD2  2205                    3219              MOVE.L  D5,D1
00002FD4  E489                    3220              LSR.L   #2,D1
00002FD6  0281 0000000E           3221              ANDI.L  #$E,D1
00002FDC                          3222              
00002FDC  0C01 0000               3223              CMPI.B  #0,D1   * Dn
00002FE0  6700 002A               3224              BEQ     MODE000
00002FE4  0C01 0002               3225              CMPI.B  #2,D1   * An 
00002FE8  6700 004A               3226              BEQ     MODE001
00002FEC  0C01 0004               3227              CMPI.B  #4,D1   * (An)
00002FF0  6700 0056               3228              BEQ     MODE010
00002FF4  0C01 0006               3229              CMPI.B  #6,D1   * (An)+
00002FF8  6700 008E               3230              BEQ     MODE011
00002FFC  0C01 0008               3231              CMPI.B  #8,D1   * -(An)
00003000  6700 00A6               3232              BEQ     MODE100
00003004  0C01 000F               3233              CMPI.B  #15,D1  * abs/immediate
00003008  6700 00FE               3234              BEQ     MODE111 
0000300C                          3235        
0000300C                          3236  *---------------------------------------------------------------------------*
0000300C                          3237  * MODE000: decode and display source mode Dn
0000300C                          3238  *---------------------------------------------------------------------------*           
0000300C                          3239  MODE000     *Dn
0000300C  43F9 0000453E           3240              LEA     DISP_D,A1
00003012  103C 000E               3241              MOVE.B  #14,D0
00003016  4E4F                    3242              TRAP    #15
00003018  4EB9 000032AA           3243              JSR     SRC_REGISTER
0000301E  4E75                    3244              RTS
00003020                          3245  
00003020                          3246  *---------------------------------------------------------------------------*
00003020                          3247  * D_MODE000: decode and display dest mode Dn
00003020                          3248  *---------------------------------------------------------------------------*
00003020                          3249  D_MODE000     *Dn
00003020  43F9 0000453E           3250              LEA     DISP_D,A1
00003026  103C 000E               3251              MOVE.B  #14,D0
0000302A  4E4F                    3252              TRAP    #15
0000302C  4EB9 0000324E           3253              JSR     DEST_REGISTER
00003032  4E75                    3254              RTS
00003034                          3255  
00003034                          3256  *---------------------------------------------------------------------------*
00003034                          3257  * MODE001: decode and display source mode An
00003034                          3258  *---------------------------------------------------------------------------* 
00003034                          3259  MODE001 *An
00003034  43F9 00004543           3260              LEA     DISP_A,A1
0000303A  103C 000E               3261              MOVE.B  #14,D0
0000303E  4E4F                    3262              TRAP    #15
00003040  4EB9 000032AA           3263              JSR     SRC_REGISTER
00003046                          3264          
00003046  4E75                    3265              RTS
00003048                          3266  
00003048                          3267  *---------------------------------------------------------------------------*
00003048                          3268  * MODE010: decode and display source mode (An)
00003048                          3269  *---------------------------------------------------------------------------*    
00003048                          3270  MODE010 *(An)
00003048  43F9 0000454F           3271              LEA     DISP_AOP,A1  *display (A
0000304E  103C 000E               3272              MOVE.B  #14,D0
00003052  4E4F                    3273              TRAP    #15
00003054                          3274  
00003054  4EB9 000032AA           3275              JSR     SRC_REGISTER * display register
0000305A                          3276  
0000305A  43F9 0000454D           3277              LEA     DISP_CP,A1   *display )
00003060  103C 000E               3278              MOVE.B  #14,D0
00003064  4E4F                    3279              TRAP    #15
00003066                          3280              
00003066  4E75                    3281              RTS
00003068                          3282  
00003068                          3283  *---------------------------------------------------------------------------*
00003068                          3284  * D_MODE010: decode and display dest mode (An)
00003068                          3285  *---------------------------------------------------------------------------*
00003068                          3286  D_MODE010 *(An)
00003068  43F9 0000454F           3287              LEA     DISP_AOP,A1  *display (A
0000306E  103C 000E               3288              MOVE.B  #14,D0
00003072  4E4F                    3289              TRAP    #15
00003074                          3290     
00003074  4EB9 0000324E           3291              JSR     DEST_REGISTER * display register
0000307A                          3292  
0000307A  43F9 0000454D           3293              LEA     DISP_CP,A1   *display )
00003080  103C 000E               3294              MOVE.B  #14,D0
00003084  4E4F                    3295              TRAP    #15
00003086                          3296              
00003086  4E75                    3297              RTS
00003088                          3298  
00003088                          3299  *---------------------------------------------------------------------------*
00003088                          3300  * MODE011: decode and display source mode (An)+
00003088                          3301  *---------------------------------------------------------------------------*
00003088                          3302  MODE011 *(An)+
00003088  43F9 0000454F           3303              LEA     DISP_AOP,A1      *display (A
0000308E  103C 000E               3304              MOVE.B  #14,D0
00003092  4E4F                    3305              TRAP    #15
00003094                          3306              
00003094  4EB9 000032AA           3307              JSR     SRC_REGISTER    * display register
0000309A                          3308  
0000309A  43F9 0000455C           3309              LEA     DISP_POST,A1    *display )+
000030A0  103C 000E               3310              MOVE.B  #14,D0
000030A4  4E4F                    3311              TRAP    #15
000030A6                          3312              
000030A6  4E75                    3313              RTS
000030A8                          3314              
000030A8                          3315  *---------------------------------------------------------------------------*
000030A8                          3316  * MODE100: decode and display source mode -(An)
000030A8                          3317  *---------------------------------------------------------------------------*
000030A8                          3318  MODE100 *-(An)
000030A8  43F9 00004555           3319              LEA     DISP_PRE,A1    *display -(A
000030AE  103C 000E               3320              MOVE.B  #14,D0
000030B2  4E4F                    3321              TRAP    #15
000030B4                          3322  
000030B4  4EB9 000032AA           3323              JSR     SRC_REGISTER    *display register
000030BA                          3324  
000030BA  43F9 0000454D           3325              LEA     DISP_CP,A1   *display )
000030C0  103C 000E               3326              MOVE.B  #14,D0
000030C4  4E4F                    3327              TRAP    #15
000030C6                          3328              
000030C6  4E75                    3329              RTS
000030C8                          3330  
000030C8                          3331  *---------------------------------------------------------------------------*
000030C8                          3332  * D_MODE011: decode and display dest mode (An)+
000030C8                          3333  *---------------------------------------------------------------------------*
000030C8                          3334  D_MODE011 *(An)+
000030C8  43F9 0000454F           3335              LEA     DISP_AOP,A1      *display (A
000030CE  103C 000E               3336              MOVE.B  #14,D0
000030D2  4E4F                    3337              TRAP    #15
000030D4                          3338  
000030D4  4EB9 0000324E           3339              JSR     DEST_REGISTER    * display register
000030DA                          3340  
000030DA  43F9 0000455C           3341              LEA     DISP_POST,A1    *display )+
000030E0  103C 000E               3342              MOVE.B  #14,D0
000030E4  4E4F                    3343              TRAP    #15
000030E6                          3344              
000030E6  4E75                    3345              RTS
000030E8                          3346              
000030E8                          3347  *---------------------------------------------------------------------------*
000030E8                          3348  * D_MODE100: decode and display dest mode -(An)
000030E8                          3349  *---------------------------------------------------------------------------*            
000030E8                          3350  D_MODE100 *-(An)
000030E8  43F9 00004555           3351              LEA     DISP_PRE,A1    *display -(A
000030EE  103C 000E               3352              MOVE.B  #14,D0
000030F2  4E4F                    3353              TRAP    #15
000030F4                          3354              
000030F4  4EB9 0000324E           3355              JSR     DEST_REGISTER    *display register
000030FA                          3356  
000030FA  43F9 0000454D           3357              LEA     DISP_CP,A1   *display )
00003100  103C 000E               3358              MOVE.B  #14,D0
00003104  4E4F                    3359              TRAP    #15
00003106                          3360              
00003106  4E75                    3361              RTS
00003108                          3362  
00003108                          3363  *---------------------------------------------------------------------------*
00003108                          3364  * MODE111: decode and display source mode absolute/immediate
00003108                          3365  *---------------------------------------------------------------------------*
00003108                          3366  MODE111     * abs/immediate
00003108                          3367              * clear registers to store temp data
00003108  4280                    3368              CLR.L   D0                      
0000310A  4281                    3369              CLR.L   D1                      
0000310C  207C 00000000           3370              MOVEA.L #0, A0                  
00003112  227C 00000000           3371              MOVEA.L #0, A1                  
00003118  2205                    3372              MOVE.L  D5,D1
0000311A                          3373              
0000311A                          3374              * retrieve source register for MODE 111
0000311A  E389                    3375              LSL.L   #1,D1   * shift the bits to left by 1
0000311C  0281 0000000E           3376              ANDI.L  #$E,D1  * mask the first 4 bits 
00003122  0C01 0000               3377              CMPI.B  #0, D1  * if it's 0000, absolute word address
00003126  6700 003E               3378              BEQ     WORDMODE
0000312A  0C01 0002               3379              CMPI.B  #2, D1  * if it's 0010, absolute long address
0000312E  6700 0062               3380              BEQ     LONGMODE
00003132  0C01 0008               3381              CMPI.B  #8, D1  * if it's 1000, immediate data
00003136  6700 0086               3382              BEQ     IMMEDIATE
0000313A                          3383       
0000313A                          3384  *---------------------------------------------------------------------------*
0000313A                          3385  * D_MODE111: decode and display dest mode absolute/immediate
0000313A                          3386  *---------------------------------------------------------------------------*           
0000313A                          3387  D_MODE111   * abs
0000313A                          3388              * clear registers to store temp data
0000313A  4280                    3389              CLR.L   D0                      
0000313C  4281                    3390              CLR.L   D1                      
0000313E  207C 00000000           3391              MOVEA.L #0, A0                  
00003144  227C 00000000           3392              MOVEA.L #0, A1                  
0000314A  2205                    3393              MOVE.L  D5,D1
0000314C                          3394              
0000314C                          3395              * retrieve dest register for MODE 111
0000314C  EC89                    3396              LSR.L   #6,D1   * shift the bits to right by 6
0000314E  E689                    3397              LSR.L   #3,D1   * shift the bits to right by extra 3
00003150  0201 0001               3398              ANDI.B  #1,D1   * mask the first 2 bits 
00003154  0C01 0000               3399              CMPI.B  #0, D1  * if it's 000, absolute word address
00003158  6700 000C               3400              BEQ     WORDMODE
0000315C  0C01 0001               3401              CMPI.B  #1, D1  * if it's 001, absolute long address
00003160  6700 0030               3402              BEQ     LONGMODE
00003164                          3403              *JSR     OP_DATA *not sure..
00003164  4E75                    3404              RTS
00003166                          3405  
00003166                          3406  
00003166                          3407  *---------------------------------------------------------------------------*
00003166                          3408  * WORDMODE: absolute word address
00003166                          3409  *---------------------------------------------------------------------------*
00003166  43F9 00004539           3410  WORDMODE    LEA     DISP_HEX,A1
0000316C  103C 000E               3411              MOVE.B  #14,D0
00003170  4E4F                    3412              TRAP    #15
00003172                          3413              
00003172  4285                    3414              CLR.L   D5
00003174  3A1D                    3415              MOVE.W  (A5)+,D5
00003176                          3416              
00003176  43F9 00004217           3417              LEA     TMPOUTPUT,A1
0000317C  2205                    3418              MOVE.L  D5,D1
0000317E  7404                    3419              MOVE.L  #4,D2       *move word size 4
00003180  4EB8 11DA               3420              JSR     HEX2ASCII
00003184  43F9 00004217           3421              LEA     TMPOUTPUT,A1
0000318A  103C 000E               3422              MOVE.B  #14,D0
0000318E  4E4F                    3423              TRAP    #15
00003190                          3424              
00003190  4E75                    3425              RTS
00003192                          3426  
00003192                          3427  *---------------------------------------------------------------------------*
00003192                          3428  * LONGMODE: absolute long address
00003192                          3429  *---------------------------------------------------------------------------*
00003192  43F9 00004539           3430  LONGMODE    LEA     DISP_HEX,A1
00003198  103C 000E               3431              MOVE.B  #14,D0
0000319C  4E4F                    3432              TRAP    #15
0000319E                          3433              
0000319E  4285                    3434              CLR.L   D5
000031A0  2A1D                    3435              MOVE.L  (A5)+,D5
000031A2                          3436              
000031A2  43F9 00004217           3437              LEA     TMPOUTPUT,A1
000031A8  2205                    3438              MOVE.L  D5,D1
000031AA  7408                    3439              MOVE.L  #8,D2           *move longword size 8
000031AC  4EB8 11DA               3440              JSR     HEX2ASCII
000031B0  43F9 00004217           3441              LEA     TMPOUTPUT,A1
000031B6  103C 000E               3442              MOVE.B  #14,D0
000031BA  4E4F                    3443              TRAP    #15
000031BC                          3444              
000031BC  4E75                    3445              RTS
000031BE                          3446  
000031BE                          3447  
000031BE                          3448  *---------------------------------------------------------------------------*
000031BE                          3449  * IMMEDIATE: immediate address
000031BE                          3450  *---------------------------------------------------------------------------*
000031BE  43F9 0000455F           3451  IMMEDIATE   LEA     DISP_LB,A1
000031C4  103C 000E               3452              MOVE.B  #14,D0
000031C8  4E4F                    3453              TRAP    #15
000031CA  43F9 00004539           3454              LEA     DISP_HEX,A1
000031D0  103C 000E               3455              MOVE.B  #14,D0
000031D4  4E4F                    3456              TRAP    #15
000031D6                          3457              
000031D6                          3458              * check for size
000031D6  0C04 0000               3459              CMPI.B  #0,D4
000031DA  6700 0012               3460              BEQ     IMMD_B
000031DE  0C04 0001               3461              CMPI.B  #1,D4
000031E2  6700 002A               3462              BEQ     IMMD_W
000031E6  0C04 0002               3463              CMPI.B  #2,D4
000031EA  6700 0042               3464              BEQ     IMMD_L
000031EE                          3465  
000031EE                          3466  IMMD_B
000031EE  4285                    3467              CLR.L   D5
000031F0  3A1D                    3468              MOVE.W  (A5)+,D5
000031F2                          3469              
000031F2  43F9 00004217           3470              LEA     TMPOUTPUT,A1
000031F8  2205                    3471              MOVE.L  D5,D1
000031FA  7402                    3472              MOVE.L  #2,D2
000031FC  4EB8 11DA               3473              JSR     HEX2ASCII
00003200  43F9 00004217           3474              LEA     TMPOUTPUT,A1
00003206  103C 000E               3475              MOVE.B  #14,D0
0000320A  4E4F                    3476              TRAP    #15
0000320C  4E75                    3477              RTS
0000320E                          3478              
0000320E                          3479  IMMD_W
0000320E  4285                    3480              CLR.L   D5
00003210  3A1D                    3481              MOVE.W  (A5)+,D5
00003212                          3482              
00003212  43F9 00004217           3483              LEA     TMPOUTPUT,A1
00003218  2205                    3484              MOVE.L  D5,D1
0000321A  7404                    3485              MOVE.L  #4,D2
0000321C  4EB8 11DA               3486              JSR     HEX2ASCII
00003220  43F9 00004217           3487              LEA     TMPOUTPUT,A1
00003226  103C 000E               3488              MOVE.B  #14,D0
0000322A  4E4F                    3489              TRAP    #15
0000322C  4E75                    3490              RTS
0000322E                          3491              
0000322E                          3492  
0000322E                          3493  IMMD_L
0000322E  4285                    3494              CLR.L   D5
00003230  3A1D                    3495              MOVE.W  (A5)+,D5
00003232                          3496              
00003232  43F9 00004217           3497              LEA     TMPOUTPUT,A1
00003238  2205                    3498              MOVE.L  D5,D1
0000323A  7408                    3499              MOVE.L  #8,D2
0000323C  4EB8 11DA               3500              JSR     HEX2ASCII
00003240  43F9 00004217           3501              LEA     TMPOUTPUT,A1
00003246  103C 000E               3502              MOVE.B  #14,D0
0000324A  4E4F                    3503              TRAP    #15
0000324C  4E75                    3504              RTS
0000324E                          3505  
0000324E                          3506  
0000324E                          3507  *---------------------------------------------------------------------------*
0000324E                          3508  * DEST_REGISTER: decode and display destination register (bit 11 - 9)
0000324E                          3509  *---------------------------------------------------------------------------*
0000324E                          3510  DEST_REGISTER
0000324E                          3511              * clear registers to store temp data
0000324E  4280                    3512              CLR.L   D0                      
00003250  4281                    3513              CLR.L   D1                      
00003252  207C 00000000           3514              MOVEA.L #0, A0                  
00003258  227C 00000000           3515              MOVEA.L #0, A1 
0000325E                          3516              
0000325E  2205                    3517              MOVE.L  D5,D1
00003260  EC89                    3518              LSR.L   #6,D1
00003262  E689                    3519              LSR.L   #3,D1
00003264  0281 00000007           3520              ANDI.L  #7,D1
0000326A                          3521              
0000326A  0C01 0000               3522              CMPI.B  #0,D1
0000326E  6700 0092               3523              BEQ     REG_0
00003272  0C01 0001               3524              CMPI.B  #1,D1
00003276  6700 0098               3525              BEQ     REG_1
0000327A  0C01 0002               3526              CMPI.B  #2,D1
0000327E  6700 009E               3527              BEQ     REG_2
00003282  0C01 0003               3528              CMPI.B  #3,D1
00003286  6700 00A4               3529              BEQ     REG_3
0000328A  0C01 0004               3530              CMPI.B  #4,D1
0000328E  6700 00AA               3531              BEQ     REG_4
00003292  0C01 0005               3532              CMPI.B  #5,D1
00003296  6700 00B0               3533              BEQ     REG_5
0000329A  0C01 0006               3534              CMPI.B  #6,D1
0000329E  6700 00B6               3535              BEQ     REG_6
000032A2  0C01 0007               3536              CMPI.B  #7,D1
000032A6  6700 00BC               3537              BEQ     REG_7
000032AA                          3538  
000032AA                          3539  *---------------------------------------------------------------------------*
000032AA                          3540  * SRC_REGISTER: decode and display source register (bit 2 - 0)
000032AA                          3541  *---------------------------------------------------------------------------*           
000032AA                          3542  SRC_REGISTER 
000032AA                          3543              * clear registers to store temp data
000032AA  4280                    3544              CLR.L   D0                      
000032AC  4281                    3545              CLR.L   D1                      
000032AE  207C 00000000           3546              MOVEA.L #0, A0                  
000032B4  227C 00000000           3547              MOVEA.L #0, A1                  
000032BA                          3548              
000032BA  2205                    3549              MOVE.L  D5,D1   * temp store the processing data
000032BC  0281 00000007           3550              ANDI.L  #7,D1   * mask the first 4 bits with 0111
000032C2                          3551              
000032C2  0C01 0000               3552              CMPI.B  #0,D1
000032C6  6700 003A               3553              BEQ     REG_0
000032CA  0C01 0001               3554              CMPI.B  #1,D1
000032CE  6700 0040               3555              BEQ     REG_1
000032D2  0C01 0002               3556              CMPI.B  #2,D1
000032D6  6700 0046               3557              BEQ     REG_2
000032DA  0C01 0003               3558              CMPI.B  #3,D1
000032DE  6700 004C               3559              BEQ     REG_3
000032E2  0C01 0004               3560              CMPI.B  #4,D1
000032E6  6700 0052               3561              BEQ     REG_4
000032EA  0C01 0005               3562              CMPI.B  #5,D1
000032EE  6700 0058               3563              BEQ     REG_5
000032F2  0C01 0006               3564              CMPI.B  #6,D1
000032F6  6700 005E               3565              BEQ     REG_6
000032FA  0C01 0007               3566              CMPI.B  #7,D1
000032FE  6700 0064               3567              BEQ     REG_7
00003302                          3568  
00003302                          3569  *---------------------------------------------------------------------------*
00003302                          3570  * REG_0 ~ REG_7: display register 0 to 7
00003302                          3571  *---------------------------------------------------------------------------*
00003302  43F9 00004564           3572  REG_0       LEA     DISP_0,A1
00003308  103C 000E               3573              MOVE.B  #14,D0
0000330C  4E4F                    3574              TRAP    #15
0000330E  4E75                    3575              RTS
00003310                          3576              
00003310  43F9 00004566           3577  REG_1       LEA     DISP_1,A1
00003316  103C 000E               3578              MOVE.B  #14,D0
0000331A  4E4F                    3579              TRAP    #15
0000331C  4E75                    3580              RTS
0000331E                          3581              
0000331E                          3582  
0000331E  43F9 00004568           3583  REG_2       LEA     DISP_2,A1
00003324  103C 000E               3584              MOVE.B  #14,D0
00003328  4E4F                    3585              TRAP    #15
0000332A  4E75                    3586              RTS
0000332C                          3587            
0000332C  43F9 0000456A           3588  REG_3       LEA     DISP_3,A1
00003332  103C 000E               3589              MOVE.B  #14,D0
00003336  4E4F                    3590              TRAP    #15
00003338  4E75                    3591              RTS
0000333A                          3592              
0000333A  43F9 0000456C           3593  REG_4       LEA     DISP_4,A1
00003340  103C 000E               3594              MOVE.B  #14,D0
00003344  4E4F                    3595              TRAP    #15
00003346  4E75                    3596              RTS
00003348                          3597              
00003348  43F9 0000456E           3598  REG_5       LEA     DISP_5,A1
0000334E  103C 000E               3599              MOVE.B  #14,D0
00003352  4E4F                    3600              TRAP    #15
00003354  4E75                    3601              RTS
00003356                          3602              
00003356  43F9 00004570           3603  REG_6       LEA     DISP_6,A1
0000335C  103C 000E               3604              MOVE.B  #14,D0
00003360  4E4F                    3605              TRAP    #15
00003362  4E75                    3606              RTS
00003364                          3607              
00003364  43F9 00004572           3608  REG_7       LEA     DISP_7,A1
0000336A  103C 000E               3609              MOVE.B  #14,D0
0000336E  4E4F                    3610              TRAP    #15
00003370  4E75                    3611              RTS
00003372                          3612              
00003372                          3613  *---------------------------------------------------------------------------*
00003372                          3614  * REPEAT : Ask user whether they wish to run the program again
00003372                          3615  *---------------------------------------------------------------------------*           
00003372  4246                    3616  REPEAT      CLR.W   D6                      * Reset D6 (Loop Count)
00003374  43F9 0000403D           3617              LEA     REPEATMSG,A1
0000337A  103C 000E               3618              MOVE.B  #14,D0
0000337E  4E4F                    3619              TRAP    #15
00003380                          3620              
00003380  43F9 000041C7           3621              LEA     TMPINPUT,A1             * allocate space to temp store user input
00003386  103C 0002               3622              MOVE.B  #2,D0
0000338A  4E4F                    3623              TRAP    #15
0000338C                          3624  
0000338C  0C01 0001               3625              CMPI.B  #1,D1                   * check for length of user input
00003390  66E0                    3626              BNE     REPEAT                  * return to the beginning of the function if unequal
00003392                          3627              
00003392  0C11 0059               3628              CMPI.B  #$59,(A1)               * compare the input with Y    
00003396  6700 DC72               3629              BEQ     PROGLP                  * repeat the program
0000339A                          3630              
0000339A  0C11 0079               3631              CMPI.B  #$79,(A1)               * compare the input with y    
0000339E  6700 DC6A               3632              BEQ     PROGLP                  * repeat the program
000033A2                          3633              
000033A2  0C11 004E               3634              CMPI.B  #$4E,(A1)               * compare the input with N    
000033A6  6700 0928               3635              BEQ     TERMINATE               * finish program
000033AA                          3636              
000033AA  0C11 006E               3637              CMPI.B  #$6E,(A1)               * compare the input with n    
000033AE  6700 0920               3638              BEQ     TERMINATE               * finish program
000033B2                          3639              
000033B2  60BE                    3640              BRA     REPEAT                  * invalid input/repeat the function
000033B4                          3641  
000033B4                          3642  *---------------------------------------------------------------------------*
000033B4                          3643  * EA DECODING INTERFACE
000033B4                          3644  * [A0] - RESERVED FOR USE
000033B4                          3645  * [D2] - RESERVED FOR USE
000033B4                          3646  * RETURNS - ERROR FLAG IF FAILED TO PUSH SRC EA INTO STACK
000033B4                          3647  *---------------------------------------------------------------------------*
000033B4                          3648  GET_EA_EA_SRC
000033B4                          3649      *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
000033B4                          3650      
000033B4                          3651      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
000033B4  2405                    3652      MOVE.L  D5,D2                           * CLEAN COPY TO D2
000033B6  E68A                    3653      LSR.L   #3,D2                           * [D2] Temporarily used D2 for shifting bits            *TODO: DYNAMIC FOR ANY LOCATION OF SOURCE
000033B8  23C2 0000458A           3654      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
000033BE  7407                    3655      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
000033C0  C5B9 0000458A           3656      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
000033C6                          3657                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
000033C6                          3658      
000033C6                          3659      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
000033C6                          3660      *DESTINATION REGISTER FORMAT STANDARD         *
000033C6                          3661      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
000033C6                          3662      *WHEN BIT = 0(VALID ADDRESS MODE)             *
000033C6                          3663      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
000033C6                          3664      *0 - Dn                                       *
000033C6                          3665      *1 - An                                       *
000033C6                          3666      *2 - (An)                                     *
000033C6                          3667      *3 - (An)+                                    *
000033C6                          3668      *4 - -(An)                                    *
000033C6                          3669      *5 - (XXX).W                                  *
000033C6                          3670      *6 - (XXX).L                                  *
000033C6                          3671      *7 - #<data>                                  *
000033C6                          3672      ***********************************************
000033C6                          3673      
000033C6                          3674      *** Check if source ...  <ea> = Dn
000033C6                          3675  CHECK0    
000033C6  41F9 0000457A           3676            LEA     TEMP_REGISTER_FORMAT,A0
000033CC  1439 00004579           3677            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000033D2  1082                    3678            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000033D4  0239 0001 0000457A      3679            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
000033DC  0C39 0001 0000457A      3680            CMPI.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
000033E4  6700 006A               3681            BEQ     CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
000033E8  0CB9 00000000 0000458A  3682            CMPI.L     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn) - COMPARE MODES TO SEE IF IT IS THIS MODE
000033F2  6600 005C               3683            BNE     CHECK1
000033F6                          3684            
000033F6                          3685            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000033F6  163C 0020               3686            MOVE.B    #' ',D3
000033FA  6100 0856               3687            BSR       PUSH_STACK
000033FE  163C 0044               3688            MOVE.B    #'D',D3
00003402  6100 084E               3689            BSR       PUSH_STACK
00003406                          3690  
00003406                          3691            *FIND REGISTER NUMBER END LOCATION*  
00003406  13F9 0000457C 00004582  3692            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00003410  0239 000F 00004582      3693            AND.B   #$0F,VAR_BYTE_END
00003418                          3694            
00003418                          3695            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003418  23C5 00004586           3696            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
0000341E  1439 00004582           3697            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003424                          3698            
00003424                          3699            *INTITIALIZE FOR BIT SHIFTING
00003424  41F9 00004586           3700            LEA     VAR_TEMP_CLEANCOPY,A0
0000342A  2639 00004586           3701            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003430                          3702  LOOP_SHIFTING
00003430  0C02 0000               3703            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003434  6700 0008               3704            BEQ     MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00003438  E24B                    3705            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
0000343A  5302                    3706            SUB.B   #1,D2                     *DECREMENT COUNTER
0000343C  60F2                    3707            BRA     LOOP_SHIFTING             *CONTINUE SHIFTING
0000343E                          3708  MASKING_NEXT
0000343E  C6BC 00000007           3709            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003444  0603 0030               3710            ADD.B   #$30,D3                   *CONVERT TO CHAR
00003448  6100 0808               3711            BSR     PUSH_STACK                *PUSH TO STACK
0000344C                          3712            
0000344C  6000 0394               3713            BRA     GET_SRC_SUCCESS           *RETURN          
00003450                          3714            
00003450                          3715            
00003450                          3716            *** Check if source ...  <ea> = An
00003450  41F9 0000457A           3717  CHECK1    LEA     TEMP_REGISTER_FORMAT,A0
00003456  1439 00004579           3718            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000345C  1082                    3719            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000345E  0239 0002 0000457A      3720            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
00003466  0C39 0002 0000457A      3721            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
0000346E  6700 006A               3722            BEQ     CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00003472  0CB9 00000001 0000458A  3723            CMPI.L  #1,VAR_LONG_ADDRESS_MODE_CHECK                      * An - COMPARE MODES TO SEE IF IT IS THIS MODE
0000347C  6600 005C               3724            BNE     CHECK2
00003480                          3725            
00003480                          3726            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003480  163C 0020               3727            MOVE.B    #' ',D3
00003484  6100 07CC               3728            BSR       PUSH_STACK
00003488  163C 0041               3729            MOVE.B    #'A',D3
0000348C  6100 07C4               3730            BSR       PUSH_STACK
00003490                          3731  
00003490                          3732            
00003490                          3733            *FIND REGISTER NUMBER END LOCATION*  
00003490  13F9 0000457C 00004582  3734            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
0000349A  0239 000F 00004582      3735            AND.B   #$0F,VAR_BYTE_END
000034A2                          3736            
000034A2                          3737            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000034A2  23C5 00004586           3738            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000034A8  1439 00004582           3739            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
000034AE                          3740            
000034AE                          3741            *INTITIALIZE FOR BIT SHIFTING
000034AE  41F9 00004586           3742            LEA     VAR_TEMP_CLEANCOPY,A0
000034B4  2639 00004586           3743            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000034BA                          3744  LOOP_SHIFTING1
000034BA  0C02 0000               3745            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000034BE  6700 0008               3746            BEQ     MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
000034C2  E24B                    3747            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000034C4  5302                    3748            SUB.B   #1,D2                     *DECREMENT COUNTER
000034C6  60F2                    3749            BRA     LOOP_SHIFTING1             *CONTINUE SHIFTING
000034C8                          3750  MASKING_NEXT1
000034C8  C6BC 00000007           3751            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000034CE  0603 0030               3752            ADD.B   #$30,D3                   *CONVERT TO CHAR
000034D2  6100 077E               3753            BSR     PUSH_STACK                *PUSH TO STACK
000034D6                          3754            
000034D6  6000 030A               3755            BRA     GET_SRC_SUCCESS                   *RETURN 
000034DA                          3756            
000034DA                          3757            
000034DA                          3758            
000034DA                          3759            
000034DA                          3760            *** Check if source ...  <ea> = (An)       
000034DA  41F9 0000457A           3761  CHECK2    LEA     TEMP_REGISTER_FORMAT,A0
000034E0  1439 00004579           3762            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000034E6  1082                    3763            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000034E8  0239 0004 0000457A      3764            ANDI.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
000034F0  0C39 0004 0000457A      3765            CMPI.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
000034F8  6700 007A               3766            BEQ     CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
000034FC  0CB9 00000002 0000458A  3767            CMPI.L   #2,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)  COMPARE MODES TO SEE IF IT IS THIS MODE                                                                *change: checkx++*
00003506  6600 006C               3768            BNE     CHECK3
0000350A                          3769            
0000350A                          3770            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
0000350A  163C 0020               3771            MOVE.B    #' ',D3
0000350E  6100 0742               3772            BSR       PUSH_STACK
00003512  163C 0028               3773            MOVE.B    #'(',D3
00003516  6100 073A               3774            BSR       PUSH_STACK
0000351A  163C 0041               3775            MOVE.B    #'A',D3
0000351E  6100 0732               3776            BSR       PUSH_STACK
00003522                          3777  
00003522                          3778            
00003522                          3779            *FIND REGISTER NUMBER END LOCATION*  
00003522  13F9 0000457C 00004582  3780            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
0000352C  0239 000F 00004582      3781            AND.B   #$0F,VAR_BYTE_END
00003534                          3782            
00003534                          3783            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003534  23C5 00004586           3784            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
0000353A  1439 00004582           3785            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003540                          3786            
00003540                          3787            *INTITIALIZE FOR BIT SHIFTING
00003540  41F9 00004586           3788            LEA     VAR_TEMP_CLEANCOPY,A0
00003546  2639 00004586           3789            MOVE.L  VAR_TEMP_CLEANCOPY,D3
0000354C                          3790  LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
0000354C  0C02 0000               3791            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003550  6700 0008               3792            BEQ     MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00003554  E24B                    3793            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003556  5302                    3794            SUB.B   #1,D2                     *DECREMENT COUNTER
00003558  60F2                    3795            BRA     LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
0000355A                          3796  MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
0000355A  0283 00000007           3797            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003560  0603 0030               3798            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00003564  6100 06EC               3799            BSR     PUSH_STACK                *PUSH TO STACK
00003568                          3800            
00003568  163C 0029               3801            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
0000356C  6100 06E4               3802            BSR       PUSH_STACK
00003570                          3803            
00003570  6000 0270               3804            BRA     GET_SRC_SUCCESS                   *RETURN 
00003574                          3805  
00003574                          3806            
00003574                          3807            
00003574                          3808                      
00003574                          3809  *** Check if source ...  <ea> = (An)+       
00003574  41F9 0000457A           3810  CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
0000357A  1439 00004579           3811            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003580  1082                    3812            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003582  0239 0008 0000457A      3813            ANDI.B  #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
0000358A  0C39 0008 0000457A      3814            CMPI.B  #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
00003592  6700 0082               3815            BEQ     CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00003596  0CB9 00000003 0000458A  3816            CMPI.L  #3,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)+ - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
000035A0  6600 0074               3817            BNE     CHECK4
000035A4                          3818            
000035A4                          3819            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
000035A4  163C 0020               3820            MOVE.B    #' ',D3
000035A8  6100 06A8               3821            BSR       PUSH_STACK
000035AC  163C 0028               3822            MOVE.B    #'(',D3
000035B0  6100 06A0               3823            BSR       PUSH_STACK
000035B4  163C 0041               3824            MOVE.B    #'A',D3
000035B8  6100 0698               3825            BSR       PUSH_STACK
000035BC                          3826  
000035BC                          3827            
000035BC                          3828            *FIND REGISTER NUMBER END LOCATION*  
000035BC  13F9 0000457C 00004582  3829            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
000035C6  0239 000F 00004582      3830            ANDI.B   #$0F,VAR_BYTE_END
000035CE                          3831            
000035CE                          3832            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000035CE  23C5 00004586           3833            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000035D4  1439 00004582           3834            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000035DA                          3835            
000035DA                          3836            *INTITIALIZE FOR BIT SHIFTING
000035DA  41F9 00004586           3837            LEA     VAR_TEMP_CLEANCOPY,A0
000035E0  2639 00004586           3838            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000035E6                          3839            
000035E6                          3840  LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
000035E6  0C02 0000               3841            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000035EA  6700 0008               3842            BEQ     MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
000035EE  E24B                    3843            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000035F0  5302                    3844            SUBI.B   #1,D2                     *DECREMENT COUNTER
000035F2  60F2                    3845            BRA     LOOP_SHIFTING3            *CONTINUE SHIFTING 
000035F4                          3846                                               *change: NAME OF LABEL*
000035F4                          3847  MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
000035F4  0283 00000007           3848            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000035FA  0603 0030               3849            ADDI.B   #$30,D3                   *CONVERT TO CHAR
000035FE  6100 0652               3850            BSR     PUSH_STACK                *PUSH TO STACK
00003602                          3851            
00003602  163C 0029               3852            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003606  6100 064A               3853            BSR       PUSH_STACK
0000360A  163C 002B               3854            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
0000360E  6100 0642               3855            BSR       PUSH_STACK
00003612                          3856            
00003612  6000 01CE               3857            BRA       GET_SRC_SUCCESS                   *RETURN 
00003616                          3858  
00003616                          3859            
00003616                          3860            
00003616                          3861                      
00003616                          3862            *** Check if source ...  <ea> = -(An)       
00003616  41F9 0000457A           3863  CHECK4    LEA     TEMP_REGISTER_FORMAT,A0
0000361C  1439 00004579           3864            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003622  1082                    3865            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003624  0239 0010 0000457A      3866            ANDI.B  #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
0000362C  0C39 0010 0000457A      3867            CMPI.B  #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003634  6700 0082               3868            BEQ     CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00003638  0CB9 00000004 0000458A  3869            CMPI.L  #4,VAR_LONG_ADDRESS_MODE_CHECK                      * -(An) - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00003642  6600 0074               3870            BNE     CHECK7
00003646                          3871            
00003646                          3872            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00003646  163C 0020               3873            MOVE.B    #' ',D3
0000364A  6100 0606               3874            BSR       PUSH_STACK
0000364E  163C 002D               3875            MOVE.B    #'-',D3
00003652  6100 05FE               3876            BSR       PUSH_STACK
00003656  163C 0028               3877            MOVE.B    #'(',D3
0000365A  6100 05F6               3878            BSR       PUSH_STACK
0000365E  163C 0041               3879            MOVE.B    #'A',D3
00003662  6100 05EE               3880            BSR       PUSH_STACK
00003666                          3881  
00003666                          3882            
00003666                          3883            *FIND REGISTER NUMBER END LOCATION*  
00003666  13F9 0000457C 00004582  3884            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00003670  0239 000F 00004582      3885            AND.B   #$0F,VAR_BYTE_END
00003678                          3886            
00003678                          3887            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003678  23C5 00004586           3888            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
0000367E  1439 00004582           3889            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003684                          3890            
00003684                          3891            *INTITIALIZE FOR BIT SHIFTING
00003684  41F9 00004586           3892            LEA     VAR_TEMP_CLEANCOPY,A0
0000368A  2639 00004586           3893            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003690                          3894            
00003690                          3895  LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
00003690  0C02 0000               3896            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003694  6700 0008               3897            BEQ     MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00003698  E24B                    3898            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
0000369A  5302                    3899            SUBI.B   #1,D2                     *DECREMENT COUNTER
0000369C  60F2                    3900            BRA     LOOP_SHIFTING4            *CONTINUE SHIFTING 
0000369E                          3901                                               *change: NAME OF LABEL*
0000369E                          3902  MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
0000369E  0283 00000007           3903            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000036A4  0603 0030               3904            ADDI.B   #$30,D3                   *CONVERT TO CHAR
000036A8  6100 05A8               3905            BSR     PUSH_STACK                *PUSH TO STACK
000036AC                          3906            
000036AC  163C 0029               3907            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
000036B0  6100 05A0               3908            BSR       PUSH_STACK
000036B4                          3909            
000036B4  6000 012C               3910            BRA     GET_SRC_SUCCESS                   *RETURN
000036B8                          3911            
000036B8                          3912                      
000036B8                          3913            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
000036B8  0CB9 00000007 0000458A  3914  CHECK7    CMPI.L  #7,VAR_LONG_ADDRESS_MODE_CHECK                      *IF (MODE != 111)
000036C2  6600 011A               3915            BNE     GET_SRC_FAILED                                      *THAN BRANCH TO UNCESSFULL SRC MODE READ
000036C6                          3916                   
000036C6                          3917            *NEXT: (MODE == 111) 
000036C6                          3918            *NOW: CHECK FOR SRC REGISTER 
000036C6                          3919                  *(000 = (xxx).W)
000036C6                          3920                  *(001 = (xxx).L)
000036C6                          3921                  *(010 = #<data>)
000036C6                          3922                  
000036C6                          3923            *FIND REGISTER NUMBER END LOCATION*  
000036C6  13F9 0000457C 00004582  3924            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
000036D0  0239 000F 00004582      3925            AND.B   #$0F,VAR_BYTE_END
000036D8                          3926            
000036D8                          3927            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000036D8  23C5 00004586           3928            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000036DE  1439 00004582           3929            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000036E4                          3930            
000036E4                          3931            *INTITIALIZE FOR BIT SHIFTING
000036E4  41F9 00004586           3932            LEA     VAR_TEMP_CLEANCOPY,A0
000036EA  2C39 00004586           3933            MOVE.L  VAR_TEMP_CLEANCOPY,D6
000036F0                          3934  SRC_LOOP_SHIFTING
000036F0  0C02 0000               3935            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000036F4  6700 0008               3936            BEQ     SRC_MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
000036F8  E24E                    3937            LSR     #1,D6                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000036FA  5302                    3938            SUB.B   #1,D2                     *DECREMENT COUNTER
000036FC  60F2                    3939            BRA     SRC_LOOP_SHIFTING             *CONTINUE SHIFTING
000036FE                          3940  SRC_MASKING_NEXT
000036FE  CCBC 00000007           3941            AND.L   #7,D6                     *MASK, ONLY NEED 0-2 BIT INDEXES 
00003704                          3942           *D3 - REGISTER NUMBER NEEDED TO CHECK WHICH W/L/#<DATA>*
00003704                          3943           
00003704                          3944  CHECK_WORD  
00003704  41F9 0000457A           3945            LEA     TEMP_REGISTER_FORMAT,A0
0000370A  1439 00004579           3946            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003710  1082                    3947            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003712  0239 0020 0000457A      3948            ANDI.B  #$20,TEMP_REGISTER_FORMAT                           * MASKS 0010 0000                                                     *change <SRC>*
0000371A  0C39 0020 0000457A      3949            CMPI.B  #$20,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0010 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003722  6700 0026               3950            BEQ     CHECK_LONG                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00003726  0C06 0000               3951            CMPI.B  #0,D6                          
0000372A  6600 001E               3952            BNE     CHECK_LONG 
0000372E                          3953            
0000372E                          3954            *IT IS A WORD AT THIS POINT*
0000372E                          3955            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
0000372E  163C 0020               3956            MOVE.B    #' ',D3
00003732  6100 051E               3957            BSR       PUSH_STACK
00003736  163C 0024               3958            MOVE.B    #'$',D3
0000373A  6100 0516               3959            BSR       PUSH_STACK
0000373E  321D                    3960            MOVE.W    (A5)+,D1
00003740  7404                    3961            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003742  6100 DAD8               3962            BSR       HEX2ASCII2STACK
00003746  6000 009A               3963            BRA     GET_SRC_SUCCESS
0000374A                          3964  
0000374A                          3965  CHECK_LONG
0000374A  41F9 0000457A           3966            LEA     TEMP_REGISTER_FORMAT,A0
00003750  1439 00004579           3967            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003756  1082                    3968            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003758  0239 0040 0000457A      3969            ANDI.B  #$40,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00003760  0C39 0040 0000457A      3970            CMPI.B  #$40,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003768  6700 002E               3971            BEQ     CHECK_IMMEDIATE                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
0000376C  0C06 0001               3972            CMPI.B  #1,D6                          
00003770  6600 0026               3973            BNE     CHECK_IMMEDIATE  
00003774                          3974  
00003774                          3975            *IT IS A WORD AT THIS POINT*
00003774                          3976            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003774  163C 0020               3977            MOVE.B    #' ',D3
00003778  6100 04D8               3978            BSR       PUSH_STACK
0000377C  163C 0024               3979            MOVE.B    #'$',D3
00003780  6100 04D0               3980            BSR       PUSH_STACK
00003784  321D                    3981            MOVE.W    (A5)+,D1
00003786  7404                    3982            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003788  6100 DA92               3983            BSR       HEX2ASCII2STACK
0000378C  321D                    3984            MOVE.W    (A5)+,D1
0000378E  7404                    3985            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003790  6100 DA8A               3986            BSR       HEX2ASCII2STACK
00003794  6000 004C               3987            BRA     GET_SRC_SUCCESS
00003798                          3988            
00003798                          3989  CHECK_IMMEDIATE
00003798  41F9 0000457A           3990            LEA     TEMP_REGISTER_FORMAT,A0
0000379E  1439 00004579           3991            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000037A4  1082                    3992            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000037A6  0239 0080 0000457A      3993            ANDI.B  #$80,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
000037AE  0C39 0080 0000457A      3994            CMPI.B  #$80,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
000037B6  6700 0026               3995            BEQ     GET_SRC_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
000037BA  0C06 0004               3996            CMPI.B  #4,D6                          
000037BE  6600 001E               3997            BNE     GET_SRC_FAILED 
000037C2                          3998  
000037C2                          3999            *IT IS A WORD AT THIS POINT*
000037C2                          4000            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000037C2  163C 0020               4001            MOVE.B    #' ',D3
000037C6  6100 048A               4002            BSR       PUSH_STACK
000037CA  163C 0023               4003            MOVE.B    #'#',D3
000037CE  6100 0482               4004            BSR       PUSH_STACK
000037D2  321D                    4005            MOVE.W    (A5)+,D1
000037D4  7404                    4006            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
000037D6  6100 DA44               4007            BSR       HEX2ASCII2STACK
000037DA  6000 0006               4008            BRA     GET_SRC_SUCCESS
000037DE                          4009            
000037DE                          4010  GET_SRC_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
000037DE  7801                    4011            MOVE.L #1,D4
000037E0  4E75                    4012            RTS
000037E2                          4013  GET_SRC_SUCCESS 
000037E2  4E75                    4014            RTS
000037E4                          4015                                 
000037E4                          4016      
000037E4                          4017  
000037E4                          4018  
000037E4                          4019  
000037E4                          4020  
000037E4                          4021  
000037E4                          4022  
000037E4                          4023  GET_EA_EA_DEST
000037E4                          4024  *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
000037E4                          4025      
000037E4                          4026      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
000037E4  2405                    4027      MOVE.L  D5,D2                           * CLEAN COPY TO D2
000037E6  EC8A                    4028      LSR.L   #6,D2                           * [D2] Temporarily used D2 for shifting bits                *TODO: DYNAMIC MODE LOCATION
000037E8  23C2 0000458A           4029      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
000037EE  7407                    4030      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
000037F0  C5B9 0000458A           4031      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
000037F6                          4032                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
000037F6                          4033      
000037F6                          4034      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
000037F6                          4035      *DESTINATION REGISTER FORMAT STANDARD         *
000037F6                          4036      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
000037F6                          4037      *WHEN BIT = 0(VALID ADDRESS MODE)             *
000037F6                          4038      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
000037F6                          4039      *0 - Dn                                       *
000037F6                          4040      *1 - An                                       *
000037F6                          4041      *2 - (An)                                     *
000037F6                          4042      *3 - (An)+                                    *
000037F6                          4043      *4 - -(An)                                    *
000037F6                          4044      *5 - (XXX).W                                  *
000037F6                          4045      *6 - (XXX).L                                  *
000037F6                          4046      *7 - #<data>                                  *
000037F6                          4047      ***********************************************
000037F6                          4048      
000037F6                          4049      *** Check if source ...  <ea> = Dn
000037F6                          4050  DEST_CHECK0    
000037F6  41F9 0000457A           4051            LEA     TEMP_REGISTER_FORMAT,A0
000037FC  1439 00004578           4052            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003802  1082                    4053            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003804  0239 0001 0000457A      4054            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
0000380C  0C39 0001 0000457A      4055            CMPI.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
00003814  6700 006A               4056            BEQ     DEST_CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00003818  0CB9 00000000 0000458A  4057            CMPI.L     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn) - COMPARE MODES TO SEE IF IT IS THIS MODE
00003822  6600 005C               4058            BNE     DEST_CHECK1
00003826                          4059            
00003826                          4060            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003826  163C 0020               4061            MOVE.B    #' ',D3
0000382A  6100 0426               4062            BSR       PUSH_STACK
0000382E  163C 0044               4063            MOVE.B    #'D',D3
00003832  6100 041E               4064            BSR       PUSH_STACK
00003836                          4065  
00003836                          4066            *FIND REGISTER NUMBER END LOCATION*  
00003836  13F9 0000457B 00004582  4067            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00003840  0239 000F 00004582      4068            AND.B   #$0F,VAR_BYTE_END
00003848                          4069            
00003848                          4070            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003848  23C5 00004586           4071            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
0000384E  1439 00004582           4072            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003854                          4073            
00003854                          4074            *INTITIALIZE FOR BIT SHIFTING
00003854  41F9 00004586           4075            LEA     VAR_TEMP_CLEANCOPY,A0
0000385A  2639 00004586           4076            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003860                          4077  DEST_LOOP_SHIFTING
00003860  0C02 0000               4078            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003864  6700 0008               4079            BEQ     DEST_MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00003868  E24B                    4080            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
0000386A  5302                    4081            SUB.B   #1,D2                     *DECREMENT COUNTER
0000386C  60F2                    4082            BRA     DEST_LOOP_SHIFTING             *CONTINUE SHIFTING
0000386E                          4083  DEST_MASKING_NEXT
0000386E  C6BC 00000007           4084            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003874  0603 0030               4085            ADD.B   #$30,D3                   *CONVERT TO CHAR
00003878  6100 03D8               4086            BSR     PUSH_STACK                *PUSH TO STACK
0000387C                          4087            
0000387C  6000 0394               4088            BRA     GET_DST_SUCCESS           *RETURN          
00003880                          4089            
00003880                          4090            
00003880                          4091            *** Check if source ...  <ea> = An
00003880                          4092  DEST_CHECK1    
00003880  41F9 0000457A           4093            LEA     TEMP_REGISTER_FORMAT,A0
00003886  1439 00004578           4094            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000388C  1082                    4095            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000388E  0239 0002 0000457A      4096            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
00003896  0C39 0002 0000457A      4097            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
0000389E  6700 006A               4098            BEQ     DEST_CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
000038A2  0CB9 00000001 0000458A  4099            CMPI.L  #1,VAR_LONG_ADDRESS_MODE_CHECK                      * An - COMPARE MODES TO SEE IF IT IS THIS MODE
000038AC  6600 005C               4100            BNE     DEST_CHECK2
000038B0                          4101            
000038B0                          4102            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000038B0  163C 0020               4103            MOVE.B    #' ',D3
000038B4  6100 039C               4104            BSR       PUSH_STACK
000038B8  163C 0041               4105            MOVE.B    #'A',D3
000038BC  6100 0394               4106            BSR       PUSH_STACK
000038C0                          4107  
000038C0                          4108            
000038C0                          4109            *FIND REGISTER NUMBER END LOCATION*  
000038C0  13F9 0000457B 00004582  4110            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
000038CA  0239 000F 00004582      4111            AND.B   #$0F,VAR_BYTE_END
000038D2                          4112            
000038D2                          4113            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000038D2  23C5 00004586           4114            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000038D8  1439 00004582           4115            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
000038DE                          4116            
000038DE                          4117            *INTITIALIZE FOR BIT SHIFTING
000038DE  41F9 00004586           4118            LEA     VAR_TEMP_CLEANCOPY,A0
000038E4  2639 00004586           4119            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000038EA                          4120  DEST_LOOP_SHIFTING1
000038EA  0C02 0000               4121            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000038EE  6700 0008               4122            BEQ     DEST_MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
000038F2  E24B                    4123            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000038F4  5302                    4124            SUB.B   #1,D2                     *DECREMENT COUNTER
000038F6  60F2                    4125            BRA     DEST_LOOP_SHIFTING1             *CONTINUE SHIFTING
000038F8                          4126  DEST_MASKING_NEXT1
000038F8  C6BC 00000007           4127            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000038FE  0603 0030               4128            ADD.B   #$30,D3                   *CONVERT TO CHAR
00003902  6100 034E               4129            BSR     PUSH_STACK                *PUSH TO STACK
00003906                          4130            
00003906  6000 030A               4131            BRA     GET_DST_SUCCESS                   *RETURN 
0000390A                          4132            
0000390A                          4133            
0000390A                          4134            
0000390A                          4135            
0000390A                          4136            *** Check if source ...  <ea> = (An)       
0000390A                          4137  DEST_CHECK2    
0000390A  41F9 0000457A           4138            LEA     TEMP_REGISTER_FORMAT,A0
00003910  1439 00004578           4139            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003916  1082                    4140            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003918  0239 0004 0000457A      4141            ANDI.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
00003920  0C39 0004 0000457A      4142            CMPI.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
00003928  6700 007A               4143            BEQ     DEST_CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
0000392C  0CB9 00000002 0000458A  4144            CMPI.L   #2,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)  COMPARE MODES TO SEE IF IT IS THIS MODE                                                                *change: checkx++*
00003936  6600 006C               4145            BNE     DEST_CHECK3
0000393A                          4146            
0000393A                          4147            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
0000393A  163C 0020               4148            MOVE.B    #' ',D3
0000393E  6100 0312               4149            BSR       PUSH_STACK
00003942  163C 0028               4150            MOVE.B    #'(',D3
00003946  6100 030A               4151            BSR       PUSH_STACK
0000394A  163C 0041               4152            MOVE.B    #'A',D3
0000394E  6100 0302               4153            BSR       PUSH_STACK
00003952                          4154  
00003952                          4155            
00003952                          4156            *FIND REGISTER NUMBER END LOCATION*  
00003952  13F9 0000457B 00004582  4157            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
0000395C  0239 000F 00004582      4158            AND.B   #$0F,VAR_BYTE_END
00003964                          4159            
00003964                          4160            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003964  23C5 00004586           4161            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
0000396A  1439 00004582           4162            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003970                          4163            
00003970                          4164            *INTITIALIZE FOR BIT SHIFTING
00003970  41F9 00004586           4165            LEA     VAR_TEMP_CLEANCOPY,A0
00003976  2639 00004586           4166            MOVE.L  VAR_TEMP_CLEANCOPY,D3
0000397C                          4167  DEST_LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
0000397C  0C02 0000               4168            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003980  6700 0008               4169            BEQ     DEST_MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00003984  E24B                    4170            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003986  5302                    4171            SUB.B   #1,D2                     *DECREMENT COUNTER
00003988  60F2                    4172            BRA     DEST_LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
0000398A                          4173  DEST_MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
0000398A  0283 00000007           4174            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003990  0603 0030               4175            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00003994  6100 02BC               4176            BSR     PUSH_STACK                *PUSH TO STACK
00003998                          4177            
00003998  163C 0029               4178            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
0000399C  6100 02B4               4179            BSR       PUSH_STACK
000039A0                          4180            
000039A0  6000 0270               4181            BRA     GET_DST_SUCCESS                   *RETURN 
000039A4                          4182  
000039A4                          4183            
000039A4                          4184            
000039A4                          4185                      
000039A4                          4186  *** Check if source ...  <ea> = (An)+       
000039A4  41F9 0000457A           4187  DEST_CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
000039AA  1439 00004578           4188            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000039B0  1082                    4189            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000039B2  0239 0008 0000457A      4190            ANDI.B  #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
000039BA  0C39 0008 0000457A      4191            CMPI.B  #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
000039C2  6700 0082               4192            BEQ     DEST_CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
000039C6  0CB9 00000003 0000458A  4193            CMPI.L  #3,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)+ - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
000039D0  6600 0074               4194            BNE     DEST_CHECK4
000039D4                          4195            
000039D4                          4196            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
000039D4  163C 0020               4197            MOVE.B    #' ',D3
000039D8  6100 0278               4198            BSR       PUSH_STACK
000039DC  163C 0028               4199            MOVE.B    #'(',D3
000039E0  6100 0270               4200            BSR       PUSH_STACK
000039E4  163C 0041               4201            MOVE.B    #'A',D3
000039E8  6100 0268               4202            BSR       PUSH_STACK
000039EC                          4203  
000039EC                          4204            
000039EC                          4205            *FIND REGISTER NUMBER END LOCATION*  
000039EC  13F9 0000457B 00004582  4206            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
000039F6  0239 000F 00004582      4207            ANDI.B   #$0F,VAR_BYTE_END
000039FE                          4208            
000039FE                          4209            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000039FE  23C5 00004586           4210            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003A04  1439 00004582           4211            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003A0A                          4212            
00003A0A                          4213            *INTITIALIZE FOR BIT SHIFTING
00003A0A  41F9 00004586           4214            LEA     VAR_TEMP_CLEANCOPY,A0
00003A10  2639 00004586           4215            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003A16                          4216            
00003A16                          4217  DEST_LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
00003A16  0C02 0000               4218            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003A1A  6700 0008               4219            BEQ     DEST_MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00003A1E  E24B                    4220            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003A20  5302                    4221            SUBI.B   #1,D2                     *DECREMENT COUNTER
00003A22  60F2                    4222            BRA     DEST_LOOP_SHIFTING3            *CONTINUE SHIFTING 
00003A24                          4223                                               *change: NAME OF LABEL*
00003A24                          4224  DEST_MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
00003A24  0283 00000007           4225            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003A2A  0603 0030               4226            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00003A2E  6100 0222               4227            BSR     PUSH_STACK                *PUSH TO STACK
00003A32                          4228            
00003A32  163C 0029               4229            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003A36  6100 021A               4230            BSR       PUSH_STACK
00003A3A  163C 002B               4231            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003A3E  6100 0212               4232            BSR       PUSH_STACK
00003A42                          4233            
00003A42  6000 01CE               4234            BRA       GET_DST_SUCCESS                   *RETURN 
00003A46                          4235  
00003A46                          4236            
00003A46                          4237            
00003A46                          4238                      
00003A46                          4239            *** Check if source ...  <ea> = -(An)       
00003A46                          4240  DEST_CHECK4    
00003A46  41F9 0000457A           4241            LEA     TEMP_REGISTER_FORMAT,A0
00003A4C  1439 00004578           4242            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003A52  1082                    4243            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003A54  0239 0010 0000457A      4244            ANDI.B  #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
00003A5C  0C39 0010 0000457A      4245            CMPI.B  #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003A64  6700 0082               4246            BEQ     DEST_CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00003A68  0CB9 00000004 0000458A  4247            CMPI.L  #4,VAR_LONG_ADDRESS_MODE_CHECK                      * -(An) - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00003A72  6600 0074               4248            BNE     DEST_CHECK7
00003A76                          4249            
00003A76                          4250            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00003A76  163C 0020               4251            MOVE.B    #' ',D3
00003A7A  6100 01D6               4252            BSR       PUSH_STACK
00003A7E  163C 002D               4253            MOVE.B    #'-',D3
00003A82  6100 01CE               4254            BSR       PUSH_STACK
00003A86  163C 0028               4255            MOVE.B    #'(',D3
00003A8A  6100 01C6               4256            BSR       PUSH_STACK
00003A8E  163C 0041               4257            MOVE.B    #'A',D3
00003A92  6100 01BE               4258            BSR       PUSH_STACK
00003A96                          4259  
00003A96                          4260            
00003A96                          4261            *FIND REGISTER NUMBER END LOCATION*  
00003A96  13F9 0000457B 00004582  4262            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00003AA0  0239 000F 00004582      4263            AND.B   #$0F,VAR_BYTE_END
00003AA8                          4264            
00003AA8                          4265            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003AA8  23C5 00004586           4266            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003AAE  1439 00004582           4267            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003AB4                          4268            
00003AB4                          4269            *INTITIALIZE FOR BIT SHIFTING
00003AB4  41F9 00004586           4270            LEA     VAR_TEMP_CLEANCOPY,A0
00003ABA  2639 00004586           4271            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003AC0                          4272            
00003AC0                          4273  DEST_LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
00003AC0  0C02 0000               4274            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003AC4  6700 0008               4275            BEQ     DEST_MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00003AC8  E24B                    4276            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003ACA  5302                    4277            SUBI.B   #1,D2                     *DECREMENT COUNTER
00003ACC  60F2                    4278            BRA     DEST_LOOP_SHIFTING4            *CONTINUE SHIFTING 
00003ACE                          4279                                               *change: NAME OF LABEL*
00003ACE                          4280  DEST_MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
00003ACE  0283 00000007           4281            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003AD4  0603 0030               4282            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00003AD8  6100 0178               4283            BSR     PUSH_STACK                *PUSH TO STACK
00003ADC                          4284            
00003ADC  163C 0029               4285            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003AE0  6100 0170               4286            BSR       PUSH_STACK
00003AE4                          4287            
00003AE4  6000 012C               4288            BRA     GET_DST_SUCCESS                   *RETURN
00003AE8                          4289            
00003AE8                          4290                      
00003AE8                          4291            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
00003AE8                          4292  DEST_CHECK7    
00003AE8  0CB9 00000007 0000458A  4293            CMPI.L  #7,VAR_LONG_ADDRESS_MODE_CHECK                      *IF (MODE != 111)
00003AF2  6600 011A               4294            BNE     GET_DST_FAILED                                      *THAN BRANCH TO UNCESSFULL SRC MODE READ
00003AF6                          4295                   
00003AF6                          4296            *NEXT: (MODE == 111) 
00003AF6                          4297            *NOW: CHECK FOR SRC REGISTER 
00003AF6                          4298                  *(000 = (xxx).W)
00003AF6                          4299                  *(001 = (xxx).L)
00003AF6                          4300                  *(010 = #<data>)
00003AF6                          4301                  
00003AF6                          4302            *FIND REGISTER NUMBER END LOCATION*  
00003AF6  13F9 0000457B 00004582  4303            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00003B00  0239 000F 00004582      4304            AND.B   #$0F,VAR_BYTE_END
00003B08                          4305            
00003B08                          4306            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003B08  23C5 00004586           4307            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003B0E  1439 00004582           4308            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003B14                          4309            
00003B14                          4310            *INTITIALIZE FOR BIT SHIFTING
00003B14  41F9 00004586           4311            LEA     VAR_TEMP_CLEANCOPY,A0
00003B1A  2C39 00004586           4312            MOVE.L  VAR_TEMP_CLEANCOPY,D6
00003B20                          4313  DEST_LOOP_SHIFTING7
00003B20  0C02 0000               4314            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003B24  6700 0008               4315            BEQ     DEST_MASKING_NEXT7              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00003B28  E24E                    4316            LSR     #1,D6                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003B2A  5302                    4317            SUB.B   #1,D2                     *DECREMENT COUNTER
00003B2C  60F2                    4318            BRA     DEST_LOOP_SHIFTING7             *CONTINUE SHIFTING
00003B2E                          4319  DEST_MASKING_NEXT7
00003B2E  CCBC 00000007           4320            AND.L   #7,D6                     *MASK, ONLY NEED 0-2 BIT INDEXES 
00003B34                          4321           *D3 - REGISTER NUMBER NEEDED TO CHECK WHICH W/L/#<DATA>*
00003B34                          4322            
00003B34                          4323  DEST_CHECK_WORD  
00003B34  41F9 0000457A           4324            LEA     TEMP_REGISTER_FORMAT,A0
00003B3A  1439 00004578           4325            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003B40  1082                    4326            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003B42  0239 0020 0000457A      4327            ANDI.B  #$20,TEMP_REGISTER_FORMAT                           * MASKS 0010 0000                                                     *change <SRC>*
00003B4A  0C39 0020 0000457A      4328            CMPI.B  #$20,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0010 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003B52  6700 0026               4329            BEQ     DEST_CHECK_LONG                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00003B56  0C06 0000               4330            CMPI.B  #0,D6                                                   *COMPARE REGISTER NUMBER WITH (000 == 000) FOR WORD
00003B5A  6600 001E               4331            BNE     DEST_CHECK_LONG                                      * THE REGISTER NUMBER DOESN'T MATCH "(XXX).W" -> SO MOVE ON       
00003B5E                          4332            *IT IS A WORD AT THIS POINT*
00003B5E                          4333            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003B5E  163C 0020               4334            MOVE.B    #' ',D3
00003B62  6100 00EE               4335            BSR       PUSH_STACK
00003B66  163C 0024               4336            MOVE.B    #'$',D3
00003B6A  6100 00E6               4337            BSR       PUSH_STACK
00003B6E  321D                    4338            MOVE.W    (A5)+,D1
00003B70  7404                    4339            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003B72  6100 D6A8               4340            BSR       HEX2ASCII2STACK
00003B76  6000 009A               4341            BRA       GET_DST_SUCCESS
00003B7A                          4342  
00003B7A                          4343  DEST_CHECK_LONG
00003B7A  41F9 0000457A           4344            LEA     TEMP_REGISTER_FORMAT,A0
00003B80  1439 00004578           4345            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003B86  1082                    4346            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003B88  0239 0040 0000457A      4347            ANDI.B  #$40,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00003B90  0C39 0040 0000457A      4348            CMPI.B  #$40,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003B98  6700 002E               4349            BEQ     DEST_CHECK_IMMEDIATE                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00003B9C  0C06 0001               4350            CMPI.B  #1,D6                                                   *COMPARE REGISTER NUMBER WITH (001 == 001) FOR WORD
00003BA0  6600 0026               4351            BNE     DEST_CHECK_IMMEDIATE                                      * THE REGISTER NUMBER DOESN'T MATCH "(XXX).L" -> SO MOVE ON 
00003BA4                          4352            *IT IS A WORD AT THIS POINT*
00003BA4                          4353            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003BA4  163C 0020               4354            MOVE.B    #' ',D3
00003BA8  6100 00A8               4355            BSR       PUSH_STACK
00003BAC  163C 0024               4356            MOVE.B    #'$',D3
00003BB0  6100 00A0               4357            BSR       PUSH_STACK
00003BB4  321D                    4358            MOVE.W    (A5)+,D1        * GET NEXT WORD INTO STACK
00003BB6  7404                    4359            MOVE.L    #4,D2           * SETS SIZE = 4 FOR CONVERSION TO ASCII
00003BB8  6100 D662               4360            BSR       HEX2ASCII2STACK
00003BBC  321D                    4361            MOVE.W    (A5)+,D1        * GET NEXT WORD INTO STACK
00003BBE  7404                    4362            MOVE.L    #4,D2          
00003BC0  6100 D65A               4363            BSR       HEX2ASCII2STACK
00003BC4  6000 004C               4364            BRA     GET_DST_SUCCESS
00003BC8                          4365            
00003BC8                          4366  DEST_CHECK_IMMEDIATE
00003BC8  41F9 0000457A           4367            LEA     TEMP_REGISTER_FORMAT,A0
00003BCE  1439 00004578           4368            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003BD4  1082                    4369            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003BD6  0239 0080 0000457A      4370            ANDI.B  #$80,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00003BDE  0C39 0080 0000457A      4371            CMPI.B  #$80,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003BE6  6700 0026               4372            BEQ     GET_DST_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00003BEA  0C06 0004               4373            CMPI.B  #4,D6                                               * COMPARE REGISTER NUMBER WITH (010 == 010) FOR WORD
00003BEE  6600 001E               4374            BNE     GET_DST_FAILED                                      * THE REGISTER NUMBER DOESN'T MATCH "#<DATA>" -> SO MOVE ON 
00003BF2                          4375            
00003BF2                          4376            *IT IS A WORD AT THIS POINT*
00003BF2                          4377            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003BF2  163C 0020               4378            MOVE.B    #' ',D3
00003BF6  6100 005A               4379            BSR       PUSH_STACK
00003BFA  163C 0023               4380            MOVE.B    #'#',D3
00003BFE  6100 0052               4381            BSR       PUSH_STACK
00003C02  321D                    4382            MOVE.W    (A5)+,D1
00003C04  7404                    4383            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003C06  6100 D614               4384            BSR       HEX2ASCII2STACK
00003C0A  6000 0006               4385            BRA       GET_DST_SUCCESS
00003C0E                          4386            
00003C0E                          4387  GET_DST_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
00003C0E  7801                    4388            MOVE.L #1,D4
00003C10  4E75                    4389            RTS
00003C12                          4390  GET_DST_SUCCESS 
00003C12  4E75                    4391            RTS
00003C14                          4392  
00003C14                          4393  
00003C14                          4394  *---------------------------------------------------------------------------*
00003C14                          4395  * STACK/QUEUE INTERFACE
00003C14                          4396  *---------------------------------------------------------------------------*
00003C14                          4397  PRINT_STACK
00003C14  0C39 0000 00004574      4398            CMP.B     #0,COUNTER
00003C1C  6700 000E               4399            BEQ       PRINT_STACK_RETURN             *CHECK IF LOOP IS FINISHED
00003C20                          4400            
00003C20                          4401  PRINT_STACK_HELPER
00003C20  6100 0038               4402            BSR      POP_STACK          *PRINTS ADDRESS
00003C24  103C 0006               4403            MOVE.B   #6,D0              *Display single character in D1.B. 
00003C28  4E4F                    4404            TRAP     #15             *ACTIVATES PRINT
00003C2A                          4405  
00003C2A  60E8                    4406            BRA       PRINT_STACK
00003C2C                          4407  PRINT_STACK_RETURN
00003C2C  4E75                    4408            RTS
00003C2E                          4409            
00003C2E                          4410            
00003C2E                          4411  PRINT_QUEUE
00003C2E  0C39 0000 00004574      4412            CMP.B     #0,COUNTER
00003C36  6700 0018               4413            BEQ       PRINT_QUEUE_RETURN             *CHECK IF LOOP IS FINISHED
00003C3A                          4414            
00003C3A                          4415  PRINT_QUEUE_HELPER
00003C3A  33F9 00004574 00004576  4416            MOVE.W   COUNTER,QUEUE_COUNTER
00003C44  6100 0022               4417            BSR      POP_FRONT          *PRINTS ADDRESS
00003C48  103C 0006               4418            MOVE.B   #6,D0              *Display single character in D1.B. 
00003C4C  4E4F                    4419            TRAP     #15             *ACTIVATES PRINT
00003C4E                          4420  
00003C4E  60DE                    4421            BRA       PRINT_QUEUE
00003C50                          4422  PRINT_QUEUE_RETURN
00003C50  4E75                    4423            RTS
00003C52                          4424            
00003C52                          4425  *PUSHES.W CONTENTS OF [D3] INTO STACK          
00003C52                          4426  PUSH_STACK
00003C52  1503                    4427              MOVE.B  D3,-(A2)
00003C54  6100 0058               4428              BSR     INCREMENT
00003C58  4E75                    4429              RTS
00003C5A                          4430  *POPS.W TOP OF STACK INTO [D1], SO ITS READY TO PRINT WITH TRAP 15
00003C5A                          4431  *         MOVE.W   (A2)+,D1           *PRINTS ADDRESS
00003C5A                          4432  *         MOVE.B   #15,D0             *PRINTS ACCORDING TO D2 BASE VALUE
00003C5A                          4433  *         MOVE.B   #16,D2             *PRINTS BASED 16 NUMBER
00003C5A                          4434  *         TRAP        #15             *ACTIVATES PRINT
00003C5A                          4435  POP_STACK
00003C5A  BECA                    4436              CMPA.W   A2,SP            *CHECKS IF THERE IS ANYTHING TO PUSH
00003C5C  6700 0008               4437              BEQ     POP_RETURN        *IF NOTHING TO PUSH THAN JUST RETURN
00003C60  121A                    4438              MOVE.B  (A2)+,D1 
00003C62  6100 0052               4439              BSR     DECREMENT
00003C66                          4440  POP_RETURN
00003C66  4E75                    4441              RTS 
00003C68                          4442        
00003C68                          4443  *USE [A4] AS SECOND POINTER IN SHIFTING      
00003C68  0C39 0000 00004576      4444  POP_FRONT   CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
00003C70  6700 0030               4445              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
00003C74                          4446              
00003C74                          4447              
00003C74                          4448              *POSITION THE POINTERS A[4] RIGHT BEHIND A[2] WHICH IS RIGHT BEHIND STACK
00003C74  347C 7000               4449              MOVEA.W #STACK,A2   *START A2 AT STACK
00003C78  0622 0000               4450              ADD.B   #0,-(A2)    *SHIFT A2 TO THE BOTTOM OF THE STACK
00003C7C  384A                    4451              MOVEA.W A2,A4     *START A4 RIGHT ABOVE A2
00003C7E  0624 0000               4452              ADD.B   #0,-(A4)  *leash one more higher in stack (a4)
00003C82  1212                    4453              MOVE.B  (A2),D1     *POP CONTENTS INTO D1
00003C84                          4454  POP_SHIFT_LOOP
00003C84  0C39 0000 00004576      4455              CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
00003C8C  6700 0014               4456              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
00003C90  1494                    4457              MOVE.B  (A4),(A2)   *SHIFT CONTENT DOWN THE STACK
00003C92  0624 0000               4458              ADD.B   #0,-(A4)
00003C96  0622 0000               4459              ADD.B   #0,-(A2) *SHIFT POINTERS DOWN THE STACK
00003C9A  5339 00004576           4460              SUB.B   #1,QUEUE_COUNTER *DECREMENT INTERNAL QUEUE COUNTER
00003CA0                          4461              
00003CA0  60E2                    4462              BRA     POP_SHIFT_LOOP
00003CA2                          4463                          
00003CA2                          4464  POP_FRONT_RETURN 
00003CA2                          4465              *RESET A2 BACK TO SP
00003CA2  347C 7000               4466              MOVEA.W #STACK,A2    
00003CA6  5339 00004574           4467              SUB.B   #1,COUNTER *DECREMENT STACK COUNTER       
00003CAC  4E75                    4468              RTS   
00003CAE                          4469  
00003CAE                          4470  INCREMENT
00003CAE  5239 00004574           4471              ADD.B   #1, COUNTER
00003CB4  4E75                    4472              RTS           
00003CB6                          4473  DECREMENT
00003CB6  5339 00004574           4474              SUB.B   #1, COUNTER
00003CBC  4E75                    4475              RTS           
00003CBE                          4476  CLEAR_STACK
00003CBE  0C39 0000 00004574      4477              CMP.B     #0,COUNTER
00003CC6  6700 0006               4478              BEQ       CLEAR_RETURN
00003CCA  618E                    4479              BSR       POP_STACK
00003CCC  60F0                    4480              BRA       CLEAR_STACK
00003CCE                          4481   
00003CCE                          4482  CLEAR_RETURN
00003CCE  4E75                    4483              RTS    
00003CD0                          4484  *---------------------------------------------------------------------------*
00003CD0                          4485  * TERMINATE
00003CD0                          4486  *---------------------------------------------------------------------------*
00003CD0                          4487  TERMINATE   
00003CD0  43F9 00004080           4488              LEA     FINMSG,A1
00003CD6  103C 000E               4489              MOVE.B  #14,D0
00003CDA  4E4F                    4490              TRAP    #15
00003CDC                          4491  
00003CDC  103C 0009               4492              MOVE.B  #9,D0
00003CE0  4E4F                    4493              TRAP    #15
00003CE2                          4494  
00003CE2                          4495  *---------------------------------------------------------------------------*
00003CE2                          4496  * Data storage                                                 
00003CE2                          4497  *---------------------------------------------------------------------------*  
00003CE2                          4498  WELCOME
00003CE2= 20 20 20 20 20 20 ...   4499              DC.B '                         ___     ___ ___        ___   ___ ___                 ',CR,LF
00003D32= 3D 3D 3D 3D 3D 20 ...   4500              DC.B '=====           \  /\  /|___|   |   |   ||\  /||___    | |   |           =====',CR,LF
00003D82= 3D 3D 3D 3D 3D 20 ...   4501              DC.B '=====            \/  \/ |___|___|___|___|| \/ ||___    | |___|           =====',CR,LF
00003DD2                          4502      
00003DD2= 20 20 20 20 20 20 ...   4503              DC.B '                        ___ ___ ___  ___      ___                             ',CR,LF
00003E22= 20 20 20 20 20 20 ...   4504              DC.B '                       |     | |___)|    |   |___                             ',CR,LF 
00003E72= 20 20 20 20 20 20 ...   4505              DC.B '                       |___ _|_|\___|___ |___|___                             ',CR,LF
00003EC2                          4506      
00003EC2= 20 20 20 20 20 20 ...   4507              DC.B '           __  ___ ___   _   ___  ___  ___        ___      ___ ___            ',CR,LF
00003F12= 3D 3D 3D 3D 3D 20 ...   4508              DC.B '=====     |  \  | |___  /_\ |___ |___ |___ |\  /||___||   |___|___)      =====',CR,LF 
00003F62= 3D 3D 3D 3D 3D 20 ...   4509              DC.B '=====     |__/ _|_ ___|/   \ ___| ___||___ | \/ ||___||___|___|\___      =====',CR,LF,CR,LF,CR,LF,0
00003FB7                          4510  
00003FB7                          4511  PROMPT_START
00003FB7= 50 6C 65 61 73 65 ...   4512              DC.B    'Please enter a hexadecimal starting address.',CR,LF,0
00003FE6                          4513      
00003FE6                          4514  PROMPT_END
00003FE6= 50 6C 65 61 73 65 ...   4515              DC.B    'Please enter a hexadecimal ending address.',CR,LF,0
00004013= 0D 0A 48 69 74 20 ...   4516  DISP_NEXT   DC.B    CR,LF,'Hit Enter to print the next 30 lines.',CR,LF,0            
0000403D= 57 6F 75 6C 64 20 ...   4517  REPEATMSG   DC.B    'Would you like to run again? Press Y to continue or N to finish.',CR,LF,0
00004080= 54 68 61 6E 6B 20 ...   4518  FINMSG      DC.B    'Thank you for using Circle Disassembler.',CR,LF,0
000040AB= 45 72 72 6F 72 3A ...   4519  ERRMSG_1    DC.B    'Error: Invalid Input Address',CR,LF,0
000040CA= 45 72 72 6F 72 3A ...   4520  ERRMSG_3    DC.B    'Error: Invalid Input Address (Odd)',CR,LF,0
000040EF= 45 72 72 6F 72 3A ...   4521  ERRMSG_5    DC.B    'Error: Invalid Input Address (start > end)',CR,LF,0
0000411C                          4522  
0000411C                          4523  VR_S_ADDR   DS.B    80                      * allocate storage space for the starting address
0000416C                          4524  VR_E_ADDR   DS.B    80                      * allocate storage space for the ending address
000041BC                          4525  S_ADDR_HX   DS.L    1                       * allocate storage space for the starting address in hex
000041C0                          4526  E_ADDR_HX   DS.L    1                       * allocate storage space for the ending address in hex
000041C4= 0D 0A 00                4527  ENDLINE_M   DC.B    CR,LF,0
000041C7                          4528  TMPINPUT    DS.B    80                      * temp store user input
00004217                          4529  TMPOUTPUT   DS.B    80                      * temp store prog output
00004267= 20 20 20 4F 52 49 ...   4530  DISP_ORI_B  DC.B    '   ORI.B',0
00004270= 20 20 20 4F 52 49 ...   4531  DISP_ORI_W  DC.B    '   ORI.W',0
00004279= 20 20 20 4F 52 49 ...   4532  DISP_ORI_L  DC.B    '   ORI.L',0
00004282= 20 20 20 45 4F 52 ...   4533  DISP_EORI_B  DC.B    '   EORI.B',0
0000428C= 20 20 20 45 4F 52 ...   4534  DISP_EORI_W  DC.B    '   EORI.W',0
00004296= 20 20 20 45 4F 52 ...   4535  DISP_EORI_L  DC.B    '   EORI.L',0
000042A0= 20 20 20 42 54 53 ...   4536  DISP_BTST   DC.B    '   BTST',0
000042A8= 20 20 20 43 4D 50 ...   4537  DISP_CMPI_B  DC.B    '   CMPI.B',0
000042B2= 20 20 20 43 4D 50 ...   4538  DISP_CMPI_W  DC.B    '   CMPI.W',0
000042BC= 20 20 20 43 4D 50 ...   4539  DISP_CMPI_L  DC.B    '   CMPI.L',0
000042C6= 20 20 20 44 41 54 ...   4540  DISP_DATA   DC.B    '   DATA',0
000042CE= 20 20 20 4D 4F 56 ...   4541  DISP_MOVE_B DC.B    '   MOVE.B',0
000042D8= 20 20 20 4D 4F 56 ...   4542  DISP_MOVE_W DC.B    '   MOVE.W',0
000042E2= 20 20 20 4D 4F 56 ...   4543  DISP_MOVE_L DC.B    '   MOVE.L',0
000042EC= 20 20 20 52 54 53 00    4544  DISP_RTS    DC.B    '   RTS',0
000042F3= 20 20 20 4A 53 52 00    4545  DISP_JSR    DC.B    '   JSR',0
000042FA= 20 20 20 4E 45 47 ...   4546  DISP_NEG_B    DC.B    '   NEG.B',0
00004303= 20 20 20 4E 45 47 ...   4547  DISP_NEG_W    DC.B    '   NEG.W',0
0000430C= 20 20 20 4E 45 47 ...   4548  DISP_NEG_L    DC.B    '   NEG.L',0
00004315= 20 20 20 4E 4F 54 ...   4549  DISP_NOT_B  DC.B    '   NOT.B',0
0000431E= 20 20 20 4E 4F 54 ...   4550  DISP_NOT_W  DC.B    '   NOT.W',0
00004327= 20 20 20 4E 4F 54 ...   4551  DISP_NOT_L  DC.B    '   NOT.L',0
00004330= 20 20 20 4C 45 41 00    4552  DISP_LEA    DC.B    '   LEA',0
00004337= 20 20 20 4D 4F 56 ...   4553  DISP_MOVEM_W    DC.B    '   MOVEM.W',0
00004342= 20 20 20 4D 4F 56 ...   4554  DISP_MOVEM_L    DC.B    '   MOVEM.L',0
0000434D= 20 20 20 41 44 44 ...   4555  DISP_ADDQ_B DC.B    '   ADDQ.B',0
00004357= 20 20 20 41 44 44 ...   4556  DISP_ADDQ_W DC.B    '   ADDQ.W',0
00004361= 20 20 20 41 44 44 ...   4557  DISP_ADDQ_L DC.B    '   ADDQ.L',0
0000436B= 20 20 20 44 49 56 ...   4558  DISP_DIVS   DC.B    '   DIVS',0
00004373= 20 20 20 53 55 42 ...   4559  DISP_SUB_B  DC.B    '   SUB.B',0
0000437C= 20 20 20 53 55 42 ...   4560  DISP_SUB_W  DC.B    '   SUB.W',0
00004385= 20 20 20 53 55 42 ...   4561  DISP_SUB_L  DC.B    '   SUB.L',0
0000438E= 20 20 20 53 55 42 ...   4562  DISP_SUBI_B  DC.B    '   SUBI.B',0
00004398= 20 20 20 53 55 42 ...   4563  DISP_SUBI_W  DC.B    '   SUBI.W',0
000043A2= 20 20 20 53 55 42 ...   4564  DISP_SUBI_L  DC.B    '   SUBI.L',0
000043AC= 20 20 20 53 55 42 ...   4565  DISP_SUBA_W  DC.B    '   SUBA.W',0
000043B6= 20 20 20 53 55 42 ...   4566  DISP_SUBA_L  DC.B    '   SUBA.L',0
000043C0= 20 20 20 45 4F 52 ...   4567  DISP_EOR_B  DC.B    '   EOR.B',0
000043C9= 20 20 20 45 4F 52 ...   4568  DISP_EOR_W  DC.B    '   EOR.W',0
000043D2= 20 20 20 45 4F 52 ...   4569  DISP_EOR_L  DC.B    '   EOR.L',0
000043DB= 20 20 20 43 4D 50 ...   4570  DISP_CMP_B  DC.B    '   CMP.B',0
000043E4= 20 20 20 43 4D 50 ...   4571  DISP_CMP_W  DC.B    '   CMP.W',0
000043ED= 20 20 20 43 4D 50 ...   4572  DISP_CMP_L  DC.B    '   CMP.L',0
000043F6= 20 20 20 43 4D 50 ...   4573  DISP_CMPA_W  DC.B    '   CMPA.W',0
00004400= 20 20 20 43 4D 50 ...   4574  DISP_CMPA_L  DC.B    '   CMPA.L',0
0000440A= 20 20 20 4D 55 4C ...   4575  DISP_MULS_W DC.B    '   MULS.W',0
00004414= 20 20 20 41 4E 44 ...   4576  DISP_AND_B  DC.B    '   AND.B',0
0000441D= 20 20 20 41 4E 44 ...   4577  DISP_AND_W  DC.B    '   AND.W',0
00004426= 20 20 20 41 4E 44 ...   4578  DISP_AND_L  DC.B    '   AND.L',0
0000442F= 20 20 20 41 44 44 ...   4579  DISP_ADD_B  DC.B    '   ADD.B',0
00004438= 20 20 20 41 44 44 ...   4580  DISP_ADD_W  DC.B    '   ADD.W',0
00004441= 20 20 20 41 44 44 ...   4581  DISP_ADD_L  DC.B    '   ADD.L',0
0000444A= 20 20 20 41 44 44 ...   4582  DISP_ADDA_W DC.B    '   ADDA.W',0
00004454= 20 20 20 41 44 44 ...   4583  DISP_ADDA_L DC.B    '   ADDA.L',0
0000445E= 20 20 20 4C 53 52 ...   4584  DISP_LSR_B  DC.B    '   LSR.B',0
00004467= 20 20 20 4C 53 4C ...   4585  DISP_LSL_B  DC.B    '   LSL.B',0
00004470= 20 20 20 4C 53 52 ...   4586  DISP_LSR_W  DC.B    '   LSR.W',0
00004479= 20 20 20 4C 53 4C ...   4587  DISP_LSL_W  DC.B    '   LSL.W',0
00004482= 20 20 20 4C 53 52 ...   4588  DISP_LSR_L  DC.B    '   LSR.L',0
0000448B= 20 20 20 4C 53 4C ...   4589  DISP_LSL_L  DC.B    '   LSL.L',0
00004494= 20 20 20 41 53 52 ...   4590  DISP_ASR_B  DC.B    '   ASR.B',0
0000449D= 20 20 20 41 53 4C ...   4591  DISP_ASL_B  DC.B    '   ASL.B',0
000044A6= 20 20 20 41 53 52 ...   4592  DISP_ASR_W  DC.B    '   ASR.W',0
000044AF= 20 20 20 41 53 4C ...   4593  DISP_ASL_W  DC.B    '   ASL.W',0
000044B8= 20 20 20 41 53 52 ...   4594  DISP_ASR_L  DC.B    '   ASR.L',0
000044C1= 20 20 20 41 53 4C ...   4595  DISP_ASL_L  DC.B    '   ASL.L',0
000044CA= 20 20 20 52 4F 52 ...   4596  DISP_ROR_B  DC.B    '   ROR.B',0
000044D3= 20 20 20 52 4F 4C ...   4597  DISP_ROL_B  DC.B    '   ROL.B',0
000044DC= 20 20 20 52 4F 52 ...   4598  DISP_ROR_W  DC.B    '   ROR.W',0
000044E5= 20 20 20 52 4F 4C ...   4599  DISP_ROL_W  DC.B    '   ROL.W',0
000044EE= 20 20 20 52 4F 52 ...   4600  DISP_ROR_L  DC.B    '   ROR.L',0
000044F7= 20 20 20 52 4F 4C ...   4601  DISP_ROL_L  DC.B    '   ROL.L',0
00004500= 20 20 20 42 52 41 00    4602  DISP_BRA    DC.B    '   BRA',0
00004507= 20 20 20 42 4C 54 00    4603  DISP_BLT    DC.B    '   BLT',0
0000450E= 20 20 20 42 45 51 00    4604  DISP_BEQ    DC.B    '   BEQ',0
00004515= 20 20 20 42 4E 45 00    4605  DISP_BNE    DC.B    '   BNE',0
0000451C= 20 20 20 42 48 49 00    4606  DISP_BHI    DC.B    '   BHI',0
00004523= 20 20 20 4D 4F 56 ...   4607  DISP_MOVEA_W    DC.B    '   MOVEA.W',0
0000452E= 20 20 20 4D 4F 56 ...   4608  DISP_MOVEA_L    DC.B    '   MOVEA.L',0
00004539                          4609  
00004539= 20 20 20 24 00          4610  DISP_HEX     DC.B    '   $',0
0000453E= 20 20 20 44 00          4611  DISP_D  DC.B    '   D',0
00004543= 20 20 20 41 00          4612  DISP_A  DC.B    '   A',0
00004548= 20 20 20 28 00          4613  DISP_OP  DC.B    '   (',0
0000454D= 29 00                   4614  DISP_CP  DC.B   ')',0
0000454F= 20 20 20 28 41 00       4615  DISP_AOP  DC.B    '   (A',0
00004555                          4616  
00004555= 20 20 20 2D 28 41 00    4617  DISP_PRE    DC.B    '   -(A',0
0000455C= 29 2B 00                4618  DISP_POST   DC.B    ')+',0
0000455F= 20 20 20 23 00          4619  DISP_LB DC.B    '   #',0
00004564= 30 00                   4620  DISP_0  DC.B    '0',0
00004566= 31 00                   4621  DISP_1  DC.B    '1',0
00004568= 32 00                   4622  DISP_2  DC.B    '2',0
0000456A= 33 00                   4623  DISP_3  DC.B    '3',0
0000456C= 34 00                   4624  DISP_4  DC.B    '4',0
0000456E= 35 00                   4625  DISP_5  DC.B    '5',0
00004570= 36 00                   4626  DISP_6  DC.B    '6',0
00004572= 37 00                   4627  DISP_7  DC.B    '7',0
00004574                          4628  
00004574                          4629  *STACK INTERFACE VARIABLES*
00004574                          4630  COUNTER         DS.W    1
00004576                          4631  QUEUE_COUNTER   DS.W    1
00004578                          4632  
00004578                          4633  *EA DECODING INTERFACE VARIABLES* 
00004578                          4634  DEST_REGISTER_FORMAT    DS.B    1           *all address modes acceptable standard
00004579                          4635  SRC_REGISTER_FORMAT  DS.B    1           *all address modes acceptable standard
0000457A                          4636  TEMP_REGISTER_FORMAT    DS.B    1           *place holder for masking other register formats
0000457B                          4637  
0000457B                          4638  *FORMAT OF WHERE TO GET THE EA BY THE ENDING BIT AND STARTING BIT
0000457B                          4639  * WORD + WORD = LONG
0000457B                          4640  * (STARTING BIT) + (ENDING BIT) = 2 HEX CHAR
0000457B                          4641  * A              + F            = AF         <= EXAMPLE
0000457B                          4642  *(10TH BIT)      + (15TH BIT)   = CHECK BITS 15 THROUGH 10
0000457B                          4643  GET_DST_START_END    DS.B    1
0000457C                          4644  GET_SRC_START_END    DS.B    1
0000457D                          4645  
0000457D                          4646  *STORES THE START + END BITS HERE (FROM ABOVE)
0000457E                          4647  VAR_BYTE_START      DS.L    1
00004582                          4648  VAR_BYTE_END        DS.L    1
00004586                          4649  VAR_TEMP_CLEANCOPY  DS.L    1
0000458A                          4650  
0000458A                          4651  VAR_LONG_ADDRESS_MODE_CHECK        DS.L    1       *holds the bits 0-2 in long form
0000458E                          4652  
0000458E                          4653  *MORE FOR STACK USAGE*
0000458E= 2C 00                   4654  DISP_COMMA  DC.B    ',',0
00004590= 20 20 20 00             4655  DISP_INDENT  DC.B    '   ',0
00004594                          4656  
00004594                          4657  *NEXT WORD POINTER: FOR IDENTIFING (xxx).W or (xxx).L*
00004594                          4658  POINTER_WORD    DS.W       1
00004596                          4659  
00004596                          4660  
00004596                          4661  
00004596                          4662  *---------------------------------------------------------------------------*
00004596                          4663  * Ends program
00004596                          4664  *---------------------------------------------------------------------------*
00004596                          4665              END    START                    * last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASC2HXLP            1178
ASCII2HEX           1172
ASC_ERR             11D4
ASC_LOW             11B6
ASC_NUM             11C6
ASC_SFT             11CE
ASC_UPP             11BE
CHECK0              33C6
CHECK1              3450
CHECK2              34DA
CHECK3              3574
CHECK4              3616
CHECK7              36B8
CHECK_IMMEDIATE     3798
CHECK_LONG          374A
CHECK_WORD          3704
CLEAR_RETURN        3CCE
CLEAR_STACK         3CBE
COUNTER             4574
CR                  D
DECREMENT           3CB6
DEST_CHECK0         37F6
DEST_CHECK1         3880
DEST_CHECK2         390A
DEST_CHECK3         39A4
DEST_CHECK4         3A46
DEST_CHECK7         3AE8
DEST_CHECK_IMMEDIATE  3BC8
DEST_CHECK_LONG     3B7A
DEST_CHECK_WORD     3B34
DEST_LOOP_SHIFTING  3860
DEST_LOOP_SHIFTING1  38EA
DEST_LOOP_SHIFTING2  397C
DEST_LOOP_SHIFTING3  3A16
DEST_LOOP_SHIFTING4  3AC0
DEST_LOOP_SHIFTING7  3B20
DEST_MASKING_NEXT   386E
DEST_MASKING_NEXT1  38F8
DEST_MASKING_NEXT2  398A
DEST_MASKING_NEXT3  3A24
DEST_MASKING_NEXT4  3ACE
DEST_MASKING_NEXT7  3B2E
DEST_MODE           2F7E
DEST_REGISTER       324E
DEST_REGISTER_FORMAT  4578
DISPLAY_30_LINES    1320
DISP_0              4564
DISP_1              4566
DISP_2              4568
DISP_3              456A
DISP_4              456C
DISP_5              456E
DISP_6              4570
DISP_7              4572
DISP_A              4543
DISP_ADDA_L         4454
DISP_ADDA_W         444A
DISP_ADDQ_B         434D
DISP_ADDQ_L         4361
DISP_ADDQ_W         4357
DISP_ADD_B          442F
DISP_ADD_L          4441
DISP_ADD_W          4438
DISP_AND_B          4414
DISP_AND_L          4426
DISP_AND_W          441D
DISP_AOP            454F
DISP_ASL_B          449D
DISP_ASL_L          44C1
DISP_ASL_W          44AF
DISP_ASR_B          4494
DISP_ASR_L          44B8
DISP_ASR_W          44A6
DISP_BEQ            450E
DISP_BHI            451C
DISP_BLT            4507
DISP_BNE            4515
DISP_BRA            4500
DISP_BTST           42A0
DISP_CMPA_L         4400
DISP_CMPA_W         43F6
DISP_CMPI_B         42A8
DISP_CMPI_L         42BC
DISP_CMPI_W         42B2
DISP_CMP_B          43DB
DISP_CMP_L          43ED
DISP_CMP_W          43E4
DISP_COMMA          458E
DISP_CP             454D
DISP_D              453E
DISP_DATA           42C6
DISP_DIVS           436B
DISP_EORI_B         4282
DISP_EORI_L         4296
DISP_EORI_W         428C
DISP_EOR_B          43C0
DISP_EOR_L          43D2
DISP_EOR_W          43C9
DISP_HEX            4539
DISP_INDENT         4590
DISP_JSR            42F3
DISP_LB             455F
DISP_LEA            4330
DISP_LSL_B          4467
DISP_LSL_L          448B
DISP_LSL_W          4479
DISP_LSR_B          445E
DISP_LSR_L          4482
DISP_LSR_W          4470
DISP_MOVEA_L        452E
DISP_MOVEA_W        4523
DISP_MOVEM_L        4342
DISP_MOVEM_W        4337
DISP_MOVE_B         42CE
DISP_MOVE_L         42E2
DISP_MOVE_W         42D8
DISP_MULS_W         440A
DISP_NEG_B          42FA
DISP_NEG_L          430C
DISP_NEG_W          4303
DISP_NEXT           4013
DISP_NOT_B          4315
DISP_NOT_L          4327
DISP_NOT_W          431E
DISP_OP             4548
DISP_ORI_B          4267
DISP_ORI_L          4279
DISP_ORI_W          4270
DISP_POST           455C
DISP_PRE            4555
DISP_ROL_B          44D3
DISP_ROL_L          44F7
DISP_ROL_W          44E5
DISP_ROR_B          44CA
DISP_ROR_L          44EE
DISP_ROR_W          44DC
DISP_RTS            42EC
DISP_SUBA_L         43B6
DISP_SUBA_W         43AC
DISP_SUBI_B         438E
DISP_SUBI_L         43A2
DISP_SUBI_W         4398
DISP_SUB_B          4373
DISP_SUB_L          4385
DISP_SUB_W          437C
D_MODE000           3020
D_MODE010           3068
D_MODE011           30C8
D_MODE100           30E8
D_MODE111           313A
EA_ARITH            2F18
EA_DATA             14FE
EA_GEN              2F64
EA_MOVEA            2F3E
EA_NOSRC            2F04
ENDLINE_M           41C4
END_ADDR            10BE
ERRMSG_1            40AB
ERRMSG_3            40CA
ERRMSG_5            40EF
ERROR_1             1122
ERROR_2             1132
ERROR_3             1142
ERROR_4             1152
ERROR_5             1162
E_ADDR_HX           41C0
FINMSG              4080
GET_DST_FAILED      3C0E
GET_DST_START_END   457B
GET_DST_SUCCESS     3C12
GET_EA_EA_DEST      37E4
GET_EA_EA_SRC       33B4
GET_SRC_FAILED      37DE
GET_SRC_START_END   457C
GET_SRC_SUCCESS     37E2
HEX2ASCII           11DA
HEX2ASCII2STACK     121C
HEX_CHAR            1208
HEX_CONT            120C
HEX_LOOP            11EE
IMMD_B              31EE
IMMD_L              322E
IMMD_W              320E
IMMEDIATE           31BE
INCREMENT           3CAE
INTRO               1028
IS_ODD              1260
IS_ODD_ERR          1276
JMPTABLE            134C
LF                  A
LONGMODE            3192
LOOP_SHIFTING       3430
LOOP_SHIFTING1      34BA
LOOP_SHIFTING2      354C
LOOP_SHIFTING3      35E6
LOOP_SHIFTING4      3690
MAIN                127C
MASKING_NEXT        343E
MASKING_NEXT1       34C8
MASKING_NEXT2       355A
MASKING_NEXT3       35F4
MASKING_NEXT4       369E
MODE000             300C
MODE001             3034
MODE010             3048
MODE011             3088
MODE100             30A8
MODE111             3108
NEXTLINES           132E
OP0000              13AC
OP0000_CMPI         1526
OP0000_CMPI_B       159C
OP0000_CMPI_L       15EC
OP0000_CMPI_W       15C4
OP0000_RETURN_CMPI  1610
OP0001              1668
OP0010              16D6
OP0011              17D4
OP0100              18D0
OP0101              1B26
OP0101_ADDQ_B       1BA2
OP0101_ADDQ_B_0     1C1E
OP0101_ADDQ_B_1     1C2A
OP0101_ADDQ_B_2     1C36
OP0101_ADDQ_B_3     1C42
OP0101_ADDQ_B_4     1C4E
OP0101_ADDQ_B_5     1C5A
OP0101_ADDQ_B_6     1C66
OP0101_ADDQ_B_7     1C72
OP0101_ADDQ_B_8     1C7E
OP0101_ADDQ_L       1BBA
OP0101_ADDQ_W       1BAE
OP0101_RETURN       1BC2
OP0101_RETURN2      1C86
OP0110              1CCA
OP0111              1D58
OP1000              1D5C
OP1000_DIVS_DN_EA_OR_EA_DN  1D6A
OP1000_DIVS_RETURN  1E4E
OP1000_EA_DN_DIVS   1D98
OP1000_PRINT_L_DIVS  1E06
OP1000_PRINT_W_DIVS  1DBE
OP1001              1E64
OP1001_ADD_RETURN   21B2
OP1001_DETERMINE_DN_EA_OR_EA_DN  1F7A
OP1001_DN_EA        1FB2
OP1001_EA_DN        20B2
OP1001_PRINT_B      20DA
OP1001_PRINT_B2     1FDA
OP1001_PRINT_L      216A
OP1001_PRINT_L2     206A
OP1001_PRINT_W      2122
OP1001_PRINT_W2     2022
OP1001_SUBA_L       1E96
OP1001_SUBA_W       1F08
OP1010              2220
OP1011              2224
OP1011_CMP          227E
OP1011_CMPA         2330
OP1011_CMPA_L       23AA
OP1011_CMPA_W       239E
OP1011_CMP_B        22F2
OP1011_CMP_L        230A
OP1011_CMP_W        22FE
OP1011_EOR          23D0
OP1011_EOR_B        2444
OP1011_EOR_L        245C
OP1011_EOR_W        2450
OP1011_RETURN       2464
OP1011_RETURN_CMP   2312
OP1011_RETURN_CMPA  23B2
OP1100              2524
OP1100_AND_RETURN   2874
OP1100_DETERMINE_DN_EA_OR_EA_DN  263A
OP1100_DN_EA        2674
OP1100_EA_DN        2774
OP1100_EA_DN_MULS   2582
OP1100_MULS_DN_EA_OR_EA_DN  2554
OP1100_MULS_RETURN  2638
OP1100_PRINT_B      279C
OP1100_PRINT_B2     269C
OP1100_PRINT_L      282C
OP1100_PRINT_L2     272C
OP1100_PRINT_L_MULS  25F0
OP1100_PRINT_W      27E4
OP1100_PRINT_W2     26E4
OP1100_PRINT_W_MULS  25A8
OP1101              2876
OP1101_ADDA_L       28A8
OP1101_ADDA_W       291A
OP1101_ADD_RETURN   2BC4
OP1101_DETERMINE_DN_EA_OR_EA_DN  298C
OP1101_DN_EA        29C4
OP1101_EA_DN        2AC4
OP1101_PRINT_B      2AEC
OP1101_PRINT_B2     29EC
OP1101_PRINT_L      2B7C
OP1101_PRINT_L2     2A7C
OP1101_PRINT_W      2B34
OP1101_PRINT_W2     2A34
OP1110              2C52
OP1111              2F00
OP_ADDA_L           2C3A
OP_ADDA_W           2C22
OP_ADDQ_B           1C94
OP_ADDQ_L           1CB8
OP_ADDQ_W           1CA6
OP_ADD_B            2BDA
OP_ADD_L            2C0A
OP_ADD_W            2BF2
OP_ASL              2DF2
OP_ASL_B            2E16
OP_ASL_L            2E28
OP_ASL_W            2E3A
OP_ASR              2D98
OP_ASR_B            2DBC
OP_ASR_L            2DCE
OP_ASR_W            2DE0
OP_ASX              2CB4
OP_BEQ              1D2E
OP_BHI              1D12
OP_BLT              1D4A
OP_BNE              1D20
OP_BRA              1D3C
OP_BTST             1420
OP_CMPA_L           2494
OP_CMPA_W           2482
OP_CMP_B            24A6
OP_CMP_L            24D6
OP_CMP_W            24BE
OP_DATA             14DA
OP_DIVS             1E50
OP_EORI             142E
OP_EORI_B           144E
OP_EORI_L           1472
OP_EORI_W           1460
OP_EOR_B            24EE
OP_EOR_L            2512
OP_EOR_W            2500
OP_JSR              1AF8
OP_LEA              197E
OP_LEA_DN_EA_OR_EA_DN  198C
OP_LEA_RETURN       19EA
OP_LSL              2D3E
OP_LSL_B            2D62
OP_LSL_L            2D74
OP_LSL_W            2D86
OP_LSR              2CE4
OP_LSR_B            2D08
OP_LSR_L            2D1A
OP_LSR_W            2D2C
OP_LSX              2C9C
OP_MOVEA_L          1764
OP_MOVEA_W          1860
OP_MOVEM_L          196C
OP_MOVEM_W          195A
OP_MOVE_B           166E
OP_MOVE_L           16FC
OP_MOVE_W           17F8
OP_MULS             2546
OP_NEG              19EC
OP_NEG_B            1A38
OP_NEG_L            1A50
OP_NEG_PRINT_EA     1A5C
OP_NEG_W            1A44
OP_NOT              1A72
OP_NOT_B            1ABE
OP_NOT_L            1AD6
OP_NOT_PRINT_EA     1AE2
OP_NOT_W            1ACA
OP_ORI              1612
OP_ORI_B            1632
OP_ORI_L            1656
OP_ORI_W            1644
OP_PRINT_L_LEA      19AA
OP_ROL              2EA6
OP_ROL_B            2ECA
OP_ROL_L            2EDC
OP_ROL_W            2EEE
OP_ROR              2E4C
OP_ROR_B            2E70
OP_ROR_L            2E82
OP_ROR_W            2E94
OP_ROX              2CCC
OP_RTS              1B0C
OP_SUBA_L           220E
OP_SUBA_W           21FC
OP_SUBI             1484
OP_SUBI_B           14A4
OP_SUBI_L           14C8
OP_SUBI_W           14B6
OP_SUB_B            21B4
OP_SUB_L            21E4
OP_SUB_W            21CC
OUTPUT_PROCESSED_DATA  1300
POINTER_WORD        4594
POP_FRONT           3C68
POP_FRONT_RETURN    3CA2
POP_RETURN          3C66
POP_SHIFT_LOOP      3C84
POP_STACK           3C5A
PRINT_QUEUE         3C2E
PRINT_QUEUE_HELPER  3C3A
PRINT_QUEUE_RETURN  3C50
PRINT_STACK         3C14
PRINT_STACK_HELPER  3C20
PRINT_STACK_RETURN  3C2C
PROGLP              100A
PROMPT_END          3FE6
PROMPT_START        3FB7
PUSH_STACK          3C52
QUEUE_COUNTER       4576
REG_0               3302
REG_1               3310
REG_2               331E
REG_3               332C
REG_4               333A
REG_5               3348
REG_6               3356
REG_7               3364
REPEAT              3372
REPEATMSG           403D
RETURN              11D8
SRC_LOOP_SHIFTING   36F0
SRC_MASKING_NEXT    36FE
SRC_MODE            2FC2
SRC_REGISTER        32AA
SRC_REGISTER_FORMAT  4579
STACK               7000
STACK_HEX_CHAR      124A
STACK_HEX_CONT      124E
STACK_HEX_LOOP      1230
START               1004
START_ADDR          106C
S_ADDR_HX           41BC
TEMP_REGISTER_FORMAT  457A
TERMINATE           3CD0
TESTING             1036
TMPINPUT            41C7
TMPOUTPUT           4217
VAR_BYTE_END        4582
VAR_BYTE_START      457E
VAR_LONG_ADDRESS_MODE_CHECK  458A
VAR_TEMP_CLEANCOPY  4586
VR_E_ADDR           416C
VR_S_ADDR           411C
WELCOME             3CE2
WORDMODE            3166

00001004 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/9/2014 3:41:49 PM

00000000                             1  *---------------------------------------------------------------------------*
00000000                             2  * Title      : 68K Disassembler
00000000                             3  * Written by : Team Circle
00000000                             4  * Date       : 12/05/14
00000000                             5  * Description: Scans a section of memory and converts its
00000000                             6  *              contents to a listing of valid assembly 
00000000                             7  *              language instructions
00000000                             8  *---------------------------------------------------------------------------*
00000000                             9  
00000000                            10  *---------------------------------------------------------------------------*
00000000                            11  * System Equates                                                 
00000000                            12  *---------------------------------------------------------------------------*
00000000  =0000000D                 13  CR          EQU     $0D                     * ASCII for Carriage Return
00000000  =0000000A                 14  LF          EQU     $0A                     * ASCII for Line Feed 
00000000  =00007000                 15  STACK       EQU     $7000                   * Initial Stack Pointer                         
00000000                            16              
00000000                            17  *---------------------------------------------------------------------------*
00000000                            18  * Reserved Registers
00000000                            19  *---------------------------------------------------------------------------*  
00000000                            20  * D0 - I/O
00000000                            21  * D1 - Temporary storage of processing data
00000000                            22  * D3 - [PUSH_STACK]
00000000                            23  * D4 - Opcode size (0 - byte; 1- word; 2-long)
00000000                            24  * D5 - Processing data
00000000                            25  * D6 - Loop counter to print 30 lines
00000000                            26  * D7 - Error flag
00000000                            27  * A2 - [STACK POINTER]
00000000                            28  * A5 - Processing address in hex
00000000                            29  
00000000                            30  *---------------------------------------------------------------------------*
00000000                            31  * Start and loop program
00000000                            32  *---------------------------------------------------------------------------*  
00001000                            33              ORG     $1000
00001000  4FF8 7000                 34              LEA     STACK,SP
00001004                            35  START:            
00001004  4EB9 00001028             36              JSR     INTRO                 
0000100A  4EB9 00001090             37  PROGLP      JSR     START_ADDR
00001010  4EB9 000010E2             38              JSR     END_ADDR
00001016  43F9 00004276             39              LEA     ENDLINE_M,A1           * Add a new line
0000101C  103C 000E                 40              MOVE.B  #14, D0                  * Display A1
00001020  4E4F                      41              TRAP    #15
00001022                            42              
00001022  4EF9 000012A0             43              JMP     MAIN
00001028                            44              
00001028                            45  *---------------------------------------------------------------------------*
00001028                            46  * INTRO: Display the introduction of the program
00001028                            47  *---------------------------------------------------------------------------*
00001028  43F9 00003D94             48  INTRO       LEA     WELCOME,A1              * Load PROMPT_START
0000102E  103C 000E                 49              MOVE.B  #14,D0                  * Display A1
00001032  4E4F                      50              TRAP    #15
00001034  4E75                      51              RTS
00001036                            52  TESTING     
00001036  0093 11111111             53              ORI.L  #$11111111,(A3)
0000103C  009C 00000111             54              ORI.L  #$111,(A4)+
00001042  00A5 00000011             55              ORI.L  #$11,-(A5)
00001048  00B8 00000001 3331        56              ORI.L  #$1,$3331
00001050  00B9 00000001 44444441    57              ORI.L  #$1,$44444441
0000105A  0053 1111                 58              ORI.W  #$1111,(A3)
0000105E  005C 0111                 59              ORI.W  #$111,(A4)+
00001062  0065 0011                 60              ORI.W  #$11,-(A5)
00001066  0078 0001 3331            61              ORI.W  #$1,$3331
0000106C  0079 0001 44444441        62              ORI.W  #$1,$44444441
00001074  0013 0001                 63              ORI.B  #$1,(A3)
00001078  001C 0001                 64              ORI.B  #$1,(A4)+
0000107C  0025 0001                 65              ORI.B  #$1,-(A5)
00001080  0038 0011 3331            66              ORI.B  #$11,$3331
00001086  0039 0001 44444441        67              ORI.B  #$1,$44444441
0000108E                            68  
0000108E                            69  
0000108E                            70  
0000108E  4E75                      71              RTS
00001090                            72  *---------------------------------------------------------------------------*
00001090                            73  * START_ADDR: Compute the starting address
00001090                            74  *---------------------------------------------------------------------------*
00001090                            75  START_ADDR
00001090                            76              * Output
00001090  43F9 00004069             77              LEA     PROMPT_START,A1         * Load PROMPT_START 
00001096  103C 000E                 78              MOVE.B  #14,D0                  * Display PROMPT_START
0000109A  4E4F                      79              TRAP    #15
0000109C                            80      
0000109C                            81              * Input
0000109C  43F9 000041CE             82              LEA     VR_S_ADDR,A1            * Load VR_S_ADDR
000010A2  103C 0002                 83              MOVE.B  #2,D0                   * Ask user for input
000010A6  4E4F                      84              TRAP    #15
000010A8                            85              
000010A8                            86              * Error Checking (length)
000010A8  0C01 0000                 87              CMPI.B  #0, D1                  * Check if input length <= 0
000010AC  6F00 0098                 88              BLE     ERROR_1
000010B0  0C01 0008                 89              CMPI.B  #8, D1                  * Check if input length > 8
000010B4  6E00 0090                 90              BGT     ERROR_1
000010B8                            91              
000010B8                            92              * Conversion & Storage
000010B8  4EB9 00001196             93              JSR     ASCII2HEX               * Jump to ASCII2HEX
000010BE  0C07 0001                 94              CMPI.B  #1, D7                  * Check for error
000010C2  6700 0082                 95              BEQ     ERROR_1                 
000010C6  23C1 0000426E             96              MOVE.L  D1, S_ADDR_HX           * Move the result to S_ADDR_HX 
000010CC                            97              
000010CC                            98              * Error Checking (Odd)
000010CC  43F9 0000426E             99              LEA     S_ADDR_HX, A1           * Load 'S_ADDR_HX' for odd error
000010D2  4EB9 00001284            100              JSR     IS_ODD                  * Check if the input address is odd
000010D8  0C07 0001                101              CMPI.B  #1, D7                  * Check for error
000010DC  6700 0088                102              BEQ     ERROR_3
000010E0                           103              
000010E0                           104              * Return
000010E0  4E75                     105              RTS     
000010E2                           106  *---------------------------------------------------------------------------*
000010E2                           107  * END_ADDR: Compute the ending address
000010E2                           108  *---------------------------------------------------------------------------*
000010E2                           109  END_ADDR
000010E2                           110              * Output
000010E2  43F9 00004098            111              LEA     PROMPT_END,A1           * Load PROMPT_END
000010E8  103C 000E                112              MOVE.B  #14,D0                  * Display PROMPT_END
000010EC  4E4F                     113              TRAP    #15
000010EE                           114  
000010EE                           115              * Input
000010EE  43F9 0000421E            116              LEA     VR_E_ADDR,A1            * Load VR_E_ADDR
000010F4  103C 0002                117              MOVE.B  #2,D0                   * Ask user for input
000010F8  4E4F                     118              TRAP    #15
000010FA                           119              
000010FA                           120              * Error Checking (length)
000010FA  0C01 0000                121              CMPI.B  #0, D1                  * Check if input length <= 0
000010FE  6F00 0056                122              BLE     ERROR_2
00001102  0C01 0008                123              CMPI.B  #8, D1                  * Check if input length > 8
00001106  6E00 004E                124              BGT     ERROR_2
0000110A                           125              
0000110A                           126              * Conversion & Storage
0000110A  4EB9 00001196            127              JSR     ASCII2HEX               * Jump to ASCII2HEX
00001110  0C07 0001                128              CMPI.B  #1, D7                  * Check for error
00001114  6700 0040                129              BEQ     ERROR_2
00001118  23C1 00004272            130              MOVE.L  D1, E_ADDR_HX           * Move the result to E_ADDR_HX
0000111E                           131              
0000111E                           132              * Error Checking (start > end case)
0000111E  2439 0000426E            133              MOVE.L  S_ADDR_HX, D2           * Move the starting address to D2
00001124  B282                     134              CMP.L   D2, D1                  * Compare starting and ending address
00001126  6300 005E                135              BLS     ERROR_5                 * Go to ERROR_5 if ending < starting
0000112A                           136              
0000112A                           137              * Error Checking (Odd case)
0000112A  43F9 00004272            138              LEA     E_ADDR_HX, A1           * Move the ending address
00001130  4EB9 00001284            139              JSR     IS_ODD                  * Go to IS_ODD for odd address checking
00001136  0C07 0001                140              CMPI.B  #1, D7                  * Check for an error flag
0000113A  6700 003A                141              BEQ     ERROR_4
0000113E                           142              
0000113E                           143              * Inputs are valid
0000113E  2A79 0000426E            144              MOVE.L  S_ADDR_HX, A5           * Store the valid input in A5
00001144                           145              
00001144  4E75                     146              RTS
00001146                           147              
00001146                           148  *---------------------------------------------------------------------------*
00001146                           149  * ERROR_1: Address error (Invalid starting address)
00001146                           150  *---------------------------------------------------------------------------*
00001146                           151  ERROR_1
00001146  43F9 0000415D            152              LEA     ERRMSG_1, A1            * Load ERRMSG_1
0000114C  103C 000E                153              MOVE.B  #14, D0                 * Display ERRMSG_1
00001150  4E4F                     154              TRAP    #15
00001152  4EF8 1090                155              JMP     START_ADDR              * Jump to START_ADDR
00001156                           156      
00001156                           157  *---------------------------------------------------------------------------*
00001156                           158  * ERROR_2: Address error (Invalid ending address)
00001156                           159  *---------------------------------------------------------------------------*
00001156                           160  ERROR_2
00001156  43F9 0000415D            161              LEA     ERRMSG_1, A1            * Load ERRMSG_1
0000115C  103C 000E                162              MOVE.B  #14, D0                 * Display ERRMSG_1
00001160  4E4F                     163              TRAP    #15
00001162  4EF8 10E2                164              JMP     END_ADDR                * Jump to END_ADDR
00001166                           165  
00001166                           166  *---------------------------------------------------------------------------*
00001166                           167  * ERROR_3: Address error (Odd starting address)
00001166                           168  *---------------------------------------------------------------------------*
00001166                           169  ERROR_3
00001166  43F9 0000417C            170              LEA     ERRMSG_3, A1
0000116C  103C 000E                171              MOVE.B  #14, D0
00001170  4E4F                     172              TRAP    #15
00001172  4EF8 1090                173              JMP     START_ADDR
00001176                           174     
00001176                           175  *---------------------------------------------------------------------------*
00001176                           176  * ERROR_4: Address error (Odd ending address)
00001176                           177  *---------------------------------------------------------------------------*         
00001176                           178  ERROR_4
00001176  43F9 0000417C            179              LEA     ERRMSG_3, A1
0000117C  103C 000E                180              MOVE.B  #14, D0
00001180  4E4F                     181              TRAP    #15
00001182  4EF8 10E2                182              JMP     END_ADDR
00001186                           183            
00001186                           184  *---------------------------------------------------------------------------*
00001186                           185  * ERROR_3: Address error (Ending address is less than starting address)
00001186                           186  *---------------------------------------------------------------------------*
00001186                           187  ERROR_5
00001186  43F9 000041A1            188              LEA     ERRMSG_5, A1
0000118C  103C 000E                189              MOVE.B  #14, D0
00001190  4E4F                     190              TRAP    #15
00001192  4EF8 10E2                191              JMP     END_ADDR
00001196                           192    
00001196                           193  *---------------------------------------------------------------------------*
00001196                           194  * ASCII2HEX: Convert ASCii to Hexadecimal
00001196                           195  * Reserved registers: A1 = Source, D1 = Destination, D2 = Byte, D7 = Error
00001196                           196  *---------------------------------------------------------------------------*
00001196  4281                     197  ASCII2HEX   CLR.L   D1                      * Clear the destination 
00001198  4287                     198              CLR.L   D7                      * Set the error flag to 0
0000119A  4282                     199              CLR.L   D2                      * Clear D2 for temp storage
0000119C                           200              
0000119C  1419                     201  ASC2HXLP    MOVE.B  (A1)+, D2               * Read a byte to D2
0000119E  0C02 0000                202              CMPI.B  #0, D2                  * Check for NULL (indicates the end of source)
000011A2  6700 0058                203              BEQ     RETURN                  * If it's NULL, go to return
000011A6  0C02 0066                204              CMPI.B  #102, D2                * Decimal ASCII value of f is 102
000011AA  6E00 004C                205              BGT     ASC_ERR                 * ASCII > f (invalid input) 
000011AE  0C02 0061                206              CMPI.B  #97, D2                 * Decimal ASCII value of a is 97
000011B2  6C00 0026                207              BGE     ASC_LOW                 * ASCII >= a (valid input)
000011B6  0C02 0046                208              CMPI.B  #70, D2                 * Decimal ASCII value of F is 70
000011BA  6E00 003C                209              BGT     ASC_ERR                 * ASCII > F (invalid input)
000011BE  0C02 0041                210              CMPI.B  #65, D2                 * Decimal ASCII value of A is 65
000011C2  6C00 001E                211              BGE     ASC_UPP                 * ASCII >= A (valid input)
000011C6  0C02 0039                212              CMPI.B  #57, D2                 * Decimal value of 9 is 57
000011CA  6E00 002C                213              BGT     ASC_ERR                 * ASCII > 9 (invalid input)
000011CE  0C02 0030                214              CMPI.B  #48, D2                 * Decimal ASCII value of 0 is 48
000011D2  6C00 0016                215              BGE     ASC_NUM                 * ASCII >= 0 (valid input)
000011D6  6000 0020                216              BRA     ASC_ERR                 * Invalid input
000011DA                           217  
000011DA  0442 0057                218  ASC_LOW     SUBI    #87, D2                 * Convert the ASCII input to Hex
000011DE  6000 0012                219              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011E2                           220              
000011E2  0442 0037                221  ASC_UPP     SUBI    #55, D2                 * Convert the ASCII input to Hex
000011E6  6000 000A                222              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011EA                           223              
000011EA  0442 0030                224  ASC_NUM     SUBI    #48, D2                 * Convert the ASCII input to Hex
000011EE  6000 0002                225              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011F2                           226              
000011F2  E981                     227  ASC_SFT     ASL.L   #4, D1                  * Shift the dest to left by 4 bits
000011F4  D202                     228              ADD.B   D2, D1                  * Add the converted input to D1
000011F6  60A4                     229              BRA     ASC2HXLP                * Loop
000011F8                           230  
000011F8  1E3C 0001                231  ASC_ERR     MOVE.B  #1, D7                  * Set the error flag to 1            
000011FC  4E75                     232  RETURN      RTS     
000011FE                           233  
000011FE                           234  *---------------------------------------------------------------------------*
000011FE                           235  * HEX2ASCII: Convert Hexadecimal to ASCii 
000011FE                           236  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
000011FE                           237  *---------------------------------------------------------------------------*
000011FE  0C02 0008                238  HEX2ASCII   CMPI.B  #8, D2                  * Check to see if the size is long
00001202  6700 000E                239              BEQ     HEX_LOOP
00001206  4841                     240              SWAP    D1
00001208  0C02 0002                241              CMPI.B  #2,D2
0000120C  6600 0004                242              BNE     HEX_LOOP
00001210  E189                     243              LSL.L   #8,D1
00001212                           244             
00001212  E999                     245  HEX_LOOP    ROL.L   #4, D1                  * Roll D1 to left
00001214  2601                     246              MOVE.L  D1, D3                  * Move D1 to D3
00001216  0283 0000000F            247              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
0000121C  0C03 0009                248              CMPI.B  #9, D3                  * Compare te digit
00001220  6E00 000A                249              BGT     HEX_CHAR              
00001224  0603 0030                250              ADDI.B  #48,D3                  * Add 48 for numerical output
00001228  6000 0006                251              BRA     HEX_CONT
0000122C                           252              
0000122C  0603 0037                253  HEX_CHAR    ADDI.B  #55,D3                  * Add 55 for character output
00001230                           254  
00001230  12C3                     255  HEX_CONT    MOVE.B  D3, (A1)+               * Place into A1
00001232  5342                     256              SUBI    #1, D2                  * Decrement the size
00001234  0C02 0000                257              CMPI.B  #0, D2                  * Check if D2 is 0
00001238  66D8                     258              BNE     HEX_LOOP                * Loop
0000123A  12BC 0000                259              MOVE.B  #$0,(A1)                * Null terminator
0000123E  4E75                     260              RTS
00001240                           261  *---------------------------------------------------------------------------*
00001240                           262  * HEX2ASCII2STACK: Convert Hexadecimal to ASCii 
00001240                           263  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
00001240                           264  *---------------------------------------------------------------------------*
00001240                           265  HEX2ASCII2STACK
00001240  0C02 0008                266              CMPI.B  #8, D2                  * Check to see if the size is long
00001244  6700 000E                267              BEQ     STACK_HEX_LOOP
00001248  4841                     268              SWAP    D1
0000124A  0C02 0002                269              CMPI.B  #2,D2
0000124E  6600 0004                270              BNE     STACK_HEX_LOOP
00001252  E189                     271              LSL.L   #8,D1
00001254                           272             
00001254                           273  STACK_HEX_LOOP    
00001254  E999                     274              ROL.L   #4, D1                  * Roll D1 to left
00001256  2601                     275              MOVE.L  D1, D3                  * Move D1 to D3
00001258  0283 0000000F            276              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
0000125E  0C03 0009                277              CMPI.B  #9, D3                  * Compare te digit
00001262  6E00 000A                278              BGT     STACK_HEX_CHAR              
00001266  0603 0030                279              ADDI.B  #48,D3                  * Add 48 for numerical output
0000126A  6000 0006                280              BRA     STACK_HEX_CONT
0000126E                           281              
0000126E                           282  STACK_HEX_CHAR    
0000126E  0603 0037                283              ADDI.B  #55,D3                  * Add 55 for character output
00001272                           284  
00001272                           285  STACK_HEX_CONT    
00001272  6100 2A90                286              BSR     PUSH_STACK              *PLACE INTO STACK
00001276  5342                     287              SUBI    #1, D2                  * Decrement the size
00001278  0C02 0000                288              CMPI.B  #0, D2                  * Check if D2 is 0
0000127C  66D6                     289              BNE     STACK_HEX_LOOP                * Loop
0000127E  12BC 0000                290              MOVE.B  #$0,(A1)                * Null terminator
00001282  4E75                     291              RTS
00001284                           292  
00001284                           293  
00001284                           294  *---------------------------------------------------------------------------*
00001284                           295  * IS_ODD: Check whether the source address is odd
00001284                           296  * Reserved registers: A1 = Source, D1 = Result, D7 = error flag
00001284                           297  *---------------------------------------------------------------------------*
00001284  4281                     298  IS_ODD      CLR.L   D1                      * Clear the result
00001286  4287                     299              CLR.L   D7                      * Set the error flag to 0
00001288  2211                     300              MOVE.L  (A1),D1                * Temp store the checking address to D1
0000128A  82FC 0002                301              DIVU    #2, D1                  * Divide the result by 2
0000128E  4841                     302              SWAP    D1                      * Swap remainder with quotient
00001290  0C01 0001                303              CMPI.B  #1, D1                  * Check for error
00001294  6700 0004                304              BEQ     IS_ODD_ERR
00001298  4E75                     305              RTS
0000129A                           306              
0000129A  1E3C 0001                307  IS_ODD_ERR  MOVE.B  #1, D7
0000129E  4E75                     308              RTS
000012A0                           309  
000012A0                           310  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*
000012A0                           311  * MAIN                    
000012A0                           312  * A2: STACK POINTER                                                      MAIN                                                                        MAIN
000012A0                           313  * A5: Processing address
000012A0                           314  *
000012A0                           315  * D3: USED FOR PUSHING INTO STACK
000012A0                           316  *     To push into stack => MOVE.W #DATA,D3 
000012A0                           317  *                           BSR    PUSH_STACK
000012A0                           318  *     To print stack     => BSR    PRINT_STACK 
000012A0                           319  *     To clear stack     => BSR    CLEAR_STACK
000012A0                           320  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*  
000012A0                           321  MAIN        
000012A0                           322              *initialize stack pointer
000012A0  33FC 0000 00004626       323              MOVE.W  #0,COUNTER
000012A8  347C 7000                324              MOVEA.W #STACK,A2
000012AC  163C 0020                325              MOVE.B  #' ',D3
000012B0  6100 2A52                326              BSR     PUSH_STACK
000012B4  6100 2A4E                327              BSR     PUSH_STACK
000012B8  6100 2A4A                328              BSR     PUSH_STACK
000012BC                           329              
000012BC                           330              * clear registers for temp storage
000012BC  4280                     331              CLR.L   D0                   
000012BE  4281                     332              CLR.L   D1                   
000012C0  227C 00000000            333              MOVEA.L #0, A1                
000012C6                           334              
000012C6  220D                     335              MOVE.L  A5,D1                   * check to see if the address is fully read
000012C8  23CD 0000426E            336              MOVE.L  A5,S_ADDR_HX
000012CE  B2B9 00004272            337              CMP.L   E_ADDR_HX,D1
000012D4  6C00 214E                338              BGE     REPEAT                  * go to repeat for user action
000012D8                           339  
000012D8  43F9 000042C9            340              LEA     TMPOUTPUT,A1            * allocate storage to hold output
000012DE  143C 0008                341              MOVE.B  #8,D2                   * set the output size
000012E2  4EB8 11FE                342              JSR     HEX2ASCII               
000012E6  43F9 000042C9            343              LEA     TMPOUTPUT,A1
000012EC  103C 000E                344              MOVE.B  #14,D0
000012F0  4E4F                     345              TRAP    #15
000012F2                           346              
000012F2  4285                     347              CLR.L    D5                      * clear the processing data
000012F4  3A1D                     348              MOVE.W  (A5)+,D5                 * copy the currently processing data in A5 over to D5
000012F6                           349                                               * advance the current instruction pointer to the next
000012F6                           350                                               * instruction in memory
000012F6                           351  *----------------------------------------*
000012F6                           352  * Registers          
000012F6                           353  * [D1] - COPY OF D5
000012F6                           354  * [D5] - DATA TO BE PROCESSED
000012F6                           355  * [D6] - COUNTER FOR LINES PROCESSED
000012F6                           356  *
000012F6                           357  * [D4]      - ERROR FLAG BEFORE PRINTING
000012F6                           358  * [STACK]   - PRINTS PROCESS DATA
000012F6                           359  * [COUNTER] - KEEPS TRACK OF STACK INCREMENT
000012F6                           360  *
000012F6                           361  * [A1] - USED FOR JUMPING/PRINTING
000012F6                           362  *
000012F6                           363  *----------------------------------------*
000012F6                           364  
000012F6                           365              
000012F6                           366              *Processing the first 4 most significant bits 
000012F6  2205                     367              MOVE.L  D5,D1                    * copy the current processing data to D1
000012F8  143C 000C                368              MOVE.B  #12,D2                   * shift to right by 12 bits
000012FC  E469                     369              LSR.W   D2,D1                    * [D2] Temporarily used D2 for shifting bits
000012FE  C2FC 0006                370              MULU    #6,D1                    * form offset
00001302  43F9 00001370            371              LEA     JMPTABLE,A1              * index into table
00001308  4EB1 1000                372              JSR     0(A1,D1)                 * jump indirect with index
0000130C                           373              
0000130C                           374              *SECURED EA*
0000130C  B83C 0001                375              CMP.B   #1,D4                    * ERROR FLAG CHECK [ERROR WHEN D4 == 1]
00001310  6600 0012                376              BNE     OUTPUT_PROCESSED_DATA    * PRINTS PROCESSED OP-CODE & EA
00001314  6100 01E8                377              BSR     OP_DATA                  * PRINT ERROR MESSAGE "DATA"
00001318  6100 2A56                378              BSR     CLEAR_STACK              * CLEARS THE STACK 
0000131C  183C 0000                379              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
00001320  6000 0022                380              BRA     DISPLAY_30_LINES         * GO TO LAST STEP
00001324                           381             
00001324                           382  OUTPUT_PROCESSED_DATA       
00001324  163C 000D                383              MOVE.B  #$D,D3                  *carriage return
00001328  6100 29DA                384              BSR     PUSH_STACK
0000132C  163C 000A                385              MOVE.B  #$A,D3                  *new line feed
00001330  6100 29D2                386              BSR     PUSH_STACK
00001334  163C 0000                387              MOVE.B  #$0,D3                  *null
00001338  6100 29CA                388              BSR     PUSH_STACK
0000133C                           389       
0000133C  6100 29A2                390              BSR     PRINT_QUEUE
00001340  183C 0000                391              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
00001344                           392  DISPLAY_30_LINES
00001344                           393              * display 30 lines per page
00001344  5206                     394              ADDI.B  #1,D6
00001346  0C06 001E                395              CMPI.B  #30,D6
0000134A  6C00 0006                396              BGE     NEXTLINES
0000134E  6000 FF50                397              BRA     MAIN
00001352                           398            
00001352                           399  *---------------------------------------------------------------------------*
00001352                           400  * NEXTLINES: receive input from user to print the next 30 lines
00001352                           401  *---------------------------------------------------------------------------*  
00001352  4206                     402  NEXTLINES   CLR.B   D6
00001354  43F9 000040C5            403              LEA     DISP_NEXT,A1
0000135A  103C 000E                404              MOVE.B  #14,D0
0000135E  4E4F                     405              TRAP    #15
00001360  43F9 00004279            406              LEA     TMPINPUT,A1
00001366  103C 0002                407              MOVE.B  #2,D0
0000136A  4E4F                     408              TRAP    #15
0000136C  4EF8 12A0                409              JMP     MAIN
00001370                           410    
00001370                           411  *---------------------------------------------------------------------------*
00001370                           412  * JMPTABLE: OP code jump/branch table used to decode and display opcodes
00001370                           413  *---------------------------------------------------------------------------*  
00001370  4EF9 000013D0            414  JMPTABLE    JMP     OP0000  * CMPI/ORI/BTST/EORI/SUBI/BTST                  *CMPI -
00001376  4EF9 0000171A            415              JMP     OP0001  * MOVE.B                                        *FINISHED - JOSEPH
0000137C  4EF9 00001788            416              JMP     OP0010  * MOVE.L/MOVEA.L                                *FINISHED - JOSEPH
00001382  4EF9 00001886            417              JMP     OP0011  * MOVE.W/MOVEA.W                                *FINISHED - JOSEPH
00001388  4EF9 00001982            418              JMP     OP0100  * MOVEM/LEA/NEG/NOT/JSR/RTS                     *FINISHED - JOSEPH
0000138E  4EF9 00001BD8            419              JMP     OP0101  * ADDQ                                          *FINISHED - JOSEPH
00001394  4EF9 00001D7C            420              JMP     OP0110  * BRA/Bcc (BEQ/BNE/BLT/BHI)                     *NOT FINISHED - LYN
0000139A  4EF9 00001E0A            421              JMP     OP0111  * MOVEQ (unassigned)                            *FINISHED - NEVER ASSIGNED
000013A0  4EF9 00001E0E            422              JMP     OP1000  * DIVS                                          *FINISHED - JOSEPH
000013A6  4EF9 00001F16            423              JMP     OP1001  * SUB/SUBA                                      *FINISHED - JOSEPH
000013AC  4EF9 000022D2            424              JMP     OP1010  * Unassigned                                    *FINISHED - NEVER ASSIGNED
000013B2  4EF9 000022D6            425              JMP     OP1011  * CMP/EOR/CMPA                                  *FINISHED - JOSEPH
000013B8  4EF9 000025D6            426              JMP     OP1100  * MULS/AND                                      *FINISHED - JOSEPH
000013BE  4EF9 00002928            427              JMP     OP1101  * ADD/ADDA                                      *FINISHED - JOSEPH
000013C4  4EF9 00002D04            428              JMP     OP1110  * LSR/LSL/ASR/ASL/ROL/ROR
000013CA  4EF9 00002FB2            429              JMP     OP1111  * Special/Reserved
000013D0                           430              
000013D0                           431  *---------------------------------------------------------------------------*
000013D0                           432  * OP0000: decode CMPI/ORI/BTST/SUBI/EORI
000013D0                           433  *---------------------------------------------------------------------------*           
000013D0                           434  OP0000                                                                                  
000013D0  4281                     435              CLR.L   D1          * to temporarily store the address to process
000013D2  4280                     436              CLR.L   D0  
000013D4  4284                     437              CLR.L   D4                 
000013D6  227C 00000000            438              MOVEA.L #0, A1                
000013DC                           439              * Check for ORI (0000 0000 xx (size) xxx (EA mode) xxx(EA reg)
000013DC                           440              * Check if bit 11,10,9,8 are 0000)
000013DC  2205                     441              MOVE.L  D5,D1
000013DE  0281 00000F00            442              ANDI.L  #$0F00,D1
000013E4  0C81 00000000            443              CMPI.L  #$0000,D1   * if they are 0000, it is ORI
000013EA  6700 024A                444              BEQ     OP_ORI
000013EE                           445  
000013EE                           446              * check for CMPI (0000 1100 xx (size) xxx (EA mode) xxx (EA reg)
000013EE                           447              * check if bit 11,10,9,8 are 1100
000013EE  4281                     448              CLR.L   D1
000013F0  2205                     449              MOVE.L  D5,D1
000013F2  0281 00000F00            450              ANDI.L  #$0F00,D1
000013F8  0C81 00000C00            451              CMPI.L  #$0C00,D1
000013FE  6700 014A                452              BEQ     OP0000_CMPI
00001402                           453              
00001402                           454              * check for SUBI
00001402  4281                     455              CLR.L   D1
00001404  2205                     456              MOVE.L  D5,D1
00001406  0281 00000F00            457              ANDI.L  #$0F00,D1
0000140C  0C81 00000400            458              CMPI.L  #$0400,D1
00001412  6700 0094                459              BEQ     OP_SUBI
00001416                           460              
00001416                           461              * check for EORI
00001416  4281                     462              CLR.L   D1
00001418  2205                     463              MOVE.L  D5,D1
0000141A  0281 00000F00            464              ANDI.L  #$0F00,D1
00001420  0C81 00000A00            465              CMPI.L  #$0A00,D1
00001426  6700 002A                466              BEQ     OP_EORI
0000142A                           467              
0000142A                           468              * check for BTST
0000142A  4281                     469              CLR.L   D1
0000142C  2205                     470              MOVE.L  D5,D1
0000142E  EA99                     471              ROR.L   #5,D1
00001430  0281 00000008            472              ANDI.L  #$8,D1
00001436  0C01 0008                473              CMPI.B  #8,D1
0000143A  6700 0008                474              BEQ     OP_BTST
0000143E                           475  
0000143E                           476              * OP0000 series other than ORI/CMPI/BTST/EORI
0000143E  4EF9 000014FE            477              JMP     OP_DATA
00001444                           478              
00001444                           479  *---------------------------------------------------------------------------*
00001444                           480  * OP_BTST: display BTST
00001444                           481  *---------------------------------------------------------------------------* 
00001444  43F9 00004352            482  OP_BTST     LEA     DISP_BTST,A1
0000144A  103C 000E                483              MOVE.B  #14,D0
0000144E  4E4F                     484              TRAP    #15
00001450  4E75                     485              RTS
00001452                           486  
00001452                           487  *---------------------------------------------------------------------------*
00001452                           488  * OP_EORI: decode and display EORI
00001452                           489  *---------------------------------------------------------------------------* 
00001452                           490  OP_EORI
00001452  4281                     491              CLR.L   D1
00001454  4284                     492              CLR.L   D4
00001456  2205                     493              MOVE.L  D5,D1
00001458  EC99                     494              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
0000145A  0C01 0000                495              CMPI.B  #0,D1
0000145E  6700 0012                496              BEQ     OP_EORI_B    * size is byte
00001462  0C01 0001                497              CMPI.B  #1,D1
00001466  6700 001C                498              BEQ     OP_EORI_W    * size is word
0000146A  0C01 0002                499              CMPI.B  #2,D1
0000146E  6700 0026                500              BEQ     OP_EORI_L    * size is long
00001472                           501  
00001472                           502  OP_EORI_B    * size is byte    
00001472  183C 0000                503              MOVE.B  #0,D4
00001476  43F9 00004334            504              LEA     DISP_EORI_B,A1
0000147C  103C 000E                505              MOVE.B  #14,D0
00001480  4E4F                     506              TRAP    #15
00001482  4E75                     507              RTS
00001484                           508              
00001484                           509  OP_EORI_W    * size is word
00001484  183C 0001                510              MOVE.B  #1,D4
00001488  43F9 0000433E            511              LEA     DISP_EORI_W,A1
0000148E  103C 000E                512              MOVE.B  #14,D0
00001492  4E4F                     513              TRAP    #15
00001494  4E75                     514              RTS
00001496                           515              
00001496                           516  OP_EORI_L    * size is long
00001496  183C 0002                517              MOVE.B  #2,D4
0000149A  43F9 00004348            518              LEA     DISP_EORI_L,A1
000014A0  103C 000E                519              MOVE.B  #14,D0
000014A4  4E4F                     520              TRAP    #15
000014A6  4E75                     521              RTS
000014A8                           522              
000014A8                           523  *---------------------------------------------------------------------------*
000014A8                           524  * OP_SUBI: decode SUBI.B/.W/.L
000014A8                           525  *---------------------------------------------------------------------------* 
000014A8                           526  OP_SUBI
000014A8  4281                     527              CLR.L   D1
000014AA  4284                     528              CLR.L   D4
000014AC  2205                     529              MOVE.L  D5,D1
000014AE  EC99                     530              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000014B0  0C01 0000                531              CMPI.B  #0,D1
000014B4  6700 0012                532              BEQ     OP_SUBI_B    * size is byte
000014B8  0C01 0001                533              CMPI.B  #1,D1
000014BC  6700 001C                534              BEQ     OP_SUBI_W    * size is word
000014C0  0C01 0002                535              CMPI.B  #2,D1
000014C4  6700 0026                536              BEQ     OP_SUBI_L    * size is long
000014C8                           537  
000014C8                           538  OP_SUBI_B    * size is byte    
000014C8  183C 0000                539              MOVE.B  #0,D4
000014CC  43F9 00004440            540              LEA     DISP_SUBI_B,A1
000014D2  103C 000E                541              MOVE.B  #14,D0
000014D6  4E4F                     542              TRAP    #15
000014D8  4E75                     543              RTS
000014DA                           544              
000014DA                           545  OP_SUBI_W    * size is word
000014DA  183C 0001                546              MOVE.B  #1,D4
000014DE  43F9 0000444A            547              LEA     DISP_SUBI_W,A1
000014E4  103C 000E                548              MOVE.B  #14,D0
000014E8  4E4F                     549              TRAP    #15
000014EA  4E75                     550              RTS
000014EC                           551              
000014EC                           552  OP_SUBI_L    * size is long
000014EC  183C 0002                553              MOVE.B  #2,D4
000014F0  43F9 00004454            554              LEA     DISP_SUBI_L,A1
000014F6  103C 000E                555              MOVE.B  #14,D0
000014FA  4E4F                     556              TRAP    #15
000014FC  4E75                     557              RTS
000014FE                           558              
000014FE                           559  *---------------------------------------------------------------------------*
000014FE                           560  * OP_DATA : unidentified opcode
000014FE                           561  *---------------------------------------------------------------------------* 
000014FE                           562  OP_DATA
000014FE  4280                     563              CLR.L   D0                   
00001500  4281                     564              CLR.L   D1     
00001502  4284                     565              CLR.L   D4                    
00001504  227C 00000000            566              MOVEA.L #0, A1             
0000150A  4287                     567              CLR.L   D7
0000150C  1E3C 0001                568              MOVE.B  #1,D7                   * error flag is true
00001510                           569              
00001510  43F9 00004378            570              LEA     DISP_DATA,A1
00001516  103C 000E                571              MOVE.B  #14,D0
0000151A  4E4F                     572              TRAP    #15
0000151C                           573              
0000151C  4EF9 00001522            574              JMP     EA_DATA
00001522                           575             
00001522                           576             
00001522                           577  *---------------------------------------------------------------------------*
00001522                           578  * EA_DATA
00001522                           579  *---------------------------------------------------------------------------*       
00001522  43F9 000042C9            580  EA_DATA     LEA     TMPOUTPUT,A1    * load the temporarily stored output address
00001528  2205                     581              MOVE.L  D5,D1           * transfer the processing data to D1
0000152A  7404                     582              MOVE.L  #4,D2           * set to word size
0000152C  4EB8 11FE                583              JSR     HEX2ASCII       * prepare output in ascii
00001530  43F9 000045EB            584              LEA     DISP_HEX,A1     * display $ symbol
00001536  103C 000E                585              MOVE.B  #14,D0      
0000153A  4E4F                     586              TRAP    #15
0000153C  43F9 000042C9            587              LEA     TMPOUTPUT,A1    * display with a new line
00001542  103C 000D                588              MOVE.B  #13,D0
00001546  4E4F                     589              TRAP    #15
00001548                           590  
00001548  4E75                     591              RTS
0000154A                           592              
0000154A                           593  *---------------------------------------------------------------------------*
0000154A                           594  * OP_CMPI : decode CMPI and its size
0000154A                           595  *---------------------------------------------------------------------------*          
0000154A                           596  OP0000_CMPI
0000154A                           597  
0000154A                           598              
0000154A                           599   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000154A  13FC 0000 0000462A       600             MOVE.B   #$00,DEST_REGISTER_FORMAT
00001552  13FC 0082 0000462B       601             MOVE.B   #$82,SRC_REGISTER_FORMAT
0000155A                           602             
0000155A                           603             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000155A  13FC 00B9 0000462D       604             MOVE.B   #$B9,GET_DST_START_END
00001562  13FC 0020 0000462E       605             MOVE.B   #$20,GET_SRC_START_END
0000156A                           606             
0000156A                           607              *CLEAR D3
0000156A  4283                     608              CLR.L   D3
0000156C                           609              *LOAD STACK WITH THIS OPMODE
0000156C  6100 2796                610              BSR     PUSH_STACK
00001570  163C 0043                611              MOVE.B  #'C',D3
00001574  6100 278E                612              BSR     PUSH_STACK
00001578  163C 004D                613              MOVE.B  #'M',D3
0000157C  6100 2786                614              BSR     PUSH_STACK
00001580  163C 0050                615              MOVE.B  #'P',D3
00001584  6100 277E                616              BSR     PUSH_STACK
00001588  163C 0049                617              MOVE.B  #'I',D3
0000158C  6100 2776                618              BSR     PUSH_STACK
00001590  163C 002E                619              MOVE.B  #'.',D3
00001594  6100 276E                620              BSR     PUSH_STACK
00001598                           621              
00001598                           622              *FIGURE OUT SIZE*
00001598                           623              *00 = BYTE
00001598                           624              *01 = WORD
00001598                           625              *10 = LONG
00001598                           626              * BITS 7&6
00001598                           627              
00001598                           628              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
00001598  2205                     629              MOVE.L  D5,D1
0000159A  EC99                     630              ROR.L   #6,D1
0000159C  0281 00000003            631              ANDI.L  #$03,D1
000015A2  0C01 0000                632              CMPI.B  #%00,D1
000015A6  6700 0018                633              BEQ     OP0000_CMPI_B
000015AA  0C01 0001                634              CMPI.B  #%01,D1
000015AE  6700 0038                635              BEQ     OP0000_CMPI_W
000015B2  0281 00000003            636              ANDI.L  #$03,D1
000015B8  0C01 0002                637              CMPI.B  #%10,D1
000015BC  6700 0052                638              BEQ     OP0000_CMPI_L
000015C0                           639  
000015C0                           640  OP0000_CMPI_B
000015C0  163C 0042                641              MOVE.B  #'B',D3
000015C4  6100 273E                642              BSR     PUSH_STACK
000015C8                           643  *GET DATA FROM ADDQ AND PRINT #0-8
000015C8                           644              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000015C8  0285 0000F03F            645              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000015CE  0685 000001C0            646              ADDI.L  #$01C0,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
000015D4  6100 22C0                647              BSR     GET_EA_EA_DEST
000015D8  163C 002C                648              MOVE.B  #',',D3
000015DC  6100 2726                649              BSR     PUSH_STACK
000015E0  6100 1E84                650              BSR     GET_EA_EA_SRC
000015E4  6000 004E                651              BRA     OP0000_RETURN_CMPI
000015E8                           652  
000015E8                           653  OP0000_CMPI_W
000015E8  163C 0057                654              MOVE.B  #'W',D3
000015EC  6100 2716                655              BSR     PUSH_STACK
000015F0                           656  *GET DATA FROM ADDQ AND PRINT #0-8
000015F0                           657              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000015F0  0285 0000F03F            658              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000015F6  0685 000001C0            659              ADDI.L  #$01C0,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
000015FC  6100 2298                660              BSR     GET_EA_EA_DEST
00001600  163C 002C                661              MOVE.B  #',',D3
00001604  6100 26FE                662              BSR     PUSH_STACK
00001608  6100 1E5C                663              BSR     GET_EA_EA_SRC
0000160C  6000 0026                664              BRA     OP0000_RETURN_CMPI
00001610                           665  
00001610                           666  OP0000_CMPI_L
00001610  163C 004C                667              MOVE.B  #'L',D3
00001614  6100 26EE                668              BSR     PUSH_STACK
00001618                           669              *GET DATA FROM ADDQ AND PRINT #0-8
00001618                           670              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001618  0285 0000F03F            671              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000161E  0685 000003C0            672              ADDI.L  #$03C0,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
00001624  6100 2270                673              BSR     GET_EA_EA_DEST
00001628  163C 002C                674              MOVE.B  #',',D3
0000162C  6100 26D6                675              BSR     PUSH_STACK
00001630  6100 1E34                676              BSR     GET_EA_EA_SRC
00001634                           677              
00001634                           678  OP0000_RETURN_CMPI
00001634                           679  
00001634                           680  
00001634                           681              
00001634  4E75                     682              RTS
00001636                           683   
00001636                           684  *---------------------------------------------------------------------------*
00001636                           685  * OP_ORI : decode ORI and its size
00001636                           686  *---------------------------------------------------------------------------* 
00001636                           687  OP_ORI      
00001636                           688           
00001636                           689   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001636  13FC 0000 0000462A       690             MOVE.B   #$00,DEST_REGISTER_FORMAT
0000163E  13FC 0082 0000462B       691             MOVE.B   #$82,SRC_REGISTER_FORMAT
00001646                           692             
00001646                           693             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001646  13FC 00B9 0000462D       694             MOVE.B   #$B9,GET_DST_START_END
0000164E  13FC 0020 0000462E       695             MOVE.B   #$20,GET_SRC_START_END
00001656                           696             
00001656                           697              *CLEAR D3
00001656  4283                     698              CLR.L   D3
00001658                           699              *LOAD STACK WITH THIS OPMODE
00001658  6100 26AA                700              BSR     PUSH_STACK
0000165C  163C 004F                701              MOVE.B  #'O',D3
00001660  6100 26A2                702              BSR     PUSH_STACK
00001664  163C 0052                703              MOVE.B  #'R',D3
00001668  6100 269A                704              BSR     PUSH_STACK
0000166C  163C 0049                705              MOVE.B  #'I',D3
00001670  6100 2692                706              BSR     PUSH_STACK
00001674  163C 002E                707              MOVE.B  #'.',D3
00001678  6100 268A                708              BSR     PUSH_STACK
0000167C                           709              
0000167C                           710              *FIGURE OUT SIZE*
0000167C                           711              *00 = BYTE
0000167C                           712              *01 = WORD
0000167C                           713              *10 = LONG
0000167C                           714              * BITS 7&6
0000167C                           715              
0000167C                           716              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
0000167C  2205                     717              MOVE.L  D5,D1
0000167E  EC99                     718              ROR.L   #6,D1
00001680  0281 00000003            719              ANDI.L  #$03,D1
00001686  0C01 0000                720              CMPI.B  #%00,D1
0000168A  6700 0018                721              BEQ     OP0000_ORI_B
0000168E  0C01 0001                722              CMPI.B  #%01,D1
00001692  6700 0038                723              BEQ     OP0000_ORI_W
00001696  0281 00000003            724              ANDI.L  #$03,D1
0000169C  0C01 0002                725              CMPI.B  #%10,D1
000016A0  6700 0052                726              BEQ     OP0000_ORI_L
000016A4                           727  
000016A4                           728  OP0000_ORI_B
000016A4  163C 0042                729              MOVE.B  #'B',D3
000016A8  6100 265A                730              BSR     PUSH_STACK
000016AC                           731  *GET DATA FROM ADDQ AND PRINT #0-8
000016AC                           732              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000016AC  0285 0000F03F            733              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000016B2  0685 000001C0            734              ADDI.L  #$01C0,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
000016B8  6100 21DC                735              BSR     GET_EA_EA_DEST
000016BC  163C 002C                736              MOVE.B  #',',D3
000016C0  6100 2642                737              BSR     PUSH_STACK
000016C4  6100 1DA0                738              BSR     GET_EA_EA_SRC
000016C8  6000 004E                739              BRA     OP0000_RETURN_ORI
000016CC                           740  
000016CC                           741  OP0000_ORI_W
000016CC  163C 0057                742              MOVE.B  #'W',D3
000016D0  6100 2632                743              BSR     PUSH_STACK
000016D4                           744  *GET DATA FROM ADDQ AND PRINT #0-8
000016D4                           745              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000016D4  0285 0000F03F            746              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000016DA  0685 000001C0            747              ADDI.L  #$01C0,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
000016E0  6100 21B4                748              BSR     GET_EA_EA_DEST
000016E4  163C 002C                749              MOVE.B  #',',D3
000016E8  6100 261A                750              BSR     PUSH_STACK
000016EC  6100 1D78                751              BSR     GET_EA_EA_SRC
000016F0  6000 0026                752              BRA     OP0000_RETURN_ORI
000016F4                           753  
000016F4                           754  OP0000_ORI_L
000016F4  163C 004C                755              MOVE.B  #'L',D3
000016F8  6100 260A                756              BSR     PUSH_STACK
000016FC                           757              *GET DATA FROM ADDQ AND PRINT #0-8
000016FC                           758              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000016FC  0285 0000F03F            759              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001702  0685 000003C0            760              ADDI.L  #$03C0,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
00001708  6100 218C                761              BSR     GET_EA_EA_DEST
0000170C  163C 002C                762              MOVE.B  #',',D3
00001710  6100 25F2                763              BSR     PUSH_STACK
00001714  6100 1D50                764              BSR     GET_EA_EA_SRC
00001718                           765              
00001718                           766  OP0000_RETURN_ORI
00001718                           767  
00001718                           768  
00001718                           769              
00001718  4E75                     770              RTS
0000171A                           771  
0000171A                           772          
0000171A                           773  *---------------------------------------------------------------------------*
0000171A                           774  * OP0001: MOVE.B
0000171A                           775  *---------------------------------------------------------------------------*
0000171A                           776  OP0001      
0000171A  4EF9 00001720            777              JMP     OP_MOVE_B   * display MOVE.B
00001720                           778              
00001720                           779  *---------------------------------------------------------------------------*
00001720                           780  * OP_MOVE_B: display MOVE_B and proceed to EA
00001720                           781  *---------------------------------------------------------------------------*
00001720                           782  OP_MOVE_B                                                                       
00001720                           783             
00001720                           784             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001720  13FC 0082 0000462A       785             MOVE.B   #$82,DEST_REGISTER_FORMAT
00001728  13FC 0000 0000462B       786             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001730                           787             
00001730                           788             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001730  13FC 00B9 0000462D       789             MOVE.B   #$B9,GET_DST_START_END
00001738  13FC 0020 0000462E       790             MOVE.B   #$20,GET_SRC_START_END
00001740                           791             
00001740                           792              *CLEAR D3
00001740  4283                     793              CLR.L   D3
00001742                           794              *LOAD STACK WITH THIS OPMODE
00001742  6100 25C0                795              BSR     PUSH_STACK
00001746  163C 004D                796              MOVE.B  #'M',D3
0000174A  6100 25B8                797              BSR     PUSH_STACK
0000174E  163C 004F                798              MOVE.B  #'O',D3
00001752  6100 25B0                799              BSR     PUSH_STACK
00001756  163C 0056                800              MOVE.B  #'V',D3
0000175A  6100 25A8                801              BSR     PUSH_STACK
0000175E  163C 0045                802              MOVE.B  #'E',D3
00001762  6100 25A0                803              BSR     PUSH_STACK
00001766  163C 002E                804              MOVE.B  #'.',D3
0000176A  6100 2598                805              BSR     PUSH_STACK
0000176E  163C 0042                806              MOVE.B  #'B',D3
00001772  6100 2590                807              BSR     PUSH_STACK
00001776                           808              
00001776  6100 1CEE                809              BSR     GET_EA_EA_SRC
0000177A  163C 002C                810              MOVE.B  #',',D3
0000177E  6100 2584                811              BSR     PUSH_STACK
00001782  6100 2112                812              BSR     GET_EA_EA_DEST
00001786                           813              
00001786  4E75                     814              RTS
00001788                           815              
00001788                           816             
00001788                           817  *---------------------------------------------------------------------------*
00001788                           818  * OP0010: decode MOVE.L/MOVEA.L
00001788                           819  *---------------------------------------------------------------------------*
00001788                           820  OP0010      
00001788  183C 0002                821              MOVE.B  #2,D4
0000178C  4280                     822              CLR.L   D0                     
0000178E  4281                     823              CLR.L   D1                      
00001790  227C 00000000            824              MOVEA.L #0, A1                 
00001796                           825              
00001796  2205                     826              MOVE.L  D5,D1
00001798  EA99                     827              ROR.L   #5,D1
0000179A  0281 0000000E            828              ANDI.L  #$E,D1
000017A0  0C01 0002                829              CMPI.B  #2,D1
000017A4  6700 0070                830              BEQ     OP_MOVEA_L
000017A8                           831  
000017A8  4EF9 000017AE            832              JMP     OP_MOVE_L
000017AE                           833             
000017AE                           834  
000017AE                           835  *---------------------------------------------------------------------------*
000017AE                           836  * OP_MOVE_L: display MOVE_L and proceed to EA
000017AE                           837  *---------------------------------------------------------------------------*
000017AE                           838  OP_MOVE_L   
000017AE                           839             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000017AE  13FC 0082 0000462A       840             MOVE.B   #$82,DEST_REGISTER_FORMAT
000017B6  13FC 0000 0000462B       841             MOVE.B   #$00,SRC_REGISTER_FORMAT
000017BE                           842             
000017BE                           843             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000017BE  13FC 00B9 0000462D       844             MOVE.B   #$B9,GET_DST_START_END
000017C6  13FC 0020 0000462E       845             MOVE.B   #$20,GET_SRC_START_END
000017CE                           846             
000017CE                           847              *CLEAR D3
000017CE  4283                     848              CLR.L   D3
000017D0                           849              *LOAD STACK WITH THIS OPMODE
000017D0  6100 2532                850              BSR     PUSH_STACK
000017D4  163C 004D                851              MOVE.B  #'M',D3
000017D8  6100 252A                852              BSR     PUSH_STACK
000017DC  163C 004F                853              MOVE.B  #'O',D3
000017E0  6100 2522                854              BSR     PUSH_STACK
000017E4  163C 0056                855              MOVE.B  #'V',D3
000017E8  6100 251A                856              BSR     PUSH_STACK
000017EC  163C 0045                857              MOVE.B  #'E',D3
000017F0  6100 2512                858              BSR     PUSH_STACK
000017F4  163C 002E                859              MOVE.B  #'.',D3
000017F8  6100 250A                860              BSR     PUSH_STACK
000017FC  163C 004C                861              MOVE.B  #'L',D3
00001800  6100 2502                862              BSR     PUSH_STACK
00001804                           863              
00001804  6100 1C60                864              BSR     GET_EA_EA_SRC
00001808  163C 002C                865              MOVE.B  #',',D3
0000180C  6100 24F6                866              BSR     PUSH_STACK
00001810  6100 2084                867              BSR     GET_EA_EA_DEST
00001814                           868              
00001814  4E75                     869              RTS
00001816                           870  
00001816                           871  
00001816                           872  *---------------------------------------------------------------------------*
00001816                           873  * OP_MOVEA_L: display MOVEA_L and proceed to EA
00001816                           874  *---------------------------------------------------------------------------*
00001816                           875  OP_MOVEA_L 
00001816                           876             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001816  13FC 00FD 0000462A       877             MOVE.B   #$FD,DEST_REGISTER_FORMAT
0000181E  13FC 0000 0000462B       878             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001826                           879             
00001826                           880             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001826  13FC 00B9 0000462D       881             MOVE.B   #$B9,GET_DST_START_END
0000182E  13FC 0020 0000462E       882             MOVE.B   #$20,GET_SRC_START_END
00001836                           883             
00001836                           884              *CLEAR D3
00001836  4283                     885              CLR.L   D3
00001838                           886              *LOAD STACK WITH THIS OPMODE
00001838  6100 24CA                887              BSR     PUSH_STACK
0000183C  163C 004D                888              MOVE.B  #'M',D3
00001840  6100 24C2                889              BSR     PUSH_STACK
00001844  163C 004F                890              MOVE.B  #'O',D3
00001848  6100 24BA                891              BSR     PUSH_STACK
0000184C  163C 0056                892              MOVE.B  #'V',D3
00001850  6100 24B2                893              BSR     PUSH_STACK
00001854  163C 0045                894              MOVE.B  #'E',D3
00001858  6100 24AA                895              BSR     PUSH_STACK           
0000185C  163C 0041                896              MOVE.B  #'A',D3
00001860  6100 24A2                897              BSR     PUSH_STACK
00001864  163C 002E                898              MOVE.B  #'.',D3
00001868  6100 249A                899              BSR     PUSH_STACK
0000186C  163C 004C                900              MOVE.B  #'L',D3
00001870  6100 2492                901              BSR     PUSH_STACK
00001874                           902              
00001874  6100 1BF0                903              BSR     GET_EA_EA_SRC
00001878  163C 002C                904              MOVE.B  #',',D3
0000187C  6100 2486                905              BSR     PUSH_STACK
00001880  6100 2014                906              BSR     GET_EA_EA_DEST
00001884                           907              
00001884  4E75                     908              RTS
00001886                           909  
00001886                           910              
00001886                           911  *---------------------------------------------------------------------------*
00001886                           912  * OP0011: decode MOVE.W/MOVEA.W
00001886                           913  *---------------------------------------------------------------------------*
00001886                           914  OP0011      
00001886  4280                     915              CLR.L   D0                      
00001888  4281                     916              CLR.L   D1  
0000188A  4284                     917              CLR.L   D4                   
0000188C  227C 00000000            918              MOVEA.L #0, A1 
00001892                           919                
00001892  2205                     920              MOVE.L  D5,D1
00001894  EC99                     921              ROR.L   #6,D1
00001896  0281 00000007            922              ANDI.L  #$07,D1
0000189C  0C01 0001                923              CMPI.B  #1,D1
000018A0  6700 0070                924              BEQ     OP_MOVEA_W
000018A4                           925              
000018A4  4EF9 000018AA            926              JMP     OP_MOVE_W
000018AA                           927            
000018AA                           928  *---------------------------------------------------------------------------*
000018AA                           929  * OP_MOVE_W: display MOVE_W and proceed to EA
000018AA                           930  *---------------------------------------------------------------------------*
000018AA                           931  OP_MOVE_W   
000018AA                           932             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000018AA  13FC 0082 0000462A       933             MOVE.B   #$82,DEST_REGISTER_FORMAT
000018B2  13FC 0000 0000462B       934             MOVE.B   #$00,SRC_REGISTER_FORMAT
000018BA                           935             
000018BA                           936             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000018BA  13FC 00B9 0000462D       937             MOVE.B   #$B9,GET_DST_START_END
000018C2  13FC 0020 0000462E       938             MOVE.B   #$20,GET_SRC_START_END
000018CA                           939             
000018CA                           940              *CLEAR D3
000018CA  4283                     941              CLR.L   D3
000018CC                           942              *LOAD STACK WITH THIS OPMODE
000018CC  6100 2436                943              BSR     PUSH_STACK
000018D0  163C 004D                944              MOVE.B  #'M',D3
000018D4  6100 242E                945              BSR     PUSH_STACK
000018D8  163C 004F                946              MOVE.B  #'O',D3
000018DC  6100 2426                947              BSR     PUSH_STACK
000018E0  163C 0056                948              MOVE.B  #'V',D3
000018E4  6100 241E                949              BSR     PUSH_STACK
000018E8  163C 0045                950              MOVE.B  #'E',D3
000018EC  6100 2416                951              BSR     PUSH_STACK
000018F0  163C 002E                952              MOVE.B  #'.',D3
000018F4  6100 240E                953              BSR     PUSH_STACK
000018F8  163C 0057                954              MOVE.B  #'W',D3
000018FC  6100 2406                955              BSR     PUSH_STACK
00001900                           956              
00001900  6100 1B64                957              BSR     GET_EA_EA_SRC
00001904  163C 002C                958              MOVE.B  #',',D3
00001908  6100 23FA                959              BSR     PUSH_STACK
0000190C  6100 1F88                960              BSR     GET_EA_EA_DEST
00001910                           961              
00001910  4E75                     962              RTS
00001912                           963  
00001912                           964  *---------------------------------------------------------------------------*
00001912                           965  * OP_MOVEA_W: display MOVEA and proceed to EA
00001912                           966  *---------------------------------------------------------------------------*
00001912                           967  OP_MOVEA_W 
00001912                           968             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001912  13FC 00FD 0000462A       969             MOVE.B   #$FD,DEST_REGISTER_FORMAT
0000191A  13FC 0000 0000462B       970             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001922                           971             
00001922                           972             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001922  13FC 00B9 0000462D       973             MOVE.B   #$B9,GET_DST_START_END
0000192A  13FC 0020 0000462E       974             MOVE.B   #$20,GET_SRC_START_END
00001932                           975             
00001932                           976              *CLEAR D3
00001932  4283                     977              CLR.L   D3
00001934                           978              *LOAD STACK WITH THIS OPMODE
00001934  6100 23CE                979              BSR     PUSH_STACK
00001938  163C 004D                980              MOVE.B  #'M',D3
0000193C  6100 23C6                981              BSR     PUSH_STACK
00001940  163C 004F                982              MOVE.B  #'O',D3
00001944  6100 23BE                983              BSR     PUSH_STACK
00001948  163C 0056                984              MOVE.B  #'V',D3
0000194C  6100 23B6                985              BSR     PUSH_STACK
00001950  163C 0045                986              MOVE.B  #'E',D3
00001954  6100 23AE                987              BSR     PUSH_STACK           
00001958  163C 0041                988              MOVE.B  #'A',D3
0000195C  6100 23A6                989              BSR     PUSH_STACK
00001960  163C 002E                990              MOVE.B  #'.',D3
00001964  6100 239E                991              BSR     PUSH_STACK
00001968  163C 0057                992              MOVE.B  #'W',D3
0000196C  6100 2396                993              BSR     PUSH_STACK
00001970                           994              
00001970  6100 1AF4                995              BSR     GET_EA_EA_SRC
00001974  163C 002C                996              MOVE.B  #',',D3
00001978  6100 238A                997              BSR     PUSH_STACK
0000197C  6100 1F18                998              BSR     GET_EA_EA_DEST
00001980                           999            
00001980  4E75                    1000              RTS
00001982                          1001  *---------------------------------------------------------------------------*
00001982                          1002  * OP0100: decode MOVEM/LEA/NEG/JSR/RTS/NOT
00001982                          1003  *---------------------------------------------------------------------------*
00001982                          1004  OP0100
00001982  4280                    1005              CLR.L   D0                      
00001984  4281                    1006              CLR.L   D1  
00001986  4284                    1007              CLR.L   D4                      
00001988  227C 00000000           1008              MOVEA.L #0, A1                  
0000198E  2205                    1009              MOVE.L  D5,D1  
00001990                          1010              
00001990                          1011              * check for RTS
00001990  0C41 4E75               1012              CMPI.W  #$4E75,D1   * 0100 1110 0111 0101
00001994  6700 0228               1013              BEQ     OP_RTS
00001998                          1014              
00001998                          1015              * check for JSR     * 0100 1110 10 xxx (ea mode) xxx (ea reg)
00001998  4281                    1016              CLR.L   D1 
0000199A  2205                    1017              MOVE.L  D5,D1  
0000199C  0241 0F00               1018              ANDI.W  #$0F00,D1
000019A0  0C41 0E00               1019              CMPI.W  #$0E00,D1
000019A4  6700 0204               1020              BEQ     OP_JSR
000019A8                          1021  
000019A8                          1022              * check for NEG     * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
000019A8  4281                    1023              CLR.L   D1 
000019AA  2205                    1024              MOVE.L  D5,D1  
000019AC  0241 0F00               1025              ANDI.W  #$0F00,D1
000019B0  0C41 0400               1026              CMPI.W  #$0400,D1
000019B4  6700 00E8               1027              BEQ     OP_NEG
000019B8                          1028              
000019B8                          1029              * check for NOT     * 0100 0110 xx (size) xxx (ea mode) xxx (ea reg)
000019B8  4281                    1030              CLR.L   D1 
000019BA  2205                    1031              MOVE.L  D5,D1  
000019BC  0241 0F00               1032              ANDI.W  #$0F00,D1
000019C0  0C41 0600               1033              CMPI.W  #$0600,D1
000019C4  6700 015E               1034              BEQ     OP_NOT
000019C8                          1035              
000019C8                          1036              * check for LEA     * 0100 xxx (reg) 111 xxx (ea mode) xxx (ea reg)
000019C8  4281                    1037              CLR.L   D1 
000019CA  2205                    1038              MOVE.L  D5,D1  
000019CC  EC99                    1039              ROR.L   #6,D1
000019CE  0281 00000007           1040              ANDI.L  #7,D1
000019D4  0C81 00000007           1041              CMPI.L  #7,D1
000019DA  6700 0054               1042              BEQ     OP_LEA
000019DE                          1043              
000019DE                          1044              * check for MOVEM   * 0100 1 x 001 x (size) xxx (ea mode) xxx (ea reg)
000019DE  4281                    1045              CLR.L   D1 
000019E0  2205                    1046              MOVE.L  D5,D1  
000019E2  EB59                    1047              ROL.W   #5,D1
000019E4  0C01 0001               1048              CMPI.B  #1,D1
000019E8  6600 FB14               1049              BNE     OP_DATA
000019EC  E959                    1050              ROL.W   #4,D1
000019EE  0C01 0001               1051              CMPI.B  #1,D1
000019F2  6600 FB0A               1052              BNE     OP_DATA
000019F6  E359                    1053              ROL.W   #1,D1
000019F8  0C01 0000               1054              CMPI.B  #0,D1
000019FC  6700 000E               1055              BEQ     OP_MOVEM_W
00001A00  0C01 0001               1056              CMPI.B  #1,D1
00001A04  6700 0018               1057              BEQ     OP_MOVEM_L
00001A08  4EF8 14FE               1058              JMP     OP_DATA
00001A0C                          1059  
00001A0C                          1060  *---------------------------------------------------------------------------*
00001A0C                          1061  * OP_MOVEM_W: display MOVEM_W
00001A0C                          1062  *---------------------------------------------------------------------------*    
00001A0C                          1063  OP_MOVEM_W  
00001A0C  183C 0001               1064              MOVE.B  #1,D4
00001A10  43F9 000043E9           1065              LEA     DISP_MOVEM_W,A1
00001A16  103C 000E               1066              MOVE.B  #14,D0
00001A1A  4E4F                    1067              TRAP    #15
00001A1C  4E75                    1068              RTS
00001A1E                          1069  
00001A1E                          1070  *---------------------------------------------------------------------------*
00001A1E                          1071  * OP_MOVEM_L: display MOVEM_L
00001A1E                          1072  *---------------------------------------------------------------------------*
00001A1E                          1073  OP_MOVEM_L  
00001A1E  183C 0002               1074              MOVE.B  #2,D4
00001A22  43F9 000043F4           1075              LEA     DISP_MOVEM_L,A1
00001A28  103C 000E               1076              MOVE.B  #14,D0
00001A2C  4E4F                    1077              TRAP    #15
00001A2E  4E75                    1078              RTS
00001A30                          1079     
00001A30                          1080  *---------------------------------------------------------------------------*
00001A30                          1081  * OP_LEA: decode and display LEA
00001A30                          1082  *---------------------------------------------------------------------------*
00001A30                          1083  OP_LEA      
00001A30  4281                    1084               CLR.L   D1       
00001A32  4284                    1085              CLR.L   D4                   
00001A34  227C 00000000           1086              MOVEA.L #0, A1              
00001A3A  2205                    1087              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
00001A3C                          1088              *CLEAR D3
00001A3C  4283                    1089              CLR.L   D3
00001A3E                          1090  
00001A3E                          1091  OP_LEA_DN_EA_OR_EA_DN 
00001A3E                          1092              *LOAD STACK WITH THIS OPMODE
00001A3E  6100 22C4               1093              BSR     PUSH_STACK
00001A42  163C 004C               1094              MOVE.B  #'L',D3
00001A46  6100 22BC               1095              BSR     PUSH_STACK
00001A4A  163C 0045               1096              MOVE.B  #'E',D3
00001A4E  6100 22B4               1097              BSR     PUSH_STACK
00001A52  163C 0041               1098              MOVE.B  #'A',D3
00001A56  6100 22AC               1099              BSR     PUSH_STACK
00001A5A  2205                    1100              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00001A5C                          1101          
00001A5C                          1102  
00001A5C                          1103  OP_PRINT_L_LEA
00001A5C                          1104                          
00001A5C                          1105              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001A5C  13FC 0000 0000462A      1106              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001A64  13FC 009B 0000462B      1107              MOVE.B   #$9B,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001A6C                          1108             
00001A6C                          1109              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001A6C  13FC 00B9 0000462D      1110              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001A74  13FC 0020 0000462E      1111              MOVE.B   #$20,GET_SRC_START_END
00001A7C                          1112  
00001A7C                          1113              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001A7C  0285 0000FE3F           1114              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001A82  0685 00000040           1115              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00001A88                          1116  
00001A88  6100 19DC               1117              BSR     GET_EA_EA_SRC      *GETS <ea>
00001A8C  163C 002C               1118              MOVE.B  #',',D3
00001A90  6100 2272               1119              BSR     PUSH_STACK           
00001A94  6100 1E00               1120              BSR     GET_EA_EA_DEST       *GETS Dn    
00001A98                          1121  
00001A98                          1122              
00001A98  6000 0002               1123              BRA     OP_LEA_RETURN
00001A9C                          1124              
00001A9C                          1125  OP_LEA_RETURN
00001A9C  4E75                    1126              RTS
00001A9E                          1127              
00001A9E                          1128  
00001A9E                          1129  
00001A9E                          1130  *---------------------------------------------------------------------------*
00001A9E                          1131  * OP_NEG: decode and display NEG 
00001A9E                          1132  *---------------------------------------------------------------------------*
00001A9E                          1133  OP_NEG      * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
00001A9E  4281                    1134              CLR.L   D1
00001AA0  4284                    1135              CLR.L   D4
00001AA2  2205                    1136              MOVE.L  D5,D1
00001AA4                          1137              
00001AA4                          1138              *CLEAR D3
00001AA4  4283                    1139              CLR.L   D3
00001AA6                          1140              *LOAD STACK WITH THIS OPMODE
00001AA6  6100 225C               1141              BSR     PUSH_STACK
00001AAA  163C 004E               1142              MOVE.B  #'N',D3
00001AAE  6100 2254               1143              BSR     PUSH_STACK
00001AB2  163C 0045               1144              MOVE.B  #'E',D3
00001AB6  6100 224C               1145              BSR     PUSH_STACK
00001ABA  163C 0047               1146              MOVE.B  #'G',D3
00001ABE  6100 2244               1147              BSR     PUSH_STACK
00001AC2  163C 002E               1148              MOVE.B  #'.',D3
00001AC6  6100 223C               1149              BSR     PUSH_STACK
00001ACA                          1150              
00001ACA                          1151              
00001ACA  EC99                    1152              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001ACC  0281 00000007           1153              ANDI.L  #$07,D1
00001AD2                          1154              
00001AD2  0C01 0000               1155              CMPI.B  #0,D1
00001AD6  6700 0012               1156              BEQ     OP_NEG_B    * size is byte
00001ADA  0C01 0001               1157              CMPI.B  #1,D1
00001ADE  6700 0016               1158              BEQ     OP_NEG_W    * size is word
00001AE2  0C01 0002               1159              CMPI.B  #2,D1
00001AE6  6700 001A               1160              BEQ     OP_NEG_L    * size is long
00001AEA                          1161                         
00001AEA                          1162  
00001AEA                          1163  OP_NEG_B    * size is byte   
00001AEA  163C 0042               1164              MOVE.B  #'B',D3
00001AEE  6100 2214               1165              BSR     PUSH_STACK
00001AF2  6000 001A               1166              BRA     OP_NEG_PRINT_EA
00001AF6                          1167  
00001AF6                          1168              
00001AF6                          1169  OP_NEG_W    * size is word
00001AF6  163C 0057               1170              MOVE.B  #'W',D3
00001AFA  6100 2208               1171              BSR     PUSH_STACK
00001AFE  6000 000E               1172              BRA     OP_NEG_PRINT_EA
00001B02                          1173  
00001B02                          1174              
00001B02                          1175  OP_NEG_L    * size is long
00001B02  163C 004C               1176              MOVE.B  #'L',D3
00001B06  6100 21FC               1177              BSR     PUSH_STACK
00001B0A  6000 0002               1178              BRA     OP_NEG_PRINT_EA
00001B0E                          1179  
00001B0E                          1180  
00001B0E                          1181  OP_NEG_PRINT_EA
00001B0E                          1182   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001B0E  13FC 0082 0000462B      1183             MOVE.B   #$82,SRC_REGISTER_FORMAT
00001B16                          1184             
00001B16                          1185             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001B16  13FC 0020 0000462E      1186             MOVE.B   #$20,GET_SRC_START_END
00001B1E                          1187                         
00001B1E                          1188  
00001B1E  6100 1946               1189              BSR     GET_EA_EA_SRC
00001B22                          1190              
00001B22  4E75                    1191              RTS
00001B24                          1192  
00001B24                          1193  *---------------------------------------------------------------------------*
00001B24                          1194  * OP_NOT: decode and display NOT 
00001B24                          1195  *---------------------------------------------------------------------------*
00001B24                          1196  OP_NOT
00001B24  4281                    1197              CLR.L   D1
00001B26  4284                    1198              CLR.L   D4
00001B28  2205                    1199              MOVE.L  D5,D1
00001B2A                          1200              
00001B2A                          1201              *CLEAR D3
00001B2A  4283                    1202              CLR.L   D3
00001B2C                          1203              *LOAD STACK WITH THIS OPMODE
00001B2C  6100 21D6               1204              BSR     PUSH_STACK
00001B30  163C 004E               1205              MOVE.B  #'N',D3
00001B34  6100 21CE               1206              BSR     PUSH_STACK
00001B38  163C 004F               1207              MOVE.B  #'O',D3
00001B3C  6100 21C6               1208              BSR     PUSH_STACK
00001B40  163C 0054               1209              MOVE.B  #'T',D3
00001B44  6100 21BE               1210              BSR     PUSH_STACK
00001B48  163C 002E               1211              MOVE.B  #'.',D3
00001B4C  6100 21B6               1212              BSR     PUSH_STACK
00001B50                          1213              
00001B50                          1214              
00001B50  EC99                    1215              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001B52  0281 00000007           1216              ANDI.L  #$07,D1
00001B58                          1217              
00001B58  0C01 0000               1218              CMPI.B  #0,D1
00001B5C  6700 0012               1219              BEQ     OP_NOT_B    * size is byte
00001B60  0C01 0001               1220              CMPI.B  #1,D1
00001B64  6700 0016               1221              BEQ     OP_NOT_W    * size is word
00001B68  0C01 0002               1222              CMPI.B  #2,D1
00001B6C  6700 001A               1223              BEQ     OP_NOT_L    * size is long
00001B70                          1224                         
00001B70                          1225  
00001B70                          1226  OP_NOT_B    * size is byte   
00001B70  163C 0042               1227              MOVE.B  #'B',D3
00001B74  6100 218E               1228              BSR     PUSH_STACK
00001B78  6000 001A               1229              BRA     OP_NOT_PRINT_EA
00001B7C                          1230  
00001B7C                          1231              
00001B7C                          1232  OP_NOT_W    * size is word
00001B7C  163C 0057               1233              MOVE.B  #'W',D3
00001B80  6100 2182               1234              BSR     PUSH_STACK
00001B84  6000 000E               1235              BRA     OP_NOT_PRINT_EA
00001B88                          1236  
00001B88                          1237              
00001B88                          1238  OP_NOT_L    * size is long
00001B88  163C 004C               1239              MOVE.B  #'L',D3
00001B8C  6100 2176               1240              BSR     PUSH_STACK
00001B90  6000 0002               1241              BRA     OP_NOT_PRINT_EA
00001B94                          1242  
00001B94                          1243  
00001B94                          1244  OP_NOT_PRINT_EA
00001B94                          1245   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001B94  13FC 0082 0000462B      1246             MOVE.B   #$82,SRC_REGISTER_FORMAT
00001B9C                          1247             
00001B9C                          1248             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001B9C  13FC 0020 0000462E      1249             MOVE.B   #$20,GET_SRC_START_END
00001BA4  6100 18C0               1250              BSR     GET_EA_EA_SRC
00001BA8                          1251              
00001BA8  4E75                    1252              RTS
00001BAA                          1253  
00001BAA                          1254  
00001BAA                          1255  *---------------------------------------------------------------------------*
00001BAA                          1256  * OP_JSR: display JSR     
00001BAA                          1257  *---------------------------------------------------------------------------*
00001BAA  43F9 000043A5           1258  OP_JSR      LEA     DISP_JSR,A1
00001BB0  103C 000E               1259              MOVE.B  #14,D0
00001BB4  4E4F                    1260              TRAP    #15
00001BB6  4EB9 00002FB6           1261              JSR     EA_NOSRC
00001BBC                          1262  
00001BBC  4E75                    1263              RTS
00001BBE                          1264  
00001BBE                          1265  *---------------------------------------------------------------------------*
00001BBE                          1266  * OP_RTS: display RTS     
00001BBE                          1267  *---------------------------------------------------------------------------* 
00001BBE                          1268  OP_RTS      
00001BBE  163C 0052               1269              MOVE.B #'R',D3
00001BC2  6100 2140               1270              BSR     PUSH_STACK
00001BC6  163C 0054               1271              MOVE.B #'T',D3
00001BCA  6100 2138               1272              BSR     PUSH_STACK
00001BCE  163C 0053               1273              MOVE.B #'S',D3
00001BD2  6100 2130               1274              BSR     PUSH_STACK
00001BD6  4E75                    1275              RTS
00001BD8                          1276  
00001BD8                          1277  *---------------------------------------------------------------------------*
00001BD8                          1278  * OP0101: decode ADDQ
00001BD8                          1279  *---------------------------------------------------------------------------* 
00001BD8                          1280  OP0101      
00001BD8                          1281             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001BD8  13FC 0082 0000462A      1282             MOVE.B   #$82,DEST_REGISTER_FORMAT
00001BE0  13FC 0080 0000462B      1283             MOVE.B   #$80,SRC_REGISTER_FORMAT
00001BE8                          1284             
00001BE8                          1285             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001BE8  13FC 00B9 0000462D      1286             MOVE.B   #$B9,GET_DST_START_END
00001BF0  13FC 0020 0000462E      1287             MOVE.B   #$20,GET_SRC_START_END
00001BF8                          1288             
00001BF8                          1289              *CLEAR D3
00001BF8  4283                    1290              CLR.L   D3
00001BFA                          1291              *LOAD STACK WITH THIS OPMODE
00001BFA  6100 2108               1292              BSR     PUSH_STACK
00001BFE  163C 0041               1293              MOVE.B  #'A',D3
00001C02  6100 2100               1294              BSR     PUSH_STACK
00001C06  163C 0044               1295              MOVE.B  #'D',D3
00001C0A  6100 20F8               1296              BSR     PUSH_STACK
00001C0E  163C 0044               1297              MOVE.B  #'D',D3
00001C12  6100 20F0               1298              BSR     PUSH_STACK
00001C16  163C 0051               1299              MOVE.B  #'Q',D3
00001C1A  6100 20E8               1300              BSR     PUSH_STACK
00001C1E  163C 002E               1301              MOVE.B  #'.',D3
00001C22  6100 20E0               1302              BSR     PUSH_STACK
00001C26                          1303              
00001C26                          1304              *FIGURE OUT SIZE*
00001C26                          1305              *00 = BYTE
00001C26                          1306              *01 = WORD
00001C26                          1307              *10 = LONG
00001C26                          1308              * BITS 7&6
00001C26                          1309              
00001C26                          1310              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
00001C26  2205                    1311              MOVE.L  D5,D1
00001C28  EC99                    1312              ROR.L   #6,D1
00001C2A  0281 00000003           1313              ANDI.L  #$03,D1
00001C30  0C01 0000               1314              CMPI.B  #%00,D1
00001C34  6700 001E               1315              BEQ     OP0101_ADDQ_B
00001C38  0281 00000003           1316              ANDI.L  #$03,D1
00001C3E  0C01 0001               1317              CMPI.B  #%01,D1
00001C42  6700 001C               1318              BEQ     OP0101_ADDQ_W
00001C46  0281 00000003           1319              ANDI.L  #$03,D1
00001C4C  0C01 0002               1320              CMPI.B  #%10,D1
00001C50  6700 001A               1321              BEQ     OP0101_ADDQ_L
00001C54                          1322            
00001C54                          1323  OP0101_ADDQ_B
00001C54                          1324              
00001C54  163C 0042               1325              MOVE.B  #'B',D3
00001C58  6100 20AA               1326              BSR     PUSH_STACK
00001C5C  6000 0016               1327              BRA     OP0101_RETURN
00001C60                          1328  OP0101_ADDQ_W
00001C60                          1329              
00001C60  163C 0057               1330              MOVE.B  #'W',D3
00001C64  6100 209E               1331              BSR     PUSH_STACK
00001C68  6000 000A               1332              BRA     OP0101_RETURN
00001C6C                          1333  OP0101_ADDQ_L
00001C6C                          1334              
00001C6C  163C 004C               1335              MOVE.B  #'L',D3
00001C70  6100 2092               1336              BSR     PUSH_STACK
00001C74                          1337  OP0101_RETURN            
00001C74                          1338  
00001C74                          1339              
00001C74                          1340  *GET DATA FROM ADDQ AND PRINT #0-8
00001C74  163C 0020               1341              MOVE.B  #' ',D3
00001C78  6100 208A               1342              BSR     PUSH_STACK
00001C7C  163C 0023               1343              MOVE.B  #'#',D3
00001C80  6100 2082               1344              BSR     PUSH_STACK 
00001C84                          1345  
00001C84                          1346                       
00001C84                          1347              *GET DATA #   
00001C84  2205                    1348              MOVE.L  D5,D1
00001C86  EC99                    1349              ROR.L   #6,D1            
00001C88  E699                    1350              ROR.L   #3,D1
00001C8A  0281 00000007           1351              ANDI.L  #$07,D1
00001C90                          1352              
00001C90  0C01 0000               1353              CMPI.B  #%000,D1
00001C94  6700 009A               1354              BEQ     OP0101_ADDQ_B_8
00001C98  0C01 0001               1355              CMPI.B  #%001,D1
00001C9C  6700 003E               1356              BEQ     OP0101_ADDQ_B_1
00001CA0  0C01 0002               1357              CMPI.B  #%010,D1
00001CA4  6700 0042               1358              BEQ     OP0101_ADDQ_B_2
00001CA8  0C01 0003               1359              CMPI.B  #%011,D1
00001CAC  6700 0046               1360              BEQ     OP0101_ADDQ_B_3
00001CB0  0C01 0004               1361              CMPI.B  #%100,D1
00001CB4  6700 004A               1362              BEQ     OP0101_ADDQ_B_4
00001CB8  0C01 0005               1363              CMPI.B  #%101,D1
00001CBC  6700 004E               1364              BEQ     OP0101_ADDQ_B_5
00001CC0  0C01 0006               1365              CMPI.B  #%110,D1
00001CC4  6700 0052               1366              BEQ     OP0101_ADDQ_B_6
00001CC8  0C01 0007               1367              CMPI.B  #%111,D1
00001CCC  6700 0056               1368              BEQ     OP0101_ADDQ_B_7
00001CD0                          1369              
00001CD0                          1370  OP0101_ADDQ_B_0
00001CD0  163C 0030               1371              MOVE.B  #'0',D3
00001CD4  6100 202E               1372              BSR     PUSH_STACK
00001CD8  6000 005E               1373              BRA     OP0101_RETURN2            
00001CDC                          1374  OP0101_ADDQ_B_1
00001CDC  163C 0031               1375              MOVE.B  #'1',D3
00001CE0  6100 2022               1376              BSR     PUSH_STACK
00001CE4  6000 0052               1377              BRA     OP0101_RETURN2            
00001CE8                          1378  OP0101_ADDQ_B_2
00001CE8  163C 0032               1379              MOVE.B  #'2',D3
00001CEC  6100 2016               1380              BSR     PUSH_STACK
00001CF0  6000 0046               1381              BRA     OP0101_RETURN2            
00001CF4                          1382  OP0101_ADDQ_B_3
00001CF4  163C 0033               1383              MOVE.B  #'3',D3
00001CF8  6100 200A               1384              BSR     PUSH_STACK
00001CFC  6000 003A               1385              BRA     OP0101_RETURN2            
00001D00                          1386  OP0101_ADDQ_B_4
00001D00  163C 0034               1387              MOVE.B  #'4',D3
00001D04  6100 1FFE               1388              BSR     PUSH_STACK
00001D08  6000 002E               1389              BRA     OP0101_RETURN2            
00001D0C                          1390  OP0101_ADDQ_B_5
00001D0C  163C 0035               1391              MOVE.B  #'5',D3
00001D10  6100 1FF2               1392              BSR     PUSH_STACK
00001D14  6000 0022               1393              BRA     OP0101_RETURN2
00001D18                          1394  OP0101_ADDQ_B_6
00001D18  163C 0036               1395              MOVE.B  #'6',D3
00001D1C  6100 1FE6               1396              BSR     PUSH_STACK
00001D20  6000 0016               1397              BRA     OP0101_RETURN2
00001D24                          1398  OP0101_ADDQ_B_7
00001D24  163C 0037               1399              MOVE.B  #'7',D3
00001D28  6100 1FDA               1400              BSR     PUSH_STACK
00001D2C  6000 000A               1401              BRA     OP0101_RETURN2
00001D30                          1402  
00001D30                          1403  OP0101_ADDQ_B_8
00001D30  163C 0038               1404              MOVE.B  #'8',D3
00001D34  6100 1FCE               1405              BSR     PUSH_STACK
00001D38                          1406              
00001D38                          1407  OP0101_RETURN2            
00001D38  163C 002C               1408              MOVE.B  #',',D3
00001D3C  6100 1FC6               1409              BSR     PUSH_STACK
00001D40  6100 1724               1410              BSR     GET_EA_EA_SRC
00001D44                          1411              
00001D44  4E75                    1412              RTS
00001D46                          1413  
00001D46                          1414  
00001D46                          1415              
00001D46                          1416  *---------------------------------------------------------------------------*
00001D46                          1417  * OP_ADDQ: display ADDQ
00001D46                          1418  *---------------------------------------------------------------------------*              
00001D46                          1419  OP_ADDQ_B    * size is byte   
00001D46  183C 0000               1420              MOVE.B  #0,D4 
00001D4A  43F9 000043FF           1421              LEA     DISP_ADDQ_B,A1
00001D50  103C 000E               1422              MOVE.B  #14,D0
00001D54  4E4F                    1423              TRAP    #15
00001D56  4E75                    1424              RTS
00001D58                          1425              
00001D58                          1426  OP_ADDQ_W    * size is word
00001D58  183C 0001               1427              MOVE.B  #1,D4
00001D5C  43F9 00004409           1428              LEA     DISP_ADDQ_W,A1
00001D62  103C 000E               1429              MOVE.B  #14,D0
00001D66  4E4F                    1430              TRAP    #15
00001D68  4E75                    1431              RTS
00001D6A                          1432              
00001D6A                          1433  OP_ADDQ_L    * size is long
00001D6A  183C 0002               1434              MOVE.B  #2,D4
00001D6E  43F9 00004413           1435              LEA     DISP_ADDQ_L,A1
00001D74  103C 000E               1436              MOVE.B  #14,D0
00001D78  4E4F                    1437              TRAP    #15
00001D7A  4E75                    1438              RTS
00001D7C                          1439  
00001D7C                          1440  *---------------------------------------------------------------------------*
00001D7C                          1441  * OP0110: decode BRA/BEQ/BNE/BLT/BHI
00001D7C                          1442  *---------------------------------------------------------------------------*              
00001D7C  4280                    1443  OP0110      CLR.L   D0                  
00001D7E  4281                    1444              CLR.L   D1   
00001D80  4284                    1445              CLR.L   D4                 
00001D82  227C 00000000           1446              MOVEA.L #0,A1
00001D88  2205                    1447              MOVE.L  D5, D1                
00001D8A  0281 000000FF           1448              ANDI.L  #$00FF, D1              * Get 8-bit displacement 
00001D90  2205                    1449              MOVE.L  D5,D1                  
00001D92  0281 00000F00           1450              ANDI.L  #$0F00,D1
00001D98                          1451                 
00001D98  0C41 0000               1452              CMPI.W  #$0000,D1               * Check for BRA
00001D9C  6700 0050               1453              BEQ     OP_BRA                  
00001DA0                          1454                          
00001DA0  0C41 0D00               1455              CMPI.W  #$0D00,D1               * Check for BLT
00001DA4  6700 0056               1456              BEQ     OP_BLT      
00001DA8                          1457  
00001DA8  0C41 0700               1458              CMPI.W  #$0700,D1               * Check for BEQ
00001DAC  6700 0032               1459              BEQ     OP_BEQ      
00001DB0                          1460  
00001DB0  0C41 0600               1461              CMPI.W  #$0600,D1               * Check for BNE
00001DB4  6700 001C               1462              BEQ     OP_BNE  
00001DB8                          1463              
00001DB8  0C41 0200               1464              CMPI.W  #$0200,D1               * Check for BHI
00001DBC  6700 0006               1465              BEQ     OP_BHI
00001DC0                          1466  
00001DC0  4EF8 14FE               1467              JMP     OP_DATA
00001DC4                          1468              
00001DC4  43F9 000045CE           1469  OP_BHI      LEA     DISP_BHI,A1             
00001DCA  103C 000E               1470              MOVE.B  #14,D0
00001DCE  4E4F                    1471              TRAP    #15
00001DD0  4E75                    1472              RTS
00001DD2                          1473  
00001DD2  43F9 000045C7           1474  OP_BNE      LEA     DISP_BNE,A1             
00001DD8  103C 000E               1475              MOVE.B  #14,D0
00001DDC  4E4F                    1476              TRAP    #15
00001DDE  4E75                    1477              RTS
00001DE0                          1478  
00001DE0  43F9 000045C0           1479  OP_BEQ      LEA     DISP_BEQ,A1             
00001DE6  103C 000E               1480              MOVE.B  #14,D0
00001DEA  4E4F                    1481              TRAP    #15
00001DEC  4E75                    1482              RTS          
00001DEE                          1483                          
00001DEE  43F9 000045B2           1484  OP_BRA      LEA     DISP_BRA,A1             
00001DF4  103C 000E               1485              MOVE.B  #14,D0
00001DF8  4E4F                    1486              TRAP    #15
00001DFA  4E75                    1487              RTS
00001DFC                          1488              
00001DFC  43F9 000045B9           1489  OP_BLT      LEA     DISP_BLT,A1          
00001E02  103C 000E               1490              MOVE.B  #14,D0
00001E06  4E4F                    1491              TRAP    #15
00001E08  4E75                    1492              RTS
00001E0A                          1493     
00001E0A                          1494  *---------------------------------------------------------------------------*
00001E0A                          1495  * OP0111 : MOVEQ not required
00001E0A                          1496  *---------------------------------------------------------------------------*           
00001E0A  4EF8 14FE               1497  OP0111      JMP     OP_DATA
00001E0E                          1498             
00001E0E                          1499  *---------------------------------------------------------------------------*
00001E0E                          1500  * OP1000 : decode DIVS
00001E0E                          1501  *---------------------------------------------------------------------------*           
00001E0E                          1502  OP1000                           
00001E0E  4281                    1503              CLR.L   D1       
00001E10  4284                    1504              CLR.L   D4                   
00001E12  227C 00000000           1505              MOVEA.L #0, A1              
00001E18  2205                    1506              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
00001E1A                          1507              *CLEAR D3
00001E1A  4283                    1508              CLR.L   D3
00001E1C                          1509  
00001E1C                          1510  OP1000_DIVS_DN_EA_OR_EA_DN 
00001E1C                          1511              *LOAD STACK WITH THIS OPMODE
00001E1C  6100 1EE6               1512              BSR     PUSH_STACK
00001E20  163C 0044               1513              MOVE.B  #'D',D3
00001E24  6100 1EDE               1514              BSR     PUSH_STACK
00001E28  163C 0049               1515              MOVE.B  #'I',D3
00001E2C  6100 1ED6               1516              BSR     PUSH_STACK
00001E30  163C 0056               1517              MOVE.B  #'V',D3
00001E34  6100 1ECE               1518              BSR     PUSH_STACK
00001E38  163C 0053               1519              MOVE.B  #'S',D3
00001E3C  6100 1EC6               1520              BSR     PUSH_STACK
00001E40  163C 002E               1521              MOVE.B  #'.',D3
00001E44  6100 1EBE               1522              BSR     PUSH_STACK
00001E48                          1523              
00001E48  2205                    1524              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00001E4A                          1525              
00001E4A                          1526  OP1000_EA_DN_DIVS
00001E4A                          1527              *BITS (7 TO 6) 
00001E4A                          1528              *00 = .B
00001E4A                          1529              *01 = .W
00001E4A                          1530              *10 = .L 
00001E4A  2205                    1531              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00001E4C  EC99                    1532              ROR.L   #6,D1
00001E4E  0281 00000003           1533              ANDI.L  #$03,D1
00001E54  0C81 00000003           1534              CMPI.L  #%11,D1 *EQUALS .W
00001E5A  6700 0014               1535              BEQ     OP1000_PRINT_W_DIVS
00001E5E  0C81 00000000           1536              CMPI.L  #%00,D1 *EQUALS .L
00001E64  6700 0052               1537              BEQ     OP1000_PRINT_L_DIVS
00001E68                          1538              
00001E68  183C 0001               1539              MOVE.B  #1,D4               *ERROR READ
00001E6C  6000 0092               1540              BRA     OP1000_DIVS_RETURN
00001E70                          1541  OP1000_PRINT_W_DIVS
00001E70  163C 0057               1542              MOVE.B  #'W',D3
00001E74  6100 1E8E               1543              BSR     PUSH_STACK
00001E78                          1544  
00001E78                          1545              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001E78  13FC 0000 0000462A      1546              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001E80  13FC 0000 0000462B      1547              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001E88                          1548             
00001E88                          1549              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001E88  13FC 00B9 0000462D      1550              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001E90  13FC 0020 0000462E      1551              MOVE.B   #$20,GET_SRC_START_END
00001E98                          1552  
00001E98                          1553             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001E98  0285 0000FE3F           1554              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001E9E  0685 00000000           1555              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00001EA4                          1556  
00001EA4                          1557              
00001EA4  6100 15C0               1558              BSR     GET_EA_EA_SRC      *GETS <ea>
00001EA8  163C 002C               1559              MOVE.B  #',',D3
00001EAC  6100 1E56               1560              BSR     PUSH_STACK
00001EB0  6100 19E4               1561              BSR     GET_EA_EA_DEST       *GETS Dn    
00001EB4                          1562              
00001EB4  6000 004A               1563              BRA     OP1000_DIVS_RETURN
00001EB8                          1564  OP1000_PRINT_L_DIVS
00001EB8  163C 004C               1565              MOVE.B  #'L',D3
00001EBC  6100 1E46               1566              BSR     PUSH_STACK
00001EC0                          1567              
00001EC0                          1568              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001EC0  13FC 0000 0000462A      1569              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001EC8  13FC 0000 0000462B      1570              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001ED0                          1571             
00001ED0                          1572              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001ED0  13FC 00B9 0000462D      1573              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001ED8  13FC 0020 0000462E      1574              MOVE.B   #$20,GET_SRC_START_END
00001EE0                          1575  
00001EE0                          1576              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001EE0  0285 0000FE3F           1577              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001EE6  0685 00000000           1578              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00001EEC                          1579  
00001EEC                          1580                     
00001EEC  6100 1578               1581              BSR     GET_EA_EA_SRC      *GETS <ea>
00001EF0  163C 002C               1582              MOVE.B  #',',D3
00001EF4  6100 1E0E               1583              BSR     PUSH_STACK                  
00001EF8  6100 199C               1584              BSR     GET_EA_EA_DEST       *GETS Dn    
00001EFC                          1585  
00001EFC                          1586              
00001EFC  6000 0002               1587              BRA     OP1000_DIVS_RETURN
00001F00                          1588              
00001F00                          1589  OP1000_DIVS_RETURN
00001F00  4E75                    1590              RTS
00001F02                          1591              
00001F02                          1592  
00001F02                          1593  
00001F02                          1594  *---------------------------------------------------------------------------*
00001F02                          1595  * OP_DIVS: display DIVS and proceed to EA
00001F02                          1596  *---------------------------------------------------------------------------*  
00001F02  43F9 0000441D           1597  OP_DIVS     LEA     DISP_DIVS,A1
00001F08  103C 000E               1598              MOVE.B  #14,D0
00001F0C  4E4F                    1599              TRAP    #15
00001F0E  4EF9 00002FCA           1600              JMP     EA_ARITH
00001F14                          1601  
00001F14  4E75                    1602              RTS
00001F16                          1603              
00001F16                          1604  *---------------------------------------------------------------------------*
00001F16                          1605  * OP1001: decode SUB/SUBA
00001F16                          1606  *---------------------------------------------------------------------------*      
00001F16                          1607  OP1001      
00001F16  4280                    1608              CLR.L   D0                  
00001F18  4281                    1609              CLR.L   D1       
00001F1A  4284                    1610              CLR.L   D4                   
00001F1C  227C 00000000           1611              MOVEA.L #0, A1              
00001F22  2205                    1612              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
00001F24                          1613              
00001F24                          1614              *CLEAR D3
00001F24  4283                    1615              CLR.L   D3
00001F26                          1616              
00001F26                          1617              
00001F26                          1618              
00001F26                          1619              **INTEGRATING SUB.W/.L INTO THIS CODE**
00001F26  2205                    1620              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00001F28                          1621              *BITS (INDEX 8) 
00001F28                          1622              *0 = ADD.B/W/L <EA>,Dn
00001F28                          1623              *1 = ADD.B/W/L Dn,<EA> 
00001F28  EC99                    1624              ROR.L   #6,D1
00001F2A  0281 00000007           1625              ANDI.L  #$07,D1                 *MASKS WITH 00000111
00001F30  0C81 00000007           1626              CMPI.L  #$07,D1                 *IF EQUALS <ea>,Dn
00001F36  6700 0010               1627              BEQ     OP1001_SUBA_L            *BRANCHES TO ADDA.L
00001F3A  0C81 00000003           1628              CMPI.L  #$03,D1                 *IF EQUALS <ea>,Dn
00001F40  6700 0078               1629              BEQ     OP1001_SUBA_W           *BRANCHES TO ADDA.W
00001F44  6000 00E6               1630              BRA     OP1001_DETERMINE_DN_EA_OR_EA_DN         *ELSE CHECK ADD.B/.W/.L
00001F48                          1631              
00001F48                          1632  OP1001_SUBA_L
00001F48                          1633              *LOAD STACK WITH THIS OPMODE
00001F48  6100 1DBA               1634              BSR     PUSH_STACK
00001F4C  163C 0053               1635              MOVE.B  #'S',D3
00001F50  6100 1DB2               1636              BSR     PUSH_STACK
00001F54  163C 0055               1637              MOVE.B  #'U',D3
00001F58  6100 1DAA               1638              BSR     PUSH_STACK
00001F5C  163C 0042               1639              MOVE.B  #'B',D3
00001F60  6100 1DA2               1640              BSR     PUSH_STACK
00001F64  163C 0041               1641              MOVE.B  #'A',D3
00001F68  6100 1D9A               1642              BSR     PUSH_STACK
00001F6C  163C 002E               1643              MOVE.B  #'.',D3
00001F70  6100 1D92               1644              BSR     PUSH_STACK
00001F74  163C 004C               1645              MOVE.B  #'L',D3
00001F78  6100 1D8A               1646              BSR     PUSH_STACK
00001F7C                          1647              
00001F7C                          1648             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001F7C  13FC 0000 0000462A      1649             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001F84  13FC 0000 0000462B      1650             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001F8C                          1651             
00001F8C                          1652             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001F8C  13FC 00B9 0000462D      1653             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001F94  13FC 0020 0000462E      1654             MOVE.B   #$20,GET_SRC_START_END
00001F9C                          1655  
00001F9C                          1656              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001F9C  0285 0000FE3F           1657              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001FA2  0685 00000040           1658              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00001FA8                          1659       
00001FA8                          1660              *PRINT <EA>,AN
00001FA8  6100 14BC               1661              BSR     GET_EA_EA_SRC       *GETS <ea>
00001FAC  163C 002C               1662              MOVE.B  #',',D3
00001FB0  6100 1D52               1663              BSR     PUSH_STACK                     
00001FB4  6100 18E0               1664              BSR     GET_EA_EA_DEST      *GETS Dn
00001FB8                          1665  
00001FB8                          1666              
00001FB8                          1667              
00001FB8  4E75                    1668              RTS
00001FBA                          1669  OP1001_SUBA_W
00001FBA                          1670              *LOAD STACK WITH THIS OPMODE
00001FBA  6100 1D48               1671              BSR     PUSH_STACK
00001FBE  163C 0053               1672              MOVE.B  #'S',D3
00001FC2  6100 1D40               1673              BSR     PUSH_STACK
00001FC6  163C 0055               1674              MOVE.B  #'U',D3
00001FCA  6100 1D38               1675              BSR     PUSH_STACK
00001FCE  163C 0042               1676              MOVE.B  #'B',D3
00001FD2  6100 1D30               1677              BSR     PUSH_STACK
00001FD6  163C 0041               1678              MOVE.B  #'A',D3
00001FDA  6100 1D28               1679              BSR     PUSH_STACK
00001FDE  163C 002E               1680              MOVE.B  #'.',D3
00001FE2  6100 1D20               1681              BSR     PUSH_STACK
00001FE6  163C 0057               1682              MOVE.B  #'W',D3
00001FEA  6100 1D18               1683              BSR     PUSH_STACK
00001FEE                          1684              
00001FEE                          1685             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001FEE  13FC 0000 0000462A      1686             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001FF6  13FC 0000 0000462B      1687             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001FFE                          1688             
00001FFE                          1689             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001FFE  13FC 00B9 0000462D      1690             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002006  13FC 0020 0000462E      1691             MOVE.B   #$20,GET_SRC_START_END
0000200E                          1692  
0000200E                          1693              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000200E  0285 0000FE3F           1694              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002014  0685 00000040           1695              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
0000201A                          1696       
0000201A                          1697              *PRINT <EA>,AN
0000201A  6100 144A               1698              BSR     GET_EA_EA_SRC       *GETS <ea>
0000201E  163C 002C               1699              MOVE.B  #',',D3
00002022  6100 1CE0               1700              BSR     PUSH_STACK                     
00002026  6100 186E               1701              BSR     GET_EA_EA_DEST      *GETS Dn
0000202A                          1702  
0000202A  4E75                    1703              RTS
0000202C                          1704  
0000202C                          1705  OP1001_DETERMINE_DN_EA_OR_EA_DN 
0000202C                          1706              *LOAD STACK WITH THIS OPMODE
0000202C  6100 1CD6               1707              BSR     PUSH_STACK
00002030  163C 0053               1708              MOVE.B  #'S',D3
00002034  6100 1CCE               1709              BSR     PUSH_STACK
00002038  163C 0055               1710              MOVE.B  #'U',D3
0000203C  6100 1CC6               1711              BSR     PUSH_STACK
00002040  163C 0042               1712              MOVE.B  #'B',D3
00002044  6100 1CBE               1713              BSR     PUSH_STACK
00002048  163C 002E               1714              MOVE.B  #'.',D3
0000204C  6100 1CB6               1715              BSR     PUSH_STACK
00002050                          1716              
00002050  2205                    1717              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00002052                          1718              
00002052                          1719              *BITS (INDEX 8) 
00002052                          1720              *0 = ADD.B/W/L <EA>,Dn
00002052                          1721              *1 = ADD.B/W/L Dn,<EA> 
00002052  E099                    1722              ROR.L   #8,D1
00002054  0281 00000001           1723              ANDI.L  #$01,D1     *MASKS WITH 00000001
0000205A  0C81 00000000           1724              CMPI.L  #$00,D1     *IF EQUALS <ea>,Dn
00002060  6700 0102               1725              BEQ     OP1001_EA_DN
00002064                          1726              *else procede to Dn_EA
00002064                          1727              
00002064                          1728  OP1001_DN_EA
00002064                          1729              *BITS (7 TO 6) 
00002064                          1730              *00 = .B
00002064                          1731              *01 = .W
00002064                          1732              *10 = .L 
00002064  2205                    1733              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00002066  EC99                    1734              ROR.L   #6,D1
00002068  0281 00000003           1735              ANDI.L  #$03,D1
0000206E  0C81 00000000           1736              CMPI.L  #$00,D1 *EQUALS .B
00002074  6700 0016               1737              BEQ     OP1001_PRINT_B2
00002078  0C81 00000001           1738              CMPI.L  #$01,D1 *EQUALS .W
0000207E  6700 0054               1739              BEQ     OP1001_PRINT_W2
00002082  0C81 00000002           1740              CMPI.L  #$02,D1 *EQUALS .L
00002088  6700 0092               1741              BEQ     OP1001_PRINT_L2
0000208C                          1742  OP1001_PRINT_B2
0000208C                          1743              *PUSH 'B'
0000208C  163C 0042               1744              MOVE.B  #'B',D3
00002090  6100 1C72               1745              BSR     PUSH_STACK
00002094                          1746             
00002094                          1747              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002094  13FC 0000 0000462A      1748             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000209C  13FC 0083 0000462B      1749             MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000020A4                          1750             
000020A4                          1751             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000020A4  13FC 00B9 0000462D      1752             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000020AC  13FC 0020 0000462E      1753             MOVE.B   #$20,GET_SRC_START_END
000020B4                          1754  
000020B4                          1755              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000020B4  0285 0000FE3F           1756              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000020BA  0685 00000040           1757              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
000020C0                          1758       
000020C0  6100 17D4               1759              BSR     GET_EA_EA_DEST      *GETS Dn
000020C4  163C 002C               1760              MOVE.B  #',',D3
000020C8  6100 1C3A               1761              BSR     PUSH_STACK                     
000020CC  6100 1398               1762              BSR     GET_EA_EA_SRC       *GETS <ea>
000020D0                          1763  
000020D0                          1764              
000020D0  6000 0BA4               1765              BRA     OP1101_ADD_RETURN
000020D4                          1766  OP1001_PRINT_W2
000020D4  163C 0057               1767              MOVE.B  #'W',D3
000020D8  6100 1C2A               1768              BSR     PUSH_STACK
000020DC                          1769  
000020DC                          1770              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000020DC  13FC 0000 0000462A      1771              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000020E4  13FC 0083 0000462B      1772              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000020EC                          1773             
000020EC                          1774              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000020EC  13FC 00B9 0000462D      1775              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000020F4  13FC 0020 0000462E      1776              MOVE.B   #$20,GET_SRC_START_END
000020FC                          1777  
000020FC                          1778              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000020FC  0285 0000FE3F           1779              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002102  0685 00000040           1780              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A An Register (001) 
00002108                          1781  
00002108                          1782        
00002108  6100 178C               1783              BSR     GET_EA_EA_DEST      *GETS Dn
0000210C  163C 002C               1784              MOVE.B  #',',D3
00002110  6100 1BF2               1785              BSR     PUSH_STACK               
00002114  6100 1350               1786              BSR     GET_EA_EA_SRC       *GETS <ea>       
00002118                          1787  
00002118                          1788  
00002118                          1789  
00002118  6000 0B5C               1790              BRA     OP1101_ADD_RETURN
0000211C                          1791  OP1001_PRINT_L2 
0000211C  163C 004C               1792              MOVE.B  #'L',D3
00002120  6100 1BE2               1793              BSR     PUSH_STACK
00002124                          1794              
00002124                          1795              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002124  13FC 0000 0000462A      1796              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000212C  13FC 0083 0000462B      1797              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002134                          1798             
00002134                          1799              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002134  13FC 00B9 0000462D      1800              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000213C  13FC 0020 0000462E      1801              MOVE.B   #$20,GET_SRC_START_END
00002144                          1802  
00002144                          1803             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002144  0285 0000FE3F           1804              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000214A  0685 00000040           1805              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002150                          1806  
00002150                          1807               
00002150  6100 1744               1808              BSR     GET_EA_EA_DEST       *GETS Dn
00002154  163C 002C               1809              MOVE.B  #',',D3
00002158  6100 1BAA               1810              BSR     PUSH_STACK          
0000215C  6100 1308               1811              BSR     GET_EA_EA_SRC        *GETS <ea>
00002160                          1812  
00002160  6000 0B14               1813              BRA     OP1101_ADD_RETURN
00002164                          1814              
00002164                          1815  OP1001_EA_DN           
00002164                          1816              *BITS (7 TO 6) 
00002164                          1817              *00 = .B
00002164                          1818              *01 = .W
00002164                          1819              *10 = .L 
00002164  2205                    1820              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00002166  EC99                    1821              ROR.L   #6,D1
00002168  0281 00000003           1822              ANDI.L  #$03,D1
0000216E  0C81 00000000           1823              CMPI.L  #$00,D1 *EQUALS .B
00002174  6700 0016               1824              BEQ     OP1001_PRINT_B
00002178  0C81 00000001           1825              CMPI.L  #$01,D1 *EQUALS .W
0000217E  6700 0054               1826              BEQ     OP1001_PRINT_W
00002182  0C81 00000002           1827              CMPI.L  #$02,D1 *EQUALS .L
00002188  6700 0092               1828              BEQ     OP1001_PRINT_L
0000218C                          1829  OP1001_PRINT_B
0000218C  163C 0042               1830              MOVE.B  #'B',D3
00002190  6100 1B72               1831              BSR     PUSH_STACK
00002194                          1832                
00002194                          1833              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002194  13FC 0000 0000462A      1834              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000219C  13FC 0002 0000462B      1835              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000021A4                          1836             
000021A4                          1837              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000021A4  13FC 00B9 0000462D      1838              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000021AC  13FC 0020 0000462E      1839              MOVE.B   #$20,GET_SRC_START_END
000021B4                          1840  
000021B4                          1841             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000021B4  0285 0000FE3F           1842              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000021BA  0685 00000040           1843              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "AN" Register (001) 
000021C0                          1844  
000021C0                          1845              
000021C0  6100 12A4               1846              BSR     GET_EA_EA_SRC      *GETS <ea>
000021C4  163C 002C               1847              MOVE.B  #',',D3
000021C8  6100 1B3A               1848              BSR     PUSH_STACK          
000021CC  6100 16C8               1849              BSR     GET_EA_EA_DEST       *GETS Dn
000021D0                          1850              
000021D0  6000 0AA4               1851              BRA     OP1101_ADD_RETURN
000021D4                          1852  OP1001_PRINT_W
000021D4  163C 0057               1853              MOVE.B  #'W',D3
000021D8  6100 1B2A               1854              BSR     PUSH_STACK
000021DC                          1855  
000021DC                          1856              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000021DC  13FC 0000 0000462A      1857              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000021E4  13FC 0000 0000462B      1858              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000021EC                          1859             
000021EC                          1860              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000021EC  13FC 00B9 0000462D      1861              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000021F4  13FC 0020 0000462E      1862              MOVE.B   #$20,GET_SRC_START_END
000021FC                          1863  
000021FC                          1864             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000021FC  0285 0000FE3F           1865              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002202  0685 00000040           1866              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002208                          1867  
00002208                          1868              
00002208  6100 125C               1869              BSR     GET_EA_EA_SRC      *GETS <ea>
0000220C  163C 002C               1870              MOVE.B  #',',D3
00002210  6100 1AF2               1871              BSR     PUSH_STACK
00002214  6100 1680               1872              BSR     GET_EA_EA_DEST       *GETS Dn    
00002218                          1873              
00002218  6000 004A               1874              BRA     OP1001_ADD_RETURN
0000221C                          1875  OP1001_PRINT_L 
0000221C  163C 004C               1876              MOVE.B  #'L',D3
00002220  6100 1AE2               1877              BSR     PUSH_STACK
00002224                          1878              
00002224                          1879              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002224  13FC 0000 0000462A      1880              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000222C  13FC 0000 0000462B      1881              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002234                          1882             
00002234                          1883              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002234  13FC 00B9 0000462D      1884              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000223C  13FC 0020 0000462E      1885              MOVE.B   #$20,GET_SRC_START_END
00002244                          1886  
00002244                          1887              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002244  0285 0000FE3F           1888              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000224A  0685 00000040           1889              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002250                          1890  
00002250                          1891                     
00002250  6100 1214               1892              BSR     GET_EA_EA_SRC      *GETS <ea>
00002254  163C 002C               1893              MOVE.B  #',',D3
00002258  6100 1AAA               1894              BSR     PUSH_STACK                  
0000225C  6100 1638               1895              BSR     GET_EA_EA_DEST       *GETS Dn    
00002260                          1896  
00002260                          1897              
00002260  6000 0002               1898              BRA     OP1001_ADD_RETURN
00002264                          1899              
00002264                          1900  OP1001_ADD_RETURN
00002264  4E75                    1901              RTS
00002266                          1902  
00002266                          1903    
00002266                          1904  *---------------------------------------------------------------------------*
00002266                          1905  * OP_SUB: display SUB and proceed to EA
00002266                          1906  *---------------------------------------------------------------------------*            
00002266  43F9 00004425           1907  OP_SUB_B    LEA     DISP_SUB_B,A1
0000226C  103C 000E               1908              MOVE.B  #14,D0
00002270  4E4F                    1909              TRAP    #15
00002272  183C 0000               1910              MOVE.B  #0,D4
00002276  4EF9 00003016           1911              JMP     EA_GEN
0000227C                          1912  
0000227C  4E75                    1913              RTS
0000227E                          1914  
0000227E  43F9 0000442E           1915  OP_SUB_W    LEA     DISP_SUB_W,A1
00002284  103C 000E               1916              MOVE.B  #14,D0
00002288  4E4F                    1917              TRAP    #15
0000228A  183C 0001               1918              MOVE.B  #1,D4
0000228E  4EF9 00003016           1919              JMP     EA_GEN
00002294                          1920  
00002294  4E75                    1921              RTS
00002296                          1922  
00002296  43F9 00004437           1923  OP_SUB_L    LEA     DISP_SUB_L,A1
0000229C  103C 000E               1924              MOVE.B  #14,D0
000022A0  4E4F                    1925              TRAP    #15
000022A2  183C 0002               1926              MOVE.B  #2,D4
000022A6  4EF9 00003016           1927              JMP     EA_GEN
000022AC                          1928  
000022AC  4E75                    1929              RTS
000022AE                          1930  
000022AE                          1931  *---------------------------------------------------------------------------*
000022AE                          1932  * OP_SUBA: display SUBA
000022AE                          1933  *---------------------------------------------------------------------------*  
000022AE  43F9 0000445E           1934  OP_SUBA_W   LEA     DISP_SUBA_W,A1
000022B4  103C 000E               1935              MOVE.B  #14,D0
000022B8  4E4F                    1936              TRAP    #15
000022BA  183C 0001               1937              MOVE.B  #1,D4
000022BE  4E75                    1938              RTS
000022C0                          1939  
000022C0  43F9 00004468           1940  OP_SUBA_L   LEA     DISP_SUBA_L,A1
000022C6  103C 000E               1941              MOVE.B  #14,D0
000022CA  4E4F                    1942              TRAP    #15
000022CC  183C 0002               1943              MOVE.B  #2,D4
000022D0  4E75                    1944              RTS         
000022D2                          1945  *---------------------------------------------------------------------------*
000022D2                          1946  * OP1010 : unassigned
000022D2                          1947  *---------------------------------------------------------------------------*           
000022D2  4EF8 14FE               1948  OP1010      JMP     OP_DATA
000022D6                          1949              
000022D6                          1950  *---------------------------------------------------------------------------*
000022D6                          1951  * OP1011 : decode CMP/EOR/CMPA
000022D6                          1952  *---------------------------------------------------------------------------*           
000022D6  4280                    1953  OP1011      CLR.L   D0                
000022D8  4281                    1954              CLR.L   D1            
000022DA  4284                    1955              CLR.L   D4                   
000022DC  227C 00000000           1956              MOVEA.L #0, A1               
000022E2  2205                    1957              MOVE.L  D5,D1
000022E4  EA99                    1958              ROR.L   #5,D1
000022E6  0281 0000000E           1959              ANDI.L  #$E,D1
000022EC  0C01 0000               1960              CMPI.B  #$0,D1
000022F0  6700 003E               1961              BEQ     OP1011_CMP
000022F4  0C01 0002               1962              CMPI.B  #$2,D1
000022F8  6700 0036               1963              BEQ     OP1011_CMP
000022FC  0C01 0004               1964              CMPI.B  #$4,D1
00002300  6700 002E               1965              BEQ     OP1011_CMP
00002304  0C01 0008               1966              CMPI.B  #$8,D1
00002308  6700 0178               1967              BEQ     OP1011_EOR
0000230C  0C01 000A               1968              CMPI.B  #$A,D1
00002310  6700 0170               1969              BEQ     OP1011_EOR
00002314  0C01 000C               1970              CMPI.B  #$C,D1
00002318  6700 0168               1971              BEQ     OP1011_EOR  
0000231C  0C01 0006               1972              CMPI.B  #$6,D1
00002320  6700 00C0               1973              BEQ     OP1011_CMPA
00002324  0C01 000E               1974              CMPI.B  #$E,D1
00002328  6700 00B8               1975              BEQ     OP1011_CMPA 
0000232C                          1976  
0000232C  4EF8 14FE               1977              JMP     OP_DATA          
00002330                          1978  
00002330                          1979  
00002330                          1980  
00002330                          1981  
00002330                          1982  OP1011_CMP
00002330                          1983             
00002330                          1984   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002330  13FC 0082 0000462A      1985             MOVE.B   #$82,DEST_REGISTER_FORMAT
00002338  13FC 0000 0000462B      1986             MOVE.B   #$00,SRC_REGISTER_FORMAT
00002340                          1987             
00002340                          1988             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002340  13FC 00B9 0000462D      1989             MOVE.B   #$B9,GET_DST_START_END
00002348  13FC 0020 0000462E      1990             MOVE.B   #$20,GET_SRC_START_END
00002350                          1991             
00002350                          1992              *CLEAR D3
00002350  4283                    1993              CLR.L   D3
00002352                          1994              *LOAD STACK WITH THIS OPMODE
00002352  6100 19B0               1995              BSR     PUSH_STACK
00002356  163C 0043               1996              MOVE.B  #'C',D3
0000235A  6100 19A8               1997              BSR     PUSH_STACK
0000235E  163C 004D               1998              MOVE.B  #'M',D3
00002362  6100 19A0               1999              BSR     PUSH_STACK
00002366  163C 0050               2000              MOVE.B  #'P',D3
0000236A  6100 1998               2001              BSR     PUSH_STACK
0000236E  163C 002E               2002              MOVE.B  #'.',D3
00002372  6100 1990               2003              BSR     PUSH_STACK
00002376                          2004              
00002376                          2005              *FIGURE OUT SIZE*
00002376                          2006              *00 = BYTE
00002376                          2007              *01 = WORD
00002376                          2008              *10 = LONG
00002376                          2009              * BITS 7&6
00002376                          2010              
00002376                          2011              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
00002376  2205                    2012              MOVE.L  D5,D1
00002378  EC99                    2013              ROR.L   #6,D1
0000237A  0281 00000003           2014              ANDI.L  #$03,D1
00002380  0C01 0000               2015              CMPI.B  #%00,D1
00002384  6700 001E               2016              BEQ     OP1011_CMP_B
00002388  0281 00000003           2017              ANDI.L  #$03,D1
0000238E  0C01 0001               2018              CMPI.B  #%01,D1
00002392  6700 001C               2019              BEQ     OP1011_CMP_W
00002396  0281 00000003           2020              ANDI.L  #$03,D1
0000239C  0C01 0002               2021              CMPI.B  #%10,D1
000023A0  6700 001A               2022              BEQ     OP1011_CMP_L
000023A4                          2023            
000023A4                          2024  OP1011_CMP_B
000023A4                          2025              
000023A4  163C 0042               2026              MOVE.B  #'B',D3
000023A8  6100 195A               2027              BSR     PUSH_STACK
000023AC  6000 0016               2028              BRA     OP1011_RETURN_CMP  
000023B0                          2029  OP1011_CMP_W
000023B0                          2030              
000023B0  163C 0057               2031              MOVE.B  #'W',D3
000023B4  6100 194E               2032              BSR     PUSH_STACK
000023B8  6000 000A               2033              BRA     OP1011_RETURN_CMP  
000023BC                          2034  OP1011_CMP_L
000023BC                          2035              
000023BC  163C 004C               2036              MOVE.B  #'L',D3
000023C0  6100 1942               2037              BSR     PUSH_STACK
000023C4                          2038  OP1011_RETURN_CMP            
000023C4                          2039  
000023C4                          2040              
000023C4                          2041  *GET DATA FROM ADDQ AND PRINT #0-8
000023C4                          2042       
000023C4                          2043              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000023C4  0285 0000FE3F           2044              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000023CA  0685 00000000           2045              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
000023D0                          2046  
000023D0  6100 1094               2047              BSR     GET_EA_EA_SRC
000023D4  163C 002C               2048              MOVE.B  #',',D3
000023D8  6100 192A               2049              BSR     PUSH_STACK
000023DC  6100 14B8               2050              BSR     GET_EA_EA_DEST
000023E0                          2051              
000023E0  4E75                    2052              RTS
000023E2                          2053              
000023E2                          2054  
000023E2                          2055  
000023E2                          2056  OP1011_CMPA
000023E2                          2057              
000023E2                          2058   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000023E2  13FC 0080 0000462A      2059             MOVE.B   #$80,DEST_REGISTER_FORMAT
000023EA  13FC 0000 0000462B      2060             MOVE.B   #$00,SRC_REGISTER_FORMAT
000023F2                          2061             
000023F2                          2062             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000023F2  13FC 00B9 0000462D      2063             MOVE.B   #$B9,GET_DST_START_END
000023FA  13FC 0020 0000462E      2064             MOVE.B   #$20,GET_SRC_START_END
00002402                          2065             
00002402                          2066              *CLEAR D3
00002402  4283                    2067              CLR.L   D3
00002404                          2068              *LOAD STACK WITH THIS OPMODE
00002404  6100 18FE               2069              BSR     PUSH_STACK
00002408  163C 0043               2070              MOVE.B  #'C',D3
0000240C  6100 18F6               2071              BSR     PUSH_STACK
00002410  163C 004D               2072              MOVE.B  #'M',D3
00002414  6100 18EE               2073              BSR     PUSH_STACK
00002418  163C 0050               2074              MOVE.B  #'P',D3
0000241C  6100 18E6               2075              BSR     PUSH_STACK
00002420  163C 0041               2076              MOVE.B  #'A',D3
00002424  6100 18DE               2077              BSR     PUSH_STACK
00002428  163C 002E               2078              MOVE.B  #'.',D3
0000242C  6100 18D6               2079              BSR     PUSH_STACK
00002430                          2080              
00002430                          2081              *FIGURE OUT SIZE*
00002430                          2082              *00 = BYTE
00002430                          2083              *01 = WORD
00002430                          2084              *10 = LONG
00002430                          2085              * BITS 7&6
00002430                          2086              
00002430                          2087              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
00002430  2205                    2088              MOVE.L  D5,D1
00002432  EC99                    2089              ROR.L   #6,D1
00002434  0281 00000003           2090              ANDI.L  #$03,D1
0000243A  0C01 0001               2091              CMPI.B  #%01,D1
0000243E  6700 0010               2092              BEQ     OP1011_CMPA_W
00002442  0281 00000003           2093              ANDI.L  #$03,D1
00002448  0C01 0002               2094              CMPI.B  #%10,D1
0000244C  6700 000E               2095              BEQ     OP1011_CMPA_L
00002450                          2096  OP1011_CMPA_W
00002450                          2097              
00002450  163C 0057               2098              MOVE.B  #'W',D3
00002454  6100 18AE               2099              BSR     PUSH_STACK
00002458  6000 000A               2100              BRA     OP1011_RETURN_CMPA 
0000245C                          2101  OP1011_CMPA_L
0000245C                          2102              
0000245C  163C 004C               2103              MOVE.B  #'L',D3
00002460  6100 18A2               2104              BSR     PUSH_STACK
00002464                          2105  OP1011_RETURN_CMPA            
00002464                          2106  
00002464                          2107              
00002464                          2108  *GET DATA FROM ADDQ AND PRINT #0-8
00002464                          2109       
00002464                          2110              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002464  0285 0000FE3F           2111              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000246A  0685 00000040           2112              ADDI.L  #$0040,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
00002470                          2113  
00002470  6100 0FF4               2114              BSR     GET_EA_EA_SRC
00002474  163C 002C               2115              MOVE.B  #',',D3
00002478  6100 188A               2116              BSR     PUSH_STACK
0000247C  6100 1418               2117              BSR     GET_EA_EA_DEST
00002480                          2118              
00002480  4E75                    2119              RTS
00002482                          2120  
00002482                          2121  OP1011_EOR
00002482                          2122  
00002482                          2123   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002482  13FC 0082 0000462A      2124             MOVE.B   #$82,DEST_REGISTER_FORMAT
0000248A  13FC 0080 0000462B      2125             MOVE.B   #$80,SRC_REGISTER_FORMAT
00002492                          2126             
00002492                          2127             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002492  13FC 00B9 0000462D      2128             MOVE.B   #$B9,GET_DST_START_END
0000249A  13FC 0020 0000462E      2129             MOVE.B   #$20,GET_SRC_START_END
000024A2                          2130             
000024A2                          2131              *CLEAR D3
000024A2  4283                    2132              CLR.L   D3
000024A4                          2133              *LOAD STACK WITH THIS OPMODE
000024A4  6100 185E               2134              BSR     PUSH_STACK
000024A8  163C 0045               2135              MOVE.B  #'E',D3
000024AC  6100 1856               2136              BSR     PUSH_STACK
000024B0  163C 004F               2137              MOVE.B  #'O',D3
000024B4  6100 184E               2138              BSR     PUSH_STACK
000024B8  163C 0052               2139              MOVE.B  #'R',D3
000024BC  6100 1846               2140              BSR     PUSH_STACK
000024C0  163C 002E               2141              MOVE.B  #'.',D3
000024C4  6100 183E               2142              BSR     PUSH_STACK
000024C8                          2143              
000024C8                          2144              *FIGURE OUT SIZE*
000024C8                          2145              *00 = BYTE
000024C8                          2146              *01 = WORD
000024C8                          2147              *10 = LONG
000024C8                          2148              * BITS 7&6
000024C8                          2149              
000024C8                          2150              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
000024C8  2205                    2151              MOVE.L  D5,D1
000024CA  EC99                    2152              ROR.L   #6,D1
000024CC  0281 00000003           2153              ANDI.L  #$03,D1
000024D2  0C01 0000               2154              CMPI.B  #%00,D1
000024D6  6700 001E               2155              BEQ     OP1011_EOR_B
000024DA  0281 00000003           2156              ANDI.L  #$03,D1
000024E0  0C01 0001               2157              CMPI.B  #%01,D1
000024E4  6700 001C               2158              BEQ     OP1011_EOR_W
000024E8  0281 00000003           2159              ANDI.L  #$03,D1
000024EE  0C01 0002               2160              CMPI.B  #%10,D1
000024F2  6700 001A               2161              BEQ     OP1011_EOR_L
000024F6                          2162            
000024F6                          2163  OP1011_EOR_B
000024F6                          2164              
000024F6  163C 0042               2165              MOVE.B  #'B',D3
000024FA  6100 1808               2166              BSR     PUSH_STACK
000024FE  6000 0016               2167              BRA     OP1011_RETURN
00002502                          2168  OP1011_EOR_W
00002502                          2169              
00002502  163C 0057               2170              MOVE.B  #'W',D3
00002506  6100 17FC               2171              BSR     PUSH_STACK
0000250A  6000 000A               2172              BRA     OP1011_RETURN
0000250E                          2173  OP1011_EOR_L
0000250E                          2174              
0000250E  163C 004C               2175              MOVE.B  #'L',D3
00002512  6100 17F0               2176              BSR     PUSH_STACK
00002516                          2177  OP1011_RETURN            
00002516                          2178  
00002516                          2179              
00002516                          2180  *GET DATA FROM ADDQ AND PRINT #0-8
00002516                          2181       
00002516                          2182              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002516  0285 0000FE3F           2183              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000251C  0685 00000000           2184              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002522                          2185  
00002522  6100 1372               2186              BSR     GET_EA_EA_DEST
00002526  163C 002C               2187              MOVE.B  #',',D3
0000252A  6100 17D8               2188              BSR     PUSH_STACK
0000252E  6100 0F36               2189              BSR     GET_EA_EA_SRC
00002532                          2190              
00002532  4E75                    2191              RTS
00002534                          2192              
00002534                          2193              
00002534                          2194              
00002534                          2195              
00002534                          2196  
00002534                          2197  *---------------------------------------------------------------------------*
00002534                          2198  * OP_CMPA: display CMPA 
00002534                          2199  *---------------------------------------------------------------------------
00002534  43F9 000044A8           2200  OP_CMPA_W   LEA     DISP_CMPA_W,A1
0000253A  103C 000E               2201              MOVE.B  #14,D0
0000253E  4E4F                    2202              TRAP    #15
00002540  183C 0001               2203              MOVE.B  #1,D4
00002544  4E75                    2204              RTS
00002546                          2205  
00002546  43F9 000044B2           2206  OP_CMPA_L   LEA     DISP_CMPA_L,A1
0000254C  103C 000E               2207              MOVE.B  #14,D0
00002550  4E4F                    2208              TRAP    #15
00002552  183C 0002               2209              MOVE.B  #2,D4
00002556  4E75                    2210              RTS
00002558                          2211  
00002558                          2212  *---------------------------------------------------------------------------*
00002558                          2213  * OP_CMP: display CMP and proceed to EA
00002558                          2214  *---------------------------------------------------------------------------*  
00002558  43F9 0000448D           2215  OP_CMP_B    LEA     DISP_CMP_B,A1
0000255E  103C 000E               2216              MOVE.B  #14,D0
00002562  4E4F                    2217              TRAP    #15
00002564  183C 0000               2218              MOVE.B  #0,D4
00002568  4EF9 00003016           2219              JMP     EA_GEN
0000256E                          2220  
0000256E  4E75                    2221              RTS
00002570                          2222              
00002570  43F9 00004496           2223  OP_CMP_W    LEA     DISP_CMP_W,A1
00002576  103C 000E               2224              MOVE.B  #14,D0
0000257A  4E4F                    2225              TRAP    #15
0000257C  183C 0001               2226              MOVE.B  #1,D4
00002580  4EF9 00003016           2227              JMP     EA_GEN
00002586                          2228  
00002586  4E75                    2229              RTS
00002588                          2230              
00002588  43F9 0000449F           2231  OP_CMP_L    LEA     DISP_CMP_L,A1
0000258E  103C 000E               2232              MOVE.B  #14,D0
00002592  4E4F                    2233              TRAP    #15
00002594  183C 0002               2234              MOVE.B  #2,D4
00002598  4EF9 00003016           2235              JMP     EA_GEN
0000259E                          2236  
0000259E  4E75                    2237              RTS
000025A0                          2238              
000025A0                          2239  *---------------------------------------------------------------------------*
000025A0                          2240  * OP_EOR: display EOR
000025A0                          2241  *---------------------------------------------------------------------------*  
000025A0  43F9 00004472           2242  OP_EOR_B    LEA     DISP_EOR_B,A1
000025A6  103C 000E               2243              MOVE.B  #14,D0
000025AA  4E4F                    2244              TRAP    #15
000025AC  183C 0000               2245              MOVE.B  #0,D4
000025B0  4E75                    2246              RTS
000025B2                          2247              
000025B2  43F9 0000447B           2248  OP_EOR_W    LEA     DISP_EOR_W,A1
000025B8  103C 000E               2249              MOVE.B  #14,D0
000025BC  4E4F                    2250              TRAP    #15
000025BE  183C 0001               2251              MOVE.B  #1,D4
000025C2  4E75                    2252              RTS
000025C4                          2253              
000025C4  43F9 00004484           2254  OP_EOR_L    LEA     DISP_EOR_L,A1
000025CA  103C 000E               2255              MOVE.B  #14,D0
000025CE  4E4F                    2256              TRAP    #15
000025D0  183C 0002               2257              MOVE.B  #2,D4
000025D4  4E75                    2258              RTS    
000025D6                          2259  
000025D6                          2260  *---------------------------------------------------------------------------*
000025D6                          2261  * OP1100: Decode and display MULS/AND and proceed to EA
000025D6                          2262  *---------------------------------------------------------------------------* 
000025D6  4280                    2263  OP1100      CLR.L   D0                 
000025D8  4281                    2264              CLR.L   D1    
000025DA  4284                    2265              CLR.L   D4                
000025DC  227C 00000000           2266              MOVEA.L #0, A1        
000025E2  2205                    2267              MOVE.L  D5,D1
000025E4  EA89                    2268              LSR.L   #5,D1
000025E6  0281 0000000E           2269              ANDI.L  #$E,D1
000025EC  0C41 000E               2270              CMPI.W  #$E,D1
000025F0  6700 0006               2271              BEQ     OP_MULS
000025F4  6000 00F6               2272              BRA     OP1100_DETERMINE_DN_EA_OR_EA_DN 
000025F8                          2273  
000025F8                          2274  OP_MULS                      
000025F8  4281                    2275              CLR.L   D1       
000025FA  4284                    2276              CLR.L   D4                   
000025FC  227C 00000000           2277              MOVEA.L #0, A1              
00002602  2205                    2278              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
00002604                          2279              *CLEAR D3
00002604  4283                    2280              CLR.L   D3
00002606                          2281  
00002606                          2282  OP1100_MULS_DN_EA_OR_EA_DN 
00002606                          2283              *LOAD STACK WITH THIS OPMODE
00002606  6100 16FC               2284              BSR     PUSH_STACK
0000260A  163C 004D               2285              MOVE.B  #'M',D3
0000260E  6100 16F4               2286              BSR     PUSH_STACK
00002612  163C 0055               2287              MOVE.B  #'U',D3
00002616  6100 16EC               2288              BSR     PUSH_STACK
0000261A  163C 004C               2289              MOVE.B  #'L',D3
0000261E  6100 16E4               2290              BSR     PUSH_STACK
00002622  163C 0053               2291              MOVE.B  #'S',D3
00002626  6100 16DC               2292              BSR     PUSH_STACK
0000262A  163C 002E               2293              MOVE.B  #'.',D3
0000262E  6100 16D4               2294              BSR     PUSH_STACK
00002632                          2295              
00002632  2205                    2296              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00002634                          2297              
00002634                          2298  OP1100_EA_DN_MULS           
00002634                          2299              *BITS (7 TO 6) 
00002634                          2300              *00 = .B
00002634                          2301              *01 = .W
00002634                          2302              *10 = .L 
00002634  2205                    2303              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00002636  EC99                    2304              ROR.L   #6,D1
00002638  0281 00000003           2305              ANDI.L  #$03,D1
0000263E  0C81 00000003           2306              CMPI.L  #%11,D1 *EQUALS .W
00002644  6700 0014               2307              BEQ     OP1100_PRINT_W_MULS
00002648  0C81 00000000           2308              CMPI.L  #%00,D1 *EQUALS .L
0000264E  6700 0052               2309              BEQ     OP1100_PRINT_L_MULS
00002652                          2310              
00002652  183C 0001               2311              MOVE.B  #1,D4               *ERROR READ
00002656  6000 0092               2312              BRA     OP1100_MULS_RETURN
0000265A                          2313  OP1100_PRINT_W_MULS
0000265A  163C 0057               2314              MOVE.B  #'W',D3
0000265E  6100 16A4               2315              BSR     PUSH_STACK
00002662                          2316  
00002662                          2317              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002662  13FC 0000 0000462A      2318              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000266A  13FC 0000 0000462B      2319              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002672                          2320             
00002672                          2321              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002672  13FC 00B9 0000462D      2322              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000267A  13FC 0020 0000462E      2323              MOVE.B   #$20,GET_SRC_START_END
00002682                          2324  
00002682                          2325             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002682  0285 0000FE3F           2326              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002688  0685 00000000           2327              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
0000268E                          2328  
0000268E                          2329              
0000268E  6100 0DD6               2330              BSR     GET_EA_EA_SRC      *GETS <ea>
00002692  163C 002C               2331              MOVE.B  #',',D3
00002696  6100 166C               2332              BSR     PUSH_STACK
0000269A  6100 11FA               2333              BSR     GET_EA_EA_DEST       *GETS Dn    
0000269E                          2334              
0000269E  6000 004A               2335              BRA     OP1100_MULS_RETURN
000026A2                          2336  OP1100_PRINT_L_MULS 
000026A2  163C 004C               2337              MOVE.B  #'L',D3
000026A6  6100 165C               2338              BSR     PUSH_STACK
000026AA                          2339              
000026AA                          2340              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000026AA  13FC 0000 0000462A      2341              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000026B2  13FC 0000 0000462B      2342              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000026BA                          2343             
000026BA                          2344              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000026BA  13FC 00B9 0000462D      2345              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000026C2  13FC 0020 0000462E      2346              MOVE.B   #$20,GET_SRC_START_END
000026CA                          2347  
000026CA                          2348              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000026CA  0285 0000FE3F           2349              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000026D0  0685 00000000           2350              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
000026D6                          2351  
000026D6                          2352                     
000026D6  6100 0D8E               2353              BSR     GET_EA_EA_SRC      *GETS <ea>
000026DA  163C 002C               2354              MOVE.B  #',',D3
000026DE  6100 1624               2355              BSR     PUSH_STACK                  
000026E2  6100 11B2               2356              BSR     GET_EA_EA_DEST       *GETS Dn    
000026E6                          2357  
000026E6                          2358              
000026E6  6000 0002               2359              BRA     OP1100_MULS_RETURN
000026EA                          2360              
000026EA                          2361  OP1100_MULS_RETURN
000026EA  4E75                    2362              RTS
000026EC                          2363              
000026EC                          2364  
000026EC                          2365  
000026EC                          2366  
000026EC                          2367  
000026EC                          2368  
000026EC                          2369  
000026EC                          2370  
000026EC                          2371  
000026EC                          2372  
000026EC                          2373  
000026EC                          2374  
000026EC                          2375  
000026EC                          2376  OP1100_DETERMINE_DN_EA_OR_EA_DN 
000026EC                          2377              *LOAD STACK WITH THIS OPMODE
000026EC  4283                    2378              CLR.L   D3
000026EE  6100 1614               2379              BSR     PUSH_STACK
000026F2  163C 0041               2380              MOVE.B  #'A',D3
000026F6  6100 160C               2381              BSR     PUSH_STACK
000026FA  163C 004E               2382              MOVE.B  #'N',D3
000026FE  6100 1604               2383              BSR     PUSH_STACK
00002702  163C 0044               2384              MOVE.B  #'D',D3
00002706  6100 15FC               2385              BSR     PUSH_STACK
0000270A  163C 002E               2386              MOVE.B  #'.',D3
0000270E  6100 15F4               2387              BSR     PUSH_STACK
00002712                          2388              
00002712  2205                    2389              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00002714                          2390              
00002714                          2391              *BITS (INDEX 8) 
00002714                          2392              *0 = ADD.B/W/L <EA>,Dn
00002714                          2393              *1 = ADD.B/W/L Dn,<EA> 
00002714  E099                    2394              ROR.L   #8,D1
00002716  0281 00000001           2395              ANDI.L  #$01,D1     *MASKS WITH 00000001
0000271C  0C81 00000000           2396              CMPI.L  #$00,D1     *IF EQUALS <ea>,Dn
00002722  6700 0102               2397              BEQ     OP1100_EA_DN
00002726                          2398              *else procede to Dn_EA
00002726                          2399              
00002726                          2400  OP1100_DN_EA
00002726                          2401              *BITS (7 TO 6) 
00002726                          2402              *00 = .B
00002726                          2403              *01 = .W
00002726                          2404              *10 = .L 
00002726  2205                    2405              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00002728  EC99                    2406              ROR.L   #6,D1
0000272A  0281 00000003           2407              ANDI.L  #$03,D1
00002730  0C81 00000000           2408              CMPI.L  #$00,D1 *EQUALS .B
00002736  6700 0016               2409              BEQ     OP1100_PRINT_B2
0000273A  0C81 00000001           2410              CMPI.L  #$01,D1 *EQUALS .W
00002740  6700 0054               2411              BEQ     OP1100_PRINT_W2
00002744  0C81 00000002           2412              CMPI.L  #$02,D1 *EQUALS .L
0000274A  6700 0092               2413              BEQ     OP1100_PRINT_L2
0000274E                          2414  OP1100_PRINT_B2
0000274E                          2415              *PUSH 'B'
0000274E  163C 0042               2416              MOVE.B  #'B',D3
00002752  6100 15B0               2417              BSR     PUSH_STACK
00002756                          2418             
00002756                          2419              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002756  13FC 0000 0000462A      2420             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000275E  13FC 0083 0000462B      2421             MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002766                          2422             
00002766                          2423             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002766  13FC 00B9 0000462D      2424             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000276E  13FC 0020 0000462E      2425             MOVE.B   #$20,GET_SRC_START_END
00002776                          2426  
00002776                          2427              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002776  0285 0000FE3F           2428              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000277C  0685 00000000           2429              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002782                          2430       
00002782  6100 1112               2431              BSR     GET_EA_EA_DEST      *GETS Dn
00002786  163C 002C               2432              MOVE.B  #',',D3
0000278A  6100 1578               2433              BSR     PUSH_STACK                     
0000278E  6100 0CD6               2434              BSR     GET_EA_EA_SRC       *GETS <ea>
00002792                          2435  
00002792                          2436              
00002792  6000 0192               2437              BRA     OP1100_AND_RETURN
00002796                          2438  OP1100_PRINT_W2
00002796  163C 0057               2439              MOVE.B  #'W',D3
0000279A  6100 1568               2440              BSR     PUSH_STACK
0000279E                          2441  
0000279E                          2442              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000279E  13FC 0000 0000462A      2443              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000027A6  13FC 0083 0000462B      2444              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000027AE                          2445             
000027AE                          2446              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000027AE  13FC 00B9 0000462D      2447              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000027B6  13FC 0020 0000462E      2448              MOVE.B   #$20,GET_SRC_START_END
000027BE                          2449  
000027BE                          2450              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000027BE  0285 0000FE3F           2451              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000027C4  0685 00000000           2452              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A An Register (001) 
000027CA                          2453  
000027CA                          2454        
000027CA  6100 10CA               2455              BSR     GET_EA_EA_DEST      *GETS Dn
000027CE  163C 002C               2456              MOVE.B  #',',D3
000027D2  6100 1530               2457              BSR     PUSH_STACK               
000027D6  6100 0C8E               2458              BSR     GET_EA_EA_SRC       *GETS <ea>       
000027DA                          2459  
000027DA                          2460  
000027DA                          2461  
000027DA  6000 049A               2462              BRA     OP1101_ADD_RETURN
000027DE                          2463  OP1100_PRINT_L2 
000027DE  163C 004C               2464              MOVE.B  #'L',D3
000027E2  6100 1520               2465              BSR     PUSH_STACK
000027E6                          2466              
000027E6                          2467              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000027E6  13FC 0000 0000462A      2468              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000027EE  13FC 0083 0000462B      2469              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000027F6                          2470             
000027F6                          2471              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000027F6  13FC 00B9 0000462D      2472              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000027FE  13FC 0020 0000462E      2473              MOVE.B   #$20,GET_SRC_START_END
00002806                          2474  
00002806                          2475             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002806  0285 0000FE3F           2476              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000280C  0685 00000000           2477              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002812                          2478  
00002812                          2479               
00002812  6100 1082               2480              BSR     GET_EA_EA_DEST       *GETS Dn
00002816  163C 002C               2481              MOVE.B  #',',D3
0000281A  6100 14E8               2482              BSR     PUSH_STACK          
0000281E  6100 0C46               2483              BSR     GET_EA_EA_SRC        *GETS <ea>
00002822                          2484  
00002822  6000 0102               2485              BRA     OP1100_AND_RETURN
00002826                          2486              
00002826                          2487  OP1100_EA_DN           
00002826                          2488              *BITS (7 TO 6) 
00002826                          2489              *00 = .B
00002826                          2490              *01 = .W
00002826                          2491              *10 = .L 
00002826  2205                    2492              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00002828  EC99                    2493              ROR.L   #6,D1
0000282A  0281 00000003           2494              ANDI.L  #$03,D1
00002830  0C81 00000000           2495              CMPI.L  #$00,D1 *EQUALS .B
00002836  6700 0016               2496              BEQ     OP1100_PRINT_B
0000283A  0C81 00000001           2497              CMPI.L  #$01,D1 *EQUALS .W
00002840  6700 0054               2498              BEQ     OP1100_PRINT_W
00002844  0C81 00000002           2499              CMPI.L  #$02,D1 *EQUALS .L
0000284A  6700 0092               2500              BEQ     OP1100_PRINT_L
0000284E                          2501  OP1100_PRINT_B
0000284E  163C 0042               2502              MOVE.B  #'B',D3
00002852  6100 14B0               2503              BSR     PUSH_STACK
00002856                          2504                
00002856                          2505              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002856  13FC 0000 0000462A      2506              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000285E  13FC 0002 0000462B      2507              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002866                          2508             
00002866                          2509              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002866  13FC 00B9 0000462D      2510              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000286E  13FC 0020 0000462E      2511              MOVE.B   #$20,GET_SRC_START_END
00002876                          2512  
00002876                          2513             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002876  0285 0000FE3F           2514              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000287C  0685 00000000           2515              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "AN" Register (001) 
00002882                          2516  
00002882                          2517              
00002882  6100 0BE2               2518              BSR     GET_EA_EA_SRC      *GETS <ea>
00002886  163C 002C               2519              MOVE.B  #',',D3
0000288A  6100 1478               2520              BSR     PUSH_STACK          
0000288E  6100 1006               2521              BSR     GET_EA_EA_DEST       *GETS Dn
00002892                          2522              
00002892  6000 03E2               2523              BRA     OP1101_ADD_RETURN
00002896                          2524  OP1100_PRINT_W
00002896  163C 0057               2525              MOVE.B  #'W',D3
0000289A  6100 1468               2526              BSR     PUSH_STACK
0000289E                          2527  
0000289E                          2528              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000289E  13FC 0000 0000462A      2529              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000028A6  13FC 0002 0000462B      2530              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000028AE                          2531             
000028AE                          2532              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000028AE  13FC 00B9 0000462D      2533              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000028B6  13FC 0020 0000462E      2534              MOVE.B   #$20,GET_SRC_START_END
000028BE                          2535  
000028BE                          2536             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000028BE  0285 0000FE3F           2537              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000028C4  0685 00000000           2538              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
000028CA                          2539  
000028CA                          2540              
000028CA  6100 0B9A               2541              BSR     GET_EA_EA_SRC      *GETS <ea>
000028CE  163C 002C               2542              MOVE.B  #',',D3
000028D2  6100 1430               2543              BSR     PUSH_STACK
000028D6  6100 0FBE               2544              BSR     GET_EA_EA_DEST       *GETS Dn    
000028DA                          2545              
000028DA  6000 F988               2546              BRA     OP1001_ADD_RETURN
000028DE                          2547  OP1100_PRINT_L 
000028DE  163C 004C               2548              MOVE.B  #'L',D3
000028E2  6100 1420               2549              BSR     PUSH_STACK
000028E6                          2550              
000028E6                          2551              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000028E6  13FC 0000 0000462A      2552              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000028EE  13FC 0002 0000462B      2553              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000028F6                          2554             
000028F6                          2555              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000028F6  13FC 00B9 0000462D      2556              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000028FE  13FC 0020 0000462E      2557              MOVE.B   #$20,GET_SRC_START_END
00002906                          2558  
00002906                          2559              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002906  0285 0000FE3F           2560              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000290C  0685 00000000           2561              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002912                          2562  
00002912                          2563                     
00002912  6100 0B52               2564              BSR     GET_EA_EA_SRC      *GETS <ea>
00002916  163C 002C               2565              MOVE.B  #',',D3
0000291A  6100 13E8               2566              BSR     PUSH_STACK                  
0000291E  6100 0F76               2567              BSR     GET_EA_EA_DEST       *GETS Dn    
00002922                          2568  
00002922                          2569              
00002922  6000 0002               2570              BRA     OP1100_AND_RETURN
00002926                          2571              
00002926                          2572  OP1100_AND_RETURN
00002926  4E75                    2573              RTS
00002928                          2574  
00002928                          2575  
00002928                          2576  *---------------------------------------------------------------------------*
00002928                          2577  * OP1101: Decode ADD/ADDA
00002928                          2578  *---------------------------------------------------------------------------* 
00002928  4280                    2579  OP1101      CLR.L   D0                  
0000292A  4281                    2580              CLR.L   D1       
0000292C  4284                    2581              CLR.L   D4                   
0000292E  227C 00000000           2582              MOVEA.L #0, A1              
00002934  2205                    2583              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
00002936                          2584              
00002936                          2585              *CLEAR D3
00002936  4283                    2586              CLR.L   D3
00002938                          2587              
00002938                          2588              
00002938                          2589              
00002938                          2590              **INTEGRATING ADDA.W/.L INTO THIS CODE**
00002938  2205                    2591              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
0000293A                          2592              *BITS (INDEX 8) 
0000293A                          2593              *0 = ADD.B/W/L <EA>,Dn
0000293A                          2594              *1 = ADD.B/W/L Dn,<EA> 
0000293A  EC99                    2595              ROR.L   #6,D1
0000293C  0281 00000007           2596              ANDI.L  #$07,D1                 *MASKS WITH 00000111
00002942  0C81 00000007           2597              CMPI.L  #$07,D1                 *IF EQUALS <ea>,Dn
00002948  6700 0010               2598              BEQ     OP1101_ADDA_L            *BRANCHES TO ADDA.L
0000294C  0C81 00000003           2599              CMPI.L  #$03,D1                 *IF EQUALS <ea>,Dn
00002952  6700 0078               2600              BEQ     OP1101_ADDA_W           *BRANCHES TO ADDA.W
00002956  6000 00E6               2601              BRA     OP1101_DETERMINE_DN_EA_OR_EA_DN         *ELSE CHECK ADD.B/.W/.L
0000295A                          2602              
0000295A                          2603  OP1101_ADDA_L
0000295A                          2604              *LOAD STACK WITH THIS OPMODE
0000295A  6100 13A8               2605              BSR     PUSH_STACK
0000295E  163C 0041               2606              MOVE.B  #'A',D3
00002962  6100 13A0               2607              BSR     PUSH_STACK
00002966  163C 0044               2608              MOVE.B  #'D',D3
0000296A  6100 1398               2609              BSR     PUSH_STACK
0000296E  163C 0044               2610              MOVE.B  #'D',D3
00002972  6100 1390               2611              BSR     PUSH_STACK
00002976  163C 0041               2612              MOVE.B  #'A',D3
0000297A  6100 1388               2613              BSR     PUSH_STACK
0000297E  163C 002E               2614              MOVE.B  #'.',D3
00002982  6100 1380               2615              BSR     PUSH_STACK
00002986  163C 004C               2616              MOVE.B  #'L',D3
0000298A  6100 1378               2617              BSR     PUSH_STACK
0000298E                          2618              
0000298E                          2619             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000298E  13FC 0000 0000462A      2620             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002996  13FC 0000 0000462B      2621             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000299E                          2622             
0000299E                          2623             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000299E  13FC 00B9 0000462D      2624             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000029A6  13FC 0020 0000462E      2625             MOVE.B   #$20,GET_SRC_START_END
000029AE                          2626  
000029AE                          2627              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000029AE  0285 0000FE3F           2628              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000029B4  0685 00000040           2629              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
000029BA                          2630       
000029BA                          2631              *PRINT <EA>,AN
000029BA  6100 0AAA               2632              BSR     GET_EA_EA_SRC       *GETS <ea>
000029BE  163C 002C               2633              MOVE.B  #',',D3
000029C2  6100 1340               2634              BSR     PUSH_STACK                     
000029C6  6100 0ECE               2635              BSR     GET_EA_EA_DEST      *GETS Dn
000029CA                          2636  
000029CA                          2637              
000029CA                          2638              
000029CA  4E75                    2639              RTS
000029CC                          2640  OP1101_ADDA_W
000029CC                          2641              *LOAD STACK WITH THIS OPMODE
000029CC  6100 1336               2642              BSR     PUSH_STACK
000029D0  163C 0041               2643              MOVE.B  #'A',D3
000029D4  6100 132E               2644              BSR     PUSH_STACK
000029D8  163C 0044               2645              MOVE.B  #'D',D3
000029DC  6100 1326               2646              BSR     PUSH_STACK
000029E0  163C 0044               2647              MOVE.B  #'D',D3
000029E4  6100 131E               2648              BSR     PUSH_STACK
000029E8  163C 0041               2649              MOVE.B  #'A',D3
000029EC  6100 1316               2650              BSR     PUSH_STACK
000029F0  163C 002E               2651              MOVE.B  #'.',D3
000029F4  6100 130E               2652              BSR     PUSH_STACK
000029F8  163C 0057               2653              MOVE.B  #'W',D3
000029FC  6100 1306               2654              BSR     PUSH_STACK
00002A00                          2655              
00002A00                          2656             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002A00  13FC 0000 0000462A      2657             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002A08  13FC 0000 0000462B      2658             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002A10                          2659             
00002A10                          2660             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002A10  13FC 00B9 0000462D      2661             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002A18  13FC 0020 0000462E      2662             MOVE.B   #$20,GET_SRC_START_END
00002A20                          2663  
00002A20                          2664              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002A20  0285 0000FE3F           2665              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002A26  0685 00000040           2666              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002A2C                          2667       
00002A2C                          2668              *PRINT <EA>,AN
00002A2C  6100 0A38               2669              BSR     GET_EA_EA_SRC       *GETS <ea>
00002A30  163C 002C               2670              MOVE.B  #',',D3
00002A34  6100 12CE               2671              BSR     PUSH_STACK                     
00002A38  6100 0E5C               2672              BSR     GET_EA_EA_DEST      *GETS Dn
00002A3C                          2673  
00002A3C  4E75                    2674              RTS
00002A3E                          2675  
00002A3E                          2676  OP1101_DETERMINE_DN_EA_OR_EA_DN 
00002A3E                          2677              *LOAD STACK WITH THIS OPMODE
00002A3E  6100 12C4               2678              BSR     PUSH_STACK
00002A42  163C 0041               2679              MOVE.B  #'A',D3
00002A46  6100 12BC               2680              BSR     PUSH_STACK
00002A4A  163C 0044               2681              MOVE.B  #'D',D3
00002A4E  6100 12B4               2682              BSR     PUSH_STACK
00002A52  163C 0044               2683              MOVE.B  #'D',D3
00002A56  6100 12AC               2684              BSR     PUSH_STACK
00002A5A  163C 002E               2685              MOVE.B  #'.',D3
00002A5E  6100 12A4               2686              BSR     PUSH_STACK
00002A62                          2687              
00002A62  2205                    2688              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00002A64                          2689              
00002A64                          2690              *BITS (INDEX 8) 
00002A64                          2691              *0 = ADD.B/W/L <EA>,Dn
00002A64                          2692              *1 = ADD.B/W/L Dn,<EA> 
00002A64  E099                    2693              ROR.L   #8,D1
00002A66  0281 00000001           2694              ANDI.L  #$01,D1     *MASKS WITH 00000001
00002A6C  0C81 00000000           2695              CMPI.L  #$00,D1     *IF EQUALS <ea>,Dn
00002A72  6700 0102               2696              BEQ     OP1101_EA_DN
00002A76                          2697              *else procede to Dn_EA
00002A76                          2698              
00002A76                          2699  OP1101_DN_EA
00002A76                          2700              *BITS (7 TO 6) 
00002A76                          2701              *00 = .B
00002A76                          2702              *01 = .W
00002A76                          2703              *10 = .L 
00002A76  2205                    2704              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00002A78  EC99                    2705              ROR.L   #6,D1
00002A7A  0281 00000003           2706              ANDI.L  #$03,D1
00002A80  0C81 00000000           2707              CMPI.L  #$00,D1 *EQUALS .B
00002A86  6700 0016               2708              BEQ     OP1101_PRINT_B2
00002A8A  0C81 00000001           2709              CMPI.L  #$01,D1 *EQUALS .W
00002A90  6700 0054               2710              BEQ     OP1101_PRINT_W2
00002A94  0C81 00000002           2711              CMPI.L  #$02,D1 *EQUALS .L
00002A9A  6700 0092               2712              BEQ     OP1101_PRINT_L2
00002A9E                          2713  OP1101_PRINT_B2
00002A9E                          2714              *PUSH 'B'
00002A9E  163C 0042               2715              MOVE.B  #'B',D3
00002AA2  6100 1260               2716              BSR     PUSH_STACK
00002AA6                          2717             
00002AA6                          2718              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002AA6  13FC 0002 0000462A      2719             MOVE.B   #$02,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002AAE  13FC 0083 0000462B      2720             MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002AB6                          2721             
00002AB6                          2722             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002AB6  13FC 00B9 0000462D      2723             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002ABE  13FC 0020 0000462E      2724             MOVE.B   #$20,GET_SRC_START_END
00002AC6                          2725  
00002AC6                          2726              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002AC6  0285 0000FE3F           2727              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002ACC  0685 00000000           2728              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002AD2                          2729       
00002AD2  6100 0DC2               2730              BSR     GET_EA_EA_DEST      *GETS Dn
00002AD6  163C 002C               2731              MOVE.B  #',',D3
00002ADA  6100 1228               2732              BSR     PUSH_STACK                     
00002ADE  6100 0986               2733              BSR     GET_EA_EA_SRC       *GETS <ea>
00002AE2                          2734  
00002AE2                          2735              
00002AE2  6000 0192               2736              BRA     OP1101_ADD_RETURN
00002AE6                          2737  OP1101_PRINT_W2
00002AE6  163C 0057               2738              MOVE.B  #'W',D3
00002AEA  6100 1218               2739              BSR     PUSH_STACK
00002AEE                          2740  
00002AEE                          2741              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002AEE  13FC 0000 0000462A      2742              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002AF6  13FC 0083 0000462B      2743              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002AFE                          2744             
00002AFE                          2745              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002AFE  13FC 00B9 0000462D      2746              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002B06  13FC 0020 0000462E      2747              MOVE.B   #$20,GET_SRC_START_END
00002B0E                          2748  
00002B0E                          2749              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002B0E  0285 0000FE3F           2750              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002B14  0685 00000000           2751              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002B1A                          2752  
00002B1A                          2753        
00002B1A  6100 0D7A               2754              BSR     GET_EA_EA_DEST      *GETS Dn
00002B1E  163C 002C               2755              MOVE.B  #',',D3
00002B22  6100 11E0               2756              BSR     PUSH_STACK               
00002B26  6100 093E               2757              BSR     GET_EA_EA_SRC       *GETS <ea>       
00002B2A                          2758  
00002B2A                          2759  
00002B2A                          2760  
00002B2A  6000 014A               2761              BRA     OP1101_ADD_RETURN
00002B2E                          2762  OP1101_PRINT_L2 
00002B2E  163C 004C               2763              MOVE.B  #'L',D3
00002B32  6100 11D0               2764              BSR     PUSH_STACK
00002B36                          2765              
00002B36                          2766              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002B36  13FC 0000 0000462A      2767              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002B3E  13FC 0083 0000462B      2768              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002B46                          2769             
00002B46                          2770              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002B46  13FC 00B9 0000462D      2771              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002B4E  13FC 0020 0000462E      2772              MOVE.B   #$20,GET_SRC_START_END
00002B56                          2773  
00002B56                          2774             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002B56  0285 0000FE3F           2775              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002B5C  0685 00000000           2776              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002B62                          2777  
00002B62                          2778               
00002B62  6100 0D32               2779              BSR     GET_EA_EA_DEST       *GETS Dn
00002B66  163C 002C               2780              MOVE.B  #',',D3
00002B6A  6100 1198               2781              BSR     PUSH_STACK          
00002B6E  6100 08F6               2782              BSR     GET_EA_EA_SRC        *GETS <ea>
00002B72                          2783  
00002B72  6000 0102               2784              BRA     OP1101_ADD_RETURN
00002B76                          2785              
00002B76                          2786  OP1101_EA_DN           
00002B76                          2787              *BITS (7 TO 6) 
00002B76                          2788              *00 = .B
00002B76                          2789              *01 = .W
00002B76                          2790              *10 = .L 
00002B76  2205                    2791              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00002B78  EC99                    2792              ROR.L   #6,D1
00002B7A  0281 00000003           2793              ANDI.L  #$03,D1
00002B80  0C81 00000000           2794              CMPI.L  #$00,D1 *EQUALS .B
00002B86  6700 0016               2795              BEQ     OP1101_PRINT_B
00002B8A  0C81 00000001           2796              CMPI.L  #$01,D1 *EQUALS .W
00002B90  6700 0054               2797              BEQ     OP1101_PRINT_W
00002B94  0C81 00000002           2798              CMPI.L  #$02,D1 *EQUALS .L
00002B9A  6700 0092               2799              BEQ     OP1101_PRINT_L
00002B9E                          2800  OP1101_PRINT_B
00002B9E  163C 0042               2801              MOVE.B  #'B',D3
00002BA2  6100 1160               2802              BSR     PUSH_STACK
00002BA6                          2803                
00002BA6                          2804              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002BA6  13FC 0002 0000462A      2805              MOVE.B   #$02,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002BAE  13FC 0002 0000462B      2806              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002BB6                          2807             
00002BB6                          2808              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002BB6  13FC 00B9 0000462D      2809              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002BBE  13FC 0020 0000462E      2810              MOVE.B   #$20,GET_SRC_START_END
00002BC6                          2811  
00002BC6                          2812             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002BC6  0285 0000FE3F           2813              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002BCC  0685 00000000           2814              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002BD2                          2815  
00002BD2                          2816              
00002BD2  6100 0892               2817              BSR     GET_EA_EA_SRC      *GETS <ea>
00002BD6  163C 002C               2818              MOVE.B  #',',D3
00002BDA  6100 1128               2819              BSR     PUSH_STACK          
00002BDE  6100 0CB6               2820              BSR     GET_EA_EA_DEST       *GETS Dn
00002BE2                          2821              
00002BE2  6000 0092               2822              BRA     OP1101_ADD_RETURN
00002BE6                          2823  OP1101_PRINT_W
00002BE6  163C 0057               2824              MOVE.B  #'W',D3
00002BEA  6100 1118               2825              BSR     PUSH_STACK
00002BEE                          2826  
00002BEE                          2827              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002BEE  13FC 0000 0000462A      2828              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002BF6  13FC 0000 0000462B      2829              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002BFE                          2830             
00002BFE                          2831              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002BFE  13FC 00B9 0000462D      2832              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002C06  13FC 0020 0000462E      2833              MOVE.B   #$20,GET_SRC_START_END
00002C0E                          2834  
00002C0E                          2835             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002C0E  0285 0000FE3F           2836              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002C14  0685 00000000           2837              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002C1A                          2838  
00002C1A                          2839              
00002C1A  6100 084A               2840              BSR     GET_EA_EA_SRC      *GETS <ea>
00002C1E  163C 002C               2841              MOVE.B  #',',D3
00002C22  6100 10E0               2842              BSR     PUSH_STACK
00002C26  6100 0C6E               2843              BSR     GET_EA_EA_DEST       *GETS Dn    
00002C2A                          2844              
00002C2A  6000 004A               2845              BRA     OP1101_ADD_RETURN
00002C2E                          2846  OP1101_PRINT_L 
00002C2E  163C 004C               2847              MOVE.B  #'L',D3
00002C32  6100 10D0               2848              BSR     PUSH_STACK
00002C36                          2849              
00002C36                          2850              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002C36  13FC 0000 0000462A      2851              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002C3E  13FC 0000 0000462B      2852              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002C46                          2853             
00002C46                          2854              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002C46  13FC 00B9 0000462D      2855              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002C4E  13FC 0020 0000462E      2856              MOVE.B   #$20,GET_SRC_START_END
00002C56                          2857  
00002C56                          2858              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002C56  0285 0000FE3F           2859              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002C5C  0685 00000000           2860              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002C62                          2861  
00002C62                          2862                     
00002C62  6100 0802               2863              BSR     GET_EA_EA_SRC      *GETS <ea>
00002C66  163C 002C               2864              MOVE.B  #',',D3
00002C6A  6100 1098               2865              BSR     PUSH_STACK                  
00002C6E  6100 0C26               2866              BSR     GET_EA_EA_DEST       *GETS Dn    
00002C72                          2867  
00002C72                          2868              
00002C72  6000 0002               2869              BRA     OP1101_ADD_RETURN
00002C76                          2870              
00002C76                          2871  OP1101_ADD_RETURN
00002C76  4E75                    2872              RTS
00002C78                          2873              
00002C78                          2874              *ADDW
00002C78  0C01 0006               2875              CMPI.B  #$6,D1
00002C7C  6700 0056               2876              BEQ     OP_ADDA_W
00002C80  0C01 000E               2877              CMPI.B  #$E,D1
00002C84  6700 0066               2878              BEQ     OP_ADDA_L 
00002C88                          2879  
00002C88  4EF8 14FE               2880              JMP     OP_DATA  
00002C8C                          2881            
00002C8C                          2882  *---------------------------------------------------------------------------*
00002C8C                          2883  * OP_ADD: display ADD and proceed to EA
00002C8C                          2884  *---------------------------------------------------------------------------*  
00002C8C  43F9 000044E1           2885  OP_ADD_B    LEA     DISP_ADD_B,A1
00002C92  103C 000E               2886              MOVE.B  #14,D0
00002C96  4E4F                    2887              TRAP    #15
00002C98  183C 0000               2888              MOVE.B  #0,D4
00002C9C  4EF9 00003016           2889              JMP     EA_GEN
00002CA2                          2890  
00002CA2  4E75                    2891              RTS
00002CA4                          2892  
00002CA4  43F9 000044EA           2893  OP_ADD_W    LEA     DISP_ADD_W,A1
00002CAA  103C 000E               2894              MOVE.B  #14,D0
00002CAE  4E4F                    2895              TRAP    #15
00002CB0  183C 0001               2896              MOVE.B  #1,D4
00002CB4  4EF9 00003016           2897              JMP     EA_GEN
00002CBA                          2898  
00002CBA  4E75                    2899              RTS
00002CBC                          2900  
00002CBC  43F9 000044F3           2901  OP_ADD_L    LEA     DISP_ADD_L,A1
00002CC2  103C 000E               2902              MOVE.B  #14,D0
00002CC6  4E4F                    2903              TRAP    #15
00002CC8  183C 0002               2904              MOVE.B  #2,D4
00002CCC  4EF9 00003016           2905              JMP     EA_GEN
00002CD2                          2906  
00002CD2  4E75                    2907              RTS
00002CD4                          2908  
00002CD4                          2909  *---------------------------------------------------------------------------*
00002CD4                          2910  * OP_ADDA: display ADDA and proceed to EA
00002CD4                          2911  *---------------------------------------------------------------------------*  
00002CD4  43F9 000044FC           2912  OP_ADDA_W   LEA     DISP_ADDA_W,A1
00002CDA  103C 000E               2913              MOVE.B  #14,D0
00002CDE  4E4F                    2914              TRAP    #15
00002CE0  183C 0001               2915              MOVE.B  #1,D4
00002CE4  4EF9 00003016           2916              JMP     EA_GEN
00002CEA                          2917  
00002CEA  4E75                    2918              RTS
00002CEC                          2919  
00002CEC  43F9 00004506           2920  OP_ADDA_L   LEA     DISP_ADDA_L,A1
00002CF2  103C 000E               2921              MOVE.B  #14,D0
00002CF6  4E4F                    2922              TRAP    #15
00002CF8  183C 0002               2923              MOVE.B  #2,D4
00002CFC  4EF9 00003016           2924              JMP     EA_GEN
00002D02                          2925  
00002D02  4E75                    2926              RTS
00002D04                          2927              
00002D04                          2928  *---------------------------------------------------------------------------*
00002D04                          2929  * OP1110: LSR/LSL/ASR/ASL/ROL/ROR
00002D04                          2930  *---------------------------------------------------------------------------* 
00002D04  4280                    2931  OP1110      CLR.L   D0                  
00002D06  4281                    2932              CLR.L   D1   
00002D08  4284                    2933              CLR.L   D4                   
00002D0A  227C 00000000           2934              MOVEA.L #0, A1                 
00002D10  2205                    2935              MOVE.L  D5,D1
00002D12                          2936              
00002D12                          2937              * check for LSX
00002D12  E699                    2938              ROR.L   #3,D1
00002D14  0281 00000001           2939              ANDI.L  #$1,D1
00002D1A  0C01 0001               2940              CMPI.B  #1,D1
00002D1E  6700 002E               2941              BEQ     OP_LSX
00002D22                          2942              
00002D22                          2943              * reset D1 and check for ASX
00002D22  4281                    2944              CLR.L   D1
00002D24  2205                    2945              MOVE.L  D5,D1
00002D26  E699                    2946              ROR.L   #3,D1
00002D28  0281 00000001           2947              ANDI.L  #$1,D1
00002D2E  0C01 0000               2948              CMPI.B  #0,D1
00002D32  6700 0032               2949              BEQ     OP_ASX
00002D36                          2950  
00002D36                          2951              * reset D1 and check for ROX
00002D36  4281                    2952              CLR.L   D1
00002D38  2205                    2953              MOVE.L  D5,D1
00002D3A  E699                    2954              ROR.L   #3,D1
00002D3C  0281 00000001           2955              ANDI.L  #$1,D1
00002D42  0C01 0003               2956              CMPI.B  #3,D1
00002D46  6700 0036               2957              BEQ     OP_ROX
00002D4A                          2958              
00002D4A  4EF8 14FE               2959              JMP     OP_DATA
00002D4E                          2960  
00002D4E                          2961  *---------------------------------------------------------------------------*
00002D4E                          2962  * OP_LSX: process LSR/LSL
00002D4E                          2963  *---------------------------------------------------------------------------*            
00002D4E  EA99                    2964  OP_LSX      ROR.L   #5,D1
00002D50  0281 00000001           2965              ANDI.L  #$1,D1
00002D56  0C01 0000               2966              CMPI.B  #0,D1
00002D5A  6700 003A               2967              BEQ     OP_LSR
00002D5E  0C01 0001               2968              CMPI.B  #1,D1
00002D62  6700 008C               2969              BEQ     OP_LSL
00002D66                          2970              
00002D66                          2971  *---------------------------------------------------------------------------*
00002D66                          2972  * OP_ASX: process ASR/ASL
00002D66                          2973  *---------------------------------------------------------------------------*  
00002D66  EA99                    2974  OP_ASX      ROR.L   #5,D1
00002D68  0281 00000001           2975              ANDI.L  #$1,D1
00002D6E  0C01 0000               2976              CMPI.B  #0,D1
00002D72  6700 00D6               2977              BEQ     OP_ASR
00002D76  0C01 0001               2978              CMPI.B  #1,D1
00002D7A  6700 0128               2979              BEQ     OP_ASL
00002D7E                          2980              
00002D7E                          2981  *---------------------------------------------------------------------------*
00002D7E                          2982  * OP_ROX: process ROR/ROL
00002D7E                          2983  *---------------------------------------------------------------------------*  
00002D7E  EA99                    2984  OP_ROX      ROR.L   #5,D1
00002D80  0281 00000001           2985              ANDI.L  #$1,D1
00002D86  0C01 0000               2986              CMPI.B  #0,D1
00002D8A  6700 0172               2987              BEQ     OP_ROR
00002D8E  0C01 0001               2988              CMPI.B  #1,D1
00002D92  6700 01C4               2989              BEQ     OP_ROL
00002D96                          2990  
00002D96                          2991  *---------------------------------------------------------------------------*
00002D96                          2992  * OP_LSR: decode and display LSR
00002D96                          2993  *---------------------------------------------------------------------------*        
00002D96  E599                    2994  OP_LSR      ROL.L   #2,D1
00002D98  0281 00000003           2995              ANDI.L  #$3,D1
00002D9E  0C01 0000               2996              CMPI.B  #0,D1
00002DA2  6700 0016               2997              BEQ     OP_LSR_B
00002DA6  0C01 0001               2998              CMPI.B  #$1,D1
00002DAA  6700 0032               2999              BEQ     OP_LSR_W
00002DAE  0C01 0002               3000              CMPI.B  #$2,D1
00002DB2  6700 0018               3001              BEQ     OP_LSR_L
00002DB6                          3002              
00002DB6  4EF8 14FE               3003              JMP     OP_DATA
00002DBA                          3004  
00002DBA  43F9 00004510           3005  OP_LSR_B    LEA     DISP_LSR_B,A1
00002DC0  103C 000E               3006              MOVE.B  #14,D0
00002DC4  4E4F                    3007              TRAP    #15
00002DC6  183C 0000               3008              MOVE.B  #0,D4
00002DCA  4E75                    3009              RTS
00002DCC                          3010  
00002DCC  43F9 00004534           3011  OP_LSR_L    LEA     DISP_LSR_L,A1
00002DD2  103C 000E               3012              MOVE.B  #14,D0
00002DD6  4E4F                    3013              TRAP    #15
00002DD8  183C 0002               3014              MOVE.B  #2,D4
00002DDC  4E75                    3015              RTS
00002DDE                          3016  
00002DDE  43F9 00004522           3017  OP_LSR_W    LEA     DISP_LSR_W,A1
00002DE4  103C 000E               3018              MOVE.B  #14,D0
00002DE8  4E4F                    3019              TRAP    #15
00002DEA  183C 0001               3020              MOVE.B  #1,D4
00002DEE  4E75                    3021              RTS
00002DF0                          3022   
00002DF0                          3023  *---------------------------------------------------------------------------*
00002DF0                          3024  * OP_LSL: decode and display LSL
00002DF0                          3025  *---------------------------------------------------------------------------*             
00002DF0  E599                    3026  OP_LSL      ROL.L   #2,D1
00002DF2  0281 00000003           3027              ANDI.L  #$3,D1
00002DF8  0C01 0000               3028              CMPI.B  #0,D1
00002DFC  6700 0016               3029              BEQ     OP_LSL_B
00002E00  0C01 0001               3030              CMPI.B  #$1,D1
00002E04  6700 0032               3031              BEQ     OP_LSL_W
00002E08  0C01 0002               3032              CMPI.B  #$2,D1
00002E0C  6700 0018               3033              BEQ     OP_LSL_L
00002E10                          3034              
00002E10  4EF8 14FE               3035              JMP OP_DATA
00002E14                          3036  
00002E14  43F9 00004519           3037  OP_LSL_B    LEA     DISP_LSL_B,A1
00002E1A  103C 000E               3038              MOVE.B  #14,D0
00002E1E  4E4F                    3039              TRAP    #15
00002E20  183C 0000               3040              MOVE.B  #0,D4
00002E24  4E75                    3041              RTS
00002E26                          3042  
00002E26  43F9 0000453D           3043  OP_LSL_L    LEA     DISP_LSL_L,A1
00002E2C  103C 000E               3044              MOVE.B  #14,D0
00002E30  4E4F                    3045              TRAP    #15
00002E32  183C 0002               3046              MOVE.B  #2,D4
00002E36  4E75                    3047              RTS
00002E38                          3048  
00002E38  43F9 0000452B           3049  OP_LSL_W    LEA     DISP_LSL_W,A1
00002E3E  103C 000E               3050              MOVE.B  #14,D0
00002E42  4E4F                    3051              TRAP    #15
00002E44  183C 0001               3052              MOVE.B  #1,D4
00002E48  4E75                    3053              RTS
00002E4A                          3054   
00002E4A                          3055  *---------------------------------------------------------------------------*
00002E4A                          3056  * OP_ASR: decode and display ASR
00002E4A                          3057  *---------------------------------------------------------------------------*             
00002E4A  E599                    3058  OP_ASR      ROL.L   #2,D1
00002E4C  0281 00000003           3059              ANDI.L  #$3,D1
00002E52  0C01 0000               3060              CMPI.B  #0,D1
00002E56  6700 0016               3061              BEQ     OP_ASR_B
00002E5A  0C01 0001               3062              CMPI.B  #$1,D1
00002E5E  6700 0032               3063              BEQ     OP_ASR_W
00002E62  0C01 0002               3064              CMPI.B  #$2,D1
00002E66  6700 0018               3065              BEQ     OP_ASR_L
00002E6A                          3066              
00002E6A  4EF8 14FE               3067              JMP OP_DATA
00002E6E                          3068  
00002E6E  43F9 00004546           3069  OP_ASR_B    LEA     DISP_ASR_B,A1
00002E74  103C 000E               3070              MOVE.B  #14,D0
00002E78  4E4F                    3071              TRAP    #15
00002E7A  183C 0000               3072              MOVE.B  #0,D4
00002E7E  4E75                    3073              RTS
00002E80                          3074  
00002E80  43F9 0000456A           3075  OP_ASR_L    LEA     DISP_ASR_L,A1
00002E86  103C 000E               3076              MOVE.B  #14,D0
00002E8A  4E4F                    3077              TRAP    #15
00002E8C  183C 0002               3078              MOVE.B  #2,D4
00002E90  4E75                    3079              RTS
00002E92                          3080  
00002E92  43F9 00004558           3081  OP_ASR_W    LEA     DISP_ASR_W,A1
00002E98  103C 000E               3082              MOVE.B  #14,D0
00002E9C  4E4F                    3083              TRAP    #15
00002E9E  183C 0001               3084              MOVE.B  #1,D4
00002EA2  4E75                    3085              RTS
00002EA4                          3086       
00002EA4                          3087  *---------------------------------------------------------------------------*
00002EA4                          3088  * OP_ASL: decode and display ASL
00002EA4                          3089  *---------------------------------------------------------------------------*         
00002EA4  E599                    3090  OP_ASL      ROL.L   #2,D1
00002EA6  0281 00000003           3091              ANDI.L  #$3,D1
00002EAC  0C01 0000               3092              CMPI.B  #0,D1
00002EB0  6700 0016               3093              BEQ     OP_ASL_B
00002EB4  0C01 0001               3094              CMPI.B  #$1,D1
00002EB8  6700 0032               3095              BEQ     OP_ASL_W
00002EBC  0C01 0002               3096              CMPI.B  #$2,D1
00002EC0  6700 0018               3097              BEQ     OP_ASL_L
00002EC4                          3098              
00002EC4  4EF8 14FE               3099              JMP OP_DATA
00002EC8                          3100  
00002EC8  43F9 0000454F           3101  OP_ASL_B    LEA     DISP_ASL_B,A1
00002ECE  103C 000E               3102              MOVE.B  #14,D0
00002ED2  4E4F                    3103              TRAP    #15
00002ED4  183C 0000               3104              MOVE.B  #0,D4
00002ED8  4E75                    3105              RTS
00002EDA                          3106  
00002EDA  43F9 00004573           3107  OP_ASL_L    LEA     DISP_ASL_L,A1
00002EE0  103C 000E               3108              MOVE.B  #14,D0
00002EE4  4E4F                    3109              TRAP    #15
00002EE6  183C 0002               3110              MOVE.B  #2,D4
00002EEA  4E75                    3111              RTS
00002EEC                          3112  
00002EEC  43F9 00004561           3113  OP_ASL_W    LEA     DISP_ASL_W,A1
00002EF2  103C 000E               3114              MOVE.B  #14,D0
00002EF6  4E4F                    3115              TRAP    #15
00002EF8  183C 0001               3116              MOVE.B  #1,D4
00002EFC  4E75                    3117              RTS
00002EFE                          3118   
00002EFE                          3119  *---------------------------------------------------------------------------*
00002EFE                          3120  * OP_ROR: decode and display ROR
00002EFE                          3121  *---------------------------------------------------------------------------*             
00002EFE  E599                    3122  OP_ROR      ROL.L   #2,D1
00002F00  0281 00000003           3123              ANDI.L  #$3,D1
00002F06  0C01 0000               3124              CMPI.B  #0,D1
00002F0A  6700 0016               3125              BEQ     OP_ROR_B
00002F0E  0C01 0001               3126              CMPI.B  #$1,D1
00002F12  6700 0032               3127              BEQ     OP_ROR_W
00002F16  0C01 0002               3128              CMPI.B  #$2,D1
00002F1A  6700 0018               3129              BEQ     OP_ROR_L
00002F1E                          3130              
00002F1E  4EF8 14FE               3131              JMP OP_DATA
00002F22                          3132  
00002F22  43F9 0000457C           3133  OP_ROR_B    LEA     DISP_ROR_B,A1
00002F28  103C 000E               3134              MOVE.B  #14,D0
00002F2C  4E4F                    3135              TRAP    #15
00002F2E  183C 0000               3136              MOVE.B  #0,D4
00002F32  4E75                    3137              RTS
00002F34                          3138  
00002F34  43F9 000045A0           3139  OP_ROR_L    LEA     DISP_ROR_L,A1
00002F3A  103C 000E               3140              MOVE.B  #14,D0
00002F3E  4E4F                    3141              TRAP    #15
00002F40  183C 0002               3142              MOVE.B  #2,D4
00002F44  4E75                    3143              RTS
00002F46                          3144  
00002F46  43F9 0000458E           3145  OP_ROR_W    LEA     DISP_ROR_W,A1
00002F4C  103C 000E               3146              MOVE.B  #14,D0
00002F50  4E4F                    3147              TRAP    #15
00002F52  183C 0001               3148              MOVE.B  #1,D4
00002F56  4E75                    3149              RTS
00002F58                          3150  
00002F58                          3151  *---------------------------------------------------------------------------*
00002F58                          3152  * OP_ROL: decode and display ROL
00002F58                          3153  *---------------------------------------------------------------------------*             
00002F58  E599                    3154  OP_ROL      ROL.L   #2,D1
00002F5A  0281 00000003           3155              ANDI.L  #$3,D1
00002F60  0C01 0000               3156              CMPI.B  #0,D1
00002F64  6700 0016               3157              BEQ     OP_ROL_B
00002F68  0C01 0001               3158              CMPI.B  #$1,D1
00002F6C  6700 0032               3159              BEQ     OP_ROL_W
00002F70  0C01 0002               3160              CMPI.B  #$2,D1
00002F74  6700 0018               3161              BEQ     OP_ROL_L
00002F78                          3162              
00002F78  4EF8 14FE               3163              JMP OP_DATA
00002F7C                          3164  
00002F7C                          3165  
00002F7C  43F9 00004585           3166  OP_ROL_B    LEA     DISP_ROL_B,A1
00002F82  103C 000E               3167              MOVE.B  #14,D0
00002F86  4E4F                    3168              TRAP    #15
00002F88  183C 0000               3169              MOVE.B  #0,D4
00002F8C  4E75                    3170              RTS
00002F8E                          3171  
00002F8E  43F9 000045A9           3172  OP_ROL_L    LEA     DISP_ROL_L,A1
00002F94  103C 000E               3173              MOVE.B  #14,D0
00002F98  4E4F                    3174              TRAP    #15
00002F9A  183C 0002               3175              MOVE.B  #2,D4
00002F9E  4E75                    3176              RTS
00002FA0                          3177  
00002FA0  43F9 00004597           3178  OP_ROL_W    LEA     DISP_ROL_W,A1
00002FA6  103C 000E               3179              MOVE.B  #14,D0
00002FAA  4E4F                    3180              TRAP    #15
00002FAC  183C 0001               3181              MOVE.B  #1,D4
00002FB0  4E75                    3182              RTS
00002FB2                          3183              
00002FB2                          3184  *---------------------------------------------------------------------------*
00002FB2                          3185  * OP1111 : Special reserved
00002FB2                          3186  *---------------------------------------------------------------------------*           
00002FB2  4EF8 14FE               3187  OP1111      JMP     OP_DATA
00002FB6                          3188  
00002FB6                          3189  *---------------------------------------------------------------------------*
00002FB6                          3190  * EA_NOSRC: decode and display effective addresses for NEG/JSR
00002FB6                          3191  *---------------------------------------------------------------------------*
00002FB6                          3192  EA_NOSRC    
00002FB6  4EB9 00003074           3193              JSR     SRC_MODE
00002FBC  43F9 00004276           3194              LEA     ENDLINE_M,A1
00002FC2  103C 000E               3195              MOVE.B  #14,D0
00002FC6  4E4F                    3196              TRAP    #15
00002FC8  4E75                    3197              RTS
00002FCA                          3198              
00002FCA                          3199  *---------------------------------------------------------------------------*
00002FCA                          3200  * EA_ARITH: decode and display effective addresses for DIVS/MULS
00002FCA                          3201  *---------------------------------------------------------------------------*
00002FCA                          3202  EA_ARITH
00002FCA  4EB9 00003074           3203              JSR     SRC_MODE
00002FD0  43F9 000045F0           3204              LEA     DISP_D,A1
00002FD6  103C 000E               3205              MOVE.B  #14,D0
00002FDA  4E4F                    3206              TRAP    #15
00002FDC  4EB9 00003300           3207              JSR     DEST_REGISTER
00002FE2  43F9 00004276           3208              LEA     ENDLINE_M,A1
00002FE8  103C 000E               3209              MOVE.B  #14,D0
00002FEC  4E4F                    3210              TRAP    #15
00002FEE  4E75                    3211              RTS
00002FF0                          3212              
00002FF0                          3213  *---------------------------------------------------------------------------*
00002FF0                          3214  * EA_MOVEA: decode and display effective addresses for MOVEA/LEA
00002FF0                          3215  *---------------------------------------------------------------------------*
00002FF0                          3216  EA_MOVEA
00002FF0  4EB9 00003074           3217              JSR     SRC_MODE
00002FF6  43F9 00004601           3218              LEA     DISP_AOP,A1
00002FFC  103C 000E               3219              MOVE.B  #14,D0
00003000  4E4F                    3220              TRAP    #15
00003002  4EB9 00003300           3221              JSR     DEST_REGISTER
00003008  43F9 000045FF           3222              LEA     DISP_CP,A1
0000300E  103C 000D               3223              MOVE.B  #13,D0
00003012  4E4F                    3224              TRAP    #15
00003014  4E75                    3225              RTS
00003016                          3226              
00003016                          3227  *---------------------------------------------------------------------------*
00003016                          3228  * EA_GEN: decode and display effective addresses for MOVE
00003016                          3229  *---------------------------------------------------------------------------*
00003016                          3230  EA_GEN          
00003016                          3231              * retrieve/display source mode/register
00003016  4EB9 00003074           3232              JSR     SRC_MODE
0000301C                          3233              
0000301C                          3234              * retrieve/display destination mode/register
0000301C  4EB9 00003030           3235              JSR     DEST_MODE
00003022                          3236              
00003022  43F9 00004276           3237              LEA     ENDLINE_M,A1
00003028  103C 000E               3238              MOVE.B  #14,D0
0000302C  4E4F                    3239              TRAP    #15
0000302E                          3240              
0000302E  4E75                    3241              RTS
00003030                          3242  
00003030                          3243  *---------------------------------------------------------------------------*
00003030                          3244  * DEST_MODE: decode and display destination mode (bit 8 - 6)
00003030                          3245  *---------------------------------------------------------------------------*           
00003030                          3246  DEST_MODE   
00003030                          3247              * clear registers to store temp data
00003030  4280                    3248              CLR.L   D0                      
00003032  4281                    3249              CLR.L   D1                      
00003034  207C 00000000           3250              MOVEA.L #0, A0                  
0000303A  227C 00000000           3251              MOVEA.L #0, A1                  
00003040  2205                    3252              MOVE.L  D5,D1
00003042  EC89                    3253              LSR.L   #6,D1
00003044  0281 00000007           3254              ANDI.L  #$7,D1
0000304A  0C01 0000               3255              CMPI.B  #0,D1   * Dn
0000304E  6700 0082               3256              BEQ     D_MODE000
00003052  0C01 0002               3257              CMPI.B  #2,D1   * (An)
00003056  6700 00C2               3258              BEQ     D_MODE010
0000305A  0C01 0003               3259              CMPI.B  #3,D1   * (An)+
0000305E  6700 011A               3260              BEQ     D_MODE011
00003062  0C01 0004               3261              CMPI.B  #4,D1   * -(An)
00003066  6700 0132               3262              BEQ     D_MODE100
0000306A  0C01 0007               3263              CMPI.B  #7,D1  * abs
0000306E  6700 017C               3264              BEQ     D_MODE111 
00003072  4E75                    3265              RTS
00003074                          3266  
00003074                          3267  *---------------------------------------------------------------------------*
00003074                          3268  * SRC_MODE: decode and display source mode (bit 5 - 3)
00003074                          3269  *---------------------------------------------------------------------------*  
00003074                          3270  SRC_MODE    
00003074                          3271              * clear registers to store temp data
00003074  4280                    3272              CLR.L   D0                      
00003076  4281                    3273              CLR.L   D1                      
00003078  207C 00000000           3274              MOVEA.L #0, A0                  
0000307E  227C 00000000           3275              MOVEA.L #0, A1                  
00003084  2205                    3276              MOVE.L  D5,D1
00003086  E489                    3277              LSR.L   #2,D1
00003088  0281 0000000E           3278              ANDI.L  #$E,D1
0000308E                          3279              
0000308E  0C01 0000               3280              CMPI.B  #0,D1   * Dn
00003092  6700 002A               3281              BEQ     MODE000
00003096  0C01 0002               3282              CMPI.B  #2,D1   * An 
0000309A  6700 004A               3283              BEQ     MODE001
0000309E  0C01 0004               3284              CMPI.B  #4,D1   * (An)
000030A2  6700 0056               3285              BEQ     MODE010
000030A6  0C01 0006               3286              CMPI.B  #6,D1   * (An)+
000030AA  6700 008E               3287              BEQ     MODE011
000030AE  0C01 0008               3288              CMPI.B  #8,D1   * -(An)
000030B2  6700 00A6               3289              BEQ     MODE100
000030B6  0C01 000F               3290              CMPI.B  #15,D1  * abs/immediate
000030BA  6700 00FE               3291              BEQ     MODE111 
000030BE                          3292        
000030BE                          3293  *---------------------------------------------------------------------------*
000030BE                          3294  * MODE000: decode and display source mode Dn
000030BE                          3295  *---------------------------------------------------------------------------*           
000030BE                          3296  MODE000     *Dn
000030BE  43F9 000045F0           3297              LEA     DISP_D,A1
000030C4  103C 000E               3298              MOVE.B  #14,D0
000030C8  4E4F                    3299              TRAP    #15
000030CA  4EB9 0000335C           3300              JSR     SRC_REGISTER
000030D0  4E75                    3301              RTS
000030D2                          3302  
000030D2                          3303  *---------------------------------------------------------------------------*
000030D2                          3304  * D_MODE000: decode and display dest mode Dn
000030D2                          3305  *---------------------------------------------------------------------------*
000030D2                          3306  D_MODE000     *Dn
000030D2  43F9 000045F0           3307              LEA     DISP_D,A1
000030D8  103C 000E               3308              MOVE.B  #14,D0
000030DC  4E4F                    3309              TRAP    #15
000030DE  4EB9 00003300           3310              JSR     DEST_REGISTER
000030E4  4E75                    3311              RTS
000030E6                          3312  
000030E6                          3313  *---------------------------------------------------------------------------*
000030E6                          3314  * MODE001: decode and display source mode An
000030E6                          3315  *---------------------------------------------------------------------------* 
000030E6                          3316  MODE001 *An
000030E6  43F9 000045F5           3317              LEA     DISP_A,A1
000030EC  103C 000E               3318              MOVE.B  #14,D0
000030F0  4E4F                    3319              TRAP    #15
000030F2  4EB9 0000335C           3320              JSR     SRC_REGISTER
000030F8                          3321          
000030F8  4E75                    3322              RTS
000030FA                          3323  
000030FA                          3324  *---------------------------------------------------------------------------*
000030FA                          3325  * MODE010: decode and display source mode (An)
000030FA                          3326  *---------------------------------------------------------------------------*    
000030FA                          3327  MODE010 *(An)
000030FA  43F9 00004601           3328              LEA     DISP_AOP,A1  *display (A
00003100  103C 000E               3329              MOVE.B  #14,D0
00003104  4E4F                    3330              TRAP    #15
00003106                          3331  
00003106  4EB9 0000335C           3332              JSR     SRC_REGISTER * display register
0000310C                          3333  
0000310C  43F9 000045FF           3334              LEA     DISP_CP,A1   *display )
00003112  103C 000E               3335              MOVE.B  #14,D0
00003116  4E4F                    3336              TRAP    #15
00003118                          3337              
00003118  4E75                    3338              RTS
0000311A                          3339  
0000311A                          3340  *---------------------------------------------------------------------------*
0000311A                          3341  * D_MODE010: decode and display dest mode (An)
0000311A                          3342  *---------------------------------------------------------------------------*
0000311A                          3343  D_MODE010 *(An)
0000311A  43F9 00004601           3344              LEA     DISP_AOP,A1  *display (A
00003120  103C 000E               3345              MOVE.B  #14,D0
00003124  4E4F                    3346              TRAP    #15
00003126                          3347     
00003126  4EB9 00003300           3348              JSR     DEST_REGISTER * display register
0000312C                          3349  
0000312C  43F9 000045FF           3350              LEA     DISP_CP,A1   *display )
00003132  103C 000E               3351              MOVE.B  #14,D0
00003136  4E4F                    3352              TRAP    #15
00003138                          3353              
00003138  4E75                    3354              RTS
0000313A                          3355  
0000313A                          3356  *---------------------------------------------------------------------------*
0000313A                          3357  * MODE011: decode and display source mode (An)+
0000313A                          3358  *---------------------------------------------------------------------------*
0000313A                          3359  MODE011 *(An)+
0000313A  43F9 00004601           3360              LEA     DISP_AOP,A1      *display (A
00003140  103C 000E               3361              MOVE.B  #14,D0
00003144  4E4F                    3362              TRAP    #15
00003146                          3363              
00003146  4EB9 0000335C           3364              JSR     SRC_REGISTER    * display register
0000314C                          3365  
0000314C  43F9 0000460E           3366              LEA     DISP_POST,A1    *display )+
00003152  103C 000E               3367              MOVE.B  #14,D0
00003156  4E4F                    3368              TRAP    #15
00003158                          3369              
00003158  4E75                    3370              RTS
0000315A                          3371              
0000315A                          3372  *---------------------------------------------------------------------------*
0000315A                          3373  * MODE100: decode and display source mode -(An)
0000315A                          3374  *---------------------------------------------------------------------------*
0000315A                          3375  MODE100 *-(An)
0000315A  43F9 00004607           3376              LEA     DISP_PRE,A1    *display -(A
00003160  103C 000E               3377              MOVE.B  #14,D0
00003164  4E4F                    3378              TRAP    #15
00003166                          3379  
00003166  4EB9 0000335C           3380              JSR     SRC_REGISTER    *display register
0000316C                          3381  
0000316C  43F9 000045FF           3382              LEA     DISP_CP,A1   *display )
00003172  103C 000E               3383              MOVE.B  #14,D0
00003176  4E4F                    3384              TRAP    #15
00003178                          3385              
00003178  4E75                    3386              RTS
0000317A                          3387  
0000317A                          3388  *---------------------------------------------------------------------------*
0000317A                          3389  * D_MODE011: decode and display dest mode (An)+
0000317A                          3390  *---------------------------------------------------------------------------*
0000317A                          3391  D_MODE011 *(An)+
0000317A  43F9 00004601           3392              LEA     DISP_AOP,A1      *display (A
00003180  103C 000E               3393              MOVE.B  #14,D0
00003184  4E4F                    3394              TRAP    #15
00003186                          3395  
00003186  4EB9 00003300           3396              JSR     DEST_REGISTER    * display register
0000318C                          3397  
0000318C  43F9 0000460E           3398              LEA     DISP_POST,A1    *display )+
00003192  103C 000E               3399              MOVE.B  #14,D0
00003196  4E4F                    3400              TRAP    #15
00003198                          3401              
00003198  4E75                    3402              RTS
0000319A                          3403              
0000319A                          3404  *---------------------------------------------------------------------------*
0000319A                          3405  * D_MODE100: decode and display dest mode -(An)
0000319A                          3406  *---------------------------------------------------------------------------*            
0000319A                          3407  D_MODE100 *-(An)
0000319A  43F9 00004607           3408              LEA     DISP_PRE,A1    *display -(A
000031A0  103C 000E               3409              MOVE.B  #14,D0
000031A4  4E4F                    3410              TRAP    #15
000031A6                          3411              
000031A6  4EB9 00003300           3412              JSR     DEST_REGISTER    *display register
000031AC                          3413  
000031AC  43F9 000045FF           3414              LEA     DISP_CP,A1   *display )
000031B2  103C 000E               3415              MOVE.B  #14,D0
000031B6  4E4F                    3416              TRAP    #15
000031B8                          3417              
000031B8  4E75                    3418              RTS
000031BA                          3419  
000031BA                          3420  *---------------------------------------------------------------------------*
000031BA                          3421  * MODE111: decode and display source mode absolute/immediate
000031BA                          3422  *---------------------------------------------------------------------------*
000031BA                          3423  MODE111     * abs/immediate
000031BA                          3424              * clear registers to store temp data
000031BA  4280                    3425              CLR.L   D0                      
000031BC  4281                    3426              CLR.L   D1                      
000031BE  207C 00000000           3427              MOVEA.L #0, A0                  
000031C4  227C 00000000           3428              MOVEA.L #0, A1                  
000031CA  2205                    3429              MOVE.L  D5,D1
000031CC                          3430              
000031CC                          3431              * retrieve source register for MODE 111
000031CC  E389                    3432              LSL.L   #1,D1   * shift the bits to left by 1
000031CE  0281 0000000E           3433              ANDI.L  #$E,D1  * mask the first 4 bits 
000031D4  0C01 0000               3434              CMPI.B  #0, D1  * if it's 0000, absolute word address
000031D8  6700 003E               3435              BEQ     WORDMODE
000031DC  0C01 0002               3436              CMPI.B  #2, D1  * if it's 0010, absolute long address
000031E0  6700 0062               3437              BEQ     LONGMODE
000031E4  0C01 0008               3438              CMPI.B  #8, D1  * if it's 1000, immediate data
000031E8  6700 0086               3439              BEQ     IMMEDIATE
000031EC                          3440       
000031EC                          3441  *---------------------------------------------------------------------------*
000031EC                          3442  * D_MODE111: decode and display dest mode absolute/immediate
000031EC                          3443  *---------------------------------------------------------------------------*           
000031EC                          3444  D_MODE111   * abs
000031EC                          3445              * clear registers to store temp data
000031EC  4280                    3446              CLR.L   D0                      
000031EE  4281                    3447              CLR.L   D1                      
000031F0  207C 00000000           3448              MOVEA.L #0, A0                  
000031F6  227C 00000000           3449              MOVEA.L #0, A1                  
000031FC  2205                    3450              MOVE.L  D5,D1
000031FE                          3451              
000031FE                          3452              * retrieve dest register for MODE 111
000031FE  EC89                    3453              LSR.L   #6,D1   * shift the bits to right by 6
00003200  E689                    3454              LSR.L   #3,D1   * shift the bits to right by extra 3
00003202  0201 0001               3455              ANDI.B  #1,D1   * mask the first 2 bits 
00003206  0C01 0000               3456              CMPI.B  #0, D1  * if it's 000, absolute word address
0000320A  6700 000C               3457              BEQ     WORDMODE
0000320E  0C01 0001               3458              CMPI.B  #1, D1  * if it's 001, absolute long address
00003212  6700 0030               3459              BEQ     LONGMODE
00003216                          3460              *JSR     OP_DATA *not sure..
00003216  4E75                    3461              RTS
00003218                          3462  
00003218                          3463  
00003218                          3464  *---------------------------------------------------------------------------*
00003218                          3465  * WORDMODE: absolute word address
00003218                          3466  *---------------------------------------------------------------------------*
00003218  43F9 000045EB           3467  WORDMODE    LEA     DISP_HEX,A1
0000321E  103C 000E               3468              MOVE.B  #14,D0
00003222  4E4F                    3469              TRAP    #15
00003224                          3470              
00003224  4285                    3471              CLR.L   D5
00003226  3A1D                    3472              MOVE.W  (A5)+,D5
00003228                          3473              
00003228  43F9 000042C9           3474              LEA     TMPOUTPUT,A1
0000322E  2205                    3475              MOVE.L  D5,D1
00003230  7404                    3476              MOVE.L  #4,D2       *move word size 4
00003232  4EB8 11FE               3477              JSR     HEX2ASCII
00003236  43F9 000042C9           3478              LEA     TMPOUTPUT,A1
0000323C  103C 000E               3479              MOVE.B  #14,D0
00003240  4E4F                    3480              TRAP    #15
00003242                          3481              
00003242  4E75                    3482              RTS
00003244                          3483  
00003244                          3484  *---------------------------------------------------------------------------*
00003244                          3485  * LONGMODE: absolute long address
00003244                          3486  *---------------------------------------------------------------------------*
00003244  43F9 000045EB           3487  LONGMODE    LEA     DISP_HEX,A1
0000324A  103C 000E               3488              MOVE.B  #14,D0
0000324E  4E4F                    3489              TRAP    #15
00003250                          3490              
00003250  4285                    3491              CLR.L   D5
00003252  2A1D                    3492              MOVE.L  (A5)+,D5
00003254                          3493              
00003254  43F9 000042C9           3494              LEA     TMPOUTPUT,A1
0000325A  2205                    3495              MOVE.L  D5,D1
0000325C  7408                    3496              MOVE.L  #8,D2           *move longword size 8
0000325E  4EB8 11FE               3497              JSR     HEX2ASCII
00003262  43F9 000042C9           3498              LEA     TMPOUTPUT,A1
00003268  103C 000E               3499              MOVE.B  #14,D0
0000326C  4E4F                    3500              TRAP    #15
0000326E                          3501              
0000326E  4E75                    3502              RTS
00003270                          3503  
00003270                          3504  
00003270                          3505  *---------------------------------------------------------------------------*
00003270                          3506  * IMMEDIATE: immediate address
00003270                          3507  *---------------------------------------------------------------------------*
00003270  43F9 00004611           3508  IMMEDIATE   LEA     DISP_LB,A1
00003276  103C 000E               3509              MOVE.B  #14,D0
0000327A  4E4F                    3510              TRAP    #15
0000327C  43F9 000045EB           3511              LEA     DISP_HEX,A1
00003282  103C 000E               3512              MOVE.B  #14,D0
00003286  4E4F                    3513              TRAP    #15
00003288                          3514              
00003288                          3515              * check for size
00003288  0C04 0000               3516              CMPI.B  #0,D4
0000328C  6700 0012               3517              BEQ     IMMD_B
00003290  0C04 0001               3518              CMPI.B  #1,D4
00003294  6700 002A               3519              BEQ     IMMD_W
00003298  0C04 0002               3520              CMPI.B  #2,D4
0000329C  6700 0042               3521              BEQ     IMMD_L
000032A0                          3522  
000032A0                          3523  IMMD_B
000032A0  4285                    3524              CLR.L   D5
000032A2  3A1D                    3525              MOVE.W  (A5)+,D5
000032A4                          3526              
000032A4  43F9 000042C9           3527              LEA     TMPOUTPUT,A1
000032AA  2205                    3528              MOVE.L  D5,D1
000032AC  7402                    3529              MOVE.L  #2,D2
000032AE  4EB8 11FE               3530              JSR     HEX2ASCII
000032B2  43F9 000042C9           3531              LEA     TMPOUTPUT,A1
000032B8  103C 000E               3532              MOVE.B  #14,D0
000032BC  4E4F                    3533              TRAP    #15
000032BE  4E75                    3534              RTS
000032C0                          3535              
000032C0                          3536  IMMD_W
000032C0  4285                    3537              CLR.L   D5
000032C2  3A1D                    3538              MOVE.W  (A5)+,D5
000032C4                          3539              
000032C4  43F9 000042C9           3540              LEA     TMPOUTPUT,A1
000032CA  2205                    3541              MOVE.L  D5,D1
000032CC  7404                    3542              MOVE.L  #4,D2
000032CE  4EB8 11FE               3543              JSR     HEX2ASCII
000032D2  43F9 000042C9           3544              LEA     TMPOUTPUT,A1
000032D8  103C 000E               3545              MOVE.B  #14,D0
000032DC  4E4F                    3546              TRAP    #15
000032DE  4E75                    3547              RTS
000032E0                          3548              
000032E0                          3549  
000032E0                          3550  IMMD_L
000032E0  4285                    3551              CLR.L   D5
000032E2  3A1D                    3552              MOVE.W  (A5)+,D5
000032E4                          3553              
000032E4  43F9 000042C9           3554              LEA     TMPOUTPUT,A1
000032EA  2205                    3555              MOVE.L  D5,D1
000032EC  7408                    3556              MOVE.L  #8,D2
000032EE  4EB8 11FE               3557              JSR     HEX2ASCII
000032F2  43F9 000042C9           3558              LEA     TMPOUTPUT,A1
000032F8  103C 000E               3559              MOVE.B  #14,D0
000032FC  4E4F                    3560              TRAP    #15
000032FE  4E75                    3561              RTS
00003300                          3562  
00003300                          3563  
00003300                          3564  *---------------------------------------------------------------------------*
00003300                          3565  * DEST_REGISTER: decode and display destination register (bit 11 - 9)
00003300                          3566  *---------------------------------------------------------------------------*
00003300                          3567  DEST_REGISTER
00003300                          3568              * clear registers to store temp data
00003300  4280                    3569              CLR.L   D0                      
00003302  4281                    3570              CLR.L   D1                      
00003304  207C 00000000           3571              MOVEA.L #0, A0                  
0000330A  227C 00000000           3572              MOVEA.L #0, A1 
00003310                          3573              
00003310  2205                    3574              MOVE.L  D5,D1
00003312  EC89                    3575              LSR.L   #6,D1
00003314  E689                    3576              LSR.L   #3,D1
00003316  0281 00000007           3577              ANDI.L  #7,D1
0000331C                          3578              
0000331C  0C01 0000               3579              CMPI.B  #0,D1
00003320  6700 0092               3580              BEQ     REG_0
00003324  0C01 0001               3581              CMPI.B  #1,D1
00003328  6700 0098               3582              BEQ     REG_1
0000332C  0C01 0002               3583              CMPI.B  #2,D1
00003330  6700 009E               3584              BEQ     REG_2
00003334  0C01 0003               3585              CMPI.B  #3,D1
00003338  6700 00A4               3586              BEQ     REG_3
0000333C  0C01 0004               3587              CMPI.B  #4,D1
00003340  6700 00AA               3588              BEQ     REG_4
00003344  0C01 0005               3589              CMPI.B  #5,D1
00003348  6700 00B0               3590              BEQ     REG_5
0000334C  0C01 0006               3591              CMPI.B  #6,D1
00003350  6700 00B6               3592              BEQ     REG_6
00003354  0C01 0007               3593              CMPI.B  #7,D1
00003358  6700 00BC               3594              BEQ     REG_7
0000335C                          3595  
0000335C                          3596  *---------------------------------------------------------------------------*
0000335C                          3597  * SRC_REGISTER: decode and display source register (bit 2 - 0)
0000335C                          3598  *---------------------------------------------------------------------------*           
0000335C                          3599  SRC_REGISTER 
0000335C                          3600              * clear registers to store temp data
0000335C  4280                    3601              CLR.L   D0                      
0000335E  4281                    3602              CLR.L   D1                      
00003360  207C 00000000           3603              MOVEA.L #0, A0                  
00003366  227C 00000000           3604              MOVEA.L #0, A1                  
0000336C                          3605              
0000336C  2205                    3606              MOVE.L  D5,D1   * temp store the processing data
0000336E  0281 00000007           3607              ANDI.L  #7,D1   * mask the first 4 bits with 0111
00003374                          3608              
00003374  0C01 0000               3609              CMPI.B  #0,D1
00003378  6700 003A               3610              BEQ     REG_0
0000337C  0C01 0001               3611              CMPI.B  #1,D1
00003380  6700 0040               3612              BEQ     REG_1
00003384  0C01 0002               3613              CMPI.B  #2,D1
00003388  6700 0046               3614              BEQ     REG_2
0000338C  0C01 0003               3615              CMPI.B  #3,D1
00003390  6700 004C               3616              BEQ     REG_3
00003394  0C01 0004               3617              CMPI.B  #4,D1
00003398  6700 0052               3618              BEQ     REG_4
0000339C  0C01 0005               3619              CMPI.B  #5,D1
000033A0  6700 0058               3620              BEQ     REG_5
000033A4  0C01 0006               3621              CMPI.B  #6,D1
000033A8  6700 005E               3622              BEQ     REG_6
000033AC  0C01 0007               3623              CMPI.B  #7,D1
000033B0  6700 0064               3624              BEQ     REG_7
000033B4                          3625  
000033B4                          3626  *---------------------------------------------------------------------------*
000033B4                          3627  * REG_0 ~ REG_7: display register 0 to 7
000033B4                          3628  *---------------------------------------------------------------------------*
000033B4  43F9 00004616           3629  REG_0       LEA     DISP_0,A1
000033BA  103C 000E               3630              MOVE.B  #14,D0
000033BE  4E4F                    3631              TRAP    #15
000033C0  4E75                    3632              RTS
000033C2                          3633              
000033C2  43F9 00004618           3634  REG_1       LEA     DISP_1,A1
000033C8  103C 000E               3635              MOVE.B  #14,D0
000033CC  4E4F                    3636              TRAP    #15
000033CE  4E75                    3637              RTS
000033D0                          3638              
000033D0                          3639  
000033D0  43F9 0000461A           3640  REG_2       LEA     DISP_2,A1
000033D6  103C 000E               3641              MOVE.B  #14,D0
000033DA  4E4F                    3642              TRAP    #15
000033DC  4E75                    3643              RTS
000033DE                          3644            
000033DE  43F9 0000461C           3645  REG_3       LEA     DISP_3,A1
000033E4  103C 000E               3646              MOVE.B  #14,D0
000033E8  4E4F                    3647              TRAP    #15
000033EA  4E75                    3648              RTS
000033EC                          3649              
000033EC  43F9 0000461E           3650  REG_4       LEA     DISP_4,A1
000033F2  103C 000E               3651              MOVE.B  #14,D0
000033F6  4E4F                    3652              TRAP    #15
000033F8  4E75                    3653              RTS
000033FA                          3654              
000033FA  43F9 00004620           3655  REG_5       LEA     DISP_5,A1
00003400  103C 000E               3656              MOVE.B  #14,D0
00003404  4E4F                    3657              TRAP    #15
00003406  4E75                    3658              RTS
00003408                          3659              
00003408  43F9 00004622           3660  REG_6       LEA     DISP_6,A1
0000340E  103C 000E               3661              MOVE.B  #14,D0
00003412  4E4F                    3662              TRAP    #15
00003414  4E75                    3663              RTS
00003416                          3664              
00003416  43F9 00004624           3665  REG_7       LEA     DISP_7,A1
0000341C  103C 000E               3666              MOVE.B  #14,D0
00003420  4E4F                    3667              TRAP    #15
00003422  4E75                    3668              RTS
00003424                          3669              
00003424                          3670  *---------------------------------------------------------------------------*
00003424                          3671  * REPEAT : Ask user whether they wish to run the program again
00003424                          3672  *---------------------------------------------------------------------------*           
00003424  4246                    3673  REPEAT      CLR.W   D6                      * Reset D6 (Loop Count)
00003426  43F9 000040EF           3674              LEA     REPEATMSG,A1
0000342C  103C 000E               3675              MOVE.B  #14,D0
00003430  4E4F                    3676              TRAP    #15
00003432                          3677              
00003432  43F9 00004279           3678              LEA     TMPINPUT,A1             * allocate space to temp store user input
00003438  103C 0002               3679              MOVE.B  #2,D0
0000343C  4E4F                    3680              TRAP    #15
0000343E                          3681  
0000343E  0C01 0001               3682              CMPI.B  #1,D1                   * check for length of user input
00003442  66E0                    3683              BNE     REPEAT                  * return to the beginning of the function if unequal
00003444                          3684              
00003444  0C11 0059               3685              CMPI.B  #$59,(A1)               * compare the input with Y    
00003448  6700 DBC0               3686              BEQ     PROGLP                  * repeat the program
0000344C                          3687              
0000344C  0C11 0079               3688              CMPI.B  #$79,(A1)               * compare the input with y    
00003450  6700 DBB8               3689              BEQ     PROGLP                  * repeat the program
00003454                          3690              
00003454  0C11 004E               3691              CMPI.B  #$4E,(A1)               * compare the input with N    
00003458  6700 0928               3692              BEQ     TERMINATE               * finish program
0000345C                          3693              
0000345C  0C11 006E               3694              CMPI.B  #$6E,(A1)               * compare the input with n    
00003460  6700 0920               3695              BEQ     TERMINATE               * finish program
00003464                          3696              
00003464  60BE                    3697              BRA     REPEAT                  * invalid input/repeat the function
00003466                          3698  
00003466                          3699  *---------------------------------------------------------------------------*
00003466                          3700  * EA DECODING INTERFACE
00003466                          3701  * [A0] - RESERVED FOR USE
00003466                          3702  * [D2] - RESERVED FOR USE
00003466                          3703  * RETURNS - ERROR FLAG IF FAILED TO PUSH SRC EA INTO STACK
00003466                          3704  *---------------------------------------------------------------------------*
00003466                          3705  GET_EA_EA_SRC
00003466                          3706      *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
00003466                          3707      
00003466                          3708      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
00003466  2405                    3709      MOVE.L  D5,D2                           * CLEAN COPY TO D2
00003468  E68A                    3710      LSR.L   #3,D2                           * [D2] Temporarily used D2 for shifting bits            *TODO: DYNAMIC FOR ANY LOCATION OF SOURCE
0000346A  23C2 0000463C           3711      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
00003470  7407                    3712      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
00003472  C5B9 0000463C           3713      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
00003478                          3714                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
00003478                          3715      
00003478                          3716      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
00003478                          3717      *DESTINATION REGISTER FORMAT STANDARD         *
00003478                          3718      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
00003478                          3719      *WHEN BIT = 0(VALID ADDRESS MODE)             *
00003478                          3720      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
00003478                          3721      *0 - Dn                                       *
00003478                          3722      *1 - An                                       *
00003478                          3723      *2 - (An)                                     *
00003478                          3724      *3 - (An)+                                    *
00003478                          3725      *4 - -(An)                                    *
00003478                          3726      *5 - (XXX).W                                  *
00003478                          3727      *6 - (XXX).L                                  *
00003478                          3728      *7 - #<data>                                  *
00003478                          3729      ***********************************************
00003478                          3730      
00003478                          3731      *** Check if source ...  <ea> = Dn
00003478                          3732  CHECK0    
00003478  41F9 0000462C           3733            LEA     TEMP_REGISTER_FORMAT,A0
0000347E  1439 0000462B           3734            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003484  1082                    3735            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003486  0239 0001 0000462C      3736            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
0000348E  0C39 0001 0000462C      3737            CMPI.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
00003496  6700 006A               3738            BEQ     CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
0000349A  0CB9 00000000 0000463C  3739            CMPI.L     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn) - COMPARE MODES TO SEE IF IT IS THIS MODE
000034A4  6600 005C               3740            BNE     CHECK1
000034A8                          3741            
000034A8                          3742            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000034A8  163C 0020               3743            MOVE.B    #' ',D3
000034AC  6100 0856               3744            BSR       PUSH_STACK
000034B0  163C 0044               3745            MOVE.B    #'D',D3
000034B4  6100 084E               3746            BSR       PUSH_STACK
000034B8                          3747  
000034B8                          3748            *FIND REGISTER NUMBER END LOCATION*  
000034B8  13F9 0000462E 00004634  3749            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
000034C2  0239 000F 00004634      3750            AND.B   #$0F,VAR_BYTE_END
000034CA                          3751            
000034CA                          3752            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000034CA  23C5 00004638           3753            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000034D0  1439 00004634           3754            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000034D6                          3755            
000034D6                          3756            *INTITIALIZE FOR BIT SHIFTING
000034D6  41F9 00004638           3757            LEA     VAR_TEMP_CLEANCOPY,A0
000034DC  2639 00004638           3758            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000034E2                          3759  LOOP_SHIFTING
000034E2  0C02 0000               3760            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000034E6  6700 0008               3761            BEQ     MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
000034EA  E24B                    3762            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000034EC  5302                    3763            SUB.B   #1,D2                     *DECREMENT COUNTER
000034EE  60F2                    3764            BRA     LOOP_SHIFTING             *CONTINUE SHIFTING
000034F0                          3765  MASKING_NEXT
000034F0  C6BC 00000007           3766            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000034F6  0603 0030               3767            ADD.B   #$30,D3                   *CONVERT TO CHAR
000034FA  6100 0808               3768            BSR     PUSH_STACK                *PUSH TO STACK
000034FE                          3769            
000034FE  6000 0394               3770            BRA     GET_SRC_SUCCESS           *RETURN          
00003502                          3771            
00003502                          3772            
00003502                          3773            *** Check if source ...  <ea> = An
00003502  41F9 0000462C           3774  CHECK1    LEA     TEMP_REGISTER_FORMAT,A0
00003508  1439 0000462B           3775            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000350E  1082                    3776            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003510  0239 0002 0000462C      3777            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
00003518  0C39 0002 0000462C      3778            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
00003520  6700 006A               3779            BEQ     CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00003524  0CB9 00000001 0000463C  3780            CMPI.L  #1,VAR_LONG_ADDRESS_MODE_CHECK                      * An - COMPARE MODES TO SEE IF IT IS THIS MODE
0000352E  6600 005C               3781            BNE     CHECK2
00003532                          3782            
00003532                          3783            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003532  163C 0020               3784            MOVE.B    #' ',D3
00003536  6100 07CC               3785            BSR       PUSH_STACK
0000353A  163C 0041               3786            MOVE.B    #'A',D3
0000353E  6100 07C4               3787            BSR       PUSH_STACK
00003542                          3788  
00003542                          3789            
00003542                          3790            *FIND REGISTER NUMBER END LOCATION*  
00003542  13F9 0000462E 00004634  3791            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
0000354C  0239 000F 00004634      3792            AND.B   #$0F,VAR_BYTE_END
00003554                          3793            
00003554                          3794            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003554  23C5 00004638           3795            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
0000355A  1439 00004634           3796            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
00003560                          3797            
00003560                          3798            *INTITIALIZE FOR BIT SHIFTING
00003560  41F9 00004638           3799            LEA     VAR_TEMP_CLEANCOPY,A0
00003566  2639 00004638           3800            MOVE.L  VAR_TEMP_CLEANCOPY,D3
0000356C                          3801  LOOP_SHIFTING1
0000356C  0C02 0000               3802            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003570  6700 0008               3803            BEQ     MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00003574  E24B                    3804            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003576  5302                    3805            SUB.B   #1,D2                     *DECREMENT COUNTER
00003578  60F2                    3806            BRA     LOOP_SHIFTING1             *CONTINUE SHIFTING
0000357A                          3807  MASKING_NEXT1
0000357A  C6BC 00000007           3808            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003580  0603 0030               3809            ADD.B   #$30,D3                   *CONVERT TO CHAR
00003584  6100 077E               3810            BSR     PUSH_STACK                *PUSH TO STACK
00003588                          3811            
00003588  6000 030A               3812            BRA     GET_SRC_SUCCESS                   *RETURN 
0000358C                          3813            
0000358C                          3814            
0000358C                          3815            
0000358C                          3816            
0000358C                          3817            *** Check if source ...  <ea> = (An)       
0000358C  41F9 0000462C           3818  CHECK2    LEA     TEMP_REGISTER_FORMAT,A0
00003592  1439 0000462B           3819            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003598  1082                    3820            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000359A  0239 0004 0000462C      3821            ANDI.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
000035A2  0C39 0004 0000462C      3822            CMPI.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
000035AA  6700 007A               3823            BEQ     CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
000035AE  0CB9 00000002 0000463C  3824            CMPI.L   #2,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)  COMPARE MODES TO SEE IF IT IS THIS MODE                                                                *change: checkx++*
000035B8  6600 006C               3825            BNE     CHECK3
000035BC                          3826            
000035BC                          3827            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
000035BC  163C 0020               3828            MOVE.B    #' ',D3
000035C0  6100 0742               3829            BSR       PUSH_STACK
000035C4  163C 0028               3830            MOVE.B    #'(',D3
000035C8  6100 073A               3831            BSR       PUSH_STACK
000035CC  163C 0041               3832            MOVE.B    #'A',D3
000035D0  6100 0732               3833            BSR       PUSH_STACK
000035D4                          3834  
000035D4                          3835            
000035D4                          3836            *FIND REGISTER NUMBER END LOCATION*  
000035D4  13F9 0000462E 00004634  3837            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
000035DE  0239 000F 00004634      3838            AND.B   #$0F,VAR_BYTE_END
000035E6                          3839            
000035E6                          3840            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000035E6  23C5 00004638           3841            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000035EC  1439 00004634           3842            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000035F2                          3843            
000035F2                          3844            *INTITIALIZE FOR BIT SHIFTING
000035F2  41F9 00004638           3845            LEA     VAR_TEMP_CLEANCOPY,A0
000035F8  2639 00004638           3846            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000035FE                          3847  LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
000035FE  0C02 0000               3848            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003602  6700 0008               3849            BEQ     MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00003606  E24B                    3850            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003608  5302                    3851            SUB.B   #1,D2                     *DECREMENT COUNTER
0000360A  60F2                    3852            BRA     LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
0000360C                          3853  MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
0000360C  0283 00000007           3854            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003612  0603 0030               3855            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00003616  6100 06EC               3856            BSR     PUSH_STACK                *PUSH TO STACK
0000361A                          3857            
0000361A  163C 0029               3858            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
0000361E  6100 06E4               3859            BSR       PUSH_STACK
00003622                          3860            
00003622  6000 0270               3861            BRA     GET_SRC_SUCCESS                   *RETURN 
00003626                          3862  
00003626                          3863            
00003626                          3864            
00003626                          3865                      
00003626                          3866  *** Check if source ...  <ea> = (An)+       
00003626  41F9 0000462C           3867  CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
0000362C  1439 0000462B           3868            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003632  1082                    3869            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003634  0239 0008 0000462C      3870            ANDI.B  #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
0000363C  0C39 0008 0000462C      3871            CMPI.B  #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
00003644  6700 0082               3872            BEQ     CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00003648  0CB9 00000003 0000463C  3873            CMPI.L  #3,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)+ - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00003652  6600 0074               3874            BNE     CHECK4
00003656                          3875            
00003656                          3876            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00003656  163C 0020               3877            MOVE.B    #' ',D3
0000365A  6100 06A8               3878            BSR       PUSH_STACK
0000365E  163C 0028               3879            MOVE.B    #'(',D3
00003662  6100 06A0               3880            BSR       PUSH_STACK
00003666  163C 0041               3881            MOVE.B    #'A',D3
0000366A  6100 0698               3882            BSR       PUSH_STACK
0000366E                          3883  
0000366E                          3884            
0000366E                          3885            *FIND REGISTER NUMBER END LOCATION*  
0000366E  13F9 0000462E 00004634  3886            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00003678  0239 000F 00004634      3887            ANDI.B   #$0F,VAR_BYTE_END
00003680                          3888            
00003680                          3889            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003680  23C5 00004638           3890            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003686  1439 00004634           3891            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
0000368C                          3892            
0000368C                          3893            *INTITIALIZE FOR BIT SHIFTING
0000368C  41F9 00004638           3894            LEA     VAR_TEMP_CLEANCOPY,A0
00003692  2639 00004638           3895            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003698                          3896            
00003698                          3897  LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
00003698  0C02 0000               3898            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000369C  6700 0008               3899            BEQ     MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
000036A0  E24B                    3900            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000036A2  5302                    3901            SUBI.B   #1,D2                     *DECREMENT COUNTER
000036A4  60F2                    3902            BRA     LOOP_SHIFTING3            *CONTINUE SHIFTING 
000036A6                          3903                                               *change: NAME OF LABEL*
000036A6                          3904  MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
000036A6  0283 00000007           3905            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000036AC  0603 0030               3906            ADDI.B   #$30,D3                   *CONVERT TO CHAR
000036B0  6100 0652               3907            BSR     PUSH_STACK                *PUSH TO STACK
000036B4                          3908            
000036B4  163C 0029               3909            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
000036B8  6100 064A               3910            BSR       PUSH_STACK
000036BC  163C 002B               3911            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
000036C0  6100 0642               3912            BSR       PUSH_STACK
000036C4                          3913            
000036C4  6000 01CE               3914            BRA       GET_SRC_SUCCESS                   *RETURN 
000036C8                          3915  
000036C8                          3916            
000036C8                          3917            
000036C8                          3918                      
000036C8                          3919            *** Check if source ...  <ea> = -(An)       
000036C8  41F9 0000462C           3920  CHECK4    LEA     TEMP_REGISTER_FORMAT,A0
000036CE  1439 0000462B           3921            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000036D4  1082                    3922            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000036D6  0239 0010 0000462C      3923            ANDI.B  #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
000036DE  0C39 0010 0000462C      3924            CMPI.B  #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
000036E6  6700 0082               3925            BEQ     CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
000036EA  0CB9 00000004 0000463C  3926            CMPI.L  #4,VAR_LONG_ADDRESS_MODE_CHECK                      * -(An) - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
000036F4  6600 0074               3927            BNE     CHECK7
000036F8                          3928            
000036F8                          3929            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
000036F8  163C 0020               3930            MOVE.B    #' ',D3
000036FC  6100 0606               3931            BSR       PUSH_STACK
00003700  163C 002D               3932            MOVE.B    #'-',D3
00003704  6100 05FE               3933            BSR       PUSH_STACK
00003708  163C 0028               3934            MOVE.B    #'(',D3
0000370C  6100 05F6               3935            BSR       PUSH_STACK
00003710  163C 0041               3936            MOVE.B    #'A',D3
00003714  6100 05EE               3937            BSR       PUSH_STACK
00003718                          3938  
00003718                          3939            
00003718                          3940            *FIND REGISTER NUMBER END LOCATION*  
00003718  13F9 0000462E 00004634  3941            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00003722  0239 000F 00004634      3942            AND.B   #$0F,VAR_BYTE_END
0000372A                          3943            
0000372A                          3944            *GET INDEX OF THE END OF SRC REGISTER NUMBER
0000372A  23C5 00004638           3945            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003730  1439 00004634           3946            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003736                          3947            
00003736                          3948            *INTITIALIZE FOR BIT SHIFTING
00003736  41F9 00004638           3949            LEA     VAR_TEMP_CLEANCOPY,A0
0000373C  2639 00004638           3950            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003742                          3951            
00003742                          3952  LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
00003742  0C02 0000               3953            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003746  6700 0008               3954            BEQ     MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
0000374A  E24B                    3955            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
0000374C  5302                    3956            SUBI.B   #1,D2                     *DECREMENT COUNTER
0000374E  60F2                    3957            BRA     LOOP_SHIFTING4            *CONTINUE SHIFTING 
00003750                          3958                                               *change: NAME OF LABEL*
00003750                          3959  MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
00003750  0283 00000007           3960            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003756  0603 0030               3961            ADDI.B   #$30,D3                   *CONVERT TO CHAR
0000375A  6100 05A8               3962            BSR     PUSH_STACK                *PUSH TO STACK
0000375E                          3963            
0000375E  163C 0029               3964            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003762  6100 05A0               3965            BSR       PUSH_STACK
00003766                          3966            
00003766  6000 012C               3967            BRA     GET_SRC_SUCCESS                   *RETURN
0000376A                          3968            
0000376A                          3969                      
0000376A                          3970            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
0000376A  0CB9 00000007 0000463C  3971  CHECK7    CMPI.L  #7,VAR_LONG_ADDRESS_MODE_CHECK                      *IF (MODE != 111)
00003774  6600 011A               3972            BNE     GET_SRC_FAILED                                      *THAN BRANCH TO UNCESSFULL SRC MODE READ
00003778                          3973                   
00003778                          3974            *NEXT: (MODE == 111) 
00003778                          3975            *NOW: CHECK FOR SRC REGISTER 
00003778                          3976                  *(000 = (xxx).W)
00003778                          3977                  *(001 = (xxx).L)
00003778                          3978                  *(010 = #<data>)
00003778                          3979                  
00003778                          3980            *FIND REGISTER NUMBER END LOCATION*  
00003778  13F9 0000462E 00004634  3981            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00003782  0239 000F 00004634      3982            AND.B   #$0F,VAR_BYTE_END
0000378A                          3983            
0000378A                          3984            *GET INDEX OF THE END OF SRC REGISTER NUMBER
0000378A  23C5 00004638           3985            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003790  1439 00004634           3986            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003796                          3987            
00003796                          3988            *INTITIALIZE FOR BIT SHIFTING
00003796  41F9 00004638           3989            LEA     VAR_TEMP_CLEANCOPY,A0
0000379C  2C39 00004638           3990            MOVE.L  VAR_TEMP_CLEANCOPY,D6
000037A2                          3991  SRC_LOOP_SHIFTING
000037A2  0C02 0000               3992            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000037A6  6700 0008               3993            BEQ     SRC_MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
000037AA  E24E                    3994            LSR     #1,D6                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000037AC  5302                    3995            SUB.B   #1,D2                     *DECREMENT COUNTER
000037AE  60F2                    3996            BRA     SRC_LOOP_SHIFTING             *CONTINUE SHIFTING
000037B0                          3997  SRC_MASKING_NEXT
000037B0  CCBC 00000007           3998            AND.L   #7,D6                     *MASK, ONLY NEED 0-2 BIT INDEXES 
000037B6                          3999           *D3 - REGISTER NUMBER NEEDED TO CHECK WHICH W/L/#<DATA>*
000037B6                          4000           
000037B6                          4001  CHECK_WORD  
000037B6  41F9 0000462C           4002            LEA     TEMP_REGISTER_FORMAT,A0
000037BC  1439 0000462B           4003            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000037C2  1082                    4004            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000037C4  0239 0020 0000462C      4005            ANDI.B  #$20,TEMP_REGISTER_FORMAT                           * MASKS 0010 0000                                                     *change <SRC>*
000037CC  0C39 0020 0000462C      4006            CMPI.B  #$20,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0010 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
000037D4  6700 0026               4007            BEQ     CHECK_LONG                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
000037D8  0C06 0000               4008            CMPI.B  #0,D6                          
000037DC  6600 001E               4009            BNE     CHECK_LONG 
000037E0                          4010            
000037E0                          4011            *IT IS A WORD AT THIS POINT*
000037E0                          4012            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000037E0  163C 0020               4013            MOVE.B    #' ',D3
000037E4  6100 051E               4014            BSR       PUSH_STACK
000037E8  163C 0024               4015            MOVE.B    #'$',D3
000037EC  6100 0516               4016            BSR       PUSH_STACK
000037F0  321D                    4017            MOVE.W    (A5)+,D1
000037F2  7404                    4018            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
000037F4  6100 DA4A               4019            BSR       HEX2ASCII2STACK
000037F8  6000 009A               4020            BRA     GET_SRC_SUCCESS
000037FC                          4021  
000037FC                          4022  CHECK_LONG
000037FC  41F9 0000462C           4023            LEA     TEMP_REGISTER_FORMAT,A0
00003802  1439 0000462B           4024            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003808  1082                    4025            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000380A  0239 0040 0000462C      4026            ANDI.B  #$40,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00003812  0C39 0040 0000462C      4027            CMPI.B  #$40,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
0000381A  6700 002E               4028            BEQ     CHECK_IMMEDIATE                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
0000381E  0C06 0001               4029            CMPI.B  #1,D6                          
00003822  6600 0026               4030            BNE     CHECK_IMMEDIATE  
00003826                          4031  
00003826                          4032            *IT IS A WORD AT THIS POINT*
00003826                          4033            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003826  163C 0020               4034            MOVE.B    #' ',D3
0000382A  6100 04D8               4035            BSR       PUSH_STACK
0000382E  163C 0024               4036            MOVE.B    #'$',D3
00003832  6100 04D0               4037            BSR       PUSH_STACK
00003836  321D                    4038            MOVE.W    (A5)+,D1
00003838  7404                    4039            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
0000383A  6100 DA04               4040            BSR       HEX2ASCII2STACK
0000383E  321D                    4041            MOVE.W    (A5)+,D1
00003840  7404                    4042            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003842  6100 D9FC               4043            BSR       HEX2ASCII2STACK
00003846  6000 004C               4044            BRA     GET_SRC_SUCCESS
0000384A                          4045            
0000384A                          4046  CHECK_IMMEDIATE
0000384A  41F9 0000462C           4047            LEA     TEMP_REGISTER_FORMAT,A0
00003850  1439 0000462B           4048            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003856  1082                    4049            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003858  0239 0080 0000462C      4050            ANDI.B  #$80,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00003860  0C39 0080 0000462C      4051            CMPI.B  #$80,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003868  6700 0026               4052            BEQ     GET_SRC_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
0000386C  0C06 0004               4053            CMPI.B  #4,D6                          
00003870  6600 001E               4054            BNE     GET_SRC_FAILED 
00003874                          4055  
00003874                          4056            *IT IS A WORD AT THIS POINT*
00003874                          4057            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003874  163C 0020               4058            MOVE.B    #' ',D3
00003878  6100 048A               4059            BSR       PUSH_STACK
0000387C  163C 0023               4060            MOVE.B    #'#',D3
00003880  6100 0482               4061            BSR       PUSH_STACK
00003884  321D                    4062            MOVE.W    (A5)+,D1
00003886  7404                    4063            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003888  6100 D9B6               4064            BSR       HEX2ASCII2STACK
0000388C  6000 0006               4065            BRA     GET_SRC_SUCCESS
00003890                          4066            
00003890                          4067  GET_SRC_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
00003890  7801                    4068            MOVE.L #1,D4
00003892  4E75                    4069            RTS
00003894                          4070  GET_SRC_SUCCESS 
00003894  4E75                    4071            RTS
00003896                          4072                                 
00003896                          4073      
00003896                          4074  
00003896                          4075  
00003896                          4076  
00003896                          4077  
00003896                          4078  
00003896                          4079  
00003896                          4080  GET_EA_EA_DEST
00003896                          4081  *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
00003896                          4082      
00003896                          4083      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
00003896  2405                    4084      MOVE.L  D5,D2                           * CLEAN COPY TO D2
00003898  EC8A                    4085      LSR.L   #6,D2                           * [D2] Temporarily used D2 for shifting bits                *TODO: DYNAMIC MODE LOCATION
0000389A  23C2 0000463C           4086      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
000038A0  7407                    4087      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
000038A2  C5B9 0000463C           4088      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
000038A8                          4089                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
000038A8                          4090      
000038A8                          4091      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
000038A8                          4092      *DESTINATION REGISTER FORMAT STANDARD         *
000038A8                          4093      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
000038A8                          4094      *WHEN BIT = 0(VALID ADDRESS MODE)             *
000038A8                          4095      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
000038A8                          4096      *0 - Dn                                       *
000038A8                          4097      *1 - An                                       *
000038A8                          4098      *2 - (An)                                     *
000038A8                          4099      *3 - (An)+                                    *
000038A8                          4100      *4 - -(An)                                    *
000038A8                          4101      *5 - (XXX).W                                  *
000038A8                          4102      *6 - (XXX).L                                  *
000038A8                          4103      *7 - #<data>                                  *
000038A8                          4104      ***********************************************
000038A8                          4105      
000038A8                          4106      *** Check if source ...  <ea> = Dn
000038A8                          4107  DEST_CHECK0    
000038A8  41F9 0000462C           4108            LEA     TEMP_REGISTER_FORMAT,A0
000038AE  1439 0000462A           4109            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000038B4  1082                    4110            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000038B6  0239 0001 0000462C      4111            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
000038BE  0C39 0001 0000462C      4112            CMPI.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
000038C6  6700 006A               4113            BEQ     DEST_CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
000038CA  0CB9 00000000 0000463C  4114            CMPI.L     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn) - COMPARE MODES TO SEE IF IT IS THIS MODE
000038D4  6600 005C               4115            BNE     DEST_CHECK1
000038D8                          4116            
000038D8                          4117            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000038D8  163C 0020               4118            MOVE.B    #' ',D3
000038DC  6100 0426               4119            BSR       PUSH_STACK
000038E0  163C 0044               4120            MOVE.B    #'D',D3
000038E4  6100 041E               4121            BSR       PUSH_STACK
000038E8                          4122  
000038E8                          4123            *FIND REGISTER NUMBER END LOCATION*  
000038E8  13F9 0000462D 00004634  4124            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
000038F2  0239 000F 00004634      4125            AND.B   #$0F,VAR_BYTE_END
000038FA                          4126            
000038FA                          4127            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000038FA  23C5 00004638           4128            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003900  1439 00004634           4129            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003906                          4130            
00003906                          4131            *INTITIALIZE FOR BIT SHIFTING
00003906  41F9 00004638           4132            LEA     VAR_TEMP_CLEANCOPY,A0
0000390C  2639 00004638           4133            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003912                          4134  DEST_LOOP_SHIFTING
00003912  0C02 0000               4135            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003916  6700 0008               4136            BEQ     DEST_MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
0000391A  E24B                    4137            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
0000391C  5302                    4138            SUB.B   #1,D2                     *DECREMENT COUNTER
0000391E  60F2                    4139            BRA     DEST_LOOP_SHIFTING             *CONTINUE SHIFTING
00003920                          4140  DEST_MASKING_NEXT
00003920  C6BC 00000007           4141            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003926  0603 0030               4142            ADD.B   #$30,D3                   *CONVERT TO CHAR
0000392A  6100 03D8               4143            BSR     PUSH_STACK                *PUSH TO STACK
0000392E                          4144            
0000392E  6000 0394               4145            BRA     GET_DST_SUCCESS           *RETURN          
00003932                          4146            
00003932                          4147            
00003932                          4148            *** Check if source ...  <ea> = An
00003932                          4149  DEST_CHECK1    
00003932  41F9 0000462C           4150            LEA     TEMP_REGISTER_FORMAT,A0
00003938  1439 0000462A           4151            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000393E  1082                    4152            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003940  0239 0002 0000462C      4153            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
00003948  0C39 0002 0000462C      4154            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
00003950  6700 006A               4155            BEQ     DEST_CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00003954  0CB9 00000001 0000463C  4156            CMPI.L  #1,VAR_LONG_ADDRESS_MODE_CHECK                      * An - COMPARE MODES TO SEE IF IT IS THIS MODE
0000395E  6600 005C               4157            BNE     DEST_CHECK2
00003962                          4158            
00003962                          4159            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003962  163C 0020               4160            MOVE.B    #' ',D3
00003966  6100 039C               4161            BSR       PUSH_STACK
0000396A  163C 0041               4162            MOVE.B    #'A',D3
0000396E  6100 0394               4163            BSR       PUSH_STACK
00003972                          4164  
00003972                          4165            
00003972                          4166            *FIND REGISTER NUMBER END LOCATION*  
00003972  13F9 0000462D 00004634  4167            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
0000397C  0239 000F 00004634      4168            AND.B   #$0F,VAR_BYTE_END
00003984                          4169            
00003984                          4170            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003984  23C5 00004638           4171            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
0000398A  1439 00004634           4172            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
00003990                          4173            
00003990                          4174            *INTITIALIZE FOR BIT SHIFTING
00003990  41F9 00004638           4175            LEA     VAR_TEMP_CLEANCOPY,A0
00003996  2639 00004638           4176            MOVE.L  VAR_TEMP_CLEANCOPY,D3
0000399C                          4177  DEST_LOOP_SHIFTING1
0000399C  0C02 0000               4178            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000039A0  6700 0008               4179            BEQ     DEST_MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
000039A4  E24B                    4180            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000039A6  5302                    4181            SUB.B   #1,D2                     *DECREMENT COUNTER
000039A8  60F2                    4182            BRA     DEST_LOOP_SHIFTING1             *CONTINUE SHIFTING
000039AA                          4183  DEST_MASKING_NEXT1
000039AA  C6BC 00000007           4184            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000039B0  0603 0030               4185            ADD.B   #$30,D3                   *CONVERT TO CHAR
000039B4  6100 034E               4186            BSR     PUSH_STACK                *PUSH TO STACK
000039B8                          4187            
000039B8  6000 030A               4188            BRA     GET_DST_SUCCESS                   *RETURN 
000039BC                          4189            
000039BC                          4190            
000039BC                          4191            
000039BC                          4192            
000039BC                          4193            *** Check if source ...  <ea> = (An)       
000039BC                          4194  DEST_CHECK2    
000039BC  41F9 0000462C           4195            LEA     TEMP_REGISTER_FORMAT,A0
000039C2  1439 0000462A           4196            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000039C8  1082                    4197            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000039CA  0239 0004 0000462C      4198            ANDI.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
000039D2  0C39 0004 0000462C      4199            CMPI.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
000039DA  6700 007A               4200            BEQ     DEST_CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
000039DE  0CB9 00000002 0000463C  4201            CMPI.L   #2,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)  COMPARE MODES TO SEE IF IT IS THIS MODE                                                                *change: checkx++*
000039E8  6600 006C               4202            BNE     DEST_CHECK3
000039EC                          4203            
000039EC                          4204            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
000039EC  163C 0020               4205            MOVE.B    #' ',D3
000039F0  6100 0312               4206            BSR       PUSH_STACK
000039F4  163C 0028               4207            MOVE.B    #'(',D3
000039F8  6100 030A               4208            BSR       PUSH_STACK
000039FC  163C 0041               4209            MOVE.B    #'A',D3
00003A00  6100 0302               4210            BSR       PUSH_STACK
00003A04                          4211  
00003A04                          4212            
00003A04                          4213            *FIND REGISTER NUMBER END LOCATION*  
00003A04  13F9 0000462D 00004634  4214            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00003A0E  0239 000F 00004634      4215            AND.B   #$0F,VAR_BYTE_END
00003A16                          4216            
00003A16                          4217            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003A16  23C5 00004638           4218            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003A1C  1439 00004634           4219            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003A22                          4220            
00003A22                          4221            *INTITIALIZE FOR BIT SHIFTING
00003A22  41F9 00004638           4222            LEA     VAR_TEMP_CLEANCOPY,A0
00003A28  2639 00004638           4223            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003A2E                          4224  DEST_LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
00003A2E  0C02 0000               4225            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003A32  6700 0008               4226            BEQ     DEST_MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00003A36  E24B                    4227            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003A38  5302                    4228            SUB.B   #1,D2                     *DECREMENT COUNTER
00003A3A  60F2                    4229            BRA     DEST_LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
00003A3C                          4230  DEST_MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
00003A3C  0283 00000007           4231            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003A42  0603 0030               4232            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00003A46  6100 02BC               4233            BSR     PUSH_STACK                *PUSH TO STACK
00003A4A                          4234            
00003A4A  163C 0029               4235            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003A4E  6100 02B4               4236            BSR       PUSH_STACK
00003A52                          4237            
00003A52  6000 0270               4238            BRA     GET_DST_SUCCESS                   *RETURN 
00003A56                          4239  
00003A56                          4240            
00003A56                          4241            
00003A56                          4242                      
00003A56                          4243  *** Check if source ...  <ea> = (An)+       
00003A56  41F9 0000462C           4244  DEST_CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
00003A5C  1439 0000462A           4245            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003A62  1082                    4246            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003A64  0239 0008 0000462C      4247            ANDI.B  #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
00003A6C  0C39 0008 0000462C      4248            CMPI.B  #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
00003A74  6700 0082               4249            BEQ     DEST_CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00003A78  0CB9 00000003 0000463C  4250            CMPI.L  #3,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)+ - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00003A82  6600 0074               4251            BNE     DEST_CHECK4
00003A86                          4252            
00003A86                          4253            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00003A86  163C 0020               4254            MOVE.B    #' ',D3
00003A8A  6100 0278               4255            BSR       PUSH_STACK
00003A8E  163C 0028               4256            MOVE.B    #'(',D3
00003A92  6100 0270               4257            BSR       PUSH_STACK
00003A96  163C 0041               4258            MOVE.B    #'A',D3
00003A9A  6100 0268               4259            BSR       PUSH_STACK
00003A9E                          4260  
00003A9E                          4261            
00003A9E                          4262            *FIND REGISTER NUMBER END LOCATION*  
00003A9E  13F9 0000462D 00004634  4263            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00003AA8  0239 000F 00004634      4264            ANDI.B   #$0F,VAR_BYTE_END
00003AB0                          4265            
00003AB0                          4266            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003AB0  23C5 00004638           4267            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003AB6  1439 00004634           4268            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003ABC                          4269            
00003ABC                          4270            *INTITIALIZE FOR BIT SHIFTING
00003ABC  41F9 00004638           4271            LEA     VAR_TEMP_CLEANCOPY,A0
00003AC2  2639 00004638           4272            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003AC8                          4273            
00003AC8                          4274  DEST_LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
00003AC8  0C02 0000               4275            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003ACC  6700 0008               4276            BEQ     DEST_MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00003AD0  E24B                    4277            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003AD2  5302                    4278            SUBI.B   #1,D2                     *DECREMENT COUNTER
00003AD4  60F2                    4279            BRA     DEST_LOOP_SHIFTING3            *CONTINUE SHIFTING 
00003AD6                          4280                                               *change: NAME OF LABEL*
00003AD6                          4281  DEST_MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
00003AD6  0283 00000007           4282            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003ADC  0603 0030               4283            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00003AE0  6100 0222               4284            BSR     PUSH_STACK                *PUSH TO STACK
00003AE4                          4285            
00003AE4  163C 0029               4286            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003AE8  6100 021A               4287            BSR       PUSH_STACK
00003AEC  163C 002B               4288            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003AF0  6100 0212               4289            BSR       PUSH_STACK
00003AF4                          4290            
00003AF4  6000 01CE               4291            BRA       GET_DST_SUCCESS                   *RETURN 
00003AF8                          4292  
00003AF8                          4293            
00003AF8                          4294            
00003AF8                          4295                      
00003AF8                          4296            *** Check if source ...  <ea> = -(An)       
00003AF8                          4297  DEST_CHECK4    
00003AF8  41F9 0000462C           4298            LEA     TEMP_REGISTER_FORMAT,A0
00003AFE  1439 0000462A           4299            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003B04  1082                    4300            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003B06  0239 0010 0000462C      4301            ANDI.B  #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
00003B0E  0C39 0010 0000462C      4302            CMPI.B  #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003B16  6700 0082               4303            BEQ     DEST_CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00003B1A  0CB9 00000004 0000463C  4304            CMPI.L  #4,VAR_LONG_ADDRESS_MODE_CHECK                      * -(An) - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00003B24  6600 0074               4305            BNE     DEST_CHECK7
00003B28                          4306            
00003B28                          4307            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00003B28  163C 0020               4308            MOVE.B    #' ',D3
00003B2C  6100 01D6               4309            BSR       PUSH_STACK
00003B30  163C 002D               4310            MOVE.B    #'-',D3
00003B34  6100 01CE               4311            BSR       PUSH_STACK
00003B38  163C 0028               4312            MOVE.B    #'(',D3
00003B3C  6100 01C6               4313            BSR       PUSH_STACK
00003B40  163C 0041               4314            MOVE.B    #'A',D3
00003B44  6100 01BE               4315            BSR       PUSH_STACK
00003B48                          4316  
00003B48                          4317            
00003B48                          4318            *FIND REGISTER NUMBER END LOCATION*  
00003B48  13F9 0000462D 00004634  4319            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00003B52  0239 000F 00004634      4320            AND.B   #$0F,VAR_BYTE_END
00003B5A                          4321            
00003B5A                          4322            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003B5A  23C5 00004638           4323            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003B60  1439 00004634           4324            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003B66                          4325            
00003B66                          4326            *INTITIALIZE FOR BIT SHIFTING
00003B66  41F9 00004638           4327            LEA     VAR_TEMP_CLEANCOPY,A0
00003B6C  2639 00004638           4328            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003B72                          4329            
00003B72                          4330  DEST_LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
00003B72  0C02 0000               4331            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003B76  6700 0008               4332            BEQ     DEST_MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00003B7A  E24B                    4333            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003B7C  5302                    4334            SUBI.B   #1,D2                     *DECREMENT COUNTER
00003B7E  60F2                    4335            BRA     DEST_LOOP_SHIFTING4            *CONTINUE SHIFTING 
00003B80                          4336                                               *change: NAME OF LABEL*
00003B80                          4337  DEST_MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
00003B80  0283 00000007           4338            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003B86  0603 0030               4339            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00003B8A  6100 0178               4340            BSR     PUSH_STACK                *PUSH TO STACK
00003B8E                          4341            
00003B8E  163C 0029               4342            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003B92  6100 0170               4343            BSR       PUSH_STACK
00003B96                          4344            
00003B96  6000 012C               4345            BRA     GET_DST_SUCCESS                   *RETURN
00003B9A                          4346            
00003B9A                          4347                      
00003B9A                          4348            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
00003B9A                          4349  DEST_CHECK7    
00003B9A  0CB9 00000007 0000463C  4350            CMPI.L  #7,VAR_LONG_ADDRESS_MODE_CHECK                      *IF (MODE != 111)
00003BA4  6600 011A               4351            BNE     GET_DST_FAILED                                      *THAN BRANCH TO UNCESSFULL SRC MODE READ
00003BA8                          4352                   
00003BA8                          4353            *NEXT: (MODE == 111) 
00003BA8                          4354            *NOW: CHECK FOR SRC REGISTER 
00003BA8                          4355                  *(000 = (xxx).W)
00003BA8                          4356                  *(001 = (xxx).L)
00003BA8                          4357                  *(010 = #<data>)
00003BA8                          4358                  
00003BA8                          4359            *FIND REGISTER NUMBER END LOCATION*  
00003BA8  13F9 0000462D 00004634  4360            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00003BB2  0239 000F 00004634      4361            AND.B   #$0F,VAR_BYTE_END
00003BBA                          4362            
00003BBA                          4363            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003BBA  23C5 00004638           4364            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003BC0  1439 00004634           4365            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003BC6                          4366            
00003BC6                          4367            *INTITIALIZE FOR BIT SHIFTING
00003BC6  41F9 00004638           4368            LEA     VAR_TEMP_CLEANCOPY,A0
00003BCC  2C39 00004638           4369            MOVE.L  VAR_TEMP_CLEANCOPY,D6
00003BD2                          4370  DEST_LOOP_SHIFTING7
00003BD2  0C02 0000               4371            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003BD6  6700 0008               4372            BEQ     DEST_MASKING_NEXT7              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00003BDA  E24E                    4373            LSR     #1,D6                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003BDC  5302                    4374            SUB.B   #1,D2                     *DECREMENT COUNTER
00003BDE  60F2                    4375            BRA     DEST_LOOP_SHIFTING7             *CONTINUE SHIFTING
00003BE0                          4376  DEST_MASKING_NEXT7
00003BE0  CCBC 00000007           4377            AND.L   #7,D6                     *MASK, ONLY NEED 0-2 BIT INDEXES 
00003BE6                          4378           *D3 - REGISTER NUMBER NEEDED TO CHECK WHICH W/L/#<DATA>*
00003BE6                          4379            
00003BE6                          4380  DEST_CHECK_WORD  
00003BE6  41F9 0000462C           4381            LEA     TEMP_REGISTER_FORMAT,A0
00003BEC  1439 0000462A           4382            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003BF2  1082                    4383            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003BF4  0239 0020 0000462C      4384            ANDI.B  #$20,TEMP_REGISTER_FORMAT                           * MASKS 0010 0000                                                     *change <SRC>*
00003BFC  0C39 0020 0000462C      4385            CMPI.B  #$20,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0010 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003C04  6700 0026               4386            BEQ     DEST_CHECK_LONG                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00003C08  0C06 0000               4387            CMPI.B  #0,D6                                                   *COMPARE REGISTER NUMBER WITH (000 == 000) FOR WORD
00003C0C  6600 001E               4388            BNE     DEST_CHECK_LONG                                      * THE REGISTER NUMBER DOESN'T MATCH "(XXX).W" -> SO MOVE ON       
00003C10                          4389            *IT IS A WORD AT THIS POINT*
00003C10                          4390            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003C10  163C 0020               4391            MOVE.B    #' ',D3
00003C14  6100 00EE               4392            BSR       PUSH_STACK
00003C18  163C 0024               4393            MOVE.B    #'$',D3
00003C1C  6100 00E6               4394            BSR       PUSH_STACK
00003C20  321D                    4395            MOVE.W    (A5)+,D1
00003C22  7404                    4396            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003C24  6100 D61A               4397            BSR       HEX2ASCII2STACK
00003C28  6000 009A               4398            BRA       GET_DST_SUCCESS
00003C2C                          4399  
00003C2C                          4400  DEST_CHECK_LONG
00003C2C  41F9 0000462C           4401            LEA     TEMP_REGISTER_FORMAT,A0
00003C32  1439 0000462A           4402            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003C38  1082                    4403            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003C3A  0239 0040 0000462C      4404            ANDI.B  #$40,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00003C42  0C39 0040 0000462C      4405            CMPI.B  #$40,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003C4A  6700 002E               4406            BEQ     DEST_CHECK_IMMEDIATE                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00003C4E  0C06 0001               4407            CMPI.B  #1,D6                                                   *COMPARE REGISTER NUMBER WITH (001 == 001) FOR WORD
00003C52  6600 0026               4408            BNE     DEST_CHECK_IMMEDIATE                                      * THE REGISTER NUMBER DOESN'T MATCH "(XXX).L" -> SO MOVE ON 
00003C56                          4409            *IT IS A WORD AT THIS POINT*
00003C56                          4410            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003C56  163C 0020               4411            MOVE.B    #' ',D3
00003C5A  6100 00A8               4412            BSR       PUSH_STACK
00003C5E  163C 0024               4413            MOVE.B    #'$',D3
00003C62  6100 00A0               4414            BSR       PUSH_STACK
00003C66  321D                    4415            MOVE.W    (A5)+,D1        * GET NEXT WORD INTO STACK
00003C68  7404                    4416            MOVE.L    #4,D2           * SETS SIZE = 4 FOR CONVERSION TO ASCII
00003C6A  6100 D5D4               4417            BSR       HEX2ASCII2STACK
00003C6E  321D                    4418            MOVE.W    (A5)+,D1        * GET NEXT WORD INTO STACK
00003C70  7404                    4419            MOVE.L    #4,D2          
00003C72  6100 D5CC               4420            BSR       HEX2ASCII2STACK
00003C76  6000 004C               4421            BRA     GET_DST_SUCCESS
00003C7A                          4422            
00003C7A                          4423  DEST_CHECK_IMMEDIATE
00003C7A  41F9 0000462C           4424            LEA     TEMP_REGISTER_FORMAT,A0
00003C80  1439 0000462A           4425            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003C86  1082                    4426            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003C88  0239 0080 0000462C      4427            ANDI.B  #$80,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00003C90  0C39 0080 0000462C      4428            CMPI.B  #$80,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003C98  6700 0026               4429            BEQ     GET_DST_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00003C9C  0C06 0004               4430            CMPI.B  #4,D6                                               * COMPARE REGISTER NUMBER WITH (010 == 010) FOR WORD
00003CA0  6600 001E               4431            BNE     GET_DST_FAILED                                      * THE REGISTER NUMBER DOESN'T MATCH "#<DATA>" -> SO MOVE ON 
00003CA4                          4432            
00003CA4                          4433            *IT IS A WORD AT THIS POINT*
00003CA4                          4434            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003CA4  163C 0020               4435            MOVE.B    #' ',D3
00003CA8  6100 005A               4436            BSR       PUSH_STACK
00003CAC  163C 0023               4437            MOVE.B    #'#',D3
00003CB0  6100 0052               4438            BSR       PUSH_STACK
00003CB4  321D                    4439            MOVE.W    (A5)+,D1
00003CB6  7404                    4440            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003CB8  6100 D586               4441            BSR       HEX2ASCII2STACK
00003CBC  6000 0006               4442            BRA       GET_DST_SUCCESS
00003CC0                          4443            
00003CC0                          4444  GET_DST_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
00003CC0  7801                    4445            MOVE.L #1,D4
00003CC2  4E75                    4446            RTS
00003CC4                          4447  GET_DST_SUCCESS 
00003CC4  4E75                    4448            RTS
00003CC6                          4449  
00003CC6                          4450  
00003CC6                          4451  *---------------------------------------------------------------------------*
00003CC6                          4452  * STACK/QUEUE INTERFACE
00003CC6                          4453  *---------------------------------------------------------------------------*
00003CC6                          4454  PRINT_STACK
00003CC6  0C39 0000 00004626      4455            CMP.B     #0,COUNTER
00003CCE  6700 000E               4456            BEQ       PRINT_STACK_RETURN             *CHECK IF LOOP IS FINISHED
00003CD2                          4457            
00003CD2                          4458  PRINT_STACK_HELPER
00003CD2  6100 0038               4459            BSR      POP_STACK          *PRINTS ADDRESS
00003CD6  103C 0006               4460            MOVE.B   #6,D0              *Display single character in D1.B. 
00003CDA  4E4F                    4461            TRAP     #15             *ACTIVATES PRINT
00003CDC                          4462  
00003CDC  60E8                    4463            BRA       PRINT_STACK
00003CDE                          4464  PRINT_STACK_RETURN
00003CDE  4E75                    4465            RTS
00003CE0                          4466            
00003CE0                          4467            
00003CE0                          4468  PRINT_QUEUE
00003CE0  0C39 0000 00004626      4469            CMP.B     #0,COUNTER
00003CE8  6700 0018               4470            BEQ       PRINT_QUEUE_RETURN             *CHECK IF LOOP IS FINISHED
00003CEC                          4471            
00003CEC                          4472  PRINT_QUEUE_HELPER
00003CEC  33F9 00004626 00004628  4473            MOVE.W   COUNTER,QUEUE_COUNTER
00003CF6  6100 0022               4474            BSR      POP_FRONT          *PRINTS ADDRESS
00003CFA  103C 0006               4475            MOVE.B   #6,D0              *Display single character in D1.B. 
00003CFE  4E4F                    4476            TRAP     #15             *ACTIVATES PRINT
00003D00                          4477  
00003D00  60DE                    4478            BRA       PRINT_QUEUE
00003D02                          4479  PRINT_QUEUE_RETURN
00003D02  4E75                    4480            RTS
00003D04                          4481            
00003D04                          4482  *PUSHES.W CONTENTS OF [D3] INTO STACK          
00003D04                          4483  PUSH_STACK
00003D04  1503                    4484              MOVE.B  D3,-(A2)
00003D06  6100 0058               4485              BSR     INCREMENT
00003D0A  4E75                    4486              RTS
00003D0C                          4487  *POPS.W TOP OF STACK INTO [D1], SO ITS READY TO PRINT WITH TRAP 15
00003D0C                          4488  *         MOVE.W   (A2)+,D1           *PRINTS ADDRESS
00003D0C                          4489  *         MOVE.B   #15,D0             *PRINTS ACCORDING TO D2 BASE VALUE
00003D0C                          4490  *         MOVE.B   #16,D2             *PRINTS BASED 16 NUMBER
00003D0C                          4491  *         TRAP        #15             *ACTIVATES PRINT
00003D0C                          4492  POP_STACK
00003D0C  BECA                    4493              CMPA.W   A2,SP            *CHECKS IF THERE IS ANYTHING TO PUSH
00003D0E  6700 0008               4494              BEQ     POP_RETURN        *IF NOTHING TO PUSH THAN JUST RETURN
00003D12  121A                    4495              MOVE.B  (A2)+,D1 
00003D14  6100 0052               4496              BSR     DECREMENT
00003D18                          4497  POP_RETURN
00003D18  4E75                    4498              RTS 
00003D1A                          4499        
00003D1A                          4500  *USE [A4] AS SECOND POINTER IN SHIFTING      
00003D1A  0C39 0000 00004628      4501  POP_FRONT   CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
00003D22  6700 0030               4502              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
00003D26                          4503              
00003D26                          4504              
00003D26                          4505              *POSITION THE POINTERS A[4] RIGHT BEHIND A[2] WHICH IS RIGHT BEHIND STACK
00003D26  347C 7000               4506              MOVEA.W #STACK,A2   *START A2 AT STACK
00003D2A  0622 0000               4507              ADD.B   #0,-(A2)    *SHIFT A2 TO THE BOTTOM OF THE STACK
00003D2E  384A                    4508              MOVEA.W A2,A4     *START A4 RIGHT ABOVE A2
00003D30  0624 0000               4509              ADD.B   #0,-(A4)  *leash one more higher in stack (a4)
00003D34  1212                    4510              MOVE.B  (A2),D1     *POP CONTENTS INTO D1
00003D36                          4511  POP_SHIFT_LOOP
00003D36  0C39 0000 00004628      4512              CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
00003D3E  6700 0014               4513              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
00003D42  1494                    4514              MOVE.B  (A4),(A2)   *SHIFT CONTENT DOWN THE STACK
00003D44  0624 0000               4515              ADD.B   #0,-(A4)
00003D48  0622 0000               4516              ADD.B   #0,-(A2) *SHIFT POINTERS DOWN THE STACK
00003D4C  5339 00004628           4517              SUB.B   #1,QUEUE_COUNTER *DECREMENT INTERNAL QUEUE COUNTER
00003D52                          4518              
00003D52  60E2                    4519              BRA     POP_SHIFT_LOOP
00003D54                          4520                          
00003D54                          4521  POP_FRONT_RETURN 
00003D54                          4522              *RESET A2 BACK TO SP
00003D54  347C 7000               4523              MOVEA.W #STACK,A2    
00003D58  5339 00004626           4524              SUB.B   #1,COUNTER *DECREMENT STACK COUNTER       
00003D5E  4E75                    4525              RTS   
00003D60                          4526  
00003D60                          4527  INCREMENT
00003D60  5239 00004626           4528              ADD.B   #1, COUNTER
00003D66  4E75                    4529              RTS           
00003D68                          4530  DECREMENT
00003D68  5339 00004626           4531              SUB.B   #1, COUNTER
00003D6E  4E75                    4532              RTS           
00003D70                          4533  CLEAR_STACK
00003D70  0C39 0000 00004626      4534              CMP.B     #0,COUNTER
00003D78  6700 0006               4535              BEQ       CLEAR_RETURN
00003D7C  618E                    4536              BSR       POP_STACK
00003D7E  60F0                    4537              BRA       CLEAR_STACK
00003D80                          4538   
00003D80                          4539  CLEAR_RETURN
00003D80  4E75                    4540              RTS    
00003D82                          4541  *---------------------------------------------------------------------------*
00003D82                          4542  * TERMINATE
00003D82                          4543  *---------------------------------------------------------------------------*
00003D82                          4544  TERMINATE   
00003D82  43F9 00004132           4545              LEA     FINMSG,A1
00003D88  103C 000E               4546              MOVE.B  #14,D0
00003D8C  4E4F                    4547              TRAP    #15
00003D8E                          4548  
00003D8E  103C 0009               4549              MOVE.B  #9,D0
00003D92  4E4F                    4550              TRAP    #15
00003D94                          4551  
00003D94                          4552  *---------------------------------------------------------------------------*
00003D94                          4553  * Data storage                                                 
00003D94                          4554  *---------------------------------------------------------------------------*  
00003D94                          4555  WELCOME
00003D94= 20 20 20 20 20 20 ...   4556              DC.B '                         ___     ___ ___        ___   ___ ___                 ',CR,LF
00003DE4= 3D 3D 3D 3D 3D 20 ...   4557              DC.B '=====           \  /\  /|___|   |   |   ||\  /||___    | |   |           =====',CR,LF
00003E34= 3D 3D 3D 3D 3D 20 ...   4558              DC.B '=====            \/  \/ |___|___|___|___|| \/ ||___    | |___|           =====',CR,LF
00003E84                          4559      
00003E84= 20 20 20 20 20 20 ...   4560              DC.B '                        ___ ___ ___  ___      ___                             ',CR,LF
00003ED4= 20 20 20 20 20 20 ...   4561              DC.B '                       |     | |___)|    |   |___                             ',CR,LF 
00003F24= 20 20 20 20 20 20 ...   4562              DC.B '                       |___ _|_|\___|___ |___|___                             ',CR,LF
00003F74                          4563      
00003F74= 20 20 20 20 20 20 ...   4564              DC.B '           __  ___ ___   _   ___  ___  ___        ___      ___ ___            ',CR,LF
00003FC4= 3D 3D 3D 3D 3D 20 ...   4565              DC.B '=====     |  \  | |___  /_\ |___ |___ |___ |\  /||___||   |___|___)      =====',CR,LF 
00004014= 3D 3D 3D 3D 3D 20 ...   4566              DC.B '=====     |__/ _|_ ___|/   \ ___| ___||___ | \/ ||___||___|___|\___      =====',CR,LF,CR,LF,CR,LF,0
00004069                          4567  
00004069                          4568  PROMPT_START
00004069= 50 6C 65 61 73 65 ...   4569              DC.B    'Please enter a hexadecimal starting address.',CR,LF,0
00004098                          4570      
00004098                          4571  PROMPT_END
00004098= 50 6C 65 61 73 65 ...   4572              DC.B    'Please enter a hexadecimal ending address.',CR,LF,0
000040C5= 0D 0A 48 69 74 20 ...   4573  DISP_NEXT   DC.B    CR,LF,'Hit Enter to print the next 30 lines.',CR,LF,0            
000040EF= 57 6F 75 6C 64 20 ...   4574  REPEATMSG   DC.B    'Would you like to run again? Press Y to continue or N to finish.',CR,LF,0
00004132= 54 68 61 6E 6B 20 ...   4575  FINMSG      DC.B    'Thank you for using Circle Disassembler.',CR,LF,0
0000415D= 45 72 72 6F 72 3A ...   4576  ERRMSG_1    DC.B    'Error: Invalid Input Address',CR,LF,0
0000417C= 45 72 72 6F 72 3A ...   4577  ERRMSG_3    DC.B    'Error: Invalid Input Address (Odd)',CR,LF,0
000041A1= 45 72 72 6F 72 3A ...   4578  ERRMSG_5    DC.B    'Error: Invalid Input Address (start > end)',CR,LF,0
000041CE                          4579  
000041CE                          4580  VR_S_ADDR   DS.B    80                      * allocate storage space for the starting address
0000421E                          4581  VR_E_ADDR   DS.B    80                      * allocate storage space for the ending address
0000426E                          4582  S_ADDR_HX   DS.L    1                       * allocate storage space for the starting address in hex
00004272                          4583  E_ADDR_HX   DS.L    1                       * allocate storage space for the ending address in hex
00004276= 0D 0A 00                4584  ENDLINE_M   DC.B    CR,LF,0
00004279                          4585  TMPINPUT    DS.B    80                      * temp store user input
000042C9                          4586  TMPOUTPUT   DS.B    80                      * temp store prog output
00004319= 20 20 20 4F 52 49 ...   4587  DISP_ORI_B  DC.B    '   ORI.B',0
00004322= 20 20 20 4F 52 49 ...   4588  DISP_ORI_W  DC.B    '   ORI.W',0
0000432B= 20 20 20 4F 52 49 ...   4589  DISP_ORI_L  DC.B    '   ORI.L',0
00004334= 20 20 20 45 4F 52 ...   4590  DISP_EORI_B  DC.B    '   EORI.B',0
0000433E= 20 20 20 45 4F 52 ...   4591  DISP_EORI_W  DC.B    '   EORI.W',0
00004348= 20 20 20 45 4F 52 ...   4592  DISP_EORI_L  DC.B    '   EORI.L',0
00004352= 20 20 20 42 54 53 ...   4593  DISP_BTST   DC.B    '   BTST',0
0000435A= 20 20 20 43 4D 50 ...   4594  DISP_CMPI_B  DC.B    '   CMPI.B',0
00004364= 20 20 20 43 4D 50 ...   4595  DISP_CMPI_W  DC.B    '   CMPI.W',0
0000436E= 20 20 20 43 4D 50 ...   4596  DISP_CMPI_L  DC.B    '   CMPI.L',0
00004378= 20 20 20 44 41 54 ...   4597  DISP_DATA   DC.B    '   DATA',0
00004380= 20 20 20 4D 4F 56 ...   4598  DISP_MOVE_B DC.B    '   MOVE.B',0
0000438A= 20 20 20 4D 4F 56 ...   4599  DISP_MOVE_W DC.B    '   MOVE.W',0
00004394= 20 20 20 4D 4F 56 ...   4600  DISP_MOVE_L DC.B    '   MOVE.L',0
0000439E= 20 20 20 52 54 53 00    4601  DISP_RTS    DC.B    '   RTS',0
000043A5= 20 20 20 4A 53 52 00    4602  DISP_JSR    DC.B    '   JSR',0
000043AC= 20 20 20 4E 45 47 ...   4603  DISP_NEG_B    DC.B    '   NEG.B',0
000043B5= 20 20 20 4E 45 47 ...   4604  DISP_NEG_W    DC.B    '   NEG.W',0
000043BE= 20 20 20 4E 45 47 ...   4605  DISP_NEG_L    DC.B    '   NEG.L',0
000043C7= 20 20 20 4E 4F 54 ...   4606  DISP_NOT_B  DC.B    '   NOT.B',0
000043D0= 20 20 20 4E 4F 54 ...   4607  DISP_NOT_W  DC.B    '   NOT.W',0
000043D9= 20 20 20 4E 4F 54 ...   4608  DISP_NOT_L  DC.B    '   NOT.L',0
000043E2= 20 20 20 4C 45 41 00    4609  DISP_LEA    DC.B    '   LEA',0
000043E9= 20 20 20 4D 4F 56 ...   4610  DISP_MOVEM_W    DC.B    '   MOVEM.W',0
000043F4= 20 20 20 4D 4F 56 ...   4611  DISP_MOVEM_L    DC.B    '   MOVEM.L',0
000043FF= 20 20 20 41 44 44 ...   4612  DISP_ADDQ_B DC.B    '   ADDQ.B',0
00004409= 20 20 20 41 44 44 ...   4613  DISP_ADDQ_W DC.B    '   ADDQ.W',0
00004413= 20 20 20 41 44 44 ...   4614  DISP_ADDQ_L DC.B    '   ADDQ.L',0
0000441D= 20 20 20 44 49 56 ...   4615  DISP_DIVS   DC.B    '   DIVS',0
00004425= 20 20 20 53 55 42 ...   4616  DISP_SUB_B  DC.B    '   SUB.B',0
0000442E= 20 20 20 53 55 42 ...   4617  DISP_SUB_W  DC.B    '   SUB.W',0
00004437= 20 20 20 53 55 42 ...   4618  DISP_SUB_L  DC.B    '   SUB.L',0
00004440= 20 20 20 53 55 42 ...   4619  DISP_SUBI_B  DC.B    '   SUBI.B',0
0000444A= 20 20 20 53 55 42 ...   4620  DISP_SUBI_W  DC.B    '   SUBI.W',0
00004454= 20 20 20 53 55 42 ...   4621  DISP_SUBI_L  DC.B    '   SUBI.L',0
0000445E= 20 20 20 53 55 42 ...   4622  DISP_SUBA_W  DC.B    '   SUBA.W',0
00004468= 20 20 20 53 55 42 ...   4623  DISP_SUBA_L  DC.B    '   SUBA.L',0
00004472= 20 20 20 45 4F 52 ...   4624  DISP_EOR_B  DC.B    '   EOR.B',0
0000447B= 20 20 20 45 4F 52 ...   4625  DISP_EOR_W  DC.B    '   EOR.W',0
00004484= 20 20 20 45 4F 52 ...   4626  DISP_EOR_L  DC.B    '   EOR.L',0
0000448D= 20 20 20 43 4D 50 ...   4627  DISP_CMP_B  DC.B    '   CMP.B',0
00004496= 20 20 20 43 4D 50 ...   4628  DISP_CMP_W  DC.B    '   CMP.W',0
0000449F= 20 20 20 43 4D 50 ...   4629  DISP_CMP_L  DC.B    '   CMP.L',0
000044A8= 20 20 20 43 4D 50 ...   4630  DISP_CMPA_W  DC.B    '   CMPA.W',0
000044B2= 20 20 20 43 4D 50 ...   4631  DISP_CMPA_L  DC.B    '   CMPA.L',0
000044BC= 20 20 20 4D 55 4C ...   4632  DISP_MULS_W DC.B    '   MULS.W',0
000044C6= 20 20 20 41 4E 44 ...   4633  DISP_AND_B  DC.B    '   AND.B',0
000044CF= 20 20 20 41 4E 44 ...   4634  DISP_AND_W  DC.B    '   AND.W',0
000044D8= 20 20 20 41 4E 44 ...   4635  DISP_AND_L  DC.B    '   AND.L',0
000044E1= 20 20 20 41 44 44 ...   4636  DISP_ADD_B  DC.B    '   ADD.B',0
000044EA= 20 20 20 41 44 44 ...   4637  DISP_ADD_W  DC.B    '   ADD.W',0
000044F3= 20 20 20 41 44 44 ...   4638  DISP_ADD_L  DC.B    '   ADD.L',0
000044FC= 20 20 20 41 44 44 ...   4639  DISP_ADDA_W DC.B    '   ADDA.W',0
00004506= 20 20 20 41 44 44 ...   4640  DISP_ADDA_L DC.B    '   ADDA.L',0
00004510= 20 20 20 4C 53 52 ...   4641  DISP_LSR_B  DC.B    '   LSR.B',0
00004519= 20 20 20 4C 53 4C ...   4642  DISP_LSL_B  DC.B    '   LSL.B',0
00004522= 20 20 20 4C 53 52 ...   4643  DISP_LSR_W  DC.B    '   LSR.W',0
0000452B= 20 20 20 4C 53 4C ...   4644  DISP_LSL_W  DC.B    '   LSL.W',0
00004534= 20 20 20 4C 53 52 ...   4645  DISP_LSR_L  DC.B    '   LSR.L',0
0000453D= 20 20 20 4C 53 4C ...   4646  DISP_LSL_L  DC.B    '   LSL.L',0
00004546= 20 20 20 41 53 52 ...   4647  DISP_ASR_B  DC.B    '   ASR.B',0
0000454F= 20 20 20 41 53 4C ...   4648  DISP_ASL_B  DC.B    '   ASL.B',0
00004558= 20 20 20 41 53 52 ...   4649  DISP_ASR_W  DC.B    '   ASR.W',0
00004561= 20 20 20 41 53 4C ...   4650  DISP_ASL_W  DC.B    '   ASL.W',0
0000456A= 20 20 20 41 53 52 ...   4651  DISP_ASR_L  DC.B    '   ASR.L',0
00004573= 20 20 20 41 53 4C ...   4652  DISP_ASL_L  DC.B    '   ASL.L',0
0000457C= 20 20 20 52 4F 52 ...   4653  DISP_ROR_B  DC.B    '   ROR.B',0
00004585= 20 20 20 52 4F 4C ...   4654  DISP_ROL_B  DC.B    '   ROL.B',0
0000458E= 20 20 20 52 4F 52 ...   4655  DISP_ROR_W  DC.B    '   ROR.W',0
00004597= 20 20 20 52 4F 4C ...   4656  DISP_ROL_W  DC.B    '   ROL.W',0
000045A0= 20 20 20 52 4F 52 ...   4657  DISP_ROR_L  DC.B    '   ROR.L',0
000045A9= 20 20 20 52 4F 4C ...   4658  DISP_ROL_L  DC.B    '   ROL.L',0
000045B2= 20 20 20 42 52 41 00    4659  DISP_BRA    DC.B    '   BRA',0
000045B9= 20 20 20 42 4C 54 00    4660  DISP_BLT    DC.B    '   BLT',0
000045C0= 20 20 20 42 45 51 00    4661  DISP_BEQ    DC.B    '   BEQ',0
000045C7= 20 20 20 42 4E 45 00    4662  DISP_BNE    DC.B    '   BNE',0
000045CE= 20 20 20 42 48 49 00    4663  DISP_BHI    DC.B    '   BHI',0
000045D5= 20 20 20 4D 4F 56 ...   4664  DISP_MOVEA_W    DC.B    '   MOVEA.W',0
000045E0= 20 20 20 4D 4F 56 ...   4665  DISP_MOVEA_L    DC.B    '   MOVEA.L',0
000045EB                          4666  
000045EB= 20 20 20 24 00          4667  DISP_HEX     DC.B    '   $',0
000045F0= 20 20 20 44 00          4668  DISP_D  DC.B    '   D',0
000045F5= 20 20 20 41 00          4669  DISP_A  DC.B    '   A',0
000045FA= 20 20 20 28 00          4670  DISP_OP  DC.B    '   (',0
000045FF= 29 00                   4671  DISP_CP  DC.B   ')',0
00004601= 20 20 20 28 41 00       4672  DISP_AOP  DC.B    '   (A',0
00004607                          4673  
00004607= 20 20 20 2D 28 41 00    4674  DISP_PRE    DC.B    '   -(A',0
0000460E= 29 2B 00                4675  DISP_POST   DC.B    ')+',0
00004611= 20 20 20 23 00          4676  DISP_LB DC.B    '   #',0
00004616= 30 00                   4677  DISP_0  DC.B    '0',0
00004618= 31 00                   4678  DISP_1  DC.B    '1',0
0000461A= 32 00                   4679  DISP_2  DC.B    '2',0
0000461C= 33 00                   4680  DISP_3  DC.B    '3',0
0000461E= 34 00                   4681  DISP_4  DC.B    '4',0
00004620= 35 00                   4682  DISP_5  DC.B    '5',0
00004622= 36 00                   4683  DISP_6  DC.B    '6',0
00004624= 37 00                   4684  DISP_7  DC.B    '7',0
00004626                          4685  
00004626                          4686  *STACK INTERFACE VARIABLES*
00004626                          4687  COUNTER         DS.W    1
00004628                          4688  QUEUE_COUNTER   DS.W    1
0000462A                          4689  
0000462A                          4690  *EA DECODING INTERFACE VARIABLES* 
0000462A                          4691  DEST_REGISTER_FORMAT    DS.B    1           *all address modes acceptable standard
0000462B                          4692  SRC_REGISTER_FORMAT  DS.B    1           *all address modes acceptable standard
0000462C                          4693  TEMP_REGISTER_FORMAT    DS.B    1           *place holder for masking other register formats
0000462D                          4694  
0000462D                          4695  *FORMAT OF WHERE TO GET THE EA BY THE ENDING BIT AND STARTING BIT
0000462D                          4696  * WORD + WORD = LONG
0000462D                          4697  * (STARTING BIT) + (ENDING BIT) = 2 HEX CHAR
0000462D                          4698  * A              + F            = AF         <= EXAMPLE
0000462D                          4699  *(10TH BIT)      + (15TH BIT)   = CHECK BITS 15 THROUGH 10
0000462D                          4700  GET_DST_START_END    DS.B    1
0000462E                          4701  GET_SRC_START_END    DS.B    1
0000462F                          4702  
0000462F                          4703  *STORES THE START + END BITS HERE (FROM ABOVE)
00004630                          4704  VAR_BYTE_START      DS.L    1
00004634                          4705  VAR_BYTE_END        DS.L    1
00004638                          4706  VAR_TEMP_CLEANCOPY  DS.L    1
0000463C                          4707  
0000463C                          4708  VAR_LONG_ADDRESS_MODE_CHECK        DS.L    1       *holds the bits 0-2 in long form
00004640                          4709  
00004640                          4710  *MORE FOR STACK USAGE*
00004640= 2C 00                   4711  DISP_COMMA  DC.B    ',',0
00004642= 20 20 20 00             4712  DISP_INDENT  DC.B    '   ',0
00004646                          4713  
00004646                          4714  *NEXT WORD POINTER: FOR IDENTIFING (xxx).W or (xxx).L*
00004646                          4715  POINTER_WORD    DS.W       1
00004648                          4716  
00004648                          4717  
00004648                          4718  
00004648                          4719  *---------------------------------------------------------------------------*
00004648                          4720  * Ends program
00004648                          4721  *---------------------------------------------------------------------------*
00004648                          4722              END    START                    * last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASC2HXLP            119C
ASCII2HEX           1196
ASC_ERR             11F8
ASC_LOW             11DA
ASC_NUM             11EA
ASC_SFT             11F2
ASC_UPP             11E2
CHECK0              3478
CHECK1              3502
CHECK2              358C
CHECK3              3626
CHECK4              36C8
CHECK7              376A
CHECK_IMMEDIATE     384A
CHECK_LONG          37FC
CHECK_WORD          37B6
CLEAR_RETURN        3D80
CLEAR_STACK         3D70
COUNTER             4626
CR                  D
DECREMENT           3D68
DEST_CHECK0         38A8
DEST_CHECK1         3932
DEST_CHECK2         39BC
DEST_CHECK3         3A56
DEST_CHECK4         3AF8
DEST_CHECK7         3B9A
DEST_CHECK_IMMEDIATE  3C7A
DEST_CHECK_LONG     3C2C
DEST_CHECK_WORD     3BE6
DEST_LOOP_SHIFTING  3912
DEST_LOOP_SHIFTING1  399C
DEST_LOOP_SHIFTING2  3A2E
DEST_LOOP_SHIFTING3  3AC8
DEST_LOOP_SHIFTING4  3B72
DEST_LOOP_SHIFTING7  3BD2
DEST_MASKING_NEXT   3920
DEST_MASKING_NEXT1  39AA
DEST_MASKING_NEXT2  3A3C
DEST_MASKING_NEXT3  3AD6
DEST_MASKING_NEXT4  3B80
DEST_MASKING_NEXT7  3BE0
DEST_MODE           3030
DEST_REGISTER       3300
DEST_REGISTER_FORMAT  462A
DISPLAY_30_LINES    1344
DISP_0              4616
DISP_1              4618
DISP_2              461A
DISP_3              461C
DISP_4              461E
DISP_5              4620
DISP_6              4622
DISP_7              4624
DISP_A              45F5
DISP_ADDA_L         4506
DISP_ADDA_W         44FC
DISP_ADDQ_B         43FF
DISP_ADDQ_L         4413
DISP_ADDQ_W         4409
DISP_ADD_B          44E1
DISP_ADD_L          44F3
DISP_ADD_W          44EA
DISP_AND_B          44C6
DISP_AND_L          44D8
DISP_AND_W          44CF
DISP_AOP            4601
DISP_ASL_B          454F
DISP_ASL_L          4573
DISP_ASL_W          4561
DISP_ASR_B          4546
DISP_ASR_L          456A
DISP_ASR_W          4558
DISP_BEQ            45C0
DISP_BHI            45CE
DISP_BLT            45B9
DISP_BNE            45C7
DISP_BRA            45B2
DISP_BTST           4352
DISP_CMPA_L         44B2
DISP_CMPA_W         44A8
DISP_CMPI_B         435A
DISP_CMPI_L         436E
DISP_CMPI_W         4364
DISP_CMP_B          448D
DISP_CMP_L          449F
DISP_CMP_W          4496
DISP_COMMA          4640
DISP_CP             45FF
DISP_D              45F0
DISP_DATA           4378
DISP_DIVS           441D
DISP_EORI_B         4334
DISP_EORI_L         4348
DISP_EORI_W         433E
DISP_EOR_B          4472
DISP_EOR_L          4484
DISP_EOR_W          447B
DISP_HEX            45EB
DISP_INDENT         4642
DISP_JSR            43A5
DISP_LB             4611
DISP_LEA            43E2
DISP_LSL_B          4519
DISP_LSL_L          453D
DISP_LSL_W          452B
DISP_LSR_B          4510
DISP_LSR_L          4534
DISP_LSR_W          4522
DISP_MOVEA_L        45E0
DISP_MOVEA_W        45D5
DISP_MOVEM_L        43F4
DISP_MOVEM_W        43E9
DISP_MOVE_B         4380
DISP_MOVE_L         4394
DISP_MOVE_W         438A
DISP_MULS_W         44BC
DISP_NEG_B          43AC
DISP_NEG_L          43BE
DISP_NEG_W          43B5
DISP_NEXT           40C5
DISP_NOT_B          43C7
DISP_NOT_L          43D9
DISP_NOT_W          43D0
DISP_OP             45FA
DISP_ORI_B          4319
DISP_ORI_L          432B
DISP_ORI_W          4322
DISP_POST           460E
DISP_PRE            4607
DISP_ROL_B          4585
DISP_ROL_L          45A9
DISP_ROL_W          4597
DISP_ROR_B          457C
DISP_ROR_L          45A0
DISP_ROR_W          458E
DISP_RTS            439E
DISP_SUBA_L         4468
DISP_SUBA_W         445E
DISP_SUBI_B         4440
DISP_SUBI_L         4454
DISP_SUBI_W         444A
DISP_SUB_B          4425
DISP_SUB_L          4437
DISP_SUB_W          442E
D_MODE000           30D2
D_MODE010           311A
D_MODE011           317A
D_MODE100           319A
D_MODE111           31EC
EA_ARITH            2FCA
EA_DATA             1522
EA_GEN              3016
EA_MOVEA            2FF0
EA_NOSRC            2FB6
ENDLINE_M           4276
END_ADDR            10E2
ERRMSG_1            415D
ERRMSG_3            417C
ERRMSG_5            41A1
ERROR_1             1146
ERROR_2             1156
ERROR_3             1166
ERROR_4             1176
ERROR_5             1186
E_ADDR_HX           4272
FINMSG              4132
GET_DST_FAILED      3CC0
GET_DST_START_END   462D
GET_DST_SUCCESS     3CC4
GET_EA_EA_DEST      3896
GET_EA_EA_SRC       3466
GET_SRC_FAILED      3890
GET_SRC_START_END   462E
GET_SRC_SUCCESS     3894
HEX2ASCII           11FE
HEX2ASCII2STACK     1240
HEX_CHAR            122C
HEX_CONT            1230
HEX_LOOP            1212
IMMD_B              32A0
IMMD_L              32E0
IMMD_W              32C0
IMMEDIATE           3270
INCREMENT           3D60
INTRO               1028
IS_ODD              1284
IS_ODD_ERR          129A
JMPTABLE            1370
LF                  A
LONGMODE            3244
LOOP_SHIFTING       34E2
LOOP_SHIFTING1      356C
LOOP_SHIFTING2      35FE
LOOP_SHIFTING3      3698
LOOP_SHIFTING4      3742
MAIN                12A0
MASKING_NEXT        34F0
MASKING_NEXT1       357A
MASKING_NEXT2       360C
MASKING_NEXT3       36A6
MASKING_NEXT4       3750
MODE000             30BE
MODE001             30E6
MODE010             30FA
MODE011             313A
MODE100             315A
MODE111             31BA
NEXTLINES           1352
OP0000              13D0
OP0000_CMPI         154A
OP0000_CMPI_B       15C0
OP0000_CMPI_L       1610
OP0000_CMPI_W       15E8
OP0000_ORI_B        16A4
OP0000_ORI_L        16F4
OP0000_ORI_W        16CC
OP0000_RETURN_CMPI  1634
OP0000_RETURN_ORI   1718
OP0001              171A
OP0010              1788
OP0011              1886
OP0100              1982
OP0101              1BD8
OP0101_ADDQ_B       1C54
OP0101_ADDQ_B_0     1CD0
OP0101_ADDQ_B_1     1CDC
OP0101_ADDQ_B_2     1CE8
OP0101_ADDQ_B_3     1CF4
OP0101_ADDQ_B_4     1D00
OP0101_ADDQ_B_5     1D0C
OP0101_ADDQ_B_6     1D18
OP0101_ADDQ_B_7     1D24
OP0101_ADDQ_B_8     1D30
OP0101_ADDQ_L       1C6C
OP0101_ADDQ_W       1C60
OP0101_RETURN       1C74
OP0101_RETURN2      1D38
OP0110              1D7C
OP0111              1E0A
OP1000              1E0E
OP1000_DIVS_DN_EA_OR_EA_DN  1E1C
OP1000_DIVS_RETURN  1F00
OP1000_EA_DN_DIVS   1E4A
OP1000_PRINT_L_DIVS  1EB8
OP1000_PRINT_W_DIVS  1E70
OP1001              1F16
OP1001_ADD_RETURN   2264
OP1001_DETERMINE_DN_EA_OR_EA_DN  202C
OP1001_DN_EA        2064
OP1001_EA_DN        2164
OP1001_PRINT_B      218C
OP1001_PRINT_B2     208C
OP1001_PRINT_L      221C
OP1001_PRINT_L2     211C
OP1001_PRINT_W      21D4
OP1001_PRINT_W2     20D4
OP1001_SUBA_L       1F48
OP1001_SUBA_W       1FBA
OP1010              22D2
OP1011              22D6
OP1011_CMP          2330
OP1011_CMPA         23E2
OP1011_CMPA_L       245C
OP1011_CMPA_W       2450
OP1011_CMP_B        23A4
OP1011_CMP_L        23BC
OP1011_CMP_W        23B0
OP1011_EOR          2482
OP1011_EOR_B        24F6
OP1011_EOR_L        250E
OP1011_EOR_W        2502
OP1011_RETURN       2516
OP1011_RETURN_CMP   23C4
OP1011_RETURN_CMPA  2464
OP1100              25D6
OP1100_AND_RETURN   2926
OP1100_DETERMINE_DN_EA_OR_EA_DN  26EC
OP1100_DN_EA        2726
OP1100_EA_DN        2826
OP1100_EA_DN_MULS   2634
OP1100_MULS_DN_EA_OR_EA_DN  2606
OP1100_MULS_RETURN  26EA
OP1100_PRINT_B      284E
OP1100_PRINT_B2     274E
OP1100_PRINT_L      28DE
OP1100_PRINT_L2     27DE
OP1100_PRINT_L_MULS  26A2
OP1100_PRINT_W      2896
OP1100_PRINT_W2     2796
OP1100_PRINT_W_MULS  265A
OP1101              2928
OP1101_ADDA_L       295A
OP1101_ADDA_W       29CC
OP1101_ADD_RETURN   2C76
OP1101_DETERMINE_DN_EA_OR_EA_DN  2A3E
OP1101_DN_EA        2A76
OP1101_EA_DN        2B76
OP1101_PRINT_B      2B9E
OP1101_PRINT_B2     2A9E
OP1101_PRINT_L      2C2E
OP1101_PRINT_L2     2B2E
OP1101_PRINT_W      2BE6
OP1101_PRINT_W2     2AE6
OP1110              2D04
OP1111              2FB2
OP_ADDA_L           2CEC
OP_ADDA_W           2CD4
OP_ADDQ_B           1D46
OP_ADDQ_L           1D6A
OP_ADDQ_W           1D58
OP_ADD_B            2C8C
OP_ADD_L            2CBC
OP_ADD_W            2CA4
OP_ASL              2EA4
OP_ASL_B            2EC8
OP_ASL_L            2EDA
OP_ASL_W            2EEC
OP_ASR              2E4A
OP_ASR_B            2E6E
OP_ASR_L            2E80
OP_ASR_W            2E92
OP_ASX              2D66
OP_BEQ              1DE0
OP_BHI              1DC4
OP_BLT              1DFC
OP_BNE              1DD2
OP_BRA              1DEE
OP_BTST             1444
OP_CMPA_L           2546
OP_CMPA_W           2534
OP_CMP_B            2558
OP_CMP_L            2588
OP_CMP_W            2570
OP_DATA             14FE
OP_DIVS             1F02
OP_EORI             1452
OP_EORI_B           1472
OP_EORI_L           1496
OP_EORI_W           1484
OP_EOR_B            25A0
OP_EOR_L            25C4
OP_EOR_W            25B2
OP_JSR              1BAA
OP_LEA              1A30
OP_LEA_DN_EA_OR_EA_DN  1A3E
OP_LEA_RETURN       1A9C
OP_LSL              2DF0
OP_LSL_B            2E14
OP_LSL_L            2E26
OP_LSL_W            2E38
OP_LSR              2D96
OP_LSR_B            2DBA
OP_LSR_L            2DCC
OP_LSR_W            2DDE
OP_LSX              2D4E
OP_MOVEA_L          1816
OP_MOVEA_W          1912
OP_MOVEM_L          1A1E
OP_MOVEM_W          1A0C
OP_MOVE_B           1720
OP_MOVE_L           17AE
OP_MOVE_W           18AA
OP_MULS             25F8
OP_NEG              1A9E
OP_NEG_B            1AEA
OP_NEG_L            1B02
OP_NEG_PRINT_EA     1B0E
OP_NEG_W            1AF6
OP_NOT              1B24
OP_NOT_B            1B70
OP_NOT_L            1B88
OP_NOT_PRINT_EA     1B94
OP_NOT_W            1B7C
OP_ORI              1636
OP_PRINT_L_LEA      1A5C
OP_ROL              2F58
OP_ROL_B            2F7C
OP_ROL_L            2F8E
OP_ROL_W            2FA0
OP_ROR              2EFE
OP_ROR_B            2F22
OP_ROR_L            2F34
OP_ROR_W            2F46
OP_ROX              2D7E
OP_RTS              1BBE
OP_SUBA_L           22C0
OP_SUBA_W           22AE
OP_SUBI             14A8
OP_SUBI_B           14C8
OP_SUBI_L           14EC
OP_SUBI_W           14DA
OP_SUB_B            2266
OP_SUB_L            2296
OP_SUB_W            227E
OUTPUT_PROCESSED_DATA  1324
POINTER_WORD        4646
POP_FRONT           3D1A
POP_FRONT_RETURN    3D54
POP_RETURN          3D18
POP_SHIFT_LOOP      3D36
POP_STACK           3D0C
PRINT_QUEUE         3CE0
PRINT_QUEUE_HELPER  3CEC
PRINT_QUEUE_RETURN  3D02
PRINT_STACK         3CC6
PRINT_STACK_HELPER  3CD2
PRINT_STACK_RETURN  3CDE
PROGLP              100A
PROMPT_END          4098
PROMPT_START        4069
PUSH_STACK          3D04
QUEUE_COUNTER       4628
REG_0               33B4
REG_1               33C2
REG_2               33D0
REG_3               33DE
REG_4               33EC
REG_5               33FA
REG_6               3408
REG_7               3416
REPEAT              3424
REPEATMSG           40EF
RETURN              11FC
SRC_LOOP_SHIFTING   37A2
SRC_MASKING_NEXT    37B0
SRC_MODE            3074
SRC_REGISTER        335C
SRC_REGISTER_FORMAT  462B
STACK               7000
STACK_HEX_CHAR      126E
STACK_HEX_CONT      1272
STACK_HEX_LOOP      1254
START               1004
START_ADDR          1090
S_ADDR_HX           426E
TEMP_REGISTER_FORMAT  462C
TERMINATE           3D82
TESTING             1036
TMPINPUT            4279
TMPOUTPUT           42C9
VAR_BYTE_END        4634
VAR_BYTE_START      4630
VAR_LONG_ADDRESS_MODE_CHECK  463C
VAR_TEMP_CLEANCOPY  4638
VR_E_ADDR           421E
VR_S_ADDR           41CE
WELCOME             3D94
WORDMODE            3218

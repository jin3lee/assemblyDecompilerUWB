00001004 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/8/2014 2:51:41 AM

00000000                             1  *---------------------------------------------------------------------------*
00000000                             2  * Title      : 68K Disassembler
00000000                             3  * Written by : Team Circle
00000000                             4  * Date       : 12/05/14
00000000                             5  * Description: Scans a section of memory and converts its
00000000                             6  *              contents to a listing of valid assembly 
00000000                             7  *              language instructions
00000000                             8  *---------------------------------------------------------------------------*
00000000                             9  
00000000                            10  *---------------------------------------------------------------------------*
00000000                            11  * System Equates                                                 
00000000                            12  *---------------------------------------------------------------------------*
00000000  =0000000D                 13  CR          EQU     $0D                     * ASCII for Carriage Return
00000000  =0000000A                 14  LF          EQU     $0A                     * ASCII for Line Feed 
00000000  =00007000                 15  STACK       EQU     $7000                   * Initial Stack Pointer                         
00000000                            16              
00000000                            17  *---------------------------------------------------------------------------*
00000000                            18  * Reserved Registers
00000000                            19  *---------------------------------------------------------------------------*  
00000000                            20  * D0 - I/O
00000000                            21  * D1 - Temporary storage of processing data
00000000                            22  * D3 - [PUSH_STACK]
00000000                            23  * D4 - Opcode size (0 - byte; 1- word; 2-long)
00000000                            24  * D5 - Processing data
00000000                            25  * D6 - Loop counter to print 30 lines
00000000                            26  * D7 - Error flag
00000000                            27  * A2 - [STACK POINTER]
00000000                            28  * A5 - Processing address in hex
00000000                            29  
00000000                            30  *---------------------------------------------------------------------------*
00000000                            31  * Start and loop program
00000000                            32  *---------------------------------------------------------------------------*  
00001000                            33              ORG     $1000
00001000  4FF8 7000                 34              LEA     STACK,SP
00001004                            35  START:            
00001004  4EB9 00001028             36              JSR     INTRO                 
0000100A  4EB9 0000104C             37  PROGLP      JSR     START_ADDR
00001010  4EB9 0000109E             38              JSR     END_ADDR
00001016  43F9 000033B6             39              LEA     ENDLINE_M,A1           * Add a new line
0000101C  103C 000E                 40              MOVE.B  #14, D0                  * Display A1
00001020  4E4F                      41              TRAP    #15
00001022                            42              
00001022  4EF9 0000125C             43              JMP     MAIN
00001028                            44              
00001028                            45  *---------------------------------------------------------------------------*
00001028                            46  * INTRO: Display the introduction of the program
00001028                            47  *---------------------------------------------------------------------------*
00001028  43F9 00002ED4             48  INTRO       LEA     WELCOME,A1              * Load PROMPT_START
0000102E  103C 000E                 49              MOVE.B  #14,D0                  * Display A1
00001032  4E4F                      50              TRAP    #15
00001034  4E75                      51              RTS
00001036                            52  TESTING
00001036  3241                      53              MOVEA.W  D1,A1
00001038  344A                      54              MOVEA.W  A2,A2   
0000103A  3653                      55              MOVEA.W  (A3),A3
0000103C  385C                      56              MOVEA.W  (A4)+,A4
0000103E  3A65                      57              MOVEA.W  -(A5),A5
00001040  3C78 3331                 58              MOVEA.W  $3331,A6
00001044  3E79 44444441             59              MOVEA.W  $44444441,A7
0000104A                            60  
0000104A                            61              
0000104A  4E75                      62              RTS
0000104C                            63  *---------------------------------------------------------------------------*
0000104C                            64  * START_ADDR: Compute the starting address
0000104C                            65  *---------------------------------------------------------------------------*
0000104C                            66  START_ADDR
0000104C                            67              * Output
0000104C  43F9 000031A9             68              LEA     PROMPT_START,A1         * Load PROMPT_START 
00001052  103C 000E                 69              MOVE.B  #14,D0                  * Display PROMPT_START
00001056  4E4F                      70              TRAP    #15
00001058                            71      
00001058                            72              * Input
00001058  43F9 0000330E             73              LEA     VR_S_ADDR,A1            * Load VR_S_ADDR
0000105E  103C 0002                 74              MOVE.B  #2,D0                   * Ask user for input
00001062  4E4F                      75              TRAP    #15
00001064                            76              
00001064                            77              * Error Checking (length)
00001064  0C01 0000                 78              CMPI.B  #0, D1                  * Check if input length <= 0
00001068  6F00 0098                 79              BLE     ERROR_1
0000106C  0C01 0008                 80              CMPI.B  #8, D1                  * Check if input length > 8
00001070  6E00 0090                 81              BGT     ERROR_1
00001074                            82              
00001074                            83              * Conversion & Storage
00001074  4EB9 00001152             84              JSR     ASCII2HEX               * Jump to ASCII2HEX
0000107A  0C07 0001                 85              CMPI.B  #1, D7                  * Check for error
0000107E  6700 0082                 86              BEQ     ERROR_1                 
00001082  23C1 000033AE             87              MOVE.L  D1, S_ADDR_HX           * Move the result to S_ADDR_HX 
00001088                            88              
00001088                            89              * Error Checking (Odd)
00001088  43F9 000033AE             90              LEA     S_ADDR_HX, A1           * Load 'S_ADDR_HX' for odd error
0000108E  4EB9 00001240             91              JSR     IS_ODD                  * Check if the input address is odd
00001094  0C07 0001                 92              CMPI.B  #1, D7                  * Check for error
00001098  6700 0088                 93              BEQ     ERROR_3
0000109C                            94              
0000109C                            95              * Return
0000109C  4E75                      96              RTS     
0000109E                            97  *---------------------------------------------------------------------------*
0000109E                            98  * END_ADDR: Compute the ending address
0000109E                            99  *---------------------------------------------------------------------------*
0000109E                           100  END_ADDR
0000109E                           101              * Output
0000109E  43F9 000031D8            102              LEA     PROMPT_END,A1           * Load PROMPT_END
000010A4  103C 000E                103              MOVE.B  #14,D0                  * Display PROMPT_END
000010A8  4E4F                     104              TRAP    #15
000010AA                           105  
000010AA                           106              * Input
000010AA  43F9 0000335E            107              LEA     VR_E_ADDR,A1            * Load VR_E_ADDR
000010B0  103C 0002                108              MOVE.B  #2,D0                   * Ask user for input
000010B4  4E4F                     109              TRAP    #15
000010B6                           110              
000010B6                           111              * Error Checking (length)
000010B6  0C01 0000                112              CMPI.B  #0, D1                  * Check if input length <= 0
000010BA  6F00 0056                113              BLE     ERROR_2
000010BE  0C01 0008                114              CMPI.B  #8, D1                  * Check if input length > 8
000010C2  6E00 004E                115              BGT     ERROR_2
000010C6                           116              
000010C6                           117              * Conversion & Storage
000010C6  4EB9 00001152            118              JSR     ASCII2HEX               * Jump to ASCII2HEX
000010CC  0C07 0001                119              CMPI.B  #1, D7                  * Check for error
000010D0  6700 0040                120              BEQ     ERROR_2
000010D4  23C1 000033B2            121              MOVE.L  D1, E_ADDR_HX           * Move the result to E_ADDR_HX
000010DA                           122              
000010DA                           123              * Error Checking (start > end case)
000010DA  2439 000033AE            124              MOVE.L  S_ADDR_HX, D2           * Move the starting address to D2
000010E0  B282                     125              CMP.L   D2, D1                  * Compare starting and ending address
000010E2  6300 005E                126              BLS     ERROR_5                 * Go to ERROR_5 if ending < starting
000010E6                           127              
000010E6                           128              * Error Checking (Odd case)
000010E6  43F9 000033B2            129              LEA     E_ADDR_HX, A1           * Move the ending address
000010EC  4EB9 00001240            130              JSR     IS_ODD                  * Go to IS_ODD for odd address checking
000010F2  0C07 0001                131              CMPI.B  #1, D7                  * Check for an error flag
000010F6  6700 003A                132              BEQ     ERROR_4
000010FA                           133              
000010FA                           134              * Inputs are valid
000010FA  2A79 000033AE            135              MOVE.L  S_ADDR_HX, A5           * Store the valid input in A5
00001100                           136              
00001100  4E75                     137              RTS
00001102                           138              
00001102                           139  *---------------------------------------------------------------------------*
00001102                           140  * ERROR_1: Address error (Invalid starting address)
00001102                           141  *---------------------------------------------------------------------------*
00001102                           142  ERROR_1
00001102  43F9 0000329D            143              LEA     ERRMSG_1, A1            * Load ERRMSG_1
00001108  103C 000E                144              MOVE.B  #14, D0                 * Display ERRMSG_1
0000110C  4E4F                     145              TRAP    #15
0000110E  4EF8 104C                146              JMP     START_ADDR              * Jump to START_ADDR
00001112                           147      
00001112                           148  *---------------------------------------------------------------------------*
00001112                           149  * ERROR_2: Address error (Invalid ending address)
00001112                           150  *---------------------------------------------------------------------------*
00001112                           151  ERROR_2
00001112  43F9 0000329D            152              LEA     ERRMSG_1, A1            * Load ERRMSG_1
00001118  103C 000E                153              MOVE.B  #14, D0                 * Display ERRMSG_1
0000111C  4E4F                     154              TRAP    #15
0000111E  4EF8 109E                155              JMP     END_ADDR                * Jump to END_ADDR
00001122                           156  
00001122                           157  *---------------------------------------------------------------------------*
00001122                           158  * ERROR_3: Address error (Odd starting address)
00001122                           159  *---------------------------------------------------------------------------*
00001122                           160  ERROR_3
00001122  43F9 000032BC            161              LEA     ERRMSG_3, A1
00001128  103C 000E                162              MOVE.B  #14, D0
0000112C  4E4F                     163              TRAP    #15
0000112E  4EF8 104C                164              JMP     START_ADDR
00001132                           165     
00001132                           166  *---------------------------------------------------------------------------*
00001132                           167  * ERROR_4: Address error (Odd ending address)
00001132                           168  *---------------------------------------------------------------------------*         
00001132                           169  ERROR_4
00001132  43F9 000032BC            170              LEA     ERRMSG_3, A1
00001138  103C 000E                171              MOVE.B  #14, D0
0000113C  4E4F                     172              TRAP    #15
0000113E  4EF8 109E                173              JMP     END_ADDR
00001142                           174            
00001142                           175  *---------------------------------------------------------------------------*
00001142                           176  * ERROR_3: Address error (Ending address is less than starting address)
00001142                           177  *---------------------------------------------------------------------------*
00001142                           178  ERROR_5
00001142  43F9 000032E1            179              LEA     ERRMSG_5, A1
00001148  103C 000E                180              MOVE.B  #14, D0
0000114C  4E4F                     181              TRAP    #15
0000114E  4EF8 109E                182              JMP     END_ADDR
00001152                           183    
00001152                           184  *---------------------------------------------------------------------------*
00001152                           185  * ASCII2HEX: Convert ASCii to Hexadecimal
00001152                           186  * Reserved registers: A1 = Source, D1 = Destination, D2 = Byte, D7 = Error
00001152                           187  *---------------------------------------------------------------------------*
00001152  4281                     188  ASCII2HEX   CLR.L   D1                      * Clear the destination 
00001154  4287                     189              CLR.L   D7                      * Set the error flag to 0
00001156  4282                     190              CLR.L   D2                      * Clear D2 for temp storage
00001158                           191              
00001158  1419                     192  ASC2HXLP    MOVE.B  (A1)+, D2               * Read a byte to D2
0000115A  0C02 0000                193              CMPI.B  #0, D2                  * Check for NULL (indicates the end of source)
0000115E  6700 0058                194              BEQ     RETURN                  * If it's NULL, go to return
00001162  0C02 0066                195              CMPI.B  #102, D2                * Decimal ASCII value of f is 102
00001166  6E00 004C                196              BGT     ASC_ERR                 * ASCII > f (invalid input) 
0000116A  0C02 0061                197              CMPI.B  #97, D2                 * Decimal ASCII value of a is 97
0000116E  6C00 0026                198              BGE     ASC_LOW                 * ASCII >= a (valid input)
00001172  0C02 0046                199              CMPI.B  #70, D2                 * Decimal ASCII value of F is 70
00001176  6E00 003C                200              BGT     ASC_ERR                 * ASCII > F (invalid input)
0000117A  0C02 0041                201              CMPI.B  #65, D2                 * Decimal ASCII value of A is 65
0000117E  6C00 001E                202              BGE     ASC_UPP                 * ASCII >= A (valid input)
00001182  0C02 0039                203              CMPI.B  #57, D2                 * Decimal value of 9 is 57
00001186  6E00 002C                204              BGT     ASC_ERR                 * ASCII > 9 (invalid input)
0000118A  0C02 0030                205              CMPI.B  #48, D2                 * Decimal ASCII value of 0 is 48
0000118E  6C00 0016                206              BGE     ASC_NUM                 * ASCII >= 0 (valid input)
00001192  6000 0020                207              BRA     ASC_ERR                 * Invalid input
00001196                           208  
00001196  0442 0057                209  ASC_LOW     SUBI    #87, D2                 * Convert the ASCII input to Hex
0000119A  6000 0012                210              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
0000119E                           211              
0000119E  0442 0037                212  ASC_UPP     SUBI    #55, D2                 * Convert the ASCII input to Hex
000011A2  6000 000A                213              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011A6                           214              
000011A6  0442 0030                215  ASC_NUM     SUBI    #48, D2                 * Convert the ASCII input to Hex
000011AA  6000 0002                216              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011AE                           217              
000011AE  E981                     218  ASC_SFT     ASL.L   #4, D1                  * Shift the dest to left by 4 bits
000011B0  D202                     219              ADD.B   D2, D1                  * Add the converted input to D1
000011B2  60A4                     220              BRA     ASC2HXLP                * Loop
000011B4                           221  
000011B4  1E3C 0001                222  ASC_ERR     MOVE.B  #1, D7                  * Set the error flag to 1            
000011B8  4E75                     223  RETURN      RTS     
000011BA                           224  
000011BA                           225  *---------------------------------------------------------------------------*
000011BA                           226  * HEX2ASCII: Convert Hexadecimal to ASCii 
000011BA                           227  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
000011BA                           228  *---------------------------------------------------------------------------*
000011BA  0C02 0008                229  HEX2ASCII   CMPI.B  #8, D2                  * Check to see if the size is long
000011BE  6700 000E                230              BEQ     HEX_LOOP
000011C2  4841                     231              SWAP    D1
000011C4  0C02 0002                232              CMPI.B  #2,D2
000011C8  6600 0004                233              BNE     HEX_LOOP
000011CC  E189                     234              LSL.L   #8,D1
000011CE                           235             
000011CE  E999                     236  HEX_LOOP    ROL.L   #4, D1                  * Roll D1 to left
000011D0  2601                     237              MOVE.L  D1, D3                  * Move D1 to D3
000011D2  0283 0000000F            238              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
000011D8  0C03 0009                239              CMPI.B  #9, D3                  * Compare te digit
000011DC  6E00 000A                240              BGT     HEX_CHAR              
000011E0  0603 0030                241              ADDI.B  #48,D3                  * Add 48 for numerical output
000011E4  6000 0006                242              BRA     HEX_CONT
000011E8                           243              
000011E8  0603 0037                244  HEX_CHAR    ADDI.B  #55,D3                  * Add 55 for character output
000011EC                           245  
000011EC  12C3                     246  HEX_CONT    MOVE.B  D3, (A1)+               * Place into A1
000011EE  5342                     247              SUBI    #1, D2                  * Decrement the size
000011F0  0C02 0000                248              CMPI.B  #0, D2                  * Check if D2 is 0
000011F4  66D8                     249              BNE     HEX_LOOP                * Loop
000011F6  12BC 0000                250              MOVE.B  #$0,(A1)                * Null terminator
000011FA  4E75                     251              RTS
000011FC                           252  *---------------------------------------------------------------------------*
000011FC                           253  * HEX2ASCII2STACK: Convert Hexadecimal to ASCii 
000011FC                           254  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
000011FC                           255  *---------------------------------------------------------------------------*
000011FC                           256  HEX2ASCII2STACK
000011FC  0C02 0008                257              CMPI.B  #8, D2                  * Check to see if the size is long
00001200  6700 000E                258              BEQ     STACK_HEX_LOOP
00001204  4841                     259              SWAP    D1
00001206  0C02 0002                260              CMPI.B  #2,D2
0000120A  6600 0004                261              BNE     STACK_HEX_LOOP
0000120E  E189                     262              LSL.L   #8,D1
00001210                           263             
00001210                           264  STACK_HEX_LOOP    
00001210  E999                     265              ROL.L   #4, D1                  * Roll D1 to left
00001212  2601                     266              MOVE.L  D1, D3                  * Move D1 to D3
00001214  0283 0000000F            267              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
0000121A  0C03 0009                268              CMPI.B  #9, D3                  * Compare te digit
0000121E  6E00 000A                269              BGT     STACK_HEX_CHAR              
00001222  0603 0030                270              ADDI.B  #48,D3                  * Add 48 for numerical output
00001226  6000 0006                271              BRA     STACK_HEX_CONT
0000122A                           272              
0000122A                           273  STACK_HEX_CHAR    
0000122A  0603 0037                274              ADDI.B  #55,D3                  * Add 55 for character output
0000122E                           275  
0000122E                           276  STACK_HEX_CONT    
0000122E  6100 1C14                277              BSR     PUSH_STACK              *PLACE INTO STACK
00001232  5342                     278              SUBI    #1, D2                  * Decrement the size
00001234  0C02 0000                279              CMPI.B  #0, D2                  * Check if D2 is 0
00001238  66D6                     280              BNE     STACK_HEX_LOOP                * Loop
0000123A  12BC 0000                281              MOVE.B  #$0,(A1)                * Null terminator
0000123E  4E75                     282              RTS
00001240                           283  
00001240                           284  
00001240                           285  *---------------------------------------------------------------------------*
00001240                           286  * IS_ODD: Check whether the source address is odd
00001240                           287  * Reserved registers: A1 = Source, D1 = Result, D7 = error flag
00001240                           288  *---------------------------------------------------------------------------*
00001240  4281                     289  IS_ODD      CLR.L   D1                      * Clear the result
00001242  4287                     290              CLR.L   D7                      * Set the error flag to 0
00001244  2211                     291              MOVE.L  (A1),D1                * Temp store the checking address to D1
00001246  82FC 0002                292              DIVU    #2, D1                  * Divide the result by 2
0000124A  4841                     293              SWAP    D1                      * Swap remainder with quotient
0000124C  0C01 0001                294              CMPI.B  #1, D1                  * Check for error
00001250  6700 0004                295              BEQ     IS_ODD_ERR
00001254  4E75                     296              RTS
00001256                           297              
00001256  1E3C 0001                298  IS_ODD_ERR  MOVE.B  #1, D7
0000125A  4E75                     299              RTS
0000125C                           300  
0000125C                           301  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*
0000125C                           302  * MAIN                    
0000125C                           303  * A2: STACK POINTER                                                      MAIN                                                                        MAIN
0000125C                           304  * A5: Processing address
0000125C                           305  *
0000125C                           306  * D3: USED FOR PUSHING INTO STACK
0000125C                           307  *     To push into stack => MOVE.W #DATA,D3 
0000125C                           308  *                           BSR    PUSH_STACK
0000125C                           309  *     To print stack     => BSR    PRINT_STACK 
0000125C                           310  *     To clear stack     => BSR    CLEAR_STACK
0000125C                           311  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*  
0000125C                           312  MAIN        
0000125C                           313              *initialize stack pointer
0000125C  33FC 0000 00003766       314              MOVE.W  #0,COUNTER
00001264  347C 7000                315              MOVEA.W #STACK,A2
00001268  163C 0020                316              MOVE.B  #' ',D3
0000126C  6100 1BD6                317              BSR     PUSH_STACK
00001270  6100 1BD2                318              BSR     PUSH_STACK
00001274  6100 1BCE                319              BSR     PUSH_STACK
00001278                           320              
00001278                           321              * clear registers for temp storage
00001278  4280                     322              CLR.L   D0                   
0000127A  4281                     323              CLR.L   D1                   
0000127C  227C 00000000            324              MOVEA.L #0, A1                
00001282                           325              
00001282  220D                     326              MOVE.L  A5,D1                   * check to see if the address is fully read
00001284  23CD 000033AE            327              MOVE.L  A5,S_ADDR_HX
0000128A  B2B9 000033B2            328              CMP.L   E_ADDR_HX,D1
00001290  6C00 12D2                329              BGE     REPEAT                  * go to repeat for user action
00001294                           330  
00001294  43F9 00003409            331              LEA     TMPOUTPUT,A1            * allocate storage to hold output
0000129A  143C 0008                332              MOVE.B  #8,D2                   * set the output size
0000129E  4EB8 11BA                333              JSR     HEX2ASCII               
000012A2  43F9 00003409            334              LEA     TMPOUTPUT,A1
000012A8  103C 000E                335              MOVE.B  #14,D0
000012AC  4E4F                     336              TRAP    #15
000012AE                           337              
000012AE  4285                     338              CLR.L    D5                      * clear the processing data
000012B0  3A1D                     339              MOVE.W  (A5)+,D5                 * copy the currently processing data in A5 over to D5
000012B2                           340                                               * advance the current instruction pointer to the next
000012B2                           341                                               * instruction in memory
000012B2                           342  *----------------------------------------*
000012B2                           343  * Registers          
000012B2                           344  * [D1] - COPY OF D5
000012B2                           345  * [D5] - DATA TO BE PROCESSED
000012B2                           346  * [D6] - COUNTER FOR LINES PROCESSED
000012B2                           347  *
000012B2                           348  * [D4]      - ERROR FLAG BEFORE PRINTING
000012B2                           349  * [STACK]   - PRINTS PROCESS DATA
000012B2                           350  * [COUNTER] - KEEPS TRACK OF STACK INCREMENT
000012B2                           351  *
000012B2                           352  * [A1] - USED FOR JUMPING/PRINTING
000012B2                           353  *
000012B2                           354  *----------------------------------------*
000012B2                           355  
000012B2                           356              
000012B2                           357              *Processing the first 4 most significant bits 
000012B2  2205                     358              MOVE.L  D5,D1                    * copy the current processing data to D1
000012B4  143C 000C                359              MOVE.B  #12,D2                   * shift to right by 12 bits
000012B8  E469                     360              LSR.W   D2,D1                    * [D2] Temporarily used D2 for shifting bits
000012BA  C2FC 0006                361              MULU    #6,D1                    * form offset
000012BE  43F9 0000132C            362              LEA     JMPTABLE,A1              * index into table
000012C4  4EB1 1000                363              JSR     0(A1,D1)                 * jump indirect with index
000012C8                           364              
000012C8                           365              *SECURED EA*
000012C8  B83C 0001                366              CMP.B   #1,D4                    * ERROR FLAG CHECK [ERROR WHEN D4 == 1]
000012CC  6600 0012                367              BNE     OUTPUT_PROCESSED_DATA    * PRINTS PROCESSED OP-CODE & EA
000012D0  6100 01E8                368              BSR     OP_DATA                  * PRINT ERROR MESSAGE "DATA"
000012D4  6100 1BDA                369              BSR     CLEAR_STACK              * CLEARS THE STACK 
000012D8  183C 0000                370              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
000012DC  6000 0022                371              BRA     DISPLAY_30_LINES         * GO TO LAST STEP
000012E0                           372             
000012E0                           373  OUTPUT_PROCESSED_DATA       
000012E0  163C 000D                374              MOVE.B  #$D,D3                  *carriage return
000012E4  6100 1B5E                375              BSR     PUSH_STACK
000012E8  163C 000A                376              MOVE.B  #$A,D3                  *new line feed
000012EC  6100 1B56                377              BSR     PUSH_STACK
000012F0  163C 0000                378              MOVE.B  #$0,D3                  *null
000012F4  6100 1B4E                379              BSR     PUSH_STACK
000012F8                           380       
000012F8  6100 1B26                381              BSR     PRINT_QUEUE
000012FC  183C 0000                382              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
00001300                           383  DISPLAY_30_LINES
00001300                           384              * display 30 lines per page
00001300  5206                     385              ADDI.B  #1,D6
00001302  0C06 001E                386              CMPI.B  #30,D6
00001306  6C00 0006                387              BGE     NEXTLINES
0000130A  6000 FF50                388              BRA     MAIN
0000130E                           389            
0000130E                           390  *---------------------------------------------------------------------------*
0000130E                           391  * NEXTLINES: receive input from user to print the next 30 lines
0000130E                           392  *---------------------------------------------------------------------------*  
0000130E  4206                     393  NEXTLINES   CLR.B   D6
00001310  43F9 00003205            394              LEA     DISP_NEXT,A1
00001316  103C 000E                395              MOVE.B  #14,D0
0000131A  4E4F                     396              TRAP    #15
0000131C  43F9 000033B9            397              LEA     TMPINPUT,A1
00001322  103C 0002                398              MOVE.B  #2,D0
00001326  4E4F                     399              TRAP    #15
00001328  4EF8 125C                400              JMP     MAIN
0000132C                           401    
0000132C                           402  *---------------------------------------------------------------------------*
0000132C                           403  * JMPTABLE: OP code jump/branch table used to decode and display opcodes
0000132C                           404  *---------------------------------------------------------------------------*  
0000132C  4EF9 0000138C            405  JMPTABLE    JMP     OP0000  * CMPI/ORI/BTST/EORI/SUBI/BTST
00001332  4EF9 000015B2            406              JMP     OP0001  * MOVE.B                                        *WORKING ON - JOSEPH
00001338  4EF9 00001620            407              JMP     OP0010  * MOVE.L/MOVEA.L
0000133E  4EF9 0000171E            408              JMP     OP0011  * MOVE.W/MOVEA.W
00001344  4EF9 0000181A            409              JMP     OP0100  * MOVEM/LEA/NEG/NOT/JSR/RTS
0000134A  4EF9 000019B4            410              JMP     OP0101  * ADDQ
00001350  4EF9 00001A30            411              JMP     OP0110  * BRA/Bcc (BEQ/BNE/BLT/BHI)
00001356  4EF9 00001ABE            412              JMP     OP0111  * MOVEQ (unassigned)
0000135C  4EF9 00001AC2            413              JMP     OP1000  * DIVS
00001362  4EF9 00001AFE            414              JMP     OP1001  * SUB/SUBA
00001368  4EF9 00001BD6            415              JMP     OP1010  * Unassigned 
0000136E  4EF9 00001BDA            416              JMP     OP1011  * CMP/EOR/CMPA
00001374  4EF9 00001CD6            417              JMP     OP1100  * MULS/AND
0000137A  4EF9 00001D72            418              JMP     OP1101  * ADD/ADDA
00001380  4EF9 00001E44            419              JMP     OP1110  * LSR/LSL/ASR/ASL/ROL/ROR
00001386  4EF9 000020F2            420              JMP     OP1111  * Special/Reserved
0000138C                           421              
0000138C                           422  *---------------------------------------------------------------------------*
0000138C                           423  * OP0000: decode CMPI/ORI/BTST/SUBI/EORI
0000138C                           424  *---------------------------------------------------------------------------*           
0000138C                           425  OP0000                                                                                  
0000138C  4281                     426              CLR.L   D1          * to temporarily store the address to process
0000138E  4280                     427              CLR.L   D0  
00001390  4284                     428              CLR.L   D4                 
00001392  227C 00000000            429              MOVEA.L #0, A1                
00001398                           430              * Check for ORI (0000 0000 xx (size) xxx (EA mode) xxx(EA reg)
00001398                           431              * Check if bit 11,10,9,8 are 0000)
00001398  2205                     432              MOVE.L  D5,D1
0000139A  0281 00000F00            433              ANDI.L  #$0F00,D1
000013A0  0C81 00000000            434              CMPI.L  #$0000,D1   * if they are 0000, it is ORI
000013A6  6700 01B4                435              BEQ     OP_ORI
000013AA                           436  
000013AA                           437              * check for CMPI (0000 1100 xx (size) xxx (EA mode) xxx (EA reg)
000013AA                           438              * check if bit 11,10,9,8 are 1100
000013AA  4281                     439              CLR.L   D1
000013AC  2205                     440              MOVE.L  D5,D1
000013AE  0281 00000F00            441              ANDI.L  #$0F00,D1
000013B4  0C81 00000C00            442              CMPI.L  #$0C00,D1
000013BA  6700 014A                443              BEQ     OP_CMPI
000013BE                           444              
000013BE                           445              * check for SUBI
000013BE  4281                     446              CLR.L   D1
000013C0  2205                     447              MOVE.L  D5,D1
000013C2  0281 00000F00            448              ANDI.L  #$0F00,D1
000013C8  0C81 00000400            449              CMPI.L  #$0400,D1
000013CE  6700 0094                450              BEQ     OP_SUBI
000013D2                           451              
000013D2                           452              * check for EORI
000013D2  4281                     453              CLR.L   D1
000013D4  2205                     454              MOVE.L  D5,D1
000013D6  0281 00000F00            455              ANDI.L  #$0F00,D1
000013DC  0C81 00000A00            456              CMPI.L  #$0A00,D1
000013E2  6700 002A                457              BEQ     OP_EORI
000013E6                           458              
000013E6                           459              * check for BTST
000013E6  4281                     460              CLR.L   D1
000013E8  2205                     461              MOVE.L  D5,D1
000013EA  EA99                     462              ROR.L   #5,D1
000013EC  0281 00000008            463              ANDI.L  #$8,D1
000013F2  0C01 0008                464              CMPI.B  #8,D1
000013F6  6700 0008                465              BEQ     OP_BTST
000013FA                           466  
000013FA                           467              * OP0000 series other than ORI/CMPI/BTST/EORI
000013FA  4EF9 000014BA            468              JMP     OP_DATA
00001400                           469              
00001400                           470  *---------------------------------------------------------------------------*
00001400                           471  * OP_BTST: display BTST
00001400                           472  *---------------------------------------------------------------------------* 
00001400  43F9 00003492            473  OP_BTST     LEA     DISP_BTST,A1
00001406  103C 000E                474              MOVE.B  #14,D0
0000140A  4E4F                     475              TRAP    #15
0000140C  4E75                     476              RTS
0000140E                           477  
0000140E                           478  *---------------------------------------------------------------------------*
0000140E                           479  * OP_EORI: decode and display EORI
0000140E                           480  *---------------------------------------------------------------------------* 
0000140E                           481  OP_EORI
0000140E  4281                     482              CLR.L   D1
00001410  4284                     483              CLR.L   D4
00001412  2205                     484              MOVE.L  D5,D1
00001414  EC99                     485              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001416  0C01 0000                486              CMPI.B  #0,D1
0000141A  6700 0012                487              BEQ     OP_EORI_B    * size is byte
0000141E  0C01 0001                488              CMPI.B  #1,D1
00001422  6700 001C                489              BEQ     OP_EORI_W    * size is word
00001426  0C01 0002                490              CMPI.B  #2,D1
0000142A  6700 0026                491              BEQ     OP_EORI_L    * size is long
0000142E                           492  
0000142E                           493  OP_EORI_B    * size is byte    
0000142E  183C 0000                494              MOVE.B  #0,D4
00001432  43F9 00003474            495              LEA     DISP_EORI_B,A1
00001438  103C 000E                496              MOVE.B  #14,D0
0000143C  4E4F                     497              TRAP    #15
0000143E  4E75                     498              RTS
00001440                           499              
00001440                           500  OP_EORI_W    * size is word
00001440  183C 0001                501              MOVE.B  #1,D4
00001444  43F9 0000347E            502              LEA     DISP_EORI_W,A1
0000144A  103C 000E                503              MOVE.B  #14,D0
0000144E  4E4F                     504              TRAP    #15
00001450  4E75                     505              RTS
00001452                           506              
00001452                           507  OP_EORI_L    * size is long
00001452  183C 0002                508              MOVE.B  #2,D4
00001456  43F9 00003488            509              LEA     DISP_EORI_L,A1
0000145C  103C 000E                510              MOVE.B  #14,D0
00001460  4E4F                     511              TRAP    #15
00001462  4E75                     512              RTS
00001464                           513              
00001464                           514  *---------------------------------------------------------------------------*
00001464                           515  * OP_SUBI: decode SUBI.B/.W/.L
00001464                           516  *---------------------------------------------------------------------------* 
00001464                           517  OP_SUBI
00001464  4281                     518              CLR.L   D1
00001466  4284                     519              CLR.L   D4
00001468  2205                     520              MOVE.L  D5,D1
0000146A  EC99                     521              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
0000146C  0C01 0000                522              CMPI.B  #0,D1
00001470  6700 0012                523              BEQ     OP_SUBI_B    * size is byte
00001474  0C01 0001                524              CMPI.B  #1,D1
00001478  6700 001C                525              BEQ     OP_SUBI_W    * size is word
0000147C  0C01 0002                526              CMPI.B  #2,D1
00001480  6700 0026                527              BEQ     OP_SUBI_L    * size is long
00001484                           528  
00001484                           529  OP_SUBI_B    * size is byte    
00001484  183C 0000                530              MOVE.B  #0,D4
00001488  43F9 00003580            531              LEA     DISP_SUBI_B,A1
0000148E  103C 000E                532              MOVE.B  #14,D0
00001492  4E4F                     533              TRAP    #15
00001494  4E75                     534              RTS
00001496                           535              
00001496                           536  OP_SUBI_W    * size is word
00001496  183C 0001                537              MOVE.B  #1,D4
0000149A  43F9 0000358A            538              LEA     DISP_SUBI_W,A1
000014A0  103C 000E                539              MOVE.B  #14,D0
000014A4  4E4F                     540              TRAP    #15
000014A6  4E75                     541              RTS
000014A8                           542              
000014A8                           543  OP_SUBI_L    * size is long
000014A8  183C 0002                544              MOVE.B  #2,D4
000014AC  43F9 00003594            545              LEA     DISP_SUBI_L,A1
000014B2  103C 000E                546              MOVE.B  #14,D0
000014B6  4E4F                     547              TRAP    #15
000014B8  4E75                     548              RTS
000014BA                           549              
000014BA                           550  *---------------------------------------------------------------------------*
000014BA                           551  * OP_DATA : unidentified opcode
000014BA                           552  *---------------------------------------------------------------------------* 
000014BA                           553  OP_DATA
000014BA  4280                     554              CLR.L   D0                   
000014BC  4281                     555              CLR.L   D1     
000014BE  4284                     556              CLR.L   D4                    
000014C0  227C 00000000            557              MOVEA.L #0, A1             
000014C6  4287                     558              CLR.L   D7
000014C8  1E3C 0001                559              MOVE.B  #1,D7                   * error flag is true
000014CC                           560              
000014CC  43F9 000034B8            561              LEA     DISP_DATA,A1
000014D2  103C 000E                562              MOVE.B  #14,D0
000014D6  4E4F                     563              TRAP    #15
000014D8                           564              
000014D8  4EF9 000014DE            565              JMP     EA_DATA
000014DE                           566             
000014DE                           567             
000014DE                           568  *---------------------------------------------------------------------------*
000014DE                           569  * EA_DATA
000014DE                           570  *---------------------------------------------------------------------------*       
000014DE  43F9 00003409            571  EA_DATA     LEA     TMPOUTPUT,A1    * load the temporarily stored output address
000014E4  2205                     572              MOVE.L  D5,D1           * transfer the processing data to D1
000014E6  7404                     573              MOVE.L  #4,D2           * set to word size
000014E8  4EB8 11BA                574              JSR     HEX2ASCII       * prepare output in ascii
000014EC  43F9 0000372B            575              LEA     DISP_HEX,A1     * display $ symbol
000014F2  103C 000E                576              MOVE.B  #14,D0      
000014F6  4E4F                     577              TRAP    #15
000014F8  43F9 00003409            578              LEA     TMPOUTPUT,A1    * display with a new line
000014FE  103C 000D                579              MOVE.B  #13,D0
00001502  4E4F                     580              TRAP    #15
00001504                           581  
00001504  4E75                     582              RTS
00001506                           583              
00001506                           584  *---------------------------------------------------------------------------*
00001506                           585  * OP_CMPI : decode CMPI and its size
00001506                           586  *---------------------------------------------------------------------------*          
00001506                           587  OP_CMPI
00001506  4281                     588              CLR.L   D1
00001508  4284                     589              CLR.L   D4
0000150A  2205                     590              MOVE.L  D5,D1
0000150C  EC99                     591              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
0000150E  0C01 0000                592              CMPI.B  #0,D1
00001512  6700 0012                593              BEQ     OP_CMPI_B    * size is byte
00001516  0C01 0001                594              CMPI.B  #1,D1
0000151A  6700 001C                595              BEQ     OP_CMPI_W    * size is word
0000151E  0C01 0002                596              CMPI.B  #2,D1
00001522  6700 0026                597              BEQ     OP_CMPI_L    * size is long
00001526                           598  
00001526                           599  OP_CMPI_B    * size is byte    
00001526  183C 0000                600              MOVE.B  #0,D4
0000152A  43F9 0000349A            601              LEA     DISP_CMPI_B,A1
00001530  103C 000E                602              MOVE.B  #14,D0
00001534  4E4F                     603              TRAP    #15
00001536  4E75                     604              RTS
00001538                           605              
00001538                           606  OP_CMPI_W    * size is word
00001538  183C 0001                607              MOVE.B  #1,D4
0000153C  43F9 000034A4            608              LEA     DISP_CMPI_W,A1
00001542  103C 000E                609              MOVE.B  #14,D0
00001546  4E4F                     610              TRAP    #15
00001548  4E75                     611              RTS
0000154A                           612              
0000154A                           613  OP_CMPI_L    * size is long
0000154A  183C 0002                614              MOVE.B  #2,D4
0000154E  43F9 000034AE            615              LEA     DISP_CMPI_L,A1
00001554  103C 000E                616              MOVE.B  #14,D0
00001558  4E4F                     617              TRAP    #15
0000155A  4E75                     618              RTS
0000155C                           619   
0000155C                           620  *---------------------------------------------------------------------------*
0000155C                           621  * OP_ORI : decode ORI and its size
0000155C                           622  *---------------------------------------------------------------------------* 
0000155C                           623  OP_ORI      
0000155C  4281                     624              CLR.L   D1
0000155E  4284                     625              CLR.L   D4
00001560  2205                     626              MOVE.L  D5,D1
00001562  EC99                     627              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001564  0C01 0000                628              CMPI.B  #0,D1
00001568  6700 0012                629              BEQ     OP_ORI_B    * size is byte
0000156C  0C01 0001                630              CMPI.B  #1,D1
00001570  6700 001C                631              BEQ     OP_ORI_W    * size is word
00001574  0C01 0002                632              CMPI.B  #2,D1
00001578  6700 0026                633              BEQ     OP_ORI_L    * size is long
0000157C                           634  
0000157C                           635  OP_ORI_B    * size is byte    
0000157C  183C 0000                636              MOVE.B  #0,D4
00001580  43F9 00003459            637              LEA     DISP_ORI_B,A1
00001586  103C 000E                638              MOVE.B  #14,D0
0000158A  4E4F                     639              TRAP    #15
0000158C  4E75                     640              RTS
0000158E                           641              
0000158E                           642  OP_ORI_W    * size is word
0000158E  183C 0001                643              MOVE.B  #1,D4
00001592  43F9 00003462            644              LEA     DISP_ORI_W,A1
00001598  103C 000E                645              MOVE.B  #14,D0
0000159C  4E4F                     646              TRAP    #15
0000159E  4E75                     647              RTS
000015A0                           648              
000015A0                           649  OP_ORI_L    * size is long
000015A0  183C 0002                650              MOVE.B  #2,D4
000015A4  43F9 0000346B            651              LEA     DISP_ORI_L,A1
000015AA  103C 000E                652              MOVE.B  #14,D0
000015AE  4E4F                     653              TRAP    #15
000015B0  4E75                     654              RTS
000015B2                           655          
000015B2                           656  *---------------------------------------------------------------------------*
000015B2                           657  * OP0001: MOVE.B
000015B2                           658  *---------------------------------------------------------------------------*
000015B2                           659  OP0001      
000015B2  4EF9 000015B8            660              JMP     OP_MOVE_B   * display MOVE.B
000015B8                           661              
000015B8                           662  *---------------------------------------------------------------------------*
000015B8                           663  * OP_MOVE_B: display MOVE_B and proceed to EA
000015B8                           664  *---------------------------------------------------------------------------*
000015B8                           665  OP_MOVE_B                                                                       
000015B8                           666             
000015B8                           667             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000015B8  13FC 0082 0000376A       668             MOVE.B   #$82,DEST_REGISTER_FORMAT
000015C0  13FC 0000 0000376B       669             MOVE.B   #$00,SRC_REGISTER_FORMAT
000015C8                           670             
000015C8                           671             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000015C8  13FC 00B9 0000376D       672             MOVE.B   #$B9,GET_DST_START_END
000015D0  13FC 0020 0000376E       673             MOVE.B   #$20,GET_SRC_START_END
000015D8                           674             
000015D8                           675              *CLEAR D3
000015D8  4283                     676              CLR.L   D3
000015DA                           677              *LOAD STACK WITH THIS OPMODE
000015DA  6100 1868                678              BSR     PUSH_STACK
000015DE  163C 004D                679              MOVE.B  #'M',D3
000015E2  6100 1860                680              BSR     PUSH_STACK
000015E6  163C 004F                681              MOVE.B  #'O',D3
000015EA  6100 1858                682              BSR     PUSH_STACK
000015EE  163C 0056                683              MOVE.B  #'V',D3
000015F2  6100 1850                684              BSR     PUSH_STACK
000015F6  163C 0045                685              MOVE.B  #'E',D3
000015FA  6100 1848                686              BSR     PUSH_STACK
000015FE  163C 002E                687              MOVE.B  #'.',D3
00001602  6100 1840                688              BSR     PUSH_STACK
00001606  163C 0042                689              MOVE.B  #'B',D3
0000160A  6100 1838                690              BSR     PUSH_STACK
0000160E                           691              
0000160E  6100 0F96                692              BSR     GET_EA_EA_SRC
00001612  163C 002C                693              MOVE.B  #',',D3
00001616  6100 182C                694              BSR     PUSH_STACK
0000161A  6100 13BA                695              BSR     GET_EA_EA_DEST
0000161E                           696              
0000161E  4E75                     697              RTS
00001620                           698              
00001620                           699             
00001620                           700  *---------------------------------------------------------------------------*
00001620                           701  * OP0010: decode MOVE.L/MOVEA.L
00001620                           702  *---------------------------------------------------------------------------*
00001620                           703  OP0010      
00001620  183C 0002                704              MOVE.B  #2,D4
00001624  4280                     705              CLR.L   D0                     
00001626  4281                     706              CLR.L   D1                      
00001628  227C 00000000            707              MOVEA.L #0, A1                 
0000162E                           708              
0000162E  2205                     709              MOVE.L  D5,D1
00001630  EA99                     710              ROR.L   #5,D1
00001632  0281 0000000E            711              ANDI.L  #$E,D1
00001638  0C01 0002                712              CMPI.B  #2,D1
0000163C  6700 0070                713              BEQ     OP_MOVEA_L
00001640                           714  
00001640  4EF9 00001646            715              JMP     OP_MOVE_L
00001646                           716             
00001646                           717  
00001646                           718  *---------------------------------------------------------------------------*
00001646                           719  * OP_MOVE_L: display MOVE_L and proceed to EA
00001646                           720  *---------------------------------------------------------------------------*
00001646                           721  OP_MOVE_L   
00001646                           722             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001646  13FC 0082 0000376A       723             MOVE.B   #$82,DEST_REGISTER_FORMAT
0000164E  13FC 0000 0000376B       724             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001656                           725             
00001656                           726             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001656  13FC 00B9 0000376D       727             MOVE.B   #$B9,GET_DST_START_END
0000165E  13FC 0020 0000376E       728             MOVE.B   #$20,GET_SRC_START_END
00001666                           729             
00001666                           730              *CLEAR D3
00001666  4283                     731              CLR.L   D3
00001668                           732              *LOAD STACK WITH THIS OPMODE
00001668  6100 17DA                733              BSR     PUSH_STACK
0000166C  163C 004D                734              MOVE.B  #'M',D3
00001670  6100 17D2                735              BSR     PUSH_STACK
00001674  163C 004F                736              MOVE.B  #'O',D3
00001678  6100 17CA                737              BSR     PUSH_STACK
0000167C  163C 0056                738              MOVE.B  #'V',D3
00001680  6100 17C2                739              BSR     PUSH_STACK
00001684  163C 0045                740              MOVE.B  #'E',D3
00001688  6100 17BA                741              BSR     PUSH_STACK
0000168C  163C 002E                742              MOVE.B  #'.',D3
00001690  6100 17B2                743              BSR     PUSH_STACK
00001694  163C 004C                744              MOVE.B  #'L',D3
00001698  6100 17AA                745              BSR     PUSH_STACK
0000169C                           746              
0000169C  6100 0F08                747              BSR     GET_EA_EA_SRC
000016A0  163C 002C                748              MOVE.B  #',',D3
000016A4  6100 179E                749              BSR     PUSH_STACK
000016A8  6100 132C                750              BSR     GET_EA_EA_DEST
000016AC                           751              
000016AC  4E75                     752              RTS
000016AE                           753  
000016AE                           754  
000016AE                           755  *---------------------------------------------------------------------------*
000016AE                           756  * OP_MOVEA_L: display MOVEA_L and proceed to EA
000016AE                           757  *---------------------------------------------------------------------------*
000016AE                           758  OP_MOVEA_L 
000016AE                           759             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000016AE  13FC 00FD 0000376A       760             MOVE.B   #$FD,DEST_REGISTER_FORMAT
000016B6  13FC 0000 0000376B       761             MOVE.B   #$00,SRC_REGISTER_FORMAT
000016BE                           762             
000016BE                           763             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000016BE  13FC 00B9 0000376D       764             MOVE.B   #$B9,GET_DST_START_END
000016C6  13FC 0020 0000376E       765             MOVE.B   #$20,GET_SRC_START_END
000016CE                           766             
000016CE                           767              *CLEAR D3
000016CE  4283                     768              CLR.L   D3
000016D0                           769              *LOAD STACK WITH THIS OPMODE
000016D0  6100 1772                770              BSR     PUSH_STACK
000016D4  163C 004D                771              MOVE.B  #'M',D3
000016D8  6100 176A                772              BSR     PUSH_STACK
000016DC  163C 004F                773              MOVE.B  #'O',D3
000016E0  6100 1762                774              BSR     PUSH_STACK
000016E4  163C 0056                775              MOVE.B  #'V',D3
000016E8  6100 175A                776              BSR     PUSH_STACK
000016EC  163C 0045                777              MOVE.B  #'E',D3
000016F0  6100 1752                778              BSR     PUSH_STACK           
000016F4  163C 0041                779              MOVE.B  #'A',D3
000016F8  6100 174A                780              BSR     PUSH_STACK
000016FC  163C 002E                781              MOVE.B  #'.',D3
00001700  6100 1742                782              BSR     PUSH_STACK
00001704  163C 004C                783              MOVE.B  #'L',D3
00001708  6100 173A                784              BSR     PUSH_STACK
0000170C                           785              
0000170C  6100 0E98                786              BSR     GET_EA_EA_SRC
00001710  163C 002C                787              MOVE.B  #',',D3
00001714  6100 172E                788              BSR     PUSH_STACK
00001718  6100 12BC                789              BSR     GET_EA_EA_DEST
0000171C                           790              
0000171C  4E75                     791              RTS
0000171E                           792  
0000171E                           793              
0000171E                           794  *---------------------------------------------------------------------------*
0000171E                           795  * OP0011: decode MOVE.W/MOVEA.W
0000171E                           796  *---------------------------------------------------------------------------*
0000171E                           797  OP0011      
0000171E  4280                     798              CLR.L   D0                      
00001720  4281                     799              CLR.L   D1  
00001722  4284                     800              CLR.L   D4                   
00001724  227C 00000000            801              MOVEA.L #0, A1 
0000172A                           802                
0000172A  2205                     803              MOVE.L  D5,D1
0000172C  EC99                     804              ROR.L   #6,D1
0000172E  0281 00000007            805              ANDI.L  #$07,D1
00001734  0C01 0001                806              CMPI.B  #1,D1
00001738  6700 0070                807              BEQ     OP_MOVEA_W
0000173C                           808              
0000173C  4EF9 00001742            809              JMP     OP_MOVE_W
00001742                           810            
00001742                           811  *---------------------------------------------------------------------------*
00001742                           812  * OP_MOVE_W: display MOVE_W and proceed to EA
00001742                           813  *---------------------------------------------------------------------------*
00001742                           814  OP_MOVE_W   
00001742                           815             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001742  13FC 0082 0000376A       816             MOVE.B   #$82,DEST_REGISTER_FORMAT
0000174A  13FC 0000 0000376B       817             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001752                           818             
00001752                           819             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001752  13FC 00B9 0000376D       820             MOVE.B   #$B9,GET_DST_START_END
0000175A  13FC 0020 0000376E       821             MOVE.B   #$20,GET_SRC_START_END
00001762                           822             
00001762                           823              *CLEAR D3
00001762  4283                     824              CLR.L   D3
00001764                           825              *LOAD STACK WITH THIS OPMODE
00001764  6100 16DE                826              BSR     PUSH_STACK
00001768  163C 004D                827              MOVE.B  #'M',D3
0000176C  6100 16D6                828              BSR     PUSH_STACK
00001770  163C 004F                829              MOVE.B  #'O',D3
00001774  6100 16CE                830              BSR     PUSH_STACK
00001778  163C 0056                831              MOVE.B  #'V',D3
0000177C  6100 16C6                832              BSR     PUSH_STACK
00001780  163C 0045                833              MOVE.B  #'E',D3
00001784  6100 16BE                834              BSR     PUSH_STACK
00001788  163C 002E                835              MOVE.B  #'.',D3
0000178C  6100 16B6                836              BSR     PUSH_STACK
00001790  163C 0057                837              MOVE.B  #'W',D3
00001794  6100 16AE                838              BSR     PUSH_STACK
00001798                           839              
00001798  6100 0E0C                840              BSR     GET_EA_EA_SRC
0000179C  163C 002C                841              MOVE.B  #',',D3
000017A0  6100 16A2                842              BSR     PUSH_STACK
000017A4  6100 1230                843              BSR     GET_EA_EA_DEST
000017A8                           844              
000017A8  4E75                     845              RTS
000017AA                           846  
000017AA                           847  *---------------------------------------------------------------------------*
000017AA                           848  * OP_MOVEA_W: display MOVEA and proceed to EA
000017AA                           849  *---------------------------------------------------------------------------*
000017AA                           850  OP_MOVEA_W 
000017AA                           851             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000017AA  13FC 00FD 0000376A       852             MOVE.B   #$FD,DEST_REGISTER_FORMAT
000017B2  13FC 0000 0000376B       853             MOVE.B   #$00,SRC_REGISTER_FORMAT
000017BA                           854             
000017BA                           855             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000017BA  13FC 00B9 0000376D       856             MOVE.B   #$B9,GET_DST_START_END
000017C2  13FC 0020 0000376E       857             MOVE.B   #$20,GET_SRC_START_END
000017CA                           858             
000017CA                           859              *CLEAR D3
000017CA  4283                     860              CLR.L   D3
000017CC                           861              *LOAD STACK WITH THIS OPMODE
000017CC  6100 1676                862              BSR     PUSH_STACK
000017D0  163C 004D                863              MOVE.B  #'M',D3
000017D4  6100 166E                864              BSR     PUSH_STACK
000017D8  163C 004F                865              MOVE.B  #'O',D3
000017DC  6100 1666                866              BSR     PUSH_STACK
000017E0  163C 0056                867              MOVE.B  #'V',D3
000017E4  6100 165E                868              BSR     PUSH_STACK
000017E8  163C 0045                869              MOVE.B  #'E',D3
000017EC  6100 1656                870              BSR     PUSH_STACK           
000017F0  163C 0041                871              MOVE.B  #'A',D3
000017F4  6100 164E                872              BSR     PUSH_STACK
000017F8  163C 002E                873              MOVE.B  #'.',D3
000017FC  6100 1646                874              BSR     PUSH_STACK
00001800  163C 0057                875              MOVE.B  #'W',D3
00001804  6100 163E                876              BSR     PUSH_STACK
00001808                           877              
00001808  6100 0D9C                878              BSR     GET_EA_EA_SRC
0000180C  163C 002C                879              MOVE.B  #',',D3
00001810  6100 1632                880              BSR     PUSH_STACK
00001814  6100 11C0                881              BSR     GET_EA_EA_DEST
00001818                           882            
00001818  4E75                     883              RTS
0000181A                           884  *---------------------------------------------------------------------------*
0000181A                           885  * OP0100: decode MOVEM/LEA/NEG/JSR/RTS/NOT
0000181A                           886  *---------------------------------------------------------------------------*
0000181A                           887  OP0100
0000181A  4280                     888              CLR.L   D0                      
0000181C  4281                     889              CLR.L   D1  
0000181E  4284                     890              CLR.L   D4                      
00001820  227C 00000000            891              MOVEA.L #0, A1                  
00001826  2205                     892              MOVE.L  D5,D1  
00001828                           893              
00001828                           894              * check for RTS
00001828  0C41 4E75                895              CMPI.W  #$4E75,D1   * 0100 1110 0111 0101
0000182C  6700 0178                896              BEQ     OP_RTS
00001830                           897              
00001830                           898              * check for JSR     * 0100 1110 10 xxx (ea mode) xxx (ea reg)
00001830  4281                     899              CLR.L   D1 
00001832  2205                     900              MOVE.L  D5,D1  
00001834  0241 0F00                901              ANDI.W  #$0F00,D1
00001838  0C41 0E00                902              CMPI.W  #$0E00,D1
0000183C  6700 0154                903              BEQ     OP_JSR
00001840                           904  
00001840                           905              * check for NEG     * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
00001840  4281                     906              CLR.L   D1 
00001842  2205                     907              MOVE.L  D5,D1  
00001844  0241 0F00                908              ANDI.W  #$0F00,D1
00001848  0C41 0400                909              CMPI.W  #$0400,D1
0000184C  6700 0086                910              BEQ     OP_NEG
00001850                           911              
00001850                           912              * check for NOT     * 0100 0110 xx (size) xxx (ea mode) xxx (ea reg)
00001850  4281                     913              CLR.L   D1 
00001852  2205                     914              MOVE.L  D5,D1  
00001854  0241 0F00                915              ANDI.W  #$0F00,D1
00001858  0C41 0600                916              CMPI.W  #$0600,D1
0000185C  6700 00DE                917              BEQ     OP_NOT
00001860                           918              
00001860                           919              * check for LEA     * 0100 xxx (reg) 111 xxx (ea mode) xxx (ea reg)
00001860  4281                     920              CLR.L   D1 
00001862  2205                     921              MOVE.L  D5,D1  
00001864  E099                     922              ROR.L   #8,D1
00001866  0C01 0001                923              CMPI.B  #1,D1
0000186A  6700 0054                924              BEQ     OP_LEA
0000186E                           925              
0000186E                           926              * check for MOVEM   * 0100 1 x 001 x (size) xxx (ea mode) xxx (ea reg)
0000186E  4281                     927              CLR.L   D1 
00001870  2205                     928              MOVE.L  D5,D1  
00001872  EB59                     929              ROL.W   #5,D1
00001874  0C01 0001                930              CMPI.B  #1,D1
00001878  6600 FC40                931              BNE     OP_DATA
0000187C  E959                     932              ROL.W   #4,D1
0000187E  0C01 0001                933              CMPI.B  #1,D1
00001882  6600 FC36                934              BNE     OP_DATA
00001886  E359                     935              ROL.W   #1,D1
00001888  0C01 0000                936              CMPI.B  #0,D1
0000188C  6700 000E                937              BEQ     OP_MOVEM_W
00001890  0C01 0001                938              CMPI.B  #1,D1
00001894  6700 0018                939              BEQ     OP_MOVEM_L
00001898  4EF8 14BA                940              JMP     OP_DATA
0000189C                           941  
0000189C                           942  *---------------------------------------------------------------------------*
0000189C                           943  * OP_MOVEM_W: display MOVEM_W
0000189C                           944  *---------------------------------------------------------------------------*    
0000189C                           945  OP_MOVEM_W  
0000189C  183C 0001                946              MOVE.B  #1,D4
000018A0  43F9 00003529            947              LEA     DISP_MOVEM_W,A1
000018A6  103C 000E                948              MOVE.B  #14,D0
000018AA  4E4F                     949              TRAP    #15
000018AC  4E75                     950              RTS
000018AE                           951  
000018AE                           952  *---------------------------------------------------------------------------*
000018AE                           953  * OP_MOVEM_L: display MOVEM_L
000018AE                           954  *---------------------------------------------------------------------------*
000018AE                           955  OP_MOVEM_L  
000018AE  183C 0002                956              MOVE.B  #2,D4
000018B2  43F9 00003534            957              LEA     DISP_MOVEM_L,A1
000018B8  103C 000E                958              MOVE.B  #14,D0
000018BC  4E4F                     959              TRAP    #15
000018BE  4E75                     960              RTS
000018C0                           961     
000018C0                           962  *---------------------------------------------------------------------------*
000018C0                           963  * OP_LEA: decode and display LEA
000018C0                           964  *---------------------------------------------------------------------------*
000018C0                           965  OP_LEA      
000018C0  43F9 00003522            966              LEA     DISP_LEA,A1
000018C6  103C 000E                967              MOVE.B  #14,D0
000018CA  4E4F                     968              TRAP    #15
000018CC  4EF9 00002130            969              JMP     EA_MOVEA
000018D2                           970  
000018D2  4E75                     971              RTS
000018D4                           972  
000018D4                           973  *---------------------------------------------------------------------------*
000018D4                           974  * OP_NEG: decode and display NEG 
000018D4                           975  *---------------------------------------------------------------------------*
000018D4                           976  OP_NEG      * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
000018D4  4281                     977              CLR.L   D1
000018D6  4284                     978              CLR.L   D4
000018D8  2205                     979              MOVE.L  D5,D1
000018DA  EC99                     980              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000018DC  0C01 0000                981              CMPI.B  #0,D1
000018E0  6700 0012                982              BEQ     OP_NEG_B    * size is byte
000018E4  0C01 0001                983              CMPI.B  #1,D1
000018E8  6700 0022                984              BEQ     OP_NEG_W    * size is word
000018EC  0C01 0002                985              CMPI.B  #2,D1
000018F0  6700 0032                986              BEQ     OP_NEG_L    * size is long
000018F4                           987                         
000018F4                           988  OP_NEG_B    * size is byte   
000018F4  183C 0000                989              MOVE.B  #0,D4 
000018F8  43F9 000034EC            990              LEA     DISP_NEG_B,A1
000018FE  103C 000E                991              MOVE.B  #14,D0
00001902  4E4F                     992              TRAP    #15
00001904                           993              
00001904  4EB9 000020F6            994              JSR     EA_NOSRC
0000190A  4E75                     995              RTS
0000190C                           996              
0000190C                           997  OP_NEG_W    * size is word
0000190C  183C 0001                998              MOVE.B  #1,D4
00001910  43F9 000034F5            999              LEA     DISP_NEG_W,A1
00001916  103C 000E               1000              MOVE.B  #14,D0
0000191A  4E4F                    1001              TRAP    #15
0000191C  4EB9 000020F6           1002              JSR     EA_NOSRC
00001922  4E75                    1003              RTS
00001924                          1004              
00001924                          1005  OP_NEG_L    * size is long
00001924  183C 0002               1006              MOVE.B  #2,D4
00001928  43F9 000034FE           1007              LEA     DISP_NEG_L,A1
0000192E  103C 000E               1008              MOVE.B  #14,D0
00001932  4E4F                    1009              TRAP    #15
00001934  4EB9 000020F6           1010              JSR     EA_NOSRC
0000193A                          1011              
0000193A  4E75                    1012              RTS
0000193C                          1013  
0000193C                          1014  *---------------------------------------------------------------------------*
0000193C                          1015  * OP_NOT: decode and display NOT 
0000193C                          1016  *---------------------------------------------------------------------------*
0000193C                          1017  OP_NOT
0000193C  4281                    1018              CLR.L   D1
0000193E  4284                    1019              CLR.L   D4
00001940  2205                    1020              MOVE.L  D5,D1
00001942  EC99                    1021              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001944  0C01 0000               1022              CMPI.B  #0,D1
00001948  6700 0012               1023              BEQ     OP_NOT_B    * size is byte
0000194C  0C01 0001               1024              CMPI.B  #1,D1
00001950  6700 001C               1025              BEQ     OP_NOT_W    * size is word
00001954  0C01 0002               1026              CMPI.B  #2,D1
00001958  6700 0026               1027              BEQ     OP_NOT_L    * size is long
0000195C                          1028                         
0000195C                          1029  OP_NOT_B    * size is byte   
0000195C  183C 0000               1030              MOVE.B  #0,D4 
00001960  43F9 00003507           1031              LEA     DISP_NOT_B,A1
00001966  103C 000E               1032              MOVE.B  #14,D0
0000196A  4E4F                    1033              TRAP    #15
0000196C  4E75                    1034              RTS
0000196E                          1035              
0000196E                          1036  OP_NOT_W    * size is word
0000196E  183C 0001               1037              MOVE.B  #1,D4
00001972  43F9 00003510           1038              LEA     DISP_NOT_W,A1
00001978  103C 000E               1039              MOVE.B  #14,D0
0000197C  4E4F                    1040              TRAP    #15
0000197E  4E75                    1041              RTS
00001980                          1042              
00001980                          1043  OP_NOT_L    * size is long
00001980  183C 0002               1044              MOVE.B  #2,D4
00001984  43F9 00003519           1045              LEA     DISP_NOT_L,A1
0000198A  103C 000E               1046              MOVE.B  #14,D0
0000198E  4E4F                    1047              TRAP    #15
00001990  4E75                    1048              RTS
00001992                          1049  
00001992                          1050  *---------------------------------------------------------------------------*
00001992                          1051  * OP_JSR: display JSR     
00001992                          1052  *---------------------------------------------------------------------------*
00001992  43F9 000034E5           1053  OP_JSR      LEA     DISP_JSR,A1
00001998  103C 000E               1054              MOVE.B  #14,D0
0000199C  4E4F                    1055              TRAP    #15
0000199E  4EB9 000020F6           1056              JSR     EA_NOSRC
000019A4                          1057  
000019A4  4E75                    1058              RTS
000019A6                          1059  
000019A6                          1060  *---------------------------------------------------------------------------*
000019A6                          1061  * OP_RTS: display RTS     
000019A6                          1062  *---------------------------------------------------------------------------* 
000019A6  43F9 000034DE           1063  OP_RTS      LEA     DISP_RTS,A1
000019AC  103C 000E               1064              MOVE.B  #14,D0
000019B0  4E4F                    1065              TRAP    #15
000019B2  4E75                    1066              RTS
000019B4                          1067  
000019B4                          1068  *---------------------------------------------------------------------------*
000019B4                          1069  * OP0101: decode ADDQ
000019B4                          1070  *---------------------------------------------------------------------------* 
000019B4  4280                    1071  OP0101      CLR.L   D0               * clear registers for temp storage       
000019B6  4281                    1072              CLR.L   D1
000019B8  4284                    1073              CLR.L   D4                  
000019BA  227C 00000000           1074              MOVEA.L #0, A1  
000019C0                          1075              
000019C0  2205                    1076              MOVE.L  D5,D1           * copy the processing data 
000019C2  E089                    1077              LSR.L   #8,D1           * shift to right by 8 bits to check the value of bit 8
000019C4  0201 0001               1078              ANDI.B  #$1,D1          * mask all bits except the last 2 bits
000019C8  0C01 0000               1079              CMPI.B  #0,D1           * if the value is 0, it's ADDQ
000019CC  6700 0006               1080              BEQ     OP_ADDQ
000019D0                          1081              
000019D0  4EF8 14BA               1082              JMP     OP_DATA
000019D4                          1083       
000019D4  4281                    1084  OP_ADDQ     CLR.L   D1
000019D6  2205                    1085              MOVE.L  D5,D1
000019D8  EC99                    1086              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000019DA  0281 00000003           1087              ANDI.L  #$3,D1
000019E0  0C01 0000               1088              CMPI.B  #0,D1
000019E4  6700 0014               1089              BEQ     OP_ADDQ_B    * size is byte
000019E8  0C41 0001               1090              CMPI.W  #1,D1
000019EC  6700 001E               1091              BEQ     OP_ADDQ_W    * size is word
000019F0  0C81 00000002           1092              CMPI.L  #2,D1
000019F6  6700 0026               1093              BEQ     OP_ADDQ_L    * size is long
000019FA                          1094              
000019FA                          1095  *---------------------------------------------------------------------------*
000019FA                          1096  * OP_ADDQ: display ADDQ
000019FA                          1097  *---------------------------------------------------------------------------*              
000019FA                          1098  OP_ADDQ_B    * size is byte   
000019FA  183C 0000               1099              MOVE.B  #0,D4 
000019FE  43F9 0000353F           1100              LEA     DISP_ADDQ_B,A1
00001A04  103C 000E               1101              MOVE.B  #14,D0
00001A08  4E4F                    1102              TRAP    #15
00001A0A  4E75                    1103              RTS
00001A0C                          1104              
00001A0C                          1105  OP_ADDQ_W    * size is word
00001A0C  183C 0001               1106              MOVE.B  #1,D4
00001A10  43F9 00003549           1107              LEA     DISP_ADDQ_W,A1
00001A16  103C 000E               1108              MOVE.B  #14,D0
00001A1A  4E4F                    1109              TRAP    #15
00001A1C  4E75                    1110              RTS
00001A1E                          1111              
00001A1E                          1112  OP_ADDQ_L    * size is long
00001A1E  183C 0002               1113              MOVE.B  #2,D4
00001A22  43F9 00003553           1114              LEA     DISP_ADDQ_L,A1
00001A28  103C 000E               1115              MOVE.B  #14,D0
00001A2C  4E4F                    1116              TRAP    #15
00001A2E  4E75                    1117              RTS
00001A30                          1118  
00001A30                          1119  *---------------------------------------------------------------------------*
00001A30                          1120  * OP0110: decode BRA/BEQ/BNE/BLT/BHI
00001A30                          1121  *---------------------------------------------------------------------------*              
00001A30  4280                    1122  OP0110      CLR.L   D0                  
00001A32  4281                    1123              CLR.L   D1   
00001A34  4284                    1124              CLR.L   D4                 
00001A36  227C 00000000           1125              MOVEA.L #0,A1
00001A3C  2205                    1126              MOVE.L  D5, D1                
00001A3E  0281 000000FF           1127              ANDI.L  #$00FF, D1              * Get 8-bit displacement 
00001A44  2205                    1128              MOVE.L  D5,D1                  
00001A46  0281 00000F00           1129              ANDI.L  #$0F00,D1
00001A4C                          1130                 
00001A4C  0C41 0000               1131              CMPI.W  #$0000,D1               * Check for BRA
00001A50  6700 0050               1132              BEQ     OP_BRA                  
00001A54                          1133                          
00001A54  0C41 0D00               1134              CMPI.W  #$0D00,D1               * Check for BLT
00001A58  6700 0056               1135              BEQ     OP_BLT      
00001A5C                          1136  
00001A5C  0C41 0700               1137              CMPI.W  #$0700,D1               * Check for BEQ
00001A60  6700 0032               1138              BEQ     OP_BEQ      
00001A64                          1139  
00001A64  0C41 0600               1140              CMPI.W  #$0600,D1               * Check for BNE
00001A68  6700 001C               1141              BEQ     OP_BNE  
00001A6C                          1142              
00001A6C  0C41 0200               1143              CMPI.W  #$0200,D1               * Check for BHI
00001A70  6700 0006               1144              BEQ     OP_BHI
00001A74                          1145  
00001A74  4EF8 14BA               1146              JMP     OP_DATA
00001A78                          1147              
00001A78  43F9 0000370E           1148  OP_BHI      LEA     DISP_BHI,A1             
00001A7E  103C 000E               1149              MOVE.B  #14,D0
00001A82  4E4F                    1150              TRAP    #15
00001A84  4E75                    1151              RTS
00001A86                          1152  
00001A86  43F9 00003707           1153  OP_BNE      LEA     DISP_BNE,A1             
00001A8C  103C 000E               1154              MOVE.B  #14,D0
00001A90  4E4F                    1155              TRAP    #15
00001A92  4E75                    1156              RTS
00001A94                          1157  
00001A94  43F9 00003700           1158  OP_BEQ      LEA     DISP_BEQ,A1             
00001A9A  103C 000E               1159              MOVE.B  #14,D0
00001A9E  4E4F                    1160              TRAP    #15
00001AA0  4E75                    1161              RTS          
00001AA2                          1162                          
00001AA2  43F9 000036F2           1163  OP_BRA      LEA     DISP_BRA,A1             
00001AA8  103C 000E               1164              MOVE.B  #14,D0
00001AAC  4E4F                    1165              TRAP    #15
00001AAE  4E75                    1166              RTS
00001AB0                          1167              
00001AB0  43F9 000036F9           1168  OP_BLT      LEA     DISP_BLT,A1          
00001AB6  103C 000E               1169              MOVE.B  #14,D0
00001ABA  4E4F                    1170              TRAP    #15
00001ABC  4E75                    1171              RTS
00001ABE                          1172     
00001ABE                          1173  *---------------------------------------------------------------------------*
00001ABE                          1174  * OP0111 : MOVEQ not required
00001ABE                          1175  *---------------------------------------------------------------------------*           
00001ABE  4EF8 14BA               1176  OP0111      JMP     OP_DATA
00001AC2                          1177             
00001AC2                          1178  *---------------------------------------------------------------------------*
00001AC2                          1179  * OP1000 : decode DIVS
00001AC2                          1180  *---------------------------------------------------------------------------*           
00001AC2                          1181  OP1000      
00001AC2  4280                    1182              CLR.L   D0                
00001AC4  4281                    1183              CLR.L   D1   
00001AC6  4284                    1184              CLR.L   D4                
00001AC8  207C 00000000           1185              MOVEA.L #0, A0               
00001ACE  227C 00000000           1186              MOVEA.L #0, A1               
00001AD4                          1187              
00001AD4  2205                    1188              MOVE.L  D5,D1
00001AD6  EA89                    1189              LSR.L   #5,D1
00001AD8  0281 0000000E           1190              ANDI.L  #$E,D1
00001ADE                          1191    
00001ADE  0C01 000E               1192              CMPI.B  #$E,D1
00001AE2  6700 0006               1193              BEQ     OP_DIVS
00001AE6                          1194              
00001AE6  4EF8 14BA               1195              JMP     OP_DATA
00001AEA                          1196  
00001AEA                          1197  *---------------------------------------------------------------------------*
00001AEA                          1198  * OP_DIVS: display DIVS and proceed to EA
00001AEA                          1199  *---------------------------------------------------------------------------*  
00001AEA  43F9 0000355D           1200  OP_DIVS     LEA     DISP_DIVS,A1
00001AF0  103C 000E               1201              MOVE.B  #14,D0
00001AF4  4E4F                    1202              TRAP    #15
00001AF6  4EF9 0000210A           1203              JMP     EA_ARITH
00001AFC                          1204  
00001AFC  4E75                    1205              RTS
00001AFE                          1206              
00001AFE                          1207  *---------------------------------------------------------------------------*
00001AFE                          1208  * OP1001: decode SUB/SUBA
00001AFE                          1209  *---------------------------------------------------------------------------*      
00001AFE  4280                    1210  OP1001      CLR.L   D0                
00001B00  4281                    1211              CLR.L   D1   
00001B02  4284                    1212              CLR.L   D4                 
00001B04  207C 00000000           1213              MOVEA.L #0, A0                 
00001B0A  227C 00000000           1214              MOVEA.L #0, A1               
00001B10                          1215              
00001B10  2205                    1216              MOVE.L  D5,D1
00001B12  EA89                    1217              LSR.L   #5,D1
00001B14  0281 0000000E           1218              ANDI.L  #$E,D1
00001B1A                          1219    
00001B1A  0C01 0000               1220              CMPI.B  #$0,D1
00001B1E  6700 004A               1221              BEQ     OP_SUB_B
00001B22  0C01 0002               1222              CMPI.B  #$2,D1
00001B26  6700 005A               1223              BEQ     OP_SUB_W
00001B2A  0C01 0004               1224              CMPI.B  #$4,D1
00001B2E  6700 006A               1225              BEQ     OP_SUB_L
00001B32  0C01 0008               1226              CMPI.B  #$8,D1
00001B36  6700 0032               1227              BEQ     OP_SUB_B
00001B3A  0C01 000A               1228              CMPI.B  #$A,D1
00001B3E  6700 0042               1229              BEQ     OP_SUB_W
00001B42  0C01 000C               1230              CMPI.B  #$C,D1
00001B46  6700 0052               1231              BEQ     OP_SUB_L
00001B4A                          1232              
00001B4A  4241                    1233              CLR     D1
00001B4C  2205                    1234              MOVE.L  D5,D1
00001B4E  EC89                    1235              LSR.L   #6,D1
00001B50  0281 0000000F           1236              ANDI.L  #$F,D1
00001B56  0C01 0003               1237              CMPI.B  #3,D1
00001B5A  6700 0056               1238              BEQ     OP_SUBA_W
00001B5E  0C01 0007               1239              CMPI.B  #7,D1
00001B62  6700 0060               1240              BEQ     OP_SUBA_L
00001B66                          1241              
00001B66  4EF8 14BA               1242              JMP     OP_DATA
00001B6A                          1243    
00001B6A                          1244  *---------------------------------------------------------------------------*
00001B6A                          1245  * OP_SUB: display SUB and proceed to EA
00001B6A                          1246  *---------------------------------------------------------------------------*            
00001B6A  43F9 00003565           1247  OP_SUB_B    LEA     DISP_SUB_B,A1
00001B70  103C 000E               1248              MOVE.B  #14,D0
00001B74  4E4F                    1249              TRAP    #15
00001B76  183C 0000               1250              MOVE.B  #0,D4
00001B7A  4EF9 00002156           1251              JMP     EA_GEN
00001B80                          1252  
00001B80  4E75                    1253              RTS
00001B82                          1254  
00001B82  43F9 0000356E           1255  OP_SUB_W    LEA     DISP_SUB_W,A1
00001B88  103C 000E               1256              MOVE.B  #14,D0
00001B8C  4E4F                    1257              TRAP    #15
00001B8E  183C 0001               1258              MOVE.B  #1,D4
00001B92  4EF9 00002156           1259              JMP     EA_GEN
00001B98                          1260  
00001B98  4E75                    1261              RTS
00001B9A                          1262  
00001B9A  43F9 00003577           1263  OP_SUB_L    LEA     DISP_SUB_L,A1
00001BA0  103C 000E               1264              MOVE.B  #14,D0
00001BA4  4E4F                    1265              TRAP    #15
00001BA6  183C 0002               1266              MOVE.B  #2,D4
00001BAA  4EF9 00002156           1267              JMP     EA_GEN
00001BB0                          1268  
00001BB0  4E75                    1269              RTS
00001BB2                          1270  
00001BB2                          1271  *---------------------------------------------------------------------------*
00001BB2                          1272  * OP_SUBA: display SUBA
00001BB2                          1273  *---------------------------------------------------------------------------*  
00001BB2  43F9 0000359E           1274  OP_SUBA_W   LEA     DISP_SUBA_W,A1
00001BB8  103C 000E               1275              MOVE.B  #14,D0
00001BBC  4E4F                    1276              TRAP    #15
00001BBE  183C 0001               1277              MOVE.B  #1,D4
00001BC2  4E75                    1278              RTS
00001BC4                          1279  
00001BC4  43F9 000035A8           1280  OP_SUBA_L   LEA     DISP_SUBA_L,A1
00001BCA  103C 000E               1281              MOVE.B  #14,D0
00001BCE  4E4F                    1282              TRAP    #15
00001BD0  183C 0002               1283              MOVE.B  #2,D4
00001BD4  4E75                    1284              RTS         
00001BD6                          1285  *---------------------------------------------------------------------------*
00001BD6                          1286  * OP1010 : unassigned
00001BD6                          1287  *---------------------------------------------------------------------------*           
00001BD6  4EF8 14BA               1288  OP1010      JMP     OP_DATA
00001BDA                          1289              
00001BDA                          1290  *---------------------------------------------------------------------------*
00001BDA                          1291  * OP1011 : decode CMP/EOR/CMPA
00001BDA                          1292  *---------------------------------------------------------------------------*           
00001BDA  4280                    1293  OP1011      CLR.L   D0                
00001BDC  4281                    1294              CLR.L   D1            
00001BDE  4284                    1295              CLR.L   D4                   
00001BE0  227C 00000000           1296              MOVEA.L #0, A1               
00001BE6  2205                    1297              MOVE.L  D5,D1
00001BE8  EA99                    1298              ROR.L   #5,D1
00001BEA  0281 0000000E           1299              ANDI.L  #$E,D1
00001BF0  0C01 0000               1300              CMPI.B  #$0,D1
00001BF4  6700 0062               1301              BEQ     OP_CMP_B
00001BF8  0C01 0002               1302              CMPI.B  #$2,D1
00001BFC  6700 0072               1303              BEQ     OP_CMP_W
00001C00  0C01 0004               1304              CMPI.B  #$4,D1
00001C04  6700 0082               1305              BEQ     OP_CMP_L
00001C08  0C01 0008               1306              CMPI.B  #$8,D1
00001C0C  6700 0092               1307              BEQ     OP_EOR_B
00001C10  0C01 000A               1308              CMPI.B  #$A,D1
00001C14  6700 009C               1309              BEQ     OP_EOR_W
00001C18  0C01 000C               1310              CMPI.B  #$C,D1
00001C1C  6700 00A6               1311              BEQ     OP_EOR_L  
00001C20  0C01 0006               1312              CMPI.B  #$6,D1
00001C24  6700 000E               1313              BEQ     OP_CMPA_W
00001C28  0C01 000E               1314              CMPI.B  #$E,D1
00001C2C  6700 0018               1315              BEQ     OP_CMPA_L 
00001C30                          1316  
00001C30  4EF8 14BA               1317              JMP     OP_DATA          
00001C34                          1318  
00001C34                          1319  *---------------------------------------------------------------------------*
00001C34                          1320  * OP_CMPA: display CMPA 
00001C34                          1321  *---------------------------------------------------------------------------
00001C34  43F9 000035E8           1322  OP_CMPA_W   LEA     DISP_CMPA_W,A1
00001C3A  103C 000E               1323              MOVE.B  #14,D0
00001C3E  4E4F                    1324              TRAP    #15
00001C40  183C 0001               1325              MOVE.B  #1,D4
00001C44  4E75                    1326              RTS
00001C46                          1327  
00001C46  43F9 000035F2           1328  OP_CMPA_L   LEA     DISP_CMPA_L,A1
00001C4C  103C 000E               1329              MOVE.B  #14,D0
00001C50  4E4F                    1330              TRAP    #15
00001C52  183C 0002               1331              MOVE.B  #2,D4
00001C56  4E75                    1332              RTS
00001C58                          1333  
00001C58                          1334  *---------------------------------------------------------------------------*
00001C58                          1335  * OP_CMP: display CMP and proceed to EA
00001C58                          1336  *---------------------------------------------------------------------------*  
00001C58  43F9 000035CD           1337  OP_CMP_B    LEA     DISP_CMP_B,A1
00001C5E  103C 000E               1338              MOVE.B  #14,D0
00001C62  4E4F                    1339              TRAP    #15
00001C64  183C 0000               1340              MOVE.B  #0,D4
00001C68  4EF9 00002156           1341              JMP     EA_GEN
00001C6E                          1342  
00001C6E  4E75                    1343              RTS
00001C70                          1344              
00001C70  43F9 000035D6           1345  OP_CMP_W    LEA     DISP_CMP_W,A1
00001C76  103C 000E               1346              MOVE.B  #14,D0
00001C7A  4E4F                    1347              TRAP    #15
00001C7C  183C 0001               1348              MOVE.B  #1,D4
00001C80  4EF9 00002156           1349              JMP     EA_GEN
00001C86                          1350  
00001C86  4E75                    1351              RTS
00001C88                          1352              
00001C88  43F9 000035DF           1353  OP_CMP_L    LEA     DISP_CMP_L,A1
00001C8E  103C 000E               1354              MOVE.B  #14,D0
00001C92  4E4F                    1355              TRAP    #15
00001C94  183C 0002               1356              MOVE.B  #2,D4
00001C98  4EF9 00002156           1357              JMP     EA_GEN
00001C9E                          1358  
00001C9E  4E75                    1359              RTS
00001CA0                          1360              
00001CA0                          1361  *---------------------------------------------------------------------------*
00001CA0                          1362  * OP_EOR: display EOR
00001CA0                          1363  *---------------------------------------------------------------------------*  
00001CA0  43F9 000035B2           1364  OP_EOR_B    LEA     DISP_EOR_B,A1
00001CA6  103C 000E               1365              MOVE.B  #14,D0
00001CAA  4E4F                    1366              TRAP    #15
00001CAC  183C 0000               1367              MOVE.B  #0,D4
00001CB0  4E75                    1368              RTS
00001CB2                          1369              
00001CB2  43F9 000035BB           1370  OP_EOR_W    LEA     DISP_EOR_W,A1
00001CB8  103C 000E               1371              MOVE.B  #14,D0
00001CBC  4E4F                    1372              TRAP    #15
00001CBE  183C 0001               1373              MOVE.B  #1,D4
00001CC2  4E75                    1374              RTS
00001CC4                          1375              
00001CC4  43F9 000035C4           1376  OP_EOR_L    LEA     DISP_EOR_L,A1
00001CCA  103C 000E               1377              MOVE.B  #14,D0
00001CCE  4E4F                    1378              TRAP    #15
00001CD0  183C 0002               1379              MOVE.B  #2,D4
00001CD4  4E75                    1380              RTS    
00001CD6                          1381  
00001CD6                          1382  *---------------------------------------------------------------------------*
00001CD6                          1383  * OP1100: Decode and display MULS/AND and proceed to EA
00001CD6                          1384  *---------------------------------------------------------------------------* 
00001CD6  4280                    1385  OP1100      CLR.L   D0                 
00001CD8  4281                    1386              CLR.L   D1    
00001CDA  4284                    1387              CLR.L   D4                
00001CDC  227C 00000000           1388              MOVEA.L #0, A1             
00001CE2                          1389              
00001CE2  2205                    1390              MOVE.L  D5,D1
00001CE4  EA89                    1391              LSR.L   #5,D1
00001CE6  0281 0000000E           1392              ANDI.L  #$E,D1
00001CEC  0C41 000E               1393              CMPI.W  #$E,D1
00001CF0  6700 0036               1394              BEQ     OP_MULS
00001CF4  0C41 0000               1395              CMPI.W  #$0,D1
00001CF8  6700 0042               1396              BEQ     OP_AND_B
00001CFC  0C41 0002               1397              CMPI.W  #$2,D1
00001D00  6700 004C               1398              BEQ     OP_AND_W
00001D04  0C41 0004               1399              CMPI.W  #$4,D1
00001D08  6700 0056               1400              BEQ     OP_AND_L
00001D0C  0C41 0008               1401              CMPI.W  #$8,D1
00001D10  6700 002A               1402              BEQ     OP_AND_B
00001D14  0C41 000A               1403              CMPI.W  #$A,D1
00001D18  6700 0034               1404              BEQ     OP_AND_W
00001D1C  0C41 000C               1405              CMPI.W  #$C,D1
00001D20  6700 003E               1406              BEQ     OP_AND_L
00001D24                          1407  
00001D24  4EF8 14BA               1408              JMP     OP_DATA
00001D28                          1409  
00001D28  43F9 000035FC           1410  OP_MULS     LEA     DISP_MULS_W,A1
00001D2E  103C 000E               1411              MOVE.B  #14,D0
00001D32  4E4F                    1412              TRAP    #15
00001D34  4EF9 0000210A           1413              JMP     EA_ARITH
00001D3A  4E75                    1414              RTS
00001D3C                          1415              
00001D3C                          1416  OP_AND_B    
00001D3C  43F9 00003606           1417              LEA     DISP_AND_B,A1
00001D42  103C 000E               1418              MOVE.B  #14,D0
00001D46  4E4F                    1419              TRAP    #15
00001D48  183C 0000               1420              MOVE.B  #0,D4
00001D4C  4E75                    1421              RTS
00001D4E                          1422  
00001D4E                          1423  OP_AND_W
00001D4E  43F9 0000360F           1424              LEA     DISP_AND_W,A1
00001D54  103C 000E               1425              MOVE.B  #14,D0
00001D58  4E4F                    1426              TRAP    #15
00001D5A  183C 0001               1427              MOVE.B  #1,D4
00001D5E  4E75                    1428              RTS
00001D60                          1429  
00001D60                          1430  OP_AND_L
00001D60  43F9 00003618           1431              LEA     DISP_AND_L,A1
00001D66  103C 000E               1432              MOVE.B  #14,D0
00001D6A  4E4F                    1433              TRAP    #15
00001D6C  183C 0002               1434              MOVE.B  #2,D4
00001D70  4E75                    1435              RTS
00001D72                          1436  
00001D72                          1437  *---------------------------------------------------------------------------*
00001D72                          1438  * OP1101: Decode ADD/ADDA
00001D72                          1439  *---------------------------------------------------------------------------* 
00001D72  4280                    1440  OP1101      CLR.L   D0                  
00001D74  4281                    1441              CLR.L   D1       
00001D76  4284                    1442              CLR.L   D4                   
00001D78  227C 00000000           1443              MOVEA.L #0, A1              
00001D7E  2205                    1444              MOVE.L  D5,D1
00001D80  EA99                    1445              ROR.L   #5,D1
00001D82  0281 0000000E           1446              ANDI.L  #$E,D1
00001D88  0C01 0000               1447              CMPI.B  #$0,D1
00001D8C  6700 003E               1448              BEQ     OP_ADD_B
00001D90  0C01 0002               1449              CMPI.B  #$2,D1
00001D94  6700 004E               1450              BEQ     OP_ADD_W
00001D98  0C01 0004               1451              CMPI.B  #$4,D1
00001D9C  6700 005E               1452              BEQ     OP_ADD_L
00001DA0  0C01 0008               1453              CMPI.B  #$8,D1
00001DA4  6700 0026               1454              BEQ     OP_ADD_B
00001DA8  0C01 000A               1455              CMPI.B  #$A,D1
00001DAC  6700 0036               1456              BEQ     OP_ADD_W
00001DB0  0C01 000C               1457              CMPI.B  #$C,D1
00001DB4  6700 0046               1458              BEQ     OP_ADD_L  
00001DB8                          1459              
00001DB8  0C01 0006               1460              CMPI.B  #$6,D1
00001DBC  6700 0056               1461              BEQ     OP_ADDA_W
00001DC0  0C01 000E               1462              CMPI.B  #$E,D1
00001DC4  6700 0066               1463              BEQ     OP_ADDA_L 
00001DC8                          1464  
00001DC8  4EF8 14BA               1465              JMP     OP_DATA  
00001DCC                          1466            
00001DCC                          1467  *---------------------------------------------------------------------------*
00001DCC                          1468  * OP_ADD: display ADD and proceed to EA
00001DCC                          1469  *---------------------------------------------------------------------------*  
00001DCC  43F9 00003621           1470  OP_ADD_B    LEA     DISP_ADD_B,A1
00001DD2  103C 000E               1471              MOVE.B  #14,D0
00001DD6  4E4F                    1472              TRAP    #15
00001DD8  183C 0000               1473              MOVE.B  #0,D4
00001DDC  4EF9 00002156           1474              JMP     EA_GEN
00001DE2                          1475  
00001DE2  4E75                    1476              RTS
00001DE4                          1477  
00001DE4  43F9 0000362A           1478  OP_ADD_W    LEA     DISP_ADD_W,A1
00001DEA  103C 000E               1479              MOVE.B  #14,D0
00001DEE  4E4F                    1480              TRAP    #15
00001DF0  183C 0001               1481              MOVE.B  #1,D4
00001DF4  4EF9 00002156           1482              JMP     EA_GEN
00001DFA                          1483  
00001DFA  4E75                    1484              RTS
00001DFC                          1485  
00001DFC  43F9 00003633           1486  OP_ADD_L    LEA     DISP_ADD_L,A1
00001E02  103C 000E               1487              MOVE.B  #14,D0
00001E06  4E4F                    1488              TRAP    #15
00001E08  183C 0002               1489              MOVE.B  #2,D4
00001E0C  4EF9 00002156           1490              JMP     EA_GEN
00001E12                          1491  
00001E12  4E75                    1492              RTS
00001E14                          1493  
00001E14                          1494  *---------------------------------------------------------------------------*
00001E14                          1495  * OP_ADDA: display ADDA and proceed to EA
00001E14                          1496  *---------------------------------------------------------------------------*  
00001E14  43F9 0000363C           1497  OP_ADDA_W   LEA     DISP_ADDA_W,A1
00001E1A  103C 000E               1498              MOVE.B  #14,D0
00001E1E  4E4F                    1499              TRAP    #15
00001E20  183C 0001               1500              MOVE.B  #1,D4
00001E24  4EF9 00002156           1501              JMP     EA_GEN
00001E2A                          1502  
00001E2A  4E75                    1503              RTS
00001E2C                          1504  
00001E2C  43F9 00003646           1505  OP_ADDA_L   LEA     DISP_ADDA_L,A1
00001E32  103C 000E               1506              MOVE.B  #14,D0
00001E36  4E4F                    1507              TRAP    #15
00001E38  183C 0002               1508              MOVE.B  #2,D4
00001E3C  4EF9 00002156           1509              JMP     EA_GEN
00001E42                          1510  
00001E42  4E75                    1511              RTS
00001E44                          1512              
00001E44                          1513  *---------------------------------------------------------------------------*
00001E44                          1514  * OP1110: LSR/LSL/ASR/ASL/ROL/ROR
00001E44                          1515  *---------------------------------------------------------------------------* 
00001E44  4280                    1516  OP1110      CLR.L   D0                  
00001E46  4281                    1517              CLR.L   D1   
00001E48  4284                    1518              CLR.L   D4                   
00001E4A  227C 00000000           1519              MOVEA.L #0, A1                 
00001E50  2205                    1520              MOVE.L  D5,D1
00001E52                          1521              
00001E52                          1522              * check for LSX
00001E52  E699                    1523              ROR.L   #3,D1
00001E54  0281 00000001           1524              ANDI.L  #$1,D1
00001E5A  0C01 0001               1525              CMPI.B  #1,D1
00001E5E  6700 002E               1526              BEQ     OP_LSX
00001E62                          1527              
00001E62                          1528              * reset D1 and check for ASX
00001E62  4281                    1529              CLR.L   D1
00001E64  2205                    1530              MOVE.L  D5,D1
00001E66  E699                    1531              ROR.L   #3,D1
00001E68  0281 00000001           1532              ANDI.L  #$1,D1
00001E6E  0C01 0000               1533              CMPI.B  #0,D1
00001E72  6700 0032               1534              BEQ     OP_ASX
00001E76                          1535  
00001E76                          1536              * reset D1 and check for ROX
00001E76  4281                    1537              CLR.L   D1
00001E78  2205                    1538              MOVE.L  D5,D1
00001E7A  E699                    1539              ROR.L   #3,D1
00001E7C  0281 00000001           1540              ANDI.L  #$1,D1
00001E82  0C01 0003               1541              CMPI.B  #3,D1
00001E86  6700 0036               1542              BEQ     OP_ROX
00001E8A                          1543              
00001E8A  4EF8 14BA               1544              JMP     OP_DATA
00001E8E                          1545  
00001E8E                          1546  *---------------------------------------------------------------------------*
00001E8E                          1547  * OP_LSX: process LSR/LSL
00001E8E                          1548  *---------------------------------------------------------------------------*            
00001E8E  EA99                    1549  OP_LSX      ROR.L   #5,D1
00001E90  0281 00000001           1550              ANDI.L  #$1,D1
00001E96  0C01 0000               1551              CMPI.B  #0,D1
00001E9A  6700 003A               1552              BEQ     OP_LSR
00001E9E  0C01 0001               1553              CMPI.B  #1,D1
00001EA2  6700 008C               1554              BEQ     OP_LSL
00001EA6                          1555              
00001EA6                          1556  *---------------------------------------------------------------------------*
00001EA6                          1557  * OP_ASX: process ASR/ASL
00001EA6                          1558  *---------------------------------------------------------------------------*  
00001EA6  EA99                    1559  OP_ASX      ROR.L   #5,D1
00001EA8  0281 00000001           1560              ANDI.L  #$1,D1
00001EAE  0C01 0000               1561              CMPI.B  #0,D1
00001EB2  6700 00D6               1562              BEQ     OP_ASR
00001EB6  0C01 0001               1563              CMPI.B  #1,D1
00001EBA  6700 0128               1564              BEQ     OP_ASL
00001EBE                          1565              
00001EBE                          1566  *---------------------------------------------------------------------------*
00001EBE                          1567  * OP_ROX: process ROR/ROL
00001EBE                          1568  *---------------------------------------------------------------------------*  
00001EBE  EA99                    1569  OP_ROX      ROR.L   #5,D1
00001EC0  0281 00000001           1570              ANDI.L  #$1,D1
00001EC6  0C01 0000               1571              CMPI.B  #0,D1
00001ECA  6700 0172               1572              BEQ     OP_ROR
00001ECE  0C01 0001               1573              CMPI.B  #1,D1
00001ED2  6700 01C4               1574              BEQ     OP_ROL
00001ED6                          1575  
00001ED6                          1576  *---------------------------------------------------------------------------*
00001ED6                          1577  * OP_LSR: decode and display LSR
00001ED6                          1578  *---------------------------------------------------------------------------*        
00001ED6  E599                    1579  OP_LSR      ROL.L   #2,D1
00001ED8  0281 00000003           1580              ANDI.L  #$3,D1
00001EDE  0C01 0000               1581              CMPI.B  #0,D1
00001EE2  6700 0016               1582              BEQ     OP_LSR_B
00001EE6  0C01 0001               1583              CMPI.B  #$1,D1
00001EEA  6700 0032               1584              BEQ     OP_LSR_W
00001EEE  0C01 0002               1585              CMPI.B  #$2,D1
00001EF2  6700 0018               1586              BEQ     OP_LSR_L
00001EF6                          1587              
00001EF6  4EF8 14BA               1588              JMP     OP_DATA
00001EFA                          1589  
00001EFA  43F9 00003650           1590  OP_LSR_B    LEA     DISP_LSR_B,A1
00001F00  103C 000E               1591              MOVE.B  #14,D0
00001F04  4E4F                    1592              TRAP    #15
00001F06  183C 0000               1593              MOVE.B  #0,D4
00001F0A  4E75                    1594              RTS
00001F0C                          1595  
00001F0C  43F9 00003674           1596  OP_LSR_L    LEA     DISP_LSR_L,A1
00001F12  103C 000E               1597              MOVE.B  #14,D0
00001F16  4E4F                    1598              TRAP    #15
00001F18  183C 0002               1599              MOVE.B  #2,D4
00001F1C  4E75                    1600              RTS
00001F1E                          1601  
00001F1E  43F9 00003662           1602  OP_LSR_W    LEA     DISP_LSR_W,A1
00001F24  103C 000E               1603              MOVE.B  #14,D0
00001F28  4E4F                    1604              TRAP    #15
00001F2A  183C 0001               1605              MOVE.B  #1,D4
00001F2E  4E75                    1606              RTS
00001F30                          1607   
00001F30                          1608  *---------------------------------------------------------------------------*
00001F30                          1609  * OP_LSL: decode and display LSL
00001F30                          1610  *---------------------------------------------------------------------------*             
00001F30  E599                    1611  OP_LSL      ROL.L   #2,D1
00001F32  0281 00000003           1612              ANDI.L  #$3,D1
00001F38  0C01 0000               1613              CMPI.B  #0,D1
00001F3C  6700 0016               1614              BEQ     OP_LSL_B
00001F40  0C01 0001               1615              CMPI.B  #$1,D1
00001F44  6700 0032               1616              BEQ     OP_LSL_W
00001F48  0C01 0002               1617              CMPI.B  #$2,D1
00001F4C  6700 0018               1618              BEQ     OP_LSL_L
00001F50                          1619              
00001F50  4EF8 14BA               1620              JMP OP_DATA
00001F54                          1621  
00001F54  43F9 00003659           1622  OP_LSL_B    LEA     DISP_LSL_B,A1
00001F5A  103C 000E               1623              MOVE.B  #14,D0
00001F5E  4E4F                    1624              TRAP    #15
00001F60  183C 0000               1625              MOVE.B  #0,D4
00001F64  4E75                    1626              RTS
00001F66                          1627  
00001F66  43F9 0000367D           1628  OP_LSL_L    LEA     DISP_LSL_L,A1
00001F6C  103C 000E               1629              MOVE.B  #14,D0
00001F70  4E4F                    1630              TRAP    #15
00001F72  183C 0002               1631              MOVE.B  #2,D4
00001F76  4E75                    1632              RTS
00001F78                          1633  
00001F78  43F9 0000366B           1634  OP_LSL_W    LEA     DISP_LSL_W,A1
00001F7E  103C 000E               1635              MOVE.B  #14,D0
00001F82  4E4F                    1636              TRAP    #15
00001F84  183C 0001               1637              MOVE.B  #1,D4
00001F88  4E75                    1638              RTS
00001F8A                          1639   
00001F8A                          1640  *---------------------------------------------------------------------------*
00001F8A                          1641  * OP_ASR: decode and display ASR
00001F8A                          1642  *---------------------------------------------------------------------------*             
00001F8A  E599                    1643  OP_ASR      ROL.L   #2,D1
00001F8C  0281 00000003           1644              ANDI.L  #$3,D1
00001F92  0C01 0000               1645              CMPI.B  #0,D1
00001F96  6700 0016               1646              BEQ     OP_ASR_B
00001F9A  0C01 0001               1647              CMPI.B  #$1,D1
00001F9E  6700 0032               1648              BEQ     OP_ASR_W
00001FA2  0C01 0002               1649              CMPI.B  #$2,D1
00001FA6  6700 0018               1650              BEQ     OP_ASR_L
00001FAA                          1651              
00001FAA  4EF8 14BA               1652              JMP OP_DATA
00001FAE                          1653  
00001FAE  43F9 00003686           1654  OP_ASR_B    LEA     DISP_ASR_B,A1
00001FB4  103C 000E               1655              MOVE.B  #14,D0
00001FB8  4E4F                    1656              TRAP    #15
00001FBA  183C 0000               1657              MOVE.B  #0,D4
00001FBE  4E75                    1658              RTS
00001FC0                          1659  
00001FC0  43F9 000036AA           1660  OP_ASR_L    LEA     DISP_ASR_L,A1
00001FC6  103C 000E               1661              MOVE.B  #14,D0
00001FCA  4E4F                    1662              TRAP    #15
00001FCC  183C 0002               1663              MOVE.B  #2,D4
00001FD0  4E75                    1664              RTS
00001FD2                          1665  
00001FD2  43F9 00003698           1666  OP_ASR_W    LEA     DISP_ASR_W,A1
00001FD8  103C 000E               1667              MOVE.B  #14,D0
00001FDC  4E4F                    1668              TRAP    #15
00001FDE  183C 0001               1669              MOVE.B  #1,D4
00001FE2  4E75                    1670              RTS
00001FE4                          1671       
00001FE4                          1672  *---------------------------------------------------------------------------*
00001FE4                          1673  * OP_ASL: decode and display ASL
00001FE4                          1674  *---------------------------------------------------------------------------*         
00001FE4  E599                    1675  OP_ASL      ROL.L   #2,D1
00001FE6  0281 00000003           1676              ANDI.L  #$3,D1
00001FEC  0C01 0000               1677              CMPI.B  #0,D1
00001FF0  6700 0016               1678              BEQ     OP_ASL_B
00001FF4  0C01 0001               1679              CMPI.B  #$1,D1
00001FF8  6700 0032               1680              BEQ     OP_ASL_W
00001FFC  0C01 0002               1681              CMPI.B  #$2,D1
00002000  6700 0018               1682              BEQ     OP_ASL_L
00002004                          1683              
00002004  4EF8 14BA               1684              JMP OP_DATA
00002008                          1685  
00002008  43F9 0000368F           1686  OP_ASL_B    LEA     DISP_ASL_B,A1
0000200E  103C 000E               1687              MOVE.B  #14,D0
00002012  4E4F                    1688              TRAP    #15
00002014  183C 0000               1689              MOVE.B  #0,D4
00002018  4E75                    1690              RTS
0000201A                          1691  
0000201A  43F9 000036B3           1692  OP_ASL_L    LEA     DISP_ASL_L,A1
00002020  103C 000E               1693              MOVE.B  #14,D0
00002024  4E4F                    1694              TRAP    #15
00002026  183C 0002               1695              MOVE.B  #2,D4
0000202A  4E75                    1696              RTS
0000202C                          1697  
0000202C  43F9 000036A1           1698  OP_ASL_W    LEA     DISP_ASL_W,A1
00002032  103C 000E               1699              MOVE.B  #14,D0
00002036  4E4F                    1700              TRAP    #15
00002038  183C 0001               1701              MOVE.B  #1,D4
0000203C  4E75                    1702              RTS
0000203E                          1703   
0000203E                          1704  *---------------------------------------------------------------------------*
0000203E                          1705  * OP_ROR: decode and display ROR
0000203E                          1706  *---------------------------------------------------------------------------*             
0000203E  E599                    1707  OP_ROR      ROL.L   #2,D1
00002040  0281 00000003           1708              ANDI.L  #$3,D1
00002046  0C01 0000               1709              CMPI.B  #0,D1
0000204A  6700 0016               1710              BEQ     OP_ROR_B
0000204E  0C01 0001               1711              CMPI.B  #$1,D1
00002052  6700 0032               1712              BEQ     OP_ROR_W
00002056  0C01 0002               1713              CMPI.B  #$2,D1
0000205A  6700 0018               1714              BEQ     OP_ROR_L
0000205E                          1715              
0000205E  4EF8 14BA               1716              JMP OP_DATA
00002062                          1717  
00002062  43F9 000036BC           1718  OP_ROR_B    LEA     DISP_ROR_B,A1
00002068  103C 000E               1719              MOVE.B  #14,D0
0000206C  4E4F                    1720              TRAP    #15
0000206E  183C 0000               1721              MOVE.B  #0,D4
00002072  4E75                    1722              RTS
00002074                          1723  
00002074  43F9 000036E0           1724  OP_ROR_L    LEA     DISP_ROR_L,A1
0000207A  103C 000E               1725              MOVE.B  #14,D0
0000207E  4E4F                    1726              TRAP    #15
00002080  183C 0002               1727              MOVE.B  #2,D4
00002084  4E75                    1728              RTS
00002086                          1729  
00002086  43F9 000036CE           1730  OP_ROR_W    LEA     DISP_ROR_W,A1
0000208C  103C 000E               1731              MOVE.B  #14,D0
00002090  4E4F                    1732              TRAP    #15
00002092  183C 0001               1733              MOVE.B  #1,D4
00002096  4E75                    1734              RTS
00002098                          1735  
00002098                          1736  *---------------------------------------------------------------------------*
00002098                          1737  * OP_ROL: decode and display ROL
00002098                          1738  *---------------------------------------------------------------------------*             
00002098  E599                    1739  OP_ROL      ROL.L   #2,D1
0000209A  0281 00000003           1740              ANDI.L  #$3,D1
000020A0  0C01 0000               1741              CMPI.B  #0,D1
000020A4  6700 0016               1742              BEQ     OP_ROL_B
000020A8  0C01 0001               1743              CMPI.B  #$1,D1
000020AC  6700 0032               1744              BEQ     OP_ROL_W
000020B0  0C01 0002               1745              CMPI.B  #$2,D1
000020B4  6700 0018               1746              BEQ     OP_ROL_L
000020B8                          1747              
000020B8  4EF8 14BA               1748              JMP OP_DATA
000020BC                          1749  
000020BC                          1750  
000020BC  43F9 000036C5           1751  OP_ROL_B    LEA     DISP_ROL_B,A1
000020C2  103C 000E               1752              MOVE.B  #14,D0
000020C6  4E4F                    1753              TRAP    #15
000020C8  183C 0000               1754              MOVE.B  #0,D4
000020CC  4E75                    1755              RTS
000020CE                          1756  
000020CE  43F9 000036E9           1757  OP_ROL_L    LEA     DISP_ROL_L,A1
000020D4  103C 000E               1758              MOVE.B  #14,D0
000020D8  4E4F                    1759              TRAP    #15
000020DA  183C 0002               1760              MOVE.B  #2,D4
000020DE  4E75                    1761              RTS
000020E0                          1762  
000020E0  43F9 000036D7           1763  OP_ROL_W    LEA     DISP_ROL_W,A1
000020E6  103C 000E               1764              MOVE.B  #14,D0
000020EA  4E4F                    1765              TRAP    #15
000020EC  183C 0001               1766              MOVE.B  #1,D4
000020F0  4E75                    1767              RTS
000020F2                          1768              
000020F2                          1769  *---------------------------------------------------------------------------*
000020F2                          1770  * OP1111 : Special reserved
000020F2                          1771  *---------------------------------------------------------------------------*           
000020F2  4EF8 14BA               1772  OP1111      JMP     OP_DATA
000020F6                          1773  
000020F6                          1774  *---------------------------------------------------------------------------*
000020F6                          1775  * EA_NOSRC: decode and display effective addresses for NEG/JSR
000020F6                          1776  *---------------------------------------------------------------------------*
000020F6                          1777  EA_NOSRC    
000020F6  4EB9 000021B4           1778              JSR     SRC_MODE
000020FC  43F9 000033B6           1779              LEA     ENDLINE_M,A1
00002102  103C 000E               1780              MOVE.B  #14,D0
00002106  4E4F                    1781              TRAP    #15
00002108  4E75                    1782              RTS
0000210A                          1783              
0000210A                          1784  *---------------------------------------------------------------------------*
0000210A                          1785  * EA_ARITH: decode and display effective addresses for DIVS/MULS
0000210A                          1786  *---------------------------------------------------------------------------*
0000210A                          1787  EA_ARITH
0000210A  4EB9 000021B4           1788              JSR     SRC_MODE
00002110  43F9 00003730           1789              LEA     DISP_D,A1
00002116  103C 000E               1790              MOVE.B  #14,D0
0000211A  4E4F                    1791              TRAP    #15
0000211C  4EB9 00002440           1792              JSR     DEST_REGISTER
00002122  43F9 000033B6           1793              LEA     ENDLINE_M,A1
00002128  103C 000E               1794              MOVE.B  #14,D0
0000212C  4E4F                    1795              TRAP    #15
0000212E  4E75                    1796              RTS
00002130                          1797              
00002130                          1798  *---------------------------------------------------------------------------*
00002130                          1799  * EA_MOVEA: decode and display effective addresses for MOVEA/LEA
00002130                          1800  *---------------------------------------------------------------------------*
00002130                          1801  EA_MOVEA
00002130  4EB9 000021B4           1802              JSR     SRC_MODE
00002136  43F9 00003741           1803              LEA     DISP_AOP,A1
0000213C  103C 000E               1804              MOVE.B  #14,D0
00002140  4E4F                    1805              TRAP    #15
00002142  4EB9 00002440           1806              JSR     DEST_REGISTER
00002148  43F9 0000373F           1807              LEA     DISP_CP,A1
0000214E  103C 000D               1808              MOVE.B  #13,D0
00002152  4E4F                    1809              TRAP    #15
00002154  4E75                    1810              RTS
00002156                          1811              
00002156                          1812  *---------------------------------------------------------------------------*
00002156                          1813  * EA_GEN: decode and display effective addresses for MOVE
00002156                          1814  *---------------------------------------------------------------------------*
00002156                          1815  EA_GEN          
00002156                          1816              * retrieve/display source mode/register
00002156  4EB9 000021B4           1817              JSR     SRC_MODE
0000215C                          1818              
0000215C                          1819              * retrieve/display destination mode/register
0000215C  4EB9 00002170           1820              JSR     DEST_MODE
00002162                          1821              
00002162  43F9 000033B6           1822              LEA     ENDLINE_M,A1
00002168  103C 000E               1823              MOVE.B  #14,D0
0000216C  4E4F                    1824              TRAP    #15
0000216E                          1825              
0000216E  4E75                    1826              RTS
00002170                          1827  
00002170                          1828  *---------------------------------------------------------------------------*
00002170                          1829  * DEST_MODE: decode and display destination mode (bit 8 - 6)
00002170                          1830  *---------------------------------------------------------------------------*           
00002170                          1831  DEST_MODE   
00002170                          1832              * clear registers to store temp data
00002170  4280                    1833              CLR.L   D0                      
00002172  4281                    1834              CLR.L   D1                      
00002174  207C 00000000           1835              MOVEA.L #0, A0                  
0000217A  227C 00000000           1836              MOVEA.L #0, A1                  
00002180  2205                    1837              MOVE.L  D5,D1
00002182  EC89                    1838              LSR.L   #6,D1
00002184  0281 00000007           1839              ANDI.L  #$7,D1
0000218A  0C01 0000               1840              CMPI.B  #0,D1   * Dn
0000218E  6700 0082               1841              BEQ     D_MODE000
00002192  0C01 0002               1842              CMPI.B  #2,D1   * (An)
00002196  6700 00C2               1843              BEQ     D_MODE010
0000219A  0C01 0003               1844              CMPI.B  #3,D1   * (An)+
0000219E  6700 011A               1845              BEQ     D_MODE011
000021A2  0C01 0004               1846              CMPI.B  #4,D1   * -(An)
000021A6  6700 0132               1847              BEQ     D_MODE100
000021AA  0C01 0007               1848              CMPI.B  #7,D1  * abs
000021AE  6700 017C               1849              BEQ     D_MODE111 
000021B2  4E75                    1850              RTS
000021B4                          1851  
000021B4                          1852  *---------------------------------------------------------------------------*
000021B4                          1853  * SRC_MODE: decode and display source mode (bit 5 - 3)
000021B4                          1854  *---------------------------------------------------------------------------*  
000021B4                          1855  SRC_MODE    
000021B4                          1856              * clear registers to store temp data
000021B4  4280                    1857              CLR.L   D0                      
000021B6  4281                    1858              CLR.L   D1                      
000021B8  207C 00000000           1859              MOVEA.L #0, A0                  
000021BE  227C 00000000           1860              MOVEA.L #0, A1                  
000021C4  2205                    1861              MOVE.L  D5,D1
000021C6  E489                    1862              LSR.L   #2,D1
000021C8  0281 0000000E           1863              ANDI.L  #$E,D1
000021CE                          1864              
000021CE  0C01 0000               1865              CMPI.B  #0,D1   * Dn
000021D2  6700 002A               1866              BEQ     MODE000
000021D6  0C01 0002               1867              CMPI.B  #2,D1   * An 
000021DA  6700 004A               1868              BEQ     MODE001
000021DE  0C01 0004               1869              CMPI.B  #4,D1   * (An)
000021E2  6700 0056               1870              BEQ     MODE010
000021E6  0C01 0006               1871              CMPI.B  #6,D1   * (An)+
000021EA  6700 008E               1872              BEQ     MODE011
000021EE  0C01 0008               1873              CMPI.B  #8,D1   * -(An)
000021F2  6700 00A6               1874              BEQ     MODE100
000021F6  0C01 000F               1875              CMPI.B  #15,D1  * abs/immediate
000021FA  6700 00FE               1876              BEQ     MODE111 
000021FE                          1877        
000021FE                          1878  *---------------------------------------------------------------------------*
000021FE                          1879  * MODE000: decode and display source mode Dn
000021FE                          1880  *---------------------------------------------------------------------------*           
000021FE                          1881  MODE000     *Dn
000021FE  43F9 00003730           1882              LEA     DISP_D,A1
00002204  103C 000E               1883              MOVE.B  #14,D0
00002208  4E4F                    1884              TRAP    #15
0000220A  4EB9 0000249C           1885              JSR     SRC_REGISTER
00002210  4E75                    1886              RTS
00002212                          1887  
00002212                          1888  *---------------------------------------------------------------------------*
00002212                          1889  * D_MODE000: decode and display dest mode Dn
00002212                          1890  *---------------------------------------------------------------------------*
00002212                          1891  D_MODE000     *Dn
00002212  43F9 00003730           1892              LEA     DISP_D,A1
00002218  103C 000E               1893              MOVE.B  #14,D0
0000221C  4E4F                    1894              TRAP    #15
0000221E  4EB9 00002440           1895              JSR     DEST_REGISTER
00002224  4E75                    1896              RTS
00002226                          1897  
00002226                          1898  *---------------------------------------------------------------------------*
00002226                          1899  * MODE001: decode and display source mode An
00002226                          1900  *---------------------------------------------------------------------------* 
00002226                          1901  MODE001 *An
00002226  43F9 00003735           1902              LEA     DISP_A,A1
0000222C  103C 000E               1903              MOVE.B  #14,D0
00002230  4E4F                    1904              TRAP    #15
00002232  4EB9 0000249C           1905              JSR     SRC_REGISTER
00002238                          1906          
00002238  4E75                    1907              RTS
0000223A                          1908  
0000223A                          1909  *---------------------------------------------------------------------------*
0000223A                          1910  * MODE010: decode and display source mode (An)
0000223A                          1911  *---------------------------------------------------------------------------*    
0000223A                          1912  MODE010 *(An)
0000223A  43F9 00003741           1913              LEA     DISP_AOP,A1  *display (A
00002240  103C 000E               1914              MOVE.B  #14,D0
00002244  4E4F                    1915              TRAP    #15
00002246                          1916  
00002246  4EB9 0000249C           1917              JSR     SRC_REGISTER * display register
0000224C                          1918  
0000224C  43F9 0000373F           1919              LEA     DISP_CP,A1   *display )
00002252  103C 000E               1920              MOVE.B  #14,D0
00002256  4E4F                    1921              TRAP    #15
00002258                          1922              
00002258  4E75                    1923              RTS
0000225A                          1924  
0000225A                          1925  *---------------------------------------------------------------------------*
0000225A                          1926  * D_MODE010: decode and display dest mode (An)
0000225A                          1927  *---------------------------------------------------------------------------*
0000225A                          1928  D_MODE010 *(An)
0000225A  43F9 00003741           1929              LEA     DISP_AOP,A1  *display (A
00002260  103C 000E               1930              MOVE.B  #14,D0
00002264  4E4F                    1931              TRAP    #15
00002266                          1932     
00002266  4EB9 00002440           1933              JSR     DEST_REGISTER * display register
0000226C                          1934  
0000226C  43F9 0000373F           1935              LEA     DISP_CP,A1   *display )
00002272  103C 000E               1936              MOVE.B  #14,D0
00002276  4E4F                    1937              TRAP    #15
00002278                          1938              
00002278  4E75                    1939              RTS
0000227A                          1940  
0000227A                          1941  *---------------------------------------------------------------------------*
0000227A                          1942  * MODE011: decode and display source mode (An)+
0000227A                          1943  *---------------------------------------------------------------------------*
0000227A                          1944  MODE011 *(An)+
0000227A  43F9 00003741           1945              LEA     DISP_AOP,A1      *display (A
00002280  103C 000E               1946              MOVE.B  #14,D0
00002284  4E4F                    1947              TRAP    #15
00002286                          1948              
00002286  4EB9 0000249C           1949              JSR     SRC_REGISTER    * display register
0000228C                          1950  
0000228C  43F9 0000374E           1951              LEA     DISP_POST,A1    *display )+
00002292  103C 000E               1952              MOVE.B  #14,D0
00002296  4E4F                    1953              TRAP    #15
00002298                          1954              
00002298  4E75                    1955              RTS
0000229A                          1956              
0000229A                          1957  *---------------------------------------------------------------------------*
0000229A                          1958  * MODE100: decode and display source mode -(An)
0000229A                          1959  *---------------------------------------------------------------------------*
0000229A                          1960  MODE100 *-(An)
0000229A  43F9 00003747           1961              LEA     DISP_PRE,A1    *display -(A
000022A0  103C 000E               1962              MOVE.B  #14,D0
000022A4  4E4F                    1963              TRAP    #15
000022A6                          1964  
000022A6  4EB9 0000249C           1965              JSR     SRC_REGISTER    *display register
000022AC                          1966  
000022AC  43F9 0000373F           1967              LEA     DISP_CP,A1   *display )
000022B2  103C 000E               1968              MOVE.B  #14,D0
000022B6  4E4F                    1969              TRAP    #15
000022B8                          1970              
000022B8  4E75                    1971              RTS
000022BA                          1972  
000022BA                          1973  *---------------------------------------------------------------------------*
000022BA                          1974  * D_MODE011: decode and display dest mode (An)+
000022BA                          1975  *---------------------------------------------------------------------------*
000022BA                          1976  D_MODE011 *(An)+
000022BA  43F9 00003741           1977              LEA     DISP_AOP,A1      *display (A
000022C0  103C 000E               1978              MOVE.B  #14,D0
000022C4  4E4F                    1979              TRAP    #15
000022C6                          1980  
000022C6  4EB9 00002440           1981              JSR     DEST_REGISTER    * display register
000022CC                          1982  
000022CC  43F9 0000374E           1983              LEA     DISP_POST,A1    *display )+
000022D2  103C 000E               1984              MOVE.B  #14,D0
000022D6  4E4F                    1985              TRAP    #15
000022D8                          1986              
000022D8  4E75                    1987              RTS
000022DA                          1988              
000022DA                          1989  *---------------------------------------------------------------------------*
000022DA                          1990  * D_MODE100: decode and display dest mode -(An)
000022DA                          1991  *---------------------------------------------------------------------------*            
000022DA                          1992  D_MODE100 *-(An)
000022DA  43F9 00003747           1993              LEA     DISP_PRE,A1    *display -(A
000022E0  103C 000E               1994              MOVE.B  #14,D0
000022E4  4E4F                    1995              TRAP    #15
000022E6                          1996              
000022E6  4EB9 00002440           1997              JSR     DEST_REGISTER    *display register
000022EC                          1998  
000022EC  43F9 0000373F           1999              LEA     DISP_CP,A1   *display )
000022F2  103C 000E               2000              MOVE.B  #14,D0
000022F6  4E4F                    2001              TRAP    #15
000022F8                          2002              
000022F8  4E75                    2003              RTS
000022FA                          2004  
000022FA                          2005  *---------------------------------------------------------------------------*
000022FA                          2006  * MODE111: decode and display source mode absolute/immediate
000022FA                          2007  *---------------------------------------------------------------------------*
000022FA                          2008  MODE111     * abs/immediate
000022FA                          2009              * clear registers to store temp data
000022FA  4280                    2010              CLR.L   D0                      
000022FC  4281                    2011              CLR.L   D1                      
000022FE  207C 00000000           2012              MOVEA.L #0, A0                  
00002304  227C 00000000           2013              MOVEA.L #0, A1                  
0000230A  2205                    2014              MOVE.L  D5,D1
0000230C                          2015              
0000230C                          2016              * retrieve source register for MODE 111
0000230C  E389                    2017              LSL.L   #1,D1   * shift the bits to left by 1
0000230E  0281 0000000E           2018              ANDI.L  #$E,D1  * mask the first 4 bits 
00002314  0C01 0000               2019              CMPI.B  #0, D1  * if it's 0000, absolute word address
00002318  6700 003E               2020              BEQ     WORDMODE
0000231C  0C01 0002               2021              CMPI.B  #2, D1  * if it's 0010, absolute long address
00002320  6700 0062               2022              BEQ     LONGMODE
00002324  0C01 0008               2023              CMPI.B  #8, D1  * if it's 1000, immediate data
00002328  6700 0086               2024              BEQ     IMMEDIATE
0000232C                          2025       
0000232C                          2026  *---------------------------------------------------------------------------*
0000232C                          2027  * D_MODE111: decode and display dest mode absolute/immediate
0000232C                          2028  *---------------------------------------------------------------------------*           
0000232C                          2029  D_MODE111   * abs
0000232C                          2030              * clear registers to store temp data
0000232C  4280                    2031              CLR.L   D0                      
0000232E  4281                    2032              CLR.L   D1                      
00002330  207C 00000000           2033              MOVEA.L #0, A0                  
00002336  227C 00000000           2034              MOVEA.L #0, A1                  
0000233C  2205                    2035              MOVE.L  D5,D1
0000233E                          2036              
0000233E                          2037              * retrieve dest register for MODE 111
0000233E  EC89                    2038              LSR.L   #6,D1   * shift the bits to right by 6
00002340  E689                    2039              LSR.L   #3,D1   * shift the bits to right by extra 3
00002342  0201 0001               2040              ANDI.B  #1,D1   * mask the first 2 bits 
00002346  0C01 0000               2041              CMPI.B  #0, D1  * if it's 000, absolute word address
0000234A  6700 000C               2042              BEQ     WORDMODE
0000234E  0C01 0001               2043              CMPI.B  #1, D1  * if it's 001, absolute long address
00002352  6700 0030               2044              BEQ     LONGMODE
00002356                          2045              *JSR     OP_DATA *not sure..
00002356  4E75                    2046              RTS
00002358                          2047  
00002358                          2048  
00002358                          2049  *---------------------------------------------------------------------------*
00002358                          2050  * WORDMODE: absolute word address
00002358                          2051  *---------------------------------------------------------------------------*
00002358  43F9 0000372B           2052  WORDMODE    LEA     DISP_HEX,A1
0000235E  103C 000E               2053              MOVE.B  #14,D0
00002362  4E4F                    2054              TRAP    #15
00002364                          2055              
00002364  4285                    2056              CLR.L   D5
00002366  3A1D                    2057              MOVE.W  (A5)+,D5
00002368                          2058              
00002368  43F9 00003409           2059              LEA     TMPOUTPUT,A1
0000236E  2205                    2060              MOVE.L  D5,D1
00002370  7404                    2061              MOVE.L  #4,D2       *move word size 4
00002372  4EB8 11BA               2062              JSR     HEX2ASCII
00002376  43F9 00003409           2063              LEA     TMPOUTPUT,A1
0000237C  103C 000E               2064              MOVE.B  #14,D0
00002380  4E4F                    2065              TRAP    #15
00002382                          2066              
00002382  4E75                    2067              RTS
00002384                          2068  
00002384                          2069  *---------------------------------------------------------------------------*
00002384                          2070  * LONGMODE: absolute long address
00002384                          2071  *---------------------------------------------------------------------------*
00002384  43F9 0000372B           2072  LONGMODE    LEA     DISP_HEX,A1
0000238A  103C 000E               2073              MOVE.B  #14,D0
0000238E  4E4F                    2074              TRAP    #15
00002390                          2075              
00002390  4285                    2076              CLR.L   D5
00002392  2A1D                    2077              MOVE.L  (A5)+,D5
00002394                          2078              
00002394  43F9 00003409           2079              LEA     TMPOUTPUT,A1
0000239A  2205                    2080              MOVE.L  D5,D1
0000239C  7408                    2081              MOVE.L  #8,D2           *move longword size 8
0000239E  4EB8 11BA               2082              JSR     HEX2ASCII
000023A2  43F9 00003409           2083              LEA     TMPOUTPUT,A1
000023A8  103C 000E               2084              MOVE.B  #14,D0
000023AC  4E4F                    2085              TRAP    #15
000023AE                          2086              
000023AE  4E75                    2087              RTS
000023B0                          2088  
000023B0                          2089  
000023B0                          2090  *---------------------------------------------------------------------------*
000023B0                          2091  * IMMEDIATE: immediate address
000023B0                          2092  *---------------------------------------------------------------------------*
000023B0  43F9 00003751           2093  IMMEDIATE   LEA     DISP_LB,A1
000023B6  103C 000E               2094              MOVE.B  #14,D0
000023BA  4E4F                    2095              TRAP    #15
000023BC  43F9 0000372B           2096              LEA     DISP_HEX,A1
000023C2  103C 000E               2097              MOVE.B  #14,D0
000023C6  4E4F                    2098              TRAP    #15
000023C8                          2099              
000023C8                          2100              * check for size
000023C8  0C04 0000               2101              CMPI.B  #0,D4
000023CC  6700 0012               2102              BEQ     IMMD_B
000023D0  0C04 0001               2103              CMPI.B  #1,D4
000023D4  6700 002A               2104              BEQ     IMMD_W
000023D8  0C04 0002               2105              CMPI.B  #2,D4
000023DC  6700 0042               2106              BEQ     IMMD_L
000023E0                          2107  
000023E0                          2108  IMMD_B
000023E0  4285                    2109              CLR.L   D5
000023E2  3A1D                    2110              MOVE.W  (A5)+,D5
000023E4                          2111              
000023E4  43F9 00003409           2112              LEA     TMPOUTPUT,A1
000023EA  2205                    2113              MOVE.L  D5,D1
000023EC  7402                    2114              MOVE.L  #2,D2
000023EE  4EB8 11BA               2115              JSR     HEX2ASCII
000023F2  43F9 00003409           2116              LEA     TMPOUTPUT,A1
000023F8  103C 000E               2117              MOVE.B  #14,D0
000023FC  4E4F                    2118              TRAP    #15
000023FE  4E75                    2119              RTS
00002400                          2120              
00002400                          2121  IMMD_W
00002400  4285                    2122              CLR.L   D5
00002402  3A1D                    2123              MOVE.W  (A5)+,D5
00002404                          2124              
00002404  43F9 00003409           2125              LEA     TMPOUTPUT,A1
0000240A  2205                    2126              MOVE.L  D5,D1
0000240C  7404                    2127              MOVE.L  #4,D2
0000240E  4EB8 11BA               2128              JSR     HEX2ASCII
00002412  43F9 00003409           2129              LEA     TMPOUTPUT,A1
00002418  103C 000E               2130              MOVE.B  #14,D0
0000241C  4E4F                    2131              TRAP    #15
0000241E  4E75                    2132              RTS
00002420                          2133              
00002420                          2134  
00002420                          2135  IMMD_L
00002420  4285                    2136              CLR.L   D5
00002422  3A1D                    2137              MOVE.W  (A5)+,D5
00002424                          2138              
00002424  43F9 00003409           2139              LEA     TMPOUTPUT,A1
0000242A  2205                    2140              MOVE.L  D5,D1
0000242C  7408                    2141              MOVE.L  #8,D2
0000242E  4EB8 11BA               2142              JSR     HEX2ASCII
00002432  43F9 00003409           2143              LEA     TMPOUTPUT,A1
00002438  103C 000E               2144              MOVE.B  #14,D0
0000243C  4E4F                    2145              TRAP    #15
0000243E  4E75                    2146              RTS
00002440                          2147  
00002440                          2148  
00002440                          2149  *---------------------------------------------------------------------------*
00002440                          2150  * DEST_REGISTER: decode and display destination register (bit 11 - 9)
00002440                          2151  *---------------------------------------------------------------------------*
00002440                          2152  DEST_REGISTER
00002440                          2153              * clear registers to store temp data
00002440  4280                    2154              CLR.L   D0                      
00002442  4281                    2155              CLR.L   D1                      
00002444  207C 00000000           2156              MOVEA.L #0, A0                  
0000244A  227C 00000000           2157              MOVEA.L #0, A1 
00002450                          2158              
00002450  2205                    2159              MOVE.L  D5,D1
00002452  EC89                    2160              LSR.L   #6,D1
00002454  E689                    2161              LSR.L   #3,D1
00002456  0281 00000007           2162              ANDI.L  #7,D1
0000245C                          2163              
0000245C  0C01 0000               2164              CMPI.B  #0,D1
00002460  6700 0092               2165              BEQ     REG_0
00002464  0C01 0001               2166              CMPI.B  #1,D1
00002468  6700 0098               2167              BEQ     REG_1
0000246C  0C01 0002               2168              CMPI.B  #2,D1
00002470  6700 009E               2169              BEQ     REG_2
00002474  0C01 0003               2170              CMPI.B  #3,D1
00002478  6700 00A4               2171              BEQ     REG_3
0000247C  0C01 0004               2172              CMPI.B  #4,D1
00002480  6700 00AA               2173              BEQ     REG_4
00002484  0C01 0005               2174              CMPI.B  #5,D1
00002488  6700 00B0               2175              BEQ     REG_5
0000248C  0C01 0006               2176              CMPI.B  #6,D1
00002490  6700 00B6               2177              BEQ     REG_6
00002494  0C01 0007               2178              CMPI.B  #7,D1
00002498  6700 00BC               2179              BEQ     REG_7
0000249C                          2180  
0000249C                          2181  *---------------------------------------------------------------------------*
0000249C                          2182  * SRC_REGISTER: decode and display source register (bit 2 - 0)
0000249C                          2183  *---------------------------------------------------------------------------*           
0000249C                          2184  SRC_REGISTER 
0000249C                          2185              * clear registers to store temp data
0000249C  4280                    2186              CLR.L   D0                      
0000249E  4281                    2187              CLR.L   D1                      
000024A0  207C 00000000           2188              MOVEA.L #0, A0                  
000024A6  227C 00000000           2189              MOVEA.L #0, A1                  
000024AC                          2190              
000024AC  2205                    2191              MOVE.L  D5,D1   * temp store the processing data
000024AE  0281 00000007           2192              ANDI.L  #7,D1   * mask the first 4 bits with 0111
000024B4                          2193              
000024B4  0C01 0000               2194              CMPI.B  #0,D1
000024B8  6700 003A               2195              BEQ     REG_0
000024BC  0C01 0001               2196              CMPI.B  #1,D1
000024C0  6700 0040               2197              BEQ     REG_1
000024C4  0C01 0002               2198              CMPI.B  #2,D1
000024C8  6700 0046               2199              BEQ     REG_2
000024CC  0C01 0003               2200              CMPI.B  #3,D1
000024D0  6700 004C               2201              BEQ     REG_3
000024D4  0C01 0004               2202              CMPI.B  #4,D1
000024D8  6700 0052               2203              BEQ     REG_4
000024DC  0C01 0005               2204              CMPI.B  #5,D1
000024E0  6700 0058               2205              BEQ     REG_5
000024E4  0C01 0006               2206              CMPI.B  #6,D1
000024E8  6700 005E               2207              BEQ     REG_6
000024EC  0C01 0007               2208              CMPI.B  #7,D1
000024F0  6700 0064               2209              BEQ     REG_7
000024F4                          2210  
000024F4                          2211  *---------------------------------------------------------------------------*
000024F4                          2212  * REG_0 ~ REG_7: display register 0 to 7
000024F4                          2213  *---------------------------------------------------------------------------*
000024F4  43F9 00003756           2214  REG_0       LEA     DISP_0,A1
000024FA  103C 000E               2215              MOVE.B  #14,D0
000024FE  4E4F                    2216              TRAP    #15
00002500  4E75                    2217              RTS
00002502                          2218              
00002502  43F9 00003758           2219  REG_1       LEA     DISP_1,A1
00002508  103C 000E               2220              MOVE.B  #14,D0
0000250C  4E4F                    2221              TRAP    #15
0000250E  4E75                    2222              RTS
00002510                          2223              
00002510                          2224  
00002510  43F9 0000375A           2225  REG_2       LEA     DISP_2,A1
00002516  103C 000E               2226              MOVE.B  #14,D0
0000251A  4E4F                    2227              TRAP    #15
0000251C  4E75                    2228              RTS
0000251E                          2229            
0000251E  43F9 0000375C           2230  REG_3       LEA     DISP_3,A1
00002524  103C 000E               2231              MOVE.B  #14,D0
00002528  4E4F                    2232              TRAP    #15
0000252A  4E75                    2233              RTS
0000252C                          2234              
0000252C  43F9 0000375E           2235  REG_4       LEA     DISP_4,A1
00002532  103C 000E               2236              MOVE.B  #14,D0
00002536  4E4F                    2237              TRAP    #15
00002538  4E75                    2238              RTS
0000253A                          2239              
0000253A  43F9 00003760           2240  REG_5       LEA     DISP_5,A1
00002540  103C 000E               2241              MOVE.B  #14,D0
00002544  4E4F                    2242              TRAP    #15
00002546  4E75                    2243              RTS
00002548                          2244              
00002548  43F9 00003762           2245  REG_6       LEA     DISP_6,A1
0000254E  103C 000E               2246              MOVE.B  #14,D0
00002552  4E4F                    2247              TRAP    #15
00002554  4E75                    2248              RTS
00002556                          2249              
00002556  43F9 00003764           2250  REG_7       LEA     DISP_7,A1
0000255C  103C 000E               2251              MOVE.B  #14,D0
00002560  4E4F                    2252              TRAP    #15
00002562  4E75                    2253              RTS
00002564                          2254              
00002564                          2255  *---------------------------------------------------------------------------*
00002564                          2256  * REPEAT : Ask user whether they wish to run the program again
00002564                          2257  *---------------------------------------------------------------------------*           
00002564  4246                    2258  REPEAT      CLR.W   D6                      * Reset D6 (Loop Count)
00002566  43F9 0000322F           2259              LEA     REPEATMSG,A1
0000256C  103C 000E               2260              MOVE.B  #14,D0
00002570  4E4F                    2261              TRAP    #15
00002572                          2262              
00002572  43F9 000033B9           2263              LEA     TMPINPUT,A1             * allocate space to temp store user input
00002578  103C 0002               2264              MOVE.B  #2,D0
0000257C  4E4F                    2265              TRAP    #15
0000257E                          2266  
0000257E  0C01 0001               2267              CMPI.B  #1,D1                   * check for length of user input
00002582  66E0                    2268              BNE     REPEAT                  * return to the beginning of the function if unequal
00002584                          2269              
00002584  0C11 0059               2270              CMPI.B  #$59,(A1)               * compare the input with Y    
00002588  6700 EA80               2271              BEQ     PROGLP                  * repeat the program
0000258C                          2272              
0000258C  0C11 0079               2273              CMPI.B  #$79,(A1)               * compare the input with y    
00002590  6700 EA78               2274              BEQ     PROGLP                  * repeat the program
00002594                          2275              
00002594  0C11 004E               2276              CMPI.B  #$4E,(A1)               * compare the input with N    
00002598  6700 0928               2277              BEQ     TERMINATE               * finish program
0000259C                          2278              
0000259C  0C11 006E               2279              CMPI.B  #$6E,(A1)               * compare the input with n    
000025A0  6700 0920               2280              BEQ     TERMINATE               * finish program
000025A4                          2281              
000025A4  60BE                    2282              BRA     REPEAT                  * invalid input/repeat the function
000025A6                          2283  
000025A6                          2284  *---------------------------------------------------------------------------*
000025A6                          2285  * EA DECODING INTERFACE
000025A6                          2286  * [A0] - RESERVED FOR USE
000025A6                          2287  * [D2] - RESERVED FOR USE
000025A6                          2288  * RETURNS - ERROR FLAG IF FAILED TO PUSH SRC EA INTO STACK
000025A6                          2289  *---------------------------------------------------------------------------*
000025A6                          2290  GET_EA_EA_SRC
000025A6                          2291      *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
000025A6                          2292      
000025A6                          2293      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
000025A6  2405                    2294      MOVE.L  D5,D2                           * CLEAN COPY TO D2
000025A8  E68A                    2295      LSR.L   #3,D2                           * [D2] Temporarily used D2 for shifting bits            *TODO: DYNAMIC FOR ANY LOCATION OF SOURCE
000025AA  23C2 0000377C           2296      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
000025B0  7407                    2297      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
000025B2  C5B9 0000377C           2298      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
000025B8                          2299                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
000025B8                          2300      
000025B8                          2301      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
000025B8                          2302      *DESTINATION REGISTER FORMAT STANDARD         *
000025B8                          2303      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
000025B8                          2304      *WHEN BIT = 0(VALID ADDRESS MODE)             *
000025B8                          2305      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
000025B8                          2306      *0 - Dn                                       *
000025B8                          2307      *1 - An                                       *
000025B8                          2308      *2 - (An)                                     *
000025B8                          2309      *3 - (An)+                                    *
000025B8                          2310      *4 - -(An)                                    *
000025B8                          2311      *5 - (XXX).W                                  *
000025B8                          2312      *6 - (XXX).L                                  *
000025B8                          2313      *7 - #<data>                                  *
000025B8                          2314      ***********************************************
000025B8                          2315      
000025B8                          2316      *** Check if source ...  <ea> = Dn
000025B8                          2317  CHECK0    
000025B8  41F9 0000376C           2318            LEA     TEMP_REGISTER_FORMAT,A0
000025BE  1439 0000376B           2319            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000025C4  1082                    2320            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000025C6  0239 0001 0000376C      2321            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
000025CE  0C39 0001 0000376C      2322            CMPI.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
000025D6  6700 006A               2323            BEQ     CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
000025DA  0CB9 00000000 0000377C  2324            CMPI.L     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn) - COMPARE MODES TO SEE IF IT IS THIS MODE
000025E4  6600 005C               2325            BNE     CHECK1
000025E8                          2326            
000025E8                          2327            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000025E8  163C 0020               2328            MOVE.B    #' ',D3
000025EC  6100 0856               2329            BSR       PUSH_STACK
000025F0  163C 0044               2330            MOVE.B    #'D',D3
000025F4  6100 084E               2331            BSR       PUSH_STACK
000025F8                          2332  
000025F8                          2333            *FIND REGISTER NUMBER END LOCATION*  
000025F8  13F9 0000376E 00003774  2334            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002602  0239 000F 00003774      2335            AND.B   #$0F,VAR_BYTE_END
0000260A                          2336            
0000260A                          2337            *GET INDEX OF THE END OF SRC REGISTER NUMBER
0000260A  23C5 00003778           2338            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002610  1439 00003774           2339            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002616                          2340            
00002616                          2341            *INTITIALIZE FOR BIT SHIFTING
00002616  41F9 00003778           2342            LEA     VAR_TEMP_CLEANCOPY,A0
0000261C  2639 00003778           2343            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002622                          2344  LOOP_SHIFTING
00002622  0C02 0000               2345            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002626  6700 0008               2346            BEQ     MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
0000262A  E24B                    2347            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
0000262C  5302                    2348            SUB.B   #1,D2                     *DECREMENT COUNTER
0000262E  60F2                    2349            BRA     LOOP_SHIFTING             *CONTINUE SHIFTING
00002630                          2350  MASKING_NEXT
00002630  C6BC 00000007           2351            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002636  0603 0030               2352            ADD.B   #$30,D3                   *CONVERT TO CHAR
0000263A  6100 0808               2353            BSR     PUSH_STACK                *PUSH TO STACK
0000263E                          2354            
0000263E  6000 0394               2355            BRA     GET_SRC_SUCCESS           *RETURN          
00002642                          2356            
00002642                          2357            
00002642                          2358            *** Check if source ...  <ea> = An
00002642  41F9 0000376C           2359  CHECK1    LEA     TEMP_REGISTER_FORMAT,A0
00002648  1439 0000376B           2360            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000264E  1082                    2361            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002650  0239 0002 0000376C      2362            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
00002658  0C39 0002 0000376C      2363            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
00002660  6700 006A               2364            BEQ     CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00002664  0CB9 00000001 0000377C  2365            CMPI.L  #1,VAR_LONG_ADDRESS_MODE_CHECK                      * An - COMPARE MODES TO SEE IF IT IS THIS MODE
0000266E  6600 005C               2366            BNE     CHECK2
00002672                          2367            
00002672                          2368            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002672  163C 0020               2369            MOVE.B    #' ',D3
00002676  6100 07CC               2370            BSR       PUSH_STACK
0000267A  163C 0041               2371            MOVE.B    #'A',D3
0000267E  6100 07C4               2372            BSR       PUSH_STACK
00002682                          2373  
00002682                          2374            
00002682                          2375            *FIND REGISTER NUMBER END LOCATION*  
00002682  13F9 0000376E 00003774  2376            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
0000268C  0239 000F 00003774      2377            AND.B   #$0F,VAR_BYTE_END
00002694                          2378            
00002694                          2379            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002694  23C5 00003778           2380            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
0000269A  1439 00003774           2381            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
000026A0                          2382            
000026A0                          2383            *INTITIALIZE FOR BIT SHIFTING
000026A0  41F9 00003778           2384            LEA     VAR_TEMP_CLEANCOPY,A0
000026A6  2639 00003778           2385            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000026AC                          2386  LOOP_SHIFTING1
000026AC  0C02 0000               2387            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000026B0  6700 0008               2388            BEQ     MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
000026B4  E24B                    2389            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000026B6  5302                    2390            SUB.B   #1,D2                     *DECREMENT COUNTER
000026B8  60F2                    2391            BRA     LOOP_SHIFTING1             *CONTINUE SHIFTING
000026BA                          2392  MASKING_NEXT1
000026BA  C6BC 00000007           2393            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000026C0  0603 0030               2394            ADD.B   #$30,D3                   *CONVERT TO CHAR
000026C4  6100 077E               2395            BSR     PUSH_STACK                *PUSH TO STACK
000026C8                          2396            
000026C8  6000 030A               2397            BRA     GET_SRC_SUCCESS                   *RETURN 
000026CC                          2398            
000026CC                          2399            
000026CC                          2400            
000026CC                          2401            
000026CC                          2402            *** Check if source ...  <ea> = (An)       
000026CC  41F9 0000376C           2403  CHECK2    LEA     TEMP_REGISTER_FORMAT,A0
000026D2  1439 0000376B           2404            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000026D8  1082                    2405            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000026DA  0239 0004 0000376C      2406            ANDI.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
000026E2  0C39 0004 0000376C      2407            CMPI.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
000026EA  6700 007A               2408            BEQ     CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
000026EE  0CB9 00000002 0000377C  2409            CMPI.L   #2,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)  COMPARE MODES TO SEE IF IT IS THIS MODE                                                                *change: checkx++*
000026F8  6600 006C               2410            BNE     CHECK3
000026FC                          2411            
000026FC                          2412            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
000026FC  163C 0020               2413            MOVE.B    #' ',D3
00002700  6100 0742               2414            BSR       PUSH_STACK
00002704  163C 0028               2415            MOVE.B    #'(',D3
00002708  6100 073A               2416            BSR       PUSH_STACK
0000270C  163C 0041               2417            MOVE.B    #'A',D3
00002710  6100 0732               2418            BSR       PUSH_STACK
00002714                          2419  
00002714                          2420            
00002714                          2421            *FIND REGISTER NUMBER END LOCATION*  
00002714  13F9 0000376E 00003774  2422            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
0000271E  0239 000F 00003774      2423            AND.B   #$0F,VAR_BYTE_END
00002726                          2424            
00002726                          2425            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002726  23C5 00003778           2426            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
0000272C  1439 00003774           2427            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002732                          2428            
00002732                          2429            *INTITIALIZE FOR BIT SHIFTING
00002732  41F9 00003778           2430            LEA     VAR_TEMP_CLEANCOPY,A0
00002738  2639 00003778           2431            MOVE.L  VAR_TEMP_CLEANCOPY,D3
0000273E                          2432  LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
0000273E  0C02 0000               2433            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002742  6700 0008               2434            BEQ     MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002746  E24B                    2435            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002748  5302                    2436            SUB.B   #1,D2                     *DECREMENT COUNTER
0000274A  60F2                    2437            BRA     LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
0000274C                          2438  MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
0000274C  0283 00000007           2439            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002752  0603 0030               2440            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002756  6100 06EC               2441            BSR     PUSH_STACK                *PUSH TO STACK
0000275A                          2442            
0000275A  163C 0029               2443            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
0000275E  6100 06E4               2444            BSR       PUSH_STACK
00002762                          2445            
00002762  6000 0270               2446            BRA     GET_SRC_SUCCESS                   *RETURN 
00002766                          2447  
00002766                          2448            
00002766                          2449            
00002766                          2450                      
00002766                          2451  *** Check if source ...  <ea> = (An)+       
00002766  41F9 0000376C           2452  CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
0000276C  1439 0000376B           2453            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002772  1082                    2454            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002774  0239 0008 0000376C      2455            ANDI.B  #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
0000277C  0C39 0008 0000376C      2456            CMPI.B  #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
00002784  6700 0082               2457            BEQ     CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002788  0CB9 00000003 0000377C  2458            CMPI.L  #3,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)+ - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00002792  6600 0074               2459            BNE     CHECK4
00002796                          2460            
00002796                          2461            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002796  163C 0020               2462            MOVE.B    #' ',D3
0000279A  6100 06A8               2463            BSR       PUSH_STACK
0000279E  163C 0028               2464            MOVE.B    #'(',D3
000027A2  6100 06A0               2465            BSR       PUSH_STACK
000027A6  163C 0041               2466            MOVE.B    #'A',D3
000027AA  6100 0698               2467            BSR       PUSH_STACK
000027AE                          2468  
000027AE                          2469            
000027AE                          2470            *FIND REGISTER NUMBER END LOCATION*  
000027AE  13F9 0000376E 00003774  2471            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
000027B8  0239 000F 00003774      2472            ANDI.B   #$0F,VAR_BYTE_END
000027C0                          2473            
000027C0                          2474            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000027C0  23C5 00003778           2475            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000027C6  1439 00003774           2476            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000027CC                          2477            
000027CC                          2478            *INTITIALIZE FOR BIT SHIFTING
000027CC  41F9 00003778           2479            LEA     VAR_TEMP_CLEANCOPY,A0
000027D2  2639 00003778           2480            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000027D8                          2481            
000027D8                          2482  LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
000027D8  0C02 0000               2483            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000027DC  6700 0008               2484            BEQ     MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
000027E0  E24B                    2485            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000027E2  5302                    2486            SUBI.B   #1,D2                     *DECREMENT COUNTER
000027E4  60F2                    2487            BRA     LOOP_SHIFTING3            *CONTINUE SHIFTING 
000027E6                          2488                                               *change: NAME OF LABEL*
000027E6                          2489  MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
000027E6  0283 00000007           2490            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000027EC  0603 0030               2491            ADDI.B   #$30,D3                   *CONVERT TO CHAR
000027F0  6100 0652               2492            BSR     PUSH_STACK                *PUSH TO STACK
000027F4                          2493            
000027F4  163C 0029               2494            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
000027F8  6100 064A               2495            BSR       PUSH_STACK
000027FC  163C 002B               2496            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002800  6100 0642               2497            BSR       PUSH_STACK
00002804                          2498            
00002804  6000 01CE               2499            BRA       GET_SRC_SUCCESS                   *RETURN 
00002808                          2500  
00002808                          2501            
00002808                          2502            
00002808                          2503                      
00002808                          2504            *** Check if source ...  <ea> = -(An)       
00002808  41F9 0000376C           2505  CHECK4    LEA     TEMP_REGISTER_FORMAT,A0
0000280E  1439 0000376B           2506            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002814  1082                    2507            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002816  0239 0010 0000376C      2508            ANDI.B  #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
0000281E  0C39 0010 0000376C      2509            CMPI.B  #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002826  6700 0082               2510            BEQ     CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
0000282A  0CB9 00000004 0000377C  2511            CMPI.L  #4,VAR_LONG_ADDRESS_MODE_CHECK                      * -(An) - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00002834  6600 0074               2512            BNE     CHECK7
00002838                          2513            
00002838                          2514            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002838  163C 0020               2515            MOVE.B    #' ',D3
0000283C  6100 0606               2516            BSR       PUSH_STACK
00002840  163C 002D               2517            MOVE.B    #'-',D3
00002844  6100 05FE               2518            BSR       PUSH_STACK
00002848  163C 0028               2519            MOVE.B    #'(',D3
0000284C  6100 05F6               2520            BSR       PUSH_STACK
00002850  163C 0041               2521            MOVE.B    #'A',D3
00002854  6100 05EE               2522            BSR       PUSH_STACK
00002858                          2523  
00002858                          2524            
00002858                          2525            *FIND REGISTER NUMBER END LOCATION*  
00002858  13F9 0000376E 00003774  2526            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002862  0239 000F 00003774      2527            AND.B   #$0F,VAR_BYTE_END
0000286A                          2528            
0000286A                          2529            *GET INDEX OF THE END OF SRC REGISTER NUMBER
0000286A  23C5 00003778           2530            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002870  1439 00003774           2531            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002876                          2532            
00002876                          2533            *INTITIALIZE FOR BIT SHIFTING
00002876  41F9 00003778           2534            LEA     VAR_TEMP_CLEANCOPY,A0
0000287C  2639 00003778           2535            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002882                          2536            
00002882                          2537  LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
00002882  0C02 0000               2538            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002886  6700 0008               2539            BEQ     MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
0000288A  E24B                    2540            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
0000288C  5302                    2541            SUBI.B   #1,D2                     *DECREMENT COUNTER
0000288E  60F2                    2542            BRA     LOOP_SHIFTING4            *CONTINUE SHIFTING 
00002890                          2543                                               *change: NAME OF LABEL*
00002890                          2544  MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
00002890  0283 00000007           2545            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002896  0603 0030               2546            ADDI.B   #$30,D3                   *CONVERT TO CHAR
0000289A  6100 05A8               2547            BSR     PUSH_STACK                *PUSH TO STACK
0000289E                          2548            
0000289E  163C 0029               2549            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
000028A2  6100 05A0               2550            BSR       PUSH_STACK
000028A6                          2551            
000028A6  6000 012C               2552            BRA     GET_SRC_SUCCESS                   *RETURN
000028AA                          2553            
000028AA                          2554                      
000028AA                          2555            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
000028AA  0CB9 00000007 0000377C  2556  CHECK7    CMPI.L  #7,VAR_LONG_ADDRESS_MODE_CHECK                      *IF (MODE != 111)
000028B4  6600 011A               2557            BNE     GET_SRC_FAILED                                      *THAN BRANCH TO UNCESSFULL SRC MODE READ
000028B8                          2558                   
000028B8                          2559            *NEXT: (MODE == 111) 
000028B8                          2560            *NOW: CHECK FOR SRC REGISTER 
000028B8                          2561                  *(000 = (xxx).W)
000028B8                          2562                  *(001 = (xxx).L)
000028B8                          2563                  *(010 = #<data>)
000028B8                          2564                  
000028B8                          2565            *FIND REGISTER NUMBER END LOCATION*  
000028B8  13F9 0000376E 00003774  2566            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
000028C2  0239 000F 00003774      2567            AND.B   #$0F,VAR_BYTE_END
000028CA                          2568            
000028CA                          2569            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000028CA  23C5 00003778           2570            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000028D0  1439 00003774           2571            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000028D6                          2572            
000028D6                          2573            *INTITIALIZE FOR BIT SHIFTING
000028D6  41F9 00003778           2574            LEA     VAR_TEMP_CLEANCOPY,A0
000028DC  2C39 00003778           2575            MOVE.L  VAR_TEMP_CLEANCOPY,D6
000028E2                          2576  SRC_LOOP_SHIFTING
000028E2  0C02 0000               2577            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000028E6  6700 0008               2578            BEQ     SRC_MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
000028EA  E24E                    2579            LSR     #1,D6                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000028EC  5302                    2580            SUB.B   #1,D2                     *DECREMENT COUNTER
000028EE  60F2                    2581            BRA     SRC_LOOP_SHIFTING             *CONTINUE SHIFTING
000028F0                          2582  SRC_MASKING_NEXT
000028F0  CCBC 00000007           2583            AND.L   #7,D6                     *MASK, ONLY NEED 0-2 BIT INDEXES 
000028F6                          2584           *D3 - REGISTER NUMBER NEEDED TO CHECK WHICH W/L/#<DATA>*
000028F6                          2585           
000028F6                          2586  CHECK_WORD  
000028F6  41F9 0000376C           2587            LEA     TEMP_REGISTER_FORMAT,A0
000028FC  1439 0000376B           2588            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002902  1082                    2589            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002904  0239 0020 0000376C      2590            ANDI.B  #$20,TEMP_REGISTER_FORMAT                           * MASKS 0010 0000                                                     *change <SRC>*
0000290C  0C39 0020 0000376C      2591            CMPI.B  #$20,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0010 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002914  6700 0026               2592            BEQ     CHECK_LONG                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00002918  0C06 0000               2593            CMPI.B  #0,D6                          
0000291C  6600 001E               2594            BNE     CHECK_LONG 
00002920                          2595            
00002920                          2596            *IT IS A WORD AT THIS POINT*
00002920                          2597            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002920  163C 0020               2598            MOVE.B    #' ',D3
00002924  6100 051E               2599            BSR       PUSH_STACK
00002928  163C 0024               2600            MOVE.B    #'$',D3
0000292C  6100 0516               2601            BSR       PUSH_STACK
00002930  321D                    2602            MOVE.W    (A5)+,D1
00002932  7404                    2603            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00002934  6100 E8C6               2604            BSR       HEX2ASCII2STACK
00002938  6000 009A               2605            BRA     GET_SRC_SUCCESS
0000293C                          2606  
0000293C                          2607  CHECK_LONG
0000293C  41F9 0000376C           2608            LEA     TEMP_REGISTER_FORMAT,A0
00002942  1439 0000376B           2609            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002948  1082                    2610            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000294A  0239 0040 0000376C      2611            ANDI.B  #$40,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00002952  0C39 0040 0000376C      2612            CMPI.B  #$40,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
0000295A  6700 002E               2613            BEQ     CHECK_IMMEDIATE                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
0000295E  0C06 0001               2614            CMPI.B  #1,D6                          
00002962  6600 0026               2615            BNE     CHECK_IMMEDIATE  
00002966                          2616  
00002966                          2617            *IT IS A WORD AT THIS POINT*
00002966                          2618            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002966  163C 0020               2619            MOVE.B    #' ',D3
0000296A  6100 04D8               2620            BSR       PUSH_STACK
0000296E  163C 0024               2621            MOVE.B    #'$',D3
00002972  6100 04D0               2622            BSR       PUSH_STACK
00002976  321D                    2623            MOVE.W    (A5)+,D1
00002978  7404                    2624            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
0000297A  6100 E880               2625            BSR       HEX2ASCII2STACK
0000297E  321D                    2626            MOVE.W    (A5)+,D1
00002980  7404                    2627            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00002982  6100 E878               2628            BSR       HEX2ASCII2STACK
00002986  6000 004C               2629            BRA     GET_SRC_SUCCESS
0000298A                          2630            
0000298A                          2631  CHECK_IMMEDIATE
0000298A  41F9 0000376C           2632            LEA     TEMP_REGISTER_FORMAT,A0
00002990  1439 0000376B           2633            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002996  1082                    2634            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002998  0239 0080 0000376C      2635            ANDI.B  #$80,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
000029A0  0C39 0080 0000376C      2636            CMPI.B  #$80,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
000029A8  6700 0026               2637            BEQ     GET_SRC_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
000029AC  0C06 0004               2638            CMPI.B  #4,D6                          
000029B0  6600 001E               2639            BNE     GET_SRC_FAILED 
000029B4                          2640  
000029B4                          2641            *IT IS A WORD AT THIS POINT*
000029B4                          2642            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000029B4  163C 0020               2643            MOVE.B    #' ',D3
000029B8  6100 048A               2644            BSR       PUSH_STACK
000029BC  163C 0023               2645            MOVE.B    #'#',D3
000029C0  6100 0482               2646            BSR       PUSH_STACK
000029C4  321D                    2647            MOVE.W    (A5)+,D1
000029C6  7404                    2648            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
000029C8  6100 E832               2649            BSR       HEX2ASCII2STACK
000029CC  6000 0006               2650            BRA     GET_SRC_SUCCESS
000029D0                          2651            
000029D0                          2652  GET_SRC_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
000029D0  7801                    2653            MOVE.L #1,D4
000029D2  4E75                    2654            RTS
000029D4                          2655  GET_SRC_SUCCESS 
000029D4  4E75                    2656            RTS
000029D6                          2657                                 
000029D6                          2658      
000029D6                          2659  
000029D6                          2660  
000029D6                          2661  
000029D6                          2662  
000029D6                          2663  
000029D6                          2664  
000029D6                          2665  GET_EA_EA_DEST
000029D6                          2666  *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
000029D6                          2667      
000029D6                          2668      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
000029D6  2405                    2669      MOVE.L  D5,D2                           * CLEAN COPY TO D2
000029D8  EC8A                    2670      LSR.L   #6,D2                           * [D2] Temporarily used D2 for shifting bits                *TODO: DYNAMIC MODE LOCATION
000029DA  23C2 0000377C           2671      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
000029E0  7407                    2672      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
000029E2  C5B9 0000377C           2673      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
000029E8                          2674                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
000029E8                          2675      
000029E8                          2676      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
000029E8                          2677      *DESTINATION REGISTER FORMAT STANDARD         *
000029E8                          2678      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
000029E8                          2679      *WHEN BIT = 0(VALID ADDRESS MODE)             *
000029E8                          2680      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
000029E8                          2681      *0 - Dn                                       *
000029E8                          2682      *1 - An                                       *
000029E8                          2683      *2 - (An)                                     *
000029E8                          2684      *3 - (An)+                                    *
000029E8                          2685      *4 - -(An)                                    *
000029E8                          2686      *5 - (XXX).W                                  *
000029E8                          2687      *6 - (XXX).L                                  *
000029E8                          2688      *7 - #<data>                                  *
000029E8                          2689      ***********************************************
000029E8                          2690      
000029E8                          2691      *** Check if source ...  <ea> = Dn
000029E8                          2692  DEST_CHECK0    
000029E8  41F9 0000376C           2693            LEA     TEMP_REGISTER_FORMAT,A0
000029EE  1439 0000376A           2694            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000029F4  1082                    2695            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000029F6  0239 0001 0000376C      2696            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
000029FE  0C39 0001 0000376C      2697            CMPI.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
00002A06  6700 006A               2698            BEQ     DEST_CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00002A0A  0CB9 00000000 0000377C  2699            CMPI.L     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn) - COMPARE MODES TO SEE IF IT IS THIS MODE
00002A14  6600 005C               2700            BNE     DEST_CHECK1
00002A18                          2701            
00002A18                          2702            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002A18  163C 0020               2703            MOVE.B    #' ',D3
00002A1C  6100 0426               2704            BSR       PUSH_STACK
00002A20  163C 0044               2705            MOVE.B    #'D',D3
00002A24  6100 041E               2706            BSR       PUSH_STACK
00002A28                          2707  
00002A28                          2708            *FIND REGISTER NUMBER END LOCATION*  
00002A28  13F9 0000376D 00003774  2709            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002A32  0239 000F 00003774      2710            AND.B   #$0F,VAR_BYTE_END
00002A3A                          2711            
00002A3A                          2712            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002A3A  23C5 00003778           2713            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002A40  1439 00003774           2714            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002A46                          2715            
00002A46                          2716            *INTITIALIZE FOR BIT SHIFTING
00002A46  41F9 00003778           2717            LEA     VAR_TEMP_CLEANCOPY,A0
00002A4C  2639 00003778           2718            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002A52                          2719  DEST_LOOP_SHIFTING
00002A52  0C02 0000               2720            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002A56  6700 0008               2721            BEQ     DEST_MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00002A5A  E24B                    2722            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002A5C  5302                    2723            SUB.B   #1,D2                     *DECREMENT COUNTER
00002A5E  60F2                    2724            BRA     DEST_LOOP_SHIFTING             *CONTINUE SHIFTING
00002A60                          2725  DEST_MASKING_NEXT
00002A60  C6BC 00000007           2726            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002A66  0603 0030               2727            ADD.B   #$30,D3                   *CONVERT TO CHAR
00002A6A  6100 03D8               2728            BSR     PUSH_STACK                *PUSH TO STACK
00002A6E                          2729            
00002A6E  6000 0394               2730            BRA     GET_DST_SUCCESS           *RETURN          
00002A72                          2731            
00002A72                          2732            
00002A72                          2733            *** Check if source ...  <ea> = An
00002A72                          2734  DEST_CHECK1    
00002A72  41F9 0000376C           2735            LEA     TEMP_REGISTER_FORMAT,A0
00002A78  1439 0000376A           2736            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002A7E  1082                    2737            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002A80  0239 0002 0000376C      2738            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
00002A88  0C39 0002 0000376C      2739            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
00002A90  6700 006A               2740            BEQ     DEST_CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00002A94  0CB9 00000001 0000377C  2741            CMPI.L  #1,VAR_LONG_ADDRESS_MODE_CHECK                      * An - COMPARE MODES TO SEE IF IT IS THIS MODE
00002A9E  6600 005C               2742            BNE     DEST_CHECK2
00002AA2                          2743            
00002AA2                          2744            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002AA2  163C 0020               2745            MOVE.B    #' ',D3
00002AA6  6100 039C               2746            BSR       PUSH_STACK
00002AAA  163C 0041               2747            MOVE.B    #'A',D3
00002AAE  6100 0394               2748            BSR       PUSH_STACK
00002AB2                          2749  
00002AB2                          2750            
00002AB2                          2751            *FIND REGISTER NUMBER END LOCATION*  
00002AB2  13F9 0000376D 00003774  2752            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002ABC  0239 000F 00003774      2753            AND.B   #$0F,VAR_BYTE_END
00002AC4                          2754            
00002AC4                          2755            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002AC4  23C5 00003778           2756            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002ACA  1439 00003774           2757            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
00002AD0                          2758            
00002AD0                          2759            *INTITIALIZE FOR BIT SHIFTING
00002AD0  41F9 00003778           2760            LEA     VAR_TEMP_CLEANCOPY,A0
00002AD6  2639 00003778           2761            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002ADC                          2762  DEST_LOOP_SHIFTING1
00002ADC  0C02 0000               2763            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002AE0  6700 0008               2764            BEQ     DEST_MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00002AE4  E24B                    2765            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002AE6  5302                    2766            SUB.B   #1,D2                     *DECREMENT COUNTER
00002AE8  60F2                    2767            BRA     DEST_LOOP_SHIFTING1             *CONTINUE SHIFTING
00002AEA                          2768  DEST_MASKING_NEXT1
00002AEA  C6BC 00000007           2769            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002AF0  0603 0030               2770            ADD.B   #$30,D3                   *CONVERT TO CHAR
00002AF4  6100 034E               2771            BSR     PUSH_STACK                *PUSH TO STACK
00002AF8                          2772            
00002AF8  6000 030A               2773            BRA     GET_DST_SUCCESS                   *RETURN 
00002AFC                          2774            
00002AFC                          2775            
00002AFC                          2776            
00002AFC                          2777            
00002AFC                          2778            *** Check if source ...  <ea> = (An)       
00002AFC                          2779  DEST_CHECK2    
00002AFC  41F9 0000376C           2780            LEA     TEMP_REGISTER_FORMAT,A0
00002B02  1439 0000376A           2781            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002B08  1082                    2782            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002B0A  0239 0004 0000376C      2783            ANDI.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
00002B12  0C39 0004 0000376C      2784            CMPI.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
00002B1A  6700 007A               2785            BEQ     DEST_CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002B1E  0CB9 00000002 0000377C  2786            CMPI.L   #2,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)  COMPARE MODES TO SEE IF IT IS THIS MODE                                                                *change: checkx++*
00002B28  6600 006C               2787            BNE     DEST_CHECK3
00002B2C                          2788            
00002B2C                          2789            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002B2C  163C 0020               2790            MOVE.B    #' ',D3
00002B30  6100 0312               2791            BSR       PUSH_STACK
00002B34  163C 0028               2792            MOVE.B    #'(',D3
00002B38  6100 030A               2793            BSR       PUSH_STACK
00002B3C  163C 0041               2794            MOVE.B    #'A',D3
00002B40  6100 0302               2795            BSR       PUSH_STACK
00002B44                          2796  
00002B44                          2797            
00002B44                          2798            *FIND REGISTER NUMBER END LOCATION*  
00002B44  13F9 0000376D 00003774  2799            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002B4E  0239 000F 00003774      2800            AND.B   #$0F,VAR_BYTE_END
00002B56                          2801            
00002B56                          2802            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002B56  23C5 00003778           2803            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002B5C  1439 00003774           2804            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002B62                          2805            
00002B62                          2806            *INTITIALIZE FOR BIT SHIFTING
00002B62  41F9 00003778           2807            LEA     VAR_TEMP_CLEANCOPY,A0
00002B68  2639 00003778           2808            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002B6E                          2809  DEST_LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
00002B6E  0C02 0000               2810            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002B72  6700 0008               2811            BEQ     DEST_MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002B76  E24B                    2812            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002B78  5302                    2813            SUB.B   #1,D2                     *DECREMENT COUNTER
00002B7A  60F2                    2814            BRA     DEST_LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
00002B7C                          2815  DEST_MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
00002B7C  0283 00000007           2816            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002B82  0603 0030               2817            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002B86  6100 02BC               2818            BSR     PUSH_STACK                *PUSH TO STACK
00002B8A                          2819            
00002B8A  163C 0029               2820            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002B8E  6100 02B4               2821            BSR       PUSH_STACK
00002B92                          2822            
00002B92  6000 0270               2823            BRA     GET_DST_SUCCESS                   *RETURN 
00002B96                          2824  
00002B96                          2825            
00002B96                          2826            
00002B96                          2827                      
00002B96                          2828  *** Check if source ...  <ea> = (An)+       
00002B96  41F9 0000376C           2829  DEST_CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
00002B9C  1439 0000376A           2830            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002BA2  1082                    2831            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002BA4  0239 0008 0000376C      2832            ANDI.B  #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
00002BAC  0C39 0008 0000376C      2833            CMPI.B  #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
00002BB4  6700 0082               2834            BEQ     DEST_CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002BB8  0CB9 00000003 0000377C  2835            CMPI.L  #3,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)+ - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00002BC2  6600 0074               2836            BNE     DEST_CHECK4
00002BC6                          2837            
00002BC6                          2838            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002BC6  163C 0020               2839            MOVE.B    #' ',D3
00002BCA  6100 0278               2840            BSR       PUSH_STACK
00002BCE  163C 0028               2841            MOVE.B    #'(',D3
00002BD2  6100 0270               2842            BSR       PUSH_STACK
00002BD6  163C 0041               2843            MOVE.B    #'A',D3
00002BDA  6100 0268               2844            BSR       PUSH_STACK
00002BDE                          2845  
00002BDE                          2846            
00002BDE                          2847            *FIND REGISTER NUMBER END LOCATION*  
00002BDE  13F9 0000376D 00003774  2848            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002BE8  0239 000F 00003774      2849            ANDI.B   #$0F,VAR_BYTE_END
00002BF0                          2850            
00002BF0                          2851            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002BF0  23C5 00003778           2852            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002BF6  1439 00003774           2853            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002BFC                          2854            
00002BFC                          2855            *INTITIALIZE FOR BIT SHIFTING
00002BFC  41F9 00003778           2856            LEA     VAR_TEMP_CLEANCOPY,A0
00002C02  2639 00003778           2857            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002C08                          2858            
00002C08                          2859  DEST_LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
00002C08  0C02 0000               2860            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002C0C  6700 0008               2861            BEQ     DEST_MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002C10  E24B                    2862            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002C12  5302                    2863            SUBI.B   #1,D2                     *DECREMENT COUNTER
00002C14  60F2                    2864            BRA     DEST_LOOP_SHIFTING3            *CONTINUE SHIFTING 
00002C16                          2865                                               *change: NAME OF LABEL*
00002C16                          2866  DEST_MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
00002C16  0283 00000007           2867            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002C1C  0603 0030               2868            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002C20  6100 0222               2869            BSR     PUSH_STACK                *PUSH TO STACK
00002C24                          2870            
00002C24  163C 0029               2871            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002C28  6100 021A               2872            BSR       PUSH_STACK
00002C2C  163C 002B               2873            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002C30  6100 0212               2874            BSR       PUSH_STACK
00002C34                          2875            
00002C34  6000 01CE               2876            BRA       GET_DST_SUCCESS                   *RETURN 
00002C38                          2877  
00002C38                          2878            
00002C38                          2879            
00002C38                          2880                      
00002C38                          2881            *** Check if source ...  <ea> = -(An)       
00002C38                          2882  DEST_CHECK4    
00002C38  41F9 0000376C           2883            LEA     TEMP_REGISTER_FORMAT,A0
00002C3E  1439 0000376A           2884            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002C44  1082                    2885            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002C46  0239 0010 0000376C      2886            ANDI.B  #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
00002C4E  0C39 0010 0000376C      2887            CMPI.B  #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002C56  6700 0082               2888            BEQ     DEST_CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002C5A  0CB9 00000004 0000377C  2889            CMPI.L  #4,VAR_LONG_ADDRESS_MODE_CHECK                      * -(An) - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00002C64  6600 0074               2890            BNE     DEST_CHECK7
00002C68                          2891            
00002C68                          2892            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002C68  163C 0020               2893            MOVE.B    #' ',D3
00002C6C  6100 01D6               2894            BSR       PUSH_STACK
00002C70  163C 002D               2895            MOVE.B    #'-',D3
00002C74  6100 01CE               2896            BSR       PUSH_STACK
00002C78  163C 0028               2897            MOVE.B    #'(',D3
00002C7C  6100 01C6               2898            BSR       PUSH_STACK
00002C80  163C 0041               2899            MOVE.B    #'A',D3
00002C84  6100 01BE               2900            BSR       PUSH_STACK
00002C88                          2901  
00002C88                          2902            
00002C88                          2903            *FIND REGISTER NUMBER END LOCATION*  
00002C88  13F9 0000376D 00003774  2904            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002C92  0239 000F 00003774      2905            AND.B   #$0F,VAR_BYTE_END
00002C9A                          2906            
00002C9A                          2907            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002C9A  23C5 00003778           2908            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002CA0  1439 00003774           2909            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002CA6                          2910            
00002CA6                          2911            *INTITIALIZE FOR BIT SHIFTING
00002CA6  41F9 00003778           2912            LEA     VAR_TEMP_CLEANCOPY,A0
00002CAC  2639 00003778           2913            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002CB2                          2914            
00002CB2                          2915  DEST_LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
00002CB2  0C02 0000               2916            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002CB6  6700 0008               2917            BEQ     DEST_MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002CBA  E24B                    2918            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002CBC  5302                    2919            SUBI.B   #1,D2                     *DECREMENT COUNTER
00002CBE  60F2                    2920            BRA     DEST_LOOP_SHIFTING4            *CONTINUE SHIFTING 
00002CC0                          2921                                               *change: NAME OF LABEL*
00002CC0                          2922  DEST_MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
00002CC0  0283 00000007           2923            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002CC6  0603 0030               2924            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002CCA  6100 0178               2925            BSR     PUSH_STACK                *PUSH TO STACK
00002CCE                          2926            
00002CCE  163C 0029               2927            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002CD2  6100 0170               2928            BSR       PUSH_STACK
00002CD6                          2929            
00002CD6  6000 012C               2930            BRA     GET_DST_SUCCESS                   *RETURN
00002CDA                          2931            
00002CDA                          2932                      
00002CDA                          2933            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
00002CDA                          2934  DEST_CHECK7    
00002CDA  0CB9 00000007 0000377C  2935            CMPI.L  #7,VAR_LONG_ADDRESS_MODE_CHECK                      *IF (MODE != 111)
00002CE4  6600 011A               2936            BNE     GET_DST_FAILED                                      *THAN BRANCH TO UNCESSFULL SRC MODE READ
00002CE8                          2937                   
00002CE8                          2938            *NEXT: (MODE == 111) 
00002CE8                          2939            *NOW: CHECK FOR SRC REGISTER 
00002CE8                          2940                  *(000 = (xxx).W)
00002CE8                          2941                  *(001 = (xxx).L)
00002CE8                          2942                  *(010 = #<data>)
00002CE8                          2943                  
00002CE8                          2944            *FIND REGISTER NUMBER END LOCATION*  
00002CE8  13F9 0000376D 00003774  2945            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002CF2  0239 000F 00003774      2946            AND.B   #$0F,VAR_BYTE_END
00002CFA                          2947            
00002CFA                          2948            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002CFA  23C5 00003778           2949            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002D00  1439 00003774           2950            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002D06                          2951            
00002D06                          2952            *INTITIALIZE FOR BIT SHIFTING
00002D06  41F9 00003778           2953            LEA     VAR_TEMP_CLEANCOPY,A0
00002D0C  2C39 00003778           2954            MOVE.L  VAR_TEMP_CLEANCOPY,D6
00002D12                          2955  DEST_LOOP_SHIFTING7
00002D12  0C02 0000               2956            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002D16  6700 0008               2957            BEQ     DEST_MASKING_NEXT7              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00002D1A  E24E                    2958            LSR     #1,D6                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002D1C  5302                    2959            SUB.B   #1,D2                     *DECREMENT COUNTER
00002D1E  60F2                    2960            BRA     DEST_LOOP_SHIFTING7             *CONTINUE SHIFTING
00002D20                          2961  DEST_MASKING_NEXT7
00002D20  CCBC 00000007           2962            AND.L   #7,D6                     *MASK, ONLY NEED 0-2 BIT INDEXES 
00002D26                          2963           *D3 - REGISTER NUMBER NEEDED TO CHECK WHICH W/L/#<DATA>*
00002D26                          2964            
00002D26                          2965  DEST_CHECK_WORD  
00002D26  41F9 0000376C           2966            LEA     TEMP_REGISTER_FORMAT,A0
00002D2C  1439 0000376A           2967            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002D32  1082                    2968            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002D34  0239 0020 0000376C      2969            ANDI.B  #$20,TEMP_REGISTER_FORMAT                           * MASKS 0010 0000                                                     *change <SRC>*
00002D3C  0C39 0020 0000376C      2970            CMPI.B  #$20,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0010 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002D44  6700 0026               2971            BEQ     DEST_CHECK_LONG                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00002D48  0C06 0000               2972            CMPI.B  #0,D6                                                   *COMPARE REGISTER NUMBER WITH (000 == 000) FOR WORD
00002D4C  6600 001E               2973            BNE     DEST_CHECK_LONG                                      * THE REGISTER NUMBER DOESN'T MATCH "(XXX).W" -> SO MOVE ON       
00002D50                          2974            *IT IS A WORD AT THIS POINT*
00002D50                          2975            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002D50  163C 0020               2976            MOVE.B    #' ',D3
00002D54  6100 00EE               2977            BSR       PUSH_STACK
00002D58  163C 0024               2978            MOVE.B    #'$',D3
00002D5C  6100 00E6               2979            BSR       PUSH_STACK
00002D60  321D                    2980            MOVE.W    (A5)+,D1
00002D62  7404                    2981            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00002D64  6100 E496               2982            BSR       HEX2ASCII2STACK
00002D68  6000 009A               2983            BRA       GET_DST_SUCCESS
00002D6C                          2984  
00002D6C                          2985  DEST_CHECK_LONG
00002D6C  41F9 0000376C           2986            LEA     TEMP_REGISTER_FORMAT,A0
00002D72  1439 0000376A           2987            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002D78  1082                    2988            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002D7A  0239 0040 0000376C      2989            ANDI.B  #$40,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00002D82  0C39 0040 0000376C      2990            CMPI.B  #$40,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002D8A  6700 002E               2991            BEQ     DEST_CHECK_IMMEDIATE                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00002D8E  0C06 0001               2992            CMPI.B  #1,D6                                                   *COMPARE REGISTER NUMBER WITH (001 == 001) FOR WORD
00002D92  6600 0026               2993            BNE     DEST_CHECK_IMMEDIATE                                      * THE REGISTER NUMBER DOESN'T MATCH "(XXX).L" -> SO MOVE ON 
00002D96                          2994            *IT IS A WORD AT THIS POINT*
00002D96                          2995            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002D96  163C 0020               2996            MOVE.B    #' ',D3
00002D9A  6100 00A8               2997            BSR       PUSH_STACK
00002D9E  163C 0024               2998            MOVE.B    #'$',D3
00002DA2  6100 00A0               2999            BSR       PUSH_STACK
00002DA6  321D                    3000            MOVE.W    (A5)+,D1        * GET NEXT WORD INTO STACK
00002DA8  7404                    3001            MOVE.L    #4,D2           * SETS SIZE = 4 FOR CONVERSION TO ASCII
00002DAA  6100 E450               3002            BSR       HEX2ASCII2STACK
00002DAE  321D                    3003            MOVE.W    (A5)+,D1        * GET NEXT WORD INTO STACK
00002DB0  7404                    3004            MOVE.L    #4,D2          
00002DB2  6100 E448               3005            BSR       HEX2ASCII2STACK
00002DB6  6000 004C               3006            BRA     GET_DST_SUCCESS
00002DBA                          3007            
00002DBA                          3008  DEST_CHECK_IMMEDIATE
00002DBA  41F9 0000376C           3009            LEA     TEMP_REGISTER_FORMAT,A0
00002DC0  1439 0000376A           3010            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002DC6  1082                    3011            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002DC8  0239 0080 0000376C      3012            ANDI.B  #$80,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00002DD0  0C39 0080 0000376C      3013            CMPI.B  #$80,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002DD8  6700 0026               3014            BEQ     GET_DST_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00002DDC  0C06 0004               3015            CMPI.B  #4,D6                                               * COMPARE REGISTER NUMBER WITH (010 == 010) FOR WORD
00002DE0  6600 001E               3016            BNE     GET_DST_FAILED                                      * THE REGISTER NUMBER DOESN'T MATCH "#<DATA>" -> SO MOVE ON 
00002DE4                          3017            
00002DE4                          3018            *IT IS A WORD AT THIS POINT*
00002DE4                          3019            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002DE4  163C 0020               3020            MOVE.B    #' ',D3
00002DE8  6100 005A               3021            BSR       PUSH_STACK
00002DEC  163C 0023               3022            MOVE.B    #'#',D3
00002DF0  6100 0052               3023            BSR       PUSH_STACK
00002DF4  321D                    3024            MOVE.W    (A5)+,D1
00002DF6  7404                    3025            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00002DF8  6100 E402               3026            BSR       HEX2ASCII2STACK
00002DFC  6000 0006               3027            BRA       GET_DST_SUCCESS
00002E00                          3028            
00002E00                          3029  GET_DST_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
00002E00  7801                    3030            MOVE.L #1,D4
00002E02  4E75                    3031            RTS
00002E04                          3032  GET_DST_SUCCESS 
00002E04  4E75                    3033            RTS
00002E06                          3034  
00002E06                          3035  
00002E06                          3036  *---------------------------------------------------------------------------*
00002E06                          3037  * STACK/QUEUE INTERFACE
00002E06                          3038  *---------------------------------------------------------------------------*
00002E06                          3039  PRINT_STACK
00002E06  0C39 0000 00003766      3040            CMP.B     #0,COUNTER
00002E0E  6700 000E               3041            BEQ       PRINT_STACK_RETURN             *CHECK IF LOOP IS FINISHED
00002E12                          3042            
00002E12                          3043  PRINT_STACK_HELPER
00002E12  6100 0038               3044            BSR      POP_STACK          *PRINTS ADDRESS
00002E16  103C 0006               3045            MOVE.B   #6,D0              *Display single character in D1.B. 
00002E1A  4E4F                    3046            TRAP     #15             *ACTIVATES PRINT
00002E1C                          3047  
00002E1C  60E8                    3048            BRA       PRINT_STACK
00002E1E                          3049  PRINT_STACK_RETURN
00002E1E  4E75                    3050            RTS
00002E20                          3051            
00002E20                          3052            
00002E20                          3053  PRINT_QUEUE
00002E20  0C39 0000 00003766      3054            CMP.B     #0,COUNTER
00002E28  6700 0018               3055            BEQ       PRINT_QUEUE_RETURN             *CHECK IF LOOP IS FINISHED
00002E2C                          3056            
00002E2C                          3057  PRINT_QUEUE_HELPER
00002E2C  33F9 00003766 00003768  3058            MOVE.W   COUNTER,QUEUE_COUNTER
00002E36  6100 0022               3059            BSR      POP_FRONT          *PRINTS ADDRESS
00002E3A  103C 0006               3060            MOVE.B   #6,D0              *Display single character in D1.B. 
00002E3E  4E4F                    3061            TRAP     #15             *ACTIVATES PRINT
00002E40                          3062  
00002E40  60DE                    3063            BRA       PRINT_QUEUE
00002E42                          3064  PRINT_QUEUE_RETURN
00002E42  4E75                    3065            RTS
00002E44                          3066            
00002E44                          3067  *PUSHES.W CONTENTS OF [D3] INTO STACK          
00002E44                          3068  PUSH_STACK
00002E44  1503                    3069              MOVE.B  D3,-(A2)
00002E46  6100 0058               3070              BSR     INCREMENT
00002E4A  4E75                    3071              RTS
00002E4C                          3072  *POPS.W TOP OF STACK INTO [D1], SO ITS READY TO PRINT WITH TRAP 15
00002E4C                          3073  *         MOVE.W   (A2)+,D1           *PRINTS ADDRESS
00002E4C                          3074  *         MOVE.B   #15,D0             *PRINTS ACCORDING TO D2 BASE VALUE
00002E4C                          3075  *         MOVE.B   #16,D2             *PRINTS BASED 16 NUMBER
00002E4C                          3076  *         TRAP        #15             *ACTIVATES PRINT
00002E4C                          3077  POP_STACK
00002E4C  BECA                    3078              CMPA.W   A2,SP            *CHECKS IF THERE IS ANYTHING TO PUSH
00002E4E  6700 0008               3079              BEQ     POP_RETURN        *IF NOTHING TO PUSH THAN JUST RETURN
00002E52  121A                    3080              MOVE.B  (A2)+,D1 
00002E54  6100 0052               3081              BSR     DECREMENT
00002E58                          3082  POP_RETURN
00002E58  4E75                    3083              RTS 
00002E5A                          3084        
00002E5A                          3085  *USE [A4] AS SECOND POINTER IN SHIFTING      
00002E5A  0C39 0000 00003768      3086  POP_FRONT   CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
00002E62  6700 0030               3087              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
00002E66                          3088              
00002E66                          3089              
00002E66                          3090              *POSITION THE POINTERS A[4] RIGHT BEHIND A[2] WHICH IS RIGHT BEHIND STACK
00002E66  347C 7000               3091              MOVEA.W #STACK,A2   *START A2 AT STACK
00002E6A  0622 0000               3092              ADD.B   #0,-(A2)    *SHIFT A2 TO THE BOTTOM OF THE STACK
00002E6E  384A                    3093              MOVEA.W A2,A4     *START A4 RIGHT ABOVE A2
00002E70  0624 0000               3094              ADD.B   #0,-(A4)  *leash one more higher in stack (a4)
00002E74  1212                    3095              MOVE.B  (A2),D1     *POP CONTENTS INTO D1
00002E76                          3096  POP_SHIFT_LOOP
00002E76  0C39 0000 00003768      3097              CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
00002E7E  6700 0014               3098              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
00002E82  1494                    3099              MOVE.B  (A4),(A2)   *SHIFT CONTENT DOWN THE STACK
00002E84  0624 0000               3100              ADD.B   #0,-(A4)
00002E88  0622 0000               3101              ADD.B   #0,-(A2) *SHIFT POINTERS DOWN THE STACK
00002E8C  5339 00003768           3102              SUB.B   #1,QUEUE_COUNTER *DECREMENT INTERNAL QUEUE COUNTER
00002E92                          3103              
00002E92  60E2                    3104              BRA     POP_SHIFT_LOOP
00002E94                          3105                          
00002E94                          3106  POP_FRONT_RETURN 
00002E94                          3107              *RESET A2 BACK TO SP
00002E94  347C 7000               3108              MOVEA.W #STACK,A2    
00002E98  5339 00003766           3109              SUB.B   #1,COUNTER *DECREMENT STACK COUNTER       
00002E9E  4E75                    3110              RTS   
00002EA0                          3111  
00002EA0                          3112  INCREMENT
00002EA0  5239 00003766           3113              ADD.B   #1, COUNTER
00002EA6  4E75                    3114              RTS           
00002EA8                          3115  DECREMENT
00002EA8  5339 00003766           3116              SUB.B   #1, COUNTER
00002EAE  4E75                    3117              RTS           
00002EB0                          3118  CLEAR_STACK
00002EB0  0C39 0000 00003766      3119              CMP.B     #0,COUNTER
00002EB8  6700 0006               3120              BEQ       CLEAR_RETURN
00002EBC  618E                    3121              BSR       POP_STACK
00002EBE  60F0                    3122              BRA       CLEAR_STACK
00002EC0                          3123   
00002EC0                          3124  CLEAR_RETURN
00002EC0  4E75                    3125              RTS    
00002EC2                          3126  *---------------------------------------------------------------------------*
00002EC2                          3127  * TERMINATE
00002EC2                          3128  *---------------------------------------------------------------------------*
00002EC2                          3129  TERMINATE   
00002EC2  43F9 00003272           3130              LEA     FINMSG,A1
00002EC8  103C 000E               3131              MOVE.B  #14,D0
00002ECC  4E4F                    3132              TRAP    #15
00002ECE                          3133  
00002ECE  103C 0009               3134              MOVE.B  #9,D0
00002ED2  4E4F                    3135              TRAP    #15
00002ED4                          3136  
00002ED4                          3137  *---------------------------------------------------------------------------*
00002ED4                          3138  * Data storage                                                 
00002ED4                          3139  *---------------------------------------------------------------------------*  
00002ED4                          3140  WELCOME
00002ED4= 20 20 20 20 20 20 ...   3141              DC.B '                         ___     ___ ___        ___   ___ ___                 ',CR,LF
00002F24= 3D 3D 3D 3D 3D 20 ...   3142              DC.B '=====           \  /\  /|___|   |   |   ||\  /||___    | |   |           =====',CR,LF
00002F74= 3D 3D 3D 3D 3D 20 ...   3143              DC.B '=====            \/  \/ |___|___|___|___|| \/ ||___    | |___|           =====',CR,LF
00002FC4                          3144      
00002FC4= 20 20 20 20 20 20 ...   3145              DC.B '                        ___ ___ ___  ___      ___                             ',CR,LF
00003014= 20 20 20 20 20 20 ...   3146              DC.B '                       |     | |___)|    |   |___                             ',CR,LF 
00003064= 20 20 20 20 20 20 ...   3147              DC.B '                       |___ _|_|\___|___ |___|___                             ',CR,LF
000030B4                          3148      
000030B4= 20 20 20 20 20 20 ...   3149              DC.B '           __  ___ ___   _   ___  ___  ___        ___      ___ ___            ',CR,LF
00003104= 3D 3D 3D 3D 3D 20 ...   3150              DC.B '=====     |  \  | |___  /_\ |___ |___ |___ |\  /||___||   |___|___)      =====',CR,LF 
00003154= 3D 3D 3D 3D 3D 20 ...   3151              DC.B '=====     |__/ _|_ ___|/   \ ___| ___||___ | \/ ||___||___|___|\___      =====',CR,LF,CR,LF,CR,LF,0
000031A9                          3152  
000031A9                          3153  PROMPT_START
000031A9= 50 6C 65 61 73 65 ...   3154              DC.B    'Please enter a hexadecimal starting address.',CR,LF,0
000031D8                          3155      
000031D8                          3156  PROMPT_END
000031D8= 50 6C 65 61 73 65 ...   3157              DC.B    'Please enter a hexadecimal ending address.',CR,LF,0
00003205= 0D 0A 48 69 74 20 ...   3158  DISP_NEXT   DC.B    CR,LF,'Hit Enter to print the next 30 lines.',CR,LF,0            
0000322F= 57 6F 75 6C 64 20 ...   3159  REPEATMSG   DC.B    'Would you like to run again? Press Y to continue or N to finish.',CR,LF,0
00003272= 54 68 61 6E 6B 20 ...   3160  FINMSG      DC.B    'Thank you for using Circle Disassembler.',CR,LF,0
0000329D= 45 72 72 6F 72 3A ...   3161  ERRMSG_1    DC.B    'Error: Invalid Input Address',CR,LF,0
000032BC= 45 72 72 6F 72 3A ...   3162  ERRMSG_3    DC.B    'Error: Invalid Input Address (Odd)',CR,LF,0
000032E1= 45 72 72 6F 72 3A ...   3163  ERRMSG_5    DC.B    'Error: Invalid Input Address (start > end)',CR,LF,0
0000330E                          3164  
0000330E                          3165  VR_S_ADDR   DS.B    80                      * allocate storage space for the starting address
0000335E                          3166  VR_E_ADDR   DS.B    80                      * allocate storage space for the ending address
000033AE                          3167  S_ADDR_HX   DS.L    1                       * allocate storage space for the starting address in hex
000033B2                          3168  E_ADDR_HX   DS.L    1                       * allocate storage space for the ending address in hex
000033B6= 0D 0A 00                3169  ENDLINE_M   DC.B    CR,LF,0
000033B9                          3170  TMPINPUT    DS.B    80                      * temp store user input
00003409                          3171  TMPOUTPUT   DS.B    80                      * temp store prog output
00003459= 20 20 20 4F 52 49 ...   3172  DISP_ORI_B  DC.B    '   ORI.B',0
00003462= 20 20 20 4F 52 49 ...   3173  DISP_ORI_W  DC.B    '   ORI.W',0
0000346B= 20 20 20 4F 52 49 ...   3174  DISP_ORI_L  DC.B    '   ORI.L',0
00003474= 20 20 20 45 4F 52 ...   3175  DISP_EORI_B  DC.B    '   EORI.B',0
0000347E= 20 20 20 45 4F 52 ...   3176  DISP_EORI_W  DC.B    '   EORI.W',0
00003488= 20 20 20 45 4F 52 ...   3177  DISP_EORI_L  DC.B    '   EORI.L',0
00003492= 20 20 20 42 54 53 ...   3178  DISP_BTST   DC.B    '   BTST',0
0000349A= 20 20 20 43 4D 50 ...   3179  DISP_CMPI_B  DC.B    '   CMPI.B',0
000034A4= 20 20 20 43 4D 50 ...   3180  DISP_CMPI_W  DC.B    '   CMPI.W',0
000034AE= 20 20 20 43 4D 50 ...   3181  DISP_CMPI_L  DC.B    '   CMPI.L',0
000034B8= 20 20 20 44 41 54 ...   3182  DISP_DATA   DC.B    '   DATA',0
000034C0= 20 20 20 4D 4F 56 ...   3183  DISP_MOVE_B DC.B    '   MOVE.B',0
000034CA= 20 20 20 4D 4F 56 ...   3184  DISP_MOVE_W DC.B    '   MOVE.W',0
000034D4= 20 20 20 4D 4F 56 ...   3185  DISP_MOVE_L DC.B    '   MOVE.L',0
000034DE= 20 20 20 52 54 53 00    3186  DISP_RTS    DC.B    '   RTS',0
000034E5= 20 20 20 4A 53 52 00    3187  DISP_JSR    DC.B    '   JSR',0
000034EC= 20 20 20 4E 45 47 ...   3188  DISP_NEG_B    DC.B    '   NEG.B',0
000034F5= 20 20 20 4E 45 47 ...   3189  DISP_NEG_W    DC.B    '   NEG.W',0
000034FE= 20 20 20 4E 45 47 ...   3190  DISP_NEG_L    DC.B    '   NEG.L',0
00003507= 20 20 20 4E 4F 54 ...   3191  DISP_NOT_B  DC.B    '   NOT.B',0
00003510= 20 20 20 4E 4F 54 ...   3192  DISP_NOT_W  DC.B    '   NOT.W',0
00003519= 20 20 20 4E 4F 54 ...   3193  DISP_NOT_L  DC.B    '   NOT.L',0
00003522= 20 20 20 4C 45 41 00    3194  DISP_LEA    DC.B    '   LEA',0
00003529= 20 20 20 4D 4F 56 ...   3195  DISP_MOVEM_W    DC.B    '   MOVEM.W',0
00003534= 20 20 20 4D 4F 56 ...   3196  DISP_MOVEM_L    DC.B    '   MOVEM.L',0
0000353F= 20 20 20 41 44 44 ...   3197  DISP_ADDQ_B DC.B    '   ADDQ.B',0
00003549= 20 20 20 41 44 44 ...   3198  DISP_ADDQ_W DC.B    '   ADDQ.W',0
00003553= 20 20 20 41 44 44 ...   3199  DISP_ADDQ_L DC.B    '   ADDQ.L',0
0000355D= 20 20 20 44 49 56 ...   3200  DISP_DIVS   DC.B    '   DIVS',0
00003565= 20 20 20 53 55 42 ...   3201  DISP_SUB_B  DC.B    '   SUB.B',0
0000356E= 20 20 20 53 55 42 ...   3202  DISP_SUB_W  DC.B    '   SUB.W',0
00003577= 20 20 20 53 55 42 ...   3203  DISP_SUB_L  DC.B    '   SUB.L',0
00003580= 20 20 20 53 55 42 ...   3204  DISP_SUBI_B  DC.B    '   SUBI.B',0
0000358A= 20 20 20 53 55 42 ...   3205  DISP_SUBI_W  DC.B    '   SUBI.W',0
00003594= 20 20 20 53 55 42 ...   3206  DISP_SUBI_L  DC.B    '   SUBI.L',0
0000359E= 20 20 20 53 55 42 ...   3207  DISP_SUBA_W  DC.B    '   SUBA.W',0
000035A8= 20 20 20 53 55 42 ...   3208  DISP_SUBA_L  DC.B    '   SUBA.L',0
000035B2= 20 20 20 45 4F 52 ...   3209  DISP_EOR_B  DC.B    '   EOR.B',0
000035BB= 20 20 20 45 4F 52 ...   3210  DISP_EOR_W  DC.B    '   EOR.W',0
000035C4= 20 20 20 45 4F 52 ...   3211  DISP_EOR_L  DC.B    '   EOR.L',0
000035CD= 20 20 20 43 4D 50 ...   3212  DISP_CMP_B  DC.B    '   CMP.B',0
000035D6= 20 20 20 43 4D 50 ...   3213  DISP_CMP_W  DC.B    '   CMP.W',0
000035DF= 20 20 20 43 4D 50 ...   3214  DISP_CMP_L  DC.B    '   CMP.L',0
000035E8= 20 20 20 43 4D 50 ...   3215  DISP_CMPA_W  DC.B    '   CMPA.W',0
000035F2= 20 20 20 43 4D 50 ...   3216  DISP_CMPA_L  DC.B    '   CMPA.L',0
000035FC= 20 20 20 4D 55 4C ...   3217  DISP_MULS_W DC.B    '   MULS.W',0
00003606= 20 20 20 41 4E 44 ...   3218  DISP_AND_B  DC.B    '   AND.B',0
0000360F= 20 20 20 41 4E 44 ...   3219  DISP_AND_W  DC.B    '   AND.W',0
00003618= 20 20 20 41 4E 44 ...   3220  DISP_AND_L  DC.B    '   AND.L',0
00003621= 20 20 20 41 44 44 ...   3221  DISP_ADD_B  DC.B    '   ADD.B',0
0000362A= 20 20 20 41 44 44 ...   3222  DISP_ADD_W  DC.B    '   ADD.W',0
00003633= 20 20 20 41 44 44 ...   3223  DISP_ADD_L  DC.B    '   ADD.L',0
0000363C= 20 20 20 41 44 44 ...   3224  DISP_ADDA_W DC.B    '   ADDA.W',0
00003646= 20 20 20 41 44 44 ...   3225  DISP_ADDA_L DC.B    '   ADDA.L',0
00003650= 20 20 20 4C 53 52 ...   3226  DISP_LSR_B  DC.B    '   LSR.B',0
00003659= 20 20 20 4C 53 4C ...   3227  DISP_LSL_B  DC.B    '   LSL.B',0
00003662= 20 20 20 4C 53 52 ...   3228  DISP_LSR_W  DC.B    '   LSR.W',0
0000366B= 20 20 20 4C 53 4C ...   3229  DISP_LSL_W  DC.B    '   LSL.W',0
00003674= 20 20 20 4C 53 52 ...   3230  DISP_LSR_L  DC.B    '   LSR.L',0
0000367D= 20 20 20 4C 53 4C ...   3231  DISP_LSL_L  DC.B    '   LSL.L',0
00003686= 20 20 20 41 53 52 ...   3232  DISP_ASR_B  DC.B    '   ASR.B',0
0000368F= 20 20 20 41 53 4C ...   3233  DISP_ASL_B  DC.B    '   ASL.B',0
00003698= 20 20 20 41 53 52 ...   3234  DISP_ASR_W  DC.B    '   ASR.W',0
000036A1= 20 20 20 41 53 4C ...   3235  DISP_ASL_W  DC.B    '   ASL.W',0
000036AA= 20 20 20 41 53 52 ...   3236  DISP_ASR_L  DC.B    '   ASR.L',0
000036B3= 20 20 20 41 53 4C ...   3237  DISP_ASL_L  DC.B    '   ASL.L',0
000036BC= 20 20 20 52 4F 52 ...   3238  DISP_ROR_B  DC.B    '   ROR.B',0
000036C5= 20 20 20 52 4F 4C ...   3239  DISP_ROL_B  DC.B    '   ROL.B',0
000036CE= 20 20 20 52 4F 52 ...   3240  DISP_ROR_W  DC.B    '   ROR.W',0
000036D7= 20 20 20 52 4F 4C ...   3241  DISP_ROL_W  DC.B    '   ROL.W',0
000036E0= 20 20 20 52 4F 52 ...   3242  DISP_ROR_L  DC.B    '   ROR.L',0
000036E9= 20 20 20 52 4F 4C ...   3243  DISP_ROL_L  DC.B    '   ROL.L',0
000036F2= 20 20 20 42 52 41 00    3244  DISP_BRA    DC.B    '   BRA',0
000036F9= 20 20 20 42 4C 54 00    3245  DISP_BLT    DC.B    '   BLT',0
00003700= 20 20 20 42 45 51 00    3246  DISP_BEQ    DC.B    '   BEQ',0
00003707= 20 20 20 42 4E 45 00    3247  DISP_BNE    DC.B    '   BNE',0
0000370E= 20 20 20 42 48 49 00    3248  DISP_BHI    DC.B    '   BHI',0
00003715= 20 20 20 4D 4F 56 ...   3249  DISP_MOVEA_W    DC.B    '   MOVEA.W',0
00003720= 20 20 20 4D 4F 56 ...   3250  DISP_MOVEA_L    DC.B    '   MOVEA.L',0
0000372B                          3251  
0000372B= 20 20 20 24 00          3252  DISP_HEX     DC.B    '   $',0
00003730= 20 20 20 44 00          3253  DISP_D  DC.B    '   D',0
00003735= 20 20 20 41 00          3254  DISP_A  DC.B    '   A',0
0000373A= 20 20 20 28 00          3255  DISP_OP  DC.B    '   (',0
0000373F= 29 00                   3256  DISP_CP  DC.B   ')',0
00003741= 20 20 20 28 41 00       3257  DISP_AOP  DC.B    '   (A',0
00003747                          3258  
00003747= 20 20 20 2D 28 41 00    3259  DISP_PRE    DC.B    '   -(A',0
0000374E= 29 2B 00                3260  DISP_POST   DC.B    ')+',0
00003751= 20 20 20 23 00          3261  DISP_LB DC.B    '   #',0
00003756= 30 00                   3262  DISP_0  DC.B    '0',0
00003758= 31 00                   3263  DISP_1  DC.B    '1',0
0000375A= 32 00                   3264  DISP_2  DC.B    '2',0
0000375C= 33 00                   3265  DISP_3  DC.B    '3',0
0000375E= 34 00                   3266  DISP_4  DC.B    '4',0
00003760= 35 00                   3267  DISP_5  DC.B    '5',0
00003762= 36 00                   3268  DISP_6  DC.B    '6',0
00003764= 37 00                   3269  DISP_7  DC.B    '7',0
00003766                          3270  
00003766                          3271  *STACK INTERFACE VARIABLES*
00003766                          3272  COUNTER         DS.W    1
00003768                          3273  QUEUE_COUNTER   DS.W    1
0000376A                          3274  
0000376A                          3275  *EA DECODING INTERFACE VARIABLES* 
0000376A                          3276  DEST_REGISTER_FORMAT    DS.B    1           *all address modes acceptable standard
0000376B                          3277  SRC_REGISTER_FORMAT  DS.B    1           *all address modes acceptable standard
0000376C                          3278  TEMP_REGISTER_FORMAT    DS.B    1           *place holder for masking other register formats
0000376D                          3279  
0000376D                          3280  *FORMAT OF WHERE TO GET THE EA BY THE ENDING BIT AND STARTING BIT
0000376D                          3281  * WORD + WORD = LONG
0000376D                          3282  * (STARTING BIT) + (ENDING BIT) = 2 HEX CHAR
0000376D                          3283  * A              + F            = AF         <= EXAMPLE
0000376D                          3284  *(10TH BIT)      + (15TH BIT)   = CHECK BITS 15 THROUGH 10
0000376D                          3285  GET_DST_START_END    DS.B    1
0000376E                          3286  GET_SRC_START_END    DS.B    1
0000376F                          3287  
0000376F                          3288  *STORES THE START + END BITS HERE (FROM ABOVE)
00003770                          3289  VAR_BYTE_START      DS.L    1
00003774                          3290  VAR_BYTE_END        DS.L    1
00003778                          3291  VAR_TEMP_CLEANCOPY  DS.L    1
0000377C                          3292  
0000377C                          3293  VAR_LONG_ADDRESS_MODE_CHECK        DS.L    1       *holds the bits 0-2 in long form
00003780                          3294  
00003780                          3295  *MORE FOR STACK USAGE*
00003780= 2C 00                   3296  DISP_COMMA  DC.B    ',',0
00003782= 20 20 20 00             3297  DISP_INDENT  DC.B    '   ',0
00003786                          3298  
00003786                          3299  *NEXT WORD POINTER: FOR IDENTIFING (xxx).W or (xxx).L*
00003786                          3300  POINTER_WORD    DS.W       1
00003788                          3301  
00003788                          3302  
00003788                          3303  
00003788                          3304  *---------------------------------------------------------------------------*
00003788                          3305  * Ends program
00003788                          3306  *---------------------------------------------------------------------------*
00003788                          3307              END    START                    * last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASC2HXLP            1158
ASCII2HEX           1152
ASC_ERR             11B4
ASC_LOW             1196
ASC_NUM             11A6
ASC_SFT             11AE
ASC_UPP             119E
CHECK0              25B8
CHECK1              2642
CHECK2              26CC
CHECK3              2766
CHECK4              2808
CHECK7              28AA
CHECK_IMMEDIATE     298A
CHECK_LONG          293C
CHECK_WORD          28F6
CLEAR_RETURN        2EC0
CLEAR_STACK         2EB0
COUNTER             3766
CR                  D
DECREMENT           2EA8
DEST_CHECK0         29E8
DEST_CHECK1         2A72
DEST_CHECK2         2AFC
DEST_CHECK3         2B96
DEST_CHECK4         2C38
DEST_CHECK7         2CDA
DEST_CHECK_IMMEDIATE  2DBA
DEST_CHECK_LONG     2D6C
DEST_CHECK_WORD     2D26
DEST_LOOP_SHIFTING  2A52
DEST_LOOP_SHIFTING1  2ADC
DEST_LOOP_SHIFTING2  2B6E
DEST_LOOP_SHIFTING3  2C08
DEST_LOOP_SHIFTING4  2CB2
DEST_LOOP_SHIFTING7  2D12
DEST_MASKING_NEXT   2A60
DEST_MASKING_NEXT1  2AEA
DEST_MASKING_NEXT2  2B7C
DEST_MASKING_NEXT3  2C16
DEST_MASKING_NEXT4  2CC0
DEST_MASKING_NEXT7  2D20
DEST_MODE           2170
DEST_REGISTER       2440
DEST_REGISTER_FORMAT  376A
DISPLAY_30_LINES    1300
DISP_0              3756
DISP_1              3758
DISP_2              375A
DISP_3              375C
DISP_4              375E
DISP_5              3760
DISP_6              3762
DISP_7              3764
DISP_A              3735
DISP_ADDA_L         3646
DISP_ADDA_W         363C
DISP_ADDQ_B         353F
DISP_ADDQ_L         3553
DISP_ADDQ_W         3549
DISP_ADD_B          3621
DISP_ADD_L          3633
DISP_ADD_W          362A
DISP_AND_B          3606
DISP_AND_L          3618
DISP_AND_W          360F
DISP_AOP            3741
DISP_ASL_B          368F
DISP_ASL_L          36B3
DISP_ASL_W          36A1
DISP_ASR_B          3686
DISP_ASR_L          36AA
DISP_ASR_W          3698
DISP_BEQ            3700
DISP_BHI            370E
DISP_BLT            36F9
DISP_BNE            3707
DISP_BRA            36F2
DISP_BTST           3492
DISP_CMPA_L         35F2
DISP_CMPA_W         35E8
DISP_CMPI_B         349A
DISP_CMPI_L         34AE
DISP_CMPI_W         34A4
DISP_CMP_B          35CD
DISP_CMP_L          35DF
DISP_CMP_W          35D6
DISP_COMMA          3780
DISP_CP             373F
DISP_D              3730
DISP_DATA           34B8
DISP_DIVS           355D
DISP_EORI_B         3474
DISP_EORI_L         3488
DISP_EORI_W         347E
DISP_EOR_B          35B2
DISP_EOR_L          35C4
DISP_EOR_W          35BB
DISP_HEX            372B
DISP_INDENT         3782
DISP_JSR            34E5
DISP_LB             3751
DISP_LEA            3522
DISP_LSL_B          3659
DISP_LSL_L          367D
DISP_LSL_W          366B
DISP_LSR_B          3650
DISP_LSR_L          3674
DISP_LSR_W          3662
DISP_MOVEA_L        3720
DISP_MOVEA_W        3715
DISP_MOVEM_L        3534
DISP_MOVEM_W        3529
DISP_MOVE_B         34C0
DISP_MOVE_L         34D4
DISP_MOVE_W         34CA
DISP_MULS_W         35FC
DISP_NEG_B          34EC
DISP_NEG_L          34FE
DISP_NEG_W          34F5
DISP_NEXT           3205
DISP_NOT_B          3507
DISP_NOT_L          3519
DISP_NOT_W          3510
DISP_OP             373A
DISP_ORI_B          3459
DISP_ORI_L          346B
DISP_ORI_W          3462
DISP_POST           374E
DISP_PRE            3747
DISP_ROL_B          36C5
DISP_ROL_L          36E9
DISP_ROL_W          36D7
DISP_ROR_B          36BC
DISP_ROR_L          36E0
DISP_ROR_W          36CE
DISP_RTS            34DE
DISP_SUBA_L         35A8
DISP_SUBA_W         359E
DISP_SUBI_B         3580
DISP_SUBI_L         3594
DISP_SUBI_W         358A
DISP_SUB_B          3565
DISP_SUB_L          3577
DISP_SUB_W          356E
D_MODE000           2212
D_MODE010           225A
D_MODE011           22BA
D_MODE100           22DA
D_MODE111           232C
EA_ARITH            210A
EA_DATA             14DE
EA_GEN              2156
EA_MOVEA            2130
EA_NOSRC            20F6
ENDLINE_M           33B6
END_ADDR            109E
ERRMSG_1            329D
ERRMSG_3            32BC
ERRMSG_5            32E1
ERROR_1             1102
ERROR_2             1112
ERROR_3             1122
ERROR_4             1132
ERROR_5             1142
E_ADDR_HX           33B2
FINMSG              3272
GET_DST_FAILED      2E00
GET_DST_START_END   376D
GET_DST_SUCCESS     2E04
GET_EA_EA_DEST      29D6
GET_EA_EA_SRC       25A6
GET_SRC_FAILED      29D0
GET_SRC_START_END   376E
GET_SRC_SUCCESS     29D4
HEX2ASCII           11BA
HEX2ASCII2STACK     11FC
HEX_CHAR            11E8
HEX_CONT            11EC
HEX_LOOP            11CE
IMMD_B              23E0
IMMD_L              2420
IMMD_W              2400
IMMEDIATE           23B0
INCREMENT           2EA0
INTRO               1028
IS_ODD              1240
IS_ODD_ERR          1256
JMPTABLE            132C
LF                  A
LONGMODE            2384
LOOP_SHIFTING       2622
LOOP_SHIFTING1      26AC
LOOP_SHIFTING2      273E
LOOP_SHIFTING3      27D8
LOOP_SHIFTING4      2882
MAIN                125C
MASKING_NEXT        2630
MASKING_NEXT1       26BA
MASKING_NEXT2       274C
MASKING_NEXT3       27E6
MASKING_NEXT4       2890
MODE000             21FE
MODE001             2226
MODE010             223A
MODE011             227A
MODE100             229A
MODE111             22FA
NEXTLINES           130E
OP0000              138C
OP0001              15B2
OP0010              1620
OP0011              171E
OP0100              181A
OP0101              19B4
OP0110              1A30
OP0111              1ABE
OP1000              1AC2
OP1001              1AFE
OP1010              1BD6
OP1011              1BDA
OP1100              1CD6
OP1101              1D72
OP1110              1E44
OP1111              20F2
OP_ADDA_L           1E2C
OP_ADDA_W           1E14
OP_ADDQ             19D4
OP_ADDQ_B           19FA
OP_ADDQ_L           1A1E
OP_ADDQ_W           1A0C
OP_ADD_B            1DCC
OP_ADD_L            1DFC
OP_ADD_W            1DE4
OP_AND_B            1D3C
OP_AND_L            1D60
OP_AND_W            1D4E
OP_ASL              1FE4
OP_ASL_B            2008
OP_ASL_L            201A
OP_ASL_W            202C
OP_ASR              1F8A
OP_ASR_B            1FAE
OP_ASR_L            1FC0
OP_ASR_W            1FD2
OP_ASX              1EA6
OP_BEQ              1A94
OP_BHI              1A78
OP_BLT              1AB0
OP_BNE              1A86
OP_BRA              1AA2
OP_BTST             1400
OP_CMPA_L           1C46
OP_CMPA_W           1C34
OP_CMPI             1506
OP_CMPI_B           1526
OP_CMPI_L           154A
OP_CMPI_W           1538
OP_CMP_B            1C58
OP_CMP_L            1C88
OP_CMP_W            1C70
OP_DATA             14BA
OP_DIVS             1AEA
OP_EORI             140E
OP_EORI_B           142E
OP_EORI_L           1452
OP_EORI_W           1440
OP_EOR_B            1CA0
OP_EOR_L            1CC4
OP_EOR_W            1CB2
OP_JSR              1992
OP_LEA              18C0
OP_LSL              1F30
OP_LSL_B            1F54
OP_LSL_L            1F66
OP_LSL_W            1F78
OP_LSR              1ED6
OP_LSR_B            1EFA
OP_LSR_L            1F0C
OP_LSR_W            1F1E
OP_LSX              1E8E
OP_MOVEA_L          16AE
OP_MOVEA_W          17AA
OP_MOVEM_L          18AE
OP_MOVEM_W          189C
OP_MOVE_B           15B8
OP_MOVE_L           1646
OP_MOVE_W           1742
OP_MULS             1D28
OP_NEG              18D4
OP_NEG_B            18F4
OP_NEG_L            1924
OP_NEG_W            190C
OP_NOT              193C
OP_NOT_B            195C
OP_NOT_L            1980
OP_NOT_W            196E
OP_ORI              155C
OP_ORI_B            157C
OP_ORI_L            15A0
OP_ORI_W            158E
OP_ROL              2098
OP_ROL_B            20BC
OP_ROL_L            20CE
OP_ROL_W            20E0
OP_ROR              203E
OP_ROR_B            2062
OP_ROR_L            2074
OP_ROR_W            2086
OP_ROX              1EBE
OP_RTS              19A6
OP_SUBA_L           1BC4
OP_SUBA_W           1BB2
OP_SUBI             1464
OP_SUBI_B           1484
OP_SUBI_L           14A8
OP_SUBI_W           1496
OP_SUB_B            1B6A
OP_SUB_L            1B9A
OP_SUB_W            1B82
OUTPUT_PROCESSED_DATA  12E0
POINTER_WORD        3786
POP_FRONT           2E5A
POP_FRONT_RETURN    2E94
POP_RETURN          2E58
POP_SHIFT_LOOP      2E76
POP_STACK           2E4C
PRINT_QUEUE         2E20
PRINT_QUEUE_HELPER  2E2C
PRINT_QUEUE_RETURN  2E42
PRINT_STACK         2E06
PRINT_STACK_HELPER  2E12
PRINT_STACK_RETURN  2E1E
PROGLP              100A
PROMPT_END          31D8
PROMPT_START        31A9
PUSH_STACK          2E44
QUEUE_COUNTER       3768
REG_0               24F4
REG_1               2502
REG_2               2510
REG_3               251E
REG_4               252C
REG_5               253A
REG_6               2548
REG_7               2556
REPEAT              2564
REPEATMSG           322F
RETURN              11B8
SRC_LOOP_SHIFTING   28E2
SRC_MASKING_NEXT    28F0
SRC_MODE            21B4
SRC_REGISTER        249C
SRC_REGISTER_FORMAT  376B
STACK               7000
STACK_HEX_CHAR      122A
STACK_HEX_CONT      122E
STACK_HEX_LOOP      1210
START               1004
START_ADDR          104C
S_ADDR_HX           33AE
TEMP_REGISTER_FORMAT  376C
TERMINATE           2EC2
TESTING             1036
TMPINPUT            33B9
TMPOUTPUT           3409
VAR_BYTE_END        3774
VAR_BYTE_START      3770
VAR_LONG_ADDRESS_MODE_CHECK  377C
VAR_TEMP_CLEANCOPY  3778
VR_E_ADDR           335E
VR_S_ADDR           330E
WELCOME             2ED4
WORDMODE            2358

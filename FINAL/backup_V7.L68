00001004 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/9/2014 3:08:02 PM

00000000                             1  *---------------------------------------------------------------------------*
00000000                             2  * Title      : 68K Disassembler
00000000                             3  * Written by : Team Circle
00000000                             4  * Date       : 12/05/14
00000000                             5  * Description: Scans a section of memory and converts its
00000000                             6  *              contents to a listing of valid assembly 
00000000                             7  *              language instructions
00000000                             8  *---------------------------------------------------------------------------*
00000000                             9  
00000000                            10  *---------------------------------------------------------------------------*
00000000                            11  * System Equates                                                 
00000000                            12  *---------------------------------------------------------------------------*
00000000  =0000000D                 13  CR          EQU     $0D                     * ASCII for Carriage Return
00000000  =0000000A                 14  LF          EQU     $0A                     * ASCII for Line Feed 
00000000  =00007000                 15  STACK       EQU     $7000                   * Initial Stack Pointer                         
00000000                            16              
00000000                            17  *---------------------------------------------------------------------------*
00000000                            18  * Reserved Registers
00000000                            19  *---------------------------------------------------------------------------*  
00000000                            20  * D0 - I/O
00000000                            21  * D1 - Temporary storage of processing data
00000000                            22  * D3 - [PUSH_STACK]
00000000                            23  * D4 - Opcode size (0 - byte; 1- word; 2-long)
00000000                            24  * D5 - Processing data
00000000                            25  * D6 - Loop counter to print 30 lines
00000000                            26  * D7 - Error flag
00000000                            27  * A2 - [STACK POINTER]
00000000                            28  * A5 - Processing address in hex
00000000                            29  
00000000                            30  *---------------------------------------------------------------------------*
00000000                            31  * Start and loop program
00000000                            32  *---------------------------------------------------------------------------*  
00001000                            33              ORG     $1000
00001000  4FF8 7000                 34              LEA     STACK,SP
00001004                            35  START:            
00001004  4EB9 00001028             36              JSR     INTRO                 
0000100A  4EB9 0000104A             37  PROGLP      JSR     START_ADDR
00001010  4EB9 0000109C             38              JSR     END_ADDR
00001016  43F9 0000410C             39              LEA     ENDLINE_M,A1           * Add a new line
0000101C  103C 000E                 40              MOVE.B  #14, D0                  * Display A1
00001020  4E4F                      41              TRAP    #15
00001022                            42              
00001022  4EF9 0000125A             43              JMP     MAIN
00001028                            44              
00001028                            45  *---------------------------------------------------------------------------*
00001028                            46  * INTRO: Display the introduction of the program
00001028                            47  *---------------------------------------------------------------------------*
00001028  43F9 00003C2A             48  INTRO       LEA     WELCOME,A1              * Load PROMPT_START
0000102E  103C 000E                 49              MOVE.B  #14,D0                  * Display A1
00001032  4E4F                      50              TRAP    #15
00001034  4E75                      51              RTS
00001036                            52  TESTING     
00001036  B7C3                      53               CMPA.L  D3,A3
00001038  B7D3                      54              CMPA.L  (A3),A3
0000103A  B9DC                      55              CMPA.L  (A4)+,A4
0000103C  BBE5                      56              CMPA.L  -(A5),A5
0000103E  BDF8 3331                 57              CMPA.L  $3331,A6
00001042  BFF9 44444441             58              CMPA.L  $44444441,A7 
00001048                            59  
00001048                            60  
00001048                            61  
00001048                            62  
00001048                            63  
00001048  4E75                      64              RTS
0000104A                            65  *---------------------------------------------------------------------------*
0000104A                            66  * START_ADDR: Compute the starting address
0000104A                            67  *---------------------------------------------------------------------------*
0000104A                            68  START_ADDR
0000104A                            69              * Output
0000104A  43F9 00003EFF             70              LEA     PROMPT_START,A1         * Load PROMPT_START 
00001050  103C 000E                 71              MOVE.B  #14,D0                  * Display PROMPT_START
00001054  4E4F                      72              TRAP    #15
00001056                            73      
00001056                            74              * Input
00001056  43F9 00004064             75              LEA     VR_S_ADDR,A1            * Load VR_S_ADDR
0000105C  103C 0002                 76              MOVE.B  #2,D0                   * Ask user for input
00001060  4E4F                      77              TRAP    #15
00001062                            78              
00001062                            79              * Error Checking (length)
00001062  0C01 0000                 80              CMPI.B  #0, D1                  * Check if input length <= 0
00001066  6F00 0098                 81              BLE     ERROR_1
0000106A  0C01 0008                 82              CMPI.B  #8, D1                  * Check if input length > 8
0000106E  6E00 0090                 83              BGT     ERROR_1
00001072                            84              
00001072                            85              * Conversion & Storage
00001072  4EB9 00001150             86              JSR     ASCII2HEX               * Jump to ASCII2HEX
00001078  0C07 0001                 87              CMPI.B  #1, D7                  * Check for error
0000107C  6700 0082                 88              BEQ     ERROR_1                 
00001080  23C1 00004104             89              MOVE.L  D1, S_ADDR_HX           * Move the result to S_ADDR_HX 
00001086                            90              
00001086                            91              * Error Checking (Odd)
00001086  43F9 00004104             92              LEA     S_ADDR_HX, A1           * Load 'S_ADDR_HX' for odd error
0000108C  4EB9 0000123E             93              JSR     IS_ODD                  * Check if the input address is odd
00001092  0C07 0001                 94              CMPI.B  #1, D7                  * Check for error
00001096  6700 0088                 95              BEQ     ERROR_3
0000109A                            96              
0000109A                            97              * Return
0000109A  4E75                      98              RTS     
0000109C                            99  *---------------------------------------------------------------------------*
0000109C                           100  * END_ADDR: Compute the ending address
0000109C                           101  *---------------------------------------------------------------------------*
0000109C                           102  END_ADDR
0000109C                           103              * Output
0000109C  43F9 00003F2E            104              LEA     PROMPT_END,A1           * Load PROMPT_END
000010A2  103C 000E                105              MOVE.B  #14,D0                  * Display PROMPT_END
000010A6  4E4F                     106              TRAP    #15
000010A8                           107  
000010A8                           108              * Input
000010A8  43F9 000040B4            109              LEA     VR_E_ADDR,A1            * Load VR_E_ADDR
000010AE  103C 0002                110              MOVE.B  #2,D0                   * Ask user for input
000010B2  4E4F                     111              TRAP    #15
000010B4                           112              
000010B4                           113              * Error Checking (length)
000010B4  0C01 0000                114              CMPI.B  #0, D1                  * Check if input length <= 0
000010B8  6F00 0056                115              BLE     ERROR_2
000010BC  0C01 0008                116              CMPI.B  #8, D1                  * Check if input length > 8
000010C0  6E00 004E                117              BGT     ERROR_2
000010C4                           118              
000010C4                           119              * Conversion & Storage
000010C4  4EB9 00001150            120              JSR     ASCII2HEX               * Jump to ASCII2HEX
000010CA  0C07 0001                121              CMPI.B  #1, D7                  * Check for error
000010CE  6700 0040                122              BEQ     ERROR_2
000010D2  23C1 00004108            123              MOVE.L  D1, E_ADDR_HX           * Move the result to E_ADDR_HX
000010D8                           124              
000010D8                           125              * Error Checking (start > end case)
000010D8  2439 00004104            126              MOVE.L  S_ADDR_HX, D2           * Move the starting address to D2
000010DE  B282                     127              CMP.L   D2, D1                  * Compare starting and ending address
000010E0  6300 005E                128              BLS     ERROR_5                 * Go to ERROR_5 if ending < starting
000010E4                           129              
000010E4                           130              * Error Checking (Odd case)
000010E4  43F9 00004108            131              LEA     E_ADDR_HX, A1           * Move the ending address
000010EA  4EB9 0000123E            132              JSR     IS_ODD                  * Go to IS_ODD for odd address checking
000010F0  0C07 0001                133              CMPI.B  #1, D7                  * Check for an error flag
000010F4  6700 003A                134              BEQ     ERROR_4
000010F8                           135              
000010F8                           136              * Inputs are valid
000010F8  2A79 00004104            137              MOVE.L  S_ADDR_HX, A5           * Store the valid input in A5
000010FE                           138              
000010FE  4E75                     139              RTS
00001100                           140              
00001100                           141  *---------------------------------------------------------------------------*
00001100                           142  * ERROR_1: Address error (Invalid starting address)
00001100                           143  *---------------------------------------------------------------------------*
00001100                           144  ERROR_1
00001100  43F9 00003FF3            145              LEA     ERRMSG_1, A1            * Load ERRMSG_1
00001106  103C 000E                146              MOVE.B  #14, D0                 * Display ERRMSG_1
0000110A  4E4F                     147              TRAP    #15
0000110C  4EF8 104A                148              JMP     START_ADDR              * Jump to START_ADDR
00001110                           149      
00001110                           150  *---------------------------------------------------------------------------*
00001110                           151  * ERROR_2: Address error (Invalid ending address)
00001110                           152  *---------------------------------------------------------------------------*
00001110                           153  ERROR_2
00001110  43F9 00003FF3            154              LEA     ERRMSG_1, A1            * Load ERRMSG_1
00001116  103C 000E                155              MOVE.B  #14, D0                 * Display ERRMSG_1
0000111A  4E4F                     156              TRAP    #15
0000111C  4EF8 109C                157              JMP     END_ADDR                * Jump to END_ADDR
00001120                           158  
00001120                           159  *---------------------------------------------------------------------------*
00001120                           160  * ERROR_3: Address error (Odd starting address)
00001120                           161  *---------------------------------------------------------------------------*
00001120                           162  ERROR_3
00001120  43F9 00004012            163              LEA     ERRMSG_3, A1
00001126  103C 000E                164              MOVE.B  #14, D0
0000112A  4E4F                     165              TRAP    #15
0000112C  4EF8 104A                166              JMP     START_ADDR
00001130                           167     
00001130                           168  *---------------------------------------------------------------------------*
00001130                           169  * ERROR_4: Address error (Odd ending address)
00001130                           170  *---------------------------------------------------------------------------*         
00001130                           171  ERROR_4
00001130  43F9 00004012            172              LEA     ERRMSG_3, A1
00001136  103C 000E                173              MOVE.B  #14, D0
0000113A  4E4F                     174              TRAP    #15
0000113C  4EF8 109C                175              JMP     END_ADDR
00001140                           176            
00001140                           177  *---------------------------------------------------------------------------*
00001140                           178  * ERROR_3: Address error (Ending address is less than starting address)
00001140                           179  *---------------------------------------------------------------------------*
00001140                           180  ERROR_5
00001140  43F9 00004037            181              LEA     ERRMSG_5, A1
00001146  103C 000E                182              MOVE.B  #14, D0
0000114A  4E4F                     183              TRAP    #15
0000114C  4EF8 109C                184              JMP     END_ADDR
00001150                           185    
00001150                           186  *---------------------------------------------------------------------------*
00001150                           187  * ASCII2HEX: Convert ASCii to Hexadecimal
00001150                           188  * Reserved registers: A1 = Source, D1 = Destination, D2 = Byte, D7 = Error
00001150                           189  *---------------------------------------------------------------------------*
00001150  4281                     190  ASCII2HEX   CLR.L   D1                      * Clear the destination 
00001152  4287                     191              CLR.L   D7                      * Set the error flag to 0
00001154  4282                     192              CLR.L   D2                      * Clear D2 for temp storage
00001156                           193              
00001156  1419                     194  ASC2HXLP    MOVE.B  (A1)+, D2               * Read a byte to D2
00001158  0C02 0000                195              CMPI.B  #0, D2                  * Check for NULL (indicates the end of source)
0000115C  6700 0058                196              BEQ     RETURN                  * If it's NULL, go to return
00001160  0C02 0066                197              CMPI.B  #102, D2                * Decimal ASCII value of f is 102
00001164  6E00 004C                198              BGT     ASC_ERR                 * ASCII > f (invalid input) 
00001168  0C02 0061                199              CMPI.B  #97, D2                 * Decimal ASCII value of a is 97
0000116C  6C00 0026                200              BGE     ASC_LOW                 * ASCII >= a (valid input)
00001170  0C02 0046                201              CMPI.B  #70, D2                 * Decimal ASCII value of F is 70
00001174  6E00 003C                202              BGT     ASC_ERR                 * ASCII > F (invalid input)
00001178  0C02 0041                203              CMPI.B  #65, D2                 * Decimal ASCII value of A is 65
0000117C  6C00 001E                204              BGE     ASC_UPP                 * ASCII >= A (valid input)
00001180  0C02 0039                205              CMPI.B  #57, D2                 * Decimal value of 9 is 57
00001184  6E00 002C                206              BGT     ASC_ERR                 * ASCII > 9 (invalid input)
00001188  0C02 0030                207              CMPI.B  #48, D2                 * Decimal ASCII value of 0 is 48
0000118C  6C00 0016                208              BGE     ASC_NUM                 * ASCII >= 0 (valid input)
00001190  6000 0020                209              BRA     ASC_ERR                 * Invalid input
00001194                           210  
00001194  0442 0057                211  ASC_LOW     SUBI    #87, D2                 * Convert the ASCII input to Hex
00001198  6000 0012                212              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
0000119C                           213              
0000119C  0442 0037                214  ASC_UPP     SUBI    #55, D2                 * Convert the ASCII input to Hex
000011A0  6000 000A                215              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011A4                           216              
000011A4  0442 0030                217  ASC_NUM     SUBI    #48, D2                 * Convert the ASCII input to Hex
000011A8  6000 0002                218              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011AC                           219              
000011AC  E981                     220  ASC_SFT     ASL.L   #4, D1                  * Shift the dest to left by 4 bits
000011AE  D202                     221              ADD.B   D2, D1                  * Add the converted input to D1
000011B0  60A4                     222              BRA     ASC2HXLP                * Loop
000011B2                           223  
000011B2  1E3C 0001                224  ASC_ERR     MOVE.B  #1, D7                  * Set the error flag to 1            
000011B6  4E75                     225  RETURN      RTS     
000011B8                           226  
000011B8                           227  *---------------------------------------------------------------------------*
000011B8                           228  * HEX2ASCII: Convert Hexadecimal to ASCii 
000011B8                           229  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
000011B8                           230  *---------------------------------------------------------------------------*
000011B8  0C02 0008                231  HEX2ASCII   CMPI.B  #8, D2                  * Check to see if the size is long
000011BC  6700 000E                232              BEQ     HEX_LOOP
000011C0  4841                     233              SWAP    D1
000011C2  0C02 0002                234              CMPI.B  #2,D2
000011C6  6600 0004                235              BNE     HEX_LOOP
000011CA  E189                     236              LSL.L   #8,D1
000011CC                           237             
000011CC  E999                     238  HEX_LOOP    ROL.L   #4, D1                  * Roll D1 to left
000011CE  2601                     239              MOVE.L  D1, D3                  * Move D1 to D3
000011D0  0283 0000000F            240              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
000011D6  0C03 0009                241              CMPI.B  #9, D3                  * Compare te digit
000011DA  6E00 000A                242              BGT     HEX_CHAR              
000011DE  0603 0030                243              ADDI.B  #48,D3                  * Add 48 for numerical output
000011E2  6000 0006                244              BRA     HEX_CONT
000011E6                           245              
000011E6  0603 0037                246  HEX_CHAR    ADDI.B  #55,D3                  * Add 55 for character output
000011EA                           247  
000011EA  12C3                     248  HEX_CONT    MOVE.B  D3, (A1)+               * Place into A1
000011EC  5342                     249              SUBI    #1, D2                  * Decrement the size
000011EE  0C02 0000                250              CMPI.B  #0, D2                  * Check if D2 is 0
000011F2  66D8                     251              BNE     HEX_LOOP                * Loop
000011F4  12BC 0000                252              MOVE.B  #$0,(A1)                * Null terminator
000011F8  4E75                     253              RTS
000011FA                           254  *---------------------------------------------------------------------------*
000011FA                           255  * HEX2ASCII2STACK: Convert Hexadecimal to ASCii 
000011FA                           256  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
000011FA                           257  *---------------------------------------------------------------------------*
000011FA                           258  HEX2ASCII2STACK
000011FA  0C02 0008                259              CMPI.B  #8, D2                  * Check to see if the size is long
000011FE  6700 000E                260              BEQ     STACK_HEX_LOOP
00001202  4841                     261              SWAP    D1
00001204  0C02 0002                262              CMPI.B  #2,D2
00001208  6600 0004                263              BNE     STACK_HEX_LOOP
0000120C  E189                     264              LSL.L   #8,D1
0000120E                           265             
0000120E                           266  STACK_HEX_LOOP    
0000120E  E999                     267              ROL.L   #4, D1                  * Roll D1 to left
00001210  2601                     268              MOVE.L  D1, D3                  * Move D1 to D3
00001212  0283 0000000F            269              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
00001218  0C03 0009                270              CMPI.B  #9, D3                  * Compare te digit
0000121C  6E00 000A                271              BGT     STACK_HEX_CHAR              
00001220  0603 0030                272              ADDI.B  #48,D3                  * Add 48 for numerical output
00001224  6000 0006                273              BRA     STACK_HEX_CONT
00001228                           274              
00001228                           275  STACK_HEX_CHAR    
00001228  0603 0037                276              ADDI.B  #55,D3                  * Add 55 for character output
0000122C                           277  
0000122C                           278  STACK_HEX_CONT    
0000122C  6100 296C                279              BSR     PUSH_STACK              *PLACE INTO STACK
00001230  5342                     280              SUBI    #1, D2                  * Decrement the size
00001232  0C02 0000                281              CMPI.B  #0, D2                  * Check if D2 is 0
00001236  66D6                     282              BNE     STACK_HEX_LOOP                * Loop
00001238  12BC 0000                283              MOVE.B  #$0,(A1)                * Null terminator
0000123C  4E75                     284              RTS
0000123E                           285  
0000123E                           286  
0000123E                           287  *---------------------------------------------------------------------------*
0000123E                           288  * IS_ODD: Check whether the source address is odd
0000123E                           289  * Reserved registers: A1 = Source, D1 = Result, D7 = error flag
0000123E                           290  *---------------------------------------------------------------------------*
0000123E  4281                     291  IS_ODD      CLR.L   D1                      * Clear the result
00001240  4287                     292              CLR.L   D7                      * Set the error flag to 0
00001242  2211                     293              MOVE.L  (A1),D1                * Temp store the checking address to D1
00001244  82FC 0002                294              DIVU    #2, D1                  * Divide the result by 2
00001248  4841                     295              SWAP    D1                      * Swap remainder with quotient
0000124A  0C01 0001                296              CMPI.B  #1, D1                  * Check for error
0000124E  6700 0004                297              BEQ     IS_ODD_ERR
00001252  4E75                     298              RTS
00001254                           299              
00001254  1E3C 0001                300  IS_ODD_ERR  MOVE.B  #1, D7
00001258  4E75                     301              RTS
0000125A                           302  
0000125A                           303  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*
0000125A                           304  * MAIN                    
0000125A                           305  * A2: STACK POINTER                                                      MAIN                                                                        MAIN
0000125A                           306  * A5: Processing address
0000125A                           307  *
0000125A                           308  * D3: USED FOR PUSHING INTO STACK
0000125A                           309  *     To push into stack => MOVE.W #DATA,D3 
0000125A                           310  *                           BSR    PUSH_STACK
0000125A                           311  *     To print stack     => BSR    PRINT_STACK 
0000125A                           312  *     To clear stack     => BSR    CLEAR_STACK
0000125A                           313  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*  
0000125A                           314  MAIN        
0000125A                           315              *initialize stack pointer
0000125A  33FC 0000 000044BC       316              MOVE.W  #0,COUNTER
00001262  347C 7000                317              MOVEA.W #STACK,A2
00001266  163C 0020                318              MOVE.B  #' ',D3
0000126A  6100 292E                319              BSR     PUSH_STACK
0000126E  6100 292A                320              BSR     PUSH_STACK
00001272  6100 2926                321              BSR     PUSH_STACK
00001276                           322              
00001276                           323              * clear registers for temp storage
00001276  4280                     324              CLR.L   D0                   
00001278  4281                     325              CLR.L   D1                   
0000127A  227C 00000000            326              MOVEA.L #0, A1                
00001280                           327              
00001280  220D                     328              MOVE.L  A5,D1                   * check to see if the address is fully read
00001282  23CD 00004104            329              MOVE.L  A5,S_ADDR_HX
00001288  B2B9 00004108            330              CMP.L   E_ADDR_HX,D1
0000128E  6C00 202A                331              BGE     REPEAT                  * go to repeat for user action
00001292                           332  
00001292  43F9 0000415F            333              LEA     TMPOUTPUT,A1            * allocate storage to hold output
00001298  143C 0008                334              MOVE.B  #8,D2                   * set the output size
0000129C  4EB8 11B8                335              JSR     HEX2ASCII               
000012A0  43F9 0000415F            336              LEA     TMPOUTPUT,A1
000012A6  103C 000E                337              MOVE.B  #14,D0
000012AA  4E4F                     338              TRAP    #15
000012AC                           339              
000012AC  4285                     340              CLR.L    D5                      * clear the processing data
000012AE  3A1D                     341              MOVE.W  (A5)+,D5                 * copy the currently processing data in A5 over to D5
000012B0                           342                                               * advance the current instruction pointer to the next
000012B0                           343                                               * instruction in memory
000012B0                           344  *----------------------------------------*
000012B0                           345  * Registers          
000012B0                           346  * [D1] - COPY OF D5
000012B0                           347  * [D5] - DATA TO BE PROCESSED
000012B0                           348  * [D6] - COUNTER FOR LINES PROCESSED
000012B0                           349  *
000012B0                           350  * [D4]      - ERROR FLAG BEFORE PRINTING
000012B0                           351  * [STACK]   - PRINTS PROCESS DATA
000012B0                           352  * [COUNTER] - KEEPS TRACK OF STACK INCREMENT
000012B0                           353  *
000012B0                           354  * [A1] - USED FOR JUMPING/PRINTING
000012B0                           355  *
000012B0                           356  *----------------------------------------*
000012B0                           357  
000012B0                           358              
000012B0                           359              *Processing the first 4 most significant bits 
000012B0  2205                     360              MOVE.L  D5,D1                    * copy the current processing data to D1
000012B2  143C 000C                361              MOVE.B  #12,D2                   * shift to right by 12 bits
000012B6  E469                     362              LSR.W   D2,D1                    * [D2] Temporarily used D2 for shifting bits
000012B8  C2FC 0006                363              MULU    #6,D1                    * form offset
000012BC  43F9 0000132A            364              LEA     JMPTABLE,A1              * index into table
000012C2  4EB1 1000                365              JSR     0(A1,D1)                 * jump indirect with index
000012C6                           366              
000012C6                           367              *SECURED EA*
000012C6  B83C 0001                368              CMP.B   #1,D4                    * ERROR FLAG CHECK [ERROR WHEN D4 == 1]
000012CA  6600 0012                369              BNE     OUTPUT_PROCESSED_DATA    * PRINTS PROCESSED OP-CODE & EA
000012CE  6100 01E8                370              BSR     OP_DATA                  * PRINT ERROR MESSAGE "DATA"
000012D2  6100 2932                371              BSR     CLEAR_STACK              * CLEARS THE STACK 
000012D6  183C 0000                372              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
000012DA  6000 0022                373              BRA     DISPLAY_30_LINES         * GO TO LAST STEP
000012DE                           374             
000012DE                           375  OUTPUT_PROCESSED_DATA       
000012DE  163C 000D                376              MOVE.B  #$D,D3                  *carriage return
000012E2  6100 28B6                377              BSR     PUSH_STACK
000012E6  163C 000A                378              MOVE.B  #$A,D3                  *new line feed
000012EA  6100 28AE                379              BSR     PUSH_STACK
000012EE  163C 0000                380              MOVE.B  #$0,D3                  *null
000012F2  6100 28A6                381              BSR     PUSH_STACK
000012F6                           382       
000012F6  6100 287E                383              BSR     PRINT_QUEUE
000012FA  183C 0000                384              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
000012FE                           385  DISPLAY_30_LINES
000012FE                           386              * display 30 lines per page
000012FE  5206                     387              ADDI.B  #1,D6
00001300  0C06 001E                388              CMPI.B  #30,D6
00001304  6C00 0006                389              BGE     NEXTLINES
00001308  6000 FF50                390              BRA     MAIN
0000130C                           391            
0000130C                           392  *---------------------------------------------------------------------------*
0000130C                           393  * NEXTLINES: receive input from user to print the next 30 lines
0000130C                           394  *---------------------------------------------------------------------------*  
0000130C  4206                     395  NEXTLINES   CLR.B   D6
0000130E  43F9 00003F5B            396              LEA     DISP_NEXT,A1
00001314  103C 000E                397              MOVE.B  #14,D0
00001318  4E4F                     398              TRAP    #15
0000131A  43F9 0000410F            399              LEA     TMPINPUT,A1
00001320  103C 0002                400              MOVE.B  #2,D0
00001324  4E4F                     401              TRAP    #15
00001326  4EF8 125A                402              JMP     MAIN
0000132A                           403    
0000132A                           404  *---------------------------------------------------------------------------*
0000132A                           405  * JMPTABLE: OP code jump/branch table used to decode and display opcodes
0000132A                           406  *---------------------------------------------------------------------------*  
0000132A  4EF9 0000138A            407  JMPTABLE    JMP     OP0000  * CMPI/ORI/BTST/EORI/SUBI/BTST
00001330  4EF9 000015B0            408              JMP     OP0001  * MOVE.B                                        *FINISHED - JOSEPH
00001336  4EF9 0000161E            409              JMP     OP0010  * MOVE.L/MOVEA.L                                *FINISHED - JOSEPH
0000133C  4EF9 0000171C            410              JMP     OP0011  * MOVE.W/MOVEA.W                                *FINISHED - JOSEPH
00001342  4EF9 00001818            411              JMP     OP0100  * MOVEM/LEA/NEG/NOT/JSR/RTS                     *FINISHED - JOSEPH
00001348  4EF9 00001A6E            412              JMP     OP0101  * ADDQ                                          *FINISHED - JOSEPH
0000134E  4EF9 00001C12            413              JMP     OP0110  * BRA/Bcc (BEQ/BNE/BLT/BHI)                     *NOT FINISHED - LYN
00001354  4EF9 00001CA0            414              JMP     OP0111  * MOVEQ (unassigned)                            *FINISHED - NEVER ASSIGNED
0000135A  4EF9 00001CA4            415              JMP     OP1000  * DIVS                                          *FINISHED - JOSEPH
00001360  4EF9 00001DAC            416              JMP     OP1001  * SUB/SUBA                                      *FINISHED - JOSEPH
00001366  4EF9 00002168            417              JMP     OP1010  * Unassigned                                    *FINISHED - NEVER ASSIGNED
0000136C  4EF9 0000216C            418              JMP     OP1011  * CMP/EOR/CMPA                                  *FINISHED - EOR/CMP - JOSEPH
00001372  4EF9 0000246C            419              JMP     OP1100  * MULS/AND                                      *FINISHED - JOSEPH
00001378  4EF9 000027BE            420              JMP     OP1101  * ADD/ADDA                                      *FINISHED - JOSEPH
0000137E  4EF9 00002B9A            421              JMP     OP1110  * LSR/LSL/ASR/ASL/ROL/ROR
00001384  4EF9 00002E48            422              JMP     OP1111  * Special/Reserved
0000138A                           423              
0000138A                           424  *---------------------------------------------------------------------------*
0000138A                           425  * OP0000: decode CMPI/ORI/BTST/SUBI/EORI
0000138A                           426  *---------------------------------------------------------------------------*           
0000138A                           427  OP0000                                                                                  
0000138A  4281                     428              CLR.L   D1          * to temporarily store the address to process
0000138C  4280                     429              CLR.L   D0  
0000138E  4284                     430              CLR.L   D4                 
00001390  227C 00000000            431              MOVEA.L #0, A1                
00001396                           432              * Check for ORI (0000 0000 xx (size) xxx (EA mode) xxx(EA reg)
00001396                           433              * Check if bit 11,10,9,8 are 0000)
00001396  2205                     434              MOVE.L  D5,D1
00001398  0281 00000F00            435              ANDI.L  #$0F00,D1
0000139E  0C81 00000000            436              CMPI.L  #$0000,D1   * if they are 0000, it is ORI
000013A4  6700 01B4                437              BEQ     OP_ORI
000013A8                           438  
000013A8                           439              * check for CMPI (0000 1100 xx (size) xxx (EA mode) xxx (EA reg)
000013A8                           440              * check if bit 11,10,9,8 are 1100
000013A8  4281                     441              CLR.L   D1
000013AA  2205                     442              MOVE.L  D5,D1
000013AC  0281 00000F00            443              ANDI.L  #$0F00,D1
000013B2  0C81 00000C00            444              CMPI.L  #$0C00,D1
000013B8  6700 014A                445              BEQ     OP_CMPI
000013BC                           446              
000013BC                           447              * check for SUBI
000013BC  4281                     448              CLR.L   D1
000013BE  2205                     449              MOVE.L  D5,D1
000013C0  0281 00000F00            450              ANDI.L  #$0F00,D1
000013C6  0C81 00000400            451              CMPI.L  #$0400,D1
000013CC  6700 0094                452              BEQ     OP_SUBI
000013D0                           453              
000013D0                           454              * check for EORI
000013D0  4281                     455              CLR.L   D1
000013D2  2205                     456              MOVE.L  D5,D1
000013D4  0281 00000F00            457              ANDI.L  #$0F00,D1
000013DA  0C81 00000A00            458              CMPI.L  #$0A00,D1
000013E0  6700 002A                459              BEQ     OP_EORI
000013E4                           460              
000013E4                           461              * check for BTST
000013E4  4281                     462              CLR.L   D1
000013E6  2205                     463              MOVE.L  D5,D1
000013E8  EA99                     464              ROR.L   #5,D1
000013EA  0281 00000008            465              ANDI.L  #$8,D1
000013F0  0C01 0008                466              CMPI.B  #8,D1
000013F4  6700 0008                467              BEQ     OP_BTST
000013F8                           468  
000013F8                           469              * OP0000 series other than ORI/CMPI/BTST/EORI
000013F8  4EF9 000014B8            470              JMP     OP_DATA
000013FE                           471              
000013FE                           472  *---------------------------------------------------------------------------*
000013FE                           473  * OP_BTST: display BTST
000013FE                           474  *---------------------------------------------------------------------------* 
000013FE  43F9 000041E8            475  OP_BTST     LEA     DISP_BTST,A1
00001404  103C 000E                476              MOVE.B  #14,D0
00001408  4E4F                     477              TRAP    #15
0000140A  4E75                     478              RTS
0000140C                           479  
0000140C                           480  *---------------------------------------------------------------------------*
0000140C                           481  * OP_EORI: decode and display EORI
0000140C                           482  *---------------------------------------------------------------------------* 
0000140C                           483  OP_EORI
0000140C  4281                     484              CLR.L   D1
0000140E  4284                     485              CLR.L   D4
00001410  2205                     486              MOVE.L  D5,D1
00001412  EC99                     487              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001414  0C01 0000                488              CMPI.B  #0,D1
00001418  6700 0012                489              BEQ     OP_EORI_B    * size is byte
0000141C  0C01 0001                490              CMPI.B  #1,D1
00001420  6700 001C                491              BEQ     OP_EORI_W    * size is word
00001424  0C01 0002                492              CMPI.B  #2,D1
00001428  6700 0026                493              BEQ     OP_EORI_L    * size is long
0000142C                           494  
0000142C                           495  OP_EORI_B    * size is byte    
0000142C  183C 0000                496              MOVE.B  #0,D4
00001430  43F9 000041CA            497              LEA     DISP_EORI_B,A1
00001436  103C 000E                498              MOVE.B  #14,D0
0000143A  4E4F                     499              TRAP    #15
0000143C  4E75                     500              RTS
0000143E                           501              
0000143E                           502  OP_EORI_W    * size is word
0000143E  183C 0001                503              MOVE.B  #1,D4
00001442  43F9 000041D4            504              LEA     DISP_EORI_W,A1
00001448  103C 000E                505              MOVE.B  #14,D0
0000144C  4E4F                     506              TRAP    #15
0000144E  4E75                     507              RTS
00001450                           508              
00001450                           509  OP_EORI_L    * size is long
00001450  183C 0002                510              MOVE.B  #2,D4
00001454  43F9 000041DE            511              LEA     DISP_EORI_L,A1
0000145A  103C 000E                512              MOVE.B  #14,D0
0000145E  4E4F                     513              TRAP    #15
00001460  4E75                     514              RTS
00001462                           515              
00001462                           516  *---------------------------------------------------------------------------*
00001462                           517  * OP_SUBI: decode SUBI.B/.W/.L
00001462                           518  *---------------------------------------------------------------------------* 
00001462                           519  OP_SUBI
00001462  4281                     520              CLR.L   D1
00001464  4284                     521              CLR.L   D4
00001466  2205                     522              MOVE.L  D5,D1
00001468  EC99                     523              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
0000146A  0C01 0000                524              CMPI.B  #0,D1
0000146E  6700 0012                525              BEQ     OP_SUBI_B    * size is byte
00001472  0C01 0001                526              CMPI.B  #1,D1
00001476  6700 001C                527              BEQ     OP_SUBI_W    * size is word
0000147A  0C01 0002                528              CMPI.B  #2,D1
0000147E  6700 0026                529              BEQ     OP_SUBI_L    * size is long
00001482                           530  
00001482                           531  OP_SUBI_B    * size is byte    
00001482  183C 0000                532              MOVE.B  #0,D4
00001486  43F9 000042D6            533              LEA     DISP_SUBI_B,A1
0000148C  103C 000E                534              MOVE.B  #14,D0
00001490  4E4F                     535              TRAP    #15
00001492  4E75                     536              RTS
00001494                           537              
00001494                           538  OP_SUBI_W    * size is word
00001494  183C 0001                539              MOVE.B  #1,D4
00001498  43F9 000042E0            540              LEA     DISP_SUBI_W,A1
0000149E  103C 000E                541              MOVE.B  #14,D0
000014A2  4E4F                     542              TRAP    #15
000014A4  4E75                     543              RTS
000014A6                           544              
000014A6                           545  OP_SUBI_L    * size is long
000014A6  183C 0002                546              MOVE.B  #2,D4
000014AA  43F9 000042EA            547              LEA     DISP_SUBI_L,A1
000014B0  103C 000E                548              MOVE.B  #14,D0
000014B4  4E4F                     549              TRAP    #15
000014B6  4E75                     550              RTS
000014B8                           551              
000014B8                           552  *---------------------------------------------------------------------------*
000014B8                           553  * OP_DATA : unidentified opcode
000014B8                           554  *---------------------------------------------------------------------------* 
000014B8                           555  OP_DATA
000014B8  4280                     556              CLR.L   D0                   
000014BA  4281                     557              CLR.L   D1     
000014BC  4284                     558              CLR.L   D4                    
000014BE  227C 00000000            559              MOVEA.L #0, A1             
000014C4  4287                     560              CLR.L   D7
000014C6  1E3C 0001                561              MOVE.B  #1,D7                   * error flag is true
000014CA                           562              
000014CA  43F9 0000420E            563              LEA     DISP_DATA,A1
000014D0  103C 000E                564              MOVE.B  #14,D0
000014D4  4E4F                     565              TRAP    #15
000014D6                           566              
000014D6  4EF9 000014DC            567              JMP     EA_DATA
000014DC                           568             
000014DC                           569             
000014DC                           570  *---------------------------------------------------------------------------*
000014DC                           571  * EA_DATA
000014DC                           572  *---------------------------------------------------------------------------*       
000014DC  43F9 0000415F            573  EA_DATA     LEA     TMPOUTPUT,A1    * load the temporarily stored output address
000014E2  2205                     574              MOVE.L  D5,D1           * transfer the processing data to D1
000014E4  7404                     575              MOVE.L  #4,D2           * set to word size
000014E6  4EB8 11B8                576              JSR     HEX2ASCII       * prepare output in ascii
000014EA  43F9 00004481            577              LEA     DISP_HEX,A1     * display $ symbol
000014F0  103C 000E                578              MOVE.B  #14,D0      
000014F4  4E4F                     579              TRAP    #15
000014F6  43F9 0000415F            580              LEA     TMPOUTPUT,A1    * display with a new line
000014FC  103C 000D                581              MOVE.B  #13,D0
00001500  4E4F                     582              TRAP    #15
00001502                           583  
00001502  4E75                     584              RTS
00001504                           585              
00001504                           586  *---------------------------------------------------------------------------*
00001504                           587  * OP_CMPI : decode CMPI and its size
00001504                           588  *---------------------------------------------------------------------------*          
00001504                           589  OP_CMPI
00001504  4281                     590              CLR.L   D1
00001506  4284                     591              CLR.L   D4
00001508  2205                     592              MOVE.L  D5,D1
0000150A  EC99                     593              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
0000150C  0C01 0000                594              CMPI.B  #0,D1
00001510  6700 0012                595              BEQ     OP_CMPI_B    * size is byte
00001514  0C01 0001                596              CMPI.B  #1,D1
00001518  6700 001C                597              BEQ     OP_CMPI_W    * size is word
0000151C  0C01 0002                598              CMPI.B  #2,D1
00001520  6700 0026                599              BEQ     OP_CMPI_L    * size is long
00001524                           600  
00001524                           601  OP_CMPI_B    * size is byte    
00001524  183C 0000                602              MOVE.B  #0,D4
00001528  43F9 000041F0            603              LEA     DISP_CMPI_B,A1
0000152E  103C 000E                604              MOVE.B  #14,D0
00001532  4E4F                     605              TRAP    #15
00001534  4E75                     606              RTS
00001536                           607              
00001536                           608  OP_CMPI_W    * size is word
00001536  183C 0001                609              MOVE.B  #1,D4
0000153A  43F9 000041FA            610              LEA     DISP_CMPI_W,A1
00001540  103C 000E                611              MOVE.B  #14,D0
00001544  4E4F                     612              TRAP    #15
00001546  4E75                     613              RTS
00001548                           614              
00001548                           615  OP_CMPI_L    * size is long
00001548  183C 0002                616              MOVE.B  #2,D4
0000154C  43F9 00004204            617              LEA     DISP_CMPI_L,A1
00001552  103C 000E                618              MOVE.B  #14,D0
00001556  4E4F                     619              TRAP    #15
00001558  4E75                     620              RTS
0000155A                           621   
0000155A                           622  *---------------------------------------------------------------------------*
0000155A                           623  * OP_ORI : decode ORI and its size
0000155A                           624  *---------------------------------------------------------------------------* 
0000155A                           625  OP_ORI      
0000155A  4281                     626              CLR.L   D1
0000155C  4284                     627              CLR.L   D4
0000155E  2205                     628              MOVE.L  D5,D1
00001560  EC99                     629              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001562  0C01 0000                630              CMPI.B  #0,D1
00001566  6700 0012                631              BEQ     OP_ORI_B    * size is byte
0000156A  0C01 0001                632              CMPI.B  #1,D1
0000156E  6700 001C                633              BEQ     OP_ORI_W    * size is word
00001572  0C01 0002                634              CMPI.B  #2,D1
00001576  6700 0026                635              BEQ     OP_ORI_L    * size is long
0000157A                           636  
0000157A                           637  OP_ORI_B    * size is byte    
0000157A  183C 0000                638              MOVE.B  #0,D4
0000157E  43F9 000041AF            639              LEA     DISP_ORI_B,A1
00001584  103C 000E                640              MOVE.B  #14,D0
00001588  4E4F                     641              TRAP    #15
0000158A  4E75                     642              RTS
0000158C                           643              
0000158C                           644  OP_ORI_W    * size is word
0000158C  183C 0001                645              MOVE.B  #1,D4
00001590  43F9 000041B8            646              LEA     DISP_ORI_W,A1
00001596  103C 000E                647              MOVE.B  #14,D0
0000159A  4E4F                     648              TRAP    #15
0000159C  4E75                     649              RTS
0000159E                           650              
0000159E                           651  OP_ORI_L    * size is long
0000159E  183C 0002                652              MOVE.B  #2,D4
000015A2  43F9 000041C1            653              LEA     DISP_ORI_L,A1
000015A8  103C 000E                654              MOVE.B  #14,D0
000015AC  4E4F                     655              TRAP    #15
000015AE  4E75                     656              RTS
000015B0                           657          
000015B0                           658  *---------------------------------------------------------------------------*
000015B0                           659  * OP0001: MOVE.B
000015B0                           660  *---------------------------------------------------------------------------*
000015B0                           661  OP0001      
000015B0  4EF9 000015B6            662              JMP     OP_MOVE_B   * display MOVE.B
000015B6                           663              
000015B6                           664  *---------------------------------------------------------------------------*
000015B6                           665  * OP_MOVE_B: display MOVE_B and proceed to EA
000015B6                           666  *---------------------------------------------------------------------------*
000015B6                           667  OP_MOVE_B                                                                       
000015B6                           668             
000015B6                           669             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000015B6  13FC 0082 000044C0       670             MOVE.B   #$82,DEST_REGISTER_FORMAT
000015BE  13FC 0000 000044C1       671             MOVE.B   #$00,SRC_REGISTER_FORMAT
000015C6                           672             
000015C6                           673             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000015C6  13FC 00B9 000044C3       674             MOVE.B   #$B9,GET_DST_START_END
000015CE  13FC 0020 000044C4       675             MOVE.B   #$20,GET_SRC_START_END
000015D6                           676             
000015D6                           677              *CLEAR D3
000015D6  4283                     678              CLR.L   D3
000015D8                           679              *LOAD STACK WITH THIS OPMODE
000015D8  6100 25C0                680              BSR     PUSH_STACK
000015DC  163C 004D                681              MOVE.B  #'M',D3
000015E0  6100 25B8                682              BSR     PUSH_STACK
000015E4  163C 004F                683              MOVE.B  #'O',D3
000015E8  6100 25B0                684              BSR     PUSH_STACK
000015EC  163C 0056                685              MOVE.B  #'V',D3
000015F0  6100 25A8                686              BSR     PUSH_STACK
000015F4  163C 0045                687              MOVE.B  #'E',D3
000015F8  6100 25A0                688              BSR     PUSH_STACK
000015FC  163C 002E                689              MOVE.B  #'.',D3
00001600  6100 2598                690              BSR     PUSH_STACK
00001604  163C 0042                691              MOVE.B  #'B',D3
00001608  6100 2590                692              BSR     PUSH_STACK
0000160C                           693              
0000160C  6100 1CEE                694              BSR     GET_EA_EA_SRC
00001610  163C 002C                695              MOVE.B  #',',D3
00001614  6100 2584                696              BSR     PUSH_STACK
00001618  6100 2112                697              BSR     GET_EA_EA_DEST
0000161C                           698              
0000161C  4E75                     699              RTS
0000161E                           700              
0000161E                           701             
0000161E                           702  *---------------------------------------------------------------------------*
0000161E                           703  * OP0010: decode MOVE.L/MOVEA.L
0000161E                           704  *---------------------------------------------------------------------------*
0000161E                           705  OP0010      
0000161E  183C 0002                706              MOVE.B  #2,D4
00001622  4280                     707              CLR.L   D0                     
00001624  4281                     708              CLR.L   D1                      
00001626  227C 00000000            709              MOVEA.L #0, A1                 
0000162C                           710              
0000162C  2205                     711              MOVE.L  D5,D1
0000162E  EA99                     712              ROR.L   #5,D1
00001630  0281 0000000E            713              ANDI.L  #$E,D1
00001636  0C01 0002                714              CMPI.B  #2,D1
0000163A  6700 0070                715              BEQ     OP_MOVEA_L
0000163E                           716  
0000163E  4EF9 00001644            717              JMP     OP_MOVE_L
00001644                           718             
00001644                           719  
00001644                           720  *---------------------------------------------------------------------------*
00001644                           721  * OP_MOVE_L: display MOVE_L and proceed to EA
00001644                           722  *---------------------------------------------------------------------------*
00001644                           723  OP_MOVE_L   
00001644                           724             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001644  13FC 0082 000044C0       725             MOVE.B   #$82,DEST_REGISTER_FORMAT
0000164C  13FC 0000 000044C1       726             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001654                           727             
00001654                           728             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001654  13FC 00B9 000044C3       729             MOVE.B   #$B9,GET_DST_START_END
0000165C  13FC 0020 000044C4       730             MOVE.B   #$20,GET_SRC_START_END
00001664                           731             
00001664                           732              *CLEAR D3
00001664  4283                     733              CLR.L   D3
00001666                           734              *LOAD STACK WITH THIS OPMODE
00001666  6100 2532                735              BSR     PUSH_STACK
0000166A  163C 004D                736              MOVE.B  #'M',D3
0000166E  6100 252A                737              BSR     PUSH_STACK
00001672  163C 004F                738              MOVE.B  #'O',D3
00001676  6100 2522                739              BSR     PUSH_STACK
0000167A  163C 0056                740              MOVE.B  #'V',D3
0000167E  6100 251A                741              BSR     PUSH_STACK
00001682  163C 0045                742              MOVE.B  #'E',D3
00001686  6100 2512                743              BSR     PUSH_STACK
0000168A  163C 002E                744              MOVE.B  #'.',D3
0000168E  6100 250A                745              BSR     PUSH_STACK
00001692  163C 004C                746              MOVE.B  #'L',D3
00001696  6100 2502                747              BSR     PUSH_STACK
0000169A                           748              
0000169A  6100 1C60                749              BSR     GET_EA_EA_SRC
0000169E  163C 002C                750              MOVE.B  #',',D3
000016A2  6100 24F6                751              BSR     PUSH_STACK
000016A6  6100 2084                752              BSR     GET_EA_EA_DEST
000016AA                           753              
000016AA  4E75                     754              RTS
000016AC                           755  
000016AC                           756  
000016AC                           757  *---------------------------------------------------------------------------*
000016AC                           758  * OP_MOVEA_L: display MOVEA_L and proceed to EA
000016AC                           759  *---------------------------------------------------------------------------*
000016AC                           760  OP_MOVEA_L 
000016AC                           761             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000016AC  13FC 00FD 000044C0       762             MOVE.B   #$FD,DEST_REGISTER_FORMAT
000016B4  13FC 0000 000044C1       763             MOVE.B   #$00,SRC_REGISTER_FORMAT
000016BC                           764             
000016BC                           765             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000016BC  13FC 00B9 000044C3       766             MOVE.B   #$B9,GET_DST_START_END
000016C4  13FC 0020 000044C4       767             MOVE.B   #$20,GET_SRC_START_END
000016CC                           768             
000016CC                           769              *CLEAR D3
000016CC  4283                     770              CLR.L   D3
000016CE                           771              *LOAD STACK WITH THIS OPMODE
000016CE  6100 24CA                772              BSR     PUSH_STACK
000016D2  163C 004D                773              MOVE.B  #'M',D3
000016D6  6100 24C2                774              BSR     PUSH_STACK
000016DA  163C 004F                775              MOVE.B  #'O',D3
000016DE  6100 24BA                776              BSR     PUSH_STACK
000016E2  163C 0056                777              MOVE.B  #'V',D3
000016E6  6100 24B2                778              BSR     PUSH_STACK
000016EA  163C 0045                779              MOVE.B  #'E',D3
000016EE  6100 24AA                780              BSR     PUSH_STACK           
000016F2  163C 0041                781              MOVE.B  #'A',D3
000016F6  6100 24A2                782              BSR     PUSH_STACK
000016FA  163C 002E                783              MOVE.B  #'.',D3
000016FE  6100 249A                784              BSR     PUSH_STACK
00001702  163C 004C                785              MOVE.B  #'L',D3
00001706  6100 2492                786              BSR     PUSH_STACK
0000170A                           787              
0000170A  6100 1BF0                788              BSR     GET_EA_EA_SRC
0000170E  163C 002C                789              MOVE.B  #',',D3
00001712  6100 2486                790              BSR     PUSH_STACK
00001716  6100 2014                791              BSR     GET_EA_EA_DEST
0000171A                           792              
0000171A  4E75                     793              RTS
0000171C                           794  
0000171C                           795              
0000171C                           796  *---------------------------------------------------------------------------*
0000171C                           797  * OP0011: decode MOVE.W/MOVEA.W
0000171C                           798  *---------------------------------------------------------------------------*
0000171C                           799  OP0011      
0000171C  4280                     800              CLR.L   D0                      
0000171E  4281                     801              CLR.L   D1  
00001720  4284                     802              CLR.L   D4                   
00001722  227C 00000000            803              MOVEA.L #0, A1 
00001728                           804                
00001728  2205                     805              MOVE.L  D5,D1
0000172A  EC99                     806              ROR.L   #6,D1
0000172C  0281 00000007            807              ANDI.L  #$07,D1
00001732  0C01 0001                808              CMPI.B  #1,D1
00001736  6700 0070                809              BEQ     OP_MOVEA_W
0000173A                           810              
0000173A  4EF9 00001740            811              JMP     OP_MOVE_W
00001740                           812            
00001740                           813  *---------------------------------------------------------------------------*
00001740                           814  * OP_MOVE_W: display MOVE_W and proceed to EA
00001740                           815  *---------------------------------------------------------------------------*
00001740                           816  OP_MOVE_W   
00001740                           817             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001740  13FC 0082 000044C0       818             MOVE.B   #$82,DEST_REGISTER_FORMAT
00001748  13FC 0000 000044C1       819             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001750                           820             
00001750                           821             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001750  13FC 00B9 000044C3       822             MOVE.B   #$B9,GET_DST_START_END
00001758  13FC 0020 000044C4       823             MOVE.B   #$20,GET_SRC_START_END
00001760                           824             
00001760                           825              *CLEAR D3
00001760  4283                     826              CLR.L   D3
00001762                           827              *LOAD STACK WITH THIS OPMODE
00001762  6100 2436                828              BSR     PUSH_STACK
00001766  163C 004D                829              MOVE.B  #'M',D3
0000176A  6100 242E                830              BSR     PUSH_STACK
0000176E  163C 004F                831              MOVE.B  #'O',D3
00001772  6100 2426                832              BSR     PUSH_STACK
00001776  163C 0056                833              MOVE.B  #'V',D3
0000177A  6100 241E                834              BSR     PUSH_STACK
0000177E  163C 0045                835              MOVE.B  #'E',D3
00001782  6100 2416                836              BSR     PUSH_STACK
00001786  163C 002E                837              MOVE.B  #'.',D3
0000178A  6100 240E                838              BSR     PUSH_STACK
0000178E  163C 0057                839              MOVE.B  #'W',D3
00001792  6100 2406                840              BSR     PUSH_STACK
00001796                           841              
00001796  6100 1B64                842              BSR     GET_EA_EA_SRC
0000179A  163C 002C                843              MOVE.B  #',',D3
0000179E  6100 23FA                844              BSR     PUSH_STACK
000017A2  6100 1F88                845              BSR     GET_EA_EA_DEST
000017A6                           846              
000017A6  4E75                     847              RTS
000017A8                           848  
000017A8                           849  *---------------------------------------------------------------------------*
000017A8                           850  * OP_MOVEA_W: display MOVEA and proceed to EA
000017A8                           851  *---------------------------------------------------------------------------*
000017A8                           852  OP_MOVEA_W 
000017A8                           853             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000017A8  13FC 00FD 000044C0       854             MOVE.B   #$FD,DEST_REGISTER_FORMAT
000017B0  13FC 0000 000044C1       855             MOVE.B   #$00,SRC_REGISTER_FORMAT
000017B8                           856             
000017B8                           857             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000017B8  13FC 00B9 000044C3       858             MOVE.B   #$B9,GET_DST_START_END
000017C0  13FC 0020 000044C4       859             MOVE.B   #$20,GET_SRC_START_END
000017C8                           860             
000017C8                           861              *CLEAR D3
000017C8  4283                     862              CLR.L   D3
000017CA                           863              *LOAD STACK WITH THIS OPMODE
000017CA  6100 23CE                864              BSR     PUSH_STACK
000017CE  163C 004D                865              MOVE.B  #'M',D3
000017D2  6100 23C6                866              BSR     PUSH_STACK
000017D6  163C 004F                867              MOVE.B  #'O',D3
000017DA  6100 23BE                868              BSR     PUSH_STACK
000017DE  163C 0056                869              MOVE.B  #'V',D3
000017E2  6100 23B6                870              BSR     PUSH_STACK
000017E6  163C 0045                871              MOVE.B  #'E',D3
000017EA  6100 23AE                872              BSR     PUSH_STACK           
000017EE  163C 0041                873              MOVE.B  #'A',D3
000017F2  6100 23A6                874              BSR     PUSH_STACK
000017F6  163C 002E                875              MOVE.B  #'.',D3
000017FA  6100 239E                876              BSR     PUSH_STACK
000017FE  163C 0057                877              MOVE.B  #'W',D3
00001802  6100 2396                878              BSR     PUSH_STACK
00001806                           879              
00001806  6100 1AF4                880              BSR     GET_EA_EA_SRC
0000180A  163C 002C                881              MOVE.B  #',',D3
0000180E  6100 238A                882              BSR     PUSH_STACK
00001812  6100 1F18                883              BSR     GET_EA_EA_DEST
00001816                           884            
00001816  4E75                     885              RTS
00001818                           886  *---------------------------------------------------------------------------*
00001818                           887  * OP0100: decode MOVEM/LEA/NEG/JSR/RTS/NOT
00001818                           888  *---------------------------------------------------------------------------*
00001818                           889  OP0100
00001818  4280                     890              CLR.L   D0                      
0000181A  4281                     891              CLR.L   D1  
0000181C  4284                     892              CLR.L   D4                      
0000181E  227C 00000000            893              MOVEA.L #0, A1                  
00001824  2205                     894              MOVE.L  D5,D1  
00001826                           895              
00001826                           896              * check for RTS
00001826  0C41 4E75                897              CMPI.W  #$4E75,D1   * 0100 1110 0111 0101
0000182A  6700 0228                898              BEQ     OP_RTS
0000182E                           899              
0000182E                           900              * check for JSR     * 0100 1110 10 xxx (ea mode) xxx (ea reg)
0000182E  4281                     901              CLR.L   D1 
00001830  2205                     902              MOVE.L  D5,D1  
00001832  0241 0F00                903              ANDI.W  #$0F00,D1
00001836  0C41 0E00                904              CMPI.W  #$0E00,D1
0000183A  6700 0204                905              BEQ     OP_JSR
0000183E                           906  
0000183E                           907              * check for NEG     * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
0000183E  4281                     908              CLR.L   D1 
00001840  2205                     909              MOVE.L  D5,D1  
00001842  0241 0F00                910              ANDI.W  #$0F00,D1
00001846  0C41 0400                911              CMPI.W  #$0400,D1
0000184A  6700 00E8                912              BEQ     OP_NEG
0000184E                           913              
0000184E                           914              * check for NOT     * 0100 0110 xx (size) xxx (ea mode) xxx (ea reg)
0000184E  4281                     915              CLR.L   D1 
00001850  2205                     916              MOVE.L  D5,D1  
00001852  0241 0F00                917              ANDI.W  #$0F00,D1
00001856  0C41 0600                918              CMPI.W  #$0600,D1
0000185A  6700 015E                919              BEQ     OP_NOT
0000185E                           920              
0000185E                           921              * check for LEA     * 0100 xxx (reg) 111 xxx (ea mode) xxx (ea reg)
0000185E  4281                     922              CLR.L   D1 
00001860  2205                     923              MOVE.L  D5,D1  
00001862  EC99                     924              ROR.L   #6,D1
00001864  0281 00000007            925              ANDI.L  #7,D1
0000186A  0C81 00000007            926              CMPI.L  #7,D1
00001870  6700 0054                927              BEQ     OP_LEA
00001874                           928              
00001874                           929              * check for MOVEM   * 0100 1 x 001 x (size) xxx (ea mode) xxx (ea reg)
00001874  4281                     930              CLR.L   D1 
00001876  2205                     931              MOVE.L  D5,D1  
00001878  EB59                     932              ROL.W   #5,D1
0000187A  0C01 0001                933              CMPI.B  #1,D1
0000187E  6600 FC38                934              BNE     OP_DATA
00001882  E959                     935              ROL.W   #4,D1
00001884  0C01 0001                936              CMPI.B  #1,D1
00001888  6600 FC2E                937              BNE     OP_DATA
0000188C  E359                     938              ROL.W   #1,D1
0000188E  0C01 0000                939              CMPI.B  #0,D1
00001892  6700 000E                940              BEQ     OP_MOVEM_W
00001896  0C01 0001                941              CMPI.B  #1,D1
0000189A  6700 0018                942              BEQ     OP_MOVEM_L
0000189E  4EF8 14B8                943              JMP     OP_DATA
000018A2                           944  
000018A2                           945  *---------------------------------------------------------------------------*
000018A2                           946  * OP_MOVEM_W: display MOVEM_W
000018A2                           947  *---------------------------------------------------------------------------*    
000018A2                           948  OP_MOVEM_W  
000018A2  183C 0001                949              MOVE.B  #1,D4
000018A6  43F9 0000427F            950              LEA     DISP_MOVEM_W,A1
000018AC  103C 000E                951              MOVE.B  #14,D0
000018B0  4E4F                     952              TRAP    #15
000018B2  4E75                     953              RTS
000018B4                           954  
000018B4                           955  *---------------------------------------------------------------------------*
000018B4                           956  * OP_MOVEM_L: display MOVEM_L
000018B4                           957  *---------------------------------------------------------------------------*
000018B4                           958  OP_MOVEM_L  
000018B4  183C 0002                959              MOVE.B  #2,D4
000018B8  43F9 0000428A            960              LEA     DISP_MOVEM_L,A1
000018BE  103C 000E                961              MOVE.B  #14,D0
000018C2  4E4F                     962              TRAP    #15
000018C4  4E75                     963              RTS
000018C6                           964     
000018C6                           965  *---------------------------------------------------------------------------*
000018C6                           966  * OP_LEA: decode and display LEA
000018C6                           967  *---------------------------------------------------------------------------*
000018C6                           968  OP_LEA      
000018C6  4281                     969               CLR.L   D1       
000018C8  4284                     970              CLR.L   D4                   
000018CA  227C 00000000            971              MOVEA.L #0, A1              
000018D0  2205                     972              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
000018D2                           973              *CLEAR D3
000018D2  4283                     974              CLR.L   D3
000018D4                           975  
000018D4                           976  OP_LEA_DN_EA_OR_EA_DN 
000018D4                           977              *LOAD STACK WITH THIS OPMODE
000018D4  6100 22C4                978              BSR     PUSH_STACK
000018D8  163C 004C                979              MOVE.B  #'L',D3
000018DC  6100 22BC                980              BSR     PUSH_STACK
000018E0  163C 0045                981              MOVE.B  #'E',D3
000018E4  6100 22B4                982              BSR     PUSH_STACK
000018E8  163C 0041                983              MOVE.B  #'A',D3
000018EC  6100 22AC                984              BSR     PUSH_STACK
000018F0  2205                     985              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
000018F2                           986          
000018F2                           987  
000018F2                           988  OP_PRINT_L_LEA
000018F2                           989                          
000018F2                           990              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000018F2  13FC 0000 000044C0       991              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000018FA  13FC 009B 000044C1       992              MOVE.B   #$9B,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001902                           993             
00001902                           994              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001902  13FC 00B9 000044C3       995              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000190A  13FC 0020 000044C4       996              MOVE.B   #$20,GET_SRC_START_END
00001912                           997  
00001912                           998              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001912  0285 0000FE3F            999              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001918  0685 00000040           1000              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
0000191E                          1001  
0000191E  6100 19DC               1002              BSR     GET_EA_EA_SRC      *GETS <ea>
00001922  163C 002C               1003              MOVE.B  #',',D3
00001926  6100 2272               1004              BSR     PUSH_STACK           
0000192A  6100 1E00               1005              BSR     GET_EA_EA_DEST       *GETS Dn    
0000192E                          1006  
0000192E                          1007              
0000192E  6000 0002               1008              BRA     OP_LEA_RETURN
00001932                          1009              
00001932                          1010  OP_LEA_RETURN
00001932  4E75                    1011              RTS
00001934                          1012              
00001934                          1013  
00001934                          1014  
00001934                          1015  *---------------------------------------------------------------------------*
00001934                          1016  * OP_NEG: decode and display NEG 
00001934                          1017  *---------------------------------------------------------------------------*
00001934                          1018  OP_NEG      * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
00001934  4281                    1019              CLR.L   D1
00001936  4284                    1020              CLR.L   D4
00001938  2205                    1021              MOVE.L  D5,D1
0000193A                          1022              
0000193A                          1023              *CLEAR D3
0000193A  4283                    1024              CLR.L   D3
0000193C                          1025              *LOAD STACK WITH THIS OPMODE
0000193C  6100 225C               1026              BSR     PUSH_STACK
00001940  163C 004E               1027              MOVE.B  #'N',D3
00001944  6100 2254               1028              BSR     PUSH_STACK
00001948  163C 0045               1029              MOVE.B  #'E',D3
0000194C  6100 224C               1030              BSR     PUSH_STACK
00001950  163C 0047               1031              MOVE.B  #'G',D3
00001954  6100 2244               1032              BSR     PUSH_STACK
00001958  163C 002E               1033              MOVE.B  #'.',D3
0000195C  6100 223C               1034              BSR     PUSH_STACK
00001960                          1035              
00001960                          1036              
00001960  EC99                    1037              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001962  0281 00000007           1038              ANDI.L  #$07,D1
00001968                          1039              
00001968  0C01 0000               1040              CMPI.B  #0,D1
0000196C  6700 0012               1041              BEQ     OP_NEG_B    * size is byte
00001970  0C01 0001               1042              CMPI.B  #1,D1
00001974  6700 0016               1043              BEQ     OP_NEG_W    * size is word
00001978  0C01 0002               1044              CMPI.B  #2,D1
0000197C  6700 001A               1045              BEQ     OP_NEG_L    * size is long
00001980                          1046                         
00001980                          1047  
00001980                          1048  OP_NEG_B    * size is byte   
00001980  163C 0042               1049              MOVE.B  #'B',D3
00001984  6100 2214               1050              BSR     PUSH_STACK
00001988  6000 001A               1051              BRA     OP_NEG_PRINT_EA
0000198C                          1052  
0000198C                          1053              
0000198C                          1054  OP_NEG_W    * size is word
0000198C  163C 0057               1055              MOVE.B  #'W',D3
00001990  6100 2208               1056              BSR     PUSH_STACK
00001994  6000 000E               1057              BRA     OP_NEG_PRINT_EA
00001998                          1058  
00001998                          1059              
00001998                          1060  OP_NEG_L    * size is long
00001998  163C 004C               1061              MOVE.B  #'L',D3
0000199C  6100 21FC               1062              BSR     PUSH_STACK
000019A0  6000 0002               1063              BRA     OP_NEG_PRINT_EA
000019A4                          1064  
000019A4                          1065  
000019A4                          1066  OP_NEG_PRINT_EA
000019A4                          1067   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000019A4  13FC 0082 000044C1      1068             MOVE.B   #$82,SRC_REGISTER_FORMAT
000019AC                          1069             
000019AC                          1070             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000019AC  13FC 0020 000044C4      1071             MOVE.B   #$20,GET_SRC_START_END
000019B4                          1072                         
000019B4                          1073  
000019B4  6100 1946               1074              BSR     GET_EA_EA_SRC
000019B8                          1075              
000019B8  4E75                    1076              RTS
000019BA                          1077  
000019BA                          1078  *---------------------------------------------------------------------------*
000019BA                          1079  * OP_NOT: decode and display NOT 
000019BA                          1080  *---------------------------------------------------------------------------*
000019BA                          1081  OP_NOT
000019BA  4281                    1082              CLR.L   D1
000019BC  4284                    1083              CLR.L   D4
000019BE  2205                    1084              MOVE.L  D5,D1
000019C0                          1085              
000019C0                          1086              *CLEAR D3
000019C0  4283                    1087              CLR.L   D3
000019C2                          1088              *LOAD STACK WITH THIS OPMODE
000019C2  6100 21D6               1089              BSR     PUSH_STACK
000019C6  163C 004E               1090              MOVE.B  #'N',D3
000019CA  6100 21CE               1091              BSR     PUSH_STACK
000019CE  163C 004F               1092              MOVE.B  #'O',D3
000019D2  6100 21C6               1093              BSR     PUSH_STACK
000019D6  163C 0054               1094              MOVE.B  #'T',D3
000019DA  6100 21BE               1095              BSR     PUSH_STACK
000019DE  163C 002E               1096              MOVE.B  #'.',D3
000019E2  6100 21B6               1097              BSR     PUSH_STACK
000019E6                          1098              
000019E6                          1099              
000019E6  EC99                    1100              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000019E8  0281 00000007           1101              ANDI.L  #$07,D1
000019EE                          1102              
000019EE  0C01 0000               1103              CMPI.B  #0,D1
000019F2  6700 0012               1104              BEQ     OP_NOT_B    * size is byte
000019F6  0C01 0001               1105              CMPI.B  #1,D1
000019FA  6700 0016               1106              BEQ     OP_NOT_W    * size is word
000019FE  0C01 0002               1107              CMPI.B  #2,D1
00001A02  6700 001A               1108              BEQ     OP_NOT_L    * size is long
00001A06                          1109                         
00001A06                          1110  
00001A06                          1111  OP_NOT_B    * size is byte   
00001A06  163C 0042               1112              MOVE.B  #'B',D3
00001A0A  6100 218E               1113              BSR     PUSH_STACK
00001A0E  6000 001A               1114              BRA     OP_NOT_PRINT_EA
00001A12                          1115  
00001A12                          1116              
00001A12                          1117  OP_NOT_W    * size is word
00001A12  163C 0057               1118              MOVE.B  #'W',D3
00001A16  6100 2182               1119              BSR     PUSH_STACK
00001A1A  6000 000E               1120              BRA     OP_NOT_PRINT_EA
00001A1E                          1121  
00001A1E                          1122              
00001A1E                          1123  OP_NOT_L    * size is long
00001A1E  163C 004C               1124              MOVE.B  #'L',D3
00001A22  6100 2176               1125              BSR     PUSH_STACK
00001A26  6000 0002               1126              BRA     OP_NOT_PRINT_EA
00001A2A                          1127  
00001A2A                          1128  
00001A2A                          1129  OP_NOT_PRINT_EA
00001A2A                          1130   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001A2A  13FC 0082 000044C1      1131             MOVE.B   #$82,SRC_REGISTER_FORMAT
00001A32                          1132             
00001A32                          1133             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001A32  13FC 0020 000044C4      1134             MOVE.B   #$20,GET_SRC_START_END
00001A3A  6100 18C0               1135              BSR     GET_EA_EA_SRC
00001A3E                          1136              
00001A3E  4E75                    1137              RTS
00001A40                          1138  
00001A40                          1139  
00001A40                          1140  *---------------------------------------------------------------------------*
00001A40                          1141  * OP_JSR: display JSR     
00001A40                          1142  *---------------------------------------------------------------------------*
00001A40  43F9 0000423B           1143  OP_JSR      LEA     DISP_JSR,A1
00001A46  103C 000E               1144              MOVE.B  #14,D0
00001A4A  4E4F                    1145              TRAP    #15
00001A4C  4EB9 00002E4C           1146              JSR     EA_NOSRC
00001A52                          1147  
00001A52  4E75                    1148              RTS
00001A54                          1149  
00001A54                          1150  *---------------------------------------------------------------------------*
00001A54                          1151  * OP_RTS: display RTS     
00001A54                          1152  *---------------------------------------------------------------------------* 
00001A54                          1153  OP_RTS      
00001A54  163C 0052               1154              MOVE.B #'R',D3
00001A58  6100 2140               1155              BSR     PUSH_STACK
00001A5C  163C 0054               1156              MOVE.B #'T',D3
00001A60  6100 2138               1157              BSR     PUSH_STACK
00001A64  163C 0053               1158              MOVE.B #'S',D3
00001A68  6100 2130               1159              BSR     PUSH_STACK
00001A6C  4E75                    1160              RTS
00001A6E                          1161  
00001A6E                          1162  *---------------------------------------------------------------------------*
00001A6E                          1163  * OP0101: decode ADDQ
00001A6E                          1164  *---------------------------------------------------------------------------* 
00001A6E                          1165  OP0101      
00001A6E                          1166             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001A6E  13FC 0082 000044C0      1167             MOVE.B   #$82,DEST_REGISTER_FORMAT
00001A76  13FC 0080 000044C1      1168             MOVE.B   #$80,SRC_REGISTER_FORMAT
00001A7E                          1169             
00001A7E                          1170             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001A7E  13FC 00B9 000044C3      1171             MOVE.B   #$B9,GET_DST_START_END
00001A86  13FC 0020 000044C4      1172             MOVE.B   #$20,GET_SRC_START_END
00001A8E                          1173             
00001A8E                          1174              *CLEAR D3
00001A8E  4283                    1175              CLR.L   D3
00001A90                          1176              *LOAD STACK WITH THIS OPMODE
00001A90  6100 2108               1177              BSR     PUSH_STACK
00001A94  163C 0041               1178              MOVE.B  #'A',D3
00001A98  6100 2100               1179              BSR     PUSH_STACK
00001A9C  163C 0044               1180              MOVE.B  #'D',D3
00001AA0  6100 20F8               1181              BSR     PUSH_STACK
00001AA4  163C 0044               1182              MOVE.B  #'D',D3
00001AA8  6100 20F0               1183              BSR     PUSH_STACK
00001AAC  163C 0051               1184              MOVE.B  #'Q',D3
00001AB0  6100 20E8               1185              BSR     PUSH_STACK
00001AB4  163C 002E               1186              MOVE.B  #'.',D3
00001AB8  6100 20E0               1187              BSR     PUSH_STACK
00001ABC                          1188              
00001ABC                          1189              *FIGURE OUT SIZE*
00001ABC                          1190              *00 = BYTE
00001ABC                          1191              *01 = WORD
00001ABC                          1192              *10 = LONG
00001ABC                          1193              * BITS 7&6
00001ABC                          1194              
00001ABC                          1195              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
00001ABC  2205                    1196              MOVE.L  D5,D1
00001ABE  EC99                    1197              ROR.L   #6,D1
00001AC0  0281 00000003           1198              ANDI.L  #$03,D1
00001AC6  0C01 0000               1199              CMPI.B  #%00,D1
00001ACA  6700 001E               1200              BEQ     OP0101_ADDQ_B
00001ACE  0281 00000003           1201              ANDI.L  #$03,D1
00001AD4  0C01 0001               1202              CMPI.B  #%01,D1
00001AD8  6700 001C               1203              BEQ     OP0101_ADDQ_W
00001ADC  0281 00000003           1204              ANDI.L  #$03,D1
00001AE2  0C01 0002               1205              CMPI.B  #%10,D1
00001AE6  6700 001A               1206              BEQ     OP0101_ADDQ_L
00001AEA                          1207            
00001AEA                          1208  OP0101_ADDQ_B
00001AEA                          1209              
00001AEA  163C 0042               1210              MOVE.B  #'B',D3
00001AEE  6100 20AA               1211              BSR     PUSH_STACK
00001AF2  6000 0016               1212              BRA     OP0101_RETURN
00001AF6                          1213  OP0101_ADDQ_W
00001AF6                          1214              
00001AF6  163C 0057               1215              MOVE.B  #'W',D3
00001AFA  6100 209E               1216              BSR     PUSH_STACK
00001AFE  6000 000A               1217              BRA     OP0101_RETURN
00001B02                          1218  OP0101_ADDQ_L
00001B02                          1219              
00001B02  163C 004C               1220              MOVE.B  #'L',D3
00001B06  6100 2092               1221              BSR     PUSH_STACK
00001B0A                          1222  OP0101_RETURN            
00001B0A                          1223  
00001B0A                          1224              
00001B0A                          1225  *GET DATA FROM ADDQ AND PRINT #0-8
00001B0A  163C 0020               1226              MOVE.B  #' ',D3
00001B0E  6100 208A               1227              BSR     PUSH_STACK
00001B12  163C 0023               1228              MOVE.B  #'#',D3
00001B16  6100 2082               1229              BSR     PUSH_STACK 
00001B1A                          1230  
00001B1A                          1231                       
00001B1A                          1232              *GET DATA #   
00001B1A  2205                    1233              MOVE.L  D5,D1
00001B1C  EC99                    1234              ROR.L   #6,D1            
00001B1E  E699                    1235              ROR.L   #3,D1
00001B20  0281 00000007           1236              ANDI.L  #$07,D1
00001B26                          1237              
00001B26  0C01 0000               1238              CMPI.B  #%000,D1
00001B2A  6700 009A               1239              BEQ     OP0101_ADDQ_B_8
00001B2E  0C01 0001               1240              CMPI.B  #%001,D1
00001B32  6700 003E               1241              BEQ     OP0101_ADDQ_B_1
00001B36  0C01 0002               1242              CMPI.B  #%010,D1
00001B3A  6700 0042               1243              BEQ     OP0101_ADDQ_B_2
00001B3E  0C01 0003               1244              CMPI.B  #%011,D1
00001B42  6700 0046               1245              BEQ     OP0101_ADDQ_B_3
00001B46  0C01 0004               1246              CMPI.B  #%100,D1
00001B4A  6700 004A               1247              BEQ     OP0101_ADDQ_B_4
00001B4E  0C01 0005               1248              CMPI.B  #%101,D1
00001B52  6700 004E               1249              BEQ     OP0101_ADDQ_B_5
00001B56  0C01 0006               1250              CMPI.B  #%110,D1
00001B5A  6700 0052               1251              BEQ     OP0101_ADDQ_B_6
00001B5E  0C01 0007               1252              CMPI.B  #%111,D1
00001B62  6700 0056               1253              BEQ     OP0101_ADDQ_B_7
00001B66                          1254              
00001B66                          1255  OP0101_ADDQ_B_0
00001B66  163C 0030               1256              MOVE.B  #'0',D3
00001B6A  6100 202E               1257              BSR     PUSH_STACK
00001B6E  6000 005E               1258              BRA     OP0101_RETURN2            
00001B72                          1259  OP0101_ADDQ_B_1
00001B72  163C 0031               1260              MOVE.B  #'1',D3
00001B76  6100 2022               1261              BSR     PUSH_STACK
00001B7A  6000 0052               1262              BRA     OP0101_RETURN2            
00001B7E                          1263  OP0101_ADDQ_B_2
00001B7E  163C 0032               1264              MOVE.B  #'2',D3
00001B82  6100 2016               1265              BSR     PUSH_STACK
00001B86  6000 0046               1266              BRA     OP0101_RETURN2            
00001B8A                          1267  OP0101_ADDQ_B_3
00001B8A  163C 0033               1268              MOVE.B  #'3',D3
00001B8E  6100 200A               1269              BSR     PUSH_STACK
00001B92  6000 003A               1270              BRA     OP0101_RETURN2            
00001B96                          1271  OP0101_ADDQ_B_4
00001B96  163C 0034               1272              MOVE.B  #'4',D3
00001B9A  6100 1FFE               1273              BSR     PUSH_STACK
00001B9E  6000 002E               1274              BRA     OP0101_RETURN2            
00001BA2                          1275  OP0101_ADDQ_B_5
00001BA2  163C 0035               1276              MOVE.B  #'5',D3
00001BA6  6100 1FF2               1277              BSR     PUSH_STACK
00001BAA  6000 0022               1278              BRA     OP0101_RETURN2
00001BAE                          1279  OP0101_ADDQ_B_6
00001BAE  163C 0036               1280              MOVE.B  #'6',D3
00001BB2  6100 1FE6               1281              BSR     PUSH_STACK
00001BB6  6000 0016               1282              BRA     OP0101_RETURN2
00001BBA                          1283  OP0101_ADDQ_B_7
00001BBA  163C 0037               1284              MOVE.B  #'7',D3
00001BBE  6100 1FDA               1285              BSR     PUSH_STACK
00001BC2  6000 000A               1286              BRA     OP0101_RETURN2
00001BC6                          1287  
00001BC6                          1288  OP0101_ADDQ_B_8
00001BC6  163C 0038               1289              MOVE.B  #'8',D3
00001BCA  6100 1FCE               1290              BSR     PUSH_STACK
00001BCE                          1291              
00001BCE                          1292  OP0101_RETURN2            
00001BCE  163C 002C               1293              MOVE.B  #',',D3
00001BD2  6100 1FC6               1294              BSR     PUSH_STACK
00001BD6  6100 1724               1295              BSR     GET_EA_EA_SRC
00001BDA                          1296              
00001BDA  4E75                    1297              RTS
00001BDC                          1298  
00001BDC                          1299  
00001BDC                          1300              
00001BDC                          1301  *---------------------------------------------------------------------------*
00001BDC                          1302  * OP_ADDQ: display ADDQ
00001BDC                          1303  *---------------------------------------------------------------------------*              
00001BDC                          1304  OP_ADDQ_B    * size is byte   
00001BDC  183C 0000               1305              MOVE.B  #0,D4 
00001BE0  43F9 00004295           1306              LEA     DISP_ADDQ_B,A1
00001BE6  103C 000E               1307              MOVE.B  #14,D0
00001BEA  4E4F                    1308              TRAP    #15
00001BEC  4E75                    1309              RTS
00001BEE                          1310              
00001BEE                          1311  OP_ADDQ_W    * size is word
00001BEE  183C 0001               1312              MOVE.B  #1,D4
00001BF2  43F9 0000429F           1313              LEA     DISP_ADDQ_W,A1
00001BF8  103C 000E               1314              MOVE.B  #14,D0
00001BFC  4E4F                    1315              TRAP    #15
00001BFE  4E75                    1316              RTS
00001C00                          1317              
00001C00                          1318  OP_ADDQ_L    * size is long
00001C00  183C 0002               1319              MOVE.B  #2,D4
00001C04  43F9 000042A9           1320              LEA     DISP_ADDQ_L,A1
00001C0A  103C 000E               1321              MOVE.B  #14,D0
00001C0E  4E4F                    1322              TRAP    #15
00001C10  4E75                    1323              RTS
00001C12                          1324  
00001C12                          1325  *---------------------------------------------------------------------------*
00001C12                          1326  * OP0110: decode BRA/BEQ/BNE/BLT/BHI
00001C12                          1327  *---------------------------------------------------------------------------*              
00001C12  4280                    1328  OP0110      CLR.L   D0                  
00001C14  4281                    1329              CLR.L   D1   
00001C16  4284                    1330              CLR.L   D4                 
00001C18  227C 00000000           1331              MOVEA.L #0,A1
00001C1E  2205                    1332              MOVE.L  D5, D1                
00001C20  0281 000000FF           1333              ANDI.L  #$00FF, D1              * Get 8-bit displacement 
00001C26  2205                    1334              MOVE.L  D5,D1                  
00001C28  0281 00000F00           1335              ANDI.L  #$0F00,D1
00001C2E                          1336                 
00001C2E  0C41 0000               1337              CMPI.W  #$0000,D1               * Check for BRA
00001C32  6700 0050               1338              BEQ     OP_BRA                  
00001C36                          1339                          
00001C36  0C41 0D00               1340              CMPI.W  #$0D00,D1               * Check for BLT
00001C3A  6700 0056               1341              BEQ     OP_BLT      
00001C3E                          1342  
00001C3E  0C41 0700               1343              CMPI.W  #$0700,D1               * Check for BEQ
00001C42  6700 0032               1344              BEQ     OP_BEQ      
00001C46                          1345  
00001C46  0C41 0600               1346              CMPI.W  #$0600,D1               * Check for BNE
00001C4A  6700 001C               1347              BEQ     OP_BNE  
00001C4E                          1348              
00001C4E  0C41 0200               1349              CMPI.W  #$0200,D1               * Check for BHI
00001C52  6700 0006               1350              BEQ     OP_BHI
00001C56                          1351  
00001C56  4EF8 14B8               1352              JMP     OP_DATA
00001C5A                          1353              
00001C5A  43F9 00004464           1354  OP_BHI      LEA     DISP_BHI,A1             
00001C60  103C 000E               1355              MOVE.B  #14,D0
00001C64  4E4F                    1356              TRAP    #15
00001C66  4E75                    1357              RTS
00001C68                          1358  
00001C68  43F9 0000445D           1359  OP_BNE      LEA     DISP_BNE,A1             
00001C6E  103C 000E               1360              MOVE.B  #14,D0
00001C72  4E4F                    1361              TRAP    #15
00001C74  4E75                    1362              RTS
00001C76                          1363  
00001C76  43F9 00004456           1364  OP_BEQ      LEA     DISP_BEQ,A1             
00001C7C  103C 000E               1365              MOVE.B  #14,D0
00001C80  4E4F                    1366              TRAP    #15
00001C82  4E75                    1367              RTS          
00001C84                          1368                          
00001C84  43F9 00004448           1369  OP_BRA      LEA     DISP_BRA,A1             
00001C8A  103C 000E               1370              MOVE.B  #14,D0
00001C8E  4E4F                    1371              TRAP    #15
00001C90  4E75                    1372              RTS
00001C92                          1373              
00001C92  43F9 0000444F           1374  OP_BLT      LEA     DISP_BLT,A1          
00001C98  103C 000E               1375              MOVE.B  #14,D0
00001C9C  4E4F                    1376              TRAP    #15
00001C9E  4E75                    1377              RTS
00001CA0                          1378     
00001CA0                          1379  *---------------------------------------------------------------------------*
00001CA0                          1380  * OP0111 : MOVEQ not required
00001CA0                          1381  *---------------------------------------------------------------------------*           
00001CA0  4EF8 14B8               1382  OP0111      JMP     OP_DATA
00001CA4                          1383             
00001CA4                          1384  *---------------------------------------------------------------------------*
00001CA4                          1385  * OP1000 : decode DIVS
00001CA4                          1386  *---------------------------------------------------------------------------*           
00001CA4                          1387  OP1000                           
00001CA4  4281                    1388              CLR.L   D1       
00001CA6  4284                    1389              CLR.L   D4                   
00001CA8  227C 00000000           1390              MOVEA.L #0, A1              
00001CAE  2205                    1391              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
00001CB0                          1392              *CLEAR D3
00001CB0  4283                    1393              CLR.L   D3
00001CB2                          1394  
00001CB2                          1395  OP1000_DIVS_DN_EA_OR_EA_DN 
00001CB2                          1396              *LOAD STACK WITH THIS OPMODE
00001CB2  6100 1EE6               1397              BSR     PUSH_STACK
00001CB6  163C 0044               1398              MOVE.B  #'D',D3
00001CBA  6100 1EDE               1399              BSR     PUSH_STACK
00001CBE  163C 0049               1400              MOVE.B  #'I',D3
00001CC2  6100 1ED6               1401              BSR     PUSH_STACK
00001CC6  163C 0056               1402              MOVE.B  #'V',D3
00001CCA  6100 1ECE               1403              BSR     PUSH_STACK
00001CCE  163C 0053               1404              MOVE.B  #'S',D3
00001CD2  6100 1EC6               1405              BSR     PUSH_STACK
00001CD6  163C 002E               1406              MOVE.B  #'.',D3
00001CDA  6100 1EBE               1407              BSR     PUSH_STACK
00001CDE                          1408              
00001CDE  2205                    1409              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00001CE0                          1410              
00001CE0                          1411  OP1000_EA_DN_DIVS
00001CE0                          1412              *BITS (7 TO 6) 
00001CE0                          1413              *00 = .B
00001CE0                          1414              *01 = .W
00001CE0                          1415              *10 = .L 
00001CE0  2205                    1416              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00001CE2  EC99                    1417              ROR.L   #6,D1
00001CE4  0281 00000003           1418              ANDI.L  #$03,D1
00001CEA  0C81 00000003           1419              CMPI.L  #%11,D1 *EQUALS .W
00001CF0  6700 0014               1420              BEQ     OP1000_PRINT_W_DIVS
00001CF4  0C81 00000000           1421              CMPI.L  #%00,D1 *EQUALS .L
00001CFA  6700 0052               1422              BEQ     OP1000_PRINT_L_DIVS
00001CFE                          1423              
00001CFE  183C 0001               1424              MOVE.B  #1,D4               *ERROR READ
00001D02  6000 0092               1425              BRA     OP1000_DIVS_RETURN
00001D06                          1426  OP1000_PRINT_W_DIVS
00001D06  163C 0057               1427              MOVE.B  #'W',D3
00001D0A  6100 1E8E               1428              BSR     PUSH_STACK
00001D0E                          1429  
00001D0E                          1430              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001D0E  13FC 0000 000044C0      1431              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001D16  13FC 0000 000044C1      1432              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001D1E                          1433             
00001D1E                          1434              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001D1E  13FC 00B9 000044C3      1435              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001D26  13FC 0020 000044C4      1436              MOVE.B   #$20,GET_SRC_START_END
00001D2E                          1437  
00001D2E                          1438             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001D2E  0285 0000FE3F           1439              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001D34  0685 00000000           1440              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00001D3A                          1441  
00001D3A                          1442              
00001D3A  6100 15C0               1443              BSR     GET_EA_EA_SRC      *GETS <ea>
00001D3E  163C 002C               1444              MOVE.B  #',',D3
00001D42  6100 1E56               1445              BSR     PUSH_STACK
00001D46  6100 19E4               1446              BSR     GET_EA_EA_DEST       *GETS Dn    
00001D4A                          1447              
00001D4A  6000 004A               1448              BRA     OP1000_DIVS_RETURN
00001D4E                          1449  OP1000_PRINT_L_DIVS
00001D4E  163C 004C               1450              MOVE.B  #'L',D3
00001D52  6100 1E46               1451              BSR     PUSH_STACK
00001D56                          1452              
00001D56                          1453              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001D56  13FC 0000 000044C0      1454              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001D5E  13FC 0000 000044C1      1455              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001D66                          1456             
00001D66                          1457              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001D66  13FC 00B9 000044C3      1458              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001D6E  13FC 0020 000044C4      1459              MOVE.B   #$20,GET_SRC_START_END
00001D76                          1460  
00001D76                          1461              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001D76  0285 0000FE3F           1462              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001D7C  0685 00000000           1463              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00001D82                          1464  
00001D82                          1465                     
00001D82  6100 1578               1466              BSR     GET_EA_EA_SRC      *GETS <ea>
00001D86  163C 002C               1467              MOVE.B  #',',D3
00001D8A  6100 1E0E               1468              BSR     PUSH_STACK                  
00001D8E  6100 199C               1469              BSR     GET_EA_EA_DEST       *GETS Dn    
00001D92                          1470  
00001D92                          1471              
00001D92  6000 0002               1472              BRA     OP1000_DIVS_RETURN
00001D96                          1473              
00001D96                          1474  OP1000_DIVS_RETURN
00001D96  4E75                    1475              RTS
00001D98                          1476              
00001D98                          1477  
00001D98                          1478  
00001D98                          1479  *---------------------------------------------------------------------------*
00001D98                          1480  * OP_DIVS: display DIVS and proceed to EA
00001D98                          1481  *---------------------------------------------------------------------------*  
00001D98  43F9 000042B3           1482  OP_DIVS     LEA     DISP_DIVS,A1
00001D9E  103C 000E               1483              MOVE.B  #14,D0
00001DA2  4E4F                    1484              TRAP    #15
00001DA4  4EF9 00002E60           1485              JMP     EA_ARITH
00001DAA                          1486  
00001DAA  4E75                    1487              RTS
00001DAC                          1488              
00001DAC                          1489  *---------------------------------------------------------------------------*
00001DAC                          1490  * OP1001: decode SUB/SUBA
00001DAC                          1491  *---------------------------------------------------------------------------*      
00001DAC                          1492  OP1001      
00001DAC  4280                    1493              CLR.L   D0                  
00001DAE  4281                    1494              CLR.L   D1       
00001DB0  4284                    1495              CLR.L   D4                   
00001DB2  227C 00000000           1496              MOVEA.L #0, A1              
00001DB8  2205                    1497              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
00001DBA                          1498              
00001DBA                          1499              *CLEAR D3
00001DBA  4283                    1500              CLR.L   D3
00001DBC                          1501              
00001DBC                          1502              
00001DBC                          1503              
00001DBC                          1504              **INTEGRATING SUB.W/.L INTO THIS CODE**
00001DBC  2205                    1505              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00001DBE                          1506              *BITS (INDEX 8) 
00001DBE                          1507              *0 = ADD.B/W/L <EA>,Dn
00001DBE                          1508              *1 = ADD.B/W/L Dn,<EA> 
00001DBE  EC99                    1509              ROR.L   #6,D1
00001DC0  0281 00000007           1510              ANDI.L  #$07,D1                 *MASKS WITH 00000111
00001DC6  0C81 00000007           1511              CMPI.L  #$07,D1                 *IF EQUALS <ea>,Dn
00001DCC  6700 0010               1512              BEQ     OP1001_SUBA_L            *BRANCHES TO ADDA.L
00001DD0  0C81 00000003           1513              CMPI.L  #$03,D1                 *IF EQUALS <ea>,Dn
00001DD6  6700 0078               1514              BEQ     OP1001_SUBA_W           *BRANCHES TO ADDA.W
00001DDA  6000 00E6               1515              BRA     OP1001_DETERMINE_DN_EA_OR_EA_DN         *ELSE CHECK ADD.B/.W/.L
00001DDE                          1516              
00001DDE                          1517  OP1001_SUBA_L
00001DDE                          1518              *LOAD STACK WITH THIS OPMODE
00001DDE  6100 1DBA               1519              BSR     PUSH_STACK
00001DE2  163C 0053               1520              MOVE.B  #'S',D3
00001DE6  6100 1DB2               1521              BSR     PUSH_STACK
00001DEA  163C 0055               1522              MOVE.B  #'U',D3
00001DEE  6100 1DAA               1523              BSR     PUSH_STACK
00001DF2  163C 0042               1524              MOVE.B  #'B',D3
00001DF6  6100 1DA2               1525              BSR     PUSH_STACK
00001DFA  163C 0041               1526              MOVE.B  #'A',D3
00001DFE  6100 1D9A               1527              BSR     PUSH_STACK
00001E02  163C 002E               1528              MOVE.B  #'.',D3
00001E06  6100 1D92               1529              BSR     PUSH_STACK
00001E0A  163C 004C               1530              MOVE.B  #'L',D3
00001E0E  6100 1D8A               1531              BSR     PUSH_STACK
00001E12                          1532              
00001E12                          1533             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001E12  13FC 0000 000044C0      1534             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001E1A  13FC 0000 000044C1      1535             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001E22                          1536             
00001E22                          1537             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001E22  13FC 00B9 000044C3      1538             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001E2A  13FC 0020 000044C4      1539             MOVE.B   #$20,GET_SRC_START_END
00001E32                          1540  
00001E32                          1541              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001E32  0285 0000FE3F           1542              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001E38  0685 00000040           1543              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00001E3E                          1544       
00001E3E                          1545              *PRINT <EA>,AN
00001E3E  6100 14BC               1546              BSR     GET_EA_EA_SRC       *GETS <ea>
00001E42  163C 002C               1547              MOVE.B  #',',D3
00001E46  6100 1D52               1548              BSR     PUSH_STACK                     
00001E4A  6100 18E0               1549              BSR     GET_EA_EA_DEST      *GETS Dn
00001E4E                          1550  
00001E4E                          1551              
00001E4E                          1552              
00001E4E  4E75                    1553              RTS
00001E50                          1554  OP1001_SUBA_W
00001E50                          1555              *LOAD STACK WITH THIS OPMODE
00001E50  6100 1D48               1556              BSR     PUSH_STACK
00001E54  163C 0053               1557              MOVE.B  #'S',D3
00001E58  6100 1D40               1558              BSR     PUSH_STACK
00001E5C  163C 0055               1559              MOVE.B  #'U',D3
00001E60  6100 1D38               1560              BSR     PUSH_STACK
00001E64  163C 0042               1561              MOVE.B  #'B',D3
00001E68  6100 1D30               1562              BSR     PUSH_STACK
00001E6C  163C 0041               1563              MOVE.B  #'A',D3
00001E70  6100 1D28               1564              BSR     PUSH_STACK
00001E74  163C 002E               1565              MOVE.B  #'.',D3
00001E78  6100 1D20               1566              BSR     PUSH_STACK
00001E7C  163C 0057               1567              MOVE.B  #'W',D3
00001E80  6100 1D18               1568              BSR     PUSH_STACK
00001E84                          1569              
00001E84                          1570             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001E84  13FC 0000 000044C0      1571             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001E8C  13FC 0000 000044C1      1572             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001E94                          1573             
00001E94                          1574             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001E94  13FC 00B9 000044C3      1575             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001E9C  13FC 0020 000044C4      1576             MOVE.B   #$20,GET_SRC_START_END
00001EA4                          1577  
00001EA4                          1578              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001EA4  0285 0000FE3F           1579              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001EAA  0685 00000040           1580              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00001EB0                          1581       
00001EB0                          1582              *PRINT <EA>,AN
00001EB0  6100 144A               1583              BSR     GET_EA_EA_SRC       *GETS <ea>
00001EB4  163C 002C               1584              MOVE.B  #',',D3
00001EB8  6100 1CE0               1585              BSR     PUSH_STACK                     
00001EBC  6100 186E               1586              BSR     GET_EA_EA_DEST      *GETS Dn
00001EC0                          1587  
00001EC0  4E75                    1588              RTS
00001EC2                          1589  
00001EC2                          1590  OP1001_DETERMINE_DN_EA_OR_EA_DN 
00001EC2                          1591              *LOAD STACK WITH THIS OPMODE
00001EC2  6100 1CD6               1592              BSR     PUSH_STACK
00001EC6  163C 0053               1593              MOVE.B  #'S',D3
00001ECA  6100 1CCE               1594              BSR     PUSH_STACK
00001ECE  163C 0055               1595              MOVE.B  #'U',D3
00001ED2  6100 1CC6               1596              BSR     PUSH_STACK
00001ED6  163C 0042               1597              MOVE.B  #'B',D3
00001EDA  6100 1CBE               1598              BSR     PUSH_STACK
00001EDE  163C 002E               1599              MOVE.B  #'.',D3
00001EE2  6100 1CB6               1600              BSR     PUSH_STACK
00001EE6                          1601              
00001EE6  2205                    1602              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00001EE8                          1603              
00001EE8                          1604              *BITS (INDEX 8) 
00001EE8                          1605              *0 = ADD.B/W/L <EA>,Dn
00001EE8                          1606              *1 = ADD.B/W/L Dn,<EA> 
00001EE8  E099                    1607              ROR.L   #8,D1
00001EEA  0281 00000001           1608              ANDI.L  #$01,D1     *MASKS WITH 00000001
00001EF0  0C81 00000000           1609              CMPI.L  #$00,D1     *IF EQUALS <ea>,Dn
00001EF6  6700 0102               1610              BEQ     OP1001_EA_DN
00001EFA                          1611              *else procede to Dn_EA
00001EFA                          1612              
00001EFA                          1613  OP1001_DN_EA
00001EFA                          1614              *BITS (7 TO 6) 
00001EFA                          1615              *00 = .B
00001EFA                          1616              *01 = .W
00001EFA                          1617              *10 = .L 
00001EFA  2205                    1618              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00001EFC  EC99                    1619              ROR.L   #6,D1
00001EFE  0281 00000003           1620              ANDI.L  #$03,D1
00001F04  0C81 00000000           1621              CMPI.L  #$00,D1 *EQUALS .B
00001F0A  6700 0016               1622              BEQ     OP1001_PRINT_B2
00001F0E  0C81 00000001           1623              CMPI.L  #$01,D1 *EQUALS .W
00001F14  6700 0054               1624              BEQ     OP1001_PRINT_W2
00001F18  0C81 00000002           1625              CMPI.L  #$02,D1 *EQUALS .L
00001F1E  6700 0092               1626              BEQ     OP1001_PRINT_L2
00001F22                          1627  OP1001_PRINT_B2
00001F22                          1628              *PUSH 'B'
00001F22  163C 0042               1629              MOVE.B  #'B',D3
00001F26  6100 1C72               1630              BSR     PUSH_STACK
00001F2A                          1631             
00001F2A                          1632              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001F2A  13FC 0000 000044C0      1633             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001F32  13FC 0083 000044C1      1634             MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001F3A                          1635             
00001F3A                          1636             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001F3A  13FC 00B9 000044C3      1637             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001F42  13FC 0020 000044C4      1638             MOVE.B   #$20,GET_SRC_START_END
00001F4A                          1639  
00001F4A                          1640              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001F4A  0285 0000FE3F           1641              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001F50  0685 00000040           1642              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00001F56                          1643       
00001F56  6100 17D4               1644              BSR     GET_EA_EA_DEST      *GETS Dn
00001F5A  163C 002C               1645              MOVE.B  #',',D3
00001F5E  6100 1C3A               1646              BSR     PUSH_STACK                     
00001F62  6100 1398               1647              BSR     GET_EA_EA_SRC       *GETS <ea>
00001F66                          1648  
00001F66                          1649              
00001F66  6000 0BA4               1650              BRA     OP1101_ADD_RETURN
00001F6A                          1651  OP1001_PRINT_W2
00001F6A  163C 0057               1652              MOVE.B  #'W',D3
00001F6E  6100 1C2A               1653              BSR     PUSH_STACK
00001F72                          1654  
00001F72                          1655              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001F72  13FC 0000 000044C0      1656              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001F7A  13FC 0083 000044C1      1657              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001F82                          1658             
00001F82                          1659              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001F82  13FC 00B9 000044C3      1660              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001F8A  13FC 0020 000044C4      1661              MOVE.B   #$20,GET_SRC_START_END
00001F92                          1662  
00001F92                          1663              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001F92  0285 0000FE3F           1664              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001F98  0685 00000040           1665              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A An Register (001) 
00001F9E                          1666  
00001F9E                          1667        
00001F9E  6100 178C               1668              BSR     GET_EA_EA_DEST      *GETS Dn
00001FA2  163C 002C               1669              MOVE.B  #',',D3
00001FA6  6100 1BF2               1670              BSR     PUSH_STACK               
00001FAA  6100 1350               1671              BSR     GET_EA_EA_SRC       *GETS <ea>       
00001FAE                          1672  
00001FAE                          1673  
00001FAE                          1674  
00001FAE  6000 0B5C               1675              BRA     OP1101_ADD_RETURN
00001FB2                          1676  OP1001_PRINT_L2 
00001FB2  163C 004C               1677              MOVE.B  #'L',D3
00001FB6  6100 1BE2               1678              BSR     PUSH_STACK
00001FBA                          1679              
00001FBA                          1680              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001FBA  13FC 0000 000044C0      1681              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001FC2  13FC 0083 000044C1      1682              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001FCA                          1683             
00001FCA                          1684              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001FCA  13FC 00B9 000044C3      1685              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001FD2  13FC 0020 000044C4      1686              MOVE.B   #$20,GET_SRC_START_END
00001FDA                          1687  
00001FDA                          1688             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001FDA  0285 0000FE3F           1689              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001FE0  0685 00000040           1690              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00001FE6                          1691  
00001FE6                          1692               
00001FE6  6100 1744               1693              BSR     GET_EA_EA_DEST       *GETS Dn
00001FEA  163C 002C               1694              MOVE.B  #',',D3
00001FEE  6100 1BAA               1695              BSR     PUSH_STACK          
00001FF2  6100 1308               1696              BSR     GET_EA_EA_SRC        *GETS <ea>
00001FF6                          1697  
00001FF6  6000 0B14               1698              BRA     OP1101_ADD_RETURN
00001FFA                          1699              
00001FFA                          1700  OP1001_EA_DN           
00001FFA                          1701              *BITS (7 TO 6) 
00001FFA                          1702              *00 = .B
00001FFA                          1703              *01 = .W
00001FFA                          1704              *10 = .L 
00001FFA  2205                    1705              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00001FFC  EC99                    1706              ROR.L   #6,D1
00001FFE  0281 00000003           1707              ANDI.L  #$03,D1
00002004  0C81 00000000           1708              CMPI.L  #$00,D1 *EQUALS .B
0000200A  6700 0016               1709              BEQ     OP1001_PRINT_B
0000200E  0C81 00000001           1710              CMPI.L  #$01,D1 *EQUALS .W
00002014  6700 0054               1711              BEQ     OP1001_PRINT_W
00002018  0C81 00000002           1712              CMPI.L  #$02,D1 *EQUALS .L
0000201E  6700 0092               1713              BEQ     OP1001_PRINT_L
00002022                          1714  OP1001_PRINT_B
00002022  163C 0042               1715              MOVE.B  #'B',D3
00002026  6100 1B72               1716              BSR     PUSH_STACK
0000202A                          1717                
0000202A                          1718              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000202A  13FC 0000 000044C0      1719              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002032  13FC 0002 000044C1      1720              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000203A                          1721             
0000203A                          1722              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000203A  13FC 00B9 000044C3      1723              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002042  13FC 0020 000044C4      1724              MOVE.B   #$20,GET_SRC_START_END
0000204A                          1725  
0000204A                          1726             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000204A  0285 0000FE3F           1727              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002050  0685 00000040           1728              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "AN" Register (001) 
00002056                          1729  
00002056                          1730              
00002056  6100 12A4               1731              BSR     GET_EA_EA_SRC      *GETS <ea>
0000205A  163C 002C               1732              MOVE.B  #',',D3
0000205E  6100 1B3A               1733              BSR     PUSH_STACK          
00002062  6100 16C8               1734              BSR     GET_EA_EA_DEST       *GETS Dn
00002066                          1735              
00002066  6000 0AA4               1736              BRA     OP1101_ADD_RETURN
0000206A                          1737  OP1001_PRINT_W
0000206A  163C 0057               1738              MOVE.B  #'W',D3
0000206E  6100 1B2A               1739              BSR     PUSH_STACK
00002072                          1740  
00002072                          1741              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002072  13FC 0000 000044C0      1742              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000207A  13FC 0000 000044C1      1743              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002082                          1744             
00002082                          1745              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002082  13FC 00B9 000044C3      1746              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000208A  13FC 0020 000044C4      1747              MOVE.B   #$20,GET_SRC_START_END
00002092                          1748  
00002092                          1749             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002092  0285 0000FE3F           1750              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002098  0685 00000040           1751              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
0000209E                          1752  
0000209E                          1753              
0000209E  6100 125C               1754              BSR     GET_EA_EA_SRC      *GETS <ea>
000020A2  163C 002C               1755              MOVE.B  #',',D3
000020A6  6100 1AF2               1756              BSR     PUSH_STACK
000020AA  6100 1680               1757              BSR     GET_EA_EA_DEST       *GETS Dn    
000020AE                          1758              
000020AE  6000 004A               1759              BRA     OP1001_ADD_RETURN
000020B2                          1760  OP1001_PRINT_L 
000020B2  163C 004C               1761              MOVE.B  #'L',D3
000020B6  6100 1AE2               1762              BSR     PUSH_STACK
000020BA                          1763              
000020BA                          1764              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000020BA  13FC 0000 000044C0      1765              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000020C2  13FC 0000 000044C1      1766              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000020CA                          1767             
000020CA                          1768              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000020CA  13FC 00B9 000044C3      1769              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000020D2  13FC 0020 000044C4      1770              MOVE.B   #$20,GET_SRC_START_END
000020DA                          1771  
000020DA                          1772              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000020DA  0285 0000FE3F           1773              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000020E0  0685 00000040           1774              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
000020E6                          1775  
000020E6                          1776                     
000020E6  6100 1214               1777              BSR     GET_EA_EA_SRC      *GETS <ea>
000020EA  163C 002C               1778              MOVE.B  #',',D3
000020EE  6100 1AAA               1779              BSR     PUSH_STACK                  
000020F2  6100 1638               1780              BSR     GET_EA_EA_DEST       *GETS Dn    
000020F6                          1781  
000020F6                          1782              
000020F6  6000 0002               1783              BRA     OP1001_ADD_RETURN
000020FA                          1784              
000020FA                          1785  OP1001_ADD_RETURN
000020FA  4E75                    1786              RTS
000020FC                          1787  
000020FC                          1788    
000020FC                          1789  *---------------------------------------------------------------------------*
000020FC                          1790  * OP_SUB: display SUB and proceed to EA
000020FC                          1791  *---------------------------------------------------------------------------*            
000020FC  43F9 000042BB           1792  OP_SUB_B    LEA     DISP_SUB_B,A1
00002102  103C 000E               1793              MOVE.B  #14,D0
00002106  4E4F                    1794              TRAP    #15
00002108  183C 0000               1795              MOVE.B  #0,D4
0000210C  4EF9 00002EAC           1796              JMP     EA_GEN
00002112                          1797  
00002112  4E75                    1798              RTS
00002114                          1799  
00002114  43F9 000042C4           1800  OP_SUB_W    LEA     DISP_SUB_W,A1
0000211A  103C 000E               1801              MOVE.B  #14,D0
0000211E  4E4F                    1802              TRAP    #15
00002120  183C 0001               1803              MOVE.B  #1,D4
00002124  4EF9 00002EAC           1804              JMP     EA_GEN
0000212A                          1805  
0000212A  4E75                    1806              RTS
0000212C                          1807  
0000212C  43F9 000042CD           1808  OP_SUB_L    LEA     DISP_SUB_L,A1
00002132  103C 000E               1809              MOVE.B  #14,D0
00002136  4E4F                    1810              TRAP    #15
00002138  183C 0002               1811              MOVE.B  #2,D4
0000213C  4EF9 00002EAC           1812              JMP     EA_GEN
00002142                          1813  
00002142  4E75                    1814              RTS
00002144                          1815  
00002144                          1816  *---------------------------------------------------------------------------*
00002144                          1817  * OP_SUBA: display SUBA
00002144                          1818  *---------------------------------------------------------------------------*  
00002144  43F9 000042F4           1819  OP_SUBA_W   LEA     DISP_SUBA_W,A1
0000214A  103C 000E               1820              MOVE.B  #14,D0
0000214E  4E4F                    1821              TRAP    #15
00002150  183C 0001               1822              MOVE.B  #1,D4
00002154  4E75                    1823              RTS
00002156                          1824  
00002156  43F9 000042FE           1825  OP_SUBA_L   LEA     DISP_SUBA_L,A1
0000215C  103C 000E               1826              MOVE.B  #14,D0
00002160  4E4F                    1827              TRAP    #15
00002162  183C 0002               1828              MOVE.B  #2,D4
00002166  4E75                    1829              RTS         
00002168                          1830  *---------------------------------------------------------------------------*
00002168                          1831  * OP1010 : unassigned
00002168                          1832  *---------------------------------------------------------------------------*           
00002168  4EF8 14B8               1833  OP1010      JMP     OP_DATA
0000216C                          1834              
0000216C                          1835  *---------------------------------------------------------------------------*
0000216C                          1836  * OP1011 : decode CMP/EOR/CMPA
0000216C                          1837  *---------------------------------------------------------------------------*           
0000216C  4280                    1838  OP1011      CLR.L   D0                
0000216E  4281                    1839              CLR.L   D1            
00002170  4284                    1840              CLR.L   D4                   
00002172  227C 00000000           1841              MOVEA.L #0, A1               
00002178  2205                    1842              MOVE.L  D5,D1
0000217A  EA99                    1843              ROR.L   #5,D1
0000217C  0281 0000000E           1844              ANDI.L  #$E,D1
00002182  0C01 0000               1845              CMPI.B  #$0,D1
00002186  6700 003E               1846              BEQ     OP1011_CMP
0000218A  0C01 0002               1847              CMPI.B  #$2,D1
0000218E  6700 0036               1848              BEQ     OP1011_CMP
00002192  0C01 0004               1849              CMPI.B  #$4,D1
00002196  6700 002E               1850              BEQ     OP1011_CMP
0000219A  0C01 0008               1851              CMPI.B  #$8,D1
0000219E  6700 0178               1852              BEQ     OP1011_EOR
000021A2  0C01 000A               1853              CMPI.B  #$A,D1
000021A6  6700 0170               1854              BEQ     OP1011_EOR
000021AA  0C01 000C               1855              CMPI.B  #$C,D1
000021AE  6700 0168               1856              BEQ     OP1011_EOR  
000021B2  0C01 0006               1857              CMPI.B  #$6,D1
000021B6  6700 00C0               1858              BEQ     OP1011_CMPA
000021BA  0C01 000E               1859              CMPI.B  #$E,D1
000021BE  6700 00B8               1860              BEQ     OP1011_CMPA 
000021C2                          1861  
000021C2  4EF8 14B8               1862              JMP     OP_DATA          
000021C6                          1863  
000021C6                          1864  
000021C6                          1865  
000021C6                          1866  
000021C6                          1867  OP1011_CMP
000021C6                          1868             
000021C6                          1869   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000021C6  13FC 0082 000044C0      1870             MOVE.B   #$82,DEST_REGISTER_FORMAT
000021CE  13FC 0000 000044C1      1871             MOVE.B   #$00,SRC_REGISTER_FORMAT
000021D6                          1872             
000021D6                          1873             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000021D6  13FC 00B9 000044C3      1874             MOVE.B   #$B9,GET_DST_START_END
000021DE  13FC 0020 000044C4      1875             MOVE.B   #$20,GET_SRC_START_END
000021E6                          1876             
000021E6                          1877              *CLEAR D3
000021E6  4283                    1878              CLR.L   D3
000021E8                          1879              *LOAD STACK WITH THIS OPMODE
000021E8  6100 19B0               1880              BSR     PUSH_STACK
000021EC  163C 0043               1881              MOVE.B  #'C',D3
000021F0  6100 19A8               1882              BSR     PUSH_STACK
000021F4  163C 004D               1883              MOVE.B  #'M',D3
000021F8  6100 19A0               1884              BSR     PUSH_STACK
000021FC  163C 0050               1885              MOVE.B  #'P',D3
00002200  6100 1998               1886              BSR     PUSH_STACK
00002204  163C 002E               1887              MOVE.B  #'.',D3
00002208  6100 1990               1888              BSR     PUSH_STACK
0000220C                          1889              
0000220C                          1890              *FIGURE OUT SIZE*
0000220C                          1891              *00 = BYTE
0000220C                          1892              *01 = WORD
0000220C                          1893              *10 = LONG
0000220C                          1894              * BITS 7&6
0000220C                          1895              
0000220C                          1896              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
0000220C  2205                    1897              MOVE.L  D5,D1
0000220E  EC99                    1898              ROR.L   #6,D1
00002210  0281 00000003           1899              ANDI.L  #$03,D1
00002216  0C01 0000               1900              CMPI.B  #%00,D1
0000221A  6700 001E               1901              BEQ     OP1011_CMP_B
0000221E  0281 00000003           1902              ANDI.L  #$03,D1
00002224  0C01 0001               1903              CMPI.B  #%01,D1
00002228  6700 001C               1904              BEQ     OP1011_CMP_W
0000222C  0281 00000003           1905              ANDI.L  #$03,D1
00002232  0C01 0002               1906              CMPI.B  #%10,D1
00002236  6700 001A               1907              BEQ     OP1011_CMP_L
0000223A                          1908            
0000223A                          1909  OP1011_CMP_B
0000223A                          1910              
0000223A  163C 0042               1911              MOVE.B  #'B',D3
0000223E  6100 195A               1912              BSR     PUSH_STACK
00002242  6000 0016               1913              BRA     OP1011_RETURN_CMP  
00002246                          1914  OP1011_CMP_W
00002246                          1915              
00002246  163C 0057               1916              MOVE.B  #'W',D3
0000224A  6100 194E               1917              BSR     PUSH_STACK
0000224E  6000 000A               1918              BRA     OP1011_RETURN_CMP  
00002252                          1919  OP1011_CMP_L
00002252                          1920              
00002252  163C 004C               1921              MOVE.B  #'L',D3
00002256  6100 1942               1922              BSR     PUSH_STACK
0000225A                          1923  OP1011_RETURN_CMP            
0000225A                          1924  
0000225A                          1925              
0000225A                          1926  *GET DATA FROM ADDQ AND PRINT #0-8
0000225A                          1927       
0000225A                          1928              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000225A  0285 0000FE3F           1929              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002260  0685 00000000           1930              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002266                          1931  
00002266  6100 1094               1932              BSR     GET_EA_EA_SRC
0000226A  163C 002C               1933              MOVE.B  #',',D3
0000226E  6100 192A               1934              BSR     PUSH_STACK
00002272  6100 14B8               1935              BSR     GET_EA_EA_DEST
00002276                          1936              
00002276  4E75                    1937              RTS
00002278                          1938              
00002278                          1939  
00002278                          1940  
00002278                          1941  OP1011_CMPA
00002278                          1942              
00002278                          1943   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002278  13FC 0080 000044C0      1944             MOVE.B   #$80,DEST_REGISTER_FORMAT
00002280  13FC 0000 000044C1      1945             MOVE.B   #$00,SRC_REGISTER_FORMAT
00002288                          1946             
00002288                          1947             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002288  13FC 00B9 000044C3      1948             MOVE.B   #$B9,GET_DST_START_END
00002290  13FC 0020 000044C4      1949             MOVE.B   #$20,GET_SRC_START_END
00002298                          1950             
00002298                          1951              *CLEAR D3
00002298  4283                    1952              CLR.L   D3
0000229A                          1953              *LOAD STACK WITH THIS OPMODE
0000229A  6100 18FE               1954              BSR     PUSH_STACK
0000229E  163C 0043               1955              MOVE.B  #'C',D3
000022A2  6100 18F6               1956              BSR     PUSH_STACK
000022A6  163C 004D               1957              MOVE.B  #'M',D3
000022AA  6100 18EE               1958              BSR     PUSH_STACK
000022AE  163C 0050               1959              MOVE.B  #'P',D3
000022B2  6100 18E6               1960              BSR     PUSH_STACK
000022B6  163C 0041               1961              MOVE.B  #'A',D3
000022BA  6100 18DE               1962              BSR     PUSH_STACK
000022BE  163C 002E               1963              MOVE.B  #'.',D3
000022C2  6100 18D6               1964              BSR     PUSH_STACK
000022C6                          1965              
000022C6                          1966              *FIGURE OUT SIZE*
000022C6                          1967              *00 = BYTE
000022C6                          1968              *01 = WORD
000022C6                          1969              *10 = LONG
000022C6                          1970              * BITS 7&6
000022C6                          1971              
000022C6                          1972              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
000022C6  2205                    1973              MOVE.L  D5,D1
000022C8  EC99                    1974              ROR.L   #6,D1
000022CA  0281 00000003           1975              ANDI.L  #$03,D1
000022D0  0C01 0001               1976              CMPI.B  #%01,D1
000022D4  6700 0010               1977              BEQ     OP1011_CMPA_W
000022D8  0281 00000003           1978              ANDI.L  #$03,D1
000022DE  0C01 0002               1979              CMPI.B  #%10,D1
000022E2  6700 000E               1980              BEQ     OP1011_CMPA_L
000022E6                          1981  OP1011_CMPA_W
000022E6                          1982              
000022E6  163C 0057               1983              MOVE.B  #'W',D3
000022EA  6100 18AE               1984              BSR     PUSH_STACK
000022EE  6000 000A               1985              BRA     OP1011_RETURN_CMPA 
000022F2                          1986  OP1011_CMPA_L
000022F2                          1987              
000022F2  163C 004C               1988              MOVE.B  #'L',D3
000022F6  6100 18A2               1989              BSR     PUSH_STACK
000022FA                          1990  OP1011_RETURN_CMPA            
000022FA                          1991  
000022FA                          1992              
000022FA                          1993  *GET DATA FROM ADDQ AND PRINT #0-8
000022FA                          1994       
000022FA                          1995              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000022FA  0285 0000FE3F           1996              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002300  0685 00000040           1997              ADDI.L  #$0040,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
00002306                          1998  
00002306  6100 0FF4               1999              BSR     GET_EA_EA_SRC
0000230A  163C 002C               2000              MOVE.B  #',',D3
0000230E  6100 188A               2001              BSR     PUSH_STACK
00002312  6100 1418               2002              BSR     GET_EA_EA_DEST
00002316                          2003              
00002316  4E75                    2004              RTS
00002318                          2005  
00002318                          2006  OP1011_EOR
00002318                          2007  
00002318                          2008   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002318  13FC 0082 000044C0      2009             MOVE.B   #$82,DEST_REGISTER_FORMAT
00002320  13FC 0080 000044C1      2010             MOVE.B   #$80,SRC_REGISTER_FORMAT
00002328                          2011             
00002328                          2012             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002328  13FC 00B9 000044C3      2013             MOVE.B   #$B9,GET_DST_START_END
00002330  13FC 0020 000044C4      2014             MOVE.B   #$20,GET_SRC_START_END
00002338                          2015             
00002338                          2016              *CLEAR D3
00002338  4283                    2017              CLR.L   D3
0000233A                          2018              *LOAD STACK WITH THIS OPMODE
0000233A  6100 185E               2019              BSR     PUSH_STACK
0000233E  163C 0045               2020              MOVE.B  #'E',D3
00002342  6100 1856               2021              BSR     PUSH_STACK
00002346  163C 004F               2022              MOVE.B  #'O',D3
0000234A  6100 184E               2023              BSR     PUSH_STACK
0000234E  163C 0052               2024              MOVE.B  #'R',D3
00002352  6100 1846               2025              BSR     PUSH_STACK
00002356  163C 002E               2026              MOVE.B  #'.',D3
0000235A  6100 183E               2027              BSR     PUSH_STACK
0000235E                          2028              
0000235E                          2029              *FIGURE OUT SIZE*
0000235E                          2030              *00 = BYTE
0000235E                          2031              *01 = WORD
0000235E                          2032              *10 = LONG
0000235E                          2033              * BITS 7&6
0000235E                          2034              
0000235E                          2035              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
0000235E  2205                    2036              MOVE.L  D5,D1
00002360  EC99                    2037              ROR.L   #6,D1
00002362  0281 00000003           2038              ANDI.L  #$03,D1
00002368  0C01 0000               2039              CMPI.B  #%00,D1
0000236C  6700 001E               2040              BEQ     OP1011_EOR_B
00002370  0281 00000003           2041              ANDI.L  #$03,D1
00002376  0C01 0001               2042              CMPI.B  #%01,D1
0000237A  6700 001C               2043              BEQ     OP1011_EOR_W
0000237E  0281 00000003           2044              ANDI.L  #$03,D1
00002384  0C01 0002               2045              CMPI.B  #%10,D1
00002388  6700 001A               2046              BEQ     OP1011_EOR_L
0000238C                          2047            
0000238C                          2048  OP1011_EOR_B
0000238C                          2049              
0000238C  163C 0042               2050              MOVE.B  #'B',D3
00002390  6100 1808               2051              BSR     PUSH_STACK
00002394  6000 0016               2052              BRA     OP1011_RETURN
00002398                          2053  OP1011_EOR_W
00002398                          2054              
00002398  163C 0057               2055              MOVE.B  #'W',D3
0000239C  6100 17FC               2056              BSR     PUSH_STACK
000023A0  6000 000A               2057              BRA     OP1011_RETURN
000023A4                          2058  OP1011_EOR_L
000023A4                          2059              
000023A4  163C 004C               2060              MOVE.B  #'L',D3
000023A8  6100 17F0               2061              BSR     PUSH_STACK
000023AC                          2062  OP1011_RETURN            
000023AC                          2063  
000023AC                          2064              
000023AC                          2065  *GET DATA FROM ADDQ AND PRINT #0-8
000023AC                          2066       
000023AC                          2067              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000023AC  0285 0000FE3F           2068              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000023B2  0685 00000000           2069              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
000023B8                          2070  
000023B8  6100 1372               2071              BSR     GET_EA_EA_DEST
000023BC  163C 002C               2072              MOVE.B  #',',D3
000023C0  6100 17D8               2073              BSR     PUSH_STACK
000023C4  6100 0F36               2074              BSR     GET_EA_EA_SRC
000023C8                          2075              
000023C8  4E75                    2076              RTS
000023CA                          2077              
000023CA                          2078              
000023CA                          2079              
000023CA                          2080              
000023CA                          2081  
000023CA                          2082  *---------------------------------------------------------------------------*
000023CA                          2083  * OP_CMPA: display CMPA 
000023CA                          2084  *---------------------------------------------------------------------------
000023CA  43F9 0000433E           2085  OP_CMPA_W   LEA     DISP_CMPA_W,A1
000023D0  103C 000E               2086              MOVE.B  #14,D0
000023D4  4E4F                    2087              TRAP    #15
000023D6  183C 0001               2088              MOVE.B  #1,D4
000023DA  4E75                    2089              RTS
000023DC                          2090  
000023DC  43F9 00004348           2091  OP_CMPA_L   LEA     DISP_CMPA_L,A1
000023E2  103C 000E               2092              MOVE.B  #14,D0
000023E6  4E4F                    2093              TRAP    #15
000023E8  183C 0002               2094              MOVE.B  #2,D4
000023EC  4E75                    2095              RTS
000023EE                          2096  
000023EE                          2097  *---------------------------------------------------------------------------*
000023EE                          2098  * OP_CMP: display CMP and proceed to EA
000023EE                          2099  *---------------------------------------------------------------------------*  
000023EE  43F9 00004323           2100  OP_CMP_B    LEA     DISP_CMP_B,A1
000023F4  103C 000E               2101              MOVE.B  #14,D0
000023F8  4E4F                    2102              TRAP    #15
000023FA  183C 0000               2103              MOVE.B  #0,D4
000023FE  4EF9 00002EAC           2104              JMP     EA_GEN
00002404                          2105  
00002404  4E75                    2106              RTS
00002406                          2107              
00002406  43F9 0000432C           2108  OP_CMP_W    LEA     DISP_CMP_W,A1
0000240C  103C 000E               2109              MOVE.B  #14,D0
00002410  4E4F                    2110              TRAP    #15
00002412  183C 0001               2111              MOVE.B  #1,D4
00002416  4EF9 00002EAC           2112              JMP     EA_GEN
0000241C                          2113  
0000241C  4E75                    2114              RTS
0000241E                          2115              
0000241E  43F9 00004335           2116  OP_CMP_L    LEA     DISP_CMP_L,A1
00002424  103C 000E               2117              MOVE.B  #14,D0
00002428  4E4F                    2118              TRAP    #15
0000242A  183C 0002               2119              MOVE.B  #2,D4
0000242E  4EF9 00002EAC           2120              JMP     EA_GEN
00002434                          2121  
00002434  4E75                    2122              RTS
00002436                          2123              
00002436                          2124  *---------------------------------------------------------------------------*
00002436                          2125  * OP_EOR: display EOR
00002436                          2126  *---------------------------------------------------------------------------*  
00002436  43F9 00004308           2127  OP_EOR_B    LEA     DISP_EOR_B,A1
0000243C  103C 000E               2128              MOVE.B  #14,D0
00002440  4E4F                    2129              TRAP    #15
00002442  183C 0000               2130              MOVE.B  #0,D4
00002446  4E75                    2131              RTS
00002448                          2132              
00002448  43F9 00004311           2133  OP_EOR_W    LEA     DISP_EOR_W,A1
0000244E  103C 000E               2134              MOVE.B  #14,D0
00002452  4E4F                    2135              TRAP    #15
00002454  183C 0001               2136              MOVE.B  #1,D4
00002458  4E75                    2137              RTS
0000245A                          2138              
0000245A  43F9 0000431A           2139  OP_EOR_L    LEA     DISP_EOR_L,A1
00002460  103C 000E               2140              MOVE.B  #14,D0
00002464  4E4F                    2141              TRAP    #15
00002466  183C 0002               2142              MOVE.B  #2,D4
0000246A  4E75                    2143              RTS    
0000246C                          2144  
0000246C                          2145  *---------------------------------------------------------------------------*
0000246C                          2146  * OP1100: Decode and display MULS/AND and proceed to EA
0000246C                          2147  *---------------------------------------------------------------------------* 
0000246C  4280                    2148  OP1100      CLR.L   D0                 
0000246E  4281                    2149              CLR.L   D1    
00002470  4284                    2150              CLR.L   D4                
00002472  227C 00000000           2151              MOVEA.L #0, A1        
00002478  2205                    2152              MOVE.L  D5,D1
0000247A  EA89                    2153              LSR.L   #5,D1
0000247C  0281 0000000E           2154              ANDI.L  #$E,D1
00002482  0C41 000E               2155              CMPI.W  #$E,D1
00002486  6700 0006               2156              BEQ     OP_MULS
0000248A  6000 00F6               2157              BRA     OP1100_DETERMINE_DN_EA_OR_EA_DN 
0000248E                          2158  
0000248E                          2159  OP_MULS                      
0000248E  4281                    2160              CLR.L   D1       
00002490  4284                    2161              CLR.L   D4                   
00002492  227C 00000000           2162              MOVEA.L #0, A1              
00002498  2205                    2163              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
0000249A                          2164              *CLEAR D3
0000249A  4283                    2165              CLR.L   D3
0000249C                          2166  
0000249C                          2167  OP1100_MULS_DN_EA_OR_EA_DN 
0000249C                          2168              *LOAD STACK WITH THIS OPMODE
0000249C  6100 16FC               2169              BSR     PUSH_STACK
000024A0  163C 004D               2170              MOVE.B  #'M',D3
000024A4  6100 16F4               2171              BSR     PUSH_STACK
000024A8  163C 0055               2172              MOVE.B  #'U',D3
000024AC  6100 16EC               2173              BSR     PUSH_STACK
000024B0  163C 004C               2174              MOVE.B  #'L',D3
000024B4  6100 16E4               2175              BSR     PUSH_STACK
000024B8  163C 0053               2176              MOVE.B  #'S',D3
000024BC  6100 16DC               2177              BSR     PUSH_STACK
000024C0  163C 002E               2178              MOVE.B  #'.',D3
000024C4  6100 16D4               2179              BSR     PUSH_STACK
000024C8                          2180              
000024C8  2205                    2181              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
000024CA                          2182              
000024CA                          2183  OP1100_EA_DN_MULS           
000024CA                          2184              *BITS (7 TO 6) 
000024CA                          2185              *00 = .B
000024CA                          2186              *01 = .W
000024CA                          2187              *10 = .L 
000024CA  2205                    2188              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
000024CC  EC99                    2189              ROR.L   #6,D1
000024CE  0281 00000003           2190              ANDI.L  #$03,D1
000024D4  0C81 00000003           2191              CMPI.L  #%11,D1 *EQUALS .W
000024DA  6700 0014               2192              BEQ     OP1100_PRINT_W_MULS
000024DE  0C81 00000000           2193              CMPI.L  #%00,D1 *EQUALS .L
000024E4  6700 0052               2194              BEQ     OP1100_PRINT_L_MULS
000024E8                          2195              
000024E8  183C 0001               2196              MOVE.B  #1,D4               *ERROR READ
000024EC  6000 0092               2197              BRA     OP1100_MULS_RETURN
000024F0                          2198  OP1100_PRINT_W_MULS
000024F0  163C 0057               2199              MOVE.B  #'W',D3
000024F4  6100 16A4               2200              BSR     PUSH_STACK
000024F8                          2201  
000024F8                          2202              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000024F8  13FC 0000 000044C0      2203              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002500  13FC 0000 000044C1      2204              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002508                          2205             
00002508                          2206              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002508  13FC 00B9 000044C3      2207              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002510  13FC 0020 000044C4      2208              MOVE.B   #$20,GET_SRC_START_END
00002518                          2209  
00002518                          2210             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002518  0285 0000FE3F           2211              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000251E  0685 00000000           2212              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002524                          2213  
00002524                          2214              
00002524  6100 0DD6               2215              BSR     GET_EA_EA_SRC      *GETS <ea>
00002528  163C 002C               2216              MOVE.B  #',',D3
0000252C  6100 166C               2217              BSR     PUSH_STACK
00002530  6100 11FA               2218              BSR     GET_EA_EA_DEST       *GETS Dn    
00002534                          2219              
00002534  6000 004A               2220              BRA     OP1100_MULS_RETURN
00002538                          2221  OP1100_PRINT_L_MULS 
00002538  163C 004C               2222              MOVE.B  #'L',D3
0000253C  6100 165C               2223              BSR     PUSH_STACK
00002540                          2224              
00002540                          2225              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002540  13FC 0000 000044C0      2226              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002548  13FC 0000 000044C1      2227              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002550                          2228             
00002550                          2229              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002550  13FC 00B9 000044C3      2230              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002558  13FC 0020 000044C4      2231              MOVE.B   #$20,GET_SRC_START_END
00002560                          2232  
00002560                          2233              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002560  0285 0000FE3F           2234              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002566  0685 00000000           2235              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
0000256C                          2236  
0000256C                          2237                     
0000256C  6100 0D8E               2238              BSR     GET_EA_EA_SRC      *GETS <ea>
00002570  163C 002C               2239              MOVE.B  #',',D3
00002574  6100 1624               2240              BSR     PUSH_STACK                  
00002578  6100 11B2               2241              BSR     GET_EA_EA_DEST       *GETS Dn    
0000257C                          2242  
0000257C                          2243              
0000257C  6000 0002               2244              BRA     OP1100_MULS_RETURN
00002580                          2245              
00002580                          2246  OP1100_MULS_RETURN
00002580  4E75                    2247              RTS
00002582                          2248              
00002582                          2249  
00002582                          2250  
00002582                          2251  
00002582                          2252  
00002582                          2253  
00002582                          2254  
00002582                          2255  
00002582                          2256  
00002582                          2257  
00002582                          2258  
00002582                          2259  
00002582                          2260  
00002582                          2261  OP1100_DETERMINE_DN_EA_OR_EA_DN 
00002582                          2262              *LOAD STACK WITH THIS OPMODE
00002582  4283                    2263              CLR.L   D3
00002584  6100 1614               2264              BSR     PUSH_STACK
00002588  163C 0041               2265              MOVE.B  #'A',D3
0000258C  6100 160C               2266              BSR     PUSH_STACK
00002590  163C 004E               2267              MOVE.B  #'N',D3
00002594  6100 1604               2268              BSR     PUSH_STACK
00002598  163C 0044               2269              MOVE.B  #'D',D3
0000259C  6100 15FC               2270              BSR     PUSH_STACK
000025A0  163C 002E               2271              MOVE.B  #'.',D3
000025A4  6100 15F4               2272              BSR     PUSH_STACK
000025A8                          2273              
000025A8  2205                    2274              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
000025AA                          2275              
000025AA                          2276              *BITS (INDEX 8) 
000025AA                          2277              *0 = ADD.B/W/L <EA>,Dn
000025AA                          2278              *1 = ADD.B/W/L Dn,<EA> 
000025AA  E099                    2279              ROR.L   #8,D1
000025AC  0281 00000001           2280              ANDI.L  #$01,D1     *MASKS WITH 00000001
000025B2  0C81 00000000           2281              CMPI.L  #$00,D1     *IF EQUALS <ea>,Dn
000025B8  6700 0102               2282              BEQ     OP1100_EA_DN
000025BC                          2283              *else procede to Dn_EA
000025BC                          2284              
000025BC                          2285  OP1100_DN_EA
000025BC                          2286              *BITS (7 TO 6) 
000025BC                          2287              *00 = .B
000025BC                          2288              *01 = .W
000025BC                          2289              *10 = .L 
000025BC  2205                    2290              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
000025BE  EC99                    2291              ROR.L   #6,D1
000025C0  0281 00000003           2292              ANDI.L  #$03,D1
000025C6  0C81 00000000           2293              CMPI.L  #$00,D1 *EQUALS .B
000025CC  6700 0016               2294              BEQ     OP1100_PRINT_B2
000025D0  0C81 00000001           2295              CMPI.L  #$01,D1 *EQUALS .W
000025D6  6700 0054               2296              BEQ     OP1100_PRINT_W2
000025DA  0C81 00000002           2297              CMPI.L  #$02,D1 *EQUALS .L
000025E0  6700 0092               2298              BEQ     OP1100_PRINT_L2
000025E4                          2299  OP1100_PRINT_B2
000025E4                          2300              *PUSH 'B'
000025E4  163C 0042               2301              MOVE.B  #'B',D3
000025E8  6100 15B0               2302              BSR     PUSH_STACK
000025EC                          2303             
000025EC                          2304              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000025EC  13FC 0000 000044C0      2305             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000025F4  13FC 0083 000044C1      2306             MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000025FC                          2307             
000025FC                          2308             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000025FC  13FC 00B9 000044C3      2309             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002604  13FC 0020 000044C4      2310             MOVE.B   #$20,GET_SRC_START_END
0000260C                          2311  
0000260C                          2312              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000260C  0285 0000FE3F           2313              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002612  0685 00000000           2314              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002618                          2315       
00002618  6100 1112               2316              BSR     GET_EA_EA_DEST      *GETS Dn
0000261C  163C 002C               2317              MOVE.B  #',',D3
00002620  6100 1578               2318              BSR     PUSH_STACK                     
00002624  6100 0CD6               2319              BSR     GET_EA_EA_SRC       *GETS <ea>
00002628                          2320  
00002628                          2321              
00002628  6000 0192               2322              BRA     OP1100_AND_RETURN
0000262C                          2323  OP1100_PRINT_W2
0000262C  163C 0057               2324              MOVE.B  #'W',D3
00002630  6100 1568               2325              BSR     PUSH_STACK
00002634                          2326  
00002634                          2327              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002634  13FC 0000 000044C0      2328              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000263C  13FC 0083 000044C1      2329              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002644                          2330             
00002644                          2331              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002644  13FC 00B9 000044C3      2332              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000264C  13FC 0020 000044C4      2333              MOVE.B   #$20,GET_SRC_START_END
00002654                          2334  
00002654                          2335              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002654  0285 0000FE3F           2336              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000265A  0685 00000000           2337              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A An Register (001) 
00002660                          2338  
00002660                          2339        
00002660  6100 10CA               2340              BSR     GET_EA_EA_DEST      *GETS Dn
00002664  163C 002C               2341              MOVE.B  #',',D3
00002668  6100 1530               2342              BSR     PUSH_STACK               
0000266C  6100 0C8E               2343              BSR     GET_EA_EA_SRC       *GETS <ea>       
00002670                          2344  
00002670                          2345  
00002670                          2346  
00002670  6000 049A               2347              BRA     OP1101_ADD_RETURN
00002674                          2348  OP1100_PRINT_L2 
00002674  163C 004C               2349              MOVE.B  #'L',D3
00002678  6100 1520               2350              BSR     PUSH_STACK
0000267C                          2351              
0000267C                          2352              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000267C  13FC 0000 000044C0      2353              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002684  13FC 0083 000044C1      2354              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000268C                          2355             
0000268C                          2356              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000268C  13FC 00B9 000044C3      2357              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002694  13FC 0020 000044C4      2358              MOVE.B   #$20,GET_SRC_START_END
0000269C                          2359  
0000269C                          2360             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000269C  0285 0000FE3F           2361              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000026A2  0685 00000000           2362              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
000026A8                          2363  
000026A8                          2364               
000026A8  6100 1082               2365              BSR     GET_EA_EA_DEST       *GETS Dn
000026AC  163C 002C               2366              MOVE.B  #',',D3
000026B0  6100 14E8               2367              BSR     PUSH_STACK          
000026B4  6100 0C46               2368              BSR     GET_EA_EA_SRC        *GETS <ea>
000026B8                          2369  
000026B8  6000 0102               2370              BRA     OP1100_AND_RETURN
000026BC                          2371              
000026BC                          2372  OP1100_EA_DN           
000026BC                          2373              *BITS (7 TO 6) 
000026BC                          2374              *00 = .B
000026BC                          2375              *01 = .W
000026BC                          2376              *10 = .L 
000026BC  2205                    2377              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
000026BE  EC99                    2378              ROR.L   #6,D1
000026C0  0281 00000003           2379              ANDI.L  #$03,D1
000026C6  0C81 00000000           2380              CMPI.L  #$00,D1 *EQUALS .B
000026CC  6700 0016               2381              BEQ     OP1100_PRINT_B
000026D0  0C81 00000001           2382              CMPI.L  #$01,D1 *EQUALS .W
000026D6  6700 0054               2383              BEQ     OP1100_PRINT_W
000026DA  0C81 00000002           2384              CMPI.L  #$02,D1 *EQUALS .L
000026E0  6700 0092               2385              BEQ     OP1100_PRINT_L
000026E4                          2386  OP1100_PRINT_B
000026E4  163C 0042               2387              MOVE.B  #'B',D3
000026E8  6100 14B0               2388              BSR     PUSH_STACK
000026EC                          2389                
000026EC                          2390              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000026EC  13FC 0000 000044C0      2391              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000026F4  13FC 0002 000044C1      2392              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000026FC                          2393             
000026FC                          2394              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000026FC  13FC 00B9 000044C3      2395              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002704  13FC 0020 000044C4      2396              MOVE.B   #$20,GET_SRC_START_END
0000270C                          2397  
0000270C                          2398             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000270C  0285 0000FE3F           2399              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002712  0685 00000000           2400              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "AN" Register (001) 
00002718                          2401  
00002718                          2402              
00002718  6100 0BE2               2403              BSR     GET_EA_EA_SRC      *GETS <ea>
0000271C  163C 002C               2404              MOVE.B  #',',D3
00002720  6100 1478               2405              BSR     PUSH_STACK          
00002724  6100 1006               2406              BSR     GET_EA_EA_DEST       *GETS Dn
00002728                          2407              
00002728  6000 03E2               2408              BRA     OP1101_ADD_RETURN
0000272C                          2409  OP1100_PRINT_W
0000272C  163C 0057               2410              MOVE.B  #'W',D3
00002730  6100 1468               2411              BSR     PUSH_STACK
00002734                          2412  
00002734                          2413              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002734  13FC 0000 000044C0      2414              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000273C  13FC 0002 000044C1      2415              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002744                          2416             
00002744                          2417              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002744  13FC 00B9 000044C3      2418              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000274C  13FC 0020 000044C4      2419              MOVE.B   #$20,GET_SRC_START_END
00002754                          2420  
00002754                          2421             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002754  0285 0000FE3F           2422              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000275A  0685 00000000           2423              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002760                          2424  
00002760                          2425              
00002760  6100 0B9A               2426              BSR     GET_EA_EA_SRC      *GETS <ea>
00002764  163C 002C               2427              MOVE.B  #',',D3
00002768  6100 1430               2428              BSR     PUSH_STACK
0000276C  6100 0FBE               2429              BSR     GET_EA_EA_DEST       *GETS Dn    
00002770                          2430              
00002770  6000 F988               2431              BRA     OP1001_ADD_RETURN
00002774                          2432  OP1100_PRINT_L 
00002774  163C 004C               2433              MOVE.B  #'L',D3
00002778  6100 1420               2434              BSR     PUSH_STACK
0000277C                          2435              
0000277C                          2436              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000277C  13FC 0000 000044C0      2437              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002784  13FC 0002 000044C1      2438              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000278C                          2439             
0000278C                          2440              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000278C  13FC 00B9 000044C3      2441              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002794  13FC 0020 000044C4      2442              MOVE.B   #$20,GET_SRC_START_END
0000279C                          2443  
0000279C                          2444              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000279C  0285 0000FE3F           2445              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000027A2  0685 00000000           2446              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
000027A8                          2447  
000027A8                          2448                     
000027A8  6100 0B52               2449              BSR     GET_EA_EA_SRC      *GETS <ea>
000027AC  163C 002C               2450              MOVE.B  #',',D3
000027B0  6100 13E8               2451              BSR     PUSH_STACK                  
000027B4  6100 0F76               2452              BSR     GET_EA_EA_DEST       *GETS Dn    
000027B8                          2453  
000027B8                          2454              
000027B8  6000 0002               2455              BRA     OP1100_AND_RETURN
000027BC                          2456              
000027BC                          2457  OP1100_AND_RETURN
000027BC  4E75                    2458              RTS
000027BE                          2459  
000027BE                          2460  
000027BE                          2461  *---------------------------------------------------------------------------*
000027BE                          2462  * OP1101: Decode ADD/ADDA
000027BE                          2463  *---------------------------------------------------------------------------* 
000027BE  4280                    2464  OP1101      CLR.L   D0                  
000027C0  4281                    2465              CLR.L   D1       
000027C2  4284                    2466              CLR.L   D4                   
000027C4  227C 00000000           2467              MOVEA.L #0, A1              
000027CA  2205                    2468              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
000027CC                          2469              
000027CC                          2470              *CLEAR D3
000027CC  4283                    2471              CLR.L   D3
000027CE                          2472              
000027CE                          2473              
000027CE                          2474              
000027CE                          2475              **INTEGRATING ADDA.W/.L INTO THIS CODE**
000027CE  2205                    2476              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
000027D0                          2477              *BITS (INDEX 8) 
000027D0                          2478              *0 = ADD.B/W/L <EA>,Dn
000027D0                          2479              *1 = ADD.B/W/L Dn,<EA> 
000027D0  EC99                    2480              ROR.L   #6,D1
000027D2  0281 00000007           2481              ANDI.L  #$07,D1                 *MASKS WITH 00000111
000027D8  0C81 00000007           2482              CMPI.L  #$07,D1                 *IF EQUALS <ea>,Dn
000027DE  6700 0010               2483              BEQ     OP1101_ADDA_L            *BRANCHES TO ADDA.L
000027E2  0C81 00000003           2484              CMPI.L  #$03,D1                 *IF EQUALS <ea>,Dn
000027E8  6700 0078               2485              BEQ     OP1101_ADDA_W           *BRANCHES TO ADDA.W
000027EC  6000 00E6               2486              BRA     OP1101_DETERMINE_DN_EA_OR_EA_DN         *ELSE CHECK ADD.B/.W/.L
000027F0                          2487              
000027F0                          2488  OP1101_ADDA_L
000027F0                          2489              *LOAD STACK WITH THIS OPMODE
000027F0  6100 13A8               2490              BSR     PUSH_STACK
000027F4  163C 0041               2491              MOVE.B  #'A',D3
000027F8  6100 13A0               2492              BSR     PUSH_STACK
000027FC  163C 0044               2493              MOVE.B  #'D',D3
00002800  6100 1398               2494              BSR     PUSH_STACK
00002804  163C 0044               2495              MOVE.B  #'D',D3
00002808  6100 1390               2496              BSR     PUSH_STACK
0000280C  163C 0041               2497              MOVE.B  #'A',D3
00002810  6100 1388               2498              BSR     PUSH_STACK
00002814  163C 002E               2499              MOVE.B  #'.',D3
00002818  6100 1380               2500              BSR     PUSH_STACK
0000281C  163C 004C               2501              MOVE.B  #'L',D3
00002820  6100 1378               2502              BSR     PUSH_STACK
00002824                          2503              
00002824                          2504             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002824  13FC 0000 000044C0      2505             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000282C  13FC 0000 000044C1      2506             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002834                          2507             
00002834                          2508             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002834  13FC 00B9 000044C3      2509             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000283C  13FC 0020 000044C4      2510             MOVE.B   #$20,GET_SRC_START_END
00002844                          2511  
00002844                          2512              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002844  0285 0000FE3F           2513              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000284A  0685 00000040           2514              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002850                          2515       
00002850                          2516              *PRINT <EA>,AN
00002850  6100 0AAA               2517              BSR     GET_EA_EA_SRC       *GETS <ea>
00002854  163C 002C               2518              MOVE.B  #',',D3
00002858  6100 1340               2519              BSR     PUSH_STACK                     
0000285C  6100 0ECE               2520              BSR     GET_EA_EA_DEST      *GETS Dn
00002860                          2521  
00002860                          2522              
00002860                          2523              
00002860  4E75                    2524              RTS
00002862                          2525  OP1101_ADDA_W
00002862                          2526              *LOAD STACK WITH THIS OPMODE
00002862  6100 1336               2527              BSR     PUSH_STACK
00002866  163C 0041               2528              MOVE.B  #'A',D3
0000286A  6100 132E               2529              BSR     PUSH_STACK
0000286E  163C 0044               2530              MOVE.B  #'D',D3
00002872  6100 1326               2531              BSR     PUSH_STACK
00002876  163C 0044               2532              MOVE.B  #'D',D3
0000287A  6100 131E               2533              BSR     PUSH_STACK
0000287E  163C 0041               2534              MOVE.B  #'A',D3
00002882  6100 1316               2535              BSR     PUSH_STACK
00002886  163C 002E               2536              MOVE.B  #'.',D3
0000288A  6100 130E               2537              BSR     PUSH_STACK
0000288E  163C 0057               2538              MOVE.B  #'W',D3
00002892  6100 1306               2539              BSR     PUSH_STACK
00002896                          2540              
00002896                          2541             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002896  13FC 0000 000044C0      2542             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000289E  13FC 0000 000044C1      2543             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000028A6                          2544             
000028A6                          2545             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000028A6  13FC 00B9 000044C3      2546             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000028AE  13FC 0020 000044C4      2547             MOVE.B   #$20,GET_SRC_START_END
000028B6                          2548  
000028B6                          2549              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000028B6  0285 0000FE3F           2550              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000028BC  0685 00000040           2551              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
000028C2                          2552       
000028C2                          2553              *PRINT <EA>,AN
000028C2  6100 0A38               2554              BSR     GET_EA_EA_SRC       *GETS <ea>
000028C6  163C 002C               2555              MOVE.B  #',',D3
000028CA  6100 12CE               2556              BSR     PUSH_STACK                     
000028CE  6100 0E5C               2557              BSR     GET_EA_EA_DEST      *GETS Dn
000028D2                          2558  
000028D2  4E75                    2559              RTS
000028D4                          2560  
000028D4                          2561  OP1101_DETERMINE_DN_EA_OR_EA_DN 
000028D4                          2562              *LOAD STACK WITH THIS OPMODE
000028D4  6100 12C4               2563              BSR     PUSH_STACK
000028D8  163C 0041               2564              MOVE.B  #'A',D3
000028DC  6100 12BC               2565              BSR     PUSH_STACK
000028E0  163C 0044               2566              MOVE.B  #'D',D3
000028E4  6100 12B4               2567              BSR     PUSH_STACK
000028E8  163C 0044               2568              MOVE.B  #'D',D3
000028EC  6100 12AC               2569              BSR     PUSH_STACK
000028F0  163C 002E               2570              MOVE.B  #'.',D3
000028F4  6100 12A4               2571              BSR     PUSH_STACK
000028F8                          2572              
000028F8  2205                    2573              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
000028FA                          2574              
000028FA                          2575              *BITS (INDEX 8) 
000028FA                          2576              *0 = ADD.B/W/L <EA>,Dn
000028FA                          2577              *1 = ADD.B/W/L Dn,<EA> 
000028FA  E099                    2578              ROR.L   #8,D1
000028FC  0281 00000001           2579              ANDI.L  #$01,D1     *MASKS WITH 00000001
00002902  0C81 00000000           2580              CMPI.L  #$00,D1     *IF EQUALS <ea>,Dn
00002908  6700 0102               2581              BEQ     OP1101_EA_DN
0000290C                          2582              *else procede to Dn_EA
0000290C                          2583              
0000290C                          2584  OP1101_DN_EA
0000290C                          2585              *BITS (7 TO 6) 
0000290C                          2586              *00 = .B
0000290C                          2587              *01 = .W
0000290C                          2588              *10 = .L 
0000290C  2205                    2589              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
0000290E  EC99                    2590              ROR.L   #6,D1
00002910  0281 00000003           2591              ANDI.L  #$03,D1
00002916  0C81 00000000           2592              CMPI.L  #$00,D1 *EQUALS .B
0000291C  6700 0016               2593              BEQ     OP1101_PRINT_B2
00002920  0C81 00000001           2594              CMPI.L  #$01,D1 *EQUALS .W
00002926  6700 0054               2595              BEQ     OP1101_PRINT_W2
0000292A  0C81 00000002           2596              CMPI.L  #$02,D1 *EQUALS .L
00002930  6700 0092               2597              BEQ     OP1101_PRINT_L2
00002934                          2598  OP1101_PRINT_B2
00002934                          2599              *PUSH 'B'
00002934  163C 0042               2600              MOVE.B  #'B',D3
00002938  6100 1260               2601              BSR     PUSH_STACK
0000293C                          2602             
0000293C                          2603              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000293C  13FC 0002 000044C0      2604             MOVE.B   #$02,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002944  13FC 0083 000044C1      2605             MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000294C                          2606             
0000294C                          2607             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000294C  13FC 00B9 000044C3      2608             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002954  13FC 0020 000044C4      2609             MOVE.B   #$20,GET_SRC_START_END
0000295C                          2610  
0000295C                          2611              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000295C  0285 0000FE3F           2612              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002962  0685 00000000           2613              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002968                          2614       
00002968  6100 0DC2               2615              BSR     GET_EA_EA_DEST      *GETS Dn
0000296C  163C 002C               2616              MOVE.B  #',',D3
00002970  6100 1228               2617              BSR     PUSH_STACK                     
00002974  6100 0986               2618              BSR     GET_EA_EA_SRC       *GETS <ea>
00002978                          2619  
00002978                          2620              
00002978  6000 0192               2621              BRA     OP1101_ADD_RETURN
0000297C                          2622  OP1101_PRINT_W2
0000297C  163C 0057               2623              MOVE.B  #'W',D3
00002980  6100 1218               2624              BSR     PUSH_STACK
00002984                          2625  
00002984                          2626              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002984  13FC 0000 000044C0      2627              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000298C  13FC 0083 000044C1      2628              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002994                          2629             
00002994                          2630              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002994  13FC 00B9 000044C3      2631              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000299C  13FC 0020 000044C4      2632              MOVE.B   #$20,GET_SRC_START_END
000029A4                          2633  
000029A4                          2634              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000029A4  0285 0000FE3F           2635              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000029AA  0685 00000000           2636              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
000029B0                          2637  
000029B0                          2638        
000029B0  6100 0D7A               2639              BSR     GET_EA_EA_DEST      *GETS Dn
000029B4  163C 002C               2640              MOVE.B  #',',D3
000029B8  6100 11E0               2641              BSR     PUSH_STACK               
000029BC  6100 093E               2642              BSR     GET_EA_EA_SRC       *GETS <ea>       
000029C0                          2643  
000029C0                          2644  
000029C0                          2645  
000029C0  6000 014A               2646              BRA     OP1101_ADD_RETURN
000029C4                          2647  OP1101_PRINT_L2 
000029C4  163C 004C               2648              MOVE.B  #'L',D3
000029C8  6100 11D0               2649              BSR     PUSH_STACK
000029CC                          2650              
000029CC                          2651              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000029CC  13FC 0000 000044C0      2652              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000029D4  13FC 0083 000044C1      2653              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000029DC                          2654             
000029DC                          2655              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000029DC  13FC 00B9 000044C3      2656              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000029E4  13FC 0020 000044C4      2657              MOVE.B   #$20,GET_SRC_START_END
000029EC                          2658  
000029EC                          2659             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000029EC  0285 0000FE3F           2660              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000029F2  0685 00000000           2661              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
000029F8                          2662  
000029F8                          2663               
000029F8  6100 0D32               2664              BSR     GET_EA_EA_DEST       *GETS Dn
000029FC  163C 002C               2665              MOVE.B  #',',D3
00002A00  6100 1198               2666              BSR     PUSH_STACK          
00002A04  6100 08F6               2667              BSR     GET_EA_EA_SRC        *GETS <ea>
00002A08                          2668  
00002A08  6000 0102               2669              BRA     OP1101_ADD_RETURN
00002A0C                          2670              
00002A0C                          2671  OP1101_EA_DN           
00002A0C                          2672              *BITS (7 TO 6) 
00002A0C                          2673              *00 = .B
00002A0C                          2674              *01 = .W
00002A0C                          2675              *10 = .L 
00002A0C  2205                    2676              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00002A0E  EC99                    2677              ROR.L   #6,D1
00002A10  0281 00000003           2678              ANDI.L  #$03,D1
00002A16  0C81 00000000           2679              CMPI.L  #$00,D1 *EQUALS .B
00002A1C  6700 0016               2680              BEQ     OP1101_PRINT_B
00002A20  0C81 00000001           2681              CMPI.L  #$01,D1 *EQUALS .W
00002A26  6700 0054               2682              BEQ     OP1101_PRINT_W
00002A2A  0C81 00000002           2683              CMPI.L  #$02,D1 *EQUALS .L
00002A30  6700 0092               2684              BEQ     OP1101_PRINT_L
00002A34                          2685  OP1101_PRINT_B
00002A34  163C 0042               2686              MOVE.B  #'B',D3
00002A38  6100 1160               2687              BSR     PUSH_STACK
00002A3C                          2688                
00002A3C                          2689              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002A3C  13FC 0002 000044C0      2690              MOVE.B   #$02,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002A44  13FC 0002 000044C1      2691              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002A4C                          2692             
00002A4C                          2693              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002A4C  13FC 00B9 000044C3      2694              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002A54  13FC 0020 000044C4      2695              MOVE.B   #$20,GET_SRC_START_END
00002A5C                          2696  
00002A5C                          2697             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002A5C  0285 0000FE3F           2698              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002A62  0685 00000000           2699              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002A68                          2700  
00002A68                          2701              
00002A68  6100 0892               2702              BSR     GET_EA_EA_SRC      *GETS <ea>
00002A6C  163C 002C               2703              MOVE.B  #',',D3
00002A70  6100 1128               2704              BSR     PUSH_STACK          
00002A74  6100 0CB6               2705              BSR     GET_EA_EA_DEST       *GETS Dn
00002A78                          2706              
00002A78  6000 0092               2707              BRA     OP1101_ADD_RETURN
00002A7C                          2708  OP1101_PRINT_W
00002A7C  163C 0057               2709              MOVE.B  #'W',D3
00002A80  6100 1118               2710              BSR     PUSH_STACK
00002A84                          2711  
00002A84                          2712              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002A84  13FC 0000 000044C0      2713              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002A8C  13FC 0000 000044C1      2714              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002A94                          2715             
00002A94                          2716              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002A94  13FC 00B9 000044C3      2717              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002A9C  13FC 0020 000044C4      2718              MOVE.B   #$20,GET_SRC_START_END
00002AA4                          2719  
00002AA4                          2720             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002AA4  0285 0000FE3F           2721              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002AAA  0685 00000000           2722              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002AB0                          2723  
00002AB0                          2724              
00002AB0  6100 084A               2725              BSR     GET_EA_EA_SRC      *GETS <ea>
00002AB4  163C 002C               2726              MOVE.B  #',',D3
00002AB8  6100 10E0               2727              BSR     PUSH_STACK
00002ABC  6100 0C6E               2728              BSR     GET_EA_EA_DEST       *GETS Dn    
00002AC0                          2729              
00002AC0  6000 004A               2730              BRA     OP1101_ADD_RETURN
00002AC4                          2731  OP1101_PRINT_L 
00002AC4  163C 004C               2732              MOVE.B  #'L',D3
00002AC8  6100 10D0               2733              BSR     PUSH_STACK
00002ACC                          2734              
00002ACC                          2735              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002ACC  13FC 0000 000044C0      2736              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002AD4  13FC 0000 000044C1      2737              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002ADC                          2738             
00002ADC                          2739              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002ADC  13FC 00B9 000044C3      2740              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002AE4  13FC 0020 000044C4      2741              MOVE.B   #$20,GET_SRC_START_END
00002AEC                          2742  
00002AEC                          2743              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002AEC  0285 0000FE3F           2744              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002AF2  0685 00000000           2745              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002AF8                          2746  
00002AF8                          2747                     
00002AF8  6100 0802               2748              BSR     GET_EA_EA_SRC      *GETS <ea>
00002AFC  163C 002C               2749              MOVE.B  #',',D3
00002B00  6100 1098               2750              BSR     PUSH_STACK                  
00002B04  6100 0C26               2751              BSR     GET_EA_EA_DEST       *GETS Dn    
00002B08                          2752  
00002B08                          2753              
00002B08  6000 0002               2754              BRA     OP1101_ADD_RETURN
00002B0C                          2755              
00002B0C                          2756  OP1101_ADD_RETURN
00002B0C  4E75                    2757              RTS
00002B0E                          2758              
00002B0E                          2759              *ADDW
00002B0E  0C01 0006               2760              CMPI.B  #$6,D1
00002B12  6700 0056               2761              BEQ     OP_ADDA_W
00002B16  0C01 000E               2762              CMPI.B  #$E,D1
00002B1A  6700 0066               2763              BEQ     OP_ADDA_L 
00002B1E                          2764  
00002B1E  4EF8 14B8               2765              JMP     OP_DATA  
00002B22                          2766            
00002B22                          2767  *---------------------------------------------------------------------------*
00002B22                          2768  * OP_ADD: display ADD and proceed to EA
00002B22                          2769  *---------------------------------------------------------------------------*  
00002B22  43F9 00004377           2770  OP_ADD_B    LEA     DISP_ADD_B,A1
00002B28  103C 000E               2771              MOVE.B  #14,D0
00002B2C  4E4F                    2772              TRAP    #15
00002B2E  183C 0000               2773              MOVE.B  #0,D4
00002B32  4EF9 00002EAC           2774              JMP     EA_GEN
00002B38                          2775  
00002B38  4E75                    2776              RTS
00002B3A                          2777  
00002B3A  43F9 00004380           2778  OP_ADD_W    LEA     DISP_ADD_W,A1
00002B40  103C 000E               2779              MOVE.B  #14,D0
00002B44  4E4F                    2780              TRAP    #15
00002B46  183C 0001               2781              MOVE.B  #1,D4
00002B4A  4EF9 00002EAC           2782              JMP     EA_GEN
00002B50                          2783  
00002B50  4E75                    2784              RTS
00002B52                          2785  
00002B52  43F9 00004389           2786  OP_ADD_L    LEA     DISP_ADD_L,A1
00002B58  103C 000E               2787              MOVE.B  #14,D0
00002B5C  4E4F                    2788              TRAP    #15
00002B5E  183C 0002               2789              MOVE.B  #2,D4
00002B62  4EF9 00002EAC           2790              JMP     EA_GEN
00002B68                          2791  
00002B68  4E75                    2792              RTS
00002B6A                          2793  
00002B6A                          2794  *---------------------------------------------------------------------------*
00002B6A                          2795  * OP_ADDA: display ADDA and proceed to EA
00002B6A                          2796  *---------------------------------------------------------------------------*  
00002B6A  43F9 00004392           2797  OP_ADDA_W   LEA     DISP_ADDA_W,A1
00002B70  103C 000E               2798              MOVE.B  #14,D0
00002B74  4E4F                    2799              TRAP    #15
00002B76  183C 0001               2800              MOVE.B  #1,D4
00002B7A  4EF9 00002EAC           2801              JMP     EA_GEN
00002B80                          2802  
00002B80  4E75                    2803              RTS
00002B82                          2804  
00002B82  43F9 0000439C           2805  OP_ADDA_L   LEA     DISP_ADDA_L,A1
00002B88  103C 000E               2806              MOVE.B  #14,D0
00002B8C  4E4F                    2807              TRAP    #15
00002B8E  183C 0002               2808              MOVE.B  #2,D4
00002B92  4EF9 00002EAC           2809              JMP     EA_GEN
00002B98                          2810  
00002B98  4E75                    2811              RTS
00002B9A                          2812              
00002B9A                          2813  *---------------------------------------------------------------------------*
00002B9A                          2814  * OP1110: LSR/LSL/ASR/ASL/ROL/ROR
00002B9A                          2815  *---------------------------------------------------------------------------* 
00002B9A  4280                    2816  OP1110      CLR.L   D0                  
00002B9C  4281                    2817              CLR.L   D1   
00002B9E  4284                    2818              CLR.L   D4                   
00002BA0  227C 00000000           2819              MOVEA.L #0, A1                 
00002BA6  2205                    2820              MOVE.L  D5,D1
00002BA8                          2821              
00002BA8                          2822              * check for LSX
00002BA8  E699                    2823              ROR.L   #3,D1
00002BAA  0281 00000001           2824              ANDI.L  #$1,D1
00002BB0  0C01 0001               2825              CMPI.B  #1,D1
00002BB4  6700 002E               2826              BEQ     OP_LSX
00002BB8                          2827              
00002BB8                          2828              * reset D1 and check for ASX
00002BB8  4281                    2829              CLR.L   D1
00002BBA  2205                    2830              MOVE.L  D5,D1
00002BBC  E699                    2831              ROR.L   #3,D1
00002BBE  0281 00000001           2832              ANDI.L  #$1,D1
00002BC4  0C01 0000               2833              CMPI.B  #0,D1
00002BC8  6700 0032               2834              BEQ     OP_ASX
00002BCC                          2835  
00002BCC                          2836              * reset D1 and check for ROX
00002BCC  4281                    2837              CLR.L   D1
00002BCE  2205                    2838              MOVE.L  D5,D1
00002BD0  E699                    2839              ROR.L   #3,D1
00002BD2  0281 00000001           2840              ANDI.L  #$1,D1
00002BD8  0C01 0003               2841              CMPI.B  #3,D1
00002BDC  6700 0036               2842              BEQ     OP_ROX
00002BE0                          2843              
00002BE0  4EF8 14B8               2844              JMP     OP_DATA
00002BE4                          2845  
00002BE4                          2846  *---------------------------------------------------------------------------*
00002BE4                          2847  * OP_LSX: process LSR/LSL
00002BE4                          2848  *---------------------------------------------------------------------------*            
00002BE4  EA99                    2849  OP_LSX      ROR.L   #5,D1
00002BE6  0281 00000001           2850              ANDI.L  #$1,D1
00002BEC  0C01 0000               2851              CMPI.B  #0,D1
00002BF0  6700 003A               2852              BEQ     OP_LSR
00002BF4  0C01 0001               2853              CMPI.B  #1,D1
00002BF8  6700 008C               2854              BEQ     OP_LSL
00002BFC                          2855              
00002BFC                          2856  *---------------------------------------------------------------------------*
00002BFC                          2857  * OP_ASX: process ASR/ASL
00002BFC                          2858  *---------------------------------------------------------------------------*  
00002BFC  EA99                    2859  OP_ASX      ROR.L   #5,D1
00002BFE  0281 00000001           2860              ANDI.L  #$1,D1
00002C04  0C01 0000               2861              CMPI.B  #0,D1
00002C08  6700 00D6               2862              BEQ     OP_ASR
00002C0C  0C01 0001               2863              CMPI.B  #1,D1
00002C10  6700 0128               2864              BEQ     OP_ASL
00002C14                          2865              
00002C14                          2866  *---------------------------------------------------------------------------*
00002C14                          2867  * OP_ROX: process ROR/ROL
00002C14                          2868  *---------------------------------------------------------------------------*  
00002C14  EA99                    2869  OP_ROX      ROR.L   #5,D1
00002C16  0281 00000001           2870              ANDI.L  #$1,D1
00002C1C  0C01 0000               2871              CMPI.B  #0,D1
00002C20  6700 0172               2872              BEQ     OP_ROR
00002C24  0C01 0001               2873              CMPI.B  #1,D1
00002C28  6700 01C4               2874              BEQ     OP_ROL
00002C2C                          2875  
00002C2C                          2876  *---------------------------------------------------------------------------*
00002C2C                          2877  * OP_LSR: decode and display LSR
00002C2C                          2878  *---------------------------------------------------------------------------*        
00002C2C  E599                    2879  OP_LSR      ROL.L   #2,D1
00002C2E  0281 00000003           2880              ANDI.L  #$3,D1
00002C34  0C01 0000               2881              CMPI.B  #0,D1
00002C38  6700 0016               2882              BEQ     OP_LSR_B
00002C3C  0C01 0001               2883              CMPI.B  #$1,D1
00002C40  6700 0032               2884              BEQ     OP_LSR_W
00002C44  0C01 0002               2885              CMPI.B  #$2,D1
00002C48  6700 0018               2886              BEQ     OP_LSR_L
00002C4C                          2887              
00002C4C  4EF8 14B8               2888              JMP     OP_DATA
00002C50                          2889  
00002C50  43F9 000043A6           2890  OP_LSR_B    LEA     DISP_LSR_B,A1
00002C56  103C 000E               2891              MOVE.B  #14,D0
00002C5A  4E4F                    2892              TRAP    #15
00002C5C  183C 0000               2893              MOVE.B  #0,D4
00002C60  4E75                    2894              RTS
00002C62                          2895  
00002C62  43F9 000043CA           2896  OP_LSR_L    LEA     DISP_LSR_L,A1
00002C68  103C 000E               2897              MOVE.B  #14,D0
00002C6C  4E4F                    2898              TRAP    #15
00002C6E  183C 0002               2899              MOVE.B  #2,D4
00002C72  4E75                    2900              RTS
00002C74                          2901  
00002C74  43F9 000043B8           2902  OP_LSR_W    LEA     DISP_LSR_W,A1
00002C7A  103C 000E               2903              MOVE.B  #14,D0
00002C7E  4E4F                    2904              TRAP    #15
00002C80  183C 0001               2905              MOVE.B  #1,D4
00002C84  4E75                    2906              RTS
00002C86                          2907   
00002C86                          2908  *---------------------------------------------------------------------------*
00002C86                          2909  * OP_LSL: decode and display LSL
00002C86                          2910  *---------------------------------------------------------------------------*             
00002C86  E599                    2911  OP_LSL      ROL.L   #2,D1
00002C88  0281 00000003           2912              ANDI.L  #$3,D1
00002C8E  0C01 0000               2913              CMPI.B  #0,D1
00002C92  6700 0016               2914              BEQ     OP_LSL_B
00002C96  0C01 0001               2915              CMPI.B  #$1,D1
00002C9A  6700 0032               2916              BEQ     OP_LSL_W
00002C9E  0C01 0002               2917              CMPI.B  #$2,D1
00002CA2  6700 0018               2918              BEQ     OP_LSL_L
00002CA6                          2919              
00002CA6  4EF8 14B8               2920              JMP OP_DATA
00002CAA                          2921  
00002CAA  43F9 000043AF           2922  OP_LSL_B    LEA     DISP_LSL_B,A1
00002CB0  103C 000E               2923              MOVE.B  #14,D0
00002CB4  4E4F                    2924              TRAP    #15
00002CB6  183C 0000               2925              MOVE.B  #0,D4
00002CBA  4E75                    2926              RTS
00002CBC                          2927  
00002CBC  43F9 000043D3           2928  OP_LSL_L    LEA     DISP_LSL_L,A1
00002CC2  103C 000E               2929              MOVE.B  #14,D0
00002CC6  4E4F                    2930              TRAP    #15
00002CC8  183C 0002               2931              MOVE.B  #2,D4
00002CCC  4E75                    2932              RTS
00002CCE                          2933  
00002CCE  43F9 000043C1           2934  OP_LSL_W    LEA     DISP_LSL_W,A1
00002CD4  103C 000E               2935              MOVE.B  #14,D0
00002CD8  4E4F                    2936              TRAP    #15
00002CDA  183C 0001               2937              MOVE.B  #1,D4
00002CDE  4E75                    2938              RTS
00002CE0                          2939   
00002CE0                          2940  *---------------------------------------------------------------------------*
00002CE0                          2941  * OP_ASR: decode and display ASR
00002CE0                          2942  *---------------------------------------------------------------------------*             
00002CE0  E599                    2943  OP_ASR      ROL.L   #2,D1
00002CE2  0281 00000003           2944              ANDI.L  #$3,D1
00002CE8  0C01 0000               2945              CMPI.B  #0,D1
00002CEC  6700 0016               2946              BEQ     OP_ASR_B
00002CF0  0C01 0001               2947              CMPI.B  #$1,D1
00002CF4  6700 0032               2948              BEQ     OP_ASR_W
00002CF8  0C01 0002               2949              CMPI.B  #$2,D1
00002CFC  6700 0018               2950              BEQ     OP_ASR_L
00002D00                          2951              
00002D00  4EF8 14B8               2952              JMP OP_DATA
00002D04                          2953  
00002D04  43F9 000043DC           2954  OP_ASR_B    LEA     DISP_ASR_B,A1
00002D0A  103C 000E               2955              MOVE.B  #14,D0
00002D0E  4E4F                    2956              TRAP    #15
00002D10  183C 0000               2957              MOVE.B  #0,D4
00002D14  4E75                    2958              RTS
00002D16                          2959  
00002D16  43F9 00004400           2960  OP_ASR_L    LEA     DISP_ASR_L,A1
00002D1C  103C 000E               2961              MOVE.B  #14,D0
00002D20  4E4F                    2962              TRAP    #15
00002D22  183C 0002               2963              MOVE.B  #2,D4
00002D26  4E75                    2964              RTS
00002D28                          2965  
00002D28  43F9 000043EE           2966  OP_ASR_W    LEA     DISP_ASR_W,A1
00002D2E  103C 000E               2967              MOVE.B  #14,D0
00002D32  4E4F                    2968              TRAP    #15
00002D34  183C 0001               2969              MOVE.B  #1,D4
00002D38  4E75                    2970              RTS
00002D3A                          2971       
00002D3A                          2972  *---------------------------------------------------------------------------*
00002D3A                          2973  * OP_ASL: decode and display ASL
00002D3A                          2974  *---------------------------------------------------------------------------*         
00002D3A  E599                    2975  OP_ASL      ROL.L   #2,D1
00002D3C  0281 00000003           2976              ANDI.L  #$3,D1
00002D42  0C01 0000               2977              CMPI.B  #0,D1
00002D46  6700 0016               2978              BEQ     OP_ASL_B
00002D4A  0C01 0001               2979              CMPI.B  #$1,D1
00002D4E  6700 0032               2980              BEQ     OP_ASL_W
00002D52  0C01 0002               2981              CMPI.B  #$2,D1
00002D56  6700 0018               2982              BEQ     OP_ASL_L
00002D5A                          2983              
00002D5A  4EF8 14B8               2984              JMP OP_DATA
00002D5E                          2985  
00002D5E  43F9 000043E5           2986  OP_ASL_B    LEA     DISP_ASL_B,A1
00002D64  103C 000E               2987              MOVE.B  #14,D0
00002D68  4E4F                    2988              TRAP    #15
00002D6A  183C 0000               2989              MOVE.B  #0,D4
00002D6E  4E75                    2990              RTS
00002D70                          2991  
00002D70  43F9 00004409           2992  OP_ASL_L    LEA     DISP_ASL_L,A1
00002D76  103C 000E               2993              MOVE.B  #14,D0
00002D7A  4E4F                    2994              TRAP    #15
00002D7C  183C 0002               2995              MOVE.B  #2,D4
00002D80  4E75                    2996              RTS
00002D82                          2997  
00002D82  43F9 000043F7           2998  OP_ASL_W    LEA     DISP_ASL_W,A1
00002D88  103C 000E               2999              MOVE.B  #14,D0
00002D8C  4E4F                    3000              TRAP    #15
00002D8E  183C 0001               3001              MOVE.B  #1,D4
00002D92  4E75                    3002              RTS
00002D94                          3003   
00002D94                          3004  *---------------------------------------------------------------------------*
00002D94                          3005  * OP_ROR: decode and display ROR
00002D94                          3006  *---------------------------------------------------------------------------*             
00002D94  E599                    3007  OP_ROR      ROL.L   #2,D1
00002D96  0281 00000003           3008              ANDI.L  #$3,D1
00002D9C  0C01 0000               3009              CMPI.B  #0,D1
00002DA0  6700 0016               3010              BEQ     OP_ROR_B
00002DA4  0C01 0001               3011              CMPI.B  #$1,D1
00002DA8  6700 0032               3012              BEQ     OP_ROR_W
00002DAC  0C01 0002               3013              CMPI.B  #$2,D1
00002DB0  6700 0018               3014              BEQ     OP_ROR_L
00002DB4                          3015              
00002DB4  4EF8 14B8               3016              JMP OP_DATA
00002DB8                          3017  
00002DB8  43F9 00004412           3018  OP_ROR_B    LEA     DISP_ROR_B,A1
00002DBE  103C 000E               3019              MOVE.B  #14,D0
00002DC2  4E4F                    3020              TRAP    #15
00002DC4  183C 0000               3021              MOVE.B  #0,D4
00002DC8  4E75                    3022              RTS
00002DCA                          3023  
00002DCA  43F9 00004436           3024  OP_ROR_L    LEA     DISP_ROR_L,A1
00002DD0  103C 000E               3025              MOVE.B  #14,D0
00002DD4  4E4F                    3026              TRAP    #15
00002DD6  183C 0002               3027              MOVE.B  #2,D4
00002DDA  4E75                    3028              RTS
00002DDC                          3029  
00002DDC  43F9 00004424           3030  OP_ROR_W    LEA     DISP_ROR_W,A1
00002DE2  103C 000E               3031              MOVE.B  #14,D0
00002DE6  4E4F                    3032              TRAP    #15
00002DE8  183C 0001               3033              MOVE.B  #1,D4
00002DEC  4E75                    3034              RTS
00002DEE                          3035  
00002DEE                          3036  *---------------------------------------------------------------------------*
00002DEE                          3037  * OP_ROL: decode and display ROL
00002DEE                          3038  *---------------------------------------------------------------------------*             
00002DEE  E599                    3039  OP_ROL      ROL.L   #2,D1
00002DF0  0281 00000003           3040              ANDI.L  #$3,D1
00002DF6  0C01 0000               3041              CMPI.B  #0,D1
00002DFA  6700 0016               3042              BEQ     OP_ROL_B
00002DFE  0C01 0001               3043              CMPI.B  #$1,D1
00002E02  6700 0032               3044              BEQ     OP_ROL_W
00002E06  0C01 0002               3045              CMPI.B  #$2,D1
00002E0A  6700 0018               3046              BEQ     OP_ROL_L
00002E0E                          3047              
00002E0E  4EF8 14B8               3048              JMP OP_DATA
00002E12                          3049  
00002E12                          3050  
00002E12  43F9 0000441B           3051  OP_ROL_B    LEA     DISP_ROL_B,A1
00002E18  103C 000E               3052              MOVE.B  #14,D0
00002E1C  4E4F                    3053              TRAP    #15
00002E1E  183C 0000               3054              MOVE.B  #0,D4
00002E22  4E75                    3055              RTS
00002E24                          3056  
00002E24  43F9 0000443F           3057  OP_ROL_L    LEA     DISP_ROL_L,A1
00002E2A  103C 000E               3058              MOVE.B  #14,D0
00002E2E  4E4F                    3059              TRAP    #15
00002E30  183C 0002               3060              MOVE.B  #2,D4
00002E34  4E75                    3061              RTS
00002E36                          3062  
00002E36  43F9 0000442D           3063  OP_ROL_W    LEA     DISP_ROL_W,A1
00002E3C  103C 000E               3064              MOVE.B  #14,D0
00002E40  4E4F                    3065              TRAP    #15
00002E42  183C 0001               3066              MOVE.B  #1,D4
00002E46  4E75                    3067              RTS
00002E48                          3068              
00002E48                          3069  *---------------------------------------------------------------------------*
00002E48                          3070  * OP1111 : Special reserved
00002E48                          3071  *---------------------------------------------------------------------------*           
00002E48  4EF8 14B8               3072  OP1111      JMP     OP_DATA
00002E4C                          3073  
00002E4C                          3074  *---------------------------------------------------------------------------*
00002E4C                          3075  * EA_NOSRC: decode and display effective addresses for NEG/JSR
00002E4C                          3076  *---------------------------------------------------------------------------*
00002E4C                          3077  EA_NOSRC    
00002E4C  4EB9 00002F0A           3078              JSR     SRC_MODE
00002E52  43F9 0000410C           3079              LEA     ENDLINE_M,A1
00002E58  103C 000E               3080              MOVE.B  #14,D0
00002E5C  4E4F                    3081              TRAP    #15
00002E5E  4E75                    3082              RTS
00002E60                          3083              
00002E60                          3084  *---------------------------------------------------------------------------*
00002E60                          3085  * EA_ARITH: decode and display effective addresses for DIVS/MULS
00002E60                          3086  *---------------------------------------------------------------------------*
00002E60                          3087  EA_ARITH
00002E60  4EB9 00002F0A           3088              JSR     SRC_MODE
00002E66  43F9 00004486           3089              LEA     DISP_D,A1
00002E6C  103C 000E               3090              MOVE.B  #14,D0
00002E70  4E4F                    3091              TRAP    #15
00002E72  4EB9 00003196           3092              JSR     DEST_REGISTER
00002E78  43F9 0000410C           3093              LEA     ENDLINE_M,A1
00002E7E  103C 000E               3094              MOVE.B  #14,D0
00002E82  4E4F                    3095              TRAP    #15
00002E84  4E75                    3096              RTS
00002E86                          3097              
00002E86                          3098  *---------------------------------------------------------------------------*
00002E86                          3099  * EA_MOVEA: decode and display effective addresses for MOVEA/LEA
00002E86                          3100  *---------------------------------------------------------------------------*
00002E86                          3101  EA_MOVEA
00002E86  4EB9 00002F0A           3102              JSR     SRC_MODE
00002E8C  43F9 00004497           3103              LEA     DISP_AOP,A1
00002E92  103C 000E               3104              MOVE.B  #14,D0
00002E96  4E4F                    3105              TRAP    #15
00002E98  4EB9 00003196           3106              JSR     DEST_REGISTER
00002E9E  43F9 00004495           3107              LEA     DISP_CP,A1
00002EA4  103C 000D               3108              MOVE.B  #13,D0
00002EA8  4E4F                    3109              TRAP    #15
00002EAA  4E75                    3110              RTS
00002EAC                          3111              
00002EAC                          3112  *---------------------------------------------------------------------------*
00002EAC                          3113  * EA_GEN: decode and display effective addresses for MOVE
00002EAC                          3114  *---------------------------------------------------------------------------*
00002EAC                          3115  EA_GEN          
00002EAC                          3116              * retrieve/display source mode/register
00002EAC  4EB9 00002F0A           3117              JSR     SRC_MODE
00002EB2                          3118              
00002EB2                          3119              * retrieve/display destination mode/register
00002EB2  4EB9 00002EC6           3120              JSR     DEST_MODE
00002EB8                          3121              
00002EB8  43F9 0000410C           3122              LEA     ENDLINE_M,A1
00002EBE  103C 000E               3123              MOVE.B  #14,D0
00002EC2  4E4F                    3124              TRAP    #15
00002EC4                          3125              
00002EC4  4E75                    3126              RTS
00002EC6                          3127  
00002EC6                          3128  *---------------------------------------------------------------------------*
00002EC6                          3129  * DEST_MODE: decode and display destination mode (bit 8 - 6)
00002EC6                          3130  *---------------------------------------------------------------------------*           
00002EC6                          3131  DEST_MODE   
00002EC6                          3132              * clear registers to store temp data
00002EC6  4280                    3133              CLR.L   D0                      
00002EC8  4281                    3134              CLR.L   D1                      
00002ECA  207C 00000000           3135              MOVEA.L #0, A0                  
00002ED0  227C 00000000           3136              MOVEA.L #0, A1                  
00002ED6  2205                    3137              MOVE.L  D5,D1
00002ED8  EC89                    3138              LSR.L   #6,D1
00002EDA  0281 00000007           3139              ANDI.L  #$7,D1
00002EE0  0C01 0000               3140              CMPI.B  #0,D1   * Dn
00002EE4  6700 0082               3141              BEQ     D_MODE000
00002EE8  0C01 0002               3142              CMPI.B  #2,D1   * (An)
00002EEC  6700 00C2               3143              BEQ     D_MODE010
00002EF0  0C01 0003               3144              CMPI.B  #3,D1   * (An)+
00002EF4  6700 011A               3145              BEQ     D_MODE011
00002EF8  0C01 0004               3146              CMPI.B  #4,D1   * -(An)
00002EFC  6700 0132               3147              BEQ     D_MODE100
00002F00  0C01 0007               3148              CMPI.B  #7,D1  * abs
00002F04  6700 017C               3149              BEQ     D_MODE111 
00002F08  4E75                    3150              RTS
00002F0A                          3151  
00002F0A                          3152  *---------------------------------------------------------------------------*
00002F0A                          3153  * SRC_MODE: decode and display source mode (bit 5 - 3)
00002F0A                          3154  *---------------------------------------------------------------------------*  
00002F0A                          3155  SRC_MODE    
00002F0A                          3156              * clear registers to store temp data
00002F0A  4280                    3157              CLR.L   D0                      
00002F0C  4281                    3158              CLR.L   D1                      
00002F0E  207C 00000000           3159              MOVEA.L #0, A0                  
00002F14  227C 00000000           3160              MOVEA.L #0, A1                  
00002F1A  2205                    3161              MOVE.L  D5,D1
00002F1C  E489                    3162              LSR.L   #2,D1
00002F1E  0281 0000000E           3163              ANDI.L  #$E,D1
00002F24                          3164              
00002F24  0C01 0000               3165              CMPI.B  #0,D1   * Dn
00002F28  6700 002A               3166              BEQ     MODE000
00002F2C  0C01 0002               3167              CMPI.B  #2,D1   * An 
00002F30  6700 004A               3168              BEQ     MODE001
00002F34  0C01 0004               3169              CMPI.B  #4,D1   * (An)
00002F38  6700 0056               3170              BEQ     MODE010
00002F3C  0C01 0006               3171              CMPI.B  #6,D1   * (An)+
00002F40  6700 008E               3172              BEQ     MODE011
00002F44  0C01 0008               3173              CMPI.B  #8,D1   * -(An)
00002F48  6700 00A6               3174              BEQ     MODE100
00002F4C  0C01 000F               3175              CMPI.B  #15,D1  * abs/immediate
00002F50  6700 00FE               3176              BEQ     MODE111 
00002F54                          3177        
00002F54                          3178  *---------------------------------------------------------------------------*
00002F54                          3179  * MODE000: decode and display source mode Dn
00002F54                          3180  *---------------------------------------------------------------------------*           
00002F54                          3181  MODE000     *Dn
00002F54  43F9 00004486           3182              LEA     DISP_D,A1
00002F5A  103C 000E               3183              MOVE.B  #14,D0
00002F5E  4E4F                    3184              TRAP    #15
00002F60  4EB9 000031F2           3185              JSR     SRC_REGISTER
00002F66  4E75                    3186              RTS
00002F68                          3187  
00002F68                          3188  *---------------------------------------------------------------------------*
00002F68                          3189  * D_MODE000: decode and display dest mode Dn
00002F68                          3190  *---------------------------------------------------------------------------*
00002F68                          3191  D_MODE000     *Dn
00002F68  43F9 00004486           3192              LEA     DISP_D,A1
00002F6E  103C 000E               3193              MOVE.B  #14,D0
00002F72  4E4F                    3194              TRAP    #15
00002F74  4EB9 00003196           3195              JSR     DEST_REGISTER
00002F7A  4E75                    3196              RTS
00002F7C                          3197  
00002F7C                          3198  *---------------------------------------------------------------------------*
00002F7C                          3199  * MODE001: decode and display source mode An
00002F7C                          3200  *---------------------------------------------------------------------------* 
00002F7C                          3201  MODE001 *An
00002F7C  43F9 0000448B           3202              LEA     DISP_A,A1
00002F82  103C 000E               3203              MOVE.B  #14,D0
00002F86  4E4F                    3204              TRAP    #15
00002F88  4EB9 000031F2           3205              JSR     SRC_REGISTER
00002F8E                          3206          
00002F8E  4E75                    3207              RTS
00002F90                          3208  
00002F90                          3209  *---------------------------------------------------------------------------*
00002F90                          3210  * MODE010: decode and display source mode (An)
00002F90                          3211  *---------------------------------------------------------------------------*    
00002F90                          3212  MODE010 *(An)
00002F90  43F9 00004497           3213              LEA     DISP_AOP,A1  *display (A
00002F96  103C 000E               3214              MOVE.B  #14,D0
00002F9A  4E4F                    3215              TRAP    #15
00002F9C                          3216  
00002F9C  4EB9 000031F2           3217              JSR     SRC_REGISTER * display register
00002FA2                          3218  
00002FA2  43F9 00004495           3219              LEA     DISP_CP,A1   *display )
00002FA8  103C 000E               3220              MOVE.B  #14,D0
00002FAC  4E4F                    3221              TRAP    #15
00002FAE                          3222              
00002FAE  4E75                    3223              RTS
00002FB0                          3224  
00002FB0                          3225  *---------------------------------------------------------------------------*
00002FB0                          3226  * D_MODE010: decode and display dest mode (An)
00002FB0                          3227  *---------------------------------------------------------------------------*
00002FB0                          3228  D_MODE010 *(An)
00002FB0  43F9 00004497           3229              LEA     DISP_AOP,A1  *display (A
00002FB6  103C 000E               3230              MOVE.B  #14,D0
00002FBA  4E4F                    3231              TRAP    #15
00002FBC                          3232     
00002FBC  4EB9 00003196           3233              JSR     DEST_REGISTER * display register
00002FC2                          3234  
00002FC2  43F9 00004495           3235              LEA     DISP_CP,A1   *display )
00002FC8  103C 000E               3236              MOVE.B  #14,D0
00002FCC  4E4F                    3237              TRAP    #15
00002FCE                          3238              
00002FCE  4E75                    3239              RTS
00002FD0                          3240  
00002FD0                          3241  *---------------------------------------------------------------------------*
00002FD0                          3242  * MODE011: decode and display source mode (An)+
00002FD0                          3243  *---------------------------------------------------------------------------*
00002FD0                          3244  MODE011 *(An)+
00002FD0  43F9 00004497           3245              LEA     DISP_AOP,A1      *display (A
00002FD6  103C 000E               3246              MOVE.B  #14,D0
00002FDA  4E4F                    3247              TRAP    #15
00002FDC                          3248              
00002FDC  4EB9 000031F2           3249              JSR     SRC_REGISTER    * display register
00002FE2                          3250  
00002FE2  43F9 000044A4           3251              LEA     DISP_POST,A1    *display )+
00002FE8  103C 000E               3252              MOVE.B  #14,D0
00002FEC  4E4F                    3253              TRAP    #15
00002FEE                          3254              
00002FEE  4E75                    3255              RTS
00002FF0                          3256              
00002FF0                          3257  *---------------------------------------------------------------------------*
00002FF0                          3258  * MODE100: decode and display source mode -(An)
00002FF0                          3259  *---------------------------------------------------------------------------*
00002FF0                          3260  MODE100 *-(An)
00002FF0  43F9 0000449D           3261              LEA     DISP_PRE,A1    *display -(A
00002FF6  103C 000E               3262              MOVE.B  #14,D0
00002FFA  4E4F                    3263              TRAP    #15
00002FFC                          3264  
00002FFC  4EB9 000031F2           3265              JSR     SRC_REGISTER    *display register
00003002                          3266  
00003002  43F9 00004495           3267              LEA     DISP_CP,A1   *display )
00003008  103C 000E               3268              MOVE.B  #14,D0
0000300C  4E4F                    3269              TRAP    #15
0000300E                          3270              
0000300E  4E75                    3271              RTS
00003010                          3272  
00003010                          3273  *---------------------------------------------------------------------------*
00003010                          3274  * D_MODE011: decode and display dest mode (An)+
00003010                          3275  *---------------------------------------------------------------------------*
00003010                          3276  D_MODE011 *(An)+
00003010  43F9 00004497           3277              LEA     DISP_AOP,A1      *display (A
00003016  103C 000E               3278              MOVE.B  #14,D0
0000301A  4E4F                    3279              TRAP    #15
0000301C                          3280  
0000301C  4EB9 00003196           3281              JSR     DEST_REGISTER    * display register
00003022                          3282  
00003022  43F9 000044A4           3283              LEA     DISP_POST,A1    *display )+
00003028  103C 000E               3284              MOVE.B  #14,D0
0000302C  4E4F                    3285              TRAP    #15
0000302E                          3286              
0000302E  4E75                    3287              RTS
00003030                          3288              
00003030                          3289  *---------------------------------------------------------------------------*
00003030                          3290  * D_MODE100: decode and display dest mode -(An)
00003030                          3291  *---------------------------------------------------------------------------*            
00003030                          3292  D_MODE100 *-(An)
00003030  43F9 0000449D           3293              LEA     DISP_PRE,A1    *display -(A
00003036  103C 000E               3294              MOVE.B  #14,D0
0000303A  4E4F                    3295              TRAP    #15
0000303C                          3296              
0000303C  4EB9 00003196           3297              JSR     DEST_REGISTER    *display register
00003042                          3298  
00003042  43F9 00004495           3299              LEA     DISP_CP,A1   *display )
00003048  103C 000E               3300              MOVE.B  #14,D0
0000304C  4E4F                    3301              TRAP    #15
0000304E                          3302              
0000304E  4E75                    3303              RTS
00003050                          3304  
00003050                          3305  *---------------------------------------------------------------------------*
00003050                          3306  * MODE111: decode and display source mode absolute/immediate
00003050                          3307  *---------------------------------------------------------------------------*
00003050                          3308  MODE111     * abs/immediate
00003050                          3309              * clear registers to store temp data
00003050  4280                    3310              CLR.L   D0                      
00003052  4281                    3311              CLR.L   D1                      
00003054  207C 00000000           3312              MOVEA.L #0, A0                  
0000305A  227C 00000000           3313              MOVEA.L #0, A1                  
00003060  2205                    3314              MOVE.L  D5,D1
00003062                          3315              
00003062                          3316              * retrieve source register for MODE 111
00003062  E389                    3317              LSL.L   #1,D1   * shift the bits to left by 1
00003064  0281 0000000E           3318              ANDI.L  #$E,D1  * mask the first 4 bits 
0000306A  0C01 0000               3319              CMPI.B  #0, D1  * if it's 0000, absolute word address
0000306E  6700 003E               3320              BEQ     WORDMODE
00003072  0C01 0002               3321              CMPI.B  #2, D1  * if it's 0010, absolute long address
00003076  6700 0062               3322              BEQ     LONGMODE
0000307A  0C01 0008               3323              CMPI.B  #8, D1  * if it's 1000, immediate data
0000307E  6700 0086               3324              BEQ     IMMEDIATE
00003082                          3325       
00003082                          3326  *---------------------------------------------------------------------------*
00003082                          3327  * D_MODE111: decode and display dest mode absolute/immediate
00003082                          3328  *---------------------------------------------------------------------------*           
00003082                          3329  D_MODE111   * abs
00003082                          3330              * clear registers to store temp data
00003082  4280                    3331              CLR.L   D0                      
00003084  4281                    3332              CLR.L   D1                      
00003086  207C 00000000           3333              MOVEA.L #0, A0                  
0000308C  227C 00000000           3334              MOVEA.L #0, A1                  
00003092  2205                    3335              MOVE.L  D5,D1
00003094                          3336              
00003094                          3337              * retrieve dest register for MODE 111
00003094  EC89                    3338              LSR.L   #6,D1   * shift the bits to right by 6
00003096  E689                    3339              LSR.L   #3,D1   * shift the bits to right by extra 3
00003098  0201 0001               3340              ANDI.B  #1,D1   * mask the first 2 bits 
0000309C  0C01 0000               3341              CMPI.B  #0, D1  * if it's 000, absolute word address
000030A0  6700 000C               3342              BEQ     WORDMODE
000030A4  0C01 0001               3343              CMPI.B  #1, D1  * if it's 001, absolute long address
000030A8  6700 0030               3344              BEQ     LONGMODE
000030AC                          3345              *JSR     OP_DATA *not sure..
000030AC  4E75                    3346              RTS
000030AE                          3347  
000030AE                          3348  
000030AE                          3349  *---------------------------------------------------------------------------*
000030AE                          3350  * WORDMODE: absolute word address
000030AE                          3351  *---------------------------------------------------------------------------*
000030AE  43F9 00004481           3352  WORDMODE    LEA     DISP_HEX,A1
000030B4  103C 000E               3353              MOVE.B  #14,D0
000030B8  4E4F                    3354              TRAP    #15
000030BA                          3355              
000030BA  4285                    3356              CLR.L   D5
000030BC  3A1D                    3357              MOVE.W  (A5)+,D5
000030BE                          3358              
000030BE  43F9 0000415F           3359              LEA     TMPOUTPUT,A1
000030C4  2205                    3360              MOVE.L  D5,D1
000030C6  7404                    3361              MOVE.L  #4,D2       *move word size 4
000030C8  4EB8 11B8               3362              JSR     HEX2ASCII
000030CC  43F9 0000415F           3363              LEA     TMPOUTPUT,A1
000030D2  103C 000E               3364              MOVE.B  #14,D0
000030D6  4E4F                    3365              TRAP    #15
000030D8                          3366              
000030D8  4E75                    3367              RTS
000030DA                          3368  
000030DA                          3369  *---------------------------------------------------------------------------*
000030DA                          3370  * LONGMODE: absolute long address
000030DA                          3371  *---------------------------------------------------------------------------*
000030DA  43F9 00004481           3372  LONGMODE    LEA     DISP_HEX,A1
000030E0  103C 000E               3373              MOVE.B  #14,D0
000030E4  4E4F                    3374              TRAP    #15
000030E6                          3375              
000030E6  4285                    3376              CLR.L   D5
000030E8  2A1D                    3377              MOVE.L  (A5)+,D5
000030EA                          3378              
000030EA  43F9 0000415F           3379              LEA     TMPOUTPUT,A1
000030F0  2205                    3380              MOVE.L  D5,D1
000030F2  7408                    3381              MOVE.L  #8,D2           *move longword size 8
000030F4  4EB8 11B8               3382              JSR     HEX2ASCII
000030F8  43F9 0000415F           3383              LEA     TMPOUTPUT,A1
000030FE  103C 000E               3384              MOVE.B  #14,D0
00003102  4E4F                    3385              TRAP    #15
00003104                          3386              
00003104  4E75                    3387              RTS
00003106                          3388  
00003106                          3389  
00003106                          3390  *---------------------------------------------------------------------------*
00003106                          3391  * IMMEDIATE: immediate address
00003106                          3392  *---------------------------------------------------------------------------*
00003106  43F9 000044A7           3393  IMMEDIATE   LEA     DISP_LB,A1
0000310C  103C 000E               3394              MOVE.B  #14,D0
00003110  4E4F                    3395              TRAP    #15
00003112  43F9 00004481           3396              LEA     DISP_HEX,A1
00003118  103C 000E               3397              MOVE.B  #14,D0
0000311C  4E4F                    3398              TRAP    #15
0000311E                          3399              
0000311E                          3400              * check for size
0000311E  0C04 0000               3401              CMPI.B  #0,D4
00003122  6700 0012               3402              BEQ     IMMD_B
00003126  0C04 0001               3403              CMPI.B  #1,D4
0000312A  6700 002A               3404              BEQ     IMMD_W
0000312E  0C04 0002               3405              CMPI.B  #2,D4
00003132  6700 0042               3406              BEQ     IMMD_L
00003136                          3407  
00003136                          3408  IMMD_B
00003136  4285                    3409              CLR.L   D5
00003138  3A1D                    3410              MOVE.W  (A5)+,D5
0000313A                          3411              
0000313A  43F9 0000415F           3412              LEA     TMPOUTPUT,A1
00003140  2205                    3413              MOVE.L  D5,D1
00003142  7402                    3414              MOVE.L  #2,D2
00003144  4EB8 11B8               3415              JSR     HEX2ASCII
00003148  43F9 0000415F           3416              LEA     TMPOUTPUT,A1
0000314E  103C 000E               3417              MOVE.B  #14,D0
00003152  4E4F                    3418              TRAP    #15
00003154  4E75                    3419              RTS
00003156                          3420              
00003156                          3421  IMMD_W
00003156  4285                    3422              CLR.L   D5
00003158  3A1D                    3423              MOVE.W  (A5)+,D5
0000315A                          3424              
0000315A  43F9 0000415F           3425              LEA     TMPOUTPUT,A1
00003160  2205                    3426              MOVE.L  D5,D1
00003162  7404                    3427              MOVE.L  #4,D2
00003164  4EB8 11B8               3428              JSR     HEX2ASCII
00003168  43F9 0000415F           3429              LEA     TMPOUTPUT,A1
0000316E  103C 000E               3430              MOVE.B  #14,D0
00003172  4E4F                    3431              TRAP    #15
00003174  4E75                    3432              RTS
00003176                          3433              
00003176                          3434  
00003176                          3435  IMMD_L
00003176  4285                    3436              CLR.L   D5
00003178  3A1D                    3437              MOVE.W  (A5)+,D5
0000317A                          3438              
0000317A  43F9 0000415F           3439              LEA     TMPOUTPUT,A1
00003180  2205                    3440              MOVE.L  D5,D1
00003182  7408                    3441              MOVE.L  #8,D2
00003184  4EB8 11B8               3442              JSR     HEX2ASCII
00003188  43F9 0000415F           3443              LEA     TMPOUTPUT,A1
0000318E  103C 000E               3444              MOVE.B  #14,D0
00003192  4E4F                    3445              TRAP    #15
00003194  4E75                    3446              RTS
00003196                          3447  
00003196                          3448  
00003196                          3449  *---------------------------------------------------------------------------*
00003196                          3450  * DEST_REGISTER: decode and display destination register (bit 11 - 9)
00003196                          3451  *---------------------------------------------------------------------------*
00003196                          3452  DEST_REGISTER
00003196                          3453              * clear registers to store temp data
00003196  4280                    3454              CLR.L   D0                      
00003198  4281                    3455              CLR.L   D1                      
0000319A  207C 00000000           3456              MOVEA.L #0, A0                  
000031A0  227C 00000000           3457              MOVEA.L #0, A1 
000031A6                          3458              
000031A6  2205                    3459              MOVE.L  D5,D1
000031A8  EC89                    3460              LSR.L   #6,D1
000031AA  E689                    3461              LSR.L   #3,D1
000031AC  0281 00000007           3462              ANDI.L  #7,D1
000031B2                          3463              
000031B2  0C01 0000               3464              CMPI.B  #0,D1
000031B6  6700 0092               3465              BEQ     REG_0
000031BA  0C01 0001               3466              CMPI.B  #1,D1
000031BE  6700 0098               3467              BEQ     REG_1
000031C2  0C01 0002               3468              CMPI.B  #2,D1
000031C6  6700 009E               3469              BEQ     REG_2
000031CA  0C01 0003               3470              CMPI.B  #3,D1
000031CE  6700 00A4               3471              BEQ     REG_3
000031D2  0C01 0004               3472              CMPI.B  #4,D1
000031D6  6700 00AA               3473              BEQ     REG_4
000031DA  0C01 0005               3474              CMPI.B  #5,D1
000031DE  6700 00B0               3475              BEQ     REG_5
000031E2  0C01 0006               3476              CMPI.B  #6,D1
000031E6  6700 00B6               3477              BEQ     REG_6
000031EA  0C01 0007               3478              CMPI.B  #7,D1
000031EE  6700 00BC               3479              BEQ     REG_7
000031F2                          3480  
000031F2                          3481  *---------------------------------------------------------------------------*
000031F2                          3482  * SRC_REGISTER: decode and display source register (bit 2 - 0)
000031F2                          3483  *---------------------------------------------------------------------------*           
000031F2                          3484  SRC_REGISTER 
000031F2                          3485              * clear registers to store temp data
000031F2  4280                    3486              CLR.L   D0                      
000031F4  4281                    3487              CLR.L   D1                      
000031F6  207C 00000000           3488              MOVEA.L #0, A0                  
000031FC  227C 00000000           3489              MOVEA.L #0, A1                  
00003202                          3490              
00003202  2205                    3491              MOVE.L  D5,D1   * temp store the processing data
00003204  0281 00000007           3492              ANDI.L  #7,D1   * mask the first 4 bits with 0111
0000320A                          3493              
0000320A  0C01 0000               3494              CMPI.B  #0,D1
0000320E  6700 003A               3495              BEQ     REG_0
00003212  0C01 0001               3496              CMPI.B  #1,D1
00003216  6700 0040               3497              BEQ     REG_1
0000321A  0C01 0002               3498              CMPI.B  #2,D1
0000321E  6700 0046               3499              BEQ     REG_2
00003222  0C01 0003               3500              CMPI.B  #3,D1
00003226  6700 004C               3501              BEQ     REG_3
0000322A  0C01 0004               3502              CMPI.B  #4,D1
0000322E  6700 0052               3503              BEQ     REG_4
00003232  0C01 0005               3504              CMPI.B  #5,D1
00003236  6700 0058               3505              BEQ     REG_5
0000323A  0C01 0006               3506              CMPI.B  #6,D1
0000323E  6700 005E               3507              BEQ     REG_6
00003242  0C01 0007               3508              CMPI.B  #7,D1
00003246  6700 0064               3509              BEQ     REG_7
0000324A                          3510  
0000324A                          3511  *---------------------------------------------------------------------------*
0000324A                          3512  * REG_0 ~ REG_7: display register 0 to 7
0000324A                          3513  *---------------------------------------------------------------------------*
0000324A  43F9 000044AC           3514  REG_0       LEA     DISP_0,A1
00003250  103C 000E               3515              MOVE.B  #14,D0
00003254  4E4F                    3516              TRAP    #15
00003256  4E75                    3517              RTS
00003258                          3518              
00003258  43F9 000044AE           3519  REG_1       LEA     DISP_1,A1
0000325E  103C 000E               3520              MOVE.B  #14,D0
00003262  4E4F                    3521              TRAP    #15
00003264  4E75                    3522              RTS
00003266                          3523              
00003266                          3524  
00003266  43F9 000044B0           3525  REG_2       LEA     DISP_2,A1
0000326C  103C 000E               3526              MOVE.B  #14,D0
00003270  4E4F                    3527              TRAP    #15
00003272  4E75                    3528              RTS
00003274                          3529            
00003274  43F9 000044B2           3530  REG_3       LEA     DISP_3,A1
0000327A  103C 000E               3531              MOVE.B  #14,D0
0000327E  4E4F                    3532              TRAP    #15
00003280  4E75                    3533              RTS
00003282                          3534              
00003282  43F9 000044B4           3535  REG_4       LEA     DISP_4,A1
00003288  103C 000E               3536              MOVE.B  #14,D0
0000328C  4E4F                    3537              TRAP    #15
0000328E  4E75                    3538              RTS
00003290                          3539              
00003290  43F9 000044B6           3540  REG_5       LEA     DISP_5,A1
00003296  103C 000E               3541              MOVE.B  #14,D0
0000329A  4E4F                    3542              TRAP    #15
0000329C  4E75                    3543              RTS
0000329E                          3544              
0000329E  43F9 000044B8           3545  REG_6       LEA     DISP_6,A1
000032A4  103C 000E               3546              MOVE.B  #14,D0
000032A8  4E4F                    3547              TRAP    #15
000032AA  4E75                    3548              RTS
000032AC                          3549              
000032AC  43F9 000044BA           3550  REG_7       LEA     DISP_7,A1
000032B2  103C 000E               3551              MOVE.B  #14,D0
000032B6  4E4F                    3552              TRAP    #15
000032B8  4E75                    3553              RTS
000032BA                          3554              
000032BA                          3555  *---------------------------------------------------------------------------*
000032BA                          3556  * REPEAT : Ask user whether they wish to run the program again
000032BA                          3557  *---------------------------------------------------------------------------*           
000032BA  4246                    3558  REPEAT      CLR.W   D6                      * Reset D6 (Loop Count)
000032BC  43F9 00003F85           3559              LEA     REPEATMSG,A1
000032C2  103C 000E               3560              MOVE.B  #14,D0
000032C6  4E4F                    3561              TRAP    #15
000032C8                          3562              
000032C8  43F9 0000410F           3563              LEA     TMPINPUT,A1             * allocate space to temp store user input
000032CE  103C 0002               3564              MOVE.B  #2,D0
000032D2  4E4F                    3565              TRAP    #15
000032D4                          3566  
000032D4  0C01 0001               3567              CMPI.B  #1,D1                   * check for length of user input
000032D8  66E0                    3568              BNE     REPEAT                  * return to the beginning of the function if unequal
000032DA                          3569              
000032DA  0C11 0059               3570              CMPI.B  #$59,(A1)               * compare the input with Y    
000032DE  6700 DD2A               3571              BEQ     PROGLP                  * repeat the program
000032E2                          3572              
000032E2  0C11 0079               3573              CMPI.B  #$79,(A1)               * compare the input with y    
000032E6  6700 DD22               3574              BEQ     PROGLP                  * repeat the program
000032EA                          3575              
000032EA  0C11 004E               3576              CMPI.B  #$4E,(A1)               * compare the input with N    
000032EE  6700 0928               3577              BEQ     TERMINATE               * finish program
000032F2                          3578              
000032F2  0C11 006E               3579              CMPI.B  #$6E,(A1)               * compare the input with n    
000032F6  6700 0920               3580              BEQ     TERMINATE               * finish program
000032FA                          3581              
000032FA  60BE                    3582              BRA     REPEAT                  * invalid input/repeat the function
000032FC                          3583  
000032FC                          3584  *---------------------------------------------------------------------------*
000032FC                          3585  * EA DECODING INTERFACE
000032FC                          3586  * [A0] - RESERVED FOR USE
000032FC                          3587  * [D2] - RESERVED FOR USE
000032FC                          3588  * RETURNS - ERROR FLAG IF FAILED TO PUSH SRC EA INTO STACK
000032FC                          3589  *---------------------------------------------------------------------------*
000032FC                          3590  GET_EA_EA_SRC
000032FC                          3591      *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
000032FC                          3592      
000032FC                          3593      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
000032FC  2405                    3594      MOVE.L  D5,D2                           * CLEAN COPY TO D2
000032FE  E68A                    3595      LSR.L   #3,D2                           * [D2] Temporarily used D2 for shifting bits            *TODO: DYNAMIC FOR ANY LOCATION OF SOURCE
00003300  23C2 000044D2           3596      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
00003306  7407                    3597      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
00003308  C5B9 000044D2           3598      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
0000330E                          3599                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
0000330E                          3600      
0000330E                          3601      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
0000330E                          3602      *DESTINATION REGISTER FORMAT STANDARD         *
0000330E                          3603      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
0000330E                          3604      *WHEN BIT = 0(VALID ADDRESS MODE)             *
0000330E                          3605      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
0000330E                          3606      *0 - Dn                                       *
0000330E                          3607      *1 - An                                       *
0000330E                          3608      *2 - (An)                                     *
0000330E                          3609      *3 - (An)+                                    *
0000330E                          3610      *4 - -(An)                                    *
0000330E                          3611      *5 - (XXX).W                                  *
0000330E                          3612      *6 - (XXX).L                                  *
0000330E                          3613      *7 - #<data>                                  *
0000330E                          3614      ***********************************************
0000330E                          3615      
0000330E                          3616      *** Check if source ...  <ea> = Dn
0000330E                          3617  CHECK0    
0000330E  41F9 000044C2           3618            LEA     TEMP_REGISTER_FORMAT,A0
00003314  1439 000044C1           3619            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000331A  1082                    3620            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000331C  0239 0001 000044C2      3621            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
00003324  0C39 0001 000044C2      3622            CMPI.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
0000332C  6700 006A               3623            BEQ     CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00003330  0CB9 00000000 000044D2  3624            CMPI.L     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn) - COMPARE MODES TO SEE IF IT IS THIS MODE
0000333A  6600 005C               3625            BNE     CHECK1
0000333E                          3626            
0000333E                          3627            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
0000333E  163C 0020               3628            MOVE.B    #' ',D3
00003342  6100 0856               3629            BSR       PUSH_STACK
00003346  163C 0044               3630            MOVE.B    #'D',D3
0000334A  6100 084E               3631            BSR       PUSH_STACK
0000334E                          3632  
0000334E                          3633            *FIND REGISTER NUMBER END LOCATION*  
0000334E  13F9 000044C4 000044CA  3634            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00003358  0239 000F 000044CA      3635            AND.B   #$0F,VAR_BYTE_END
00003360                          3636            
00003360                          3637            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003360  23C5 000044CE           3638            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003366  1439 000044CA           3639            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
0000336C                          3640            
0000336C                          3641            *INTITIALIZE FOR BIT SHIFTING
0000336C  41F9 000044CE           3642            LEA     VAR_TEMP_CLEANCOPY,A0
00003372  2639 000044CE           3643            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003378                          3644  LOOP_SHIFTING
00003378  0C02 0000               3645            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000337C  6700 0008               3646            BEQ     MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00003380  E24B                    3647            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003382  5302                    3648            SUB.B   #1,D2                     *DECREMENT COUNTER
00003384  60F2                    3649            BRA     LOOP_SHIFTING             *CONTINUE SHIFTING
00003386                          3650  MASKING_NEXT
00003386  C6BC 00000007           3651            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
0000338C  0603 0030               3652            ADD.B   #$30,D3                   *CONVERT TO CHAR
00003390  6100 0808               3653            BSR     PUSH_STACK                *PUSH TO STACK
00003394                          3654            
00003394  6000 0394               3655            BRA     GET_SRC_SUCCESS           *RETURN          
00003398                          3656            
00003398                          3657            
00003398                          3658            *** Check if source ...  <ea> = An
00003398  41F9 000044C2           3659  CHECK1    LEA     TEMP_REGISTER_FORMAT,A0
0000339E  1439 000044C1           3660            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000033A4  1082                    3661            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000033A6  0239 0002 000044C2      3662            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
000033AE  0C39 0002 000044C2      3663            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
000033B6  6700 006A               3664            BEQ     CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
000033BA  0CB9 00000001 000044D2  3665            CMPI.L  #1,VAR_LONG_ADDRESS_MODE_CHECK                      * An - COMPARE MODES TO SEE IF IT IS THIS MODE
000033C4  6600 005C               3666            BNE     CHECK2
000033C8                          3667            
000033C8                          3668            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000033C8  163C 0020               3669            MOVE.B    #' ',D3
000033CC  6100 07CC               3670            BSR       PUSH_STACK
000033D0  163C 0041               3671            MOVE.B    #'A',D3
000033D4  6100 07C4               3672            BSR       PUSH_STACK
000033D8                          3673  
000033D8                          3674            
000033D8                          3675            *FIND REGISTER NUMBER END LOCATION*  
000033D8  13F9 000044C4 000044CA  3676            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
000033E2  0239 000F 000044CA      3677            AND.B   #$0F,VAR_BYTE_END
000033EA                          3678            
000033EA                          3679            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000033EA  23C5 000044CE           3680            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000033F0  1439 000044CA           3681            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
000033F6                          3682            
000033F6                          3683            *INTITIALIZE FOR BIT SHIFTING
000033F6  41F9 000044CE           3684            LEA     VAR_TEMP_CLEANCOPY,A0
000033FC  2639 000044CE           3685            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003402                          3686  LOOP_SHIFTING1
00003402  0C02 0000               3687            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003406  6700 0008               3688            BEQ     MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
0000340A  E24B                    3689            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
0000340C  5302                    3690            SUB.B   #1,D2                     *DECREMENT COUNTER
0000340E  60F2                    3691            BRA     LOOP_SHIFTING1             *CONTINUE SHIFTING
00003410                          3692  MASKING_NEXT1
00003410  C6BC 00000007           3693            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003416  0603 0030               3694            ADD.B   #$30,D3                   *CONVERT TO CHAR
0000341A  6100 077E               3695            BSR     PUSH_STACK                *PUSH TO STACK
0000341E                          3696            
0000341E  6000 030A               3697            BRA     GET_SRC_SUCCESS                   *RETURN 
00003422                          3698            
00003422                          3699            
00003422                          3700            
00003422                          3701            
00003422                          3702            *** Check if source ...  <ea> = (An)       
00003422  41F9 000044C2           3703  CHECK2    LEA     TEMP_REGISTER_FORMAT,A0
00003428  1439 000044C1           3704            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000342E  1082                    3705            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003430  0239 0004 000044C2      3706            ANDI.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
00003438  0C39 0004 000044C2      3707            CMPI.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
00003440  6700 007A               3708            BEQ     CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00003444  0CB9 00000002 000044D2  3709            CMPI.L   #2,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)  COMPARE MODES TO SEE IF IT IS THIS MODE                                                                *change: checkx++*
0000344E  6600 006C               3710            BNE     CHECK3
00003452                          3711            
00003452                          3712            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00003452  163C 0020               3713            MOVE.B    #' ',D3
00003456  6100 0742               3714            BSR       PUSH_STACK
0000345A  163C 0028               3715            MOVE.B    #'(',D3
0000345E  6100 073A               3716            BSR       PUSH_STACK
00003462  163C 0041               3717            MOVE.B    #'A',D3
00003466  6100 0732               3718            BSR       PUSH_STACK
0000346A                          3719  
0000346A                          3720            
0000346A                          3721            *FIND REGISTER NUMBER END LOCATION*  
0000346A  13F9 000044C4 000044CA  3722            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00003474  0239 000F 000044CA      3723            AND.B   #$0F,VAR_BYTE_END
0000347C                          3724            
0000347C                          3725            *GET INDEX OF THE END OF SRC REGISTER NUMBER
0000347C  23C5 000044CE           3726            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003482  1439 000044CA           3727            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003488                          3728            
00003488                          3729            *INTITIALIZE FOR BIT SHIFTING
00003488  41F9 000044CE           3730            LEA     VAR_TEMP_CLEANCOPY,A0
0000348E  2639 000044CE           3731            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003494                          3732  LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
00003494  0C02 0000               3733            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003498  6700 0008               3734            BEQ     MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
0000349C  E24B                    3735            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
0000349E  5302                    3736            SUB.B   #1,D2                     *DECREMENT COUNTER
000034A0  60F2                    3737            BRA     LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
000034A2                          3738  MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
000034A2  0283 00000007           3739            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000034A8  0603 0030               3740            ADDI.B   #$30,D3                   *CONVERT TO CHAR
000034AC  6100 06EC               3741            BSR     PUSH_STACK                *PUSH TO STACK
000034B0                          3742            
000034B0  163C 0029               3743            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
000034B4  6100 06E4               3744            BSR       PUSH_STACK
000034B8                          3745            
000034B8  6000 0270               3746            BRA     GET_SRC_SUCCESS                   *RETURN 
000034BC                          3747  
000034BC                          3748            
000034BC                          3749            
000034BC                          3750                      
000034BC                          3751  *** Check if source ...  <ea> = (An)+       
000034BC  41F9 000044C2           3752  CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
000034C2  1439 000044C1           3753            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000034C8  1082                    3754            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000034CA  0239 0008 000044C2      3755            ANDI.B  #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
000034D2  0C39 0008 000044C2      3756            CMPI.B  #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
000034DA  6700 0082               3757            BEQ     CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
000034DE  0CB9 00000003 000044D2  3758            CMPI.L  #3,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)+ - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
000034E8  6600 0074               3759            BNE     CHECK4
000034EC                          3760            
000034EC                          3761            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
000034EC  163C 0020               3762            MOVE.B    #' ',D3
000034F0  6100 06A8               3763            BSR       PUSH_STACK
000034F4  163C 0028               3764            MOVE.B    #'(',D3
000034F8  6100 06A0               3765            BSR       PUSH_STACK
000034FC  163C 0041               3766            MOVE.B    #'A',D3
00003500  6100 0698               3767            BSR       PUSH_STACK
00003504                          3768  
00003504                          3769            
00003504                          3770            *FIND REGISTER NUMBER END LOCATION*  
00003504  13F9 000044C4 000044CA  3771            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
0000350E  0239 000F 000044CA      3772            ANDI.B   #$0F,VAR_BYTE_END
00003516                          3773            
00003516                          3774            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003516  23C5 000044CE           3775            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
0000351C  1439 000044CA           3776            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003522                          3777            
00003522                          3778            *INTITIALIZE FOR BIT SHIFTING
00003522  41F9 000044CE           3779            LEA     VAR_TEMP_CLEANCOPY,A0
00003528  2639 000044CE           3780            MOVE.L  VAR_TEMP_CLEANCOPY,D3
0000352E                          3781            
0000352E                          3782  LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
0000352E  0C02 0000               3783            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003532  6700 0008               3784            BEQ     MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00003536  E24B                    3785            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003538  5302                    3786            SUBI.B   #1,D2                     *DECREMENT COUNTER
0000353A  60F2                    3787            BRA     LOOP_SHIFTING3            *CONTINUE SHIFTING 
0000353C                          3788                                               *change: NAME OF LABEL*
0000353C                          3789  MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
0000353C  0283 00000007           3790            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003542  0603 0030               3791            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00003546  6100 0652               3792            BSR     PUSH_STACK                *PUSH TO STACK
0000354A                          3793            
0000354A  163C 0029               3794            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
0000354E  6100 064A               3795            BSR       PUSH_STACK
00003552  163C 002B               3796            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003556  6100 0642               3797            BSR       PUSH_STACK
0000355A                          3798            
0000355A  6000 01CE               3799            BRA       GET_SRC_SUCCESS                   *RETURN 
0000355E                          3800  
0000355E                          3801            
0000355E                          3802            
0000355E                          3803                      
0000355E                          3804            *** Check if source ...  <ea> = -(An)       
0000355E  41F9 000044C2           3805  CHECK4    LEA     TEMP_REGISTER_FORMAT,A0
00003564  1439 000044C1           3806            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000356A  1082                    3807            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000356C  0239 0010 000044C2      3808            ANDI.B  #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
00003574  0C39 0010 000044C2      3809            CMPI.B  #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
0000357C  6700 0082               3810            BEQ     CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00003580  0CB9 00000004 000044D2  3811            CMPI.L  #4,VAR_LONG_ADDRESS_MODE_CHECK                      * -(An) - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
0000358A  6600 0074               3812            BNE     CHECK7
0000358E                          3813            
0000358E                          3814            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
0000358E  163C 0020               3815            MOVE.B    #' ',D3
00003592  6100 0606               3816            BSR       PUSH_STACK
00003596  163C 002D               3817            MOVE.B    #'-',D3
0000359A  6100 05FE               3818            BSR       PUSH_STACK
0000359E  163C 0028               3819            MOVE.B    #'(',D3
000035A2  6100 05F6               3820            BSR       PUSH_STACK
000035A6  163C 0041               3821            MOVE.B    #'A',D3
000035AA  6100 05EE               3822            BSR       PUSH_STACK
000035AE                          3823  
000035AE                          3824            
000035AE                          3825            *FIND REGISTER NUMBER END LOCATION*  
000035AE  13F9 000044C4 000044CA  3826            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
000035B8  0239 000F 000044CA      3827            AND.B   #$0F,VAR_BYTE_END
000035C0                          3828            
000035C0                          3829            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000035C0  23C5 000044CE           3830            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000035C6  1439 000044CA           3831            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000035CC                          3832            
000035CC                          3833            *INTITIALIZE FOR BIT SHIFTING
000035CC  41F9 000044CE           3834            LEA     VAR_TEMP_CLEANCOPY,A0
000035D2  2639 000044CE           3835            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000035D8                          3836            
000035D8                          3837  LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
000035D8  0C02 0000               3838            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000035DC  6700 0008               3839            BEQ     MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
000035E0  E24B                    3840            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000035E2  5302                    3841            SUBI.B   #1,D2                     *DECREMENT COUNTER
000035E4  60F2                    3842            BRA     LOOP_SHIFTING4            *CONTINUE SHIFTING 
000035E6                          3843                                               *change: NAME OF LABEL*
000035E6                          3844  MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
000035E6  0283 00000007           3845            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000035EC  0603 0030               3846            ADDI.B   #$30,D3                   *CONVERT TO CHAR
000035F0  6100 05A8               3847            BSR     PUSH_STACK                *PUSH TO STACK
000035F4                          3848            
000035F4  163C 0029               3849            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
000035F8  6100 05A0               3850            BSR       PUSH_STACK
000035FC                          3851            
000035FC  6000 012C               3852            BRA     GET_SRC_SUCCESS                   *RETURN
00003600                          3853            
00003600                          3854                      
00003600                          3855            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
00003600  0CB9 00000007 000044D2  3856  CHECK7    CMPI.L  #7,VAR_LONG_ADDRESS_MODE_CHECK                      *IF (MODE != 111)
0000360A  6600 011A               3857            BNE     GET_SRC_FAILED                                      *THAN BRANCH TO UNCESSFULL SRC MODE READ
0000360E                          3858                   
0000360E                          3859            *NEXT: (MODE == 111) 
0000360E                          3860            *NOW: CHECK FOR SRC REGISTER 
0000360E                          3861                  *(000 = (xxx).W)
0000360E                          3862                  *(001 = (xxx).L)
0000360E                          3863                  *(010 = #<data>)
0000360E                          3864                  
0000360E                          3865            *FIND REGISTER NUMBER END LOCATION*  
0000360E  13F9 000044C4 000044CA  3866            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00003618  0239 000F 000044CA      3867            AND.B   #$0F,VAR_BYTE_END
00003620                          3868            
00003620                          3869            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003620  23C5 000044CE           3870            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003626  1439 000044CA           3871            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
0000362C                          3872            
0000362C                          3873            *INTITIALIZE FOR BIT SHIFTING
0000362C  41F9 000044CE           3874            LEA     VAR_TEMP_CLEANCOPY,A0
00003632  2C39 000044CE           3875            MOVE.L  VAR_TEMP_CLEANCOPY,D6
00003638                          3876  SRC_LOOP_SHIFTING
00003638  0C02 0000               3877            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000363C  6700 0008               3878            BEQ     SRC_MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00003640  E24E                    3879            LSR     #1,D6                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003642  5302                    3880            SUB.B   #1,D2                     *DECREMENT COUNTER
00003644  60F2                    3881            BRA     SRC_LOOP_SHIFTING             *CONTINUE SHIFTING
00003646                          3882  SRC_MASKING_NEXT
00003646  CCBC 00000007           3883            AND.L   #7,D6                     *MASK, ONLY NEED 0-2 BIT INDEXES 
0000364C                          3884           *D3 - REGISTER NUMBER NEEDED TO CHECK WHICH W/L/#<DATA>*
0000364C                          3885           
0000364C                          3886  CHECK_WORD  
0000364C  41F9 000044C2           3887            LEA     TEMP_REGISTER_FORMAT,A0
00003652  1439 000044C1           3888            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003658  1082                    3889            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000365A  0239 0020 000044C2      3890            ANDI.B  #$20,TEMP_REGISTER_FORMAT                           * MASKS 0010 0000                                                     *change <SRC>*
00003662  0C39 0020 000044C2      3891            CMPI.B  #$20,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0010 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
0000366A  6700 0026               3892            BEQ     CHECK_LONG                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
0000366E  0C06 0000               3893            CMPI.B  #0,D6                          
00003672  6600 001E               3894            BNE     CHECK_LONG 
00003676                          3895            
00003676                          3896            *IT IS A WORD AT THIS POINT*
00003676                          3897            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003676  163C 0020               3898            MOVE.B    #' ',D3
0000367A  6100 051E               3899            BSR       PUSH_STACK
0000367E  163C 0024               3900            MOVE.B    #'$',D3
00003682  6100 0516               3901            BSR       PUSH_STACK
00003686  321D                    3902            MOVE.W    (A5)+,D1
00003688  7404                    3903            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
0000368A  6100 DB6E               3904            BSR       HEX2ASCII2STACK
0000368E  6000 009A               3905            BRA     GET_SRC_SUCCESS
00003692                          3906  
00003692                          3907  CHECK_LONG
00003692  41F9 000044C2           3908            LEA     TEMP_REGISTER_FORMAT,A0
00003698  1439 000044C1           3909            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000369E  1082                    3910            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000036A0  0239 0040 000044C2      3911            ANDI.B  #$40,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
000036A8  0C39 0040 000044C2      3912            CMPI.B  #$40,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
000036B0  6700 002E               3913            BEQ     CHECK_IMMEDIATE                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
000036B4  0C06 0001               3914            CMPI.B  #1,D6                          
000036B8  6600 0026               3915            BNE     CHECK_IMMEDIATE  
000036BC                          3916  
000036BC                          3917            *IT IS A WORD AT THIS POINT*
000036BC                          3918            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000036BC  163C 0020               3919            MOVE.B    #' ',D3
000036C0  6100 04D8               3920            BSR       PUSH_STACK
000036C4  163C 0024               3921            MOVE.B    #'$',D3
000036C8  6100 04D0               3922            BSR       PUSH_STACK
000036CC  321D                    3923            MOVE.W    (A5)+,D1
000036CE  7404                    3924            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
000036D0  6100 DB28               3925            BSR       HEX2ASCII2STACK
000036D4  321D                    3926            MOVE.W    (A5)+,D1
000036D6  7404                    3927            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
000036D8  6100 DB20               3928            BSR       HEX2ASCII2STACK
000036DC  6000 004C               3929            BRA     GET_SRC_SUCCESS
000036E0                          3930            
000036E0                          3931  CHECK_IMMEDIATE
000036E0  41F9 000044C2           3932            LEA     TEMP_REGISTER_FORMAT,A0
000036E6  1439 000044C1           3933            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000036EC  1082                    3934            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000036EE  0239 0080 000044C2      3935            ANDI.B  #$80,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
000036F6  0C39 0080 000044C2      3936            CMPI.B  #$80,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
000036FE  6700 0026               3937            BEQ     GET_SRC_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00003702  0C06 0004               3938            CMPI.B  #4,D6                          
00003706  6600 001E               3939            BNE     GET_SRC_FAILED 
0000370A                          3940  
0000370A                          3941            *IT IS A WORD AT THIS POINT*
0000370A                          3942            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
0000370A  163C 0020               3943            MOVE.B    #' ',D3
0000370E  6100 048A               3944            BSR       PUSH_STACK
00003712  163C 0023               3945            MOVE.B    #'#',D3
00003716  6100 0482               3946            BSR       PUSH_STACK
0000371A  321D                    3947            MOVE.W    (A5)+,D1
0000371C  7404                    3948            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
0000371E  6100 DADA               3949            BSR       HEX2ASCII2STACK
00003722  6000 0006               3950            BRA     GET_SRC_SUCCESS
00003726                          3951            
00003726                          3952  GET_SRC_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
00003726  7801                    3953            MOVE.L #1,D4
00003728  4E75                    3954            RTS
0000372A                          3955  GET_SRC_SUCCESS 
0000372A  4E75                    3956            RTS
0000372C                          3957                                 
0000372C                          3958      
0000372C                          3959  
0000372C                          3960  
0000372C                          3961  
0000372C                          3962  
0000372C                          3963  
0000372C                          3964  
0000372C                          3965  GET_EA_EA_DEST
0000372C                          3966  *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
0000372C                          3967      
0000372C                          3968      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
0000372C  2405                    3969      MOVE.L  D5,D2                           * CLEAN COPY TO D2
0000372E  EC8A                    3970      LSR.L   #6,D2                           * [D2] Temporarily used D2 for shifting bits                *TODO: DYNAMIC MODE LOCATION
00003730  23C2 000044D2           3971      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
00003736  7407                    3972      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
00003738  C5B9 000044D2           3973      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
0000373E                          3974                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
0000373E                          3975      
0000373E                          3976      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
0000373E                          3977      *DESTINATION REGISTER FORMAT STANDARD         *
0000373E                          3978      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
0000373E                          3979      *WHEN BIT = 0(VALID ADDRESS MODE)             *
0000373E                          3980      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
0000373E                          3981      *0 - Dn                                       *
0000373E                          3982      *1 - An                                       *
0000373E                          3983      *2 - (An)                                     *
0000373E                          3984      *3 - (An)+                                    *
0000373E                          3985      *4 - -(An)                                    *
0000373E                          3986      *5 - (XXX).W                                  *
0000373E                          3987      *6 - (XXX).L                                  *
0000373E                          3988      *7 - #<data>                                  *
0000373E                          3989      ***********************************************
0000373E                          3990      
0000373E                          3991      *** Check if source ...  <ea> = Dn
0000373E                          3992  DEST_CHECK0    
0000373E  41F9 000044C2           3993            LEA     TEMP_REGISTER_FORMAT,A0
00003744  1439 000044C0           3994            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000374A  1082                    3995            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000374C  0239 0001 000044C2      3996            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
00003754  0C39 0001 000044C2      3997            CMPI.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
0000375C  6700 006A               3998            BEQ     DEST_CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00003760  0CB9 00000000 000044D2  3999            CMPI.L     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn) - COMPARE MODES TO SEE IF IT IS THIS MODE
0000376A  6600 005C               4000            BNE     DEST_CHECK1
0000376E                          4001            
0000376E                          4002            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
0000376E  163C 0020               4003            MOVE.B    #' ',D3
00003772  6100 0426               4004            BSR       PUSH_STACK
00003776  163C 0044               4005            MOVE.B    #'D',D3
0000377A  6100 041E               4006            BSR       PUSH_STACK
0000377E                          4007  
0000377E                          4008            *FIND REGISTER NUMBER END LOCATION*  
0000377E  13F9 000044C3 000044CA  4009            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00003788  0239 000F 000044CA      4010            AND.B   #$0F,VAR_BYTE_END
00003790                          4011            
00003790                          4012            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003790  23C5 000044CE           4013            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003796  1439 000044CA           4014            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
0000379C                          4015            
0000379C                          4016            *INTITIALIZE FOR BIT SHIFTING
0000379C  41F9 000044CE           4017            LEA     VAR_TEMP_CLEANCOPY,A0
000037A2  2639 000044CE           4018            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000037A8                          4019  DEST_LOOP_SHIFTING
000037A8  0C02 0000               4020            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000037AC  6700 0008               4021            BEQ     DEST_MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
000037B0  E24B                    4022            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000037B2  5302                    4023            SUB.B   #1,D2                     *DECREMENT COUNTER
000037B4  60F2                    4024            BRA     DEST_LOOP_SHIFTING             *CONTINUE SHIFTING
000037B6                          4025  DEST_MASKING_NEXT
000037B6  C6BC 00000007           4026            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000037BC  0603 0030               4027            ADD.B   #$30,D3                   *CONVERT TO CHAR
000037C0  6100 03D8               4028            BSR     PUSH_STACK                *PUSH TO STACK
000037C4                          4029            
000037C4  6000 0394               4030            BRA     GET_DST_SUCCESS           *RETURN          
000037C8                          4031            
000037C8                          4032            
000037C8                          4033            *** Check if source ...  <ea> = An
000037C8                          4034  DEST_CHECK1    
000037C8  41F9 000044C2           4035            LEA     TEMP_REGISTER_FORMAT,A0
000037CE  1439 000044C0           4036            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000037D4  1082                    4037            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000037D6  0239 0002 000044C2      4038            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
000037DE  0C39 0002 000044C2      4039            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
000037E6  6700 006A               4040            BEQ     DEST_CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
000037EA  0CB9 00000001 000044D2  4041            CMPI.L  #1,VAR_LONG_ADDRESS_MODE_CHECK                      * An - COMPARE MODES TO SEE IF IT IS THIS MODE
000037F4  6600 005C               4042            BNE     DEST_CHECK2
000037F8                          4043            
000037F8                          4044            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000037F8  163C 0020               4045            MOVE.B    #' ',D3
000037FC  6100 039C               4046            BSR       PUSH_STACK
00003800  163C 0041               4047            MOVE.B    #'A',D3
00003804  6100 0394               4048            BSR       PUSH_STACK
00003808                          4049  
00003808                          4050            
00003808                          4051            *FIND REGISTER NUMBER END LOCATION*  
00003808  13F9 000044C3 000044CA  4052            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00003812  0239 000F 000044CA      4053            AND.B   #$0F,VAR_BYTE_END
0000381A                          4054            
0000381A                          4055            *GET INDEX OF THE END OF SRC REGISTER NUMBER
0000381A  23C5 000044CE           4056            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003820  1439 000044CA           4057            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
00003826                          4058            
00003826                          4059            *INTITIALIZE FOR BIT SHIFTING
00003826  41F9 000044CE           4060            LEA     VAR_TEMP_CLEANCOPY,A0
0000382C  2639 000044CE           4061            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003832                          4062  DEST_LOOP_SHIFTING1
00003832  0C02 0000               4063            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003836  6700 0008               4064            BEQ     DEST_MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
0000383A  E24B                    4065            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
0000383C  5302                    4066            SUB.B   #1,D2                     *DECREMENT COUNTER
0000383E  60F2                    4067            BRA     DEST_LOOP_SHIFTING1             *CONTINUE SHIFTING
00003840                          4068  DEST_MASKING_NEXT1
00003840  C6BC 00000007           4069            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003846  0603 0030               4070            ADD.B   #$30,D3                   *CONVERT TO CHAR
0000384A  6100 034E               4071            BSR     PUSH_STACK                *PUSH TO STACK
0000384E                          4072            
0000384E  6000 030A               4073            BRA     GET_DST_SUCCESS                   *RETURN 
00003852                          4074            
00003852                          4075            
00003852                          4076            
00003852                          4077            
00003852                          4078            *** Check if source ...  <ea> = (An)       
00003852                          4079  DEST_CHECK2    
00003852  41F9 000044C2           4080            LEA     TEMP_REGISTER_FORMAT,A0
00003858  1439 000044C0           4081            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000385E  1082                    4082            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003860  0239 0004 000044C2      4083            ANDI.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
00003868  0C39 0004 000044C2      4084            CMPI.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
00003870  6700 007A               4085            BEQ     DEST_CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00003874  0CB9 00000002 000044D2  4086            CMPI.L   #2,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)  COMPARE MODES TO SEE IF IT IS THIS MODE                                                                *change: checkx++*
0000387E  6600 006C               4087            BNE     DEST_CHECK3
00003882                          4088            
00003882                          4089            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00003882  163C 0020               4090            MOVE.B    #' ',D3
00003886  6100 0312               4091            BSR       PUSH_STACK
0000388A  163C 0028               4092            MOVE.B    #'(',D3
0000388E  6100 030A               4093            BSR       PUSH_STACK
00003892  163C 0041               4094            MOVE.B    #'A',D3
00003896  6100 0302               4095            BSR       PUSH_STACK
0000389A                          4096  
0000389A                          4097            
0000389A                          4098            *FIND REGISTER NUMBER END LOCATION*  
0000389A  13F9 000044C3 000044CA  4099            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
000038A4  0239 000F 000044CA      4100            AND.B   #$0F,VAR_BYTE_END
000038AC                          4101            
000038AC                          4102            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000038AC  23C5 000044CE           4103            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000038B2  1439 000044CA           4104            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000038B8                          4105            
000038B8                          4106            *INTITIALIZE FOR BIT SHIFTING
000038B8  41F9 000044CE           4107            LEA     VAR_TEMP_CLEANCOPY,A0
000038BE  2639 000044CE           4108            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000038C4                          4109  DEST_LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
000038C4  0C02 0000               4110            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000038C8  6700 0008               4111            BEQ     DEST_MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
000038CC  E24B                    4112            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000038CE  5302                    4113            SUB.B   #1,D2                     *DECREMENT COUNTER
000038D0  60F2                    4114            BRA     DEST_LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
000038D2                          4115  DEST_MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
000038D2  0283 00000007           4116            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000038D8  0603 0030               4117            ADDI.B   #$30,D3                   *CONVERT TO CHAR
000038DC  6100 02BC               4118            BSR     PUSH_STACK                *PUSH TO STACK
000038E0                          4119            
000038E0  163C 0029               4120            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
000038E4  6100 02B4               4121            BSR       PUSH_STACK
000038E8                          4122            
000038E8  6000 0270               4123            BRA     GET_DST_SUCCESS                   *RETURN 
000038EC                          4124  
000038EC                          4125            
000038EC                          4126            
000038EC                          4127                      
000038EC                          4128  *** Check if source ...  <ea> = (An)+       
000038EC  41F9 000044C2           4129  DEST_CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
000038F2  1439 000044C0           4130            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000038F8  1082                    4131            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000038FA  0239 0008 000044C2      4132            ANDI.B  #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
00003902  0C39 0008 000044C2      4133            CMPI.B  #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
0000390A  6700 0082               4134            BEQ     DEST_CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
0000390E  0CB9 00000003 000044D2  4135            CMPI.L  #3,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)+ - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00003918  6600 0074               4136            BNE     DEST_CHECK4
0000391C                          4137            
0000391C                          4138            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
0000391C  163C 0020               4139            MOVE.B    #' ',D3
00003920  6100 0278               4140            BSR       PUSH_STACK
00003924  163C 0028               4141            MOVE.B    #'(',D3
00003928  6100 0270               4142            BSR       PUSH_STACK
0000392C  163C 0041               4143            MOVE.B    #'A',D3
00003930  6100 0268               4144            BSR       PUSH_STACK
00003934                          4145  
00003934                          4146            
00003934                          4147            *FIND REGISTER NUMBER END LOCATION*  
00003934  13F9 000044C3 000044CA  4148            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
0000393E  0239 000F 000044CA      4149            ANDI.B   #$0F,VAR_BYTE_END
00003946                          4150            
00003946                          4151            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003946  23C5 000044CE           4152            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
0000394C  1439 000044CA           4153            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003952                          4154            
00003952                          4155            *INTITIALIZE FOR BIT SHIFTING
00003952  41F9 000044CE           4156            LEA     VAR_TEMP_CLEANCOPY,A0
00003958  2639 000044CE           4157            MOVE.L  VAR_TEMP_CLEANCOPY,D3
0000395E                          4158            
0000395E                          4159  DEST_LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
0000395E  0C02 0000               4160            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003962  6700 0008               4161            BEQ     DEST_MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00003966  E24B                    4162            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003968  5302                    4163            SUBI.B   #1,D2                     *DECREMENT COUNTER
0000396A  60F2                    4164            BRA     DEST_LOOP_SHIFTING3            *CONTINUE SHIFTING 
0000396C                          4165                                               *change: NAME OF LABEL*
0000396C                          4166  DEST_MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
0000396C  0283 00000007           4167            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003972  0603 0030               4168            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00003976  6100 0222               4169            BSR     PUSH_STACK                *PUSH TO STACK
0000397A                          4170            
0000397A  163C 0029               4171            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
0000397E  6100 021A               4172            BSR       PUSH_STACK
00003982  163C 002B               4173            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003986  6100 0212               4174            BSR       PUSH_STACK
0000398A                          4175            
0000398A  6000 01CE               4176            BRA       GET_DST_SUCCESS                   *RETURN 
0000398E                          4177  
0000398E                          4178            
0000398E                          4179            
0000398E                          4180                      
0000398E                          4181            *** Check if source ...  <ea> = -(An)       
0000398E                          4182  DEST_CHECK4    
0000398E  41F9 000044C2           4183            LEA     TEMP_REGISTER_FORMAT,A0
00003994  1439 000044C0           4184            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000399A  1082                    4185            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000399C  0239 0010 000044C2      4186            ANDI.B  #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
000039A4  0C39 0010 000044C2      4187            CMPI.B  #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
000039AC  6700 0082               4188            BEQ     DEST_CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
000039B0  0CB9 00000004 000044D2  4189            CMPI.L  #4,VAR_LONG_ADDRESS_MODE_CHECK                      * -(An) - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
000039BA  6600 0074               4190            BNE     DEST_CHECK7
000039BE                          4191            
000039BE                          4192            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
000039BE  163C 0020               4193            MOVE.B    #' ',D3
000039C2  6100 01D6               4194            BSR       PUSH_STACK
000039C6  163C 002D               4195            MOVE.B    #'-',D3
000039CA  6100 01CE               4196            BSR       PUSH_STACK
000039CE  163C 0028               4197            MOVE.B    #'(',D3
000039D2  6100 01C6               4198            BSR       PUSH_STACK
000039D6  163C 0041               4199            MOVE.B    #'A',D3
000039DA  6100 01BE               4200            BSR       PUSH_STACK
000039DE                          4201  
000039DE                          4202            
000039DE                          4203            *FIND REGISTER NUMBER END LOCATION*  
000039DE  13F9 000044C3 000044CA  4204            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
000039E8  0239 000F 000044CA      4205            AND.B   #$0F,VAR_BYTE_END
000039F0                          4206            
000039F0                          4207            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000039F0  23C5 000044CE           4208            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000039F6  1439 000044CA           4209            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000039FC                          4210            
000039FC                          4211            *INTITIALIZE FOR BIT SHIFTING
000039FC  41F9 000044CE           4212            LEA     VAR_TEMP_CLEANCOPY,A0
00003A02  2639 000044CE           4213            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003A08                          4214            
00003A08                          4215  DEST_LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
00003A08  0C02 0000               4216            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003A0C  6700 0008               4217            BEQ     DEST_MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00003A10  E24B                    4218            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003A12  5302                    4219            SUBI.B   #1,D2                     *DECREMENT COUNTER
00003A14  60F2                    4220            BRA     DEST_LOOP_SHIFTING4            *CONTINUE SHIFTING 
00003A16                          4221                                               *change: NAME OF LABEL*
00003A16                          4222  DEST_MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
00003A16  0283 00000007           4223            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003A1C  0603 0030               4224            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00003A20  6100 0178               4225            BSR     PUSH_STACK                *PUSH TO STACK
00003A24                          4226            
00003A24  163C 0029               4227            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003A28  6100 0170               4228            BSR       PUSH_STACK
00003A2C                          4229            
00003A2C  6000 012C               4230            BRA     GET_DST_SUCCESS                   *RETURN
00003A30                          4231            
00003A30                          4232                      
00003A30                          4233            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
00003A30                          4234  DEST_CHECK7    
00003A30  0CB9 00000007 000044D2  4235            CMPI.L  #7,VAR_LONG_ADDRESS_MODE_CHECK                      *IF (MODE != 111)
00003A3A  6600 011A               4236            BNE     GET_DST_FAILED                                      *THAN BRANCH TO UNCESSFULL SRC MODE READ
00003A3E                          4237                   
00003A3E                          4238            *NEXT: (MODE == 111) 
00003A3E                          4239            *NOW: CHECK FOR SRC REGISTER 
00003A3E                          4240                  *(000 = (xxx).W)
00003A3E                          4241                  *(001 = (xxx).L)
00003A3E                          4242                  *(010 = #<data>)
00003A3E                          4243                  
00003A3E                          4244            *FIND REGISTER NUMBER END LOCATION*  
00003A3E  13F9 000044C3 000044CA  4245            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00003A48  0239 000F 000044CA      4246            AND.B   #$0F,VAR_BYTE_END
00003A50                          4247            
00003A50                          4248            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003A50  23C5 000044CE           4249            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003A56  1439 000044CA           4250            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003A5C                          4251            
00003A5C                          4252            *INTITIALIZE FOR BIT SHIFTING
00003A5C  41F9 000044CE           4253            LEA     VAR_TEMP_CLEANCOPY,A0
00003A62  2C39 000044CE           4254            MOVE.L  VAR_TEMP_CLEANCOPY,D6
00003A68                          4255  DEST_LOOP_SHIFTING7
00003A68  0C02 0000               4256            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003A6C  6700 0008               4257            BEQ     DEST_MASKING_NEXT7              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00003A70  E24E                    4258            LSR     #1,D6                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003A72  5302                    4259            SUB.B   #1,D2                     *DECREMENT COUNTER
00003A74  60F2                    4260            BRA     DEST_LOOP_SHIFTING7             *CONTINUE SHIFTING
00003A76                          4261  DEST_MASKING_NEXT7
00003A76  CCBC 00000007           4262            AND.L   #7,D6                     *MASK, ONLY NEED 0-2 BIT INDEXES 
00003A7C                          4263           *D3 - REGISTER NUMBER NEEDED TO CHECK WHICH W/L/#<DATA>*
00003A7C                          4264            
00003A7C                          4265  DEST_CHECK_WORD  
00003A7C  41F9 000044C2           4266            LEA     TEMP_REGISTER_FORMAT,A0
00003A82  1439 000044C0           4267            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003A88  1082                    4268            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003A8A  0239 0020 000044C2      4269            ANDI.B  #$20,TEMP_REGISTER_FORMAT                           * MASKS 0010 0000                                                     *change <SRC>*
00003A92  0C39 0020 000044C2      4270            CMPI.B  #$20,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0010 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003A9A  6700 0026               4271            BEQ     DEST_CHECK_LONG                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00003A9E  0C06 0000               4272            CMPI.B  #0,D6                                                   *COMPARE REGISTER NUMBER WITH (000 == 000) FOR WORD
00003AA2  6600 001E               4273            BNE     DEST_CHECK_LONG                                      * THE REGISTER NUMBER DOESN'T MATCH "(XXX).W" -> SO MOVE ON       
00003AA6                          4274            *IT IS A WORD AT THIS POINT*
00003AA6                          4275            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003AA6  163C 0020               4276            MOVE.B    #' ',D3
00003AAA  6100 00EE               4277            BSR       PUSH_STACK
00003AAE  163C 0024               4278            MOVE.B    #'$',D3
00003AB2  6100 00E6               4279            BSR       PUSH_STACK
00003AB6  321D                    4280            MOVE.W    (A5)+,D1
00003AB8  7404                    4281            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003ABA  6100 D73E               4282            BSR       HEX2ASCII2STACK
00003ABE  6000 009A               4283            BRA       GET_DST_SUCCESS
00003AC2                          4284  
00003AC2                          4285  DEST_CHECK_LONG
00003AC2  41F9 000044C2           4286            LEA     TEMP_REGISTER_FORMAT,A0
00003AC8  1439 000044C0           4287            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003ACE  1082                    4288            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003AD0  0239 0040 000044C2      4289            ANDI.B  #$40,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00003AD8  0C39 0040 000044C2      4290            CMPI.B  #$40,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003AE0  6700 002E               4291            BEQ     DEST_CHECK_IMMEDIATE                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00003AE4  0C06 0001               4292            CMPI.B  #1,D6                                                   *COMPARE REGISTER NUMBER WITH (001 == 001) FOR WORD
00003AE8  6600 0026               4293            BNE     DEST_CHECK_IMMEDIATE                                      * THE REGISTER NUMBER DOESN'T MATCH "(XXX).L" -> SO MOVE ON 
00003AEC                          4294            *IT IS A WORD AT THIS POINT*
00003AEC                          4295            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003AEC  163C 0020               4296            MOVE.B    #' ',D3
00003AF0  6100 00A8               4297            BSR       PUSH_STACK
00003AF4  163C 0024               4298            MOVE.B    #'$',D3
00003AF8  6100 00A0               4299            BSR       PUSH_STACK
00003AFC  321D                    4300            MOVE.W    (A5)+,D1        * GET NEXT WORD INTO STACK
00003AFE  7404                    4301            MOVE.L    #4,D2           * SETS SIZE = 4 FOR CONVERSION TO ASCII
00003B00  6100 D6F8               4302            BSR       HEX2ASCII2STACK
00003B04  321D                    4303            MOVE.W    (A5)+,D1        * GET NEXT WORD INTO STACK
00003B06  7404                    4304            MOVE.L    #4,D2          
00003B08  6100 D6F0               4305            BSR       HEX2ASCII2STACK
00003B0C  6000 004C               4306            BRA     GET_DST_SUCCESS
00003B10                          4307            
00003B10                          4308  DEST_CHECK_IMMEDIATE
00003B10  41F9 000044C2           4309            LEA     TEMP_REGISTER_FORMAT,A0
00003B16  1439 000044C0           4310            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003B1C  1082                    4311            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003B1E  0239 0080 000044C2      4312            ANDI.B  #$80,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00003B26  0C39 0080 000044C2      4313            CMPI.B  #$80,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003B2E  6700 0026               4314            BEQ     GET_DST_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00003B32  0C06 0004               4315            CMPI.B  #4,D6                                               * COMPARE REGISTER NUMBER WITH (010 == 010) FOR WORD
00003B36  6600 001E               4316            BNE     GET_DST_FAILED                                      * THE REGISTER NUMBER DOESN'T MATCH "#<DATA>" -> SO MOVE ON 
00003B3A                          4317            
00003B3A                          4318            *IT IS A WORD AT THIS POINT*
00003B3A                          4319            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003B3A  163C 0020               4320            MOVE.B    #' ',D3
00003B3E  6100 005A               4321            BSR       PUSH_STACK
00003B42  163C 0023               4322            MOVE.B    #'#',D3
00003B46  6100 0052               4323            BSR       PUSH_STACK
00003B4A  321D                    4324            MOVE.W    (A5)+,D1
00003B4C  7404                    4325            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003B4E  6100 D6AA               4326            BSR       HEX2ASCII2STACK
00003B52  6000 0006               4327            BRA       GET_DST_SUCCESS
00003B56                          4328            
00003B56                          4329  GET_DST_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
00003B56  7801                    4330            MOVE.L #1,D4
00003B58  4E75                    4331            RTS
00003B5A                          4332  GET_DST_SUCCESS 
00003B5A  4E75                    4333            RTS
00003B5C                          4334  
00003B5C                          4335  
00003B5C                          4336  *---------------------------------------------------------------------------*
00003B5C                          4337  * STACK/QUEUE INTERFACE
00003B5C                          4338  *---------------------------------------------------------------------------*
00003B5C                          4339  PRINT_STACK
00003B5C  0C39 0000 000044BC      4340            CMP.B     #0,COUNTER
00003B64  6700 000E               4341            BEQ       PRINT_STACK_RETURN             *CHECK IF LOOP IS FINISHED
00003B68                          4342            
00003B68                          4343  PRINT_STACK_HELPER
00003B68  6100 0038               4344            BSR      POP_STACK          *PRINTS ADDRESS
00003B6C  103C 0006               4345            MOVE.B   #6,D0              *Display single character in D1.B. 
00003B70  4E4F                    4346            TRAP     #15             *ACTIVATES PRINT
00003B72                          4347  
00003B72  60E8                    4348            BRA       PRINT_STACK
00003B74                          4349  PRINT_STACK_RETURN
00003B74  4E75                    4350            RTS
00003B76                          4351            
00003B76                          4352            
00003B76                          4353  PRINT_QUEUE
00003B76  0C39 0000 000044BC      4354            CMP.B     #0,COUNTER
00003B7E  6700 0018               4355            BEQ       PRINT_QUEUE_RETURN             *CHECK IF LOOP IS FINISHED
00003B82                          4356            
00003B82                          4357  PRINT_QUEUE_HELPER
00003B82  33F9 000044BC 000044BE  4358            MOVE.W   COUNTER,QUEUE_COUNTER
00003B8C  6100 0022               4359            BSR      POP_FRONT          *PRINTS ADDRESS
00003B90  103C 0006               4360            MOVE.B   #6,D0              *Display single character in D1.B. 
00003B94  4E4F                    4361            TRAP     #15             *ACTIVATES PRINT
00003B96                          4362  
00003B96  60DE                    4363            BRA       PRINT_QUEUE
00003B98                          4364  PRINT_QUEUE_RETURN
00003B98  4E75                    4365            RTS
00003B9A                          4366            
00003B9A                          4367  *PUSHES.W CONTENTS OF [D3] INTO STACK          
00003B9A                          4368  PUSH_STACK
00003B9A  1503                    4369              MOVE.B  D3,-(A2)
00003B9C  6100 0058               4370              BSR     INCREMENT
00003BA0  4E75                    4371              RTS
00003BA2                          4372  *POPS.W TOP OF STACK INTO [D1], SO ITS READY TO PRINT WITH TRAP 15
00003BA2                          4373  *         MOVE.W   (A2)+,D1           *PRINTS ADDRESS
00003BA2                          4374  *         MOVE.B   #15,D0             *PRINTS ACCORDING TO D2 BASE VALUE
00003BA2                          4375  *         MOVE.B   #16,D2             *PRINTS BASED 16 NUMBER
00003BA2                          4376  *         TRAP        #15             *ACTIVATES PRINT
00003BA2                          4377  POP_STACK
00003BA2  BECA                    4378              CMPA.W   A2,SP            *CHECKS IF THERE IS ANYTHING TO PUSH
00003BA4  6700 0008               4379              BEQ     POP_RETURN        *IF NOTHING TO PUSH THAN JUST RETURN
00003BA8  121A                    4380              MOVE.B  (A2)+,D1 
00003BAA  6100 0052               4381              BSR     DECREMENT
00003BAE                          4382  POP_RETURN
00003BAE  4E75                    4383              RTS 
00003BB0                          4384        
00003BB0                          4385  *USE [A4] AS SECOND POINTER IN SHIFTING      
00003BB0  0C39 0000 000044BE      4386  POP_FRONT   CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
00003BB8  6700 0030               4387              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
00003BBC                          4388              
00003BBC                          4389              
00003BBC                          4390              *POSITION THE POINTERS A[4] RIGHT BEHIND A[2] WHICH IS RIGHT BEHIND STACK
00003BBC  347C 7000               4391              MOVEA.W #STACK,A2   *START A2 AT STACK
00003BC0  0622 0000               4392              ADD.B   #0,-(A2)    *SHIFT A2 TO THE BOTTOM OF THE STACK
00003BC4  384A                    4393              MOVEA.W A2,A4     *START A4 RIGHT ABOVE A2
00003BC6  0624 0000               4394              ADD.B   #0,-(A4)  *leash one more higher in stack (a4)
00003BCA  1212                    4395              MOVE.B  (A2),D1     *POP CONTENTS INTO D1
00003BCC                          4396  POP_SHIFT_LOOP
00003BCC  0C39 0000 000044BE      4397              CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
00003BD4  6700 0014               4398              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
00003BD8  1494                    4399              MOVE.B  (A4),(A2)   *SHIFT CONTENT DOWN THE STACK
00003BDA  0624 0000               4400              ADD.B   #0,-(A4)
00003BDE  0622 0000               4401              ADD.B   #0,-(A2) *SHIFT POINTERS DOWN THE STACK
00003BE2  5339 000044BE           4402              SUB.B   #1,QUEUE_COUNTER *DECREMENT INTERNAL QUEUE COUNTER
00003BE8                          4403              
00003BE8  60E2                    4404              BRA     POP_SHIFT_LOOP
00003BEA                          4405                          
00003BEA                          4406  POP_FRONT_RETURN 
00003BEA                          4407              *RESET A2 BACK TO SP
00003BEA  347C 7000               4408              MOVEA.W #STACK,A2    
00003BEE  5339 000044BC           4409              SUB.B   #1,COUNTER *DECREMENT STACK COUNTER       
00003BF4  4E75                    4410              RTS   
00003BF6                          4411  
00003BF6                          4412  INCREMENT
00003BF6  5239 000044BC           4413              ADD.B   #1, COUNTER
00003BFC  4E75                    4414              RTS           
00003BFE                          4415  DECREMENT
00003BFE  5339 000044BC           4416              SUB.B   #1, COUNTER
00003C04  4E75                    4417              RTS           
00003C06                          4418  CLEAR_STACK
00003C06  0C39 0000 000044BC      4419              CMP.B     #0,COUNTER
00003C0E  6700 0006               4420              BEQ       CLEAR_RETURN
00003C12  618E                    4421              BSR       POP_STACK
00003C14  60F0                    4422              BRA       CLEAR_STACK
00003C16                          4423   
00003C16                          4424  CLEAR_RETURN
00003C16  4E75                    4425              RTS    
00003C18                          4426  *---------------------------------------------------------------------------*
00003C18                          4427  * TERMINATE
00003C18                          4428  *---------------------------------------------------------------------------*
00003C18                          4429  TERMINATE   
00003C18  43F9 00003FC8           4430              LEA     FINMSG,A1
00003C1E  103C 000E               4431              MOVE.B  #14,D0
00003C22  4E4F                    4432              TRAP    #15
00003C24                          4433  
00003C24  103C 0009               4434              MOVE.B  #9,D0
00003C28  4E4F                    4435              TRAP    #15
00003C2A                          4436  
00003C2A                          4437  *---------------------------------------------------------------------------*
00003C2A                          4438  * Data storage                                                 
00003C2A                          4439  *---------------------------------------------------------------------------*  
00003C2A                          4440  WELCOME
00003C2A= 20 20 20 20 20 20 ...   4441              DC.B '                         ___     ___ ___        ___   ___ ___                 ',CR,LF
00003C7A= 3D 3D 3D 3D 3D 20 ...   4442              DC.B '=====           \  /\  /|___|   |   |   ||\  /||___    | |   |           =====',CR,LF
00003CCA= 3D 3D 3D 3D 3D 20 ...   4443              DC.B '=====            \/  \/ |___|___|___|___|| \/ ||___    | |___|           =====',CR,LF
00003D1A                          4444      
00003D1A= 20 20 20 20 20 20 ...   4445              DC.B '                        ___ ___ ___  ___      ___                             ',CR,LF
00003D6A= 20 20 20 20 20 20 ...   4446              DC.B '                       |     | |___)|    |   |___                             ',CR,LF 
00003DBA= 20 20 20 20 20 20 ...   4447              DC.B '                       |___ _|_|\___|___ |___|___                             ',CR,LF
00003E0A                          4448      
00003E0A= 20 20 20 20 20 20 ...   4449              DC.B '           __  ___ ___   _   ___  ___  ___        ___      ___ ___            ',CR,LF
00003E5A= 3D 3D 3D 3D 3D 20 ...   4450              DC.B '=====     |  \  | |___  /_\ |___ |___ |___ |\  /||___||   |___|___)      =====',CR,LF 
00003EAA= 3D 3D 3D 3D 3D 20 ...   4451              DC.B '=====     |__/ _|_ ___|/   \ ___| ___||___ | \/ ||___||___|___|\___      =====',CR,LF,CR,LF,CR,LF,0
00003EFF                          4452  
00003EFF                          4453  PROMPT_START
00003EFF= 50 6C 65 61 73 65 ...   4454              DC.B    'Please enter a hexadecimal starting address.',CR,LF,0
00003F2E                          4455      
00003F2E                          4456  PROMPT_END
00003F2E= 50 6C 65 61 73 65 ...   4457              DC.B    'Please enter a hexadecimal ending address.',CR,LF,0
00003F5B= 0D 0A 48 69 74 20 ...   4458  DISP_NEXT   DC.B    CR,LF,'Hit Enter to print the next 30 lines.',CR,LF,0            
00003F85= 57 6F 75 6C 64 20 ...   4459  REPEATMSG   DC.B    'Would you like to run again? Press Y to continue or N to finish.',CR,LF,0
00003FC8= 54 68 61 6E 6B 20 ...   4460  FINMSG      DC.B    'Thank you for using Circle Disassembler.',CR,LF,0
00003FF3= 45 72 72 6F 72 3A ...   4461  ERRMSG_1    DC.B    'Error: Invalid Input Address',CR,LF,0
00004012= 45 72 72 6F 72 3A ...   4462  ERRMSG_3    DC.B    'Error: Invalid Input Address (Odd)',CR,LF,0
00004037= 45 72 72 6F 72 3A ...   4463  ERRMSG_5    DC.B    'Error: Invalid Input Address (start > end)',CR,LF,0
00004064                          4464  
00004064                          4465  VR_S_ADDR   DS.B    80                      * allocate storage space for the starting address
000040B4                          4466  VR_E_ADDR   DS.B    80                      * allocate storage space for the ending address
00004104                          4467  S_ADDR_HX   DS.L    1                       * allocate storage space for the starting address in hex
00004108                          4468  E_ADDR_HX   DS.L    1                       * allocate storage space for the ending address in hex
0000410C= 0D 0A 00                4469  ENDLINE_M   DC.B    CR,LF,0
0000410F                          4470  TMPINPUT    DS.B    80                      * temp store user input
0000415F                          4471  TMPOUTPUT   DS.B    80                      * temp store prog output
000041AF= 20 20 20 4F 52 49 ...   4472  DISP_ORI_B  DC.B    '   ORI.B',0
000041B8= 20 20 20 4F 52 49 ...   4473  DISP_ORI_W  DC.B    '   ORI.W',0
000041C1= 20 20 20 4F 52 49 ...   4474  DISP_ORI_L  DC.B    '   ORI.L',0
000041CA= 20 20 20 45 4F 52 ...   4475  DISP_EORI_B  DC.B    '   EORI.B',0
000041D4= 20 20 20 45 4F 52 ...   4476  DISP_EORI_W  DC.B    '   EORI.W',0
000041DE= 20 20 20 45 4F 52 ...   4477  DISP_EORI_L  DC.B    '   EORI.L',0
000041E8= 20 20 20 42 54 53 ...   4478  DISP_BTST   DC.B    '   BTST',0
000041F0= 20 20 20 43 4D 50 ...   4479  DISP_CMPI_B  DC.B    '   CMPI.B',0
000041FA= 20 20 20 43 4D 50 ...   4480  DISP_CMPI_W  DC.B    '   CMPI.W',0
00004204= 20 20 20 43 4D 50 ...   4481  DISP_CMPI_L  DC.B    '   CMPI.L',0
0000420E= 20 20 20 44 41 54 ...   4482  DISP_DATA   DC.B    '   DATA',0
00004216= 20 20 20 4D 4F 56 ...   4483  DISP_MOVE_B DC.B    '   MOVE.B',0
00004220= 20 20 20 4D 4F 56 ...   4484  DISP_MOVE_W DC.B    '   MOVE.W',0
0000422A= 20 20 20 4D 4F 56 ...   4485  DISP_MOVE_L DC.B    '   MOVE.L',0
00004234= 20 20 20 52 54 53 00    4486  DISP_RTS    DC.B    '   RTS',0
0000423B= 20 20 20 4A 53 52 00    4487  DISP_JSR    DC.B    '   JSR',0
00004242= 20 20 20 4E 45 47 ...   4488  DISP_NEG_B    DC.B    '   NEG.B',0
0000424B= 20 20 20 4E 45 47 ...   4489  DISP_NEG_W    DC.B    '   NEG.W',0
00004254= 20 20 20 4E 45 47 ...   4490  DISP_NEG_L    DC.B    '   NEG.L',0
0000425D= 20 20 20 4E 4F 54 ...   4491  DISP_NOT_B  DC.B    '   NOT.B',0
00004266= 20 20 20 4E 4F 54 ...   4492  DISP_NOT_W  DC.B    '   NOT.W',0
0000426F= 20 20 20 4E 4F 54 ...   4493  DISP_NOT_L  DC.B    '   NOT.L',0
00004278= 20 20 20 4C 45 41 00    4494  DISP_LEA    DC.B    '   LEA',0
0000427F= 20 20 20 4D 4F 56 ...   4495  DISP_MOVEM_W    DC.B    '   MOVEM.W',0
0000428A= 20 20 20 4D 4F 56 ...   4496  DISP_MOVEM_L    DC.B    '   MOVEM.L',0
00004295= 20 20 20 41 44 44 ...   4497  DISP_ADDQ_B DC.B    '   ADDQ.B',0
0000429F= 20 20 20 41 44 44 ...   4498  DISP_ADDQ_W DC.B    '   ADDQ.W',0
000042A9= 20 20 20 41 44 44 ...   4499  DISP_ADDQ_L DC.B    '   ADDQ.L',0
000042B3= 20 20 20 44 49 56 ...   4500  DISP_DIVS   DC.B    '   DIVS',0
000042BB= 20 20 20 53 55 42 ...   4501  DISP_SUB_B  DC.B    '   SUB.B',0
000042C4= 20 20 20 53 55 42 ...   4502  DISP_SUB_W  DC.B    '   SUB.W',0
000042CD= 20 20 20 53 55 42 ...   4503  DISP_SUB_L  DC.B    '   SUB.L',0
000042D6= 20 20 20 53 55 42 ...   4504  DISP_SUBI_B  DC.B    '   SUBI.B',0
000042E0= 20 20 20 53 55 42 ...   4505  DISP_SUBI_W  DC.B    '   SUBI.W',0
000042EA= 20 20 20 53 55 42 ...   4506  DISP_SUBI_L  DC.B    '   SUBI.L',0
000042F4= 20 20 20 53 55 42 ...   4507  DISP_SUBA_W  DC.B    '   SUBA.W',0
000042FE= 20 20 20 53 55 42 ...   4508  DISP_SUBA_L  DC.B    '   SUBA.L',0
00004308= 20 20 20 45 4F 52 ...   4509  DISP_EOR_B  DC.B    '   EOR.B',0
00004311= 20 20 20 45 4F 52 ...   4510  DISP_EOR_W  DC.B    '   EOR.W',0
0000431A= 20 20 20 45 4F 52 ...   4511  DISP_EOR_L  DC.B    '   EOR.L',0
00004323= 20 20 20 43 4D 50 ...   4512  DISP_CMP_B  DC.B    '   CMP.B',0
0000432C= 20 20 20 43 4D 50 ...   4513  DISP_CMP_W  DC.B    '   CMP.W',0
00004335= 20 20 20 43 4D 50 ...   4514  DISP_CMP_L  DC.B    '   CMP.L',0
0000433E= 20 20 20 43 4D 50 ...   4515  DISP_CMPA_W  DC.B    '   CMPA.W',0
00004348= 20 20 20 43 4D 50 ...   4516  DISP_CMPA_L  DC.B    '   CMPA.L',0
00004352= 20 20 20 4D 55 4C ...   4517  DISP_MULS_W DC.B    '   MULS.W',0
0000435C= 20 20 20 41 4E 44 ...   4518  DISP_AND_B  DC.B    '   AND.B',0
00004365= 20 20 20 41 4E 44 ...   4519  DISP_AND_W  DC.B    '   AND.W',0
0000436E= 20 20 20 41 4E 44 ...   4520  DISP_AND_L  DC.B    '   AND.L',0
00004377= 20 20 20 41 44 44 ...   4521  DISP_ADD_B  DC.B    '   ADD.B',0
00004380= 20 20 20 41 44 44 ...   4522  DISP_ADD_W  DC.B    '   ADD.W',0
00004389= 20 20 20 41 44 44 ...   4523  DISP_ADD_L  DC.B    '   ADD.L',0
00004392= 20 20 20 41 44 44 ...   4524  DISP_ADDA_W DC.B    '   ADDA.W',0
0000439C= 20 20 20 41 44 44 ...   4525  DISP_ADDA_L DC.B    '   ADDA.L',0
000043A6= 20 20 20 4C 53 52 ...   4526  DISP_LSR_B  DC.B    '   LSR.B',0
000043AF= 20 20 20 4C 53 4C ...   4527  DISP_LSL_B  DC.B    '   LSL.B',0
000043B8= 20 20 20 4C 53 52 ...   4528  DISP_LSR_W  DC.B    '   LSR.W',0
000043C1= 20 20 20 4C 53 4C ...   4529  DISP_LSL_W  DC.B    '   LSL.W',0
000043CA= 20 20 20 4C 53 52 ...   4530  DISP_LSR_L  DC.B    '   LSR.L',0
000043D3= 20 20 20 4C 53 4C ...   4531  DISP_LSL_L  DC.B    '   LSL.L',0
000043DC= 20 20 20 41 53 52 ...   4532  DISP_ASR_B  DC.B    '   ASR.B',0
000043E5= 20 20 20 41 53 4C ...   4533  DISP_ASL_B  DC.B    '   ASL.B',0
000043EE= 20 20 20 41 53 52 ...   4534  DISP_ASR_W  DC.B    '   ASR.W',0
000043F7= 20 20 20 41 53 4C ...   4535  DISP_ASL_W  DC.B    '   ASL.W',0
00004400= 20 20 20 41 53 52 ...   4536  DISP_ASR_L  DC.B    '   ASR.L',0
00004409= 20 20 20 41 53 4C ...   4537  DISP_ASL_L  DC.B    '   ASL.L',0
00004412= 20 20 20 52 4F 52 ...   4538  DISP_ROR_B  DC.B    '   ROR.B',0
0000441B= 20 20 20 52 4F 4C ...   4539  DISP_ROL_B  DC.B    '   ROL.B',0
00004424= 20 20 20 52 4F 52 ...   4540  DISP_ROR_W  DC.B    '   ROR.W',0
0000442D= 20 20 20 52 4F 4C ...   4541  DISP_ROL_W  DC.B    '   ROL.W',0
00004436= 20 20 20 52 4F 52 ...   4542  DISP_ROR_L  DC.B    '   ROR.L',0
0000443F= 20 20 20 52 4F 4C ...   4543  DISP_ROL_L  DC.B    '   ROL.L',0
00004448= 20 20 20 42 52 41 00    4544  DISP_BRA    DC.B    '   BRA',0
0000444F= 20 20 20 42 4C 54 00    4545  DISP_BLT    DC.B    '   BLT',0
00004456= 20 20 20 42 45 51 00    4546  DISP_BEQ    DC.B    '   BEQ',0
0000445D= 20 20 20 42 4E 45 00    4547  DISP_BNE    DC.B    '   BNE',0
00004464= 20 20 20 42 48 49 00    4548  DISP_BHI    DC.B    '   BHI',0
0000446B= 20 20 20 4D 4F 56 ...   4549  DISP_MOVEA_W    DC.B    '   MOVEA.W',0
00004476= 20 20 20 4D 4F 56 ...   4550  DISP_MOVEA_L    DC.B    '   MOVEA.L',0
00004481                          4551  
00004481= 20 20 20 24 00          4552  DISP_HEX     DC.B    '   $',0
00004486= 20 20 20 44 00          4553  DISP_D  DC.B    '   D',0
0000448B= 20 20 20 41 00          4554  DISP_A  DC.B    '   A',0
00004490= 20 20 20 28 00          4555  DISP_OP  DC.B    '   (',0
00004495= 29 00                   4556  DISP_CP  DC.B   ')',0
00004497= 20 20 20 28 41 00       4557  DISP_AOP  DC.B    '   (A',0
0000449D                          4558  
0000449D= 20 20 20 2D 28 41 00    4559  DISP_PRE    DC.B    '   -(A',0
000044A4= 29 2B 00                4560  DISP_POST   DC.B    ')+',0
000044A7= 20 20 20 23 00          4561  DISP_LB DC.B    '   #',0
000044AC= 30 00                   4562  DISP_0  DC.B    '0',0
000044AE= 31 00                   4563  DISP_1  DC.B    '1',0
000044B0= 32 00                   4564  DISP_2  DC.B    '2',0
000044B2= 33 00                   4565  DISP_3  DC.B    '3',0
000044B4= 34 00                   4566  DISP_4  DC.B    '4',0
000044B6= 35 00                   4567  DISP_5  DC.B    '5',0
000044B8= 36 00                   4568  DISP_6  DC.B    '6',0
000044BA= 37 00                   4569  DISP_7  DC.B    '7',0
000044BC                          4570  
000044BC                          4571  *STACK INTERFACE VARIABLES*
000044BC                          4572  COUNTER         DS.W    1
000044BE                          4573  QUEUE_COUNTER   DS.W    1
000044C0                          4574  
000044C0                          4575  *EA DECODING INTERFACE VARIABLES* 
000044C0                          4576  DEST_REGISTER_FORMAT    DS.B    1           *all address modes acceptable standard
000044C1                          4577  SRC_REGISTER_FORMAT  DS.B    1           *all address modes acceptable standard
000044C2                          4578  TEMP_REGISTER_FORMAT    DS.B    1           *place holder for masking other register formats
000044C3                          4579  
000044C3                          4580  *FORMAT OF WHERE TO GET THE EA BY THE ENDING BIT AND STARTING BIT
000044C3                          4581  * WORD + WORD = LONG
000044C3                          4582  * (STARTING BIT) + (ENDING BIT) = 2 HEX CHAR
000044C3                          4583  * A              + F            = AF         <= EXAMPLE
000044C3                          4584  *(10TH BIT)      + (15TH BIT)   = CHECK BITS 15 THROUGH 10
000044C3                          4585  GET_DST_START_END    DS.B    1
000044C4                          4586  GET_SRC_START_END    DS.B    1
000044C5                          4587  
000044C5                          4588  *STORES THE START + END BITS HERE (FROM ABOVE)
000044C6                          4589  VAR_BYTE_START      DS.L    1
000044CA                          4590  VAR_BYTE_END        DS.L    1
000044CE                          4591  VAR_TEMP_CLEANCOPY  DS.L    1
000044D2                          4592  
000044D2                          4593  VAR_LONG_ADDRESS_MODE_CHECK        DS.L    1       *holds the bits 0-2 in long form
000044D6                          4594  
000044D6                          4595  *MORE FOR STACK USAGE*
000044D6= 2C 00                   4596  DISP_COMMA  DC.B    ',',0
000044D8= 20 20 20 00             4597  DISP_INDENT  DC.B    '   ',0
000044DC                          4598  
000044DC                          4599  *NEXT WORD POINTER: FOR IDENTIFING (xxx).W or (xxx).L*
000044DC                          4600  POINTER_WORD    DS.W       1
000044DE                          4601  
000044DE                          4602  
000044DE                          4603  
000044DE                          4604  *---------------------------------------------------------------------------*
000044DE                          4605  * Ends program
000044DE                          4606  *---------------------------------------------------------------------------*
000044DE                          4607              END    START                    * last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASC2HXLP            1156
ASCII2HEX           1150
ASC_ERR             11B2
ASC_LOW             1194
ASC_NUM             11A4
ASC_SFT             11AC
ASC_UPP             119C
CHECK0              330E
CHECK1              3398
CHECK2              3422
CHECK3              34BC
CHECK4              355E
CHECK7              3600
CHECK_IMMEDIATE     36E0
CHECK_LONG          3692
CHECK_WORD          364C
CLEAR_RETURN        3C16
CLEAR_STACK         3C06
COUNTER             44BC
CR                  D
DECREMENT           3BFE
DEST_CHECK0         373E
DEST_CHECK1         37C8
DEST_CHECK2         3852
DEST_CHECK3         38EC
DEST_CHECK4         398E
DEST_CHECK7         3A30
DEST_CHECK_IMMEDIATE  3B10
DEST_CHECK_LONG     3AC2
DEST_CHECK_WORD     3A7C
DEST_LOOP_SHIFTING  37A8
DEST_LOOP_SHIFTING1  3832
DEST_LOOP_SHIFTING2  38C4
DEST_LOOP_SHIFTING3  395E
DEST_LOOP_SHIFTING4  3A08
DEST_LOOP_SHIFTING7  3A68
DEST_MASKING_NEXT   37B6
DEST_MASKING_NEXT1  3840
DEST_MASKING_NEXT2  38D2
DEST_MASKING_NEXT3  396C
DEST_MASKING_NEXT4  3A16
DEST_MASKING_NEXT7  3A76
DEST_MODE           2EC6
DEST_REGISTER       3196
DEST_REGISTER_FORMAT  44C0
DISPLAY_30_LINES    12FE
DISP_0              44AC
DISP_1              44AE
DISP_2              44B0
DISP_3              44B2
DISP_4              44B4
DISP_5              44B6
DISP_6              44B8
DISP_7              44BA
DISP_A              448B
DISP_ADDA_L         439C
DISP_ADDA_W         4392
DISP_ADDQ_B         4295
DISP_ADDQ_L         42A9
DISP_ADDQ_W         429F
DISP_ADD_B          4377
DISP_ADD_L          4389
DISP_ADD_W          4380
DISP_AND_B          435C
DISP_AND_L          436E
DISP_AND_W          4365
DISP_AOP            4497
DISP_ASL_B          43E5
DISP_ASL_L          4409
DISP_ASL_W          43F7
DISP_ASR_B          43DC
DISP_ASR_L          4400
DISP_ASR_W          43EE
DISP_BEQ            4456
DISP_BHI            4464
DISP_BLT            444F
DISP_BNE            445D
DISP_BRA            4448
DISP_BTST           41E8
DISP_CMPA_L         4348
DISP_CMPA_W         433E
DISP_CMPI_B         41F0
DISP_CMPI_L         4204
DISP_CMPI_W         41FA
DISP_CMP_B          4323
DISP_CMP_L          4335
DISP_CMP_W          432C
DISP_COMMA          44D6
DISP_CP             4495
DISP_D              4486
DISP_DATA           420E
DISP_DIVS           42B3
DISP_EORI_B         41CA
DISP_EORI_L         41DE
DISP_EORI_W         41D4
DISP_EOR_B          4308
DISP_EOR_L          431A
DISP_EOR_W          4311
DISP_HEX            4481
DISP_INDENT         44D8
DISP_JSR            423B
DISP_LB             44A7
DISP_LEA            4278
DISP_LSL_B          43AF
DISP_LSL_L          43D3
DISP_LSL_W          43C1
DISP_LSR_B          43A6
DISP_LSR_L          43CA
DISP_LSR_W          43B8
DISP_MOVEA_L        4476
DISP_MOVEA_W        446B
DISP_MOVEM_L        428A
DISP_MOVEM_W        427F
DISP_MOVE_B         4216
DISP_MOVE_L         422A
DISP_MOVE_W         4220
DISP_MULS_W         4352
DISP_NEG_B          4242
DISP_NEG_L          4254
DISP_NEG_W          424B
DISP_NEXT           3F5B
DISP_NOT_B          425D
DISP_NOT_L          426F
DISP_NOT_W          4266
DISP_OP             4490
DISP_ORI_B          41AF
DISP_ORI_L          41C1
DISP_ORI_W          41B8
DISP_POST           44A4
DISP_PRE            449D
DISP_ROL_B          441B
DISP_ROL_L          443F
DISP_ROL_W          442D
DISP_ROR_B          4412
DISP_ROR_L          4436
DISP_ROR_W          4424
DISP_RTS            4234
DISP_SUBA_L         42FE
DISP_SUBA_W         42F4
DISP_SUBI_B         42D6
DISP_SUBI_L         42EA
DISP_SUBI_W         42E0
DISP_SUB_B          42BB
DISP_SUB_L          42CD
DISP_SUB_W          42C4
D_MODE000           2F68
D_MODE010           2FB0
D_MODE011           3010
D_MODE100           3030
D_MODE111           3082
EA_ARITH            2E60
EA_DATA             14DC
EA_GEN              2EAC
EA_MOVEA            2E86
EA_NOSRC            2E4C
ENDLINE_M           410C
END_ADDR            109C
ERRMSG_1            3FF3
ERRMSG_3            4012
ERRMSG_5            4037
ERROR_1             1100
ERROR_2             1110
ERROR_3             1120
ERROR_4             1130
ERROR_5             1140
E_ADDR_HX           4108
FINMSG              3FC8
GET_DST_FAILED      3B56
GET_DST_START_END   44C3
GET_DST_SUCCESS     3B5A
GET_EA_EA_DEST      372C
GET_EA_EA_SRC       32FC
GET_SRC_FAILED      3726
GET_SRC_START_END   44C4
GET_SRC_SUCCESS     372A
HEX2ASCII           11B8
HEX2ASCII2STACK     11FA
HEX_CHAR            11E6
HEX_CONT            11EA
HEX_LOOP            11CC
IMMD_B              3136
IMMD_L              3176
IMMD_W              3156
IMMEDIATE           3106
INCREMENT           3BF6
INTRO               1028
IS_ODD              123E
IS_ODD_ERR          1254
JMPTABLE            132A
LF                  A
LONGMODE            30DA
LOOP_SHIFTING       3378
LOOP_SHIFTING1      3402
LOOP_SHIFTING2      3494
LOOP_SHIFTING3      352E
LOOP_SHIFTING4      35D8
MAIN                125A
MASKING_NEXT        3386
MASKING_NEXT1       3410
MASKING_NEXT2       34A2
MASKING_NEXT3       353C
MASKING_NEXT4       35E6
MODE000             2F54
MODE001             2F7C
MODE010             2F90
MODE011             2FD0
MODE100             2FF0
MODE111             3050
NEXTLINES           130C
OP0000              138A
OP0001              15B0
OP0010              161E
OP0011              171C
OP0100              1818
OP0101              1A6E
OP0101_ADDQ_B       1AEA
OP0101_ADDQ_B_0     1B66
OP0101_ADDQ_B_1     1B72
OP0101_ADDQ_B_2     1B7E
OP0101_ADDQ_B_3     1B8A
OP0101_ADDQ_B_4     1B96
OP0101_ADDQ_B_5     1BA2
OP0101_ADDQ_B_6     1BAE
OP0101_ADDQ_B_7     1BBA
OP0101_ADDQ_B_8     1BC6
OP0101_ADDQ_L       1B02
OP0101_ADDQ_W       1AF6
OP0101_RETURN       1B0A
OP0101_RETURN2      1BCE
OP0110              1C12
OP0111              1CA0
OP1000              1CA4
OP1000_DIVS_DN_EA_OR_EA_DN  1CB2
OP1000_DIVS_RETURN  1D96
OP1000_EA_DN_DIVS   1CE0
OP1000_PRINT_L_DIVS  1D4E
OP1000_PRINT_W_DIVS  1D06
OP1001              1DAC
OP1001_ADD_RETURN   20FA
OP1001_DETERMINE_DN_EA_OR_EA_DN  1EC2
OP1001_DN_EA        1EFA
OP1001_EA_DN        1FFA
OP1001_PRINT_B      2022
OP1001_PRINT_B2     1F22
OP1001_PRINT_L      20B2
OP1001_PRINT_L2     1FB2
OP1001_PRINT_W      206A
OP1001_PRINT_W2     1F6A
OP1001_SUBA_L       1DDE
OP1001_SUBA_W       1E50
OP1010              2168
OP1011              216C
OP1011_CMP          21C6
OP1011_CMPA         2278
OP1011_CMPA_L       22F2
OP1011_CMPA_W       22E6
OP1011_CMP_B        223A
OP1011_CMP_L        2252
OP1011_CMP_W        2246
OP1011_EOR          2318
OP1011_EOR_B        238C
OP1011_EOR_L        23A4
OP1011_EOR_W        2398
OP1011_RETURN       23AC
OP1011_RETURN_CMP   225A
OP1011_RETURN_CMPA  22FA
OP1100              246C
OP1100_AND_RETURN   27BC
OP1100_DETERMINE_DN_EA_OR_EA_DN  2582
OP1100_DN_EA        25BC
OP1100_EA_DN        26BC
OP1100_EA_DN_MULS   24CA
OP1100_MULS_DN_EA_OR_EA_DN  249C
OP1100_MULS_RETURN  2580
OP1100_PRINT_B      26E4
OP1100_PRINT_B2     25E4
OP1100_PRINT_L      2774
OP1100_PRINT_L2     2674
OP1100_PRINT_L_MULS  2538
OP1100_PRINT_W      272C
OP1100_PRINT_W2     262C
OP1100_PRINT_W_MULS  24F0
OP1101              27BE
OP1101_ADDA_L       27F0
OP1101_ADDA_W       2862
OP1101_ADD_RETURN   2B0C
OP1101_DETERMINE_DN_EA_OR_EA_DN  28D4
OP1101_DN_EA        290C
OP1101_EA_DN        2A0C
OP1101_PRINT_B      2A34
OP1101_PRINT_B2     2934
OP1101_PRINT_L      2AC4
OP1101_PRINT_L2     29C4
OP1101_PRINT_W      2A7C
OP1101_PRINT_W2     297C
OP1110              2B9A
OP1111              2E48
OP_ADDA_L           2B82
OP_ADDA_W           2B6A
OP_ADDQ_B           1BDC
OP_ADDQ_L           1C00
OP_ADDQ_W           1BEE
OP_ADD_B            2B22
OP_ADD_L            2B52
OP_ADD_W            2B3A
OP_ASL              2D3A
OP_ASL_B            2D5E
OP_ASL_L            2D70
OP_ASL_W            2D82
OP_ASR              2CE0
OP_ASR_B            2D04
OP_ASR_L            2D16
OP_ASR_W            2D28
OP_ASX              2BFC
OP_BEQ              1C76
OP_BHI              1C5A
OP_BLT              1C92
OP_BNE              1C68
OP_BRA              1C84
OP_BTST             13FE
OP_CMPA_L           23DC
OP_CMPA_W           23CA
OP_CMPI             1504
OP_CMPI_B           1524
OP_CMPI_L           1548
OP_CMPI_W           1536
OP_CMP_B            23EE
OP_CMP_L            241E
OP_CMP_W            2406
OP_DATA             14B8
OP_DIVS             1D98
OP_EORI             140C
OP_EORI_B           142C
OP_EORI_L           1450
OP_EORI_W           143E
OP_EOR_B            2436
OP_EOR_L            245A
OP_EOR_W            2448
OP_JSR              1A40
OP_LEA              18C6
OP_LEA_DN_EA_OR_EA_DN  18D4
OP_LEA_RETURN       1932
OP_LSL              2C86
OP_LSL_B            2CAA
OP_LSL_L            2CBC
OP_LSL_W            2CCE
OP_LSR              2C2C
OP_LSR_B            2C50
OP_LSR_L            2C62
OP_LSR_W            2C74
OP_LSX              2BE4
OP_MOVEA_L          16AC
OP_MOVEA_W          17A8
OP_MOVEM_L          18B4
OP_MOVEM_W          18A2
OP_MOVE_B           15B6
OP_MOVE_L           1644
OP_MOVE_W           1740
OP_MULS             248E
OP_NEG              1934
OP_NEG_B            1980
OP_NEG_L            1998
OP_NEG_PRINT_EA     19A4
OP_NEG_W            198C
OP_NOT              19BA
OP_NOT_B            1A06
OP_NOT_L            1A1E
OP_NOT_PRINT_EA     1A2A
OP_NOT_W            1A12
OP_ORI              155A
OP_ORI_B            157A
OP_ORI_L            159E
OP_ORI_W            158C
OP_PRINT_L_LEA      18F2
OP_ROL              2DEE
OP_ROL_B            2E12
OP_ROL_L            2E24
OP_ROL_W            2E36
OP_ROR              2D94
OP_ROR_B            2DB8
OP_ROR_L            2DCA
OP_ROR_W            2DDC
OP_ROX              2C14
OP_RTS              1A54
OP_SUBA_L           2156
OP_SUBA_W           2144
OP_SUBI             1462
OP_SUBI_B           1482
OP_SUBI_L           14A6
OP_SUBI_W           1494
OP_SUB_B            20FC
OP_SUB_L            212C
OP_SUB_W            2114
OUTPUT_PROCESSED_DATA  12DE
POINTER_WORD        44DC
POP_FRONT           3BB0
POP_FRONT_RETURN    3BEA
POP_RETURN          3BAE
POP_SHIFT_LOOP      3BCC
POP_STACK           3BA2
PRINT_QUEUE         3B76
PRINT_QUEUE_HELPER  3B82
PRINT_QUEUE_RETURN  3B98
PRINT_STACK         3B5C
PRINT_STACK_HELPER  3B68
PRINT_STACK_RETURN  3B74
PROGLP              100A
PROMPT_END          3F2E
PROMPT_START        3EFF
PUSH_STACK          3B9A
QUEUE_COUNTER       44BE
REG_0               324A
REG_1               3258
REG_2               3266
REG_3               3274
REG_4               3282
REG_5               3290
REG_6               329E
REG_7               32AC
REPEAT              32BA
REPEATMSG           3F85
RETURN              11B6
SRC_LOOP_SHIFTING   3638
SRC_MASKING_NEXT    3646
SRC_MODE            2F0A
SRC_REGISTER        31F2
SRC_REGISTER_FORMAT  44C1
STACK               7000
STACK_HEX_CHAR      1228
STACK_HEX_CONT      122C
STACK_HEX_LOOP      120E
START               1004
START_ADDR          104A
S_ADDR_HX           4104
TEMP_REGISTER_FORMAT  44C2
TERMINATE           3C18
TESTING             1036
TMPINPUT            410F
TMPOUTPUT           415F
VAR_BYTE_END        44CA
VAR_BYTE_START      44C6
VAR_LONG_ADDRESS_MODE_CHECK  44D2
VAR_TEMP_CLEANCOPY  44CE
VR_E_ADDR           40B4
VR_S_ADDR           4064
WELCOME             3C2A
WORDMODE            30AE

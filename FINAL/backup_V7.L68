00001004 Starting Address
Assembler used: EASy68K Editor/Assembler v5.12.29
Created On: 12/8/2014 11:47:58 AM

00000000                             1  *---------------------------------------------------------------------------*
00000000                             2  * Title      : 68K Disassembler
00000000                             3  * Written by : Team Circle
00000000                             4  * Date       : 12/05/14
00000000                             5  * Description: Scans a section of memory and converts its
00000000                             6  *              contents to a listing of valid assembly 
00000000                             7  *              language instructions
00000000                             8  *---------------------------------------------------------------------------*
00000000                             9  
00000000                            10  *---------------------------------------------------------------------------*
00000000                            11  * System Equates                                                 
00000000                            12  *---------------------------------------------------------------------------*
00000000  =0000000D                 13  CR          EQU     $0D                     * ASCII for Carriage Return
00000000  =0000000A                 14  LF          EQU     $0A                     * ASCII for Line Feed 
00000000  =00007000                 15  STACK       EQU     $7000                   * Initial Stack Pointer                         
00000000                            16              
00000000                            17  *---------------------------------------------------------------------------*
00000000                            18  * Reserved Registers
00000000                            19  *---------------------------------------------------------------------------*  
00000000                            20  * D0 - I/O
00000000                            21  * D1 - Temporary storage of processing data
00000000                            22  * D3 - [PUSH_STACK]
00000000                            23  * D4 - Opcode size (0 - byte; 1- word; 2-long)
00000000                            24  * D5 - Processing data
00000000                            25  * D6 - Loop counter to print 30 lines
00000000                            26  * D7 - Error flag
00000000                            27  * A2 - [STACK POINTER]
00000000                            28  * A5 - Processing address in hex
00000000                            29  
00000000                            30  *---------------------------------------------------------------------------*
00000000                            31  * Start and loop program
00000000                            32  *---------------------------------------------------------------------------*  
00001000                            33              ORG     $1000
00001000  4FF8 7000                 34              LEA     STACK,SP
00001004                            35  START:            
00001004  4EB9 00001028             36              JSR     INTRO                 
0000100A  4EB9 00001058             37  PROGLP      JSR     START_ADDR
00001010  4EB9 000010AA             38              JSR     END_ADDR
00001016  43F9 000035C6             39              LEA     ENDLINE_M,A1           * Add a new line
0000101C  103C 000E                 40              MOVE.B  #14, D0                  * Display A1
00001020  4E4F                      41              TRAP    #15
00001022                            42              
00001022  4EF9 00001268             43              JMP     MAIN
00001028                            44              
00001028                            45  *---------------------------------------------------------------------------*
00001028                            46  * INTRO: Display the introduction of the program
00001028                            47  *---------------------------------------------------------------------------*
00001028  43F9 000030E4             48  INTRO       LEA     WELCOME,A1              * Load PROMPT_START
0000102E  103C 000E                 49              MOVE.B  #14,D0                  * Display A1
00001032  4E4F                      50              TRAP    #15
00001034  4E75                      51              RTS
00001036                            52  TESTING
00001036                            53              *ADD.B  D1,A1           *DOESN'T WORK WITH ADD.B, BUT WITH ADD.W/ADD.L IT DOES
00001036                            54              *ADD.B  A2,D2           *DOESN'T WORK WITH ADD.B
00001036  D613                      55              ADD.B  (A3),D3
00001038  D81C                      56              ADD.B  (A4)+,D4
0000103A  DA25                      57              ADD.B  -(A5),D5
0000103C  DC38 3331                 58              ADD.B  $3331,D6
00001040  DE39 44444441             59              ADD.B  $44444441,D7
00001046                            60  
00001046                            61              *ADD.B  A1,D1
00001046                            62              *ADD.B  D2,A2   
00001046  D713                      63              ADD.B  D3,(A3)
00001048  D91C                      64              ADD.B  D4,(A4)+
0000104A  DB25                      65              ADD.B  D5,-(A5)
0000104C  DD38 3331                 66              ADD.B  D6,$3331
00001050  DF39 44444441             67              ADD.B  D7,$44444441
00001056                            68              
00001056  4E75                      69              RTS
00001058                            70  *---------------------------------------------------------------------------*
00001058                            71  * START_ADDR: Compute the starting address
00001058                            72  *---------------------------------------------------------------------------*
00001058                            73  START_ADDR
00001058                            74              * Output
00001058  43F9 000033B9             75              LEA     PROMPT_START,A1         * Load PROMPT_START 
0000105E  103C 000E                 76              MOVE.B  #14,D0                  * Display PROMPT_START
00001062  4E4F                      77              TRAP    #15
00001064                            78      
00001064                            79              * Input
00001064  43F9 0000351E             80              LEA     VR_S_ADDR,A1            * Load VR_S_ADDR
0000106A  103C 0002                 81              MOVE.B  #2,D0                   * Ask user for input
0000106E  4E4F                      82              TRAP    #15
00001070                            83              
00001070                            84              * Error Checking (length)
00001070  0C01 0000                 85              CMPI.B  #0, D1                  * Check if input length <= 0
00001074  6F00 0098                 86              BLE     ERROR_1
00001078  0C01 0008                 87              CMPI.B  #8, D1                  * Check if input length > 8
0000107C  6E00 0090                 88              BGT     ERROR_1
00001080                            89              
00001080                            90              * Conversion & Storage
00001080  4EB9 0000115E             91              JSR     ASCII2HEX               * Jump to ASCII2HEX
00001086  0C07 0001                 92              CMPI.B  #1, D7                  * Check for error
0000108A  6700 0082                 93              BEQ     ERROR_1                 
0000108E  23C1 000035BE             94              MOVE.L  D1, S_ADDR_HX           * Move the result to S_ADDR_HX 
00001094                            95              
00001094                            96              * Error Checking (Odd)
00001094  43F9 000035BE             97              LEA     S_ADDR_HX, A1           * Load 'S_ADDR_HX' for odd error
0000109A  4EB9 0000124C             98              JSR     IS_ODD                  * Check if the input address is odd
000010A0  0C07 0001                 99              CMPI.B  #1, D7                  * Check for error
000010A4  6700 0088                100              BEQ     ERROR_3
000010A8                           101              
000010A8                           102              * Return
000010A8  4E75                     103              RTS     
000010AA                           104  *---------------------------------------------------------------------------*
000010AA                           105  * END_ADDR: Compute the ending address
000010AA                           106  *---------------------------------------------------------------------------*
000010AA                           107  END_ADDR
000010AA                           108              * Output
000010AA  43F9 000033E8            109              LEA     PROMPT_END,A1           * Load PROMPT_END
000010B0  103C 000E                110              MOVE.B  #14,D0                  * Display PROMPT_END
000010B4  4E4F                     111              TRAP    #15
000010B6                           112  
000010B6                           113              * Input
000010B6  43F9 0000356E            114              LEA     VR_E_ADDR,A1            * Load VR_E_ADDR
000010BC  103C 0002                115              MOVE.B  #2,D0                   * Ask user for input
000010C0  4E4F                     116              TRAP    #15
000010C2                           117              
000010C2                           118              * Error Checking (length)
000010C2  0C01 0000                119              CMPI.B  #0, D1                  * Check if input length <= 0
000010C6  6F00 0056                120              BLE     ERROR_2
000010CA  0C01 0008                121              CMPI.B  #8, D1                  * Check if input length > 8
000010CE  6E00 004E                122              BGT     ERROR_2
000010D2                           123              
000010D2                           124              * Conversion & Storage
000010D2  4EB9 0000115E            125              JSR     ASCII2HEX               * Jump to ASCII2HEX
000010D8  0C07 0001                126              CMPI.B  #1, D7                  * Check for error
000010DC  6700 0040                127              BEQ     ERROR_2
000010E0  23C1 000035C2            128              MOVE.L  D1, E_ADDR_HX           * Move the result to E_ADDR_HX
000010E6                           129              
000010E6                           130              * Error Checking (start > end case)
000010E6  2439 000035BE            131              MOVE.L  S_ADDR_HX, D2           * Move the starting address to D2
000010EC  B282                     132              CMP.L   D2, D1                  * Compare starting and ending address
000010EE  6300 005E                133              BLS     ERROR_5                 * Go to ERROR_5 if ending < starting
000010F2                           134              
000010F2                           135              * Error Checking (Odd case)
000010F2  43F9 000035C2            136              LEA     E_ADDR_HX, A1           * Move the ending address
000010F8  4EB9 0000124C            137              JSR     IS_ODD                  * Go to IS_ODD for odd address checking
000010FE  0C07 0001                138              CMPI.B  #1, D7                  * Check for an error flag
00001102  6700 003A                139              BEQ     ERROR_4
00001106                           140              
00001106                           141              * Inputs are valid
00001106  2A79 000035BE            142              MOVE.L  S_ADDR_HX, A5           * Store the valid input in A5
0000110C                           143              
0000110C  4E75                     144              RTS
0000110E                           145              
0000110E                           146  *---------------------------------------------------------------------------*
0000110E                           147  * ERROR_1: Address error (Invalid starting address)
0000110E                           148  *---------------------------------------------------------------------------*
0000110E                           149  ERROR_1
0000110E  43F9 000034AD            150              LEA     ERRMSG_1, A1            * Load ERRMSG_1
00001114  103C 000E                151              MOVE.B  #14, D0                 * Display ERRMSG_1
00001118  4E4F                     152              TRAP    #15
0000111A  4EF8 1058                153              JMP     START_ADDR              * Jump to START_ADDR
0000111E                           154      
0000111E                           155  *---------------------------------------------------------------------------*
0000111E                           156  * ERROR_2: Address error (Invalid ending address)
0000111E                           157  *---------------------------------------------------------------------------*
0000111E                           158  ERROR_2
0000111E  43F9 000034AD            159              LEA     ERRMSG_1, A1            * Load ERRMSG_1
00001124  103C 000E                160              MOVE.B  #14, D0                 * Display ERRMSG_1
00001128  4E4F                     161              TRAP    #15
0000112A  4EF8 10AA                162              JMP     END_ADDR                * Jump to END_ADDR
0000112E                           163  
0000112E                           164  *---------------------------------------------------------------------------*
0000112E                           165  * ERROR_3: Address error (Odd starting address)
0000112E                           166  *---------------------------------------------------------------------------*
0000112E                           167  ERROR_3
0000112E  43F9 000034CC            168              LEA     ERRMSG_3, A1
00001134  103C 000E                169              MOVE.B  #14, D0
00001138  4E4F                     170              TRAP    #15
0000113A  4EF8 1058                171              JMP     START_ADDR
0000113E                           172     
0000113E                           173  *---------------------------------------------------------------------------*
0000113E                           174  * ERROR_4: Address error (Odd ending address)
0000113E                           175  *---------------------------------------------------------------------------*         
0000113E                           176  ERROR_4
0000113E  43F9 000034CC            177              LEA     ERRMSG_3, A1
00001144  103C 000E                178              MOVE.B  #14, D0
00001148  4E4F                     179              TRAP    #15
0000114A  4EF8 10AA                180              JMP     END_ADDR
0000114E                           181            
0000114E                           182  *---------------------------------------------------------------------------*
0000114E                           183  * ERROR_3: Address error (Ending address is less than starting address)
0000114E                           184  *---------------------------------------------------------------------------*
0000114E                           185  ERROR_5
0000114E  43F9 000034F1            186              LEA     ERRMSG_5, A1
00001154  103C 000E                187              MOVE.B  #14, D0
00001158  4E4F                     188              TRAP    #15
0000115A  4EF8 10AA                189              JMP     END_ADDR
0000115E                           190    
0000115E                           191  *---------------------------------------------------------------------------*
0000115E                           192  * ASCII2HEX: Convert ASCii to Hexadecimal
0000115E                           193  * Reserved registers: A1 = Source, D1 = Destination, D2 = Byte, D7 = Error
0000115E                           194  *---------------------------------------------------------------------------*
0000115E  4281                     195  ASCII2HEX   CLR.L   D1                      * Clear the destination 
00001160  4287                     196              CLR.L   D7                      * Set the error flag to 0
00001162  4282                     197              CLR.L   D2                      * Clear D2 for temp storage
00001164                           198              
00001164  1419                     199  ASC2HXLP    MOVE.B  (A1)+, D2               * Read a byte to D2
00001166  0C02 0000                200              CMPI.B  #0, D2                  * Check for NULL (indicates the end of source)
0000116A  6700 0058                201              BEQ     RETURN                  * If it's NULL, go to return
0000116E  0C02 0066                202              CMPI.B  #102, D2                * Decimal ASCII value of f is 102
00001172  6E00 004C                203              BGT     ASC_ERR                 * ASCII > f (invalid input) 
00001176  0C02 0061                204              CMPI.B  #97, D2                 * Decimal ASCII value of a is 97
0000117A  6C00 0026                205              BGE     ASC_LOW                 * ASCII >= a (valid input)
0000117E  0C02 0046                206              CMPI.B  #70, D2                 * Decimal ASCII value of F is 70
00001182  6E00 003C                207              BGT     ASC_ERR                 * ASCII > F (invalid input)
00001186  0C02 0041                208              CMPI.B  #65, D2                 * Decimal ASCII value of A is 65
0000118A  6C00 001E                209              BGE     ASC_UPP                 * ASCII >= A (valid input)
0000118E  0C02 0039                210              CMPI.B  #57, D2                 * Decimal value of 9 is 57
00001192  6E00 002C                211              BGT     ASC_ERR                 * ASCII > 9 (invalid input)
00001196  0C02 0030                212              CMPI.B  #48, D2                 * Decimal ASCII value of 0 is 48
0000119A  6C00 0016                213              BGE     ASC_NUM                 * ASCII >= 0 (valid input)
0000119E  6000 0020                214              BRA     ASC_ERR                 * Invalid input
000011A2                           215  
000011A2  0442 0057                216  ASC_LOW     SUBI    #87, D2                 * Convert the ASCII input to Hex
000011A6  6000 0012                217              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011AA                           218              
000011AA  0442 0037                219  ASC_UPP     SUBI    #55, D2                 * Convert the ASCII input to Hex
000011AE  6000 000A                220              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011B2                           221              
000011B2  0442 0030                222  ASC_NUM     SUBI    #48, D2                 * Convert the ASCII input to Hex
000011B6  6000 0002                223              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011BA                           224              
000011BA  E981                     225  ASC_SFT     ASL.L   #4, D1                  * Shift the dest to left by 4 bits
000011BC  D202                     226              ADD.B   D2, D1                  * Add the converted input to D1
000011BE  60A4                     227              BRA     ASC2HXLP                * Loop
000011C0                           228  
000011C0  1E3C 0001                229  ASC_ERR     MOVE.B  #1, D7                  * Set the error flag to 1            
000011C4  4E75                     230  RETURN      RTS     
000011C6                           231  
000011C6                           232  *---------------------------------------------------------------------------*
000011C6                           233  * HEX2ASCII: Convert Hexadecimal to ASCii 
000011C6                           234  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
000011C6                           235  *---------------------------------------------------------------------------*
000011C6  0C02 0008                236  HEX2ASCII   CMPI.B  #8, D2                  * Check to see if the size is long
000011CA  6700 000E                237              BEQ     HEX_LOOP
000011CE  4841                     238              SWAP    D1
000011D0  0C02 0002                239              CMPI.B  #2,D2
000011D4  6600 0004                240              BNE     HEX_LOOP
000011D8  E189                     241              LSL.L   #8,D1
000011DA                           242             
000011DA  E999                     243  HEX_LOOP    ROL.L   #4, D1                  * Roll D1 to left
000011DC  2601                     244              MOVE.L  D1, D3                  * Move D1 to D3
000011DE  0283 0000000F            245              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
000011E4  0C03 0009                246              CMPI.B  #9, D3                  * Compare te digit
000011E8  6E00 000A                247              BGT     HEX_CHAR              
000011EC  0603 0030                248              ADDI.B  #48,D3                  * Add 48 for numerical output
000011F0  6000 0006                249              BRA     HEX_CONT
000011F4                           250              
000011F4  0603 0037                251  HEX_CHAR    ADDI.B  #55,D3                  * Add 55 for character output
000011F8                           252  
000011F8  12C3                     253  HEX_CONT    MOVE.B  D3, (A1)+               * Place into A1
000011FA  5342                     254              SUBI    #1, D2                  * Decrement the size
000011FC  0C02 0000                255              CMPI.B  #0, D2                  * Check if D2 is 0
00001200  66D8                     256              BNE     HEX_LOOP                * Loop
00001202  12BC 0000                257              MOVE.B  #$0,(A1)                * Null terminator
00001206  4E75                     258              RTS
00001208                           259  *---------------------------------------------------------------------------*
00001208                           260  * HEX2ASCII2STACK: Convert Hexadecimal to ASCii 
00001208                           261  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
00001208                           262  *---------------------------------------------------------------------------*
00001208                           263  HEX2ASCII2STACK
00001208  0C02 0008                264              CMPI.B  #8, D2                  * Check to see if the size is long
0000120C  6700 000E                265              BEQ     STACK_HEX_LOOP
00001210  4841                     266              SWAP    D1
00001212  0C02 0002                267              CMPI.B  #2,D2
00001216  6600 0004                268              BNE     STACK_HEX_LOOP
0000121A  E189                     269              LSL.L   #8,D1
0000121C                           270             
0000121C                           271  STACK_HEX_LOOP    
0000121C  E999                     272              ROL.L   #4, D1                  * Roll D1 to left
0000121E  2601                     273              MOVE.L  D1, D3                  * Move D1 to D3
00001220  0283 0000000F            274              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
00001226  0C03 0009                275              CMPI.B  #9, D3                  * Compare te digit
0000122A  6E00 000A                276              BGT     STACK_HEX_CHAR              
0000122E  0603 0030                277              ADDI.B  #48,D3                  * Add 48 for numerical output
00001232  6000 0006                278              BRA     STACK_HEX_CONT
00001236                           279              
00001236                           280  STACK_HEX_CHAR    
00001236  0603 0037                281              ADDI.B  #55,D3                  * Add 55 for character output
0000123A                           282  
0000123A                           283  STACK_HEX_CONT    
0000123A  6100 1E18                284              BSR     PUSH_STACK              *PLACE INTO STACK
0000123E  5342                     285              SUBI    #1, D2                  * Decrement the size
00001240  0C02 0000                286              CMPI.B  #0, D2                  * Check if D2 is 0
00001244  66D6                     287              BNE     STACK_HEX_LOOP                * Loop
00001246  12BC 0000                288              MOVE.B  #$0,(A1)                * Null terminator
0000124A  4E75                     289              RTS
0000124C                           290  
0000124C                           291  
0000124C                           292  *---------------------------------------------------------------------------*
0000124C                           293  * IS_ODD: Check whether the source address is odd
0000124C                           294  * Reserved registers: A1 = Source, D1 = Result, D7 = error flag
0000124C                           295  *---------------------------------------------------------------------------*
0000124C  4281                     296  IS_ODD      CLR.L   D1                      * Clear the result
0000124E  4287                     297              CLR.L   D7                      * Set the error flag to 0
00001250  2211                     298              MOVE.L  (A1),D1                * Temp store the checking address to D1
00001252  82FC 0002                299              DIVU    #2, D1                  * Divide the result by 2
00001256  4841                     300              SWAP    D1                      * Swap remainder with quotient
00001258  0C01 0001                301              CMPI.B  #1, D1                  * Check for error
0000125C  6700 0004                302              BEQ     IS_ODD_ERR
00001260  4E75                     303              RTS
00001262                           304              
00001262  1E3C 0001                305  IS_ODD_ERR  MOVE.B  #1, D7
00001266  4E75                     306              RTS
00001268                           307  
00001268                           308  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*
00001268                           309  * MAIN                    
00001268                           310  * A2: STACK POINTER                                                      MAIN                                                                        MAIN
00001268                           311  * A5: Processing address
00001268                           312  *
00001268                           313  * D3: USED FOR PUSHING INTO STACK
00001268                           314  *     To push into stack => MOVE.W #DATA,D3 
00001268                           315  *                           BSR    PUSH_STACK
00001268                           316  *     To print stack     => BSR    PRINT_STACK 
00001268                           317  *     To clear stack     => BSR    CLEAR_STACK
00001268                           318  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*  
00001268                           319  MAIN        
00001268                           320              *initialize stack pointer
00001268  33FC 0000 00003976       321              MOVE.W  #0,COUNTER
00001270  347C 7000                322              MOVEA.W #STACK,A2
00001274  163C 0020                323              MOVE.B  #' ',D3
00001278  6100 1DDA                324              BSR     PUSH_STACK
0000127C  6100 1DD6                325              BSR     PUSH_STACK
00001280  6100 1DD2                326              BSR     PUSH_STACK
00001284                           327              
00001284                           328              * clear registers for temp storage
00001284  4280                     329              CLR.L   D0                   
00001286  4281                     330              CLR.L   D1                   
00001288  227C 00000000            331              MOVEA.L #0, A1                
0000128E                           332              
0000128E  220D                     333              MOVE.L  A5,D1                   * check to see if the address is fully read
00001290  23CD 000035BE            334              MOVE.L  A5,S_ADDR_HX
00001296  B2B9 000035C2            335              CMP.L   E_ADDR_HX,D1
0000129C  6C00 14D6                336              BGE     REPEAT                  * go to repeat for user action
000012A0                           337  
000012A0  43F9 00003619            338              LEA     TMPOUTPUT,A1            * allocate storage to hold output
000012A6  143C 0008                339              MOVE.B  #8,D2                   * set the output size
000012AA  4EB8 11C6                340              JSR     HEX2ASCII               
000012AE  43F9 00003619            341              LEA     TMPOUTPUT,A1
000012B4  103C 000E                342              MOVE.B  #14,D0
000012B8  4E4F                     343              TRAP    #15
000012BA                           344              
000012BA  4285                     345              CLR.L    D5                      * clear the processing data
000012BC  3A1D                     346              MOVE.W  (A5)+,D5                 * copy the currently processing data in A5 over to D5
000012BE                           347                                               * advance the current instruction pointer to the next
000012BE                           348                                               * instruction in memory
000012BE                           349  *----------------------------------------*
000012BE                           350  * Registers          
000012BE                           351  * [D1] - COPY OF D5
000012BE                           352  * [D5] - DATA TO BE PROCESSED
000012BE                           353  * [D6] - COUNTER FOR LINES PROCESSED
000012BE                           354  *
000012BE                           355  * [D4]      - ERROR FLAG BEFORE PRINTING
000012BE                           356  * [STACK]   - PRINTS PROCESS DATA
000012BE                           357  * [COUNTER] - KEEPS TRACK OF STACK INCREMENT
000012BE                           358  *
000012BE                           359  * [A1] - USED FOR JUMPING/PRINTING
000012BE                           360  *
000012BE                           361  *----------------------------------------*
000012BE                           362  
000012BE                           363              
000012BE                           364              *Processing the first 4 most significant bits 
000012BE  2205                     365              MOVE.L  D5,D1                    * copy the current processing data to D1
000012C0  143C 000C                366              MOVE.B  #12,D2                   * shift to right by 12 bits
000012C4  E469                     367              LSR.W   D2,D1                    * [D2] Temporarily used D2 for shifting bits
000012C6  C2FC 0006                368              MULU    #6,D1                    * form offset
000012CA  43F9 00001338            369              LEA     JMPTABLE,A1              * index into table
000012D0  4EB1 1000                370              JSR     0(A1,D1)                 * jump indirect with index
000012D4                           371              
000012D4                           372              *SECURED EA*
000012D4  B83C 0001                373              CMP.B   #1,D4                    * ERROR FLAG CHECK [ERROR WHEN D4 == 1]
000012D8  6600 0012                374              BNE     OUTPUT_PROCESSED_DATA    * PRINTS PROCESSED OP-CODE & EA
000012DC  6100 01E8                375              BSR     OP_DATA                  * PRINT ERROR MESSAGE "DATA"
000012E0  6100 1DDE                376              BSR     CLEAR_STACK              * CLEARS THE STACK 
000012E4  183C 0000                377              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
000012E8  6000 0022                378              BRA     DISPLAY_30_LINES         * GO TO LAST STEP
000012EC                           379             
000012EC                           380  OUTPUT_PROCESSED_DATA       
000012EC  163C 000D                381              MOVE.B  #$D,D3                  *carriage return
000012F0  6100 1D62                382              BSR     PUSH_STACK
000012F4  163C 000A                383              MOVE.B  #$A,D3                  *new line feed
000012F8  6100 1D5A                384              BSR     PUSH_STACK
000012FC  163C 0000                385              MOVE.B  #$0,D3                  *null
00001300  6100 1D52                386              BSR     PUSH_STACK
00001304                           387       
00001304  6100 1D2A                388              BSR     PRINT_QUEUE
00001308  183C 0000                389              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
0000130C                           390  DISPLAY_30_LINES
0000130C                           391              * display 30 lines per page
0000130C  5206                     392              ADDI.B  #1,D6
0000130E  0C06 001E                393              CMPI.B  #30,D6
00001312  6C00 0006                394              BGE     NEXTLINES
00001316  6000 FF50                395              BRA     MAIN
0000131A                           396            
0000131A                           397  *---------------------------------------------------------------------------*
0000131A                           398  * NEXTLINES: receive input from user to print the next 30 lines
0000131A                           399  *---------------------------------------------------------------------------*  
0000131A  4206                     400  NEXTLINES   CLR.B   D6
0000131C  43F9 00003415            401              LEA     DISP_NEXT,A1
00001322  103C 000E                402              MOVE.B  #14,D0
00001326  4E4F                     403              TRAP    #15
00001328  43F9 000035C9            404              LEA     TMPINPUT,A1
0000132E  103C 0002                405              MOVE.B  #2,D0
00001332  4E4F                     406              TRAP    #15
00001334  4EF8 1268                407              JMP     MAIN
00001338                           408    
00001338                           409  *---------------------------------------------------------------------------*
00001338                           410  * JMPTABLE: OP code jump/branch table used to decode and display opcodes
00001338                           411  *---------------------------------------------------------------------------*  
00001338  4EF9 00001398            412  JMPTABLE    JMP     OP0000  * CMPI/ORI/BTST/EORI/SUBI/BTST
0000133E  4EF9 000015BE            413              JMP     OP0001  * MOVE.B                                        *WORKING ON - JOSEPH
00001344  4EF9 0000162C            414              JMP     OP0010  * MOVE.L/MOVEA.L
0000134A  4EF9 0000172A            415              JMP     OP0011  * MOVE.W/MOVEA.W
00001350  4EF9 00001826            416              JMP     OP0100  * MOVEM/LEA/NEG/NOT/JSR/RTS
00001356  4EF9 000019C0            417              JMP     OP0101  * ADDQ
0000135C  4EF9 00001A3C            418              JMP     OP0110  * BRA/Bcc (BEQ/BNE/BLT/BHI)
00001362  4EF9 00001ACA            419              JMP     OP0111  * MOVEQ (unassigned)
00001368  4EF9 00001ACE            420              JMP     OP1000  * DIVS
0000136E  4EF9 00001B0A            421              JMP     OP1001  * SUB/SUBA
00001374  4EF9 00001BE2            422              JMP     OP1010  * Unassigned 
0000137A  4EF9 00001BE6            423              JMP     OP1011  * CMP/EOR/CMPA
00001380  4EF9 00001CE2            424              JMP     OP1100  * MULS/AND
00001386  4EF9 00001D7E            425              JMP     OP1101  * ADD/ADDA
0000138C  4EF9 00002054            426              JMP     OP1110  * LSR/LSL/ASR/ASL/ROL/ROR
00001392  4EF9 00002302            427              JMP     OP1111  * Special/Reserved
00001398                           428              
00001398                           429  *---------------------------------------------------------------------------*
00001398                           430  * OP0000: decode CMPI/ORI/BTST/SUBI/EORI
00001398                           431  *---------------------------------------------------------------------------*           
00001398                           432  OP0000                                                                                  
00001398  4281                     433              CLR.L   D1          * to temporarily store the address to process
0000139A  4280                     434              CLR.L   D0  
0000139C  4284                     435              CLR.L   D4                 
0000139E  227C 00000000            436              MOVEA.L #0, A1                
000013A4                           437              * Check for ORI (0000 0000 xx (size) xxx (EA mode) xxx(EA reg)
000013A4                           438              * Check if bit 11,10,9,8 are 0000)
000013A4  2205                     439              MOVE.L  D5,D1
000013A6  0281 00000F00            440              ANDI.L  #$0F00,D1
000013AC  0C81 00000000            441              CMPI.L  #$0000,D1   * if they are 0000, it is ORI
000013B2  6700 01B4                442              BEQ     OP_ORI
000013B6                           443  
000013B6                           444              * check for CMPI (0000 1100 xx (size) xxx (EA mode) xxx (EA reg)
000013B6                           445              * check if bit 11,10,9,8 are 1100
000013B6  4281                     446              CLR.L   D1
000013B8  2205                     447              MOVE.L  D5,D1
000013BA  0281 00000F00            448              ANDI.L  #$0F00,D1
000013C0  0C81 00000C00            449              CMPI.L  #$0C00,D1
000013C6  6700 014A                450              BEQ     OP_CMPI
000013CA                           451              
000013CA                           452              * check for SUBI
000013CA  4281                     453              CLR.L   D1
000013CC  2205                     454              MOVE.L  D5,D1
000013CE  0281 00000F00            455              ANDI.L  #$0F00,D1
000013D4  0C81 00000400            456              CMPI.L  #$0400,D1
000013DA  6700 0094                457              BEQ     OP_SUBI
000013DE                           458              
000013DE                           459              * check for EORI
000013DE  4281                     460              CLR.L   D1
000013E0  2205                     461              MOVE.L  D5,D1
000013E2  0281 00000F00            462              ANDI.L  #$0F00,D1
000013E8  0C81 00000A00            463              CMPI.L  #$0A00,D1
000013EE  6700 002A                464              BEQ     OP_EORI
000013F2                           465              
000013F2                           466              * check for BTST
000013F2  4281                     467              CLR.L   D1
000013F4  2205                     468              MOVE.L  D5,D1
000013F6  EA99                     469              ROR.L   #5,D1
000013F8  0281 00000008            470              ANDI.L  #$8,D1
000013FE  0C01 0008                471              CMPI.B  #8,D1
00001402  6700 0008                472              BEQ     OP_BTST
00001406                           473  
00001406                           474              * OP0000 series other than ORI/CMPI/BTST/EORI
00001406  4EF9 000014C6            475              JMP     OP_DATA
0000140C                           476              
0000140C                           477  *---------------------------------------------------------------------------*
0000140C                           478  * OP_BTST: display BTST
0000140C                           479  *---------------------------------------------------------------------------* 
0000140C  43F9 000036A2            480  OP_BTST     LEA     DISP_BTST,A1
00001412  103C 000E                481              MOVE.B  #14,D0
00001416  4E4F                     482              TRAP    #15
00001418  4E75                     483              RTS
0000141A                           484  
0000141A                           485  *---------------------------------------------------------------------------*
0000141A                           486  * OP_EORI: decode and display EORI
0000141A                           487  *---------------------------------------------------------------------------* 
0000141A                           488  OP_EORI
0000141A  4281                     489              CLR.L   D1
0000141C  4284                     490              CLR.L   D4
0000141E  2205                     491              MOVE.L  D5,D1
00001420  EC99                     492              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001422  0C01 0000                493              CMPI.B  #0,D1
00001426  6700 0012                494              BEQ     OP_EORI_B    * size is byte
0000142A  0C01 0001                495              CMPI.B  #1,D1
0000142E  6700 001C                496              BEQ     OP_EORI_W    * size is word
00001432  0C01 0002                497              CMPI.B  #2,D1
00001436  6700 0026                498              BEQ     OP_EORI_L    * size is long
0000143A                           499  
0000143A                           500  OP_EORI_B    * size is byte    
0000143A  183C 0000                501              MOVE.B  #0,D4
0000143E  43F9 00003684            502              LEA     DISP_EORI_B,A1
00001444  103C 000E                503              MOVE.B  #14,D0
00001448  4E4F                     504              TRAP    #15
0000144A  4E75                     505              RTS
0000144C                           506              
0000144C                           507  OP_EORI_W    * size is word
0000144C  183C 0001                508              MOVE.B  #1,D4
00001450  43F9 0000368E            509              LEA     DISP_EORI_W,A1
00001456  103C 000E                510              MOVE.B  #14,D0
0000145A  4E4F                     511              TRAP    #15
0000145C  4E75                     512              RTS
0000145E                           513              
0000145E                           514  OP_EORI_L    * size is long
0000145E  183C 0002                515              MOVE.B  #2,D4
00001462  43F9 00003698            516              LEA     DISP_EORI_L,A1
00001468  103C 000E                517              MOVE.B  #14,D0
0000146C  4E4F                     518              TRAP    #15
0000146E  4E75                     519              RTS
00001470                           520              
00001470                           521  *---------------------------------------------------------------------------*
00001470                           522  * OP_SUBI: decode SUBI.B/.W/.L
00001470                           523  *---------------------------------------------------------------------------* 
00001470                           524  OP_SUBI
00001470  4281                     525              CLR.L   D1
00001472  4284                     526              CLR.L   D4
00001474  2205                     527              MOVE.L  D5,D1
00001476  EC99                     528              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001478  0C01 0000                529              CMPI.B  #0,D1
0000147C  6700 0012                530              BEQ     OP_SUBI_B    * size is byte
00001480  0C01 0001                531              CMPI.B  #1,D1
00001484  6700 001C                532              BEQ     OP_SUBI_W    * size is word
00001488  0C01 0002                533              CMPI.B  #2,D1
0000148C  6700 0026                534              BEQ     OP_SUBI_L    * size is long
00001490                           535  
00001490                           536  OP_SUBI_B    * size is byte    
00001490  183C 0000                537              MOVE.B  #0,D4
00001494  43F9 00003790            538              LEA     DISP_SUBI_B,A1
0000149A  103C 000E                539              MOVE.B  #14,D0
0000149E  4E4F                     540              TRAP    #15
000014A0  4E75                     541              RTS
000014A2                           542              
000014A2                           543  OP_SUBI_W    * size is word
000014A2  183C 0001                544              MOVE.B  #1,D4
000014A6  43F9 0000379A            545              LEA     DISP_SUBI_W,A1
000014AC  103C 000E                546              MOVE.B  #14,D0
000014B0  4E4F                     547              TRAP    #15
000014B2  4E75                     548              RTS
000014B4                           549              
000014B4                           550  OP_SUBI_L    * size is long
000014B4  183C 0002                551              MOVE.B  #2,D4
000014B8  43F9 000037A4            552              LEA     DISP_SUBI_L,A1
000014BE  103C 000E                553              MOVE.B  #14,D0
000014C2  4E4F                     554              TRAP    #15
000014C4  4E75                     555              RTS
000014C6                           556              
000014C6                           557  *---------------------------------------------------------------------------*
000014C6                           558  * OP_DATA : unidentified opcode
000014C6                           559  *---------------------------------------------------------------------------* 
000014C6                           560  OP_DATA
000014C6  4280                     561              CLR.L   D0                   
000014C8  4281                     562              CLR.L   D1     
000014CA  4284                     563              CLR.L   D4                    
000014CC  227C 00000000            564              MOVEA.L #0, A1             
000014D2  4287                     565              CLR.L   D7
000014D4  1E3C 0001                566              MOVE.B  #1,D7                   * error flag is true
000014D8                           567              
000014D8  43F9 000036C8            568              LEA     DISP_DATA,A1
000014DE  103C 000E                569              MOVE.B  #14,D0
000014E2  4E4F                     570              TRAP    #15
000014E4                           571              
000014E4  4EF9 000014EA            572              JMP     EA_DATA
000014EA                           573             
000014EA                           574             
000014EA                           575  *---------------------------------------------------------------------------*
000014EA                           576  * EA_DATA
000014EA                           577  *---------------------------------------------------------------------------*       
000014EA  43F9 00003619            578  EA_DATA     LEA     TMPOUTPUT,A1    * load the temporarily stored output address
000014F0  2205                     579              MOVE.L  D5,D1           * transfer the processing data to D1
000014F2  7404                     580              MOVE.L  #4,D2           * set to word size
000014F4  4EB8 11C6                581              JSR     HEX2ASCII       * prepare output in ascii
000014F8  43F9 0000393B            582              LEA     DISP_HEX,A1     * display $ symbol
000014FE  103C 000E                583              MOVE.B  #14,D0      
00001502  4E4F                     584              TRAP    #15
00001504  43F9 00003619            585              LEA     TMPOUTPUT,A1    * display with a new line
0000150A  103C 000D                586              MOVE.B  #13,D0
0000150E  4E4F                     587              TRAP    #15
00001510                           588  
00001510  4E75                     589              RTS
00001512                           590              
00001512                           591  *---------------------------------------------------------------------------*
00001512                           592  * OP_CMPI : decode CMPI and its size
00001512                           593  *---------------------------------------------------------------------------*          
00001512                           594  OP_CMPI
00001512  4281                     595              CLR.L   D1
00001514  4284                     596              CLR.L   D4
00001516  2205                     597              MOVE.L  D5,D1
00001518  EC99                     598              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
0000151A  0C01 0000                599              CMPI.B  #0,D1
0000151E  6700 0012                600              BEQ     OP_CMPI_B    * size is byte
00001522  0C01 0001                601              CMPI.B  #1,D1
00001526  6700 001C                602              BEQ     OP_CMPI_W    * size is word
0000152A  0C01 0002                603              CMPI.B  #2,D1
0000152E  6700 0026                604              BEQ     OP_CMPI_L    * size is long
00001532                           605  
00001532                           606  OP_CMPI_B    * size is byte    
00001532  183C 0000                607              MOVE.B  #0,D4
00001536  43F9 000036AA            608              LEA     DISP_CMPI_B,A1
0000153C  103C 000E                609              MOVE.B  #14,D0
00001540  4E4F                     610              TRAP    #15
00001542  4E75                     611              RTS
00001544                           612              
00001544                           613  OP_CMPI_W    * size is word
00001544  183C 0001                614              MOVE.B  #1,D4
00001548  43F9 000036B4            615              LEA     DISP_CMPI_W,A1
0000154E  103C 000E                616              MOVE.B  #14,D0
00001552  4E4F                     617              TRAP    #15
00001554  4E75                     618              RTS
00001556                           619              
00001556                           620  OP_CMPI_L    * size is long
00001556  183C 0002                621              MOVE.B  #2,D4
0000155A  43F9 000036BE            622              LEA     DISP_CMPI_L,A1
00001560  103C 000E                623              MOVE.B  #14,D0
00001564  4E4F                     624              TRAP    #15
00001566  4E75                     625              RTS
00001568                           626   
00001568                           627  *---------------------------------------------------------------------------*
00001568                           628  * OP_ORI : decode ORI and its size
00001568                           629  *---------------------------------------------------------------------------* 
00001568                           630  OP_ORI      
00001568  4281                     631              CLR.L   D1
0000156A  4284                     632              CLR.L   D4
0000156C  2205                     633              MOVE.L  D5,D1
0000156E  EC99                     634              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001570  0C01 0000                635              CMPI.B  #0,D1
00001574  6700 0012                636              BEQ     OP_ORI_B    * size is byte
00001578  0C01 0001                637              CMPI.B  #1,D1
0000157C  6700 001C                638              BEQ     OP_ORI_W    * size is word
00001580  0C01 0002                639              CMPI.B  #2,D1
00001584  6700 0026                640              BEQ     OP_ORI_L    * size is long
00001588                           641  
00001588                           642  OP_ORI_B    * size is byte    
00001588  183C 0000                643              MOVE.B  #0,D4
0000158C  43F9 00003669            644              LEA     DISP_ORI_B,A1
00001592  103C 000E                645              MOVE.B  #14,D0
00001596  4E4F                     646              TRAP    #15
00001598  4E75                     647              RTS
0000159A                           648              
0000159A                           649  OP_ORI_W    * size is word
0000159A  183C 0001                650              MOVE.B  #1,D4
0000159E  43F9 00003672            651              LEA     DISP_ORI_W,A1
000015A4  103C 000E                652              MOVE.B  #14,D0
000015A8  4E4F                     653              TRAP    #15
000015AA  4E75                     654              RTS
000015AC                           655              
000015AC                           656  OP_ORI_L    * size is long
000015AC  183C 0002                657              MOVE.B  #2,D4
000015B0  43F9 0000367B            658              LEA     DISP_ORI_L,A1
000015B6  103C 000E                659              MOVE.B  #14,D0
000015BA  4E4F                     660              TRAP    #15
000015BC  4E75                     661              RTS
000015BE                           662          
000015BE                           663  *---------------------------------------------------------------------------*
000015BE                           664  * OP0001: MOVE.B
000015BE                           665  *---------------------------------------------------------------------------*
000015BE                           666  OP0001      
000015BE  4EF9 000015C4            667              JMP     OP_MOVE_B   * display MOVE.B
000015C4                           668              
000015C4                           669  *---------------------------------------------------------------------------*
000015C4                           670  * OP_MOVE_B: display MOVE_B and proceed to EA
000015C4                           671  *---------------------------------------------------------------------------*
000015C4                           672  OP_MOVE_B                                                                       
000015C4                           673             
000015C4                           674             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000015C4  13FC 0082 0000397A       675             MOVE.B   #$82,DEST_REGISTER_FORMAT
000015CC  13FC 0000 0000397B       676             MOVE.B   #$00,SRC_REGISTER_FORMAT
000015D4                           677             
000015D4                           678             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000015D4  13FC 00B9 0000397D       679             MOVE.B   #$B9,GET_DST_START_END
000015DC  13FC 0020 0000397E       680             MOVE.B   #$20,GET_SRC_START_END
000015E4                           681             
000015E4                           682              *CLEAR D3
000015E4  4283                     683              CLR.L   D3
000015E6                           684              *LOAD STACK WITH THIS OPMODE
000015E6  6100 1A6C                685              BSR     PUSH_STACK
000015EA  163C 004D                686              MOVE.B  #'M',D3
000015EE  6100 1A64                687              BSR     PUSH_STACK
000015F2  163C 004F                688              MOVE.B  #'O',D3
000015F6  6100 1A5C                689              BSR     PUSH_STACK
000015FA  163C 0056                690              MOVE.B  #'V',D3
000015FE  6100 1A54                691              BSR     PUSH_STACK
00001602  163C 0045                692              MOVE.B  #'E',D3
00001606  6100 1A4C                693              BSR     PUSH_STACK
0000160A  163C 002E                694              MOVE.B  #'.',D3
0000160E  6100 1A44                695              BSR     PUSH_STACK
00001612  163C 0042                696              MOVE.B  #'B',D3
00001616  6100 1A3C                697              BSR     PUSH_STACK
0000161A                           698              
0000161A  6100 119A                699              BSR     GET_EA_EA_SRC
0000161E  163C 002C                700              MOVE.B  #',',D3
00001622  6100 1A30                701              BSR     PUSH_STACK
00001626  6100 15BE                702              BSR     GET_EA_EA_DEST
0000162A                           703              
0000162A  4E75                     704              RTS
0000162C                           705              
0000162C                           706             
0000162C                           707  *---------------------------------------------------------------------------*
0000162C                           708  * OP0010: decode MOVE.L/MOVEA.L
0000162C                           709  *---------------------------------------------------------------------------*
0000162C                           710  OP0010      
0000162C  183C 0002                711              MOVE.B  #2,D4
00001630  4280                     712              CLR.L   D0                     
00001632  4281                     713              CLR.L   D1                      
00001634  227C 00000000            714              MOVEA.L #0, A1                 
0000163A                           715              
0000163A  2205                     716              MOVE.L  D5,D1
0000163C  EA99                     717              ROR.L   #5,D1
0000163E  0281 0000000E            718              ANDI.L  #$E,D1
00001644  0C01 0002                719              CMPI.B  #2,D1
00001648  6700 0070                720              BEQ     OP_MOVEA_L
0000164C                           721  
0000164C  4EF9 00001652            722              JMP     OP_MOVE_L
00001652                           723             
00001652                           724  
00001652                           725  *---------------------------------------------------------------------------*
00001652                           726  * OP_MOVE_L: display MOVE_L and proceed to EA
00001652                           727  *---------------------------------------------------------------------------*
00001652                           728  OP_MOVE_L   
00001652                           729             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001652  13FC 0082 0000397A       730             MOVE.B   #$82,DEST_REGISTER_FORMAT
0000165A  13FC 0000 0000397B       731             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001662                           732             
00001662                           733             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001662  13FC 00B9 0000397D       734             MOVE.B   #$B9,GET_DST_START_END
0000166A  13FC 0020 0000397E       735             MOVE.B   #$20,GET_SRC_START_END
00001672                           736             
00001672                           737              *CLEAR D3
00001672  4283                     738              CLR.L   D3
00001674                           739              *LOAD STACK WITH THIS OPMODE
00001674  6100 19DE                740              BSR     PUSH_STACK
00001678  163C 004D                741              MOVE.B  #'M',D3
0000167C  6100 19D6                742              BSR     PUSH_STACK
00001680  163C 004F                743              MOVE.B  #'O',D3
00001684  6100 19CE                744              BSR     PUSH_STACK
00001688  163C 0056                745              MOVE.B  #'V',D3
0000168C  6100 19C6                746              BSR     PUSH_STACK
00001690  163C 0045                747              MOVE.B  #'E',D3
00001694  6100 19BE                748              BSR     PUSH_STACK
00001698  163C 002E                749              MOVE.B  #'.',D3
0000169C  6100 19B6                750              BSR     PUSH_STACK
000016A0  163C 004C                751              MOVE.B  #'L',D3
000016A4  6100 19AE                752              BSR     PUSH_STACK
000016A8                           753              
000016A8  6100 110C                754              BSR     GET_EA_EA_SRC
000016AC  163C 002C                755              MOVE.B  #',',D3
000016B0  6100 19A2                756              BSR     PUSH_STACK
000016B4  6100 1530                757              BSR     GET_EA_EA_DEST
000016B8                           758              
000016B8  4E75                     759              RTS
000016BA                           760  
000016BA                           761  
000016BA                           762  *---------------------------------------------------------------------------*
000016BA                           763  * OP_MOVEA_L: display MOVEA_L and proceed to EA
000016BA                           764  *---------------------------------------------------------------------------*
000016BA                           765  OP_MOVEA_L 
000016BA                           766             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000016BA  13FC 00FD 0000397A       767             MOVE.B   #$FD,DEST_REGISTER_FORMAT
000016C2  13FC 0000 0000397B       768             MOVE.B   #$00,SRC_REGISTER_FORMAT
000016CA                           769             
000016CA                           770             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000016CA  13FC 00B9 0000397D       771             MOVE.B   #$B9,GET_DST_START_END
000016D2  13FC 0020 0000397E       772             MOVE.B   #$20,GET_SRC_START_END
000016DA                           773             
000016DA                           774              *CLEAR D3
000016DA  4283                     775              CLR.L   D3
000016DC                           776              *LOAD STACK WITH THIS OPMODE
000016DC  6100 1976                777              BSR     PUSH_STACK
000016E0  163C 004D                778              MOVE.B  #'M',D3
000016E4  6100 196E                779              BSR     PUSH_STACK
000016E8  163C 004F                780              MOVE.B  #'O',D3
000016EC  6100 1966                781              BSR     PUSH_STACK
000016F0  163C 0056                782              MOVE.B  #'V',D3
000016F4  6100 195E                783              BSR     PUSH_STACK
000016F8  163C 0045                784              MOVE.B  #'E',D3
000016FC  6100 1956                785              BSR     PUSH_STACK           
00001700  163C 0041                786              MOVE.B  #'A',D3
00001704  6100 194E                787              BSR     PUSH_STACK
00001708  163C 002E                788              MOVE.B  #'.',D3
0000170C  6100 1946                789              BSR     PUSH_STACK
00001710  163C 004C                790              MOVE.B  #'L',D3
00001714  6100 193E                791              BSR     PUSH_STACK
00001718                           792              
00001718  6100 109C                793              BSR     GET_EA_EA_SRC
0000171C  163C 002C                794              MOVE.B  #',',D3
00001720  6100 1932                795              BSR     PUSH_STACK
00001724  6100 14C0                796              BSR     GET_EA_EA_DEST
00001728                           797              
00001728  4E75                     798              RTS
0000172A                           799  
0000172A                           800              
0000172A                           801  *---------------------------------------------------------------------------*
0000172A                           802  * OP0011: decode MOVE.W/MOVEA.W
0000172A                           803  *---------------------------------------------------------------------------*
0000172A                           804  OP0011      
0000172A  4280                     805              CLR.L   D0                      
0000172C  4281                     806              CLR.L   D1  
0000172E  4284                     807              CLR.L   D4                   
00001730  227C 00000000            808              MOVEA.L #0, A1 
00001736                           809                
00001736  2205                     810              MOVE.L  D5,D1
00001738  EC99                     811              ROR.L   #6,D1
0000173A  0281 00000007            812              ANDI.L  #$07,D1
00001740  0C01 0001                813              CMPI.B  #1,D1
00001744  6700 0070                814              BEQ     OP_MOVEA_W
00001748                           815              
00001748  4EF9 0000174E            816              JMP     OP_MOVE_W
0000174E                           817            
0000174E                           818  *---------------------------------------------------------------------------*
0000174E                           819  * OP_MOVE_W: display MOVE_W and proceed to EA
0000174E                           820  *---------------------------------------------------------------------------*
0000174E                           821  OP_MOVE_W   
0000174E                           822             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000174E  13FC 0082 0000397A       823             MOVE.B   #$82,DEST_REGISTER_FORMAT
00001756  13FC 0000 0000397B       824             MOVE.B   #$00,SRC_REGISTER_FORMAT
0000175E                           825             
0000175E                           826             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000175E  13FC 00B9 0000397D       827             MOVE.B   #$B9,GET_DST_START_END
00001766  13FC 0020 0000397E       828             MOVE.B   #$20,GET_SRC_START_END
0000176E                           829             
0000176E                           830              *CLEAR D3
0000176E  4283                     831              CLR.L   D3
00001770                           832              *LOAD STACK WITH THIS OPMODE
00001770  6100 18E2                833              BSR     PUSH_STACK
00001774  163C 004D                834              MOVE.B  #'M',D3
00001778  6100 18DA                835              BSR     PUSH_STACK
0000177C  163C 004F                836              MOVE.B  #'O',D3
00001780  6100 18D2                837              BSR     PUSH_STACK
00001784  163C 0056                838              MOVE.B  #'V',D3
00001788  6100 18CA                839              BSR     PUSH_STACK
0000178C  163C 0045                840              MOVE.B  #'E',D3
00001790  6100 18C2                841              BSR     PUSH_STACK
00001794  163C 002E                842              MOVE.B  #'.',D3
00001798  6100 18BA                843              BSR     PUSH_STACK
0000179C  163C 0057                844              MOVE.B  #'W',D3
000017A0  6100 18B2                845              BSR     PUSH_STACK
000017A4                           846              
000017A4  6100 1010                847              BSR     GET_EA_EA_SRC
000017A8  163C 002C                848              MOVE.B  #',',D3
000017AC  6100 18A6                849              BSR     PUSH_STACK
000017B0  6100 1434                850              BSR     GET_EA_EA_DEST
000017B4                           851              
000017B4  4E75                     852              RTS
000017B6                           853  
000017B6                           854  *---------------------------------------------------------------------------*
000017B6                           855  * OP_MOVEA_W: display MOVEA and proceed to EA
000017B6                           856  *---------------------------------------------------------------------------*
000017B6                           857  OP_MOVEA_W 
000017B6                           858             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000017B6  13FC 00FD 0000397A       859             MOVE.B   #$FD,DEST_REGISTER_FORMAT
000017BE  13FC 0000 0000397B       860             MOVE.B   #$00,SRC_REGISTER_FORMAT
000017C6                           861             
000017C6                           862             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000017C6  13FC 00B9 0000397D       863             MOVE.B   #$B9,GET_DST_START_END
000017CE  13FC 0020 0000397E       864             MOVE.B   #$20,GET_SRC_START_END
000017D6                           865             
000017D6                           866              *CLEAR D3
000017D6  4283                     867              CLR.L   D3
000017D8                           868              *LOAD STACK WITH THIS OPMODE
000017D8  6100 187A                869              BSR     PUSH_STACK
000017DC  163C 004D                870              MOVE.B  #'M',D3
000017E0  6100 1872                871              BSR     PUSH_STACK
000017E4  163C 004F                872              MOVE.B  #'O',D3
000017E8  6100 186A                873              BSR     PUSH_STACK
000017EC  163C 0056                874              MOVE.B  #'V',D3
000017F0  6100 1862                875              BSR     PUSH_STACK
000017F4  163C 0045                876              MOVE.B  #'E',D3
000017F8  6100 185A                877              BSR     PUSH_STACK           
000017FC  163C 0041                878              MOVE.B  #'A',D3
00001800  6100 1852                879              BSR     PUSH_STACK
00001804  163C 002E                880              MOVE.B  #'.',D3
00001808  6100 184A                881              BSR     PUSH_STACK
0000180C  163C 0057                882              MOVE.B  #'W',D3
00001810  6100 1842                883              BSR     PUSH_STACK
00001814                           884              
00001814  6100 0FA0                885              BSR     GET_EA_EA_SRC
00001818  163C 002C                886              MOVE.B  #',',D3
0000181C  6100 1836                887              BSR     PUSH_STACK
00001820  6100 13C4                888              BSR     GET_EA_EA_DEST
00001824                           889            
00001824  4E75                     890              RTS
00001826                           891  *---------------------------------------------------------------------------*
00001826                           892  * OP0100: decode MOVEM/LEA/NEG/JSR/RTS/NOT
00001826                           893  *---------------------------------------------------------------------------*
00001826                           894  OP0100
00001826  4280                     895              CLR.L   D0                      
00001828  4281                     896              CLR.L   D1  
0000182A  4284                     897              CLR.L   D4                      
0000182C  227C 00000000            898              MOVEA.L #0, A1                  
00001832  2205                     899              MOVE.L  D5,D1  
00001834                           900              
00001834                           901              * check for RTS
00001834  0C41 4E75                902              CMPI.W  #$4E75,D1   * 0100 1110 0111 0101
00001838  6700 0178                903              BEQ     OP_RTS
0000183C                           904              
0000183C                           905              * check for JSR     * 0100 1110 10 xxx (ea mode) xxx (ea reg)
0000183C  4281                     906              CLR.L   D1 
0000183E  2205                     907              MOVE.L  D5,D1  
00001840  0241 0F00                908              ANDI.W  #$0F00,D1
00001844  0C41 0E00                909              CMPI.W  #$0E00,D1
00001848  6700 0154                910              BEQ     OP_JSR
0000184C                           911  
0000184C                           912              * check for NEG     * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
0000184C  4281                     913              CLR.L   D1 
0000184E  2205                     914              MOVE.L  D5,D1  
00001850  0241 0F00                915              ANDI.W  #$0F00,D1
00001854  0C41 0400                916              CMPI.W  #$0400,D1
00001858  6700 0086                917              BEQ     OP_NEG
0000185C                           918              
0000185C                           919              * check for NOT     * 0100 0110 xx (size) xxx (ea mode) xxx (ea reg)
0000185C  4281                     920              CLR.L   D1 
0000185E  2205                     921              MOVE.L  D5,D1  
00001860  0241 0F00                922              ANDI.W  #$0F00,D1
00001864  0C41 0600                923              CMPI.W  #$0600,D1
00001868  6700 00DE                924              BEQ     OP_NOT
0000186C                           925              
0000186C                           926              * check for LEA     * 0100 xxx (reg) 111 xxx (ea mode) xxx (ea reg)
0000186C  4281                     927              CLR.L   D1 
0000186E  2205                     928              MOVE.L  D5,D1  
00001870  E099                     929              ROR.L   #8,D1
00001872  0C01 0001                930              CMPI.B  #1,D1
00001876  6700 0054                931              BEQ     OP_LEA
0000187A                           932              
0000187A                           933              * check for MOVEM   * 0100 1 x 001 x (size) xxx (ea mode) xxx (ea reg)
0000187A  4281                     934              CLR.L   D1 
0000187C  2205                     935              MOVE.L  D5,D1  
0000187E  EB59                     936              ROL.W   #5,D1
00001880  0C01 0001                937              CMPI.B  #1,D1
00001884  6600 FC40                938              BNE     OP_DATA
00001888  E959                     939              ROL.W   #4,D1
0000188A  0C01 0001                940              CMPI.B  #1,D1
0000188E  6600 FC36                941              BNE     OP_DATA
00001892  E359                     942              ROL.W   #1,D1
00001894  0C01 0000                943              CMPI.B  #0,D1
00001898  6700 000E                944              BEQ     OP_MOVEM_W
0000189C  0C01 0001                945              CMPI.B  #1,D1
000018A0  6700 0018                946              BEQ     OP_MOVEM_L
000018A4  4EF8 14C6                947              JMP     OP_DATA
000018A8                           948  
000018A8                           949  *---------------------------------------------------------------------------*
000018A8                           950  * OP_MOVEM_W: display MOVEM_W
000018A8                           951  *---------------------------------------------------------------------------*    
000018A8                           952  OP_MOVEM_W  
000018A8  183C 0001                953              MOVE.B  #1,D4
000018AC  43F9 00003739            954              LEA     DISP_MOVEM_W,A1
000018B2  103C 000E                955              MOVE.B  #14,D0
000018B6  4E4F                     956              TRAP    #15
000018B8  4E75                     957              RTS
000018BA                           958  
000018BA                           959  *---------------------------------------------------------------------------*
000018BA                           960  * OP_MOVEM_L: display MOVEM_L
000018BA                           961  *---------------------------------------------------------------------------*
000018BA                           962  OP_MOVEM_L  
000018BA  183C 0002                963              MOVE.B  #2,D4
000018BE  43F9 00003744            964              LEA     DISP_MOVEM_L,A1
000018C4  103C 000E                965              MOVE.B  #14,D0
000018C8  4E4F                     966              TRAP    #15
000018CA  4E75                     967              RTS
000018CC                           968     
000018CC                           969  *---------------------------------------------------------------------------*
000018CC                           970  * OP_LEA: decode and display LEA
000018CC                           971  *---------------------------------------------------------------------------*
000018CC                           972  OP_LEA      
000018CC  43F9 00003732            973              LEA     DISP_LEA,A1
000018D2  103C 000E                974              MOVE.B  #14,D0
000018D6  4E4F                     975              TRAP    #15
000018D8  4EF9 00002340            976              JMP     EA_MOVEA
000018DE                           977  
000018DE  4E75                     978              RTS
000018E0                           979  
000018E0                           980  *---------------------------------------------------------------------------*
000018E0                           981  * OP_NEG: decode and display NEG 
000018E0                           982  *---------------------------------------------------------------------------*
000018E0                           983  OP_NEG      * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
000018E0  4281                     984              CLR.L   D1
000018E2  4284                     985              CLR.L   D4
000018E4  2205                     986              MOVE.L  D5,D1
000018E6  EC99                     987              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000018E8  0C01 0000                988              CMPI.B  #0,D1
000018EC  6700 0012                989              BEQ     OP_NEG_B    * size is byte
000018F0  0C01 0001                990              CMPI.B  #1,D1
000018F4  6700 0022                991              BEQ     OP_NEG_W    * size is word
000018F8  0C01 0002                992              CMPI.B  #2,D1
000018FC  6700 0032                993              BEQ     OP_NEG_L    * size is long
00001900                           994                         
00001900                           995  OP_NEG_B    * size is byte   
00001900  183C 0000                996              MOVE.B  #0,D4 
00001904  43F9 000036FC            997              LEA     DISP_NEG_B,A1
0000190A  103C 000E                998              MOVE.B  #14,D0
0000190E  4E4F                     999              TRAP    #15
00001910                          1000              
00001910  4EB9 00002306           1001              JSR     EA_NOSRC
00001916  4E75                    1002              RTS
00001918                          1003              
00001918                          1004  OP_NEG_W    * size is word
00001918  183C 0001               1005              MOVE.B  #1,D4
0000191C  43F9 00003705           1006              LEA     DISP_NEG_W,A1
00001922  103C 000E               1007              MOVE.B  #14,D0
00001926  4E4F                    1008              TRAP    #15
00001928  4EB9 00002306           1009              JSR     EA_NOSRC
0000192E  4E75                    1010              RTS
00001930                          1011              
00001930                          1012  OP_NEG_L    * size is long
00001930  183C 0002               1013              MOVE.B  #2,D4
00001934  43F9 0000370E           1014              LEA     DISP_NEG_L,A1
0000193A  103C 000E               1015              MOVE.B  #14,D0
0000193E  4E4F                    1016              TRAP    #15
00001940  4EB9 00002306           1017              JSR     EA_NOSRC
00001946                          1018              
00001946  4E75                    1019              RTS
00001948                          1020  
00001948                          1021  *---------------------------------------------------------------------------*
00001948                          1022  * OP_NOT: decode and display NOT 
00001948                          1023  *---------------------------------------------------------------------------*
00001948                          1024  OP_NOT
00001948  4281                    1025              CLR.L   D1
0000194A  4284                    1026              CLR.L   D4
0000194C  2205                    1027              MOVE.L  D5,D1
0000194E  EC99                    1028              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001950  0C01 0000               1029              CMPI.B  #0,D1
00001954  6700 0012               1030              BEQ     OP_NOT_B    * size is byte
00001958  0C01 0001               1031              CMPI.B  #1,D1
0000195C  6700 001C               1032              BEQ     OP_NOT_W    * size is word
00001960  0C01 0002               1033              CMPI.B  #2,D1
00001964  6700 0026               1034              BEQ     OP_NOT_L    * size is long
00001968                          1035                         
00001968                          1036  OP_NOT_B    * size is byte   
00001968  183C 0000               1037              MOVE.B  #0,D4 
0000196C  43F9 00003717           1038              LEA     DISP_NOT_B,A1
00001972  103C 000E               1039              MOVE.B  #14,D0
00001976  4E4F                    1040              TRAP    #15
00001978  4E75                    1041              RTS
0000197A                          1042              
0000197A                          1043  OP_NOT_W    * size is word
0000197A  183C 0001               1044              MOVE.B  #1,D4
0000197E  43F9 00003720           1045              LEA     DISP_NOT_W,A1
00001984  103C 000E               1046              MOVE.B  #14,D0
00001988  4E4F                    1047              TRAP    #15
0000198A  4E75                    1048              RTS
0000198C                          1049              
0000198C                          1050  OP_NOT_L    * size is long
0000198C  183C 0002               1051              MOVE.B  #2,D4
00001990  43F9 00003729           1052              LEA     DISP_NOT_L,A1
00001996  103C 000E               1053              MOVE.B  #14,D0
0000199A  4E4F                    1054              TRAP    #15
0000199C  4E75                    1055              RTS
0000199E                          1056  
0000199E                          1057  *---------------------------------------------------------------------------*
0000199E                          1058  * OP_JSR: display JSR     
0000199E                          1059  *---------------------------------------------------------------------------*
0000199E  43F9 000036F5           1060  OP_JSR      LEA     DISP_JSR,A1
000019A4  103C 000E               1061              MOVE.B  #14,D0
000019A8  4E4F                    1062              TRAP    #15
000019AA  4EB9 00002306           1063              JSR     EA_NOSRC
000019B0                          1064  
000019B0  4E75                    1065              RTS
000019B2                          1066  
000019B2                          1067  *---------------------------------------------------------------------------*
000019B2                          1068  * OP_RTS: display RTS     
000019B2                          1069  *---------------------------------------------------------------------------* 
000019B2  43F9 000036EE           1070  OP_RTS      LEA     DISP_RTS,A1
000019B8  103C 000E               1071              MOVE.B  #14,D0
000019BC  4E4F                    1072              TRAP    #15
000019BE  4E75                    1073              RTS
000019C0                          1074  
000019C0                          1075  *---------------------------------------------------------------------------*
000019C0                          1076  * OP0101: decode ADDQ
000019C0                          1077  *---------------------------------------------------------------------------* 
000019C0  4280                    1078  OP0101      CLR.L   D0               * clear registers for temp storage       
000019C2  4281                    1079              CLR.L   D1
000019C4  4284                    1080              CLR.L   D4                  
000019C6  227C 00000000           1081              MOVEA.L #0, A1  
000019CC                          1082              
000019CC  2205                    1083              MOVE.L  D5,D1           * copy the processing data 
000019CE  E089                    1084              LSR.L   #8,D1           * shift to right by 8 bits to check the value of bit 8
000019D0  0201 0001               1085              ANDI.B  #$1,D1          * mask all bits except the last 2 bits
000019D4  0C01 0000               1086              CMPI.B  #0,D1           * if the value is 0, it's ADDQ
000019D8  6700 0006               1087              BEQ     OP_ADDQ
000019DC                          1088              
000019DC  4EF8 14C6               1089              JMP     OP_DATA
000019E0                          1090       
000019E0  4281                    1091  OP_ADDQ     CLR.L   D1
000019E2  2205                    1092              MOVE.L  D5,D1
000019E4  EC99                    1093              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000019E6  0281 00000003           1094              ANDI.L  #$3,D1
000019EC  0C01 0000               1095              CMPI.B  #0,D1
000019F0  6700 0014               1096              BEQ     OP_ADDQ_B    * size is byte
000019F4  0C41 0001               1097              CMPI.W  #1,D1
000019F8  6700 001E               1098              BEQ     OP_ADDQ_W    * size is word
000019FC  0C81 00000002           1099              CMPI.L  #2,D1
00001A02  6700 0026               1100              BEQ     OP_ADDQ_L    * size is long
00001A06                          1101              
00001A06                          1102  *---------------------------------------------------------------------------*
00001A06                          1103  * OP_ADDQ: display ADDQ
00001A06                          1104  *---------------------------------------------------------------------------*              
00001A06                          1105  OP_ADDQ_B    * size is byte   
00001A06  183C 0000               1106              MOVE.B  #0,D4 
00001A0A  43F9 0000374F           1107              LEA     DISP_ADDQ_B,A1
00001A10  103C 000E               1108              MOVE.B  #14,D0
00001A14  4E4F                    1109              TRAP    #15
00001A16  4E75                    1110              RTS
00001A18                          1111              
00001A18                          1112  OP_ADDQ_W    * size is word
00001A18  183C 0001               1113              MOVE.B  #1,D4
00001A1C  43F9 00003759           1114              LEA     DISP_ADDQ_W,A1
00001A22  103C 000E               1115              MOVE.B  #14,D0
00001A26  4E4F                    1116              TRAP    #15
00001A28  4E75                    1117              RTS
00001A2A                          1118              
00001A2A                          1119  OP_ADDQ_L    * size is long
00001A2A  183C 0002               1120              MOVE.B  #2,D4
00001A2E  43F9 00003763           1121              LEA     DISP_ADDQ_L,A1
00001A34  103C 000E               1122              MOVE.B  #14,D0
00001A38  4E4F                    1123              TRAP    #15
00001A3A  4E75                    1124              RTS
00001A3C                          1125  
00001A3C                          1126  *---------------------------------------------------------------------------*
00001A3C                          1127  * OP0110: decode BRA/BEQ/BNE/BLT/BHI
00001A3C                          1128  *---------------------------------------------------------------------------*              
00001A3C  4280                    1129  OP0110      CLR.L   D0                  
00001A3E  4281                    1130              CLR.L   D1   
00001A40  4284                    1131              CLR.L   D4                 
00001A42  227C 00000000           1132              MOVEA.L #0,A1
00001A48  2205                    1133              MOVE.L  D5, D1                
00001A4A  0281 000000FF           1134              ANDI.L  #$00FF, D1              * Get 8-bit displacement 
00001A50  2205                    1135              MOVE.L  D5,D1                  
00001A52  0281 00000F00           1136              ANDI.L  #$0F00,D1
00001A58                          1137                 
00001A58  0C41 0000               1138              CMPI.W  #$0000,D1               * Check for BRA
00001A5C  6700 0050               1139              BEQ     OP_BRA                  
00001A60                          1140                          
00001A60  0C41 0D00               1141              CMPI.W  #$0D00,D1               * Check for BLT
00001A64  6700 0056               1142              BEQ     OP_BLT      
00001A68                          1143  
00001A68  0C41 0700               1144              CMPI.W  #$0700,D1               * Check for BEQ
00001A6C  6700 0032               1145              BEQ     OP_BEQ      
00001A70                          1146  
00001A70  0C41 0600               1147              CMPI.W  #$0600,D1               * Check for BNE
00001A74  6700 001C               1148              BEQ     OP_BNE  
00001A78                          1149              
00001A78  0C41 0200               1150              CMPI.W  #$0200,D1               * Check for BHI
00001A7C  6700 0006               1151              BEQ     OP_BHI
00001A80                          1152  
00001A80  4EF8 14C6               1153              JMP     OP_DATA
00001A84                          1154              
00001A84  43F9 0000391E           1155  OP_BHI      LEA     DISP_BHI,A1             
00001A8A  103C 000E               1156              MOVE.B  #14,D0
00001A8E  4E4F                    1157              TRAP    #15
00001A90  4E75                    1158              RTS
00001A92                          1159  
00001A92  43F9 00003917           1160  OP_BNE      LEA     DISP_BNE,A1             
00001A98  103C 000E               1161              MOVE.B  #14,D0
00001A9C  4E4F                    1162              TRAP    #15
00001A9E  4E75                    1163              RTS
00001AA0                          1164  
00001AA0  43F9 00003910           1165  OP_BEQ      LEA     DISP_BEQ,A1             
00001AA6  103C 000E               1166              MOVE.B  #14,D0
00001AAA  4E4F                    1167              TRAP    #15
00001AAC  4E75                    1168              RTS          
00001AAE                          1169                          
00001AAE  43F9 00003902           1170  OP_BRA      LEA     DISP_BRA,A1             
00001AB4  103C 000E               1171              MOVE.B  #14,D0
00001AB8  4E4F                    1172              TRAP    #15
00001ABA  4E75                    1173              RTS
00001ABC                          1174              
00001ABC  43F9 00003909           1175  OP_BLT      LEA     DISP_BLT,A1          
00001AC2  103C 000E               1176              MOVE.B  #14,D0
00001AC6  4E4F                    1177              TRAP    #15
00001AC8  4E75                    1178              RTS
00001ACA                          1179     
00001ACA                          1180  *---------------------------------------------------------------------------*
00001ACA                          1181  * OP0111 : MOVEQ not required
00001ACA                          1182  *---------------------------------------------------------------------------*           
00001ACA  4EF8 14C6               1183  OP0111      JMP     OP_DATA
00001ACE                          1184             
00001ACE                          1185  *---------------------------------------------------------------------------*
00001ACE                          1186  * OP1000 : decode DIVS
00001ACE                          1187  *---------------------------------------------------------------------------*           
00001ACE                          1188  OP1000      
00001ACE  4280                    1189              CLR.L   D0                
00001AD0  4281                    1190              CLR.L   D1   
00001AD2  4284                    1191              CLR.L   D4                
00001AD4  207C 00000000           1192              MOVEA.L #0, A0               
00001ADA  227C 00000000           1193              MOVEA.L #0, A1               
00001AE0                          1194              
00001AE0  2205                    1195              MOVE.L  D5,D1
00001AE2  EA89                    1196              LSR.L   #5,D1
00001AE4  0281 0000000E           1197              ANDI.L  #$E,D1
00001AEA                          1198    
00001AEA  0C01 000E               1199              CMPI.B  #$E,D1
00001AEE  6700 0006               1200              BEQ     OP_DIVS
00001AF2                          1201              
00001AF2  4EF8 14C6               1202              JMP     OP_DATA
00001AF6                          1203  
00001AF6                          1204  *---------------------------------------------------------------------------*
00001AF6                          1205  * OP_DIVS: display DIVS and proceed to EA
00001AF6                          1206  *---------------------------------------------------------------------------*  
00001AF6  43F9 0000376D           1207  OP_DIVS     LEA     DISP_DIVS,A1
00001AFC  103C 000E               1208              MOVE.B  #14,D0
00001B00  4E4F                    1209              TRAP    #15
00001B02  4EF9 0000231A           1210              JMP     EA_ARITH
00001B08                          1211  
00001B08  4E75                    1212              RTS
00001B0A                          1213              
00001B0A                          1214  *---------------------------------------------------------------------------*
00001B0A                          1215  * OP1001: decode SUB/SUBA
00001B0A                          1216  *---------------------------------------------------------------------------*      
00001B0A  4280                    1217  OP1001      CLR.L   D0                
00001B0C  4281                    1218              CLR.L   D1   
00001B0E  4284                    1219              CLR.L   D4                 
00001B10  207C 00000000           1220              MOVEA.L #0, A0                 
00001B16  227C 00000000           1221              MOVEA.L #0, A1               
00001B1C                          1222              
00001B1C  2205                    1223              MOVE.L  D5,D1
00001B1E  EA89                    1224              LSR.L   #5,D1
00001B20  0281 0000000E           1225              ANDI.L  #$E,D1
00001B26                          1226    
00001B26  0C01 0000               1227              CMPI.B  #$0,D1
00001B2A  6700 004A               1228              BEQ     OP_SUB_B
00001B2E  0C01 0002               1229              CMPI.B  #$2,D1
00001B32  6700 005A               1230              BEQ     OP_SUB_W
00001B36  0C01 0004               1231              CMPI.B  #$4,D1
00001B3A  6700 006A               1232              BEQ     OP_SUB_L
00001B3E  0C01 0008               1233              CMPI.B  #$8,D1
00001B42  6700 0032               1234              BEQ     OP_SUB_B
00001B46  0C01 000A               1235              CMPI.B  #$A,D1
00001B4A  6700 0042               1236              BEQ     OP_SUB_W
00001B4E  0C01 000C               1237              CMPI.B  #$C,D1
00001B52  6700 0052               1238              BEQ     OP_SUB_L
00001B56                          1239              
00001B56  4241                    1240              CLR     D1
00001B58  2205                    1241              MOVE.L  D5,D1
00001B5A  EC89                    1242              LSR.L   #6,D1
00001B5C  0281 0000000F           1243              ANDI.L  #$F,D1
00001B62  0C01 0003               1244              CMPI.B  #3,D1
00001B66  6700 0056               1245              BEQ     OP_SUBA_W
00001B6A  0C01 0007               1246              CMPI.B  #7,D1
00001B6E  6700 0060               1247              BEQ     OP_SUBA_L
00001B72                          1248              
00001B72  4EF8 14C6               1249              JMP     OP_DATA
00001B76                          1250    
00001B76                          1251  *---------------------------------------------------------------------------*
00001B76                          1252  * OP_SUB: display SUB and proceed to EA
00001B76                          1253  *---------------------------------------------------------------------------*            
00001B76  43F9 00003775           1254  OP_SUB_B    LEA     DISP_SUB_B,A1
00001B7C  103C 000E               1255              MOVE.B  #14,D0
00001B80  4E4F                    1256              TRAP    #15
00001B82  183C 0000               1257              MOVE.B  #0,D4
00001B86  4EF9 00002366           1258              JMP     EA_GEN
00001B8C                          1259  
00001B8C  4E75                    1260              RTS
00001B8E                          1261  
00001B8E  43F9 0000377E           1262  OP_SUB_W    LEA     DISP_SUB_W,A1
00001B94  103C 000E               1263              MOVE.B  #14,D0
00001B98  4E4F                    1264              TRAP    #15
00001B9A  183C 0001               1265              MOVE.B  #1,D4
00001B9E  4EF9 00002366           1266              JMP     EA_GEN
00001BA4                          1267  
00001BA4  4E75                    1268              RTS
00001BA6                          1269  
00001BA6  43F9 00003787           1270  OP_SUB_L    LEA     DISP_SUB_L,A1
00001BAC  103C 000E               1271              MOVE.B  #14,D0
00001BB0  4E4F                    1272              TRAP    #15
00001BB2  183C 0002               1273              MOVE.B  #2,D4
00001BB6  4EF9 00002366           1274              JMP     EA_GEN
00001BBC                          1275  
00001BBC  4E75                    1276              RTS
00001BBE                          1277  
00001BBE                          1278  *---------------------------------------------------------------------------*
00001BBE                          1279  * OP_SUBA: display SUBA
00001BBE                          1280  *---------------------------------------------------------------------------*  
00001BBE  43F9 000037AE           1281  OP_SUBA_W   LEA     DISP_SUBA_W,A1
00001BC4  103C 000E               1282              MOVE.B  #14,D0
00001BC8  4E4F                    1283              TRAP    #15
00001BCA  183C 0001               1284              MOVE.B  #1,D4
00001BCE  4E75                    1285              RTS
00001BD0                          1286  
00001BD0  43F9 000037B8           1287  OP_SUBA_L   LEA     DISP_SUBA_L,A1
00001BD6  103C 000E               1288              MOVE.B  #14,D0
00001BDA  4E4F                    1289              TRAP    #15
00001BDC  183C 0002               1290              MOVE.B  #2,D4
00001BE0  4E75                    1291              RTS         
00001BE2                          1292  *---------------------------------------------------------------------------*
00001BE2                          1293  * OP1010 : unassigned
00001BE2                          1294  *---------------------------------------------------------------------------*           
00001BE2  4EF8 14C6               1295  OP1010      JMP     OP_DATA
00001BE6                          1296              
00001BE6                          1297  *---------------------------------------------------------------------------*
00001BE6                          1298  * OP1011 : decode CMP/EOR/CMPA
00001BE6                          1299  *---------------------------------------------------------------------------*           
00001BE6  4280                    1300  OP1011      CLR.L   D0                
00001BE8  4281                    1301              CLR.L   D1            
00001BEA  4284                    1302              CLR.L   D4                   
00001BEC  227C 00000000           1303              MOVEA.L #0, A1               
00001BF2  2205                    1304              MOVE.L  D5,D1
00001BF4  EA99                    1305              ROR.L   #5,D1
00001BF6  0281 0000000E           1306              ANDI.L  #$E,D1
00001BFC  0C01 0000               1307              CMPI.B  #$0,D1
00001C00  6700 0062               1308              BEQ     OP_CMP_B
00001C04  0C01 0002               1309              CMPI.B  #$2,D1
00001C08  6700 0072               1310              BEQ     OP_CMP_W
00001C0C  0C01 0004               1311              CMPI.B  #$4,D1
00001C10  6700 0082               1312              BEQ     OP_CMP_L
00001C14  0C01 0008               1313              CMPI.B  #$8,D1
00001C18  6700 0092               1314              BEQ     OP_EOR_B
00001C1C  0C01 000A               1315              CMPI.B  #$A,D1
00001C20  6700 009C               1316              BEQ     OP_EOR_W
00001C24  0C01 000C               1317              CMPI.B  #$C,D1
00001C28  6700 00A6               1318              BEQ     OP_EOR_L  
00001C2C  0C01 0006               1319              CMPI.B  #$6,D1
00001C30  6700 000E               1320              BEQ     OP_CMPA_W
00001C34  0C01 000E               1321              CMPI.B  #$E,D1
00001C38  6700 0018               1322              BEQ     OP_CMPA_L 
00001C3C                          1323  
00001C3C  4EF8 14C6               1324              JMP     OP_DATA          
00001C40                          1325  
00001C40                          1326  *---------------------------------------------------------------------------*
00001C40                          1327  * OP_CMPA: display CMPA 
00001C40                          1328  *---------------------------------------------------------------------------
00001C40  43F9 000037F8           1329  OP_CMPA_W   LEA     DISP_CMPA_W,A1
00001C46  103C 000E               1330              MOVE.B  #14,D0
00001C4A  4E4F                    1331              TRAP    #15
00001C4C  183C 0001               1332              MOVE.B  #1,D4
00001C50  4E75                    1333              RTS
00001C52                          1334  
00001C52  43F9 00003802           1335  OP_CMPA_L   LEA     DISP_CMPA_L,A1
00001C58  103C 000E               1336              MOVE.B  #14,D0
00001C5C  4E4F                    1337              TRAP    #15
00001C5E  183C 0002               1338              MOVE.B  #2,D4
00001C62  4E75                    1339              RTS
00001C64                          1340  
00001C64                          1341  *---------------------------------------------------------------------------*
00001C64                          1342  * OP_CMP: display CMP and proceed to EA
00001C64                          1343  *---------------------------------------------------------------------------*  
00001C64  43F9 000037DD           1344  OP_CMP_B    LEA     DISP_CMP_B,A1
00001C6A  103C 000E               1345              MOVE.B  #14,D0
00001C6E  4E4F                    1346              TRAP    #15
00001C70  183C 0000               1347              MOVE.B  #0,D4
00001C74  4EF9 00002366           1348              JMP     EA_GEN
00001C7A                          1349  
00001C7A  4E75                    1350              RTS
00001C7C                          1351              
00001C7C  43F9 000037E6           1352  OP_CMP_W    LEA     DISP_CMP_W,A1
00001C82  103C 000E               1353              MOVE.B  #14,D0
00001C86  4E4F                    1354              TRAP    #15
00001C88  183C 0001               1355              MOVE.B  #1,D4
00001C8C  4EF9 00002366           1356              JMP     EA_GEN
00001C92                          1357  
00001C92  4E75                    1358              RTS
00001C94                          1359              
00001C94  43F9 000037EF           1360  OP_CMP_L    LEA     DISP_CMP_L,A1
00001C9A  103C 000E               1361              MOVE.B  #14,D0
00001C9E  4E4F                    1362              TRAP    #15
00001CA0  183C 0002               1363              MOVE.B  #2,D4
00001CA4  4EF9 00002366           1364              JMP     EA_GEN
00001CAA                          1365  
00001CAA  4E75                    1366              RTS
00001CAC                          1367              
00001CAC                          1368  *---------------------------------------------------------------------------*
00001CAC                          1369  * OP_EOR: display EOR
00001CAC                          1370  *---------------------------------------------------------------------------*  
00001CAC  43F9 000037C2           1371  OP_EOR_B    LEA     DISP_EOR_B,A1
00001CB2  103C 000E               1372              MOVE.B  #14,D0
00001CB6  4E4F                    1373              TRAP    #15
00001CB8  183C 0000               1374              MOVE.B  #0,D4
00001CBC  4E75                    1375              RTS
00001CBE                          1376              
00001CBE  43F9 000037CB           1377  OP_EOR_W    LEA     DISP_EOR_W,A1
00001CC4  103C 000E               1378              MOVE.B  #14,D0
00001CC8  4E4F                    1379              TRAP    #15
00001CCA  183C 0001               1380              MOVE.B  #1,D4
00001CCE  4E75                    1381              RTS
00001CD0                          1382              
00001CD0  43F9 000037D4           1383  OP_EOR_L    LEA     DISP_EOR_L,A1
00001CD6  103C 000E               1384              MOVE.B  #14,D0
00001CDA  4E4F                    1385              TRAP    #15
00001CDC  183C 0002               1386              MOVE.B  #2,D4
00001CE0  4E75                    1387              RTS    
00001CE2                          1388  
00001CE2                          1389  *---------------------------------------------------------------------------*
00001CE2                          1390  * OP1100: Decode and display MULS/AND and proceed to EA
00001CE2                          1391  *---------------------------------------------------------------------------* 
00001CE2  4280                    1392  OP1100      CLR.L   D0                 
00001CE4  4281                    1393              CLR.L   D1    
00001CE6  4284                    1394              CLR.L   D4                
00001CE8  227C 00000000           1395              MOVEA.L #0, A1             
00001CEE                          1396              
00001CEE  2205                    1397              MOVE.L  D5,D1
00001CF0  EA89                    1398              LSR.L   #5,D1
00001CF2  0281 0000000E           1399              ANDI.L  #$E,D1
00001CF8  0C41 000E               1400              CMPI.W  #$E,D1
00001CFC  6700 0036               1401              BEQ     OP_MULS
00001D00  0C41 0000               1402              CMPI.W  #$0,D1
00001D04  6700 0042               1403              BEQ     OP_AND_B
00001D08  0C41 0002               1404              CMPI.W  #$2,D1
00001D0C  6700 004C               1405              BEQ     OP_AND_W
00001D10  0C41 0004               1406              CMPI.W  #$4,D1
00001D14  6700 0056               1407              BEQ     OP_AND_L
00001D18  0C41 0008               1408              CMPI.W  #$8,D1
00001D1C  6700 002A               1409              BEQ     OP_AND_B
00001D20  0C41 000A               1410              CMPI.W  #$A,D1
00001D24  6700 0034               1411              BEQ     OP_AND_W
00001D28  0C41 000C               1412              CMPI.W  #$C,D1
00001D2C  6700 003E               1413              BEQ     OP_AND_L
00001D30                          1414  
00001D30  4EF8 14C6               1415              JMP     OP_DATA
00001D34                          1416  
00001D34  43F9 0000380C           1417  OP_MULS     LEA     DISP_MULS_W,A1
00001D3A  103C 000E               1418              MOVE.B  #14,D0
00001D3E  4E4F                    1419              TRAP    #15
00001D40  4EF9 0000231A           1420              JMP     EA_ARITH
00001D46  4E75                    1421              RTS
00001D48                          1422              
00001D48                          1423  OP_AND_B    
00001D48  43F9 00003816           1424              LEA     DISP_AND_B,A1
00001D4E  103C 000E               1425              MOVE.B  #14,D0
00001D52  4E4F                    1426              TRAP    #15
00001D54  183C 0000               1427              MOVE.B  #0,D4
00001D58  4E75                    1428              RTS
00001D5A                          1429  
00001D5A                          1430  OP_AND_W
00001D5A  43F9 0000381F           1431              LEA     DISP_AND_W,A1
00001D60  103C 000E               1432              MOVE.B  #14,D0
00001D64  4E4F                    1433              TRAP    #15
00001D66  183C 0001               1434              MOVE.B  #1,D4
00001D6A  4E75                    1435              RTS
00001D6C                          1436  
00001D6C                          1437  OP_AND_L
00001D6C  43F9 00003828           1438              LEA     DISP_AND_L,A1
00001D72  103C 000E               1439              MOVE.B  #14,D0
00001D76  4E4F                    1440              TRAP    #15
00001D78  183C 0002               1441              MOVE.B  #2,D4
00001D7C  4E75                    1442              RTS
00001D7E                          1443  
00001D7E                          1444  *---------------------------------------------------------------------------*
00001D7E                          1445  * OP1101: Decode ADD/ADDA
00001D7E                          1446  *---------------------------------------------------------------------------* 
00001D7E  4280                    1447  OP1101      CLR.L   D0                  
00001D80  4281                    1448              CLR.L   D1       
00001D82  4284                    1449              CLR.L   D4                   
00001D84  227C 00000000           1450              MOVEA.L #0, A1              
00001D8A  2205                    1451              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
00001D8C                          1452              
00001D8C                          1453              *CLEAR D3
00001D8C  4283                    1454              CLR.L   D3
00001D8E                          1455              *LOAD STACK WITH THIS OPMODE
00001D8E  6100 12C4               1456              BSR     PUSH_STACK
00001D92  163C 0041               1457              MOVE.B  #'A',D3
00001D96  6100 12BC               1458              BSR     PUSH_STACK
00001D9A  163C 0044               1459              MOVE.B  #'D',D3
00001D9E  6100 12B4               1460              BSR     PUSH_STACK
00001DA2  163C 0044               1461              MOVE.B  #'D',D3
00001DA6  6100 12AC               1462              BSR     PUSH_STACK
00001DAA  163C 002E               1463              MOVE.B  #'.',D3
00001DAE  6100 12A4               1464              BSR     PUSH_STACK
00001DB2                          1465  
00001DB2                          1466            
00001DB2                          1467  OP1101_DETERMINE_DN_EA_OR_EA_DN 
00001DB2  2205                    1468              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00001DB4                          1469              
00001DB4                          1470              *BITS (INDEX 8) 
00001DB4                          1471              *0 = ADD.B/W/L <EA>,Dn
00001DB4                          1472              *1 = ADD.B/W/L Dn,<EA> 
00001DB4  E099                    1473              ROR.L   #8,D1
00001DB6  0281 00000001           1474              ANDI.L  #$01,D1     *MASKS WITH 00000001
00001DBC  0C81 00000000           1475              CMPI.L  #$00,D1     *IF EQUALS <ea>,Dn
00001DC2  6700 0102               1476              BEQ     OP1101_EA_DN
00001DC6                          1477              *else procede to Dn_EA
00001DC6                          1478              
00001DC6                          1479  OP1101_DN_EA
00001DC6                          1480              *BITS (7 TO 6) 
00001DC6                          1481              *00 = .B
00001DC6                          1482              *01 = .W
00001DC6                          1483              *10 = .L 
00001DC6  2205                    1484              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00001DC8  EC99                    1485              ROR.L   #6,D1
00001DCA  0281 00000003           1486              ANDI.L  #$03,D1
00001DD0  0C81 00000000           1487              CMPI.L  #$00,D1 *EQUALS .B
00001DD6  6700 0016               1488              BEQ     OP1101_PRINT_B2
00001DDA  0C81 00000001           1489              CMPI.L  #$01,D1 *EQUALS .W
00001DE0  6700 0054               1490              BEQ     OP1101_PRINT_W2
00001DE4  0C81 00000002           1491              CMPI.L  #$02,D1 *EQUALS .L
00001DEA  6700 0092               1492              BEQ     OP1101_PRINT_L2
00001DEE                          1493  OP1101_PRINT_B2
00001DEE                          1494              *PUSH 'B'
00001DEE  163C 0042               1495              MOVE.B  #'B',D3
00001DF2  6100 1260               1496              BSR     PUSH_STACK
00001DF6                          1497             
00001DF6                          1498              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001DF6  13FC 0002 0000397A      1499             MOVE.B   #$02,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001DFE  13FC 0002 0000397B      1500             MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001E06                          1501             
00001E06                          1502             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001E06  13FC 00B9 0000397D      1503             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001E0E  13FC 0020 0000397E      1504             MOVE.B   #$20,GET_SRC_START_END
00001E16                          1505  
00001E16                          1506              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001E16  0285 0000FF1F           1507              ANDI.L  #$FF1F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1111(F[15]) 0001(1) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001E1C  0685 00000000           1508              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00001E22                          1509       
00001E22  6100 0DC2               1510              BSR     GET_EA_EA_DEST      *GETS Dn
00001E26  163C 002C               1511              MOVE.B  #',',D3
00001E2A  6100 1228               1512              BSR     PUSH_STACK                     
00001E2E  6100 0986               1513              BSR     GET_EA_EA_SRC       *GETS <ea>
00001E32                          1514  
00001E32                          1515              
00001E32  6000 0192               1516              BRA     OP1101_ADD_RETURN
00001E36                          1517  OP1101_PRINT_W2
00001E36  163C 0057               1518              MOVE.B  #'W',D3
00001E3A  6100 1218               1519              BSR     PUSH_STACK
00001E3E                          1520  
00001E3E                          1521              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001E3E  13FC 0002 0000397A      1522              MOVE.B   #$02,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001E46  13FC 0002 0000397B      1523              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001E4E                          1524             
00001E4E                          1525              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001E4E  13FC 00B9 0000397D      1526              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001E56  13FC 0020 0000397E      1527              MOVE.B   #$20,GET_SRC_START_END
00001E5E                          1528  
00001E5E                          1529              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001E5E  0285 0000FF1F           1530              ANDI.L  #$FF1F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1111(F[15]) 0001(1) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001E64  0685 00000000           1531              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00001E6A                          1532  
00001E6A                          1533        
00001E6A  6100 0D7A               1534              BSR     GET_EA_EA_DEST      *GETS Dn
00001E6E  163C 002C               1535              MOVE.B  #',',D3
00001E72  6100 11E0               1536              BSR     PUSH_STACK               
00001E76  6100 093E               1537              BSR     GET_EA_EA_SRC       *GETS <ea>       
00001E7A                          1538  
00001E7A                          1539  
00001E7A                          1540  
00001E7A  6000 014A               1541              BRA     OP1101_ADD_RETURN
00001E7E                          1542  OP1101_PRINT_L2 
00001E7E  163C 004C               1543              MOVE.B  #'L',D3
00001E82  6100 11D0               1544              BSR     PUSH_STACK
00001E86                          1545              
00001E86                          1546              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001E86  13FC 0002 0000397A      1547              MOVE.B   #$02,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001E8E  13FC 0002 0000397B      1548              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001E96                          1549             
00001E96                          1550              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001E96  13FC 00B9 0000397D      1551              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001E9E  13FC 0020 0000397E      1552              MOVE.B   #$20,GET_SRC_START_END
00001EA6                          1553  
00001EA6                          1554             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001EA6  0285 0000FF1F           1555              ANDI.L  #$FF1F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1111(F[15]) 0001(1) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001EAC  0685 00000000           1556              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00001EB2                          1557  
00001EB2                          1558               
00001EB2  6100 0D32               1559              BSR     GET_EA_EA_DEST       *GETS Dn
00001EB6  163C 002C               1560              MOVE.B  #',',D3
00001EBA  6100 1198               1561              BSR     PUSH_STACK          
00001EBE  6100 08F6               1562              BSR     GET_EA_EA_SRC        *GETS <ea>
00001EC2                          1563  
00001EC2  6000 0102               1564              BRA     OP1101_ADD_RETURN
00001EC6                          1565              
00001EC6                          1566  OP1101_EA_DN           
00001EC6                          1567              *BITS (7 TO 6) 
00001EC6                          1568              *00 = .B
00001EC6                          1569              *01 = .W
00001EC6                          1570              *10 = .L 
00001EC6  2205                    1571              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00001EC8  EC99                    1572              ROR.L   #6,D1
00001ECA  0281 00000003           1573              ANDI.L  #$03,D1
00001ED0  0C81 00000000           1574              CMPI.L  #$00,D1 *EQUALS .B
00001ED6  6700 0016               1575              BEQ     OP1101_PRINT_B
00001EDA  0C81 00000001           1576              CMPI.L  #$01,D1 *EQUALS .W
00001EE0  6700 0054               1577              BEQ     OP1101_PRINT_W
00001EE4  0C81 00000002           1578              CMPI.L  #$02,D1 *EQUALS .L
00001EEA  6700 0092               1579              BEQ     OP1101_PRINT_L
00001EEE                          1580  OP1101_PRINT_B
00001EEE  163C 0042               1581              MOVE.B  #'B',D3
00001EF2  6100 1160               1582              BSR     PUSH_STACK
00001EF6                          1583                
00001EF6                          1584              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001EF6  13FC 0002 0000397A      1585              MOVE.B   #$02,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001EFE  13FC 0002 0000397B      1586              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001F06                          1587             
00001F06                          1588              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001F06  13FC 00B9 0000397D      1589              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001F0E  13FC 0020 0000397E      1590              MOVE.B   #$20,GET_SRC_START_END
00001F16                          1591  
00001F16                          1592             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001F16  0285 0000FF1F           1593              ANDI.L  #$FF1F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1111(F[15]) 0001(1) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001F1C  0685 00000000           1594              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00001F22                          1595  
00001F22                          1596              
00001F22  6100 0892               1597              BSR     GET_EA_EA_SRC      *GETS <ea>
00001F26  163C 002C               1598              MOVE.B  #',',D3
00001F2A  6100 1128               1599              BSR     PUSH_STACK          
00001F2E  6100 0CB6               1600              BSR     GET_EA_EA_DEST       *GETS Dn
00001F32                          1601              
00001F32  6000 0092               1602              BRA     OP1101_ADD_RETURN
00001F36                          1603  OP1101_PRINT_W
00001F36  163C 0057               1604              MOVE.B  #'W',D3
00001F3A  6100 1118               1605              BSR     PUSH_STACK
00001F3E                          1606  
00001F3E                          1607              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001F3E  13FC 0002 0000397A      1608              MOVE.B   #$02,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001F46  13FC 0002 0000397B      1609              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001F4E                          1610             
00001F4E                          1611              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001F4E  13FC 00B9 0000397D      1612              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001F56  13FC 0020 0000397E      1613              MOVE.B   #$20,GET_SRC_START_END
00001F5E                          1614  
00001F5E                          1615             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001F5E  0285 0000FF1F           1616              ANDI.L  #$FF1F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1111(F[15]) 0001(1) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001F64  0685 00000000           1617              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00001F6A                          1618  
00001F6A                          1619              
00001F6A  6100 084A               1620              BSR     GET_EA_EA_SRC      *GETS <ea>
00001F6E  163C 002C               1621              MOVE.B  #',',D3
00001F72  6100 10E0               1622              BSR     PUSH_STACK
00001F76  6100 0C6E               1623              BSR     GET_EA_EA_DEST       *GETS Dn    
00001F7A                          1624              
00001F7A  6000 004A               1625              BRA     OP1101_ADD_RETURN
00001F7E                          1626  OP1101_PRINT_L 
00001F7E  163C 004C               1627              MOVE.B  #'L',D3
00001F82  6100 10D0               1628              BSR     PUSH_STACK
00001F86                          1629              
00001F86                          1630              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001F86  13FC 0002 0000397A      1631              MOVE.B   #$02,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001F8E  13FC 0002 0000397B      1632              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001F96                          1633             
00001F96                          1634              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001F96  13FC 00B9 0000397D      1635              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001F9E  13FC 0020 0000397E      1636              MOVE.B   #$20,GET_SRC_START_END
00001FA6                          1637  
00001FA6                          1638              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001FA6  0285 0000FF1F           1639              ANDI.L  #$FF1F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1111(F[15]) 0001(1) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001FAC  0685 00000000           1640              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00001FB2                          1641  
00001FB2                          1642                     
00001FB2  6100 0802               1643              BSR     GET_EA_EA_SRC      *GETS <ea>
00001FB6  163C 002C               1644              MOVE.B  #',',D3
00001FBA  6100 1098               1645              BSR     PUSH_STACK                  
00001FBE  6100 0C26               1646              BSR     GET_EA_EA_DEST       *GETS Dn    
00001FC2                          1647  
00001FC2                          1648              
00001FC2  6000 0002               1649              BRA     OP1101_ADD_RETURN
00001FC6                          1650              
00001FC6                          1651  OP1101_ADD_RETURN
00001FC6  4E75                    1652              RTS
00001FC8                          1653              
00001FC8                          1654              *ADDW
00001FC8  0C01 0006               1655              CMPI.B  #$6,D1
00001FCC  6700 0056               1656              BEQ     OP_ADDA_W
00001FD0  0C01 000E               1657              CMPI.B  #$E,D1
00001FD4  6700 0066               1658              BEQ     OP_ADDA_L 
00001FD8                          1659  
00001FD8  4EF8 14C6               1660              JMP     OP_DATA  
00001FDC                          1661            
00001FDC                          1662  *---------------------------------------------------------------------------*
00001FDC                          1663  * OP_ADD: display ADD and proceed to EA
00001FDC                          1664  *---------------------------------------------------------------------------*  
00001FDC  43F9 00003831           1665  OP_ADD_B    LEA     DISP_ADD_B,A1
00001FE2  103C 000E               1666              MOVE.B  #14,D0
00001FE6  4E4F                    1667              TRAP    #15
00001FE8  183C 0000               1668              MOVE.B  #0,D4
00001FEC  4EF9 00002366           1669              JMP     EA_GEN
00001FF2                          1670  
00001FF2  4E75                    1671              RTS
00001FF4                          1672  
00001FF4  43F9 0000383A           1673  OP_ADD_W    LEA     DISP_ADD_W,A1
00001FFA  103C 000E               1674              MOVE.B  #14,D0
00001FFE  4E4F                    1675              TRAP    #15
00002000  183C 0001               1676              MOVE.B  #1,D4
00002004  4EF9 00002366           1677              JMP     EA_GEN
0000200A                          1678  
0000200A  4E75                    1679              RTS
0000200C                          1680  
0000200C  43F9 00003843           1681  OP_ADD_L    LEA     DISP_ADD_L,A1
00002012  103C 000E               1682              MOVE.B  #14,D0
00002016  4E4F                    1683              TRAP    #15
00002018  183C 0002               1684              MOVE.B  #2,D4
0000201C  4EF9 00002366           1685              JMP     EA_GEN
00002022                          1686  
00002022  4E75                    1687              RTS
00002024                          1688  
00002024                          1689  *---------------------------------------------------------------------------*
00002024                          1690  * OP_ADDA: display ADDA and proceed to EA
00002024                          1691  *---------------------------------------------------------------------------*  
00002024  43F9 0000384C           1692  OP_ADDA_W   LEA     DISP_ADDA_W,A1
0000202A  103C 000E               1693              MOVE.B  #14,D0
0000202E  4E4F                    1694              TRAP    #15
00002030  183C 0001               1695              MOVE.B  #1,D4
00002034  4EF9 00002366           1696              JMP     EA_GEN
0000203A                          1697  
0000203A  4E75                    1698              RTS
0000203C                          1699  
0000203C  43F9 00003856           1700  OP_ADDA_L   LEA     DISP_ADDA_L,A1
00002042  103C 000E               1701              MOVE.B  #14,D0
00002046  4E4F                    1702              TRAP    #15
00002048  183C 0002               1703              MOVE.B  #2,D4
0000204C  4EF9 00002366           1704              JMP     EA_GEN
00002052                          1705  
00002052  4E75                    1706              RTS
00002054                          1707              
00002054                          1708  *---------------------------------------------------------------------------*
00002054                          1709  * OP1110: LSR/LSL/ASR/ASL/ROL/ROR
00002054                          1710  *---------------------------------------------------------------------------* 
00002054  4280                    1711  OP1110      CLR.L   D0                  
00002056  4281                    1712              CLR.L   D1   
00002058  4284                    1713              CLR.L   D4                   
0000205A  227C 00000000           1714              MOVEA.L #0, A1                 
00002060  2205                    1715              MOVE.L  D5,D1
00002062                          1716              
00002062                          1717              * check for LSX
00002062  E699                    1718              ROR.L   #3,D1
00002064  0281 00000001           1719              ANDI.L  #$1,D1
0000206A  0C01 0001               1720              CMPI.B  #1,D1
0000206E  6700 002E               1721              BEQ     OP_LSX
00002072                          1722              
00002072                          1723              * reset D1 and check for ASX
00002072  4281                    1724              CLR.L   D1
00002074  2205                    1725              MOVE.L  D5,D1
00002076  E699                    1726              ROR.L   #3,D1
00002078  0281 00000001           1727              ANDI.L  #$1,D1
0000207E  0C01 0000               1728              CMPI.B  #0,D1
00002082  6700 0032               1729              BEQ     OP_ASX
00002086                          1730  
00002086                          1731              * reset D1 and check for ROX
00002086  4281                    1732              CLR.L   D1
00002088  2205                    1733              MOVE.L  D5,D1
0000208A  E699                    1734              ROR.L   #3,D1
0000208C  0281 00000001           1735              ANDI.L  #$1,D1
00002092  0C01 0003               1736              CMPI.B  #3,D1
00002096  6700 0036               1737              BEQ     OP_ROX
0000209A                          1738              
0000209A  4EF8 14C6               1739              JMP     OP_DATA
0000209E                          1740  
0000209E                          1741  *---------------------------------------------------------------------------*
0000209E                          1742  * OP_LSX: process LSR/LSL
0000209E                          1743  *---------------------------------------------------------------------------*            
0000209E  EA99                    1744  OP_LSX      ROR.L   #5,D1
000020A0  0281 00000001           1745              ANDI.L  #$1,D1
000020A6  0C01 0000               1746              CMPI.B  #0,D1
000020AA  6700 003A               1747              BEQ     OP_LSR
000020AE  0C01 0001               1748              CMPI.B  #1,D1
000020B2  6700 008C               1749              BEQ     OP_LSL
000020B6                          1750              
000020B6                          1751  *---------------------------------------------------------------------------*
000020B6                          1752  * OP_ASX: process ASR/ASL
000020B6                          1753  *---------------------------------------------------------------------------*  
000020B6  EA99                    1754  OP_ASX      ROR.L   #5,D1
000020B8  0281 00000001           1755              ANDI.L  #$1,D1
000020BE  0C01 0000               1756              CMPI.B  #0,D1
000020C2  6700 00D6               1757              BEQ     OP_ASR
000020C6  0C01 0001               1758              CMPI.B  #1,D1
000020CA  6700 0128               1759              BEQ     OP_ASL
000020CE                          1760              
000020CE                          1761  *---------------------------------------------------------------------------*
000020CE                          1762  * OP_ROX: process ROR/ROL
000020CE                          1763  *---------------------------------------------------------------------------*  
000020CE  EA99                    1764  OP_ROX      ROR.L   #5,D1
000020D0  0281 00000001           1765              ANDI.L  #$1,D1
000020D6  0C01 0000               1766              CMPI.B  #0,D1
000020DA  6700 0172               1767              BEQ     OP_ROR
000020DE  0C01 0001               1768              CMPI.B  #1,D1
000020E2  6700 01C4               1769              BEQ     OP_ROL
000020E6                          1770  
000020E6                          1771  *---------------------------------------------------------------------------*
000020E6                          1772  * OP_LSR: decode and display LSR
000020E6                          1773  *---------------------------------------------------------------------------*        
000020E6  E599                    1774  OP_LSR      ROL.L   #2,D1
000020E8  0281 00000003           1775              ANDI.L  #$3,D1
000020EE  0C01 0000               1776              CMPI.B  #0,D1
000020F2  6700 0016               1777              BEQ     OP_LSR_B
000020F6  0C01 0001               1778              CMPI.B  #$1,D1
000020FA  6700 0032               1779              BEQ     OP_LSR_W
000020FE  0C01 0002               1780              CMPI.B  #$2,D1
00002102  6700 0018               1781              BEQ     OP_LSR_L
00002106                          1782              
00002106  4EF8 14C6               1783              JMP     OP_DATA
0000210A                          1784  
0000210A  43F9 00003860           1785  OP_LSR_B    LEA     DISP_LSR_B,A1
00002110  103C 000E               1786              MOVE.B  #14,D0
00002114  4E4F                    1787              TRAP    #15
00002116  183C 0000               1788              MOVE.B  #0,D4
0000211A  4E75                    1789              RTS
0000211C                          1790  
0000211C  43F9 00003884           1791  OP_LSR_L    LEA     DISP_LSR_L,A1
00002122  103C 000E               1792              MOVE.B  #14,D0
00002126  4E4F                    1793              TRAP    #15
00002128  183C 0002               1794              MOVE.B  #2,D4
0000212C  4E75                    1795              RTS
0000212E                          1796  
0000212E  43F9 00003872           1797  OP_LSR_W    LEA     DISP_LSR_W,A1
00002134  103C 000E               1798              MOVE.B  #14,D0
00002138  4E4F                    1799              TRAP    #15
0000213A  183C 0001               1800              MOVE.B  #1,D4
0000213E  4E75                    1801              RTS
00002140                          1802   
00002140                          1803  *---------------------------------------------------------------------------*
00002140                          1804  * OP_LSL: decode and display LSL
00002140                          1805  *---------------------------------------------------------------------------*             
00002140  E599                    1806  OP_LSL      ROL.L   #2,D1
00002142  0281 00000003           1807              ANDI.L  #$3,D1
00002148  0C01 0000               1808              CMPI.B  #0,D1
0000214C  6700 0016               1809              BEQ     OP_LSL_B
00002150  0C01 0001               1810              CMPI.B  #$1,D1
00002154  6700 0032               1811              BEQ     OP_LSL_W
00002158  0C01 0002               1812              CMPI.B  #$2,D1
0000215C  6700 0018               1813              BEQ     OP_LSL_L
00002160                          1814              
00002160  4EF8 14C6               1815              JMP OP_DATA
00002164                          1816  
00002164  43F9 00003869           1817  OP_LSL_B    LEA     DISP_LSL_B,A1
0000216A  103C 000E               1818              MOVE.B  #14,D0
0000216E  4E4F                    1819              TRAP    #15
00002170  183C 0000               1820              MOVE.B  #0,D4
00002174  4E75                    1821              RTS
00002176                          1822  
00002176  43F9 0000388D           1823  OP_LSL_L    LEA     DISP_LSL_L,A1
0000217C  103C 000E               1824              MOVE.B  #14,D0
00002180  4E4F                    1825              TRAP    #15
00002182  183C 0002               1826              MOVE.B  #2,D4
00002186  4E75                    1827              RTS
00002188                          1828  
00002188  43F9 0000387B           1829  OP_LSL_W    LEA     DISP_LSL_W,A1
0000218E  103C 000E               1830              MOVE.B  #14,D0
00002192  4E4F                    1831              TRAP    #15
00002194  183C 0001               1832              MOVE.B  #1,D4
00002198  4E75                    1833              RTS
0000219A                          1834   
0000219A                          1835  *---------------------------------------------------------------------------*
0000219A                          1836  * OP_ASR: decode and display ASR
0000219A                          1837  *---------------------------------------------------------------------------*             
0000219A  E599                    1838  OP_ASR      ROL.L   #2,D1
0000219C  0281 00000003           1839              ANDI.L  #$3,D1
000021A2  0C01 0000               1840              CMPI.B  #0,D1
000021A6  6700 0016               1841              BEQ     OP_ASR_B
000021AA  0C01 0001               1842              CMPI.B  #$1,D1
000021AE  6700 0032               1843              BEQ     OP_ASR_W
000021B2  0C01 0002               1844              CMPI.B  #$2,D1
000021B6  6700 0018               1845              BEQ     OP_ASR_L
000021BA                          1846              
000021BA  4EF8 14C6               1847              JMP OP_DATA
000021BE                          1848  
000021BE  43F9 00003896           1849  OP_ASR_B    LEA     DISP_ASR_B,A1
000021C4  103C 000E               1850              MOVE.B  #14,D0
000021C8  4E4F                    1851              TRAP    #15
000021CA  183C 0000               1852              MOVE.B  #0,D4
000021CE  4E75                    1853              RTS
000021D0                          1854  
000021D0  43F9 000038BA           1855  OP_ASR_L    LEA     DISP_ASR_L,A1
000021D6  103C 000E               1856              MOVE.B  #14,D0
000021DA  4E4F                    1857              TRAP    #15
000021DC  183C 0002               1858              MOVE.B  #2,D4
000021E0  4E75                    1859              RTS
000021E2                          1860  
000021E2  43F9 000038A8           1861  OP_ASR_W    LEA     DISP_ASR_W,A1
000021E8  103C 000E               1862              MOVE.B  #14,D0
000021EC  4E4F                    1863              TRAP    #15
000021EE  183C 0001               1864              MOVE.B  #1,D4
000021F2  4E75                    1865              RTS
000021F4                          1866       
000021F4                          1867  *---------------------------------------------------------------------------*
000021F4                          1868  * OP_ASL: decode and display ASL
000021F4                          1869  *---------------------------------------------------------------------------*         
000021F4  E599                    1870  OP_ASL      ROL.L   #2,D1
000021F6  0281 00000003           1871              ANDI.L  #$3,D1
000021FC  0C01 0000               1872              CMPI.B  #0,D1
00002200  6700 0016               1873              BEQ     OP_ASL_B
00002204  0C01 0001               1874              CMPI.B  #$1,D1
00002208  6700 0032               1875              BEQ     OP_ASL_W
0000220C  0C01 0002               1876              CMPI.B  #$2,D1
00002210  6700 0018               1877              BEQ     OP_ASL_L
00002214                          1878              
00002214  4EF8 14C6               1879              JMP OP_DATA
00002218                          1880  
00002218  43F9 0000389F           1881  OP_ASL_B    LEA     DISP_ASL_B,A1
0000221E  103C 000E               1882              MOVE.B  #14,D0
00002222  4E4F                    1883              TRAP    #15
00002224  183C 0000               1884              MOVE.B  #0,D4
00002228  4E75                    1885              RTS
0000222A                          1886  
0000222A  43F9 000038C3           1887  OP_ASL_L    LEA     DISP_ASL_L,A1
00002230  103C 000E               1888              MOVE.B  #14,D0
00002234  4E4F                    1889              TRAP    #15
00002236  183C 0002               1890              MOVE.B  #2,D4
0000223A  4E75                    1891              RTS
0000223C                          1892  
0000223C  43F9 000038B1           1893  OP_ASL_W    LEA     DISP_ASL_W,A1
00002242  103C 000E               1894              MOVE.B  #14,D0
00002246  4E4F                    1895              TRAP    #15
00002248  183C 0001               1896              MOVE.B  #1,D4
0000224C  4E75                    1897              RTS
0000224E                          1898   
0000224E                          1899  *---------------------------------------------------------------------------*
0000224E                          1900  * OP_ROR: decode and display ROR
0000224E                          1901  *---------------------------------------------------------------------------*             
0000224E  E599                    1902  OP_ROR      ROL.L   #2,D1
00002250  0281 00000003           1903              ANDI.L  #$3,D1
00002256  0C01 0000               1904              CMPI.B  #0,D1
0000225A  6700 0016               1905              BEQ     OP_ROR_B
0000225E  0C01 0001               1906              CMPI.B  #$1,D1
00002262  6700 0032               1907              BEQ     OP_ROR_W
00002266  0C01 0002               1908              CMPI.B  #$2,D1
0000226A  6700 0018               1909              BEQ     OP_ROR_L
0000226E                          1910              
0000226E  4EF8 14C6               1911              JMP OP_DATA
00002272                          1912  
00002272  43F9 000038CC           1913  OP_ROR_B    LEA     DISP_ROR_B,A1
00002278  103C 000E               1914              MOVE.B  #14,D0
0000227C  4E4F                    1915              TRAP    #15
0000227E  183C 0000               1916              MOVE.B  #0,D4
00002282  4E75                    1917              RTS
00002284                          1918  
00002284  43F9 000038F0           1919  OP_ROR_L    LEA     DISP_ROR_L,A1
0000228A  103C 000E               1920              MOVE.B  #14,D0
0000228E  4E4F                    1921              TRAP    #15
00002290  183C 0002               1922              MOVE.B  #2,D4
00002294  4E75                    1923              RTS
00002296                          1924  
00002296  43F9 000038DE           1925  OP_ROR_W    LEA     DISP_ROR_W,A1
0000229C  103C 000E               1926              MOVE.B  #14,D0
000022A0  4E4F                    1927              TRAP    #15
000022A2  183C 0001               1928              MOVE.B  #1,D4
000022A6  4E75                    1929              RTS
000022A8                          1930  
000022A8                          1931  *---------------------------------------------------------------------------*
000022A8                          1932  * OP_ROL: decode and display ROL
000022A8                          1933  *---------------------------------------------------------------------------*             
000022A8  E599                    1934  OP_ROL      ROL.L   #2,D1
000022AA  0281 00000003           1935              ANDI.L  #$3,D1
000022B0  0C01 0000               1936              CMPI.B  #0,D1
000022B4  6700 0016               1937              BEQ     OP_ROL_B
000022B8  0C01 0001               1938              CMPI.B  #$1,D1
000022BC  6700 0032               1939              BEQ     OP_ROL_W
000022C0  0C01 0002               1940              CMPI.B  #$2,D1
000022C4  6700 0018               1941              BEQ     OP_ROL_L
000022C8                          1942              
000022C8  4EF8 14C6               1943              JMP OP_DATA
000022CC                          1944  
000022CC                          1945  
000022CC  43F9 000038D5           1946  OP_ROL_B    LEA     DISP_ROL_B,A1
000022D2  103C 000E               1947              MOVE.B  #14,D0
000022D6  4E4F                    1948              TRAP    #15
000022D8  183C 0000               1949              MOVE.B  #0,D4
000022DC  4E75                    1950              RTS
000022DE                          1951  
000022DE  43F9 000038F9           1952  OP_ROL_L    LEA     DISP_ROL_L,A1
000022E4  103C 000E               1953              MOVE.B  #14,D0
000022E8  4E4F                    1954              TRAP    #15
000022EA  183C 0002               1955              MOVE.B  #2,D4
000022EE  4E75                    1956              RTS
000022F0                          1957  
000022F0  43F9 000038E7           1958  OP_ROL_W    LEA     DISP_ROL_W,A1
000022F6  103C 000E               1959              MOVE.B  #14,D0
000022FA  4E4F                    1960              TRAP    #15
000022FC  183C 0001               1961              MOVE.B  #1,D4
00002300  4E75                    1962              RTS
00002302                          1963              
00002302                          1964  *---------------------------------------------------------------------------*
00002302                          1965  * OP1111 : Special reserved
00002302                          1966  *---------------------------------------------------------------------------*           
00002302  4EF8 14C6               1967  OP1111      JMP     OP_DATA
00002306                          1968  
00002306                          1969  *---------------------------------------------------------------------------*
00002306                          1970  * EA_NOSRC: decode and display effective addresses for NEG/JSR
00002306                          1971  *---------------------------------------------------------------------------*
00002306                          1972  EA_NOSRC    
00002306  4EB9 000023C4           1973              JSR     SRC_MODE
0000230C  43F9 000035C6           1974              LEA     ENDLINE_M,A1
00002312  103C 000E               1975              MOVE.B  #14,D0
00002316  4E4F                    1976              TRAP    #15
00002318  4E75                    1977              RTS
0000231A                          1978              
0000231A                          1979  *---------------------------------------------------------------------------*
0000231A                          1980  * EA_ARITH: decode and display effective addresses for DIVS/MULS
0000231A                          1981  *---------------------------------------------------------------------------*
0000231A                          1982  EA_ARITH
0000231A  4EB9 000023C4           1983              JSR     SRC_MODE
00002320  43F9 00003940           1984              LEA     DISP_D,A1
00002326  103C 000E               1985              MOVE.B  #14,D0
0000232A  4E4F                    1986              TRAP    #15
0000232C  4EB9 00002650           1987              JSR     DEST_REGISTER
00002332  43F9 000035C6           1988              LEA     ENDLINE_M,A1
00002338  103C 000E               1989              MOVE.B  #14,D0
0000233C  4E4F                    1990              TRAP    #15
0000233E  4E75                    1991              RTS
00002340                          1992              
00002340                          1993  *---------------------------------------------------------------------------*
00002340                          1994  * EA_MOVEA: decode and display effective addresses for MOVEA/LEA
00002340                          1995  *---------------------------------------------------------------------------*
00002340                          1996  EA_MOVEA
00002340  4EB9 000023C4           1997              JSR     SRC_MODE
00002346  43F9 00003951           1998              LEA     DISP_AOP,A1
0000234C  103C 000E               1999              MOVE.B  #14,D0
00002350  4E4F                    2000              TRAP    #15
00002352  4EB9 00002650           2001              JSR     DEST_REGISTER
00002358  43F9 0000394F           2002              LEA     DISP_CP,A1
0000235E  103C 000D               2003              MOVE.B  #13,D0
00002362  4E4F                    2004              TRAP    #15
00002364  4E75                    2005              RTS
00002366                          2006              
00002366                          2007  *---------------------------------------------------------------------------*
00002366                          2008  * EA_GEN: decode and display effective addresses for MOVE
00002366                          2009  *---------------------------------------------------------------------------*
00002366                          2010  EA_GEN          
00002366                          2011              * retrieve/display source mode/register
00002366  4EB9 000023C4           2012              JSR     SRC_MODE
0000236C                          2013              
0000236C                          2014              * retrieve/display destination mode/register
0000236C  4EB9 00002380           2015              JSR     DEST_MODE
00002372                          2016              
00002372  43F9 000035C6           2017              LEA     ENDLINE_M,A1
00002378  103C 000E               2018              MOVE.B  #14,D0
0000237C  4E4F                    2019              TRAP    #15
0000237E                          2020              
0000237E  4E75                    2021              RTS
00002380                          2022  
00002380                          2023  *---------------------------------------------------------------------------*
00002380                          2024  * DEST_MODE: decode and display destination mode (bit 8 - 6)
00002380                          2025  *---------------------------------------------------------------------------*           
00002380                          2026  DEST_MODE   
00002380                          2027              * clear registers to store temp data
00002380  4280                    2028              CLR.L   D0                      
00002382  4281                    2029              CLR.L   D1                      
00002384  207C 00000000           2030              MOVEA.L #0, A0                  
0000238A  227C 00000000           2031              MOVEA.L #0, A1                  
00002390  2205                    2032              MOVE.L  D5,D1
00002392  EC89                    2033              LSR.L   #6,D1
00002394  0281 00000007           2034              ANDI.L  #$7,D1
0000239A  0C01 0000               2035              CMPI.B  #0,D1   * Dn
0000239E  6700 0082               2036              BEQ     D_MODE000
000023A2  0C01 0002               2037              CMPI.B  #2,D1   * (An)
000023A6  6700 00C2               2038              BEQ     D_MODE010
000023AA  0C01 0003               2039              CMPI.B  #3,D1   * (An)+
000023AE  6700 011A               2040              BEQ     D_MODE011
000023B2  0C01 0004               2041              CMPI.B  #4,D1   * -(An)
000023B6  6700 0132               2042              BEQ     D_MODE100
000023BA  0C01 0007               2043              CMPI.B  #7,D1  * abs
000023BE  6700 017C               2044              BEQ     D_MODE111 
000023C2  4E75                    2045              RTS
000023C4                          2046  
000023C4                          2047  *---------------------------------------------------------------------------*
000023C4                          2048  * SRC_MODE: decode and display source mode (bit 5 - 3)
000023C4                          2049  *---------------------------------------------------------------------------*  
000023C4                          2050  SRC_MODE    
000023C4                          2051              * clear registers to store temp data
000023C4  4280                    2052              CLR.L   D0                      
000023C6  4281                    2053              CLR.L   D1                      
000023C8  207C 00000000           2054              MOVEA.L #0, A0                  
000023CE  227C 00000000           2055              MOVEA.L #0, A1                  
000023D4  2205                    2056              MOVE.L  D5,D1
000023D6  E489                    2057              LSR.L   #2,D1
000023D8  0281 0000000E           2058              ANDI.L  #$E,D1
000023DE                          2059              
000023DE  0C01 0000               2060              CMPI.B  #0,D1   * Dn
000023E2  6700 002A               2061              BEQ     MODE000
000023E6  0C01 0002               2062              CMPI.B  #2,D1   * An 
000023EA  6700 004A               2063              BEQ     MODE001
000023EE  0C01 0004               2064              CMPI.B  #4,D1   * (An)
000023F2  6700 0056               2065              BEQ     MODE010
000023F6  0C01 0006               2066              CMPI.B  #6,D1   * (An)+
000023FA  6700 008E               2067              BEQ     MODE011
000023FE  0C01 0008               2068              CMPI.B  #8,D1   * -(An)
00002402  6700 00A6               2069              BEQ     MODE100
00002406  0C01 000F               2070              CMPI.B  #15,D1  * abs/immediate
0000240A  6700 00FE               2071              BEQ     MODE111 
0000240E                          2072        
0000240E                          2073  *---------------------------------------------------------------------------*
0000240E                          2074  * MODE000: decode and display source mode Dn
0000240E                          2075  *---------------------------------------------------------------------------*           
0000240E                          2076  MODE000     *Dn
0000240E  43F9 00003940           2077              LEA     DISP_D,A1
00002414  103C 000E               2078              MOVE.B  #14,D0
00002418  4E4F                    2079              TRAP    #15
0000241A  4EB9 000026AC           2080              JSR     SRC_REGISTER
00002420  4E75                    2081              RTS
00002422                          2082  
00002422                          2083  *---------------------------------------------------------------------------*
00002422                          2084  * D_MODE000: decode and display dest mode Dn
00002422                          2085  *---------------------------------------------------------------------------*
00002422                          2086  D_MODE000     *Dn
00002422  43F9 00003940           2087              LEA     DISP_D,A1
00002428  103C 000E               2088              MOVE.B  #14,D0
0000242C  4E4F                    2089              TRAP    #15
0000242E  4EB9 00002650           2090              JSR     DEST_REGISTER
00002434  4E75                    2091              RTS
00002436                          2092  
00002436                          2093  *---------------------------------------------------------------------------*
00002436                          2094  * MODE001: decode and display source mode An
00002436                          2095  *---------------------------------------------------------------------------* 
00002436                          2096  MODE001 *An
00002436  43F9 00003945           2097              LEA     DISP_A,A1
0000243C  103C 000E               2098              MOVE.B  #14,D0
00002440  4E4F                    2099              TRAP    #15
00002442  4EB9 000026AC           2100              JSR     SRC_REGISTER
00002448                          2101          
00002448  4E75                    2102              RTS
0000244A                          2103  
0000244A                          2104  *---------------------------------------------------------------------------*
0000244A                          2105  * MODE010: decode and display source mode (An)
0000244A                          2106  *---------------------------------------------------------------------------*    
0000244A                          2107  MODE010 *(An)
0000244A  43F9 00003951           2108              LEA     DISP_AOP,A1  *display (A
00002450  103C 000E               2109              MOVE.B  #14,D0
00002454  4E4F                    2110              TRAP    #15
00002456                          2111  
00002456  4EB9 000026AC           2112              JSR     SRC_REGISTER * display register
0000245C                          2113  
0000245C  43F9 0000394F           2114              LEA     DISP_CP,A1   *display )
00002462  103C 000E               2115              MOVE.B  #14,D0
00002466  4E4F                    2116              TRAP    #15
00002468                          2117              
00002468  4E75                    2118              RTS
0000246A                          2119  
0000246A                          2120  *---------------------------------------------------------------------------*
0000246A                          2121  * D_MODE010: decode and display dest mode (An)
0000246A                          2122  *---------------------------------------------------------------------------*
0000246A                          2123  D_MODE010 *(An)
0000246A  43F9 00003951           2124              LEA     DISP_AOP,A1  *display (A
00002470  103C 000E               2125              MOVE.B  #14,D0
00002474  4E4F                    2126              TRAP    #15
00002476                          2127     
00002476  4EB9 00002650           2128              JSR     DEST_REGISTER * display register
0000247C                          2129  
0000247C  43F9 0000394F           2130              LEA     DISP_CP,A1   *display )
00002482  103C 000E               2131              MOVE.B  #14,D0
00002486  4E4F                    2132              TRAP    #15
00002488                          2133              
00002488  4E75                    2134              RTS
0000248A                          2135  
0000248A                          2136  *---------------------------------------------------------------------------*
0000248A                          2137  * MODE011: decode and display source mode (An)+
0000248A                          2138  *---------------------------------------------------------------------------*
0000248A                          2139  MODE011 *(An)+
0000248A  43F9 00003951           2140              LEA     DISP_AOP,A1      *display (A
00002490  103C 000E               2141              MOVE.B  #14,D0
00002494  4E4F                    2142              TRAP    #15
00002496                          2143              
00002496  4EB9 000026AC           2144              JSR     SRC_REGISTER    * display register
0000249C                          2145  
0000249C  43F9 0000395E           2146              LEA     DISP_POST,A1    *display )+
000024A2  103C 000E               2147              MOVE.B  #14,D0
000024A6  4E4F                    2148              TRAP    #15
000024A8                          2149              
000024A8  4E75                    2150              RTS
000024AA                          2151              
000024AA                          2152  *---------------------------------------------------------------------------*
000024AA                          2153  * MODE100: decode and display source mode -(An)
000024AA                          2154  *---------------------------------------------------------------------------*
000024AA                          2155  MODE100 *-(An)
000024AA  43F9 00003957           2156              LEA     DISP_PRE,A1    *display -(A
000024B0  103C 000E               2157              MOVE.B  #14,D0
000024B4  4E4F                    2158              TRAP    #15
000024B6                          2159  
000024B6  4EB9 000026AC           2160              JSR     SRC_REGISTER    *display register
000024BC                          2161  
000024BC  43F9 0000394F           2162              LEA     DISP_CP,A1   *display )
000024C2  103C 000E               2163              MOVE.B  #14,D0
000024C6  4E4F                    2164              TRAP    #15
000024C8                          2165              
000024C8  4E75                    2166              RTS
000024CA                          2167  
000024CA                          2168  *---------------------------------------------------------------------------*
000024CA                          2169  * D_MODE011: decode and display dest mode (An)+
000024CA                          2170  *---------------------------------------------------------------------------*
000024CA                          2171  D_MODE011 *(An)+
000024CA  43F9 00003951           2172              LEA     DISP_AOP,A1      *display (A
000024D0  103C 000E               2173              MOVE.B  #14,D0
000024D4  4E4F                    2174              TRAP    #15
000024D6                          2175  
000024D6  4EB9 00002650           2176              JSR     DEST_REGISTER    * display register
000024DC                          2177  
000024DC  43F9 0000395E           2178              LEA     DISP_POST,A1    *display )+
000024E2  103C 000E               2179              MOVE.B  #14,D0
000024E6  4E4F                    2180              TRAP    #15
000024E8                          2181              
000024E8  4E75                    2182              RTS
000024EA                          2183              
000024EA                          2184  *---------------------------------------------------------------------------*
000024EA                          2185  * D_MODE100: decode and display dest mode -(An)
000024EA                          2186  *---------------------------------------------------------------------------*            
000024EA                          2187  D_MODE100 *-(An)
000024EA  43F9 00003957           2188              LEA     DISP_PRE,A1    *display -(A
000024F0  103C 000E               2189              MOVE.B  #14,D0
000024F4  4E4F                    2190              TRAP    #15
000024F6                          2191              
000024F6  4EB9 00002650           2192              JSR     DEST_REGISTER    *display register
000024FC                          2193  
000024FC  43F9 0000394F           2194              LEA     DISP_CP,A1   *display )
00002502  103C 000E               2195              MOVE.B  #14,D0
00002506  4E4F                    2196              TRAP    #15
00002508                          2197              
00002508  4E75                    2198              RTS
0000250A                          2199  
0000250A                          2200  *---------------------------------------------------------------------------*
0000250A                          2201  * MODE111: decode and display source mode absolute/immediate
0000250A                          2202  *---------------------------------------------------------------------------*
0000250A                          2203  MODE111     * abs/immediate
0000250A                          2204              * clear registers to store temp data
0000250A  4280                    2205              CLR.L   D0                      
0000250C  4281                    2206              CLR.L   D1                      
0000250E  207C 00000000           2207              MOVEA.L #0, A0                  
00002514  227C 00000000           2208              MOVEA.L #0, A1                  
0000251A  2205                    2209              MOVE.L  D5,D1
0000251C                          2210              
0000251C                          2211              * retrieve source register for MODE 111
0000251C  E389                    2212              LSL.L   #1,D1   * shift the bits to left by 1
0000251E  0281 0000000E           2213              ANDI.L  #$E,D1  * mask the first 4 bits 
00002524  0C01 0000               2214              CMPI.B  #0, D1  * if it's 0000, absolute word address
00002528  6700 003E               2215              BEQ     WORDMODE
0000252C  0C01 0002               2216              CMPI.B  #2, D1  * if it's 0010, absolute long address
00002530  6700 0062               2217              BEQ     LONGMODE
00002534  0C01 0008               2218              CMPI.B  #8, D1  * if it's 1000, immediate data
00002538  6700 0086               2219              BEQ     IMMEDIATE
0000253C                          2220       
0000253C                          2221  *---------------------------------------------------------------------------*
0000253C                          2222  * D_MODE111: decode and display dest mode absolute/immediate
0000253C                          2223  *---------------------------------------------------------------------------*           
0000253C                          2224  D_MODE111   * abs
0000253C                          2225              * clear registers to store temp data
0000253C  4280                    2226              CLR.L   D0                      
0000253E  4281                    2227              CLR.L   D1                      
00002540  207C 00000000           2228              MOVEA.L #0, A0                  
00002546  227C 00000000           2229              MOVEA.L #0, A1                  
0000254C  2205                    2230              MOVE.L  D5,D1
0000254E                          2231              
0000254E                          2232              * retrieve dest register for MODE 111
0000254E  EC89                    2233              LSR.L   #6,D1   * shift the bits to right by 6
00002550  E689                    2234              LSR.L   #3,D1   * shift the bits to right by extra 3
00002552  0201 0001               2235              ANDI.B  #1,D1   * mask the first 2 bits 
00002556  0C01 0000               2236              CMPI.B  #0, D1  * if it's 000, absolute word address
0000255A  6700 000C               2237              BEQ     WORDMODE
0000255E  0C01 0001               2238              CMPI.B  #1, D1  * if it's 001, absolute long address
00002562  6700 0030               2239              BEQ     LONGMODE
00002566                          2240              *JSR     OP_DATA *not sure..
00002566  4E75                    2241              RTS
00002568                          2242  
00002568                          2243  
00002568                          2244  *---------------------------------------------------------------------------*
00002568                          2245  * WORDMODE: absolute word address
00002568                          2246  *---------------------------------------------------------------------------*
00002568  43F9 0000393B           2247  WORDMODE    LEA     DISP_HEX,A1
0000256E  103C 000E               2248              MOVE.B  #14,D0
00002572  4E4F                    2249              TRAP    #15
00002574                          2250              
00002574  4285                    2251              CLR.L   D5
00002576  3A1D                    2252              MOVE.W  (A5)+,D5
00002578                          2253              
00002578  43F9 00003619           2254              LEA     TMPOUTPUT,A1
0000257E  2205                    2255              MOVE.L  D5,D1
00002580  7404                    2256              MOVE.L  #4,D2       *move word size 4
00002582  4EB8 11C6               2257              JSR     HEX2ASCII
00002586  43F9 00003619           2258              LEA     TMPOUTPUT,A1
0000258C  103C 000E               2259              MOVE.B  #14,D0
00002590  4E4F                    2260              TRAP    #15
00002592                          2261              
00002592  4E75                    2262              RTS
00002594                          2263  
00002594                          2264  *---------------------------------------------------------------------------*
00002594                          2265  * LONGMODE: absolute long address
00002594                          2266  *---------------------------------------------------------------------------*
00002594  43F9 0000393B           2267  LONGMODE    LEA     DISP_HEX,A1
0000259A  103C 000E               2268              MOVE.B  #14,D0
0000259E  4E4F                    2269              TRAP    #15
000025A0                          2270              
000025A0  4285                    2271              CLR.L   D5
000025A2  2A1D                    2272              MOVE.L  (A5)+,D5
000025A4                          2273              
000025A4  43F9 00003619           2274              LEA     TMPOUTPUT,A1
000025AA  2205                    2275              MOVE.L  D5,D1
000025AC  7408                    2276              MOVE.L  #8,D2           *move longword size 8
000025AE  4EB8 11C6               2277              JSR     HEX2ASCII
000025B2  43F9 00003619           2278              LEA     TMPOUTPUT,A1
000025B8  103C 000E               2279              MOVE.B  #14,D0
000025BC  4E4F                    2280              TRAP    #15
000025BE                          2281              
000025BE  4E75                    2282              RTS
000025C0                          2283  
000025C0                          2284  
000025C0                          2285  *---------------------------------------------------------------------------*
000025C0                          2286  * IMMEDIATE: immediate address
000025C0                          2287  *---------------------------------------------------------------------------*
000025C0  43F9 00003961           2288  IMMEDIATE   LEA     DISP_LB,A1
000025C6  103C 000E               2289              MOVE.B  #14,D0
000025CA  4E4F                    2290              TRAP    #15
000025CC  43F9 0000393B           2291              LEA     DISP_HEX,A1
000025D2  103C 000E               2292              MOVE.B  #14,D0
000025D6  4E4F                    2293              TRAP    #15
000025D8                          2294              
000025D8                          2295              * check for size
000025D8  0C04 0000               2296              CMPI.B  #0,D4
000025DC  6700 0012               2297              BEQ     IMMD_B
000025E0  0C04 0001               2298              CMPI.B  #1,D4
000025E4  6700 002A               2299              BEQ     IMMD_W
000025E8  0C04 0002               2300              CMPI.B  #2,D4
000025EC  6700 0042               2301              BEQ     IMMD_L
000025F0                          2302  
000025F0                          2303  IMMD_B
000025F0  4285                    2304              CLR.L   D5
000025F2  3A1D                    2305              MOVE.W  (A5)+,D5
000025F4                          2306              
000025F4  43F9 00003619           2307              LEA     TMPOUTPUT,A1
000025FA  2205                    2308              MOVE.L  D5,D1
000025FC  7402                    2309              MOVE.L  #2,D2
000025FE  4EB8 11C6               2310              JSR     HEX2ASCII
00002602  43F9 00003619           2311              LEA     TMPOUTPUT,A1
00002608  103C 000E               2312              MOVE.B  #14,D0
0000260C  4E4F                    2313              TRAP    #15
0000260E  4E75                    2314              RTS
00002610                          2315              
00002610                          2316  IMMD_W
00002610  4285                    2317              CLR.L   D5
00002612  3A1D                    2318              MOVE.W  (A5)+,D5
00002614                          2319              
00002614  43F9 00003619           2320              LEA     TMPOUTPUT,A1
0000261A  2205                    2321              MOVE.L  D5,D1
0000261C  7404                    2322              MOVE.L  #4,D2
0000261E  4EB8 11C6               2323              JSR     HEX2ASCII
00002622  43F9 00003619           2324              LEA     TMPOUTPUT,A1
00002628  103C 000E               2325              MOVE.B  #14,D0
0000262C  4E4F                    2326              TRAP    #15
0000262E  4E75                    2327              RTS
00002630                          2328              
00002630                          2329  
00002630                          2330  IMMD_L
00002630  4285                    2331              CLR.L   D5
00002632  3A1D                    2332              MOVE.W  (A5)+,D5
00002634                          2333              
00002634  43F9 00003619           2334              LEA     TMPOUTPUT,A1
0000263A  2205                    2335              MOVE.L  D5,D1
0000263C  7408                    2336              MOVE.L  #8,D2
0000263E  4EB8 11C6               2337              JSR     HEX2ASCII
00002642  43F9 00003619           2338              LEA     TMPOUTPUT,A1
00002648  103C 000E               2339              MOVE.B  #14,D0
0000264C  4E4F                    2340              TRAP    #15
0000264E  4E75                    2341              RTS
00002650                          2342  
00002650                          2343  
00002650                          2344  *---------------------------------------------------------------------------*
00002650                          2345  * DEST_REGISTER: decode and display destination register (bit 11 - 9)
00002650                          2346  *---------------------------------------------------------------------------*
00002650                          2347  DEST_REGISTER
00002650                          2348              * clear registers to store temp data
00002650  4280                    2349              CLR.L   D0                      
00002652  4281                    2350              CLR.L   D1                      
00002654  207C 00000000           2351              MOVEA.L #0, A0                  
0000265A  227C 00000000           2352              MOVEA.L #0, A1 
00002660                          2353              
00002660  2205                    2354              MOVE.L  D5,D1
00002662  EC89                    2355              LSR.L   #6,D1
00002664  E689                    2356              LSR.L   #3,D1
00002666  0281 00000007           2357              ANDI.L  #7,D1
0000266C                          2358              
0000266C  0C01 0000               2359              CMPI.B  #0,D1
00002670  6700 0092               2360              BEQ     REG_0
00002674  0C01 0001               2361              CMPI.B  #1,D1
00002678  6700 0098               2362              BEQ     REG_1
0000267C  0C01 0002               2363              CMPI.B  #2,D1
00002680  6700 009E               2364              BEQ     REG_2
00002684  0C01 0003               2365              CMPI.B  #3,D1
00002688  6700 00A4               2366              BEQ     REG_3
0000268C  0C01 0004               2367              CMPI.B  #4,D1
00002690  6700 00AA               2368              BEQ     REG_4
00002694  0C01 0005               2369              CMPI.B  #5,D1
00002698  6700 00B0               2370              BEQ     REG_5
0000269C  0C01 0006               2371              CMPI.B  #6,D1
000026A0  6700 00B6               2372              BEQ     REG_6
000026A4  0C01 0007               2373              CMPI.B  #7,D1
000026A8  6700 00BC               2374              BEQ     REG_7
000026AC                          2375  
000026AC                          2376  *---------------------------------------------------------------------------*
000026AC                          2377  * SRC_REGISTER: decode and display source register (bit 2 - 0)
000026AC                          2378  *---------------------------------------------------------------------------*           
000026AC                          2379  SRC_REGISTER 
000026AC                          2380              * clear registers to store temp data
000026AC  4280                    2381              CLR.L   D0                      
000026AE  4281                    2382              CLR.L   D1                      
000026B0  207C 00000000           2383              MOVEA.L #0, A0                  
000026B6  227C 00000000           2384              MOVEA.L #0, A1                  
000026BC                          2385              
000026BC  2205                    2386              MOVE.L  D5,D1   * temp store the processing data
000026BE  0281 00000007           2387              ANDI.L  #7,D1   * mask the first 4 bits with 0111
000026C4                          2388              
000026C4  0C01 0000               2389              CMPI.B  #0,D1
000026C8  6700 003A               2390              BEQ     REG_0
000026CC  0C01 0001               2391              CMPI.B  #1,D1
000026D0  6700 0040               2392              BEQ     REG_1
000026D4  0C01 0002               2393              CMPI.B  #2,D1
000026D8  6700 0046               2394              BEQ     REG_2
000026DC  0C01 0003               2395              CMPI.B  #3,D1
000026E0  6700 004C               2396              BEQ     REG_3
000026E4  0C01 0004               2397              CMPI.B  #4,D1
000026E8  6700 0052               2398              BEQ     REG_4
000026EC  0C01 0005               2399              CMPI.B  #5,D1
000026F0  6700 0058               2400              BEQ     REG_5
000026F4  0C01 0006               2401              CMPI.B  #6,D1
000026F8  6700 005E               2402              BEQ     REG_6
000026FC  0C01 0007               2403              CMPI.B  #7,D1
00002700  6700 0064               2404              BEQ     REG_7
00002704                          2405  
00002704                          2406  *---------------------------------------------------------------------------*
00002704                          2407  * REG_0 ~ REG_7: display register 0 to 7
00002704                          2408  *---------------------------------------------------------------------------*
00002704  43F9 00003966           2409  REG_0       LEA     DISP_0,A1
0000270A  103C 000E               2410              MOVE.B  #14,D0
0000270E  4E4F                    2411              TRAP    #15
00002710  4E75                    2412              RTS
00002712                          2413              
00002712  43F9 00003968           2414  REG_1       LEA     DISP_1,A1
00002718  103C 000E               2415              MOVE.B  #14,D0
0000271C  4E4F                    2416              TRAP    #15
0000271E  4E75                    2417              RTS
00002720                          2418              
00002720                          2419  
00002720  43F9 0000396A           2420  REG_2       LEA     DISP_2,A1
00002726  103C 000E               2421              MOVE.B  #14,D0
0000272A  4E4F                    2422              TRAP    #15
0000272C  4E75                    2423              RTS
0000272E                          2424            
0000272E  43F9 0000396C           2425  REG_3       LEA     DISP_3,A1
00002734  103C 000E               2426              MOVE.B  #14,D0
00002738  4E4F                    2427              TRAP    #15
0000273A  4E75                    2428              RTS
0000273C                          2429              
0000273C  43F9 0000396E           2430  REG_4       LEA     DISP_4,A1
00002742  103C 000E               2431              MOVE.B  #14,D0
00002746  4E4F                    2432              TRAP    #15
00002748  4E75                    2433              RTS
0000274A                          2434              
0000274A  43F9 00003970           2435  REG_5       LEA     DISP_5,A1
00002750  103C 000E               2436              MOVE.B  #14,D0
00002754  4E4F                    2437              TRAP    #15
00002756  4E75                    2438              RTS
00002758                          2439              
00002758  43F9 00003972           2440  REG_6       LEA     DISP_6,A1
0000275E  103C 000E               2441              MOVE.B  #14,D0
00002762  4E4F                    2442              TRAP    #15
00002764  4E75                    2443              RTS
00002766                          2444              
00002766  43F9 00003974           2445  REG_7       LEA     DISP_7,A1
0000276C  103C 000E               2446              MOVE.B  #14,D0
00002770  4E4F                    2447              TRAP    #15
00002772  4E75                    2448              RTS
00002774                          2449              
00002774                          2450  *---------------------------------------------------------------------------*
00002774                          2451  * REPEAT : Ask user whether they wish to run the program again
00002774                          2452  *---------------------------------------------------------------------------*           
00002774  4246                    2453  REPEAT      CLR.W   D6                      * Reset D6 (Loop Count)
00002776  43F9 0000343F           2454              LEA     REPEATMSG,A1
0000277C  103C 000E               2455              MOVE.B  #14,D0
00002780  4E4F                    2456              TRAP    #15
00002782                          2457              
00002782  43F9 000035C9           2458              LEA     TMPINPUT,A1             * allocate space to temp store user input
00002788  103C 0002               2459              MOVE.B  #2,D0
0000278C  4E4F                    2460              TRAP    #15
0000278E                          2461  
0000278E  0C01 0001               2462              CMPI.B  #1,D1                   * check for length of user input
00002792  66E0                    2463              BNE     REPEAT                  * return to the beginning of the function if unequal
00002794                          2464              
00002794  0C11 0059               2465              CMPI.B  #$59,(A1)               * compare the input with Y    
00002798  6700 E870               2466              BEQ     PROGLP                  * repeat the program
0000279C                          2467              
0000279C  0C11 0079               2468              CMPI.B  #$79,(A1)               * compare the input with y    
000027A0  6700 E868               2469              BEQ     PROGLP                  * repeat the program
000027A4                          2470              
000027A4  0C11 004E               2471              CMPI.B  #$4E,(A1)               * compare the input with N    
000027A8  6700 0928               2472              BEQ     TERMINATE               * finish program
000027AC                          2473              
000027AC  0C11 006E               2474              CMPI.B  #$6E,(A1)               * compare the input with n    
000027B0  6700 0920               2475              BEQ     TERMINATE               * finish program
000027B4                          2476              
000027B4  60BE                    2477              BRA     REPEAT                  * invalid input/repeat the function
000027B6                          2478  
000027B6                          2479  *---------------------------------------------------------------------------*
000027B6                          2480  * EA DECODING INTERFACE
000027B6                          2481  * [A0] - RESERVED FOR USE
000027B6                          2482  * [D2] - RESERVED FOR USE
000027B6                          2483  * RETURNS - ERROR FLAG IF FAILED TO PUSH SRC EA INTO STACK
000027B6                          2484  *---------------------------------------------------------------------------*
000027B6                          2485  GET_EA_EA_SRC
000027B6                          2486      *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
000027B6                          2487      
000027B6                          2488      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
000027B6  2405                    2489      MOVE.L  D5,D2                           * CLEAN COPY TO D2
000027B8  E68A                    2490      LSR.L   #3,D2                           * [D2] Temporarily used D2 for shifting bits            *TODO: DYNAMIC FOR ANY LOCATION OF SOURCE
000027BA  23C2 0000398C           2491      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
000027C0  7407                    2492      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
000027C2  C5B9 0000398C           2493      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
000027C8                          2494                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
000027C8                          2495      
000027C8                          2496      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
000027C8                          2497      *DESTINATION REGISTER FORMAT STANDARD         *
000027C8                          2498      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
000027C8                          2499      *WHEN BIT = 0(VALID ADDRESS MODE)             *
000027C8                          2500      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
000027C8                          2501      *0 - Dn                                       *
000027C8                          2502      *1 - An                                       *
000027C8                          2503      *2 - (An)                                     *
000027C8                          2504      *3 - (An)+                                    *
000027C8                          2505      *4 - -(An)                                    *
000027C8                          2506      *5 - (XXX).W                                  *
000027C8                          2507      *6 - (XXX).L                                  *
000027C8                          2508      *7 - #<data>                                  *
000027C8                          2509      ***********************************************
000027C8                          2510      
000027C8                          2511      *** Check if source ...  <ea> = Dn
000027C8                          2512  CHECK0    
000027C8  41F9 0000397C           2513            LEA     TEMP_REGISTER_FORMAT,A0
000027CE  1439 0000397B           2514            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000027D4  1082                    2515            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000027D6  0239 0001 0000397C      2516            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
000027DE  0C39 0001 0000397C      2517            CMPI.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
000027E6  6700 006A               2518            BEQ     CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
000027EA  0CB9 00000000 0000398C  2519            CMPI.L     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn) - COMPARE MODES TO SEE IF IT IS THIS MODE
000027F4  6600 005C               2520            BNE     CHECK1
000027F8                          2521            
000027F8                          2522            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000027F8  163C 0020               2523            MOVE.B    #' ',D3
000027FC  6100 0856               2524            BSR       PUSH_STACK
00002800  163C 0044               2525            MOVE.B    #'D',D3
00002804  6100 084E               2526            BSR       PUSH_STACK
00002808                          2527  
00002808                          2528            *FIND REGISTER NUMBER END LOCATION*  
00002808  13F9 0000397E 00003984  2529            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002812  0239 000F 00003984      2530            AND.B   #$0F,VAR_BYTE_END
0000281A                          2531            
0000281A                          2532            *GET INDEX OF THE END OF SRC REGISTER NUMBER
0000281A  23C5 00003988           2533            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002820  1439 00003984           2534            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002826                          2535            
00002826                          2536            *INTITIALIZE FOR BIT SHIFTING
00002826  41F9 00003988           2537            LEA     VAR_TEMP_CLEANCOPY,A0
0000282C  2639 00003988           2538            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002832                          2539  LOOP_SHIFTING
00002832  0C02 0000               2540            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002836  6700 0008               2541            BEQ     MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
0000283A  E24B                    2542            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
0000283C  5302                    2543            SUB.B   #1,D2                     *DECREMENT COUNTER
0000283E  60F2                    2544            BRA     LOOP_SHIFTING             *CONTINUE SHIFTING
00002840                          2545  MASKING_NEXT
00002840  C6BC 00000007           2546            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002846  0603 0030               2547            ADD.B   #$30,D3                   *CONVERT TO CHAR
0000284A  6100 0808               2548            BSR     PUSH_STACK                *PUSH TO STACK
0000284E                          2549            
0000284E  6000 0394               2550            BRA     GET_SRC_SUCCESS           *RETURN          
00002852                          2551            
00002852                          2552            
00002852                          2553            *** Check if source ...  <ea> = An
00002852  41F9 0000397C           2554  CHECK1    LEA     TEMP_REGISTER_FORMAT,A0
00002858  1439 0000397B           2555            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000285E  1082                    2556            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002860  0239 0002 0000397C      2557            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
00002868  0C39 0002 0000397C      2558            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
00002870  6700 006A               2559            BEQ     CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00002874  0CB9 00000001 0000398C  2560            CMPI.L  #1,VAR_LONG_ADDRESS_MODE_CHECK                      * An - COMPARE MODES TO SEE IF IT IS THIS MODE
0000287E  6600 005C               2561            BNE     CHECK2
00002882                          2562            
00002882                          2563            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002882  163C 0020               2564            MOVE.B    #' ',D3
00002886  6100 07CC               2565            BSR       PUSH_STACK
0000288A  163C 0041               2566            MOVE.B    #'A',D3
0000288E  6100 07C4               2567            BSR       PUSH_STACK
00002892                          2568  
00002892                          2569            
00002892                          2570            *FIND REGISTER NUMBER END LOCATION*  
00002892  13F9 0000397E 00003984  2571            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
0000289C  0239 000F 00003984      2572            AND.B   #$0F,VAR_BYTE_END
000028A4                          2573            
000028A4                          2574            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000028A4  23C5 00003988           2575            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000028AA  1439 00003984           2576            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
000028B0                          2577            
000028B0                          2578            *INTITIALIZE FOR BIT SHIFTING
000028B0  41F9 00003988           2579            LEA     VAR_TEMP_CLEANCOPY,A0
000028B6  2639 00003988           2580            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000028BC                          2581  LOOP_SHIFTING1
000028BC  0C02 0000               2582            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000028C0  6700 0008               2583            BEQ     MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
000028C4  E24B                    2584            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000028C6  5302                    2585            SUB.B   #1,D2                     *DECREMENT COUNTER
000028C8  60F2                    2586            BRA     LOOP_SHIFTING1             *CONTINUE SHIFTING
000028CA                          2587  MASKING_NEXT1
000028CA  C6BC 00000007           2588            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000028D0  0603 0030               2589            ADD.B   #$30,D3                   *CONVERT TO CHAR
000028D4  6100 077E               2590            BSR     PUSH_STACK                *PUSH TO STACK
000028D8                          2591            
000028D8  6000 030A               2592            BRA     GET_SRC_SUCCESS                   *RETURN 
000028DC                          2593            
000028DC                          2594            
000028DC                          2595            
000028DC                          2596            
000028DC                          2597            *** Check if source ...  <ea> = (An)       
000028DC  41F9 0000397C           2598  CHECK2    LEA     TEMP_REGISTER_FORMAT,A0
000028E2  1439 0000397B           2599            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000028E8  1082                    2600            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000028EA  0239 0004 0000397C      2601            ANDI.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
000028F2  0C39 0004 0000397C      2602            CMPI.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
000028FA  6700 007A               2603            BEQ     CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
000028FE  0CB9 00000002 0000398C  2604            CMPI.L   #2,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)  COMPARE MODES TO SEE IF IT IS THIS MODE                                                                *change: checkx++*
00002908  6600 006C               2605            BNE     CHECK3
0000290C                          2606            
0000290C                          2607            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
0000290C  163C 0020               2608            MOVE.B    #' ',D3
00002910  6100 0742               2609            BSR       PUSH_STACK
00002914  163C 0028               2610            MOVE.B    #'(',D3
00002918  6100 073A               2611            BSR       PUSH_STACK
0000291C  163C 0041               2612            MOVE.B    #'A',D3
00002920  6100 0732               2613            BSR       PUSH_STACK
00002924                          2614  
00002924                          2615            
00002924                          2616            *FIND REGISTER NUMBER END LOCATION*  
00002924  13F9 0000397E 00003984  2617            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
0000292E  0239 000F 00003984      2618            AND.B   #$0F,VAR_BYTE_END
00002936                          2619            
00002936                          2620            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002936  23C5 00003988           2621            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
0000293C  1439 00003984           2622            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002942                          2623            
00002942                          2624            *INTITIALIZE FOR BIT SHIFTING
00002942  41F9 00003988           2625            LEA     VAR_TEMP_CLEANCOPY,A0
00002948  2639 00003988           2626            MOVE.L  VAR_TEMP_CLEANCOPY,D3
0000294E                          2627  LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
0000294E  0C02 0000               2628            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002952  6700 0008               2629            BEQ     MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002956  E24B                    2630            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002958  5302                    2631            SUB.B   #1,D2                     *DECREMENT COUNTER
0000295A  60F2                    2632            BRA     LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
0000295C                          2633  MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
0000295C  0283 00000007           2634            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002962  0603 0030               2635            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002966  6100 06EC               2636            BSR     PUSH_STACK                *PUSH TO STACK
0000296A                          2637            
0000296A  163C 0029               2638            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
0000296E  6100 06E4               2639            BSR       PUSH_STACK
00002972                          2640            
00002972  6000 0270               2641            BRA     GET_SRC_SUCCESS                   *RETURN 
00002976                          2642  
00002976                          2643            
00002976                          2644            
00002976                          2645                      
00002976                          2646  *** Check if source ...  <ea> = (An)+       
00002976  41F9 0000397C           2647  CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
0000297C  1439 0000397B           2648            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002982  1082                    2649            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002984  0239 0008 0000397C      2650            ANDI.B  #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
0000298C  0C39 0008 0000397C      2651            CMPI.B  #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
00002994  6700 0082               2652            BEQ     CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002998  0CB9 00000003 0000398C  2653            CMPI.L  #3,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)+ - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
000029A2  6600 0074               2654            BNE     CHECK4
000029A6                          2655            
000029A6                          2656            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
000029A6  163C 0020               2657            MOVE.B    #' ',D3
000029AA  6100 06A8               2658            BSR       PUSH_STACK
000029AE  163C 0028               2659            MOVE.B    #'(',D3
000029B2  6100 06A0               2660            BSR       PUSH_STACK
000029B6  163C 0041               2661            MOVE.B    #'A',D3
000029BA  6100 0698               2662            BSR       PUSH_STACK
000029BE                          2663  
000029BE                          2664            
000029BE                          2665            *FIND REGISTER NUMBER END LOCATION*  
000029BE  13F9 0000397E 00003984  2666            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
000029C8  0239 000F 00003984      2667            ANDI.B   #$0F,VAR_BYTE_END
000029D0                          2668            
000029D0                          2669            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000029D0  23C5 00003988           2670            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000029D6  1439 00003984           2671            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000029DC                          2672            
000029DC                          2673            *INTITIALIZE FOR BIT SHIFTING
000029DC  41F9 00003988           2674            LEA     VAR_TEMP_CLEANCOPY,A0
000029E2  2639 00003988           2675            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000029E8                          2676            
000029E8                          2677  LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
000029E8  0C02 0000               2678            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000029EC  6700 0008               2679            BEQ     MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
000029F0  E24B                    2680            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000029F2  5302                    2681            SUBI.B   #1,D2                     *DECREMENT COUNTER
000029F4  60F2                    2682            BRA     LOOP_SHIFTING3            *CONTINUE SHIFTING 
000029F6                          2683                                               *change: NAME OF LABEL*
000029F6                          2684  MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
000029F6  0283 00000007           2685            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000029FC  0603 0030               2686            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002A00  6100 0652               2687            BSR     PUSH_STACK                *PUSH TO STACK
00002A04                          2688            
00002A04  163C 0029               2689            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002A08  6100 064A               2690            BSR       PUSH_STACK
00002A0C  163C 002B               2691            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002A10  6100 0642               2692            BSR       PUSH_STACK
00002A14                          2693            
00002A14  6000 01CE               2694            BRA       GET_SRC_SUCCESS                   *RETURN 
00002A18                          2695  
00002A18                          2696            
00002A18                          2697            
00002A18                          2698                      
00002A18                          2699            *** Check if source ...  <ea> = -(An)       
00002A18  41F9 0000397C           2700  CHECK4    LEA     TEMP_REGISTER_FORMAT,A0
00002A1E  1439 0000397B           2701            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002A24  1082                    2702            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002A26  0239 0010 0000397C      2703            ANDI.B  #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
00002A2E  0C39 0010 0000397C      2704            CMPI.B  #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002A36  6700 0082               2705            BEQ     CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002A3A  0CB9 00000004 0000398C  2706            CMPI.L  #4,VAR_LONG_ADDRESS_MODE_CHECK                      * -(An) - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00002A44  6600 0074               2707            BNE     CHECK7
00002A48                          2708            
00002A48                          2709            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002A48  163C 0020               2710            MOVE.B    #' ',D3
00002A4C  6100 0606               2711            BSR       PUSH_STACK
00002A50  163C 002D               2712            MOVE.B    #'-',D3
00002A54  6100 05FE               2713            BSR       PUSH_STACK
00002A58  163C 0028               2714            MOVE.B    #'(',D3
00002A5C  6100 05F6               2715            BSR       PUSH_STACK
00002A60  163C 0041               2716            MOVE.B    #'A',D3
00002A64  6100 05EE               2717            BSR       PUSH_STACK
00002A68                          2718  
00002A68                          2719            
00002A68                          2720            *FIND REGISTER NUMBER END LOCATION*  
00002A68  13F9 0000397E 00003984  2721            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002A72  0239 000F 00003984      2722            AND.B   #$0F,VAR_BYTE_END
00002A7A                          2723            
00002A7A                          2724            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002A7A  23C5 00003988           2725            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002A80  1439 00003984           2726            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002A86                          2727            
00002A86                          2728            *INTITIALIZE FOR BIT SHIFTING
00002A86  41F9 00003988           2729            LEA     VAR_TEMP_CLEANCOPY,A0
00002A8C  2639 00003988           2730            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002A92                          2731            
00002A92                          2732  LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
00002A92  0C02 0000               2733            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002A96  6700 0008               2734            BEQ     MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002A9A  E24B                    2735            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002A9C  5302                    2736            SUBI.B   #1,D2                     *DECREMENT COUNTER
00002A9E  60F2                    2737            BRA     LOOP_SHIFTING4            *CONTINUE SHIFTING 
00002AA0                          2738                                               *change: NAME OF LABEL*
00002AA0                          2739  MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
00002AA0  0283 00000007           2740            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002AA6  0603 0030               2741            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002AAA  6100 05A8               2742            BSR     PUSH_STACK                *PUSH TO STACK
00002AAE                          2743            
00002AAE  163C 0029               2744            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002AB2  6100 05A0               2745            BSR       PUSH_STACK
00002AB6                          2746            
00002AB6  6000 012C               2747            BRA     GET_SRC_SUCCESS                   *RETURN
00002ABA                          2748            
00002ABA                          2749                      
00002ABA                          2750            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
00002ABA  0CB9 00000007 0000398C  2751  CHECK7    CMPI.L  #7,VAR_LONG_ADDRESS_MODE_CHECK                      *IF (MODE != 111)
00002AC4  6600 011A               2752            BNE     GET_SRC_FAILED                                      *THAN BRANCH TO UNCESSFULL SRC MODE READ
00002AC8                          2753                   
00002AC8                          2754            *NEXT: (MODE == 111) 
00002AC8                          2755            *NOW: CHECK FOR SRC REGISTER 
00002AC8                          2756                  *(000 = (xxx).W)
00002AC8                          2757                  *(001 = (xxx).L)
00002AC8                          2758                  *(010 = #<data>)
00002AC8                          2759                  
00002AC8                          2760            *FIND REGISTER NUMBER END LOCATION*  
00002AC8  13F9 0000397E 00003984  2761            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002AD2  0239 000F 00003984      2762            AND.B   #$0F,VAR_BYTE_END
00002ADA                          2763            
00002ADA                          2764            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002ADA  23C5 00003988           2765            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002AE0  1439 00003984           2766            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002AE6                          2767            
00002AE6                          2768            *INTITIALIZE FOR BIT SHIFTING
00002AE6  41F9 00003988           2769            LEA     VAR_TEMP_CLEANCOPY,A0
00002AEC  2C39 00003988           2770            MOVE.L  VAR_TEMP_CLEANCOPY,D6
00002AF2                          2771  SRC_LOOP_SHIFTING
00002AF2  0C02 0000               2772            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002AF6  6700 0008               2773            BEQ     SRC_MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00002AFA  E24E                    2774            LSR     #1,D6                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002AFC  5302                    2775            SUB.B   #1,D2                     *DECREMENT COUNTER
00002AFE  60F2                    2776            BRA     SRC_LOOP_SHIFTING             *CONTINUE SHIFTING
00002B00                          2777  SRC_MASKING_NEXT
00002B00  CCBC 00000007           2778            AND.L   #7,D6                     *MASK, ONLY NEED 0-2 BIT INDEXES 
00002B06                          2779           *D3 - REGISTER NUMBER NEEDED TO CHECK WHICH W/L/#<DATA>*
00002B06                          2780           
00002B06                          2781  CHECK_WORD  
00002B06  41F9 0000397C           2782            LEA     TEMP_REGISTER_FORMAT,A0
00002B0C  1439 0000397B           2783            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002B12  1082                    2784            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002B14  0239 0020 0000397C      2785            ANDI.B  #$20,TEMP_REGISTER_FORMAT                           * MASKS 0010 0000                                                     *change <SRC>*
00002B1C  0C39 0020 0000397C      2786            CMPI.B  #$20,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0010 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002B24  6700 0026               2787            BEQ     CHECK_LONG                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00002B28  0C06 0000               2788            CMPI.B  #0,D6                          
00002B2C  6600 001E               2789            BNE     CHECK_LONG 
00002B30                          2790            
00002B30                          2791            *IT IS A WORD AT THIS POINT*
00002B30                          2792            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002B30  163C 0020               2793            MOVE.B    #' ',D3
00002B34  6100 051E               2794            BSR       PUSH_STACK
00002B38  163C 0024               2795            MOVE.B    #'$',D3
00002B3C  6100 0516               2796            BSR       PUSH_STACK
00002B40  321D                    2797            MOVE.W    (A5)+,D1
00002B42  7404                    2798            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00002B44  6100 E6C2               2799            BSR       HEX2ASCII2STACK
00002B48  6000 009A               2800            BRA     GET_SRC_SUCCESS
00002B4C                          2801  
00002B4C                          2802  CHECK_LONG
00002B4C  41F9 0000397C           2803            LEA     TEMP_REGISTER_FORMAT,A0
00002B52  1439 0000397B           2804            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002B58  1082                    2805            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002B5A  0239 0040 0000397C      2806            ANDI.B  #$40,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00002B62  0C39 0040 0000397C      2807            CMPI.B  #$40,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002B6A  6700 002E               2808            BEQ     CHECK_IMMEDIATE                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00002B6E  0C06 0001               2809            CMPI.B  #1,D6                          
00002B72  6600 0026               2810            BNE     CHECK_IMMEDIATE  
00002B76                          2811  
00002B76                          2812            *IT IS A WORD AT THIS POINT*
00002B76                          2813            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002B76  163C 0020               2814            MOVE.B    #' ',D3
00002B7A  6100 04D8               2815            BSR       PUSH_STACK
00002B7E  163C 0024               2816            MOVE.B    #'$',D3
00002B82  6100 04D0               2817            BSR       PUSH_STACK
00002B86  321D                    2818            MOVE.W    (A5)+,D1
00002B88  7404                    2819            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00002B8A  6100 E67C               2820            BSR       HEX2ASCII2STACK
00002B8E  321D                    2821            MOVE.W    (A5)+,D1
00002B90  7404                    2822            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00002B92  6100 E674               2823            BSR       HEX2ASCII2STACK
00002B96  6000 004C               2824            BRA     GET_SRC_SUCCESS
00002B9A                          2825            
00002B9A                          2826  CHECK_IMMEDIATE
00002B9A  41F9 0000397C           2827            LEA     TEMP_REGISTER_FORMAT,A0
00002BA0  1439 0000397B           2828            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002BA6  1082                    2829            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002BA8  0239 0080 0000397C      2830            ANDI.B  #$80,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00002BB0  0C39 0080 0000397C      2831            CMPI.B  #$80,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002BB8  6700 0026               2832            BEQ     GET_SRC_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00002BBC  0C06 0004               2833            CMPI.B  #4,D6                          
00002BC0  6600 001E               2834            BNE     GET_SRC_FAILED 
00002BC4                          2835  
00002BC4                          2836            *IT IS A WORD AT THIS POINT*
00002BC4                          2837            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002BC4  163C 0020               2838            MOVE.B    #' ',D3
00002BC8  6100 048A               2839            BSR       PUSH_STACK
00002BCC  163C 0023               2840            MOVE.B    #'#',D3
00002BD0  6100 0482               2841            BSR       PUSH_STACK
00002BD4  321D                    2842            MOVE.W    (A5)+,D1
00002BD6  7404                    2843            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00002BD8  6100 E62E               2844            BSR       HEX2ASCII2STACK
00002BDC  6000 0006               2845            BRA     GET_SRC_SUCCESS
00002BE0                          2846            
00002BE0                          2847  GET_SRC_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
00002BE0  7801                    2848            MOVE.L #1,D4
00002BE2  4E75                    2849            RTS
00002BE4                          2850  GET_SRC_SUCCESS 
00002BE4  4E75                    2851            RTS
00002BE6                          2852                                 
00002BE6                          2853      
00002BE6                          2854  
00002BE6                          2855  
00002BE6                          2856  
00002BE6                          2857  
00002BE6                          2858  
00002BE6                          2859  
00002BE6                          2860  GET_EA_EA_DEST
00002BE6                          2861  *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
00002BE6                          2862      
00002BE6                          2863      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
00002BE6  2405                    2864      MOVE.L  D5,D2                           * CLEAN COPY TO D2
00002BE8  EC8A                    2865      LSR.L   #6,D2                           * [D2] Temporarily used D2 for shifting bits                *TODO: DYNAMIC MODE LOCATION
00002BEA  23C2 0000398C           2866      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
00002BF0  7407                    2867      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
00002BF2  C5B9 0000398C           2868      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
00002BF8                          2869                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
00002BF8                          2870      
00002BF8                          2871      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
00002BF8                          2872      *DESTINATION REGISTER FORMAT STANDARD         *
00002BF8                          2873      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
00002BF8                          2874      *WHEN BIT = 0(VALID ADDRESS MODE)             *
00002BF8                          2875      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
00002BF8                          2876      *0 - Dn                                       *
00002BF8                          2877      *1 - An                                       *
00002BF8                          2878      *2 - (An)                                     *
00002BF8                          2879      *3 - (An)+                                    *
00002BF8                          2880      *4 - -(An)                                    *
00002BF8                          2881      *5 - (XXX).W                                  *
00002BF8                          2882      *6 - (XXX).L                                  *
00002BF8                          2883      *7 - #<data>                                  *
00002BF8                          2884      ***********************************************
00002BF8                          2885      
00002BF8                          2886      *** Check if source ...  <ea> = Dn
00002BF8                          2887  DEST_CHECK0    
00002BF8  41F9 0000397C           2888            LEA     TEMP_REGISTER_FORMAT,A0
00002BFE  1439 0000397A           2889            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002C04  1082                    2890            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002C06  0239 0001 0000397C      2891            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
00002C0E  0C39 0001 0000397C      2892            CMPI.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
00002C16  6700 006A               2893            BEQ     DEST_CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00002C1A  0CB9 00000000 0000398C  2894            CMPI.L     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn) - COMPARE MODES TO SEE IF IT IS THIS MODE
00002C24  6600 005C               2895            BNE     DEST_CHECK1
00002C28                          2896            
00002C28                          2897            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002C28  163C 0020               2898            MOVE.B    #' ',D3
00002C2C  6100 0426               2899            BSR       PUSH_STACK
00002C30  163C 0044               2900            MOVE.B    #'D',D3
00002C34  6100 041E               2901            BSR       PUSH_STACK
00002C38                          2902  
00002C38                          2903            *FIND REGISTER NUMBER END LOCATION*  
00002C38  13F9 0000397D 00003984  2904            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002C42  0239 000F 00003984      2905            AND.B   #$0F,VAR_BYTE_END
00002C4A                          2906            
00002C4A                          2907            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002C4A  23C5 00003988           2908            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002C50  1439 00003984           2909            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002C56                          2910            
00002C56                          2911            *INTITIALIZE FOR BIT SHIFTING
00002C56  41F9 00003988           2912            LEA     VAR_TEMP_CLEANCOPY,A0
00002C5C  2639 00003988           2913            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002C62                          2914  DEST_LOOP_SHIFTING
00002C62  0C02 0000               2915            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002C66  6700 0008               2916            BEQ     DEST_MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00002C6A  E24B                    2917            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002C6C  5302                    2918            SUB.B   #1,D2                     *DECREMENT COUNTER
00002C6E  60F2                    2919            BRA     DEST_LOOP_SHIFTING             *CONTINUE SHIFTING
00002C70                          2920  DEST_MASKING_NEXT
00002C70  C6BC 00000007           2921            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002C76  0603 0030               2922            ADD.B   #$30,D3                   *CONVERT TO CHAR
00002C7A  6100 03D8               2923            BSR     PUSH_STACK                *PUSH TO STACK
00002C7E                          2924            
00002C7E  6000 0394               2925            BRA     GET_DST_SUCCESS           *RETURN          
00002C82                          2926            
00002C82                          2927            
00002C82                          2928            *** Check if source ...  <ea> = An
00002C82                          2929  DEST_CHECK1    
00002C82  41F9 0000397C           2930            LEA     TEMP_REGISTER_FORMAT,A0
00002C88  1439 0000397A           2931            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002C8E  1082                    2932            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002C90  0239 0002 0000397C      2933            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
00002C98  0C39 0002 0000397C      2934            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
00002CA0  6700 006A               2935            BEQ     DEST_CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00002CA4  0CB9 00000001 0000398C  2936            CMPI.L  #1,VAR_LONG_ADDRESS_MODE_CHECK                      * An - COMPARE MODES TO SEE IF IT IS THIS MODE
00002CAE  6600 005C               2937            BNE     DEST_CHECK2
00002CB2                          2938            
00002CB2                          2939            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002CB2  163C 0020               2940            MOVE.B    #' ',D3
00002CB6  6100 039C               2941            BSR       PUSH_STACK
00002CBA  163C 0041               2942            MOVE.B    #'A',D3
00002CBE  6100 0394               2943            BSR       PUSH_STACK
00002CC2                          2944  
00002CC2                          2945            
00002CC2                          2946            *FIND REGISTER NUMBER END LOCATION*  
00002CC2  13F9 0000397D 00003984  2947            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002CCC  0239 000F 00003984      2948            AND.B   #$0F,VAR_BYTE_END
00002CD4                          2949            
00002CD4                          2950            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002CD4  23C5 00003988           2951            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002CDA  1439 00003984           2952            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
00002CE0                          2953            
00002CE0                          2954            *INTITIALIZE FOR BIT SHIFTING
00002CE0  41F9 00003988           2955            LEA     VAR_TEMP_CLEANCOPY,A0
00002CE6  2639 00003988           2956            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002CEC                          2957  DEST_LOOP_SHIFTING1
00002CEC  0C02 0000               2958            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002CF0  6700 0008               2959            BEQ     DEST_MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00002CF4  E24B                    2960            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002CF6  5302                    2961            SUB.B   #1,D2                     *DECREMENT COUNTER
00002CF8  60F2                    2962            BRA     DEST_LOOP_SHIFTING1             *CONTINUE SHIFTING
00002CFA                          2963  DEST_MASKING_NEXT1
00002CFA  C6BC 00000007           2964            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002D00  0603 0030               2965            ADD.B   #$30,D3                   *CONVERT TO CHAR
00002D04  6100 034E               2966            BSR     PUSH_STACK                *PUSH TO STACK
00002D08                          2967            
00002D08  6000 030A               2968            BRA     GET_DST_SUCCESS                   *RETURN 
00002D0C                          2969            
00002D0C                          2970            
00002D0C                          2971            
00002D0C                          2972            
00002D0C                          2973            *** Check if source ...  <ea> = (An)       
00002D0C                          2974  DEST_CHECK2    
00002D0C  41F9 0000397C           2975            LEA     TEMP_REGISTER_FORMAT,A0
00002D12  1439 0000397A           2976            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002D18  1082                    2977            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002D1A  0239 0004 0000397C      2978            ANDI.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
00002D22  0C39 0004 0000397C      2979            CMPI.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
00002D2A  6700 007A               2980            BEQ     DEST_CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002D2E  0CB9 00000002 0000398C  2981            CMPI.L   #2,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)  COMPARE MODES TO SEE IF IT IS THIS MODE                                                                *change: checkx++*
00002D38  6600 006C               2982            BNE     DEST_CHECK3
00002D3C                          2983            
00002D3C                          2984            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002D3C  163C 0020               2985            MOVE.B    #' ',D3
00002D40  6100 0312               2986            BSR       PUSH_STACK
00002D44  163C 0028               2987            MOVE.B    #'(',D3
00002D48  6100 030A               2988            BSR       PUSH_STACK
00002D4C  163C 0041               2989            MOVE.B    #'A',D3
00002D50  6100 0302               2990            BSR       PUSH_STACK
00002D54                          2991  
00002D54                          2992            
00002D54                          2993            *FIND REGISTER NUMBER END LOCATION*  
00002D54  13F9 0000397D 00003984  2994            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002D5E  0239 000F 00003984      2995            AND.B   #$0F,VAR_BYTE_END
00002D66                          2996            
00002D66                          2997            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002D66  23C5 00003988           2998            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002D6C  1439 00003984           2999            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002D72                          3000            
00002D72                          3001            *INTITIALIZE FOR BIT SHIFTING
00002D72  41F9 00003988           3002            LEA     VAR_TEMP_CLEANCOPY,A0
00002D78  2639 00003988           3003            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002D7E                          3004  DEST_LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
00002D7E  0C02 0000               3005            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002D82  6700 0008               3006            BEQ     DEST_MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002D86  E24B                    3007            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002D88  5302                    3008            SUB.B   #1,D2                     *DECREMENT COUNTER
00002D8A  60F2                    3009            BRA     DEST_LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
00002D8C                          3010  DEST_MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
00002D8C  0283 00000007           3011            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002D92  0603 0030               3012            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002D96  6100 02BC               3013            BSR     PUSH_STACK                *PUSH TO STACK
00002D9A                          3014            
00002D9A  163C 0029               3015            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002D9E  6100 02B4               3016            BSR       PUSH_STACK
00002DA2                          3017            
00002DA2  6000 0270               3018            BRA     GET_DST_SUCCESS                   *RETURN 
00002DA6                          3019  
00002DA6                          3020            
00002DA6                          3021            
00002DA6                          3022                      
00002DA6                          3023  *** Check if source ...  <ea> = (An)+       
00002DA6  41F9 0000397C           3024  DEST_CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
00002DAC  1439 0000397A           3025            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002DB2  1082                    3026            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002DB4  0239 0008 0000397C      3027            ANDI.B  #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
00002DBC  0C39 0008 0000397C      3028            CMPI.B  #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
00002DC4  6700 0082               3029            BEQ     DEST_CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002DC8  0CB9 00000003 0000398C  3030            CMPI.L  #3,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)+ - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00002DD2  6600 0074               3031            BNE     DEST_CHECK4
00002DD6                          3032            
00002DD6                          3033            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002DD6  163C 0020               3034            MOVE.B    #' ',D3
00002DDA  6100 0278               3035            BSR       PUSH_STACK
00002DDE  163C 0028               3036            MOVE.B    #'(',D3
00002DE2  6100 0270               3037            BSR       PUSH_STACK
00002DE6  163C 0041               3038            MOVE.B    #'A',D3
00002DEA  6100 0268               3039            BSR       PUSH_STACK
00002DEE                          3040  
00002DEE                          3041            
00002DEE                          3042            *FIND REGISTER NUMBER END LOCATION*  
00002DEE  13F9 0000397D 00003984  3043            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002DF8  0239 000F 00003984      3044            ANDI.B   #$0F,VAR_BYTE_END
00002E00                          3045            
00002E00                          3046            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002E00  23C5 00003988           3047            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002E06  1439 00003984           3048            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002E0C                          3049            
00002E0C                          3050            *INTITIALIZE FOR BIT SHIFTING
00002E0C  41F9 00003988           3051            LEA     VAR_TEMP_CLEANCOPY,A0
00002E12  2639 00003988           3052            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002E18                          3053            
00002E18                          3054  DEST_LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
00002E18  0C02 0000               3055            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002E1C  6700 0008               3056            BEQ     DEST_MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002E20  E24B                    3057            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002E22  5302                    3058            SUBI.B   #1,D2                     *DECREMENT COUNTER
00002E24  60F2                    3059            BRA     DEST_LOOP_SHIFTING3            *CONTINUE SHIFTING 
00002E26                          3060                                               *change: NAME OF LABEL*
00002E26                          3061  DEST_MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
00002E26  0283 00000007           3062            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002E2C  0603 0030               3063            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002E30  6100 0222               3064            BSR     PUSH_STACK                *PUSH TO STACK
00002E34                          3065            
00002E34  163C 0029               3066            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002E38  6100 021A               3067            BSR       PUSH_STACK
00002E3C  163C 002B               3068            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002E40  6100 0212               3069            BSR       PUSH_STACK
00002E44                          3070            
00002E44  6000 01CE               3071            BRA       GET_DST_SUCCESS                   *RETURN 
00002E48                          3072  
00002E48                          3073            
00002E48                          3074            
00002E48                          3075                      
00002E48                          3076            *** Check if source ...  <ea> = -(An)       
00002E48                          3077  DEST_CHECK4    
00002E48  41F9 0000397C           3078            LEA     TEMP_REGISTER_FORMAT,A0
00002E4E  1439 0000397A           3079            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002E54  1082                    3080            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002E56  0239 0010 0000397C      3081            ANDI.B  #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
00002E5E  0C39 0010 0000397C      3082            CMPI.B  #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002E66  6700 0082               3083            BEQ     DEST_CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002E6A  0CB9 00000004 0000398C  3084            CMPI.L  #4,VAR_LONG_ADDRESS_MODE_CHECK                      * -(An) - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00002E74  6600 0074               3085            BNE     DEST_CHECK7
00002E78                          3086            
00002E78                          3087            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002E78  163C 0020               3088            MOVE.B    #' ',D3
00002E7C  6100 01D6               3089            BSR       PUSH_STACK
00002E80  163C 002D               3090            MOVE.B    #'-',D3
00002E84  6100 01CE               3091            BSR       PUSH_STACK
00002E88  163C 0028               3092            MOVE.B    #'(',D3
00002E8C  6100 01C6               3093            BSR       PUSH_STACK
00002E90  163C 0041               3094            MOVE.B    #'A',D3
00002E94  6100 01BE               3095            BSR       PUSH_STACK
00002E98                          3096  
00002E98                          3097            
00002E98                          3098            *FIND REGISTER NUMBER END LOCATION*  
00002E98  13F9 0000397D 00003984  3099            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002EA2  0239 000F 00003984      3100            AND.B   #$0F,VAR_BYTE_END
00002EAA                          3101            
00002EAA                          3102            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002EAA  23C5 00003988           3103            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002EB0  1439 00003984           3104            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002EB6                          3105            
00002EB6                          3106            *INTITIALIZE FOR BIT SHIFTING
00002EB6  41F9 00003988           3107            LEA     VAR_TEMP_CLEANCOPY,A0
00002EBC  2639 00003988           3108            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002EC2                          3109            
00002EC2                          3110  DEST_LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
00002EC2  0C02 0000               3111            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002EC6  6700 0008               3112            BEQ     DEST_MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002ECA  E24B                    3113            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002ECC  5302                    3114            SUBI.B   #1,D2                     *DECREMENT COUNTER
00002ECE  60F2                    3115            BRA     DEST_LOOP_SHIFTING4            *CONTINUE SHIFTING 
00002ED0                          3116                                               *change: NAME OF LABEL*
00002ED0                          3117  DEST_MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
00002ED0  0283 00000007           3118            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002ED6  0603 0030               3119            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002EDA  6100 0178               3120            BSR     PUSH_STACK                *PUSH TO STACK
00002EDE                          3121            
00002EDE  163C 0029               3122            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002EE2  6100 0170               3123            BSR       PUSH_STACK
00002EE6                          3124            
00002EE6  6000 012C               3125            BRA     GET_DST_SUCCESS                   *RETURN
00002EEA                          3126            
00002EEA                          3127                      
00002EEA                          3128            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
00002EEA                          3129  DEST_CHECK7    
00002EEA  0CB9 00000007 0000398C  3130            CMPI.L  #7,VAR_LONG_ADDRESS_MODE_CHECK                      *IF (MODE != 111)
00002EF4  6600 011A               3131            BNE     GET_DST_FAILED                                      *THAN BRANCH TO UNCESSFULL SRC MODE READ
00002EF8                          3132                   
00002EF8                          3133            *NEXT: (MODE == 111) 
00002EF8                          3134            *NOW: CHECK FOR SRC REGISTER 
00002EF8                          3135                  *(000 = (xxx).W)
00002EF8                          3136                  *(001 = (xxx).L)
00002EF8                          3137                  *(010 = #<data>)
00002EF8                          3138                  
00002EF8                          3139            *FIND REGISTER NUMBER END LOCATION*  
00002EF8  13F9 0000397D 00003984  3140            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002F02  0239 000F 00003984      3141            AND.B   #$0F,VAR_BYTE_END
00002F0A                          3142            
00002F0A                          3143            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002F0A  23C5 00003988           3144            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002F10  1439 00003984           3145            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002F16                          3146            
00002F16                          3147            *INTITIALIZE FOR BIT SHIFTING
00002F16  41F9 00003988           3148            LEA     VAR_TEMP_CLEANCOPY,A0
00002F1C  2C39 00003988           3149            MOVE.L  VAR_TEMP_CLEANCOPY,D6
00002F22                          3150  DEST_LOOP_SHIFTING7
00002F22  0C02 0000               3151            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002F26  6700 0008               3152            BEQ     DEST_MASKING_NEXT7              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00002F2A  E24E                    3153            LSR     #1,D6                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002F2C  5302                    3154            SUB.B   #1,D2                     *DECREMENT COUNTER
00002F2E  60F2                    3155            BRA     DEST_LOOP_SHIFTING7             *CONTINUE SHIFTING
00002F30                          3156  DEST_MASKING_NEXT7
00002F30  CCBC 00000007           3157            AND.L   #7,D6                     *MASK, ONLY NEED 0-2 BIT INDEXES 
00002F36                          3158           *D3 - REGISTER NUMBER NEEDED TO CHECK WHICH W/L/#<DATA>*
00002F36                          3159            
00002F36                          3160  DEST_CHECK_WORD  
00002F36  41F9 0000397C           3161            LEA     TEMP_REGISTER_FORMAT,A0
00002F3C  1439 0000397A           3162            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002F42  1082                    3163            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002F44  0239 0020 0000397C      3164            ANDI.B  #$20,TEMP_REGISTER_FORMAT                           * MASKS 0010 0000                                                     *change <SRC>*
00002F4C  0C39 0020 0000397C      3165            CMPI.B  #$20,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0010 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002F54  6700 0026               3166            BEQ     DEST_CHECK_LONG                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00002F58  0C06 0000               3167            CMPI.B  #0,D6                                                   *COMPARE REGISTER NUMBER WITH (000 == 000) FOR WORD
00002F5C  6600 001E               3168            BNE     DEST_CHECK_LONG                                      * THE REGISTER NUMBER DOESN'T MATCH "(XXX).W" -> SO MOVE ON       
00002F60                          3169            *IT IS A WORD AT THIS POINT*
00002F60                          3170            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002F60  163C 0020               3171            MOVE.B    #' ',D3
00002F64  6100 00EE               3172            BSR       PUSH_STACK
00002F68  163C 0024               3173            MOVE.B    #'$',D3
00002F6C  6100 00E6               3174            BSR       PUSH_STACK
00002F70  321D                    3175            MOVE.W    (A5)+,D1
00002F72  7404                    3176            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00002F74  6100 E292               3177            BSR       HEX2ASCII2STACK
00002F78  6000 009A               3178            BRA       GET_DST_SUCCESS
00002F7C                          3179  
00002F7C                          3180  DEST_CHECK_LONG
00002F7C  41F9 0000397C           3181            LEA     TEMP_REGISTER_FORMAT,A0
00002F82  1439 0000397A           3182            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002F88  1082                    3183            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002F8A  0239 0040 0000397C      3184            ANDI.B  #$40,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00002F92  0C39 0040 0000397C      3185            CMPI.B  #$40,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002F9A  6700 002E               3186            BEQ     DEST_CHECK_IMMEDIATE                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00002F9E  0C06 0001               3187            CMPI.B  #1,D6                                                   *COMPARE REGISTER NUMBER WITH (001 == 001) FOR WORD
00002FA2  6600 0026               3188            BNE     DEST_CHECK_IMMEDIATE                                      * THE REGISTER NUMBER DOESN'T MATCH "(XXX).L" -> SO MOVE ON 
00002FA6                          3189            *IT IS A WORD AT THIS POINT*
00002FA6                          3190            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002FA6  163C 0020               3191            MOVE.B    #' ',D3
00002FAA  6100 00A8               3192            BSR       PUSH_STACK
00002FAE  163C 0024               3193            MOVE.B    #'$',D3
00002FB2  6100 00A0               3194            BSR       PUSH_STACK
00002FB6  321D                    3195            MOVE.W    (A5)+,D1        * GET NEXT WORD INTO STACK
00002FB8  7404                    3196            MOVE.L    #4,D2           * SETS SIZE = 4 FOR CONVERSION TO ASCII
00002FBA  6100 E24C               3197            BSR       HEX2ASCII2STACK
00002FBE  321D                    3198            MOVE.W    (A5)+,D1        * GET NEXT WORD INTO STACK
00002FC0  7404                    3199            MOVE.L    #4,D2          
00002FC2  6100 E244               3200            BSR       HEX2ASCII2STACK
00002FC6  6000 004C               3201            BRA     GET_DST_SUCCESS
00002FCA                          3202            
00002FCA                          3203  DEST_CHECK_IMMEDIATE
00002FCA  41F9 0000397C           3204            LEA     TEMP_REGISTER_FORMAT,A0
00002FD0  1439 0000397A           3205            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002FD6  1082                    3206            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002FD8  0239 0080 0000397C      3207            ANDI.B  #$80,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00002FE0  0C39 0080 0000397C      3208            CMPI.B  #$80,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002FE8  6700 0026               3209            BEQ     GET_DST_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00002FEC  0C06 0004               3210            CMPI.B  #4,D6                                               * COMPARE REGISTER NUMBER WITH (010 == 010) FOR WORD
00002FF0  6600 001E               3211            BNE     GET_DST_FAILED                                      * THE REGISTER NUMBER DOESN'T MATCH "#<DATA>" -> SO MOVE ON 
00002FF4                          3212            
00002FF4                          3213            *IT IS A WORD AT THIS POINT*
00002FF4                          3214            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002FF4  163C 0020               3215            MOVE.B    #' ',D3
00002FF8  6100 005A               3216            BSR       PUSH_STACK
00002FFC  163C 0023               3217            MOVE.B    #'#',D3
00003000  6100 0052               3218            BSR       PUSH_STACK
00003004  321D                    3219            MOVE.W    (A5)+,D1
00003006  7404                    3220            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003008  6100 E1FE               3221            BSR       HEX2ASCII2STACK
0000300C  6000 0006               3222            BRA       GET_DST_SUCCESS
00003010                          3223            
00003010                          3224  GET_DST_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
00003010  7801                    3225            MOVE.L #1,D4
00003012  4E75                    3226            RTS
00003014                          3227  GET_DST_SUCCESS 
00003014  4E75                    3228            RTS
00003016                          3229  
00003016                          3230  
00003016                          3231  *---------------------------------------------------------------------------*
00003016                          3232  * STACK/QUEUE INTERFACE
00003016                          3233  *---------------------------------------------------------------------------*
00003016                          3234  PRINT_STACK
00003016  0C39 0000 00003976      3235            CMP.B     #0,COUNTER
0000301E  6700 000E               3236            BEQ       PRINT_STACK_RETURN             *CHECK IF LOOP IS FINISHED
00003022                          3237            
00003022                          3238  PRINT_STACK_HELPER
00003022  6100 0038               3239            BSR      POP_STACK          *PRINTS ADDRESS
00003026  103C 0006               3240            MOVE.B   #6,D0              *Display single character in D1.B. 
0000302A  4E4F                    3241            TRAP     #15             *ACTIVATES PRINT
0000302C                          3242  
0000302C  60E8                    3243            BRA       PRINT_STACK
0000302E                          3244  PRINT_STACK_RETURN
0000302E  4E75                    3245            RTS
00003030                          3246            
00003030                          3247            
00003030                          3248  PRINT_QUEUE
00003030  0C39 0000 00003976      3249            CMP.B     #0,COUNTER
00003038  6700 0018               3250            BEQ       PRINT_QUEUE_RETURN             *CHECK IF LOOP IS FINISHED
0000303C                          3251            
0000303C                          3252  PRINT_QUEUE_HELPER
0000303C  33F9 00003976 00003978  3253            MOVE.W   COUNTER,QUEUE_COUNTER
00003046  6100 0022               3254            BSR      POP_FRONT          *PRINTS ADDRESS
0000304A  103C 0006               3255            MOVE.B   #6,D0              *Display single character in D1.B. 
0000304E  4E4F                    3256            TRAP     #15             *ACTIVATES PRINT
00003050                          3257  
00003050  60DE                    3258            BRA       PRINT_QUEUE
00003052                          3259  PRINT_QUEUE_RETURN
00003052  4E75                    3260            RTS
00003054                          3261            
00003054                          3262  *PUSHES.W CONTENTS OF [D3] INTO STACK          
00003054                          3263  PUSH_STACK
00003054  1503                    3264              MOVE.B  D3,-(A2)
00003056  6100 0058               3265              BSR     INCREMENT
0000305A  4E75                    3266              RTS
0000305C                          3267  *POPS.W TOP OF STACK INTO [D1], SO ITS READY TO PRINT WITH TRAP 15
0000305C                          3268  *         MOVE.W   (A2)+,D1           *PRINTS ADDRESS
0000305C                          3269  *         MOVE.B   #15,D0             *PRINTS ACCORDING TO D2 BASE VALUE
0000305C                          3270  *         MOVE.B   #16,D2             *PRINTS BASED 16 NUMBER
0000305C                          3271  *         TRAP        #15             *ACTIVATES PRINT
0000305C                          3272  POP_STACK
0000305C  BECA                    3273              CMPA.W   A2,SP            *CHECKS IF THERE IS ANYTHING TO PUSH
0000305E  6700 0008               3274              BEQ     POP_RETURN        *IF NOTHING TO PUSH THAN JUST RETURN
00003062  121A                    3275              MOVE.B  (A2)+,D1 
00003064  6100 0052               3276              BSR     DECREMENT
00003068                          3277  POP_RETURN
00003068  4E75                    3278              RTS 
0000306A                          3279        
0000306A                          3280  *USE [A4] AS SECOND POINTER IN SHIFTING      
0000306A  0C39 0000 00003978      3281  POP_FRONT   CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
00003072  6700 0030               3282              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
00003076                          3283              
00003076                          3284              
00003076                          3285              *POSITION THE POINTERS A[4] RIGHT BEHIND A[2] WHICH IS RIGHT BEHIND STACK
00003076  347C 7000               3286              MOVEA.W #STACK,A2   *START A2 AT STACK
0000307A  0622 0000               3287              ADD.B   #0,-(A2)    *SHIFT A2 TO THE BOTTOM OF THE STACK
0000307E  384A                    3288              MOVEA.W A2,A4     *START A4 RIGHT ABOVE A2
00003080  0624 0000               3289              ADD.B   #0,-(A4)  *leash one more higher in stack (a4)
00003084  1212                    3290              MOVE.B  (A2),D1     *POP CONTENTS INTO D1
00003086                          3291  POP_SHIFT_LOOP
00003086  0C39 0000 00003978      3292              CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
0000308E  6700 0014               3293              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
00003092  1494                    3294              MOVE.B  (A4),(A2)   *SHIFT CONTENT DOWN THE STACK
00003094  0624 0000               3295              ADD.B   #0,-(A4)
00003098  0622 0000               3296              ADD.B   #0,-(A2) *SHIFT POINTERS DOWN THE STACK
0000309C  5339 00003978           3297              SUB.B   #1,QUEUE_COUNTER *DECREMENT INTERNAL QUEUE COUNTER
000030A2                          3298              
000030A2  60E2                    3299              BRA     POP_SHIFT_LOOP
000030A4                          3300                          
000030A4                          3301  POP_FRONT_RETURN 
000030A4                          3302              *RESET A2 BACK TO SP
000030A4  347C 7000               3303              MOVEA.W #STACK,A2    
000030A8  5339 00003976           3304              SUB.B   #1,COUNTER *DECREMENT STACK COUNTER       
000030AE  4E75                    3305              RTS   
000030B0                          3306  
000030B0                          3307  INCREMENT
000030B0  5239 00003976           3308              ADD.B   #1, COUNTER
000030B6  4E75                    3309              RTS           
000030B8                          3310  DECREMENT
000030B8  5339 00003976           3311              SUB.B   #1, COUNTER
000030BE  4E75                    3312              RTS           
000030C0                          3313  CLEAR_STACK
000030C0  0C39 0000 00003976      3314              CMP.B     #0,COUNTER
000030C8  6700 0006               3315              BEQ       CLEAR_RETURN
000030CC  618E                    3316              BSR       POP_STACK
000030CE  60F0                    3317              BRA       CLEAR_STACK
000030D0                          3318   
000030D0                          3319  CLEAR_RETURN
000030D0  4E75                    3320              RTS    
000030D2                          3321  *---------------------------------------------------------------------------*
000030D2                          3322  * TERMINATE
000030D2                          3323  *---------------------------------------------------------------------------*
000030D2                          3324  TERMINATE   
000030D2  43F9 00003482           3325              LEA     FINMSG,A1
000030D8  103C 000E               3326              MOVE.B  #14,D0
000030DC  4E4F                    3327              TRAP    #15
000030DE                          3328  
000030DE  103C 0009               3329              MOVE.B  #9,D0
000030E2  4E4F                    3330              TRAP    #15
000030E4                          3331  
000030E4                          3332  *---------------------------------------------------------------------------*
000030E4                          3333  * Data storage                                                 
000030E4                          3334  *---------------------------------------------------------------------------*  
000030E4                          3335  WELCOME
000030E4= 20 20 20 20 20 20 ...   3336              DC.B '                         ___     ___ ___        ___   ___ ___                 ',CR,LF
00003134= 3D 3D 3D 3D 3D 20 ...   3337              DC.B '=====           \  /\  /|___|   |   |   ||\  /||___    | |   |           =====',CR,LF
00003184= 3D 3D 3D 3D 3D 20 ...   3338              DC.B '=====            \/  \/ |___|___|___|___|| \/ ||___    | |___|           =====',CR,LF
000031D4                          3339      
000031D4= 20 20 20 20 20 20 ...   3340              DC.B '                        ___ ___ ___  ___      ___                             ',CR,LF
00003224= 20 20 20 20 20 20 ...   3341              DC.B '                       |     | |___)|    |   |___                             ',CR,LF 
00003274= 20 20 20 20 20 20 ...   3342              DC.B '                       |___ _|_|\___|___ |___|___                             ',CR,LF
000032C4                          3343      
000032C4= 20 20 20 20 20 20 ...   3344              DC.B '           __  ___ ___   _   ___  ___  ___        ___      ___ ___            ',CR,LF
00003314= 3D 3D 3D 3D 3D 20 ...   3345              DC.B '=====     |  \  | |___  /_\ |___ |___ |___ |\  /||___||   |___|___)      =====',CR,LF 
00003364= 3D 3D 3D 3D 3D 20 ...   3346              DC.B '=====     |__/ _|_ ___|/   \ ___| ___||___ | \/ ||___||___|___|\___      =====',CR,LF,CR,LF,CR,LF,0
000033B9                          3347  
000033B9                          3348  PROMPT_START
000033B9= 50 6C 65 61 73 65 ...   3349              DC.B    'Please enter a hexadecimal starting address.',CR,LF,0
000033E8                          3350      
000033E8                          3351  PROMPT_END
000033E8= 50 6C 65 61 73 65 ...   3352              DC.B    'Please enter a hexadecimal ending address.',CR,LF,0
00003415= 0D 0A 48 69 74 20 ...   3353  DISP_NEXT   DC.B    CR,LF,'Hit Enter to print the next 30 lines.',CR,LF,0            
0000343F= 57 6F 75 6C 64 20 ...   3354  REPEATMSG   DC.B    'Would you like to run again? Press Y to continue or N to finish.',CR,LF,0
00003482= 54 68 61 6E 6B 20 ...   3355  FINMSG      DC.B    'Thank you for using Circle Disassembler.',CR,LF,0
000034AD= 45 72 72 6F 72 3A ...   3356  ERRMSG_1    DC.B    'Error: Invalid Input Address',CR,LF,0
000034CC= 45 72 72 6F 72 3A ...   3357  ERRMSG_3    DC.B    'Error: Invalid Input Address (Odd)',CR,LF,0
000034F1= 45 72 72 6F 72 3A ...   3358  ERRMSG_5    DC.B    'Error: Invalid Input Address (start > end)',CR,LF,0
0000351E                          3359  
0000351E                          3360  VR_S_ADDR   DS.B    80                      * allocate storage space for the starting address
0000356E                          3361  VR_E_ADDR   DS.B    80                      * allocate storage space for the ending address
000035BE                          3362  S_ADDR_HX   DS.L    1                       * allocate storage space for the starting address in hex
000035C2                          3363  E_ADDR_HX   DS.L    1                       * allocate storage space for the ending address in hex
000035C6= 0D 0A 00                3364  ENDLINE_M   DC.B    CR,LF,0
000035C9                          3365  TMPINPUT    DS.B    80                      * temp store user input
00003619                          3366  TMPOUTPUT   DS.B    80                      * temp store prog output
00003669= 20 20 20 4F 52 49 ...   3367  DISP_ORI_B  DC.B    '   ORI.B',0
00003672= 20 20 20 4F 52 49 ...   3368  DISP_ORI_W  DC.B    '   ORI.W',0
0000367B= 20 20 20 4F 52 49 ...   3369  DISP_ORI_L  DC.B    '   ORI.L',0
00003684= 20 20 20 45 4F 52 ...   3370  DISP_EORI_B  DC.B    '   EORI.B',0
0000368E= 20 20 20 45 4F 52 ...   3371  DISP_EORI_W  DC.B    '   EORI.W',0
00003698= 20 20 20 45 4F 52 ...   3372  DISP_EORI_L  DC.B    '   EORI.L',0
000036A2= 20 20 20 42 54 53 ...   3373  DISP_BTST   DC.B    '   BTST',0
000036AA= 20 20 20 43 4D 50 ...   3374  DISP_CMPI_B  DC.B    '   CMPI.B',0
000036B4= 20 20 20 43 4D 50 ...   3375  DISP_CMPI_W  DC.B    '   CMPI.W',0
000036BE= 20 20 20 43 4D 50 ...   3376  DISP_CMPI_L  DC.B    '   CMPI.L',0
000036C8= 20 20 20 44 41 54 ...   3377  DISP_DATA   DC.B    '   DATA',0
000036D0= 20 20 20 4D 4F 56 ...   3378  DISP_MOVE_B DC.B    '   MOVE.B',0
000036DA= 20 20 20 4D 4F 56 ...   3379  DISP_MOVE_W DC.B    '   MOVE.W',0
000036E4= 20 20 20 4D 4F 56 ...   3380  DISP_MOVE_L DC.B    '   MOVE.L',0
000036EE= 20 20 20 52 54 53 00    3381  DISP_RTS    DC.B    '   RTS',0
000036F5= 20 20 20 4A 53 52 00    3382  DISP_JSR    DC.B    '   JSR',0
000036FC= 20 20 20 4E 45 47 ...   3383  DISP_NEG_B    DC.B    '   NEG.B',0
00003705= 20 20 20 4E 45 47 ...   3384  DISP_NEG_W    DC.B    '   NEG.W',0
0000370E= 20 20 20 4E 45 47 ...   3385  DISP_NEG_L    DC.B    '   NEG.L',0
00003717= 20 20 20 4E 4F 54 ...   3386  DISP_NOT_B  DC.B    '   NOT.B',0
00003720= 20 20 20 4E 4F 54 ...   3387  DISP_NOT_W  DC.B    '   NOT.W',0
00003729= 20 20 20 4E 4F 54 ...   3388  DISP_NOT_L  DC.B    '   NOT.L',0
00003732= 20 20 20 4C 45 41 00    3389  DISP_LEA    DC.B    '   LEA',0
00003739= 20 20 20 4D 4F 56 ...   3390  DISP_MOVEM_W    DC.B    '   MOVEM.W',0
00003744= 20 20 20 4D 4F 56 ...   3391  DISP_MOVEM_L    DC.B    '   MOVEM.L',0
0000374F= 20 20 20 41 44 44 ...   3392  DISP_ADDQ_B DC.B    '   ADDQ.B',0
00003759= 20 20 20 41 44 44 ...   3393  DISP_ADDQ_W DC.B    '   ADDQ.W',0
00003763= 20 20 20 41 44 44 ...   3394  DISP_ADDQ_L DC.B    '   ADDQ.L',0
0000376D= 20 20 20 44 49 56 ...   3395  DISP_DIVS   DC.B    '   DIVS',0
00003775= 20 20 20 53 55 42 ...   3396  DISP_SUB_B  DC.B    '   SUB.B',0
0000377E= 20 20 20 53 55 42 ...   3397  DISP_SUB_W  DC.B    '   SUB.W',0
00003787= 20 20 20 53 55 42 ...   3398  DISP_SUB_L  DC.B    '   SUB.L',0
00003790= 20 20 20 53 55 42 ...   3399  DISP_SUBI_B  DC.B    '   SUBI.B',0
0000379A= 20 20 20 53 55 42 ...   3400  DISP_SUBI_W  DC.B    '   SUBI.W',0
000037A4= 20 20 20 53 55 42 ...   3401  DISP_SUBI_L  DC.B    '   SUBI.L',0
000037AE= 20 20 20 53 55 42 ...   3402  DISP_SUBA_W  DC.B    '   SUBA.W',0
000037B8= 20 20 20 53 55 42 ...   3403  DISP_SUBA_L  DC.B    '   SUBA.L',0
000037C2= 20 20 20 45 4F 52 ...   3404  DISP_EOR_B  DC.B    '   EOR.B',0
000037CB= 20 20 20 45 4F 52 ...   3405  DISP_EOR_W  DC.B    '   EOR.W',0
000037D4= 20 20 20 45 4F 52 ...   3406  DISP_EOR_L  DC.B    '   EOR.L',0
000037DD= 20 20 20 43 4D 50 ...   3407  DISP_CMP_B  DC.B    '   CMP.B',0
000037E6= 20 20 20 43 4D 50 ...   3408  DISP_CMP_W  DC.B    '   CMP.W',0
000037EF= 20 20 20 43 4D 50 ...   3409  DISP_CMP_L  DC.B    '   CMP.L',0
000037F8= 20 20 20 43 4D 50 ...   3410  DISP_CMPA_W  DC.B    '   CMPA.W',0
00003802= 20 20 20 43 4D 50 ...   3411  DISP_CMPA_L  DC.B    '   CMPA.L',0
0000380C= 20 20 20 4D 55 4C ...   3412  DISP_MULS_W DC.B    '   MULS.W',0
00003816= 20 20 20 41 4E 44 ...   3413  DISP_AND_B  DC.B    '   AND.B',0
0000381F= 20 20 20 41 4E 44 ...   3414  DISP_AND_W  DC.B    '   AND.W',0
00003828= 20 20 20 41 4E 44 ...   3415  DISP_AND_L  DC.B    '   AND.L',0
00003831= 20 20 20 41 44 44 ...   3416  DISP_ADD_B  DC.B    '   ADD.B',0
0000383A= 20 20 20 41 44 44 ...   3417  DISP_ADD_W  DC.B    '   ADD.W',0
00003843= 20 20 20 41 44 44 ...   3418  DISP_ADD_L  DC.B    '   ADD.L',0
0000384C= 20 20 20 41 44 44 ...   3419  DISP_ADDA_W DC.B    '   ADDA.W',0
00003856= 20 20 20 41 44 44 ...   3420  DISP_ADDA_L DC.B    '   ADDA.L',0
00003860= 20 20 20 4C 53 52 ...   3421  DISP_LSR_B  DC.B    '   LSR.B',0
00003869= 20 20 20 4C 53 4C ...   3422  DISP_LSL_B  DC.B    '   LSL.B',0
00003872= 20 20 20 4C 53 52 ...   3423  DISP_LSR_W  DC.B    '   LSR.W',0
0000387B= 20 20 20 4C 53 4C ...   3424  DISP_LSL_W  DC.B    '   LSL.W',0
00003884= 20 20 20 4C 53 52 ...   3425  DISP_LSR_L  DC.B    '   LSR.L',0
0000388D= 20 20 20 4C 53 4C ...   3426  DISP_LSL_L  DC.B    '   LSL.L',0
00003896= 20 20 20 41 53 52 ...   3427  DISP_ASR_B  DC.B    '   ASR.B',0
0000389F= 20 20 20 41 53 4C ...   3428  DISP_ASL_B  DC.B    '   ASL.B',0
000038A8= 20 20 20 41 53 52 ...   3429  DISP_ASR_W  DC.B    '   ASR.W',0
000038B1= 20 20 20 41 53 4C ...   3430  DISP_ASL_W  DC.B    '   ASL.W',0
000038BA= 20 20 20 41 53 52 ...   3431  DISP_ASR_L  DC.B    '   ASR.L',0
000038C3= 20 20 20 41 53 4C ...   3432  DISP_ASL_L  DC.B    '   ASL.L',0
000038CC= 20 20 20 52 4F 52 ...   3433  DISP_ROR_B  DC.B    '   ROR.B',0
000038D5= 20 20 20 52 4F 4C ...   3434  DISP_ROL_B  DC.B    '   ROL.B',0
000038DE= 20 20 20 52 4F 52 ...   3435  DISP_ROR_W  DC.B    '   ROR.W',0
000038E7= 20 20 20 52 4F 4C ...   3436  DISP_ROL_W  DC.B    '   ROL.W',0
000038F0= 20 20 20 52 4F 52 ...   3437  DISP_ROR_L  DC.B    '   ROR.L',0
000038F9= 20 20 20 52 4F 4C ...   3438  DISP_ROL_L  DC.B    '   ROL.L',0
00003902= 20 20 20 42 52 41 00    3439  DISP_BRA    DC.B    '   BRA',0
00003909= 20 20 20 42 4C 54 00    3440  DISP_BLT    DC.B    '   BLT',0
00003910= 20 20 20 42 45 51 00    3441  DISP_BEQ    DC.B    '   BEQ',0
00003917= 20 20 20 42 4E 45 00    3442  DISP_BNE    DC.B    '   BNE',0
0000391E= 20 20 20 42 48 49 00    3443  DISP_BHI    DC.B    '   BHI',0
00003925= 20 20 20 4D 4F 56 ...   3444  DISP_MOVEA_W    DC.B    '   MOVEA.W',0
00003930= 20 20 20 4D 4F 56 ...   3445  DISP_MOVEA_L    DC.B    '   MOVEA.L',0
0000393B                          3446  
0000393B= 20 20 20 24 00          3447  DISP_HEX     DC.B    '   $',0
00003940= 20 20 20 44 00          3448  DISP_D  DC.B    '   D',0
00003945= 20 20 20 41 00          3449  DISP_A  DC.B    '   A',0
0000394A= 20 20 20 28 00          3450  DISP_OP  DC.B    '   (',0
0000394F= 29 00                   3451  DISP_CP  DC.B   ')',0
00003951= 20 20 20 28 41 00       3452  DISP_AOP  DC.B    '   (A',0
00003957                          3453  
00003957= 20 20 20 2D 28 41 00    3454  DISP_PRE    DC.B    '   -(A',0
0000395E= 29 2B 00                3455  DISP_POST   DC.B    ')+',0
00003961= 20 20 20 23 00          3456  DISP_LB DC.B    '   #',0
00003966= 30 00                   3457  DISP_0  DC.B    '0',0
00003968= 31 00                   3458  DISP_1  DC.B    '1',0
0000396A= 32 00                   3459  DISP_2  DC.B    '2',0
0000396C= 33 00                   3460  DISP_3  DC.B    '3',0
0000396E= 34 00                   3461  DISP_4  DC.B    '4',0
00003970= 35 00                   3462  DISP_5  DC.B    '5',0
00003972= 36 00                   3463  DISP_6  DC.B    '6',0
00003974= 37 00                   3464  DISP_7  DC.B    '7',0
00003976                          3465  
00003976                          3466  *STACK INTERFACE VARIABLES*
00003976                          3467  COUNTER         DS.W    1
00003978                          3468  QUEUE_COUNTER   DS.W    1
0000397A                          3469  
0000397A                          3470  *EA DECODING INTERFACE VARIABLES* 
0000397A                          3471  DEST_REGISTER_FORMAT    DS.B    1           *all address modes acceptable standard
0000397B                          3472  SRC_REGISTER_FORMAT  DS.B    1           *all address modes acceptable standard
0000397C                          3473  TEMP_REGISTER_FORMAT    DS.B    1           *place holder for masking other register formats
0000397D                          3474  
0000397D                          3475  *FORMAT OF WHERE TO GET THE EA BY THE ENDING BIT AND STARTING BIT
0000397D                          3476  * WORD + WORD = LONG
0000397D                          3477  * (STARTING BIT) + (ENDING BIT) = 2 HEX CHAR
0000397D                          3478  * A              + F            = AF         <= EXAMPLE
0000397D                          3479  *(10TH BIT)      + (15TH BIT)   = CHECK BITS 15 THROUGH 10
0000397D                          3480  GET_DST_START_END    DS.B    1
0000397E                          3481  GET_SRC_START_END    DS.B    1
0000397F                          3482  
0000397F                          3483  *STORES THE START + END BITS HERE (FROM ABOVE)
00003980                          3484  VAR_BYTE_START      DS.L    1
00003984                          3485  VAR_BYTE_END        DS.L    1
00003988                          3486  VAR_TEMP_CLEANCOPY  DS.L    1
0000398C                          3487  
0000398C                          3488  VAR_LONG_ADDRESS_MODE_CHECK        DS.L    1       *holds the bits 0-2 in long form
00003990                          3489  
00003990                          3490  *MORE FOR STACK USAGE*
00003990= 2C 00                   3491  DISP_COMMA  DC.B    ',',0
00003992= 20 20 20 00             3492  DISP_INDENT  DC.B    '   ',0
00003996                          3493  
00003996                          3494  *NEXT WORD POINTER: FOR IDENTIFING (xxx).W or (xxx).L*
00003996                          3495  POINTER_WORD    DS.W       1
00003998                          3496  
00003998                          3497  
00003998                          3498  
00003998                          3499  *---------------------------------------------------------------------------*
00003998                          3500  * Ends program
00003998                          3501  *---------------------------------------------------------------------------*
00003998                          3502              END    START                    * last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASC2HXLP            1164
ASCII2HEX           115E
ASC_ERR             11C0
ASC_LOW             11A2
ASC_NUM             11B2
ASC_SFT             11BA
ASC_UPP             11AA
CHECK0              27C8
CHECK1              2852
CHECK2              28DC
CHECK3              2976
CHECK4              2A18
CHECK7              2ABA
CHECK_IMMEDIATE     2B9A
CHECK_LONG          2B4C
CHECK_WORD          2B06
CLEAR_RETURN        30D0
CLEAR_STACK         30C0
COUNTER             3976
CR                  D
DECREMENT           30B8
DEST_CHECK0         2BF8
DEST_CHECK1         2C82
DEST_CHECK2         2D0C
DEST_CHECK3         2DA6
DEST_CHECK4         2E48
DEST_CHECK7         2EEA
DEST_CHECK_IMMEDIATE  2FCA
DEST_CHECK_LONG     2F7C
DEST_CHECK_WORD     2F36
DEST_LOOP_SHIFTING  2C62
DEST_LOOP_SHIFTING1  2CEC
DEST_LOOP_SHIFTING2  2D7E
DEST_LOOP_SHIFTING3  2E18
DEST_LOOP_SHIFTING4  2EC2
DEST_LOOP_SHIFTING7  2F22
DEST_MASKING_NEXT   2C70
DEST_MASKING_NEXT1  2CFA
DEST_MASKING_NEXT2  2D8C
DEST_MASKING_NEXT3  2E26
DEST_MASKING_NEXT4  2ED0
DEST_MASKING_NEXT7  2F30
DEST_MODE           2380
DEST_REGISTER       2650
DEST_REGISTER_FORMAT  397A
DISPLAY_30_LINES    130C
DISP_0              3966
DISP_1              3968
DISP_2              396A
DISP_3              396C
DISP_4              396E
DISP_5              3970
DISP_6              3972
DISP_7              3974
DISP_A              3945
DISP_ADDA_L         3856
DISP_ADDA_W         384C
DISP_ADDQ_B         374F
DISP_ADDQ_L         3763
DISP_ADDQ_W         3759
DISP_ADD_B          3831
DISP_ADD_L          3843
DISP_ADD_W          383A
DISP_AND_B          3816
DISP_AND_L          3828
DISP_AND_W          381F
DISP_AOP            3951
DISP_ASL_B          389F
DISP_ASL_L          38C3
DISP_ASL_W          38B1
DISP_ASR_B          3896
DISP_ASR_L          38BA
DISP_ASR_W          38A8
DISP_BEQ            3910
DISP_BHI            391E
DISP_BLT            3909
DISP_BNE            3917
DISP_BRA            3902
DISP_BTST           36A2
DISP_CMPA_L         3802
DISP_CMPA_W         37F8
DISP_CMPI_B         36AA
DISP_CMPI_L         36BE
DISP_CMPI_W         36B4
DISP_CMP_B          37DD
DISP_CMP_L          37EF
DISP_CMP_W          37E6
DISP_COMMA          3990
DISP_CP             394F
DISP_D              3940
DISP_DATA           36C8
DISP_DIVS           376D
DISP_EORI_B         3684
DISP_EORI_L         3698
DISP_EORI_W         368E
DISP_EOR_B          37C2
DISP_EOR_L          37D4
DISP_EOR_W          37CB
DISP_HEX            393B
DISP_INDENT         3992
DISP_JSR            36F5
DISP_LB             3961
DISP_LEA            3732
DISP_LSL_B          3869
DISP_LSL_L          388D
DISP_LSL_W          387B
DISP_LSR_B          3860
DISP_LSR_L          3884
DISP_LSR_W          3872
DISP_MOVEA_L        3930
DISP_MOVEA_W        3925
DISP_MOVEM_L        3744
DISP_MOVEM_W        3739
DISP_MOVE_B         36D0
DISP_MOVE_L         36E4
DISP_MOVE_W         36DA
DISP_MULS_W         380C
DISP_NEG_B          36FC
DISP_NEG_L          370E
DISP_NEG_W          3705
DISP_NEXT           3415
DISP_NOT_B          3717
DISP_NOT_L          3729
DISP_NOT_W          3720
DISP_OP             394A
DISP_ORI_B          3669
DISP_ORI_L          367B
DISP_ORI_W          3672
DISP_POST           395E
DISP_PRE            3957
DISP_ROL_B          38D5
DISP_ROL_L          38F9
DISP_ROL_W          38E7
DISP_ROR_B          38CC
DISP_ROR_L          38F0
DISP_ROR_W          38DE
DISP_RTS            36EE
DISP_SUBA_L         37B8
DISP_SUBA_W         37AE
DISP_SUBI_B         3790
DISP_SUBI_L         37A4
DISP_SUBI_W         379A
DISP_SUB_B          3775
DISP_SUB_L          3787
DISP_SUB_W          377E
D_MODE000           2422
D_MODE010           246A
D_MODE011           24CA
D_MODE100           24EA
D_MODE111           253C
EA_ARITH            231A
EA_DATA             14EA
EA_GEN              2366
EA_MOVEA            2340
EA_NOSRC            2306
ENDLINE_M           35C6
END_ADDR            10AA
ERRMSG_1            34AD
ERRMSG_3            34CC
ERRMSG_5            34F1
ERROR_1             110E
ERROR_2             111E
ERROR_3             112E
ERROR_4             113E
ERROR_5             114E
E_ADDR_HX           35C2
FINMSG              3482
GET_DST_FAILED      3010
GET_DST_START_END   397D
GET_DST_SUCCESS     3014
GET_EA_EA_DEST      2BE6
GET_EA_EA_SRC       27B6
GET_SRC_FAILED      2BE0
GET_SRC_START_END   397E
GET_SRC_SUCCESS     2BE4
HEX2ASCII           11C6
HEX2ASCII2STACK     1208
HEX_CHAR            11F4
HEX_CONT            11F8
HEX_LOOP            11DA
IMMD_B              25F0
IMMD_L              2630
IMMD_W              2610
IMMEDIATE           25C0
INCREMENT           30B0
INTRO               1028
IS_ODD              124C
IS_ODD_ERR          1262
JMPTABLE            1338
LF                  A
LONGMODE            2594
LOOP_SHIFTING       2832
LOOP_SHIFTING1      28BC
LOOP_SHIFTING2      294E
LOOP_SHIFTING3      29E8
LOOP_SHIFTING4      2A92
MAIN                1268
MASKING_NEXT        2840
MASKING_NEXT1       28CA
MASKING_NEXT2       295C
MASKING_NEXT3       29F6
MASKING_NEXT4       2AA0
MODE000             240E
MODE001             2436
MODE010             244A
MODE011             248A
MODE100             24AA
MODE111             250A
NEXTLINES           131A
OP0000              1398
OP0001              15BE
OP0010              162C
OP0011              172A
OP0100              1826
OP0101              19C0
OP0110              1A3C
OP0111              1ACA
OP1000              1ACE
OP1001              1B0A
OP1010              1BE2
OP1011              1BE6
OP1100              1CE2
OP1101              1D7E
OP1101_ADD_RETURN   1FC6
OP1101_DETERMINE_DN_EA_OR_EA_DN  1DB2
OP1101_DN_EA        1DC6
OP1101_EA_DN        1EC6
OP1101_PRINT_B      1EEE
OP1101_PRINT_B2     1DEE
OP1101_PRINT_L      1F7E
OP1101_PRINT_L2     1E7E
OP1101_PRINT_W      1F36
OP1101_PRINT_W2     1E36
OP1110              2054
OP1111              2302
OP_ADDA_L           203C
OP_ADDA_W           2024
OP_ADDQ             19E0
OP_ADDQ_B           1A06
OP_ADDQ_L           1A2A
OP_ADDQ_W           1A18
OP_ADD_B            1FDC
OP_ADD_L            200C
OP_ADD_W            1FF4
OP_AND_B            1D48
OP_AND_L            1D6C
OP_AND_W            1D5A
OP_ASL              21F4
OP_ASL_B            2218
OP_ASL_L            222A
OP_ASL_W            223C
OP_ASR              219A
OP_ASR_B            21BE
OP_ASR_L            21D0
OP_ASR_W            21E2
OP_ASX              20B6
OP_BEQ              1AA0
OP_BHI              1A84
OP_BLT              1ABC
OP_BNE              1A92
OP_BRA              1AAE
OP_BTST             140C
OP_CMPA_L           1C52
OP_CMPA_W           1C40
OP_CMPI             1512
OP_CMPI_B           1532
OP_CMPI_L           1556
OP_CMPI_W           1544
OP_CMP_B            1C64
OP_CMP_L            1C94
OP_CMP_W            1C7C
OP_DATA             14C6
OP_DIVS             1AF6
OP_EORI             141A
OP_EORI_B           143A
OP_EORI_L           145E
OP_EORI_W           144C
OP_EOR_B            1CAC
OP_EOR_L            1CD0
OP_EOR_W            1CBE
OP_JSR              199E
OP_LEA              18CC
OP_LSL              2140
OP_LSL_B            2164
OP_LSL_L            2176
OP_LSL_W            2188
OP_LSR              20E6
OP_LSR_B            210A
OP_LSR_L            211C
OP_LSR_W            212E
OP_LSX              209E
OP_MOVEA_L          16BA
OP_MOVEA_W          17B6
OP_MOVEM_L          18BA
OP_MOVEM_W          18A8
OP_MOVE_B           15C4
OP_MOVE_L           1652
OP_MOVE_W           174E
OP_MULS             1D34
OP_NEG              18E0
OP_NEG_B            1900
OP_NEG_L            1930
OP_NEG_W            1918
OP_NOT              1948
OP_NOT_B            1968
OP_NOT_L            198C
OP_NOT_W            197A
OP_ORI              1568
OP_ORI_B            1588
OP_ORI_L            15AC
OP_ORI_W            159A
OP_ROL              22A8
OP_ROL_B            22CC
OP_ROL_L            22DE
OP_ROL_W            22F0
OP_ROR              224E
OP_ROR_B            2272
OP_ROR_L            2284
OP_ROR_W            2296
OP_ROX              20CE
OP_RTS              19B2
OP_SUBA_L           1BD0
OP_SUBA_W           1BBE
OP_SUBI             1470
OP_SUBI_B           1490
OP_SUBI_L           14B4
OP_SUBI_W           14A2
OP_SUB_B            1B76
OP_SUB_L            1BA6
OP_SUB_W            1B8E
OUTPUT_PROCESSED_DATA  12EC
POINTER_WORD        3996
POP_FRONT           306A
POP_FRONT_RETURN    30A4
POP_RETURN          3068
POP_SHIFT_LOOP      3086
POP_STACK           305C
PRINT_QUEUE         3030
PRINT_QUEUE_HELPER  303C
PRINT_QUEUE_RETURN  3052
PRINT_STACK         3016
PRINT_STACK_HELPER  3022
PRINT_STACK_RETURN  302E
PROGLP              100A
PROMPT_END          33E8
PROMPT_START        33B9
PUSH_STACK          3054
QUEUE_COUNTER       3978
REG_0               2704
REG_1               2712
REG_2               2720
REG_3               272E
REG_4               273C
REG_5               274A
REG_6               2758
REG_7               2766
REPEAT              2774
REPEATMSG           343F
RETURN              11C4
SRC_LOOP_SHIFTING   2AF2
SRC_MASKING_NEXT    2B00
SRC_MODE            23C4
SRC_REGISTER        26AC
SRC_REGISTER_FORMAT  397B
STACK               7000
STACK_HEX_CHAR      1236
STACK_HEX_CONT      123A
STACK_HEX_LOOP      121C
START               1004
START_ADDR          1058
S_ADDR_HX           35BE
TEMP_REGISTER_FORMAT  397C
TERMINATE           30D2
TESTING             1036
TMPINPUT            35C9
TMPOUTPUT           3619
VAR_BYTE_END        3984
VAR_BYTE_START      3980
VAR_LONG_ADDRESS_MODE_CHECK  398C
VAR_TEMP_CLEANCOPY  3988
VR_E_ADDR           356E
VR_S_ADDR           351E
WELCOME             30E4
WORDMODE            2568

00001004 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/9/2014 1:32:39 PM

00000000                             1  *---------------------------------------------------------------------------*
00000000                             2  * Title      : 68K Disassembler
00000000                             3  * Written by : Team Circle
00000000                             4  * Date       : 12/05/14
00000000                             5  * Description: Scans a section of memory and converts its
00000000                             6  *              contents to a listing of valid assembly 
00000000                             7  *              language instructions
00000000                             8  *---------------------------------------------------------------------------*
00000000                             9  
00000000                            10  *---------------------------------------------------------------------------*
00000000                            11  * System Equates                                                 
00000000                            12  *---------------------------------------------------------------------------*
00000000  =0000000D                 13  CR          EQU     $0D                     * ASCII for Carriage Return
00000000  =0000000A                 14  LF          EQU     $0A                     * ASCII for Line Feed 
00000000  =00007000                 15  STACK       EQU     $7000                   * Initial Stack Pointer                         
00000000                            16              
00000000                            17  *---------------------------------------------------------------------------*
00000000                            18  * Reserved Registers
00000000                            19  *---------------------------------------------------------------------------*  
00000000                            20  * D0 - I/O
00000000                            21  * D1 - Temporary storage of processing data
00000000                            22  * D3 - [PUSH_STACK]
00000000                            23  * D4 - Opcode size (0 - byte; 1- word; 2-long)
00000000                            24  * D5 - Processing data
00000000                            25  * D6 - Loop counter to print 30 lines
00000000                            26  * D7 - Error flag
00000000                            27  * A2 - [STACK POINTER]
00000000                            28  * A5 - Processing address in hex
00000000                            29  
00000000                            30  *---------------------------------------------------------------------------*
00000000                            31  * Start and loop program
00000000                            32  *---------------------------------------------------------------------------*  
00001000                            33              ORG     $1000
00001000  4FF8 7000                 34              LEA     STACK,SP
00001004                            35  START:            
00001004  4EB9 00001028             36              JSR     INTRO                 
0000100A  4EB9 00001048             37  PROGLP      JSR     START_ADDR
00001010  4EB9 0000109A             38              JSR     END_ADDR
00001016  43F9 00003EAC             39              LEA     ENDLINE_M,A1           * Add a new line
0000101C  103C 000E                 40              MOVE.B  #14, D0                  * Display A1
00001020  4E4F                      41              TRAP    #15
00001022                            42              
00001022  4EF9 00001258             43              JMP     MAIN
00001028                            44              
00001028                            45  *---------------------------------------------------------------------------*
00001028                            46  * INTRO: Display the introduction of the program
00001028                            47  *---------------------------------------------------------------------------*
00001028  43F9 000039CA             48  INTRO       LEA     WELCOME,A1              * Load PROMPT_START
0000102E  103C 000E                 49              MOVE.B  #14,D0                  * Display A1
00001032  4E4F                      50              TRAP    #15
00001034  4E75                      51              RTS
00001036                            52  TESTING     
00001036                            53              
00001036  5281                      54              ADDQ.L  #1,D1
00001038  5492                      55              ADDQ.L  #2,(A2)
0000103A  569B                      56              ADDQ.L  #3,(A3)+
0000103C  58A4                      57              ADDQ.L  #4,-(A4)
0000103E                            58              
0000103E  5A81                      59              ADDQ.L  #5 ,D1
00001040  5C92                      60              ADDQ.L  #6 ,(A2)
00001042  5E9B                      61              ADDQ.L  #7 ,(A3)+
00001044  50A4                      62              ADDQ.L  #8 ,-(A4)
00001046                            63  
00001046                            64              
00001046  4E75                      65              RTS
00001048                            66  *---------------------------------------------------------------------------*
00001048                            67  * START_ADDR: Compute the starting address
00001048                            68  *---------------------------------------------------------------------------*
00001048                            69  START_ADDR
00001048                            70              * Output
00001048  43F9 00003C9F             71              LEA     PROMPT_START,A1         * Load PROMPT_START 
0000104E  103C 000E                 72              MOVE.B  #14,D0                  * Display PROMPT_START
00001052  4E4F                      73              TRAP    #15
00001054                            74      
00001054                            75              * Input
00001054  43F9 00003E04             76              LEA     VR_S_ADDR,A1            * Load VR_S_ADDR
0000105A  103C 0002                 77              MOVE.B  #2,D0                   * Ask user for input
0000105E  4E4F                      78              TRAP    #15
00001060                            79              
00001060                            80              * Error Checking (length)
00001060  0C01 0000                 81              CMPI.B  #0, D1                  * Check if input length <= 0
00001064  6F00 0098                 82              BLE     ERROR_1
00001068  0C01 0008                 83              CMPI.B  #8, D1                  * Check if input length > 8
0000106C  6E00 0090                 84              BGT     ERROR_1
00001070                            85              
00001070                            86              * Conversion & Storage
00001070  4EB9 0000114E             87              JSR     ASCII2HEX               * Jump to ASCII2HEX
00001076  0C07 0001                 88              CMPI.B  #1, D7                  * Check for error
0000107A  6700 0082                 89              BEQ     ERROR_1                 
0000107E  23C1 00003EA4             90              MOVE.L  D1, S_ADDR_HX           * Move the result to S_ADDR_HX 
00001084                            91              
00001084                            92              * Error Checking (Odd)
00001084  43F9 00003EA4             93              LEA     S_ADDR_HX, A1           * Load 'S_ADDR_HX' for odd error
0000108A  4EB9 0000123C             94              JSR     IS_ODD                  * Check if the input address is odd
00001090  0C07 0001                 95              CMPI.B  #1, D7                  * Check for error
00001094  6700 0088                 96              BEQ     ERROR_3
00001098                            97              
00001098                            98              * Return
00001098  4E75                      99              RTS     
0000109A                           100  *---------------------------------------------------------------------------*
0000109A                           101  * END_ADDR: Compute the ending address
0000109A                           102  *---------------------------------------------------------------------------*
0000109A                           103  END_ADDR
0000109A                           104              * Output
0000109A  43F9 00003CCE            105              LEA     PROMPT_END,A1           * Load PROMPT_END
000010A0  103C 000E                106              MOVE.B  #14,D0                  * Display PROMPT_END
000010A4  4E4F                     107              TRAP    #15
000010A6                           108  
000010A6                           109              * Input
000010A6  43F9 00003E54            110              LEA     VR_E_ADDR,A1            * Load VR_E_ADDR
000010AC  103C 0002                111              MOVE.B  #2,D0                   * Ask user for input
000010B0  4E4F                     112              TRAP    #15
000010B2                           113              
000010B2                           114              * Error Checking (length)
000010B2  0C01 0000                115              CMPI.B  #0, D1                  * Check if input length <= 0
000010B6  6F00 0056                116              BLE     ERROR_2
000010BA  0C01 0008                117              CMPI.B  #8, D1                  * Check if input length > 8
000010BE  6E00 004E                118              BGT     ERROR_2
000010C2                           119              
000010C2                           120              * Conversion & Storage
000010C2  4EB9 0000114E            121              JSR     ASCII2HEX               * Jump to ASCII2HEX
000010C8  0C07 0001                122              CMPI.B  #1, D7                  * Check for error
000010CC  6700 0040                123              BEQ     ERROR_2
000010D0  23C1 00003EA8            124              MOVE.L  D1, E_ADDR_HX           * Move the result to E_ADDR_HX
000010D6                           125              
000010D6                           126              * Error Checking (start > end case)
000010D6  2439 00003EA4            127              MOVE.L  S_ADDR_HX, D2           * Move the starting address to D2
000010DC  B282                     128              CMP.L   D2, D1                  * Compare starting and ending address
000010DE  6300 005E                129              BLS     ERROR_5                 * Go to ERROR_5 if ending < starting
000010E2                           130              
000010E2                           131              * Error Checking (Odd case)
000010E2  43F9 00003EA8            132              LEA     E_ADDR_HX, A1           * Move the ending address
000010E8  4EB9 0000123C            133              JSR     IS_ODD                  * Go to IS_ODD for odd address checking
000010EE  0C07 0001                134              CMPI.B  #1, D7                  * Check for an error flag
000010F2  6700 003A                135              BEQ     ERROR_4
000010F6                           136              
000010F6                           137              * Inputs are valid
000010F6  2A79 00003EA4            138              MOVE.L  S_ADDR_HX, A5           * Store the valid input in A5
000010FC                           139              
000010FC  4E75                     140              RTS
000010FE                           141              
000010FE                           142  *---------------------------------------------------------------------------*
000010FE                           143  * ERROR_1: Address error (Invalid starting address)
000010FE                           144  *---------------------------------------------------------------------------*
000010FE                           145  ERROR_1
000010FE  43F9 00003D93            146              LEA     ERRMSG_1, A1            * Load ERRMSG_1
00001104  103C 000E                147              MOVE.B  #14, D0                 * Display ERRMSG_1
00001108  4E4F                     148              TRAP    #15
0000110A  4EF8 1048                149              JMP     START_ADDR              * Jump to START_ADDR
0000110E                           150      
0000110E                           151  *---------------------------------------------------------------------------*
0000110E                           152  * ERROR_2: Address error (Invalid ending address)
0000110E                           153  *---------------------------------------------------------------------------*
0000110E                           154  ERROR_2
0000110E  43F9 00003D93            155              LEA     ERRMSG_1, A1            * Load ERRMSG_1
00001114  103C 000E                156              MOVE.B  #14, D0                 * Display ERRMSG_1
00001118  4E4F                     157              TRAP    #15
0000111A  4EF8 109A                158              JMP     END_ADDR                * Jump to END_ADDR
0000111E                           159  
0000111E                           160  *---------------------------------------------------------------------------*
0000111E                           161  * ERROR_3: Address error (Odd starting address)
0000111E                           162  *---------------------------------------------------------------------------*
0000111E                           163  ERROR_3
0000111E  43F9 00003DB2            164              LEA     ERRMSG_3, A1
00001124  103C 000E                165              MOVE.B  #14, D0
00001128  4E4F                     166              TRAP    #15
0000112A  4EF8 1048                167              JMP     START_ADDR
0000112E                           168     
0000112E                           169  *---------------------------------------------------------------------------*
0000112E                           170  * ERROR_4: Address error (Odd ending address)
0000112E                           171  *---------------------------------------------------------------------------*         
0000112E                           172  ERROR_4
0000112E  43F9 00003DB2            173              LEA     ERRMSG_3, A1
00001134  103C 000E                174              MOVE.B  #14, D0
00001138  4E4F                     175              TRAP    #15
0000113A  4EF8 109A                176              JMP     END_ADDR
0000113E                           177            
0000113E                           178  *---------------------------------------------------------------------------*
0000113E                           179  * ERROR_3: Address error (Ending address is less than starting address)
0000113E                           180  *---------------------------------------------------------------------------*
0000113E                           181  ERROR_5
0000113E  43F9 00003DD7            182              LEA     ERRMSG_5, A1
00001144  103C 000E                183              MOVE.B  #14, D0
00001148  4E4F                     184              TRAP    #15
0000114A  4EF8 109A                185              JMP     END_ADDR
0000114E                           186    
0000114E                           187  *---------------------------------------------------------------------------*
0000114E                           188  * ASCII2HEX: Convert ASCii to Hexadecimal
0000114E                           189  * Reserved registers: A1 = Source, D1 = Destination, D2 = Byte, D7 = Error
0000114E                           190  *---------------------------------------------------------------------------*
0000114E  4281                     191  ASCII2HEX   CLR.L   D1                      * Clear the destination 
00001150  4287                     192              CLR.L   D7                      * Set the error flag to 0
00001152  4282                     193              CLR.L   D2                      * Clear D2 for temp storage
00001154                           194              
00001154  1419                     195  ASC2HXLP    MOVE.B  (A1)+, D2               * Read a byte to D2
00001156  0C02 0000                196              CMPI.B  #0, D2                  * Check for NULL (indicates the end of source)
0000115A  6700 0058                197              BEQ     RETURN                  * If it's NULL, go to return
0000115E  0C02 0066                198              CMPI.B  #102, D2                * Decimal ASCII value of f is 102
00001162  6E00 004C                199              BGT     ASC_ERR                 * ASCII > f (invalid input) 
00001166  0C02 0061                200              CMPI.B  #97, D2                 * Decimal ASCII value of a is 97
0000116A  6C00 0026                201              BGE     ASC_LOW                 * ASCII >= a (valid input)
0000116E  0C02 0046                202              CMPI.B  #70, D2                 * Decimal ASCII value of F is 70
00001172  6E00 003C                203              BGT     ASC_ERR                 * ASCII > F (invalid input)
00001176  0C02 0041                204              CMPI.B  #65, D2                 * Decimal ASCII value of A is 65
0000117A  6C00 001E                205              BGE     ASC_UPP                 * ASCII >= A (valid input)
0000117E  0C02 0039                206              CMPI.B  #57, D2                 * Decimal value of 9 is 57
00001182  6E00 002C                207              BGT     ASC_ERR                 * ASCII > 9 (invalid input)
00001186  0C02 0030                208              CMPI.B  #48, D2                 * Decimal ASCII value of 0 is 48
0000118A  6C00 0016                209              BGE     ASC_NUM                 * ASCII >= 0 (valid input)
0000118E  6000 0020                210              BRA     ASC_ERR                 * Invalid input
00001192                           211  
00001192  0442 0057                212  ASC_LOW     SUBI    #87, D2                 * Convert the ASCII input to Hex
00001196  6000 0012                213              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
0000119A                           214              
0000119A  0442 0037                215  ASC_UPP     SUBI    #55, D2                 * Convert the ASCII input to Hex
0000119E  6000 000A                216              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011A2                           217              
000011A2  0442 0030                218  ASC_NUM     SUBI    #48, D2                 * Convert the ASCII input to Hex
000011A6  6000 0002                219              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011AA                           220              
000011AA  E981                     221  ASC_SFT     ASL.L   #4, D1                  * Shift the dest to left by 4 bits
000011AC  D202                     222              ADD.B   D2, D1                  * Add the converted input to D1
000011AE  60A4                     223              BRA     ASC2HXLP                * Loop
000011B0                           224  
000011B0  1E3C 0001                225  ASC_ERR     MOVE.B  #1, D7                  * Set the error flag to 1            
000011B4  4E75                     226  RETURN      RTS     
000011B6                           227  
000011B6                           228  *---------------------------------------------------------------------------*
000011B6                           229  * HEX2ASCII: Convert Hexadecimal to ASCii 
000011B6                           230  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
000011B6                           231  *---------------------------------------------------------------------------*
000011B6  0C02 0008                232  HEX2ASCII   CMPI.B  #8, D2                  * Check to see if the size is long
000011BA  6700 000E                233              BEQ     HEX_LOOP
000011BE  4841                     234              SWAP    D1
000011C0  0C02 0002                235              CMPI.B  #2,D2
000011C4  6600 0004                236              BNE     HEX_LOOP
000011C8  E189                     237              LSL.L   #8,D1
000011CA                           238             
000011CA  E999                     239  HEX_LOOP    ROL.L   #4, D1                  * Roll D1 to left
000011CC  2601                     240              MOVE.L  D1, D3                  * Move D1 to D3
000011CE  0283 0000000F            241              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
000011D4  0C03 0009                242              CMPI.B  #9, D3                  * Compare te digit
000011D8  6E00 000A                243              BGT     HEX_CHAR              
000011DC  0603 0030                244              ADDI.B  #48,D3                  * Add 48 for numerical output
000011E0  6000 0006                245              BRA     HEX_CONT
000011E4                           246              
000011E4  0603 0037                247  HEX_CHAR    ADDI.B  #55,D3                  * Add 55 for character output
000011E8                           248  
000011E8  12C3                     249  HEX_CONT    MOVE.B  D3, (A1)+               * Place into A1
000011EA  5342                     250              SUBI    #1, D2                  * Decrement the size
000011EC  0C02 0000                251              CMPI.B  #0, D2                  * Check if D2 is 0
000011F0  66D8                     252              BNE     HEX_LOOP                * Loop
000011F2  12BC 0000                253              MOVE.B  #$0,(A1)                * Null terminator
000011F6  4E75                     254              RTS
000011F8                           255  *---------------------------------------------------------------------------*
000011F8                           256  * HEX2ASCII2STACK: Convert Hexadecimal to ASCii 
000011F8                           257  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
000011F8                           258  *---------------------------------------------------------------------------*
000011F8                           259  HEX2ASCII2STACK
000011F8  0C02 0008                260              CMPI.B  #8, D2                  * Check to see if the size is long
000011FC  6700 000E                261              BEQ     STACK_HEX_LOOP
00001200  4841                     262              SWAP    D1
00001202  0C02 0002                263              CMPI.B  #2,D2
00001206  6600 0004                264              BNE     STACK_HEX_LOOP
0000120A  E189                     265              LSL.L   #8,D1
0000120C                           266             
0000120C                           267  STACK_HEX_LOOP    
0000120C  E999                     268              ROL.L   #4, D1                  * Roll D1 to left
0000120E  2601                     269              MOVE.L  D1, D3                  * Move D1 to D3
00001210  0283 0000000F            270              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
00001216  0C03 0009                271              CMPI.B  #9, D3                  * Compare te digit
0000121A  6E00 000A                272              BGT     STACK_HEX_CHAR              
0000121E  0603 0030                273              ADDI.B  #48,D3                  * Add 48 for numerical output
00001222  6000 0006                274              BRA     STACK_HEX_CONT
00001226                           275              
00001226                           276  STACK_HEX_CHAR    
00001226  0603 0037                277              ADDI.B  #55,D3                  * Add 55 for character output
0000122A                           278  
0000122A                           279  STACK_HEX_CONT    
0000122A  6100 270E                280              BSR     PUSH_STACK              *PLACE INTO STACK
0000122E  5342                     281              SUBI    #1, D2                  * Decrement the size
00001230  0C02 0000                282              CMPI.B  #0, D2                  * Check if D2 is 0
00001234  66D6                     283              BNE     STACK_HEX_LOOP                * Loop
00001236  12BC 0000                284              MOVE.B  #$0,(A1)                * Null terminator
0000123A  4E75                     285              RTS
0000123C                           286  
0000123C                           287  
0000123C                           288  *---------------------------------------------------------------------------*
0000123C                           289  * IS_ODD: Check whether the source address is odd
0000123C                           290  * Reserved registers: A1 = Source, D1 = Result, D7 = error flag
0000123C                           291  *---------------------------------------------------------------------------*
0000123C  4281                     292  IS_ODD      CLR.L   D1                      * Clear the result
0000123E  4287                     293              CLR.L   D7                      * Set the error flag to 0
00001240  2211                     294              MOVE.L  (A1),D1                * Temp store the checking address to D1
00001242  82FC 0002                295              DIVU    #2, D1                  * Divide the result by 2
00001246  4841                     296              SWAP    D1                      * Swap remainder with quotient
00001248  0C01 0001                297              CMPI.B  #1, D1                  * Check for error
0000124C  6700 0004                298              BEQ     IS_ODD_ERR
00001250  4E75                     299              RTS
00001252                           300              
00001252  1E3C 0001                301  IS_ODD_ERR  MOVE.B  #1, D7
00001256  4E75                     302              RTS
00001258                           303  
00001258                           304  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*
00001258                           305  * MAIN                    
00001258                           306  * A2: STACK POINTER                                                      MAIN                                                                        MAIN
00001258                           307  * A5: Processing address
00001258                           308  *
00001258                           309  * D3: USED FOR PUSHING INTO STACK
00001258                           310  *     To push into stack => MOVE.W #DATA,D3 
00001258                           311  *                           BSR    PUSH_STACK
00001258                           312  *     To print stack     => BSR    PRINT_STACK 
00001258                           313  *     To clear stack     => BSR    CLEAR_STACK
00001258                           314  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*  
00001258                           315  MAIN        
00001258                           316              *initialize stack pointer
00001258  33FC 0000 0000425C       317              MOVE.W  #0,COUNTER
00001260  347C 7000                318              MOVEA.W #STACK,A2
00001264  163C 0020                319              MOVE.B  #' ',D3
00001268  6100 26D0                320              BSR     PUSH_STACK
0000126C  6100 26CC                321              BSR     PUSH_STACK
00001270  6100 26C8                322              BSR     PUSH_STACK
00001274                           323              
00001274                           324              * clear registers for temp storage
00001274  4280                     325              CLR.L   D0                   
00001276  4281                     326              CLR.L   D1                   
00001278  227C 00000000            327              MOVEA.L #0, A1                
0000127E                           328              
0000127E  220D                     329              MOVE.L  A5,D1                   * check to see if the address is fully read
00001280  23CD 00003EA4            330              MOVE.L  A5,S_ADDR_HX
00001286  B2B9 00003EA8            331              CMP.L   E_ADDR_HX,D1
0000128C  6C00 1DCC                332              BGE     REPEAT                  * go to repeat for user action
00001290                           333  
00001290  43F9 00003EFF            334              LEA     TMPOUTPUT,A1            * allocate storage to hold output
00001296  143C 0008                335              MOVE.B  #8,D2                   * set the output size
0000129A  4EB8 11B6                336              JSR     HEX2ASCII               
0000129E  43F9 00003EFF            337              LEA     TMPOUTPUT,A1
000012A4  103C 000E                338              MOVE.B  #14,D0
000012A8  4E4F                     339              TRAP    #15
000012AA                           340              
000012AA  4285                     341              CLR.L    D5                      * clear the processing data
000012AC  3A1D                     342              MOVE.W  (A5)+,D5                 * copy the currently processing data in A5 over to D5
000012AE                           343                                               * advance the current instruction pointer to the next
000012AE                           344                                               * instruction in memory
000012AE                           345  *----------------------------------------*
000012AE                           346  * Registers          
000012AE                           347  * [D1] - COPY OF D5
000012AE                           348  * [D5] - DATA TO BE PROCESSED
000012AE                           349  * [D6] - COUNTER FOR LINES PROCESSED
000012AE                           350  *
000012AE                           351  * [D4]      - ERROR FLAG BEFORE PRINTING
000012AE                           352  * [STACK]   - PRINTS PROCESS DATA
000012AE                           353  * [COUNTER] - KEEPS TRACK OF STACK INCREMENT
000012AE                           354  *
000012AE                           355  * [A1] - USED FOR JUMPING/PRINTING
000012AE                           356  *
000012AE                           357  *----------------------------------------*
000012AE                           358  
000012AE                           359              
000012AE                           360              *Processing the first 4 most significant bits 
000012AE  2205                     361              MOVE.L  D5,D1                    * copy the current processing data to D1
000012B0  143C 000C                362              MOVE.B  #12,D2                   * shift to right by 12 bits
000012B4  E469                     363              LSR.W   D2,D1                    * [D2] Temporarily used D2 for shifting bits
000012B6  C2FC 0006                364              MULU    #6,D1                    * form offset
000012BA  43F9 00001328            365              LEA     JMPTABLE,A1              * index into table
000012C0  4EB1 1000                366              JSR     0(A1,D1)                 * jump indirect with index
000012C4                           367              
000012C4                           368              *SECURED EA*
000012C4  B83C 0001                369              CMP.B   #1,D4                    * ERROR FLAG CHECK [ERROR WHEN D4 == 1]
000012C8  6600 0012                370              BNE     OUTPUT_PROCESSED_DATA    * PRINTS PROCESSED OP-CODE & EA
000012CC  6100 01E8                371              BSR     OP_DATA                  * PRINT ERROR MESSAGE "DATA"
000012D0  6100 26D4                372              BSR     CLEAR_STACK              * CLEARS THE STACK 
000012D4  183C 0000                373              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
000012D8  6000 0022                374              BRA     DISPLAY_30_LINES         * GO TO LAST STEP
000012DC                           375             
000012DC                           376  OUTPUT_PROCESSED_DATA       
000012DC  163C 000D                377              MOVE.B  #$D,D3                  *carriage return
000012E0  6100 2658                378              BSR     PUSH_STACK
000012E4  163C 000A                379              MOVE.B  #$A,D3                  *new line feed
000012E8  6100 2650                380              BSR     PUSH_STACK
000012EC  163C 0000                381              MOVE.B  #$0,D3                  *null
000012F0  6100 2648                382              BSR     PUSH_STACK
000012F4                           383       
000012F4  6100 2620                384              BSR     PRINT_QUEUE
000012F8  183C 0000                385              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
000012FC                           386  DISPLAY_30_LINES
000012FC                           387              * display 30 lines per page
000012FC  5206                     388              ADDI.B  #1,D6
000012FE  0C06 001E                389              CMPI.B  #30,D6
00001302  6C00 0006                390              BGE     NEXTLINES
00001306  6000 FF50                391              BRA     MAIN
0000130A                           392            
0000130A                           393  *---------------------------------------------------------------------------*
0000130A                           394  * NEXTLINES: receive input from user to print the next 30 lines
0000130A                           395  *---------------------------------------------------------------------------*  
0000130A  4206                     396  NEXTLINES   CLR.B   D6
0000130C  43F9 00003CFB            397              LEA     DISP_NEXT,A1
00001312  103C 000E                398              MOVE.B  #14,D0
00001316  4E4F                     399              TRAP    #15
00001318  43F9 00003EAF            400              LEA     TMPINPUT,A1
0000131E  103C 0002                401              MOVE.B  #2,D0
00001322  4E4F                     402              TRAP    #15
00001324  4EF8 1258                403              JMP     MAIN
00001328                           404    
00001328                           405  *---------------------------------------------------------------------------*
00001328                           406  * JMPTABLE: OP code jump/branch table used to decode and display opcodes
00001328                           407  *---------------------------------------------------------------------------*  
00001328  4EF9 00001388            408  JMPTABLE    JMP     OP0000  * CMPI/ORI/BTST/EORI/SUBI/BTST
0000132E  4EF9 000015AE            409              JMP     OP0001  * MOVE.B                                        *FINISHED - JOSEPH
00001334  4EF9 0000161C            410              JMP     OP0010  * MOVE.L/MOVEA.L                                *FINISHED - JOSEPH
0000133A  4EF9 0000171A            411              JMP     OP0011  * MOVE.W/MOVEA.W
00001340  4EF9 00001816            412              JMP     OP0100  * MOVEM/LEA/NEG/NOT/JSR/RTS                     *FINISHED "LEA" - JOSEPH
00001346  4EF9 00001A12            413              JMP     OP0101  * ADDQ                                          *WORKING ON - JOSEPH
0000134C  4EF9 00001BB6            414              JMP     OP0110  * BRA/Bcc (BEQ/BNE/BLT/BHI)
00001352  4EF9 00001C44            415              JMP     OP0111  * MOVEQ (unassigned)
00001358  4EF9 00001C48            416              JMP     OP1000  * DIVS                                          *FINISHED - JOSEPH
0000135E  4EF9 00001D50            417              JMP     OP1001  * SUB/SUBA                                      *FINISHED - JOSEPH
00001364  4EF9 0000210C            418              JMP     OP1010  * Unassigned 
0000136A  4EF9 00002110            419              JMP     OP1011  * CMP/EOR/CMPA
00001370  4EF9 0000220C            420              JMP     OP1100  * MULS/AND                                      *FINISHED - JOSEPH
00001376  4EF9 0000255E            421              JMP     OP1101  * ADD/ADDA                                      *FINISHED - JOSEPH
0000137C  4EF9 0000293A            422              JMP     OP1110  * LSR/LSL/ASR/ASL/ROL/ROR
00001382  4EF9 00002BE8            423              JMP     OP1111  * Special/Reserved
00001388                           424              
00001388                           425  *---------------------------------------------------------------------------*
00001388                           426  * OP0000: decode CMPI/ORI/BTST/SUBI/EORI
00001388                           427  *---------------------------------------------------------------------------*           
00001388                           428  OP0000                                                                                  
00001388  4281                     429              CLR.L   D1          * to temporarily store the address to process
0000138A  4280                     430              CLR.L   D0  
0000138C  4284                     431              CLR.L   D4                 
0000138E  227C 00000000            432              MOVEA.L #0, A1                
00001394                           433              * Check for ORI (0000 0000 xx (size) xxx (EA mode) xxx(EA reg)
00001394                           434              * Check if bit 11,10,9,8 are 0000)
00001394  2205                     435              MOVE.L  D5,D1
00001396  0281 00000F00            436              ANDI.L  #$0F00,D1
0000139C  0C81 00000000            437              CMPI.L  #$0000,D1   * if they are 0000, it is ORI
000013A2  6700 01B4                438              BEQ     OP_ORI
000013A6                           439  
000013A6                           440              * check for CMPI (0000 1100 xx (size) xxx (EA mode) xxx (EA reg)
000013A6                           441              * check if bit 11,10,9,8 are 1100
000013A6  4281                     442              CLR.L   D1
000013A8  2205                     443              MOVE.L  D5,D1
000013AA  0281 00000F00            444              ANDI.L  #$0F00,D1
000013B0  0C81 00000C00            445              CMPI.L  #$0C00,D1
000013B6  6700 014A                446              BEQ     OP_CMPI
000013BA                           447              
000013BA                           448              * check for SUBI
000013BA  4281                     449              CLR.L   D1
000013BC  2205                     450              MOVE.L  D5,D1
000013BE  0281 00000F00            451              ANDI.L  #$0F00,D1
000013C4  0C81 00000400            452              CMPI.L  #$0400,D1
000013CA  6700 0094                453              BEQ     OP_SUBI
000013CE                           454              
000013CE                           455              * check for EORI
000013CE  4281                     456              CLR.L   D1
000013D0  2205                     457              MOVE.L  D5,D1
000013D2  0281 00000F00            458              ANDI.L  #$0F00,D1
000013D8  0C81 00000A00            459              CMPI.L  #$0A00,D1
000013DE  6700 002A                460              BEQ     OP_EORI
000013E2                           461              
000013E2                           462              * check for BTST
000013E2  4281                     463              CLR.L   D1
000013E4  2205                     464              MOVE.L  D5,D1
000013E6  EA99                     465              ROR.L   #5,D1
000013E8  0281 00000008            466              ANDI.L  #$8,D1
000013EE  0C01 0008                467              CMPI.B  #8,D1
000013F2  6700 0008                468              BEQ     OP_BTST
000013F6                           469  
000013F6                           470              * OP0000 series other than ORI/CMPI/BTST/EORI
000013F6  4EF9 000014B6            471              JMP     OP_DATA
000013FC                           472              
000013FC                           473  *---------------------------------------------------------------------------*
000013FC                           474  * OP_BTST: display BTST
000013FC                           475  *---------------------------------------------------------------------------* 
000013FC  43F9 00003F88            476  OP_BTST     LEA     DISP_BTST,A1
00001402  103C 000E                477              MOVE.B  #14,D0
00001406  4E4F                     478              TRAP    #15
00001408  4E75                     479              RTS
0000140A                           480  
0000140A                           481  *---------------------------------------------------------------------------*
0000140A                           482  * OP_EORI: decode and display EORI
0000140A                           483  *---------------------------------------------------------------------------* 
0000140A                           484  OP_EORI
0000140A  4281                     485              CLR.L   D1
0000140C  4284                     486              CLR.L   D4
0000140E  2205                     487              MOVE.L  D5,D1
00001410  EC99                     488              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001412  0C01 0000                489              CMPI.B  #0,D1
00001416  6700 0012                490              BEQ     OP_EORI_B    * size is byte
0000141A  0C01 0001                491              CMPI.B  #1,D1
0000141E  6700 001C                492              BEQ     OP_EORI_W    * size is word
00001422  0C01 0002                493              CMPI.B  #2,D1
00001426  6700 0026                494              BEQ     OP_EORI_L    * size is long
0000142A                           495  
0000142A                           496  OP_EORI_B    * size is byte    
0000142A  183C 0000                497              MOVE.B  #0,D4
0000142E  43F9 00003F6A            498              LEA     DISP_EORI_B,A1
00001434  103C 000E                499              MOVE.B  #14,D0
00001438  4E4F                     500              TRAP    #15
0000143A  4E75                     501              RTS
0000143C                           502              
0000143C                           503  OP_EORI_W    * size is word
0000143C  183C 0001                504              MOVE.B  #1,D4
00001440  43F9 00003F74            505              LEA     DISP_EORI_W,A1
00001446  103C 000E                506              MOVE.B  #14,D0
0000144A  4E4F                     507              TRAP    #15
0000144C  4E75                     508              RTS
0000144E                           509              
0000144E                           510  OP_EORI_L    * size is long
0000144E  183C 0002                511              MOVE.B  #2,D4
00001452  43F9 00003F7E            512              LEA     DISP_EORI_L,A1
00001458  103C 000E                513              MOVE.B  #14,D0
0000145C  4E4F                     514              TRAP    #15
0000145E  4E75                     515              RTS
00001460                           516              
00001460                           517  *---------------------------------------------------------------------------*
00001460                           518  * OP_SUBI: decode SUBI.B/.W/.L
00001460                           519  *---------------------------------------------------------------------------* 
00001460                           520  OP_SUBI
00001460  4281                     521              CLR.L   D1
00001462  4284                     522              CLR.L   D4
00001464  2205                     523              MOVE.L  D5,D1
00001466  EC99                     524              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001468  0C01 0000                525              CMPI.B  #0,D1
0000146C  6700 0012                526              BEQ     OP_SUBI_B    * size is byte
00001470  0C01 0001                527              CMPI.B  #1,D1
00001474  6700 001C                528              BEQ     OP_SUBI_W    * size is word
00001478  0C01 0002                529              CMPI.B  #2,D1
0000147C  6700 0026                530              BEQ     OP_SUBI_L    * size is long
00001480                           531  
00001480                           532  OP_SUBI_B    * size is byte    
00001480  183C 0000                533              MOVE.B  #0,D4
00001484  43F9 00004076            534              LEA     DISP_SUBI_B,A1
0000148A  103C 000E                535              MOVE.B  #14,D0
0000148E  4E4F                     536              TRAP    #15
00001490  4E75                     537              RTS
00001492                           538              
00001492                           539  OP_SUBI_W    * size is word
00001492  183C 0001                540              MOVE.B  #1,D4
00001496  43F9 00004080            541              LEA     DISP_SUBI_W,A1
0000149C  103C 000E                542              MOVE.B  #14,D0
000014A0  4E4F                     543              TRAP    #15
000014A2  4E75                     544              RTS
000014A4                           545              
000014A4                           546  OP_SUBI_L    * size is long
000014A4  183C 0002                547              MOVE.B  #2,D4
000014A8  43F9 0000408A            548              LEA     DISP_SUBI_L,A1
000014AE  103C 000E                549              MOVE.B  #14,D0
000014B2  4E4F                     550              TRAP    #15
000014B4  4E75                     551              RTS
000014B6                           552              
000014B6                           553  *---------------------------------------------------------------------------*
000014B6                           554  * OP_DATA : unidentified opcode
000014B6                           555  *---------------------------------------------------------------------------* 
000014B6                           556  OP_DATA
000014B6  4280                     557              CLR.L   D0                   
000014B8  4281                     558              CLR.L   D1     
000014BA  4284                     559              CLR.L   D4                    
000014BC  227C 00000000            560              MOVEA.L #0, A1             
000014C2  4287                     561              CLR.L   D7
000014C4  1E3C 0001                562              MOVE.B  #1,D7                   * error flag is true
000014C8                           563              
000014C8  43F9 00003FAE            564              LEA     DISP_DATA,A1
000014CE  103C 000E                565              MOVE.B  #14,D0
000014D2  4E4F                     566              TRAP    #15
000014D4                           567              
000014D4  4EF9 000014DA            568              JMP     EA_DATA
000014DA                           569             
000014DA                           570             
000014DA                           571  *---------------------------------------------------------------------------*
000014DA                           572  * EA_DATA
000014DA                           573  *---------------------------------------------------------------------------*       
000014DA  43F9 00003EFF            574  EA_DATA     LEA     TMPOUTPUT,A1    * load the temporarily stored output address
000014E0  2205                     575              MOVE.L  D5,D1           * transfer the processing data to D1
000014E2  7404                     576              MOVE.L  #4,D2           * set to word size
000014E4  4EB8 11B6                577              JSR     HEX2ASCII       * prepare output in ascii
000014E8  43F9 00004221            578              LEA     DISP_HEX,A1     * display $ symbol
000014EE  103C 000E                579              MOVE.B  #14,D0      
000014F2  4E4F                     580              TRAP    #15
000014F4  43F9 00003EFF            581              LEA     TMPOUTPUT,A1    * display with a new line
000014FA  103C 000D                582              MOVE.B  #13,D0
000014FE  4E4F                     583              TRAP    #15
00001500                           584  
00001500  4E75                     585              RTS
00001502                           586              
00001502                           587  *---------------------------------------------------------------------------*
00001502                           588  * OP_CMPI : decode CMPI and its size
00001502                           589  *---------------------------------------------------------------------------*          
00001502                           590  OP_CMPI
00001502  4281                     591              CLR.L   D1
00001504  4284                     592              CLR.L   D4
00001506  2205                     593              MOVE.L  D5,D1
00001508  EC99                     594              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
0000150A  0C01 0000                595              CMPI.B  #0,D1
0000150E  6700 0012                596              BEQ     OP_CMPI_B    * size is byte
00001512  0C01 0001                597              CMPI.B  #1,D1
00001516  6700 001C                598              BEQ     OP_CMPI_W    * size is word
0000151A  0C01 0002                599              CMPI.B  #2,D1
0000151E  6700 0026                600              BEQ     OP_CMPI_L    * size is long
00001522                           601  
00001522                           602  OP_CMPI_B    * size is byte    
00001522  183C 0000                603              MOVE.B  #0,D4
00001526  43F9 00003F90            604              LEA     DISP_CMPI_B,A1
0000152C  103C 000E                605              MOVE.B  #14,D0
00001530  4E4F                     606              TRAP    #15
00001532  4E75                     607              RTS
00001534                           608              
00001534                           609  OP_CMPI_W    * size is word
00001534  183C 0001                610              MOVE.B  #1,D4
00001538  43F9 00003F9A            611              LEA     DISP_CMPI_W,A1
0000153E  103C 000E                612              MOVE.B  #14,D0
00001542  4E4F                     613              TRAP    #15
00001544  4E75                     614              RTS
00001546                           615              
00001546                           616  OP_CMPI_L    * size is long
00001546  183C 0002                617              MOVE.B  #2,D4
0000154A  43F9 00003FA4            618              LEA     DISP_CMPI_L,A1
00001550  103C 000E                619              MOVE.B  #14,D0
00001554  4E4F                     620              TRAP    #15
00001556  4E75                     621              RTS
00001558                           622   
00001558                           623  *---------------------------------------------------------------------------*
00001558                           624  * OP_ORI : decode ORI and its size
00001558                           625  *---------------------------------------------------------------------------* 
00001558                           626  OP_ORI      
00001558  4281                     627              CLR.L   D1
0000155A  4284                     628              CLR.L   D4
0000155C  2205                     629              MOVE.L  D5,D1
0000155E  EC99                     630              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001560  0C01 0000                631              CMPI.B  #0,D1
00001564  6700 0012                632              BEQ     OP_ORI_B    * size is byte
00001568  0C01 0001                633              CMPI.B  #1,D1
0000156C  6700 001C                634              BEQ     OP_ORI_W    * size is word
00001570  0C01 0002                635              CMPI.B  #2,D1
00001574  6700 0026                636              BEQ     OP_ORI_L    * size is long
00001578                           637  
00001578                           638  OP_ORI_B    * size is byte    
00001578  183C 0000                639              MOVE.B  #0,D4
0000157C  43F9 00003F4F            640              LEA     DISP_ORI_B,A1
00001582  103C 000E                641              MOVE.B  #14,D0
00001586  4E4F                     642              TRAP    #15
00001588  4E75                     643              RTS
0000158A                           644              
0000158A                           645  OP_ORI_W    * size is word
0000158A  183C 0001                646              MOVE.B  #1,D4
0000158E  43F9 00003F58            647              LEA     DISP_ORI_W,A1
00001594  103C 000E                648              MOVE.B  #14,D0
00001598  4E4F                     649              TRAP    #15
0000159A  4E75                     650              RTS
0000159C                           651              
0000159C                           652  OP_ORI_L    * size is long
0000159C  183C 0002                653              MOVE.B  #2,D4
000015A0  43F9 00003F61            654              LEA     DISP_ORI_L,A1
000015A6  103C 000E                655              MOVE.B  #14,D0
000015AA  4E4F                     656              TRAP    #15
000015AC  4E75                     657              RTS
000015AE                           658          
000015AE                           659  *---------------------------------------------------------------------------*
000015AE                           660  * OP0001: MOVE.B
000015AE                           661  *---------------------------------------------------------------------------*
000015AE                           662  OP0001      
000015AE  4EF9 000015B4            663              JMP     OP_MOVE_B   * display MOVE.B
000015B4                           664              
000015B4                           665  *---------------------------------------------------------------------------*
000015B4                           666  * OP_MOVE_B: display MOVE_B and proceed to EA
000015B4                           667  *---------------------------------------------------------------------------*
000015B4                           668  OP_MOVE_B                                                                       
000015B4                           669             
000015B4                           670             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000015B4  13FC 0082 00004260       671             MOVE.B   #$82,DEST_REGISTER_FORMAT
000015BC  13FC 0000 00004261       672             MOVE.B   #$00,SRC_REGISTER_FORMAT
000015C4                           673             
000015C4                           674             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000015C4  13FC 00B9 00004263       675             MOVE.B   #$B9,GET_DST_START_END
000015CC  13FC 0020 00004264       676             MOVE.B   #$20,GET_SRC_START_END
000015D4                           677             
000015D4                           678              *CLEAR D3
000015D4  4283                     679              CLR.L   D3
000015D6                           680              *LOAD STACK WITH THIS OPMODE
000015D6  6100 2362                681              BSR     PUSH_STACK
000015DA  163C 004D                682              MOVE.B  #'M',D3
000015DE  6100 235A                683              BSR     PUSH_STACK
000015E2  163C 004F                684              MOVE.B  #'O',D3
000015E6  6100 2352                685              BSR     PUSH_STACK
000015EA  163C 0056                686              MOVE.B  #'V',D3
000015EE  6100 234A                687              BSR     PUSH_STACK
000015F2  163C 0045                688              MOVE.B  #'E',D3
000015F6  6100 2342                689              BSR     PUSH_STACK
000015FA  163C 002E                690              MOVE.B  #'.',D3
000015FE  6100 233A                691              BSR     PUSH_STACK
00001602  163C 0042                692              MOVE.B  #'B',D3
00001606  6100 2332                693              BSR     PUSH_STACK
0000160A                           694              
0000160A  6100 1A90                695              BSR     GET_EA_EA_SRC
0000160E  163C 002C                696              MOVE.B  #',',D3
00001612  6100 2326                697              BSR     PUSH_STACK
00001616  6100 1EB4                698              BSR     GET_EA_EA_DEST
0000161A                           699              
0000161A  4E75                     700              RTS
0000161C                           701              
0000161C                           702             
0000161C                           703  *---------------------------------------------------------------------------*
0000161C                           704  * OP0010: decode MOVE.L/MOVEA.L
0000161C                           705  *---------------------------------------------------------------------------*
0000161C                           706  OP0010      
0000161C  183C 0002                707              MOVE.B  #2,D4
00001620  4280                     708              CLR.L   D0                     
00001622  4281                     709              CLR.L   D1                      
00001624  227C 00000000            710              MOVEA.L #0, A1                 
0000162A                           711              
0000162A  2205                     712              MOVE.L  D5,D1
0000162C  EA99                     713              ROR.L   #5,D1
0000162E  0281 0000000E            714              ANDI.L  #$E,D1
00001634  0C01 0002                715              CMPI.B  #2,D1
00001638  6700 0070                716              BEQ     OP_MOVEA_L
0000163C                           717  
0000163C  4EF9 00001642            718              JMP     OP_MOVE_L
00001642                           719             
00001642                           720  
00001642                           721  *---------------------------------------------------------------------------*
00001642                           722  * OP_MOVE_L: display MOVE_L and proceed to EA
00001642                           723  *---------------------------------------------------------------------------*
00001642                           724  OP_MOVE_L   
00001642                           725             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001642  13FC 0082 00004260       726             MOVE.B   #$82,DEST_REGISTER_FORMAT
0000164A  13FC 0000 00004261       727             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001652                           728             
00001652                           729             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001652  13FC 00B9 00004263       730             MOVE.B   #$B9,GET_DST_START_END
0000165A  13FC 0020 00004264       731             MOVE.B   #$20,GET_SRC_START_END
00001662                           732             
00001662                           733              *CLEAR D3
00001662  4283                     734              CLR.L   D3
00001664                           735              *LOAD STACK WITH THIS OPMODE
00001664  6100 22D4                736              BSR     PUSH_STACK
00001668  163C 004D                737              MOVE.B  #'M',D3
0000166C  6100 22CC                738              BSR     PUSH_STACK
00001670  163C 004F                739              MOVE.B  #'O',D3
00001674  6100 22C4                740              BSR     PUSH_STACK
00001678  163C 0056                741              MOVE.B  #'V',D3
0000167C  6100 22BC                742              BSR     PUSH_STACK
00001680  163C 0045                743              MOVE.B  #'E',D3
00001684  6100 22B4                744              BSR     PUSH_STACK
00001688  163C 002E                745              MOVE.B  #'.',D3
0000168C  6100 22AC                746              BSR     PUSH_STACK
00001690  163C 004C                747              MOVE.B  #'L',D3
00001694  6100 22A4                748              BSR     PUSH_STACK
00001698                           749              
00001698  6100 1A02                750              BSR     GET_EA_EA_SRC
0000169C  163C 002C                751              MOVE.B  #',',D3
000016A0  6100 2298                752              BSR     PUSH_STACK
000016A4  6100 1E26                753              BSR     GET_EA_EA_DEST
000016A8                           754              
000016A8  4E75                     755              RTS
000016AA                           756  
000016AA                           757  
000016AA                           758  *---------------------------------------------------------------------------*
000016AA                           759  * OP_MOVEA_L: display MOVEA_L and proceed to EA
000016AA                           760  *---------------------------------------------------------------------------*
000016AA                           761  OP_MOVEA_L 
000016AA                           762             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000016AA  13FC 00FD 00004260       763             MOVE.B   #$FD,DEST_REGISTER_FORMAT
000016B2  13FC 0000 00004261       764             MOVE.B   #$00,SRC_REGISTER_FORMAT
000016BA                           765             
000016BA                           766             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000016BA  13FC 00B9 00004263       767             MOVE.B   #$B9,GET_DST_START_END
000016C2  13FC 0020 00004264       768             MOVE.B   #$20,GET_SRC_START_END
000016CA                           769             
000016CA                           770              *CLEAR D3
000016CA  4283                     771              CLR.L   D3
000016CC                           772              *LOAD STACK WITH THIS OPMODE
000016CC  6100 226C                773              BSR     PUSH_STACK
000016D0  163C 004D                774              MOVE.B  #'M',D3
000016D4  6100 2264                775              BSR     PUSH_STACK
000016D8  163C 004F                776              MOVE.B  #'O',D3
000016DC  6100 225C                777              BSR     PUSH_STACK
000016E0  163C 0056                778              MOVE.B  #'V',D3
000016E4  6100 2254                779              BSR     PUSH_STACK
000016E8  163C 0045                780              MOVE.B  #'E',D3
000016EC  6100 224C                781              BSR     PUSH_STACK           
000016F0  163C 0041                782              MOVE.B  #'A',D3
000016F4  6100 2244                783              BSR     PUSH_STACK
000016F8  163C 002E                784              MOVE.B  #'.',D3
000016FC  6100 223C                785              BSR     PUSH_STACK
00001700  163C 004C                786              MOVE.B  #'L',D3
00001704  6100 2234                787              BSR     PUSH_STACK
00001708                           788              
00001708  6100 1992                789              BSR     GET_EA_EA_SRC
0000170C  163C 002C                790              MOVE.B  #',',D3
00001710  6100 2228                791              BSR     PUSH_STACK
00001714  6100 1DB6                792              BSR     GET_EA_EA_DEST
00001718                           793              
00001718  4E75                     794              RTS
0000171A                           795  
0000171A                           796              
0000171A                           797  *---------------------------------------------------------------------------*
0000171A                           798  * OP0011: decode MOVE.W/MOVEA.W
0000171A                           799  *---------------------------------------------------------------------------*
0000171A                           800  OP0011      
0000171A  4280                     801              CLR.L   D0                      
0000171C  4281                     802              CLR.L   D1  
0000171E  4284                     803              CLR.L   D4                   
00001720  227C 00000000            804              MOVEA.L #0, A1 
00001726                           805                
00001726  2205                     806              MOVE.L  D5,D1
00001728  EC99                     807              ROR.L   #6,D1
0000172A  0281 00000007            808              ANDI.L  #$07,D1
00001730  0C01 0001                809              CMPI.B  #1,D1
00001734  6700 0070                810              BEQ     OP_MOVEA_W
00001738                           811              
00001738  4EF9 0000173E            812              JMP     OP_MOVE_W
0000173E                           813            
0000173E                           814  *---------------------------------------------------------------------------*
0000173E                           815  * OP_MOVE_W: display MOVE_W and proceed to EA
0000173E                           816  *---------------------------------------------------------------------------*
0000173E                           817  OP_MOVE_W   
0000173E                           818             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000173E  13FC 0082 00004260       819             MOVE.B   #$82,DEST_REGISTER_FORMAT
00001746  13FC 0000 00004261       820             MOVE.B   #$00,SRC_REGISTER_FORMAT
0000174E                           821             
0000174E                           822             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000174E  13FC 00B9 00004263       823             MOVE.B   #$B9,GET_DST_START_END
00001756  13FC 0020 00004264       824             MOVE.B   #$20,GET_SRC_START_END
0000175E                           825             
0000175E                           826              *CLEAR D3
0000175E  4283                     827              CLR.L   D3
00001760                           828              *LOAD STACK WITH THIS OPMODE
00001760  6100 21D8                829              BSR     PUSH_STACK
00001764  163C 004D                830              MOVE.B  #'M',D3
00001768  6100 21D0                831              BSR     PUSH_STACK
0000176C  163C 004F                832              MOVE.B  #'O',D3
00001770  6100 21C8                833              BSR     PUSH_STACK
00001774  163C 0056                834              MOVE.B  #'V',D3
00001778  6100 21C0                835              BSR     PUSH_STACK
0000177C  163C 0045                836              MOVE.B  #'E',D3
00001780  6100 21B8                837              BSR     PUSH_STACK
00001784  163C 002E                838              MOVE.B  #'.',D3
00001788  6100 21B0                839              BSR     PUSH_STACK
0000178C  163C 0057                840              MOVE.B  #'W',D3
00001790  6100 21A8                841              BSR     PUSH_STACK
00001794                           842              
00001794  6100 1906                843              BSR     GET_EA_EA_SRC
00001798  163C 002C                844              MOVE.B  #',',D3
0000179C  6100 219C                845              BSR     PUSH_STACK
000017A0  6100 1D2A                846              BSR     GET_EA_EA_DEST
000017A4                           847              
000017A4  4E75                     848              RTS
000017A6                           849  
000017A6                           850  *---------------------------------------------------------------------------*
000017A6                           851  * OP_MOVEA_W: display MOVEA and proceed to EA
000017A6                           852  *---------------------------------------------------------------------------*
000017A6                           853  OP_MOVEA_W 
000017A6                           854             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000017A6  13FC 00FD 00004260       855             MOVE.B   #$FD,DEST_REGISTER_FORMAT
000017AE  13FC 0000 00004261       856             MOVE.B   #$00,SRC_REGISTER_FORMAT
000017B6                           857             
000017B6                           858             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000017B6  13FC 00B9 00004263       859             MOVE.B   #$B9,GET_DST_START_END
000017BE  13FC 0020 00004264       860             MOVE.B   #$20,GET_SRC_START_END
000017C6                           861             
000017C6                           862              *CLEAR D3
000017C6  4283                     863              CLR.L   D3
000017C8                           864              *LOAD STACK WITH THIS OPMODE
000017C8  6100 2170                865              BSR     PUSH_STACK
000017CC  163C 004D                866              MOVE.B  #'M',D3
000017D0  6100 2168                867              BSR     PUSH_STACK
000017D4  163C 004F                868              MOVE.B  #'O',D3
000017D8  6100 2160                869              BSR     PUSH_STACK
000017DC  163C 0056                870              MOVE.B  #'V',D3
000017E0  6100 2158                871              BSR     PUSH_STACK
000017E4  163C 0045                872              MOVE.B  #'E',D3
000017E8  6100 2150                873              BSR     PUSH_STACK           
000017EC  163C 0041                874              MOVE.B  #'A',D3
000017F0  6100 2148                875              BSR     PUSH_STACK
000017F4  163C 002E                876              MOVE.B  #'.',D3
000017F8  6100 2140                877              BSR     PUSH_STACK
000017FC  163C 0057                878              MOVE.B  #'W',D3
00001800  6100 2138                879              BSR     PUSH_STACK
00001804                           880              
00001804  6100 1896                881              BSR     GET_EA_EA_SRC
00001808  163C 002C                882              MOVE.B  #',',D3
0000180C  6100 212C                883              BSR     PUSH_STACK
00001810  6100 1CBA                884              BSR     GET_EA_EA_DEST
00001814                           885            
00001814  4E75                     886              RTS
00001816                           887  *---------------------------------------------------------------------------*
00001816                           888  * OP0100: decode MOVEM/LEA/NEG/JSR/RTS/NOT
00001816                           889  *---------------------------------------------------------------------------*
00001816                           890  OP0100
00001816  4280                     891              CLR.L   D0                      
00001818  4281                     892              CLR.L   D1  
0000181A  4284                     893              CLR.L   D4                      
0000181C  227C 00000000            894              MOVEA.L #0, A1                  
00001822  2205                     895              MOVE.L  D5,D1  
00001824                           896              
00001824                           897              * check for RTS
00001824  0C41 4E75                898              CMPI.W  #$4E75,D1   * 0100 1110 0111 0101
00001828  6700 01DA                899              BEQ     OP_RTS
0000182C                           900              
0000182C                           901              * check for JSR     * 0100 1110 10 xxx (ea mode) xxx (ea reg)
0000182C  4281                     902              CLR.L   D1 
0000182E  2205                     903              MOVE.L  D5,D1  
00001830  0241 0F00                904              ANDI.W  #$0F00,D1
00001834  0C41 0E00                905              CMPI.W  #$0E00,D1
00001838  6700 01B6                906              BEQ     OP_JSR
0000183C                           907  
0000183C                           908              * check for NEG     * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
0000183C  4281                     909              CLR.L   D1 
0000183E  2205                     910              MOVE.L  D5,D1  
00001840  0241 0F00                911              ANDI.W  #$0F00,D1
00001844  0C41 0400                912              CMPI.W  #$0400,D1
00001848  6700 00E8                913              BEQ     OP_NEG
0000184C                           914              
0000184C                           915              * check for NOT     * 0100 0110 xx (size) xxx (ea mode) xxx (ea reg)
0000184C  4281                     916              CLR.L   D1 
0000184E  2205                     917              MOVE.L  D5,D1  
00001850  0241 0F00                918              ANDI.W  #$0F00,D1
00001854  0C41 0600                919              CMPI.W  #$0600,D1
00001858  6700 0140                920              BEQ     OP_NOT
0000185C                           921              
0000185C                           922              * check for LEA     * 0100 xxx (reg) 111 xxx (ea mode) xxx (ea reg)
0000185C  4281                     923              CLR.L   D1 
0000185E  2205                     924              MOVE.L  D5,D1  
00001860  EC99                     925              ROR.L   #6,D1
00001862  0281 00000007            926              ANDI.L  #7,D1
00001868  0C81 00000007            927              CMPI.L  #7,D1
0000186E  6700 0054                928              BEQ     OP_LEA
00001872                           929              
00001872                           930              * check for MOVEM   * 0100 1 x 001 x (size) xxx (ea mode) xxx (ea reg)
00001872  4281                     931              CLR.L   D1 
00001874  2205                     932              MOVE.L  D5,D1  
00001876  EB59                     933              ROL.W   #5,D1
00001878  0C01 0001                934              CMPI.B  #1,D1
0000187C  6600 FC38                935              BNE     OP_DATA
00001880  E959                     936              ROL.W   #4,D1
00001882  0C01 0001                937              CMPI.B  #1,D1
00001886  6600 FC2E                938              BNE     OP_DATA
0000188A  E359                     939              ROL.W   #1,D1
0000188C  0C01 0000                940              CMPI.B  #0,D1
00001890  6700 000E                941              BEQ     OP_MOVEM_W
00001894  0C01 0001                942              CMPI.B  #1,D1
00001898  6700 0018                943              BEQ     OP_MOVEM_L
0000189C  4EF8 14B6                944              JMP     OP_DATA
000018A0                           945  
000018A0                           946  *---------------------------------------------------------------------------*
000018A0                           947  * OP_MOVEM_W: display MOVEM_W
000018A0                           948  *---------------------------------------------------------------------------*    
000018A0                           949  OP_MOVEM_W  
000018A0  183C 0001                950              MOVE.B  #1,D4
000018A4  43F9 0000401F            951              LEA     DISP_MOVEM_W,A1
000018AA  103C 000E                952              MOVE.B  #14,D0
000018AE  4E4F                     953              TRAP    #15
000018B0  4E75                     954              RTS
000018B2                           955  
000018B2                           956  *---------------------------------------------------------------------------*
000018B2                           957  * OP_MOVEM_L: display MOVEM_L
000018B2                           958  *---------------------------------------------------------------------------*
000018B2                           959  OP_MOVEM_L  
000018B2  183C 0002                960              MOVE.B  #2,D4
000018B6  43F9 0000402A            961              LEA     DISP_MOVEM_L,A1
000018BC  103C 000E                962              MOVE.B  #14,D0
000018C0  4E4F                     963              TRAP    #15
000018C2  4E75                     964              RTS
000018C4                           965     
000018C4                           966  *---------------------------------------------------------------------------*
000018C4                           967  * OP_LEA: decode and display LEA
000018C4                           968  *---------------------------------------------------------------------------*
000018C4                           969  OP_LEA      
000018C4  4281                     970               CLR.L   D1       
000018C6  4284                     971              CLR.L   D4                   
000018C8  227C 00000000            972              MOVEA.L #0, A1              
000018CE  2205                     973              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
000018D0                           974              *CLEAR D3
000018D0  4283                     975              CLR.L   D3
000018D2                           976  
000018D2                           977  OP_LEA_DN_EA_OR_EA_DN 
000018D2                           978              *LOAD STACK WITH THIS OPMODE
000018D2  6100 2066                979              BSR     PUSH_STACK
000018D6  163C 004C                980              MOVE.B  #'L',D3
000018DA  6100 205E                981              BSR     PUSH_STACK
000018DE  163C 0045                982              MOVE.B  #'E',D3
000018E2  6100 2056                983              BSR     PUSH_STACK
000018E6  163C 0041                984              MOVE.B  #'A',D3
000018EA  6100 204E                985              BSR     PUSH_STACK
000018EE  2205                     986              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
000018F0                           987          
000018F0                           988  
000018F0                           989  OP_PRINT_L_LEA
000018F0                           990                          
000018F0                           991              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000018F0  13FC 0000 00004260       992              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000018F8  13FC 009B 00004261       993              MOVE.B   #$9B,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001900                           994             
00001900                           995              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001900  13FC 00B9 00004263       996              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001908  13FC 0020 00004264       997              MOVE.B   #$20,GET_SRC_START_END
00001910                           998  
00001910                           999              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001910  0285 0000FE3F           1000              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001916  0685 00000040           1001              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
0000191C                          1002  
0000191C  6100 177E               1003              BSR     GET_EA_EA_SRC      *GETS <ea>
00001920  163C 002C               1004              MOVE.B  #',',D3
00001924  6100 2014               1005              BSR     PUSH_STACK           
00001928  6100 1BA2               1006              BSR     GET_EA_EA_DEST       *GETS Dn    
0000192C                          1007  
0000192C                          1008              
0000192C  6000 0002               1009              BRA     OP_LEA_RETURN
00001930                          1010              
00001930                          1011  OP_LEA_RETURN
00001930  4E75                    1012              RTS
00001932                          1013              
00001932                          1014  
00001932                          1015  
00001932                          1016  *---------------------------------------------------------------------------*
00001932                          1017  * OP_NEG: decode and display NEG 
00001932                          1018  *---------------------------------------------------------------------------*
00001932                          1019  OP_NEG      * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
00001932  4281                    1020              CLR.L   D1
00001934  4284                    1021              CLR.L   D4
00001936  2205                    1022              MOVE.L  D5,D1
00001938  EC99                    1023              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
0000193A  0C01 0000               1024              CMPI.B  #0,D1
0000193E  6700 0012               1025              BEQ     OP_NEG_B    * size is byte
00001942  0C01 0001               1026              CMPI.B  #1,D1
00001946  6700 0022               1027              BEQ     OP_NEG_W    * size is word
0000194A  0C01 0002               1028              CMPI.B  #2,D1
0000194E  6700 0032               1029              BEQ     OP_NEG_L    * size is long
00001952                          1030                         
00001952                          1031  OP_NEG_B    * size is byte   
00001952  183C 0000               1032              MOVE.B  #0,D4 
00001956  43F9 00003FE2           1033              LEA     DISP_NEG_B,A1
0000195C  103C 000E               1034              MOVE.B  #14,D0
00001960  4E4F                    1035              TRAP    #15
00001962                          1036              
00001962  4EB9 00002BEC           1037              JSR     EA_NOSRC
00001968  4E75                    1038              RTS
0000196A                          1039              
0000196A                          1040  OP_NEG_W    * size is word
0000196A  183C 0001               1041              MOVE.B  #1,D4
0000196E  43F9 00003FEB           1042              LEA     DISP_NEG_W,A1
00001974  103C 000E               1043              MOVE.B  #14,D0
00001978  4E4F                    1044              TRAP    #15
0000197A  4EB9 00002BEC           1045              JSR     EA_NOSRC
00001980  4E75                    1046              RTS
00001982                          1047              
00001982                          1048  OP_NEG_L    * size is long
00001982  183C 0002               1049              MOVE.B  #2,D4
00001986  43F9 00003FF4           1050              LEA     DISP_NEG_L,A1
0000198C  103C 000E               1051              MOVE.B  #14,D0
00001990  4E4F                    1052              TRAP    #15
00001992  4EB9 00002BEC           1053              JSR     EA_NOSRC
00001998                          1054              
00001998  4E75                    1055              RTS
0000199A                          1056  
0000199A                          1057  *---------------------------------------------------------------------------*
0000199A                          1058  * OP_NOT: decode and display NOT 
0000199A                          1059  *---------------------------------------------------------------------------*
0000199A                          1060  OP_NOT
0000199A  4281                    1061              CLR.L   D1
0000199C  4284                    1062              CLR.L   D4
0000199E  2205                    1063              MOVE.L  D5,D1
000019A0  EC99                    1064              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000019A2  0C01 0000               1065              CMPI.B  #0,D1
000019A6  6700 0012               1066              BEQ     OP_NOT_B    * size is byte
000019AA  0C01 0001               1067              CMPI.B  #1,D1
000019AE  6700 001C               1068              BEQ     OP_NOT_W    * size is word
000019B2  0C01 0002               1069              CMPI.B  #2,D1
000019B6  6700 0026               1070              BEQ     OP_NOT_L    * size is long
000019BA                          1071                         
000019BA                          1072  OP_NOT_B    * size is byte   
000019BA  183C 0000               1073              MOVE.B  #0,D4 
000019BE  43F9 00003FFD           1074              LEA     DISP_NOT_B,A1
000019C4  103C 000E               1075              MOVE.B  #14,D0
000019C8  4E4F                    1076              TRAP    #15
000019CA  4E75                    1077              RTS
000019CC                          1078              
000019CC                          1079  OP_NOT_W    * size is word
000019CC  183C 0001               1080              MOVE.B  #1,D4
000019D0  43F9 00004006           1081              LEA     DISP_NOT_W,A1
000019D6  103C 000E               1082              MOVE.B  #14,D0
000019DA  4E4F                    1083              TRAP    #15
000019DC  4E75                    1084              RTS
000019DE                          1085              
000019DE                          1086  OP_NOT_L    * size is long
000019DE  183C 0002               1087              MOVE.B  #2,D4
000019E2  43F9 0000400F           1088              LEA     DISP_NOT_L,A1
000019E8  103C 000E               1089              MOVE.B  #14,D0
000019EC  4E4F                    1090              TRAP    #15
000019EE  4E75                    1091              RTS
000019F0                          1092  
000019F0                          1093  *---------------------------------------------------------------------------*
000019F0                          1094  * OP_JSR: display JSR     
000019F0                          1095  *---------------------------------------------------------------------------*
000019F0  43F9 00003FDB           1096  OP_JSR      LEA     DISP_JSR,A1
000019F6  103C 000E               1097              MOVE.B  #14,D0
000019FA  4E4F                    1098              TRAP    #15
000019FC  4EB9 00002BEC           1099              JSR     EA_NOSRC
00001A02                          1100  
00001A02  4E75                    1101              RTS
00001A04                          1102  
00001A04                          1103  *---------------------------------------------------------------------------*
00001A04                          1104  * OP_RTS: display RTS     
00001A04                          1105  *---------------------------------------------------------------------------* 
00001A04  43F9 00003FD4           1106  OP_RTS      LEA     DISP_RTS,A1
00001A0A  103C 000E               1107              MOVE.B  #14,D0
00001A0E  4E4F                    1108              TRAP    #15
00001A10  4E75                    1109              RTS
00001A12                          1110  
00001A12                          1111  *---------------------------------------------------------------------------*
00001A12                          1112  * OP0101: decode ADDQ
00001A12                          1113  *---------------------------------------------------------------------------* 
00001A12                          1114  OP0101      
00001A12                          1115             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001A12  13FC 0082 00004260      1116             MOVE.B   #$82,DEST_REGISTER_FORMAT
00001A1A  13FC 0080 00004261      1117             MOVE.B   #$80,SRC_REGISTER_FORMAT
00001A22                          1118             
00001A22                          1119             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001A22  13FC 00B9 00004263      1120             MOVE.B   #$B9,GET_DST_START_END
00001A2A  13FC 0020 00004264      1121             MOVE.B   #$20,GET_SRC_START_END
00001A32                          1122             
00001A32                          1123              *CLEAR D3
00001A32  4283                    1124              CLR.L   D3
00001A34                          1125              *LOAD STACK WITH THIS OPMODE
00001A34  6100 1F04               1126              BSR     PUSH_STACK
00001A38  163C 0041               1127              MOVE.B  #'A',D3
00001A3C  6100 1EFC               1128              BSR     PUSH_STACK
00001A40  163C 0044               1129              MOVE.B  #'D',D3
00001A44  6100 1EF4               1130              BSR     PUSH_STACK
00001A48  163C 0044               1131              MOVE.B  #'D',D3
00001A4C  6100 1EEC               1132              BSR     PUSH_STACK
00001A50  163C 0051               1133              MOVE.B  #'Q',D3
00001A54  6100 1EE4               1134              BSR     PUSH_STACK
00001A58  163C 002E               1135              MOVE.B  #'.',D3
00001A5C  6100 1EDC               1136              BSR     PUSH_STACK
00001A60                          1137              
00001A60                          1138              *FIGURE OUT SIZE*
00001A60                          1139              *00 = BYTE
00001A60                          1140              *01 = WORD
00001A60                          1141              *10 = LONG
00001A60                          1142              * BITS 7&6
00001A60                          1143              
00001A60                          1144              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
00001A60  2205                    1145              MOVE.L  D5,D1
00001A62  EC99                    1146              ROR.L   #6,D1
00001A64  0281 00000003           1147              ANDI.L  #$03,D1
00001A6A  0C01 0000               1148              CMPI.B  #%00,D1
00001A6E  6700 001E               1149              BEQ     OP0101_ADDQ_B
00001A72  0281 00000003           1150              ANDI.L  #$03,D1
00001A78  0C01 0001               1151              CMPI.B  #%01,D1
00001A7C  6700 001C               1152              BEQ     OP0101_ADDQ_W
00001A80  0281 00000003           1153              ANDI.L  #$03,D1
00001A86  0C01 0002               1154              CMPI.B  #%10,D1
00001A8A  6700 001A               1155              BEQ     OP0101_ADDQ_L
00001A8E                          1156            
00001A8E                          1157  OP0101_ADDQ_B
00001A8E                          1158              
00001A8E  163C 0042               1159              MOVE.B  #'B',D3
00001A92  6100 1EA6               1160              BSR     PUSH_STACK
00001A96  6000 0016               1161              BRA     OP0101_RETURN
00001A9A                          1162  OP0101_ADDQ_W
00001A9A                          1163              
00001A9A  163C 0057               1164              MOVE.B  #'W',D3
00001A9E  6100 1E9A               1165              BSR     PUSH_STACK
00001AA2  6000 000A               1166              BRA     OP0101_RETURN
00001AA6                          1167  OP0101_ADDQ_L
00001AA6                          1168              
00001AA6  163C 004C               1169              MOVE.B  #'L',D3
00001AAA  6100 1E8E               1170              BSR     PUSH_STACK
00001AAE                          1171  OP0101_RETURN            
00001AAE                          1172  
00001AAE                          1173              
00001AAE                          1174  *GET DATA FROM ADDQ AND PRINT #0-8
00001AAE  163C 0020               1175              MOVE.B  #' ',D3
00001AB2  6100 1E86               1176              BSR     PUSH_STACK
00001AB6  163C 0023               1177              MOVE.B  #'#',D3
00001ABA  6100 1E7E               1178              BSR     PUSH_STACK 
00001ABE                          1179  
00001ABE                          1180                       
00001ABE                          1181              *GET DATA #   
00001ABE  2205                    1182              MOVE.L  D5,D1
00001AC0  EC99                    1183              ROR.L   #6,D1            
00001AC2  E699                    1184              ROR.L   #3,D1
00001AC4  0281 00000007           1185              ANDI.L  #$07,D1
00001ACA                          1186              
00001ACA  0C01 0000               1187              CMPI.B  #%000,D1
00001ACE  6700 009A               1188              BEQ     OP0101_ADDQ_B_8
00001AD2  0C01 0001               1189              CMPI.B  #%001,D1
00001AD6  6700 003E               1190              BEQ     OP0101_ADDQ_B_1
00001ADA  0C01 0002               1191              CMPI.B  #%010,D1
00001ADE  6700 0042               1192              BEQ     OP0101_ADDQ_B_2
00001AE2  0C01 0003               1193              CMPI.B  #%011,D1
00001AE6  6700 0046               1194              BEQ     OP0101_ADDQ_B_3
00001AEA  0C01 0004               1195              CMPI.B  #%100,D1
00001AEE  6700 004A               1196              BEQ     OP0101_ADDQ_B_4
00001AF2  0C01 0005               1197              CMPI.B  #%101,D1
00001AF6  6700 004E               1198              BEQ     OP0101_ADDQ_B_5
00001AFA  0C01 0006               1199              CMPI.B  #%110,D1
00001AFE  6700 0052               1200              BEQ     OP0101_ADDQ_B_6
00001B02  0C01 0007               1201              CMPI.B  #%111,D1
00001B06  6700 0056               1202              BEQ     OP0101_ADDQ_B_7
00001B0A                          1203              
00001B0A                          1204  OP0101_ADDQ_B_0
00001B0A  163C 0030               1205              MOVE.B  #'0',D3
00001B0E  6100 1E2A               1206              BSR     PUSH_STACK
00001B12  6000 005E               1207              BRA     OP0101_RETURN2            
00001B16                          1208  OP0101_ADDQ_B_1
00001B16  163C 0031               1209              MOVE.B  #'1',D3
00001B1A  6100 1E1E               1210              BSR     PUSH_STACK
00001B1E  6000 0052               1211              BRA     OP0101_RETURN2            
00001B22                          1212  OP0101_ADDQ_B_2
00001B22  163C 0032               1213              MOVE.B  #'2',D3
00001B26  6100 1E12               1214              BSR     PUSH_STACK
00001B2A  6000 0046               1215              BRA     OP0101_RETURN2            
00001B2E                          1216  OP0101_ADDQ_B_3
00001B2E  163C 0033               1217              MOVE.B  #'3',D3
00001B32  6100 1E06               1218              BSR     PUSH_STACK
00001B36  6000 003A               1219              BRA     OP0101_RETURN2            
00001B3A                          1220  OP0101_ADDQ_B_4
00001B3A  163C 0034               1221              MOVE.B  #'4',D3
00001B3E  6100 1DFA               1222              BSR     PUSH_STACK
00001B42  6000 002E               1223              BRA     OP0101_RETURN2            
00001B46                          1224  OP0101_ADDQ_B_5
00001B46  163C 0035               1225              MOVE.B  #'5',D3
00001B4A  6100 1DEE               1226              BSR     PUSH_STACK
00001B4E  6000 0022               1227              BRA     OP0101_RETURN2
00001B52                          1228  OP0101_ADDQ_B_6
00001B52  163C 0036               1229              MOVE.B  #'6',D3
00001B56  6100 1DE2               1230              BSR     PUSH_STACK
00001B5A  6000 0016               1231              BRA     OP0101_RETURN2
00001B5E                          1232  OP0101_ADDQ_B_7
00001B5E  163C 0037               1233              MOVE.B  #'7',D3
00001B62  6100 1DD6               1234              BSR     PUSH_STACK
00001B66  6000 000A               1235              BRA     OP0101_RETURN2
00001B6A                          1236  
00001B6A                          1237  OP0101_ADDQ_B_8
00001B6A  163C 0038               1238              MOVE.B  #'8',D3
00001B6E  6100 1DCA               1239              BSR     PUSH_STACK
00001B72                          1240              
00001B72                          1241  OP0101_RETURN2            
00001B72  163C 002C               1242              MOVE.B  #',',D3
00001B76  6100 1DC2               1243              BSR     PUSH_STACK
00001B7A  6100 1520               1244              BSR     GET_EA_EA_SRC
00001B7E                          1245              
00001B7E  4E75                    1246              RTS
00001B80                          1247  
00001B80                          1248  
00001B80                          1249              
00001B80                          1250  *---------------------------------------------------------------------------*
00001B80                          1251  * OP_ADDQ: display ADDQ
00001B80                          1252  *---------------------------------------------------------------------------*              
00001B80                          1253  OP_ADDQ_B    * size is byte   
00001B80  183C 0000               1254              MOVE.B  #0,D4 
00001B84  43F9 00004035           1255              LEA     DISP_ADDQ_B,A1
00001B8A  103C 000E               1256              MOVE.B  #14,D0
00001B8E  4E4F                    1257              TRAP    #15
00001B90  4E75                    1258              RTS
00001B92                          1259              
00001B92                          1260  OP_ADDQ_W    * size is word
00001B92  183C 0001               1261              MOVE.B  #1,D4
00001B96  43F9 0000403F           1262              LEA     DISP_ADDQ_W,A1
00001B9C  103C 000E               1263              MOVE.B  #14,D0
00001BA0  4E4F                    1264              TRAP    #15
00001BA2  4E75                    1265              RTS
00001BA4                          1266              
00001BA4                          1267  OP_ADDQ_L    * size is long
00001BA4  183C 0002               1268              MOVE.B  #2,D4
00001BA8  43F9 00004049           1269              LEA     DISP_ADDQ_L,A1
00001BAE  103C 000E               1270              MOVE.B  #14,D0
00001BB2  4E4F                    1271              TRAP    #15
00001BB4  4E75                    1272              RTS
00001BB6                          1273  
00001BB6                          1274  *---------------------------------------------------------------------------*
00001BB6                          1275  * OP0110: decode BRA/BEQ/BNE/BLT/BHI
00001BB6                          1276  *---------------------------------------------------------------------------*              
00001BB6  4280                    1277  OP0110      CLR.L   D0                  
00001BB8  4281                    1278              CLR.L   D1   
00001BBA  4284                    1279              CLR.L   D4                 
00001BBC  227C 00000000           1280              MOVEA.L #0,A1
00001BC2  2205                    1281              MOVE.L  D5, D1                
00001BC4  0281 000000FF           1282              ANDI.L  #$00FF, D1              * Get 8-bit displacement 
00001BCA  2205                    1283              MOVE.L  D5,D1                  
00001BCC  0281 00000F00           1284              ANDI.L  #$0F00,D1
00001BD2                          1285                 
00001BD2  0C41 0000               1286              CMPI.W  #$0000,D1               * Check for BRA
00001BD6  6700 0050               1287              BEQ     OP_BRA                  
00001BDA                          1288                          
00001BDA  0C41 0D00               1289              CMPI.W  #$0D00,D1               * Check for BLT
00001BDE  6700 0056               1290              BEQ     OP_BLT      
00001BE2                          1291  
00001BE2  0C41 0700               1292              CMPI.W  #$0700,D1               * Check for BEQ
00001BE6  6700 0032               1293              BEQ     OP_BEQ      
00001BEA                          1294  
00001BEA  0C41 0600               1295              CMPI.W  #$0600,D1               * Check for BNE
00001BEE  6700 001C               1296              BEQ     OP_BNE  
00001BF2                          1297              
00001BF2  0C41 0200               1298              CMPI.W  #$0200,D1               * Check for BHI
00001BF6  6700 0006               1299              BEQ     OP_BHI
00001BFA                          1300  
00001BFA  4EF8 14B6               1301              JMP     OP_DATA
00001BFE                          1302              
00001BFE  43F9 00004204           1303  OP_BHI      LEA     DISP_BHI,A1             
00001C04  103C 000E               1304              MOVE.B  #14,D0
00001C08  4E4F                    1305              TRAP    #15
00001C0A  4E75                    1306              RTS
00001C0C                          1307  
00001C0C  43F9 000041FD           1308  OP_BNE      LEA     DISP_BNE,A1             
00001C12  103C 000E               1309              MOVE.B  #14,D0
00001C16  4E4F                    1310              TRAP    #15
00001C18  4E75                    1311              RTS
00001C1A                          1312  
00001C1A  43F9 000041F6           1313  OP_BEQ      LEA     DISP_BEQ,A1             
00001C20  103C 000E               1314              MOVE.B  #14,D0
00001C24  4E4F                    1315              TRAP    #15
00001C26  4E75                    1316              RTS          
00001C28                          1317                          
00001C28  43F9 000041E8           1318  OP_BRA      LEA     DISP_BRA,A1             
00001C2E  103C 000E               1319              MOVE.B  #14,D0
00001C32  4E4F                    1320              TRAP    #15
00001C34  4E75                    1321              RTS
00001C36                          1322              
00001C36  43F9 000041EF           1323  OP_BLT      LEA     DISP_BLT,A1          
00001C3C  103C 000E               1324              MOVE.B  #14,D0
00001C40  4E4F                    1325              TRAP    #15
00001C42  4E75                    1326              RTS
00001C44                          1327     
00001C44                          1328  *---------------------------------------------------------------------------*
00001C44                          1329  * OP0111 : MOVEQ not required
00001C44                          1330  *---------------------------------------------------------------------------*           
00001C44  4EF8 14B6               1331  OP0111      JMP     OP_DATA
00001C48                          1332             
00001C48                          1333  *---------------------------------------------------------------------------*
00001C48                          1334  * OP1000 : decode DIVS
00001C48                          1335  *---------------------------------------------------------------------------*           
00001C48                          1336  OP1000                           
00001C48  4281                    1337              CLR.L   D1       
00001C4A  4284                    1338              CLR.L   D4                   
00001C4C  227C 00000000           1339              MOVEA.L #0, A1              
00001C52  2205                    1340              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
00001C54                          1341              *CLEAR D3
00001C54  4283                    1342              CLR.L   D3
00001C56                          1343  
00001C56                          1344  OP1000_DIVS_DN_EA_OR_EA_DN 
00001C56                          1345              *LOAD STACK WITH THIS OPMODE
00001C56  6100 1CE2               1346              BSR     PUSH_STACK
00001C5A  163C 0044               1347              MOVE.B  #'D',D3
00001C5E  6100 1CDA               1348              BSR     PUSH_STACK
00001C62  163C 0049               1349              MOVE.B  #'I',D3
00001C66  6100 1CD2               1350              BSR     PUSH_STACK
00001C6A  163C 0056               1351              MOVE.B  #'V',D3
00001C6E  6100 1CCA               1352              BSR     PUSH_STACK
00001C72  163C 0053               1353              MOVE.B  #'S',D3
00001C76  6100 1CC2               1354              BSR     PUSH_STACK
00001C7A  163C 002E               1355              MOVE.B  #'.',D3
00001C7E  6100 1CBA               1356              BSR     PUSH_STACK
00001C82                          1357              
00001C82  2205                    1358              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00001C84                          1359              
00001C84                          1360  OP1000_EA_DN_DIVS
00001C84                          1361              *BITS (7 TO 6) 
00001C84                          1362              *00 = .B
00001C84                          1363              *01 = .W
00001C84                          1364              *10 = .L 
00001C84  2205                    1365              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00001C86  EC99                    1366              ROR.L   #6,D1
00001C88  0281 00000003           1367              ANDI.L  #$03,D1
00001C8E  0C81 00000003           1368              CMPI.L  #%11,D1 *EQUALS .W
00001C94  6700 0014               1369              BEQ     OP1000_PRINT_W_DIVS
00001C98  0C81 00000000           1370              CMPI.L  #%00,D1 *EQUALS .L
00001C9E  6700 0052               1371              BEQ     OP1000_PRINT_L_DIVS
00001CA2                          1372              
00001CA2  183C 0001               1373              MOVE.B  #1,D4               *ERROR READ
00001CA6  6000 0092               1374              BRA     OP1000_DIVS_RETURN
00001CAA                          1375  OP1000_PRINT_W_DIVS
00001CAA  163C 0057               1376              MOVE.B  #'W',D3
00001CAE  6100 1C8A               1377              BSR     PUSH_STACK
00001CB2                          1378  
00001CB2                          1379              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001CB2  13FC 0000 00004260      1380              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001CBA  13FC 0000 00004261      1381              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001CC2                          1382             
00001CC2                          1383              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001CC2  13FC 00B9 00004263      1384              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001CCA  13FC 0020 00004264      1385              MOVE.B   #$20,GET_SRC_START_END
00001CD2                          1386  
00001CD2                          1387             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001CD2  0285 0000FE3F           1388              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001CD8  0685 00000000           1389              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00001CDE                          1390  
00001CDE                          1391              
00001CDE  6100 13BC               1392              BSR     GET_EA_EA_SRC      *GETS <ea>
00001CE2  163C 002C               1393              MOVE.B  #',',D3
00001CE6  6100 1C52               1394              BSR     PUSH_STACK
00001CEA  6100 17E0               1395              BSR     GET_EA_EA_DEST       *GETS Dn    
00001CEE                          1396              
00001CEE  6000 004A               1397              BRA     OP1000_DIVS_RETURN
00001CF2                          1398  OP1000_PRINT_L_DIVS
00001CF2  163C 004C               1399              MOVE.B  #'L',D3
00001CF6  6100 1C42               1400              BSR     PUSH_STACK
00001CFA                          1401              
00001CFA                          1402              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001CFA  13FC 0000 00004260      1403              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001D02  13FC 0000 00004261      1404              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001D0A                          1405             
00001D0A                          1406              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001D0A  13FC 00B9 00004263      1407              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001D12  13FC 0020 00004264      1408              MOVE.B   #$20,GET_SRC_START_END
00001D1A                          1409  
00001D1A                          1410              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001D1A  0285 0000FE3F           1411              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001D20  0685 00000000           1412              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00001D26                          1413  
00001D26                          1414                     
00001D26  6100 1374               1415              BSR     GET_EA_EA_SRC      *GETS <ea>
00001D2A  163C 002C               1416              MOVE.B  #',',D3
00001D2E  6100 1C0A               1417              BSR     PUSH_STACK                  
00001D32  6100 1798               1418              BSR     GET_EA_EA_DEST       *GETS Dn    
00001D36                          1419  
00001D36                          1420              
00001D36  6000 0002               1421              BRA     OP1000_DIVS_RETURN
00001D3A                          1422              
00001D3A                          1423  OP1000_DIVS_RETURN
00001D3A  4E75                    1424              RTS
00001D3C                          1425              
00001D3C                          1426  
00001D3C                          1427  
00001D3C                          1428  *---------------------------------------------------------------------------*
00001D3C                          1429  * OP_DIVS: display DIVS and proceed to EA
00001D3C                          1430  *---------------------------------------------------------------------------*  
00001D3C  43F9 00004053           1431  OP_DIVS     LEA     DISP_DIVS,A1
00001D42  103C 000E               1432              MOVE.B  #14,D0
00001D46  4E4F                    1433              TRAP    #15
00001D48  4EF9 00002C00           1434              JMP     EA_ARITH
00001D4E                          1435  
00001D4E  4E75                    1436              RTS
00001D50                          1437              
00001D50                          1438  *---------------------------------------------------------------------------*
00001D50                          1439  * OP1001: decode SUB/SUBA
00001D50                          1440  *---------------------------------------------------------------------------*      
00001D50                          1441  OP1001      
00001D50  4280                    1442              CLR.L   D0                  
00001D52  4281                    1443              CLR.L   D1       
00001D54  4284                    1444              CLR.L   D4                   
00001D56  227C 00000000           1445              MOVEA.L #0, A1              
00001D5C  2205                    1446              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
00001D5E                          1447              
00001D5E                          1448              *CLEAR D3
00001D5E  4283                    1449              CLR.L   D3
00001D60                          1450              
00001D60                          1451              
00001D60                          1452              
00001D60                          1453              **INTEGRATING SUB.W/.L INTO THIS CODE**
00001D60  2205                    1454              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00001D62                          1455              *BITS (INDEX 8) 
00001D62                          1456              *0 = ADD.B/W/L <EA>,Dn
00001D62                          1457              *1 = ADD.B/W/L Dn,<EA> 
00001D62  EC99                    1458              ROR.L   #6,D1
00001D64  0281 00000007           1459              ANDI.L  #$07,D1                 *MASKS WITH 00000111
00001D6A  0C81 00000007           1460              CMPI.L  #$07,D1                 *IF EQUALS <ea>,Dn
00001D70  6700 0010               1461              BEQ     OP1001_SUBA_L            *BRANCHES TO ADDA.L
00001D74  0C81 00000003           1462              CMPI.L  #$03,D1                 *IF EQUALS <ea>,Dn
00001D7A  6700 0078               1463              BEQ     OP1001_SUBA_W           *BRANCHES TO ADDA.W
00001D7E  6000 00E6               1464              BRA     OP1001_DETERMINE_DN_EA_OR_EA_DN         *ELSE CHECK ADD.B/.W/.L
00001D82                          1465              
00001D82                          1466  OP1001_SUBA_L
00001D82                          1467              *LOAD STACK WITH THIS OPMODE
00001D82  6100 1BB6               1468              BSR     PUSH_STACK
00001D86  163C 0053               1469              MOVE.B  #'S',D3
00001D8A  6100 1BAE               1470              BSR     PUSH_STACK
00001D8E  163C 0055               1471              MOVE.B  #'U',D3
00001D92  6100 1BA6               1472              BSR     PUSH_STACK
00001D96  163C 0042               1473              MOVE.B  #'B',D3
00001D9A  6100 1B9E               1474              BSR     PUSH_STACK
00001D9E  163C 0041               1475              MOVE.B  #'A',D3
00001DA2  6100 1B96               1476              BSR     PUSH_STACK
00001DA6  163C 002E               1477              MOVE.B  #'.',D3
00001DAA  6100 1B8E               1478              BSR     PUSH_STACK
00001DAE  163C 004C               1479              MOVE.B  #'L',D3
00001DB2  6100 1B86               1480              BSR     PUSH_STACK
00001DB6                          1481              
00001DB6                          1482             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001DB6  13FC 0000 00004260      1483             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001DBE  13FC 0000 00004261      1484             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001DC6                          1485             
00001DC6                          1486             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001DC6  13FC 00B9 00004263      1487             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001DCE  13FC 0020 00004264      1488             MOVE.B   #$20,GET_SRC_START_END
00001DD6                          1489  
00001DD6                          1490              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001DD6  0285 0000FE3F           1491              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001DDC  0685 00000040           1492              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00001DE2                          1493       
00001DE2                          1494              *PRINT <EA>,AN
00001DE2  6100 12B8               1495              BSR     GET_EA_EA_SRC       *GETS <ea>
00001DE6  163C 002C               1496              MOVE.B  #',',D3
00001DEA  6100 1B4E               1497              BSR     PUSH_STACK                     
00001DEE  6100 16DC               1498              BSR     GET_EA_EA_DEST      *GETS Dn
00001DF2                          1499  
00001DF2                          1500              
00001DF2                          1501              
00001DF2  4E75                    1502              RTS
00001DF4                          1503  OP1001_SUBA_W
00001DF4                          1504              *LOAD STACK WITH THIS OPMODE
00001DF4  6100 1B44               1505              BSR     PUSH_STACK
00001DF8  163C 0053               1506              MOVE.B  #'S',D3
00001DFC  6100 1B3C               1507              BSR     PUSH_STACK
00001E00  163C 0055               1508              MOVE.B  #'U',D3
00001E04  6100 1B34               1509              BSR     PUSH_STACK
00001E08  163C 0042               1510              MOVE.B  #'B',D3
00001E0C  6100 1B2C               1511              BSR     PUSH_STACK
00001E10  163C 0041               1512              MOVE.B  #'A',D3
00001E14  6100 1B24               1513              BSR     PUSH_STACK
00001E18  163C 002E               1514              MOVE.B  #'.',D3
00001E1C  6100 1B1C               1515              BSR     PUSH_STACK
00001E20  163C 0057               1516              MOVE.B  #'W',D3
00001E24  6100 1B14               1517              BSR     PUSH_STACK
00001E28                          1518              
00001E28                          1519             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001E28  13FC 0000 00004260      1520             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001E30  13FC 0000 00004261      1521             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001E38                          1522             
00001E38                          1523             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001E38  13FC 00B9 00004263      1524             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001E40  13FC 0020 00004264      1525             MOVE.B   #$20,GET_SRC_START_END
00001E48                          1526  
00001E48                          1527              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001E48  0285 0000FE3F           1528              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001E4E  0685 00000040           1529              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00001E54                          1530       
00001E54                          1531              *PRINT <EA>,AN
00001E54  6100 1246               1532              BSR     GET_EA_EA_SRC       *GETS <ea>
00001E58  163C 002C               1533              MOVE.B  #',',D3
00001E5C  6100 1ADC               1534              BSR     PUSH_STACK                     
00001E60  6100 166A               1535              BSR     GET_EA_EA_DEST      *GETS Dn
00001E64                          1536  
00001E64  4E75                    1537              RTS
00001E66                          1538  
00001E66                          1539  OP1001_DETERMINE_DN_EA_OR_EA_DN 
00001E66                          1540              *LOAD STACK WITH THIS OPMODE
00001E66  6100 1AD2               1541              BSR     PUSH_STACK
00001E6A  163C 0053               1542              MOVE.B  #'S',D3
00001E6E  6100 1ACA               1543              BSR     PUSH_STACK
00001E72  163C 0055               1544              MOVE.B  #'U',D3
00001E76  6100 1AC2               1545              BSR     PUSH_STACK
00001E7A  163C 0042               1546              MOVE.B  #'B',D3
00001E7E  6100 1ABA               1547              BSR     PUSH_STACK
00001E82  163C 002E               1548              MOVE.B  #'.',D3
00001E86  6100 1AB2               1549              BSR     PUSH_STACK
00001E8A                          1550              
00001E8A  2205                    1551              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00001E8C                          1552              
00001E8C                          1553              *BITS (INDEX 8) 
00001E8C                          1554              *0 = ADD.B/W/L <EA>,Dn
00001E8C                          1555              *1 = ADD.B/W/L Dn,<EA> 
00001E8C  E099                    1556              ROR.L   #8,D1
00001E8E  0281 00000001           1557              ANDI.L  #$01,D1     *MASKS WITH 00000001
00001E94  0C81 00000000           1558              CMPI.L  #$00,D1     *IF EQUALS <ea>,Dn
00001E9A  6700 0102               1559              BEQ     OP1001_EA_DN
00001E9E                          1560              *else procede to Dn_EA
00001E9E                          1561              
00001E9E                          1562  OP1001_DN_EA
00001E9E                          1563              *BITS (7 TO 6) 
00001E9E                          1564              *00 = .B
00001E9E                          1565              *01 = .W
00001E9E                          1566              *10 = .L 
00001E9E  2205                    1567              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00001EA0  EC99                    1568              ROR.L   #6,D1
00001EA2  0281 00000003           1569              ANDI.L  #$03,D1
00001EA8  0C81 00000000           1570              CMPI.L  #$00,D1 *EQUALS .B
00001EAE  6700 0016               1571              BEQ     OP1001_PRINT_B2
00001EB2  0C81 00000001           1572              CMPI.L  #$01,D1 *EQUALS .W
00001EB8  6700 0054               1573              BEQ     OP1001_PRINT_W2
00001EBC  0C81 00000002           1574              CMPI.L  #$02,D1 *EQUALS .L
00001EC2  6700 0092               1575              BEQ     OP1001_PRINT_L2
00001EC6                          1576  OP1001_PRINT_B2
00001EC6                          1577              *PUSH 'B'
00001EC6  163C 0042               1578              MOVE.B  #'B',D3
00001ECA  6100 1A6E               1579              BSR     PUSH_STACK
00001ECE                          1580             
00001ECE                          1581              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001ECE  13FC 0000 00004260      1582             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001ED6  13FC 0083 00004261      1583             MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001EDE                          1584             
00001EDE                          1585             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001EDE  13FC 00B9 00004263      1586             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001EE6  13FC 0020 00004264      1587             MOVE.B   #$20,GET_SRC_START_END
00001EEE                          1588  
00001EEE                          1589              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001EEE  0285 0000FE3F           1590              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001EF4  0685 00000040           1591              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00001EFA                          1592       
00001EFA  6100 15D0               1593              BSR     GET_EA_EA_DEST      *GETS Dn
00001EFE  163C 002C               1594              MOVE.B  #',',D3
00001F02  6100 1A36               1595              BSR     PUSH_STACK                     
00001F06  6100 1194               1596              BSR     GET_EA_EA_SRC       *GETS <ea>
00001F0A                          1597  
00001F0A                          1598              
00001F0A  6000 09A0               1599              BRA     OP1101_ADD_RETURN
00001F0E                          1600  OP1001_PRINT_W2
00001F0E  163C 0057               1601              MOVE.B  #'W',D3
00001F12  6100 1A26               1602              BSR     PUSH_STACK
00001F16                          1603  
00001F16                          1604              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001F16  13FC 0000 00004260      1605              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001F1E  13FC 0083 00004261      1606              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001F26                          1607             
00001F26                          1608              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001F26  13FC 00B9 00004263      1609              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001F2E  13FC 0020 00004264      1610              MOVE.B   #$20,GET_SRC_START_END
00001F36                          1611  
00001F36                          1612              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001F36  0285 0000FE3F           1613              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001F3C  0685 00000040           1614              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A An Register (001) 
00001F42                          1615  
00001F42                          1616        
00001F42  6100 1588               1617              BSR     GET_EA_EA_DEST      *GETS Dn
00001F46  163C 002C               1618              MOVE.B  #',',D3
00001F4A  6100 19EE               1619              BSR     PUSH_STACK               
00001F4E  6100 114C               1620              BSR     GET_EA_EA_SRC       *GETS <ea>       
00001F52                          1621  
00001F52                          1622  
00001F52                          1623  
00001F52  6000 0958               1624              BRA     OP1101_ADD_RETURN
00001F56                          1625  OP1001_PRINT_L2 
00001F56  163C 004C               1626              MOVE.B  #'L',D3
00001F5A  6100 19DE               1627              BSR     PUSH_STACK
00001F5E                          1628              
00001F5E                          1629              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001F5E  13FC 0000 00004260      1630              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001F66  13FC 0083 00004261      1631              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001F6E                          1632             
00001F6E                          1633              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001F6E  13FC 00B9 00004263      1634              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001F76  13FC 0020 00004264      1635              MOVE.B   #$20,GET_SRC_START_END
00001F7E                          1636  
00001F7E                          1637             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001F7E  0285 0000FE3F           1638              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001F84  0685 00000040           1639              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00001F8A                          1640  
00001F8A                          1641               
00001F8A  6100 1540               1642              BSR     GET_EA_EA_DEST       *GETS Dn
00001F8E  163C 002C               1643              MOVE.B  #',',D3
00001F92  6100 19A6               1644              BSR     PUSH_STACK          
00001F96  6100 1104               1645              BSR     GET_EA_EA_SRC        *GETS <ea>
00001F9A                          1646  
00001F9A  6000 0910               1647              BRA     OP1101_ADD_RETURN
00001F9E                          1648              
00001F9E                          1649  OP1001_EA_DN           
00001F9E                          1650              *BITS (7 TO 6) 
00001F9E                          1651              *00 = .B
00001F9E                          1652              *01 = .W
00001F9E                          1653              *10 = .L 
00001F9E  2205                    1654              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00001FA0  EC99                    1655              ROR.L   #6,D1
00001FA2  0281 00000003           1656              ANDI.L  #$03,D1
00001FA8  0C81 00000000           1657              CMPI.L  #$00,D1 *EQUALS .B
00001FAE  6700 0016               1658              BEQ     OP1001_PRINT_B
00001FB2  0C81 00000001           1659              CMPI.L  #$01,D1 *EQUALS .W
00001FB8  6700 0054               1660              BEQ     OP1001_PRINT_W
00001FBC  0C81 00000002           1661              CMPI.L  #$02,D1 *EQUALS .L
00001FC2  6700 0092               1662              BEQ     OP1001_PRINT_L
00001FC6                          1663  OP1001_PRINT_B
00001FC6  163C 0042               1664              MOVE.B  #'B',D3
00001FCA  6100 196E               1665              BSR     PUSH_STACK
00001FCE                          1666                
00001FCE                          1667              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001FCE  13FC 0000 00004260      1668              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001FD6  13FC 0002 00004261      1669              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001FDE                          1670             
00001FDE                          1671              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001FDE  13FC 00B9 00004263      1672              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001FE6  13FC 0020 00004264      1673              MOVE.B   #$20,GET_SRC_START_END
00001FEE                          1674  
00001FEE                          1675             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001FEE  0285 0000FE3F           1676              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001FF4  0685 00000040           1677              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "AN" Register (001) 
00001FFA                          1678  
00001FFA                          1679              
00001FFA  6100 10A0               1680              BSR     GET_EA_EA_SRC      *GETS <ea>
00001FFE  163C 002C               1681              MOVE.B  #',',D3
00002002  6100 1936               1682              BSR     PUSH_STACK          
00002006  6100 14C4               1683              BSR     GET_EA_EA_DEST       *GETS Dn
0000200A                          1684              
0000200A  6000 08A0               1685              BRA     OP1101_ADD_RETURN
0000200E                          1686  OP1001_PRINT_W
0000200E  163C 0057               1687              MOVE.B  #'W',D3
00002012  6100 1926               1688              BSR     PUSH_STACK
00002016                          1689  
00002016                          1690              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002016  13FC 0000 00004260      1691              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000201E  13FC 0000 00004261      1692              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002026                          1693             
00002026                          1694              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002026  13FC 00B9 00004263      1695              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000202E  13FC 0020 00004264      1696              MOVE.B   #$20,GET_SRC_START_END
00002036                          1697  
00002036                          1698             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002036  0285 0000FE3F           1699              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000203C  0685 00000040           1700              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002042                          1701  
00002042                          1702              
00002042  6100 1058               1703              BSR     GET_EA_EA_SRC      *GETS <ea>
00002046  163C 002C               1704              MOVE.B  #',',D3
0000204A  6100 18EE               1705              BSR     PUSH_STACK
0000204E  6100 147C               1706              BSR     GET_EA_EA_DEST       *GETS Dn    
00002052                          1707              
00002052  6000 004A               1708              BRA     OP1001_ADD_RETURN
00002056                          1709  OP1001_PRINT_L 
00002056  163C 004C               1710              MOVE.B  #'L',D3
0000205A  6100 18DE               1711              BSR     PUSH_STACK
0000205E                          1712              
0000205E                          1713              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000205E  13FC 0000 00004260      1714              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002066  13FC 0000 00004261      1715              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000206E                          1716             
0000206E                          1717              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000206E  13FC 00B9 00004263      1718              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002076  13FC 0020 00004264      1719              MOVE.B   #$20,GET_SRC_START_END
0000207E                          1720  
0000207E                          1721              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000207E  0285 0000FE3F           1722              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002084  0685 00000040           1723              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
0000208A                          1724  
0000208A                          1725                     
0000208A  6100 1010               1726              BSR     GET_EA_EA_SRC      *GETS <ea>
0000208E  163C 002C               1727              MOVE.B  #',',D3
00002092  6100 18A6               1728              BSR     PUSH_STACK                  
00002096  6100 1434               1729              BSR     GET_EA_EA_DEST       *GETS Dn    
0000209A                          1730  
0000209A                          1731              
0000209A  6000 0002               1732              BRA     OP1001_ADD_RETURN
0000209E                          1733              
0000209E                          1734  OP1001_ADD_RETURN
0000209E  4E75                    1735              RTS
000020A0                          1736  
000020A0                          1737    
000020A0                          1738  *---------------------------------------------------------------------------*
000020A0                          1739  * OP_SUB: display SUB and proceed to EA
000020A0                          1740  *---------------------------------------------------------------------------*            
000020A0  43F9 0000405B           1741  OP_SUB_B    LEA     DISP_SUB_B,A1
000020A6  103C 000E               1742              MOVE.B  #14,D0
000020AA  4E4F                    1743              TRAP    #15
000020AC  183C 0000               1744              MOVE.B  #0,D4
000020B0  4EF9 00002C4C           1745              JMP     EA_GEN
000020B6                          1746  
000020B6  4E75                    1747              RTS
000020B8                          1748  
000020B8  43F9 00004064           1749  OP_SUB_W    LEA     DISP_SUB_W,A1
000020BE  103C 000E               1750              MOVE.B  #14,D0
000020C2  4E4F                    1751              TRAP    #15
000020C4  183C 0001               1752              MOVE.B  #1,D4
000020C8  4EF9 00002C4C           1753              JMP     EA_GEN
000020CE                          1754  
000020CE  4E75                    1755              RTS
000020D0                          1756  
000020D0  43F9 0000406D           1757  OP_SUB_L    LEA     DISP_SUB_L,A1
000020D6  103C 000E               1758              MOVE.B  #14,D0
000020DA  4E4F                    1759              TRAP    #15
000020DC  183C 0002               1760              MOVE.B  #2,D4
000020E0  4EF9 00002C4C           1761              JMP     EA_GEN
000020E6                          1762  
000020E6  4E75                    1763              RTS
000020E8                          1764  
000020E8                          1765  *---------------------------------------------------------------------------*
000020E8                          1766  * OP_SUBA: display SUBA
000020E8                          1767  *---------------------------------------------------------------------------*  
000020E8  43F9 00004094           1768  OP_SUBA_W   LEA     DISP_SUBA_W,A1
000020EE  103C 000E               1769              MOVE.B  #14,D0
000020F2  4E4F                    1770              TRAP    #15
000020F4  183C 0001               1771              MOVE.B  #1,D4
000020F8  4E75                    1772              RTS
000020FA                          1773  
000020FA  43F9 0000409E           1774  OP_SUBA_L   LEA     DISP_SUBA_L,A1
00002100  103C 000E               1775              MOVE.B  #14,D0
00002104  4E4F                    1776              TRAP    #15
00002106  183C 0002               1777              MOVE.B  #2,D4
0000210A  4E75                    1778              RTS         
0000210C                          1779  *---------------------------------------------------------------------------*
0000210C                          1780  * OP1010 : unassigned
0000210C                          1781  *---------------------------------------------------------------------------*           
0000210C  4EF8 14B6               1782  OP1010      JMP     OP_DATA
00002110                          1783              
00002110                          1784  *---------------------------------------------------------------------------*
00002110                          1785  * OP1011 : decode CMP/EOR/CMPA
00002110                          1786  *---------------------------------------------------------------------------*           
00002110  4280                    1787  OP1011      CLR.L   D0                
00002112  4281                    1788              CLR.L   D1            
00002114  4284                    1789              CLR.L   D4                   
00002116  227C 00000000           1790              MOVEA.L #0, A1               
0000211C  2205                    1791              MOVE.L  D5,D1
0000211E  EA99                    1792              ROR.L   #5,D1
00002120  0281 0000000E           1793              ANDI.L  #$E,D1
00002126  0C01 0000               1794              CMPI.B  #$0,D1
0000212A  6700 0062               1795              BEQ     OP_CMP_B
0000212E  0C01 0002               1796              CMPI.B  #$2,D1
00002132  6700 0072               1797              BEQ     OP_CMP_W
00002136  0C01 0004               1798              CMPI.B  #$4,D1
0000213A  6700 0082               1799              BEQ     OP_CMP_L
0000213E  0C01 0008               1800              CMPI.B  #$8,D1
00002142  6700 0092               1801              BEQ     OP_EOR_B
00002146  0C01 000A               1802              CMPI.B  #$A,D1
0000214A  6700 009C               1803              BEQ     OP_EOR_W
0000214E  0C01 000C               1804              CMPI.B  #$C,D1
00002152  6700 00A6               1805              BEQ     OP_EOR_L  
00002156  0C01 0006               1806              CMPI.B  #$6,D1
0000215A  6700 000E               1807              BEQ     OP_CMPA_W
0000215E  0C01 000E               1808              CMPI.B  #$E,D1
00002162  6700 0018               1809              BEQ     OP_CMPA_L 
00002166                          1810  
00002166  4EF8 14B6               1811              JMP     OP_DATA          
0000216A                          1812  
0000216A                          1813  *---------------------------------------------------------------------------*
0000216A                          1814  * OP_CMPA: display CMPA 
0000216A                          1815  *---------------------------------------------------------------------------
0000216A  43F9 000040DE           1816  OP_CMPA_W   LEA     DISP_CMPA_W,A1
00002170  103C 000E               1817              MOVE.B  #14,D0
00002174  4E4F                    1818              TRAP    #15
00002176  183C 0001               1819              MOVE.B  #1,D4
0000217A  4E75                    1820              RTS
0000217C                          1821  
0000217C  43F9 000040E8           1822  OP_CMPA_L   LEA     DISP_CMPA_L,A1
00002182  103C 000E               1823              MOVE.B  #14,D0
00002186  4E4F                    1824              TRAP    #15
00002188  183C 0002               1825              MOVE.B  #2,D4
0000218C  4E75                    1826              RTS
0000218E                          1827  
0000218E                          1828  *---------------------------------------------------------------------------*
0000218E                          1829  * OP_CMP: display CMP and proceed to EA
0000218E                          1830  *---------------------------------------------------------------------------*  
0000218E  43F9 000040C3           1831  OP_CMP_B    LEA     DISP_CMP_B,A1
00002194  103C 000E               1832              MOVE.B  #14,D0
00002198  4E4F                    1833              TRAP    #15
0000219A  183C 0000               1834              MOVE.B  #0,D4
0000219E  4EF9 00002C4C           1835              JMP     EA_GEN
000021A4                          1836  
000021A4  4E75                    1837              RTS
000021A6                          1838              
000021A6  43F9 000040CC           1839  OP_CMP_W    LEA     DISP_CMP_W,A1
000021AC  103C 000E               1840              MOVE.B  #14,D0
000021B0  4E4F                    1841              TRAP    #15
000021B2  183C 0001               1842              MOVE.B  #1,D4
000021B6  4EF9 00002C4C           1843              JMP     EA_GEN
000021BC                          1844  
000021BC  4E75                    1845              RTS
000021BE                          1846              
000021BE  43F9 000040D5           1847  OP_CMP_L    LEA     DISP_CMP_L,A1
000021C4  103C 000E               1848              MOVE.B  #14,D0
000021C8  4E4F                    1849              TRAP    #15
000021CA  183C 0002               1850              MOVE.B  #2,D4
000021CE  4EF9 00002C4C           1851              JMP     EA_GEN
000021D4                          1852  
000021D4  4E75                    1853              RTS
000021D6                          1854              
000021D6                          1855  *---------------------------------------------------------------------------*
000021D6                          1856  * OP_EOR: display EOR
000021D6                          1857  *---------------------------------------------------------------------------*  
000021D6  43F9 000040A8           1858  OP_EOR_B    LEA     DISP_EOR_B,A1
000021DC  103C 000E               1859              MOVE.B  #14,D0
000021E0  4E4F                    1860              TRAP    #15
000021E2  183C 0000               1861              MOVE.B  #0,D4
000021E6  4E75                    1862              RTS
000021E8                          1863              
000021E8  43F9 000040B1           1864  OP_EOR_W    LEA     DISP_EOR_W,A1
000021EE  103C 000E               1865              MOVE.B  #14,D0
000021F2  4E4F                    1866              TRAP    #15
000021F4  183C 0001               1867              MOVE.B  #1,D4
000021F8  4E75                    1868              RTS
000021FA                          1869              
000021FA  43F9 000040BA           1870  OP_EOR_L    LEA     DISP_EOR_L,A1
00002200  103C 000E               1871              MOVE.B  #14,D0
00002204  4E4F                    1872              TRAP    #15
00002206  183C 0002               1873              MOVE.B  #2,D4
0000220A  4E75                    1874              RTS    
0000220C                          1875  
0000220C                          1876  *---------------------------------------------------------------------------*
0000220C                          1877  * OP1100: Decode and display MULS/AND and proceed to EA
0000220C                          1878  *---------------------------------------------------------------------------* 
0000220C  4280                    1879  OP1100      CLR.L   D0                 
0000220E  4281                    1880              CLR.L   D1    
00002210  4284                    1881              CLR.L   D4                
00002212  227C 00000000           1882              MOVEA.L #0, A1        
00002218  2205                    1883              MOVE.L  D5,D1
0000221A  EA89                    1884              LSR.L   #5,D1
0000221C  0281 0000000E           1885              ANDI.L  #$E,D1
00002222  0C41 000E               1886              CMPI.W  #$E,D1
00002226  6700 0006               1887              BEQ     OP_MULS
0000222A  6000 00F6               1888              BRA     OP1100_DETERMINE_DN_EA_OR_EA_DN 
0000222E                          1889  
0000222E                          1890  OP_MULS                      
0000222E  4281                    1891              CLR.L   D1       
00002230  4284                    1892              CLR.L   D4                   
00002232  227C 00000000           1893              MOVEA.L #0, A1              
00002238  2205                    1894              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
0000223A                          1895              *CLEAR D3
0000223A  4283                    1896              CLR.L   D3
0000223C                          1897  
0000223C                          1898  OP1100_MULS_DN_EA_OR_EA_DN 
0000223C                          1899              *LOAD STACK WITH THIS OPMODE
0000223C  6100 16FC               1900              BSR     PUSH_STACK
00002240  163C 004D               1901              MOVE.B  #'M',D3
00002244  6100 16F4               1902              BSR     PUSH_STACK
00002248  163C 0055               1903              MOVE.B  #'U',D3
0000224C  6100 16EC               1904              BSR     PUSH_STACK
00002250  163C 004C               1905              MOVE.B  #'L',D3
00002254  6100 16E4               1906              BSR     PUSH_STACK
00002258  163C 0053               1907              MOVE.B  #'S',D3
0000225C  6100 16DC               1908              BSR     PUSH_STACK
00002260  163C 002E               1909              MOVE.B  #'.',D3
00002264  6100 16D4               1910              BSR     PUSH_STACK
00002268                          1911              
00002268  2205                    1912              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
0000226A                          1913              
0000226A                          1914  OP1100_EA_DN_MULS           
0000226A                          1915              *BITS (7 TO 6) 
0000226A                          1916              *00 = .B
0000226A                          1917              *01 = .W
0000226A                          1918              *10 = .L 
0000226A  2205                    1919              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
0000226C  EC99                    1920              ROR.L   #6,D1
0000226E  0281 00000003           1921              ANDI.L  #$03,D1
00002274  0C81 00000003           1922              CMPI.L  #%11,D1 *EQUALS .W
0000227A  6700 0014               1923              BEQ     OP1100_PRINT_W_MULS
0000227E  0C81 00000000           1924              CMPI.L  #%00,D1 *EQUALS .L
00002284  6700 0052               1925              BEQ     OP1100_PRINT_L_MULS
00002288                          1926              
00002288  183C 0001               1927              MOVE.B  #1,D4               *ERROR READ
0000228C  6000 0092               1928              BRA     OP1100_MULS_RETURN
00002290                          1929  OP1100_PRINT_W_MULS
00002290  163C 0057               1930              MOVE.B  #'W',D3
00002294  6100 16A4               1931              BSR     PUSH_STACK
00002298                          1932  
00002298                          1933              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002298  13FC 0000 00004260      1934              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000022A0  13FC 0000 00004261      1935              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000022A8                          1936             
000022A8                          1937              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000022A8  13FC 00B9 00004263      1938              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000022B0  13FC 0020 00004264      1939              MOVE.B   #$20,GET_SRC_START_END
000022B8                          1940  
000022B8                          1941             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000022B8  0285 0000FE3F           1942              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000022BE  0685 00000000           1943              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
000022C4                          1944  
000022C4                          1945              
000022C4  6100 0DD6               1946              BSR     GET_EA_EA_SRC      *GETS <ea>
000022C8  163C 002C               1947              MOVE.B  #',',D3
000022CC  6100 166C               1948              BSR     PUSH_STACK
000022D0  6100 11FA               1949              BSR     GET_EA_EA_DEST       *GETS Dn    
000022D4                          1950              
000022D4  6000 004A               1951              BRA     OP1100_MULS_RETURN
000022D8                          1952  OP1100_PRINT_L_MULS 
000022D8  163C 004C               1953              MOVE.B  #'L',D3
000022DC  6100 165C               1954              BSR     PUSH_STACK
000022E0                          1955              
000022E0                          1956              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000022E0  13FC 0000 00004260      1957              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000022E8  13FC 0000 00004261      1958              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000022F0                          1959             
000022F0                          1960              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000022F0  13FC 00B9 00004263      1961              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000022F8  13FC 0020 00004264      1962              MOVE.B   #$20,GET_SRC_START_END
00002300                          1963  
00002300                          1964              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002300  0285 0000FE3F           1965              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002306  0685 00000000           1966              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
0000230C                          1967  
0000230C                          1968                     
0000230C  6100 0D8E               1969              BSR     GET_EA_EA_SRC      *GETS <ea>
00002310  163C 002C               1970              MOVE.B  #',',D3
00002314  6100 1624               1971              BSR     PUSH_STACK                  
00002318  6100 11B2               1972              BSR     GET_EA_EA_DEST       *GETS Dn    
0000231C                          1973  
0000231C                          1974              
0000231C  6000 0002               1975              BRA     OP1100_MULS_RETURN
00002320                          1976              
00002320                          1977  OP1100_MULS_RETURN
00002320  4E75                    1978              RTS
00002322                          1979              
00002322                          1980  
00002322                          1981  
00002322                          1982  
00002322                          1983  
00002322                          1984  
00002322                          1985  
00002322                          1986  
00002322                          1987  
00002322                          1988  
00002322                          1989  
00002322                          1990  
00002322                          1991  
00002322                          1992  OP1100_DETERMINE_DN_EA_OR_EA_DN 
00002322                          1993              *LOAD STACK WITH THIS OPMODE
00002322  4283                    1994              CLR.L   D3
00002324  6100 1614               1995              BSR     PUSH_STACK
00002328  163C 0041               1996              MOVE.B  #'A',D3
0000232C  6100 160C               1997              BSR     PUSH_STACK
00002330  163C 004E               1998              MOVE.B  #'N',D3
00002334  6100 1604               1999              BSR     PUSH_STACK
00002338  163C 0044               2000              MOVE.B  #'D',D3
0000233C  6100 15FC               2001              BSR     PUSH_STACK
00002340  163C 002E               2002              MOVE.B  #'.',D3
00002344  6100 15F4               2003              BSR     PUSH_STACK
00002348                          2004              
00002348  2205                    2005              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
0000234A                          2006              
0000234A                          2007              *BITS (INDEX 8) 
0000234A                          2008              *0 = ADD.B/W/L <EA>,Dn
0000234A                          2009              *1 = ADD.B/W/L Dn,<EA> 
0000234A  E099                    2010              ROR.L   #8,D1
0000234C  0281 00000001           2011              ANDI.L  #$01,D1     *MASKS WITH 00000001
00002352  0C81 00000000           2012              CMPI.L  #$00,D1     *IF EQUALS <ea>,Dn
00002358  6700 0102               2013              BEQ     OP1100_EA_DN
0000235C                          2014              *else procede to Dn_EA
0000235C                          2015              
0000235C                          2016  OP1100_DN_EA
0000235C                          2017              *BITS (7 TO 6) 
0000235C                          2018              *00 = .B
0000235C                          2019              *01 = .W
0000235C                          2020              *10 = .L 
0000235C  2205                    2021              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
0000235E  EC99                    2022              ROR.L   #6,D1
00002360  0281 00000003           2023              ANDI.L  #$03,D1
00002366  0C81 00000000           2024              CMPI.L  #$00,D1 *EQUALS .B
0000236C  6700 0016               2025              BEQ     OP1100_PRINT_B2
00002370  0C81 00000001           2026              CMPI.L  #$01,D1 *EQUALS .W
00002376  6700 0054               2027              BEQ     OP1100_PRINT_W2
0000237A  0C81 00000002           2028              CMPI.L  #$02,D1 *EQUALS .L
00002380  6700 0092               2029              BEQ     OP1100_PRINT_L2
00002384                          2030  OP1100_PRINT_B2
00002384                          2031              *PUSH 'B'
00002384  163C 0042               2032              MOVE.B  #'B',D3
00002388  6100 15B0               2033              BSR     PUSH_STACK
0000238C                          2034             
0000238C                          2035              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000238C  13FC 0000 00004260      2036             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002394  13FC 0083 00004261      2037             MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000239C                          2038             
0000239C                          2039             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000239C  13FC 00B9 00004263      2040             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000023A4  13FC 0020 00004264      2041             MOVE.B   #$20,GET_SRC_START_END
000023AC                          2042  
000023AC                          2043              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000023AC  0285 0000FE3F           2044              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000023B2  0685 00000000           2045              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
000023B8                          2046       
000023B8  6100 1112               2047              BSR     GET_EA_EA_DEST      *GETS Dn
000023BC  163C 002C               2048              MOVE.B  #',',D3
000023C0  6100 1578               2049              BSR     PUSH_STACK                     
000023C4  6100 0CD6               2050              BSR     GET_EA_EA_SRC       *GETS <ea>
000023C8                          2051  
000023C8                          2052              
000023C8  6000 0192               2053              BRA     OP1100_AND_RETURN
000023CC                          2054  OP1100_PRINT_W2
000023CC  163C 0057               2055              MOVE.B  #'W',D3
000023D0  6100 1568               2056              BSR     PUSH_STACK
000023D4                          2057  
000023D4                          2058              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000023D4  13FC 0000 00004260      2059              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000023DC  13FC 0083 00004261      2060              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000023E4                          2061             
000023E4                          2062              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000023E4  13FC 00B9 00004263      2063              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000023EC  13FC 0020 00004264      2064              MOVE.B   #$20,GET_SRC_START_END
000023F4                          2065  
000023F4                          2066              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000023F4  0285 0000FE3F           2067              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000023FA  0685 00000000           2068              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A An Register (001) 
00002400                          2069  
00002400                          2070        
00002400  6100 10CA               2071              BSR     GET_EA_EA_DEST      *GETS Dn
00002404  163C 002C               2072              MOVE.B  #',',D3
00002408  6100 1530               2073              BSR     PUSH_STACK               
0000240C  6100 0C8E               2074              BSR     GET_EA_EA_SRC       *GETS <ea>       
00002410                          2075  
00002410                          2076  
00002410                          2077  
00002410  6000 049A               2078              BRA     OP1101_ADD_RETURN
00002414                          2079  OP1100_PRINT_L2 
00002414  163C 004C               2080              MOVE.B  #'L',D3
00002418  6100 1520               2081              BSR     PUSH_STACK
0000241C                          2082              
0000241C                          2083              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000241C  13FC 0000 00004260      2084              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002424  13FC 0083 00004261      2085              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000242C                          2086             
0000242C                          2087              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000242C  13FC 00B9 00004263      2088              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002434  13FC 0020 00004264      2089              MOVE.B   #$20,GET_SRC_START_END
0000243C                          2090  
0000243C                          2091             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000243C  0285 0000FE3F           2092              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002442  0685 00000000           2093              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002448                          2094  
00002448                          2095               
00002448  6100 1082               2096              BSR     GET_EA_EA_DEST       *GETS Dn
0000244C  163C 002C               2097              MOVE.B  #',',D3
00002450  6100 14E8               2098              BSR     PUSH_STACK          
00002454  6100 0C46               2099              BSR     GET_EA_EA_SRC        *GETS <ea>
00002458                          2100  
00002458  6000 0102               2101              BRA     OP1100_AND_RETURN
0000245C                          2102              
0000245C                          2103  OP1100_EA_DN           
0000245C                          2104              *BITS (7 TO 6) 
0000245C                          2105              *00 = .B
0000245C                          2106              *01 = .W
0000245C                          2107              *10 = .L 
0000245C  2205                    2108              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
0000245E  EC99                    2109              ROR.L   #6,D1
00002460  0281 00000003           2110              ANDI.L  #$03,D1
00002466  0C81 00000000           2111              CMPI.L  #$00,D1 *EQUALS .B
0000246C  6700 0016               2112              BEQ     OP1100_PRINT_B
00002470  0C81 00000001           2113              CMPI.L  #$01,D1 *EQUALS .W
00002476  6700 0054               2114              BEQ     OP1100_PRINT_W
0000247A  0C81 00000002           2115              CMPI.L  #$02,D1 *EQUALS .L
00002480  6700 0092               2116              BEQ     OP1100_PRINT_L
00002484                          2117  OP1100_PRINT_B
00002484  163C 0042               2118              MOVE.B  #'B',D3
00002488  6100 14B0               2119              BSR     PUSH_STACK
0000248C                          2120                
0000248C                          2121              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000248C  13FC 0000 00004260      2122              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002494  13FC 0002 00004261      2123              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000249C                          2124             
0000249C                          2125              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000249C  13FC 00B9 00004263      2126              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000024A4  13FC 0020 00004264      2127              MOVE.B   #$20,GET_SRC_START_END
000024AC                          2128  
000024AC                          2129             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000024AC  0285 0000FE3F           2130              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000024B2  0685 00000000           2131              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "AN" Register (001) 
000024B8                          2132  
000024B8                          2133              
000024B8  6100 0BE2               2134              BSR     GET_EA_EA_SRC      *GETS <ea>
000024BC  163C 002C               2135              MOVE.B  #',',D3
000024C0  6100 1478               2136              BSR     PUSH_STACK          
000024C4  6100 1006               2137              BSR     GET_EA_EA_DEST       *GETS Dn
000024C8                          2138              
000024C8  6000 03E2               2139              BRA     OP1101_ADD_RETURN
000024CC                          2140  OP1100_PRINT_W
000024CC  163C 0057               2141              MOVE.B  #'W',D3
000024D0  6100 1468               2142              BSR     PUSH_STACK
000024D4                          2143  
000024D4                          2144              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000024D4  13FC 0000 00004260      2145              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000024DC  13FC 0002 00004261      2146              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000024E4                          2147             
000024E4                          2148              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000024E4  13FC 00B9 00004263      2149              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000024EC  13FC 0020 00004264      2150              MOVE.B   #$20,GET_SRC_START_END
000024F4                          2151  
000024F4                          2152             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000024F4  0285 0000FE3F           2153              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000024FA  0685 00000000           2154              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002500                          2155  
00002500                          2156              
00002500  6100 0B9A               2157              BSR     GET_EA_EA_SRC      *GETS <ea>
00002504  163C 002C               2158              MOVE.B  #',',D3
00002508  6100 1430               2159              BSR     PUSH_STACK
0000250C  6100 0FBE               2160              BSR     GET_EA_EA_DEST       *GETS Dn    
00002510                          2161              
00002510  6000 FB8C               2162              BRA     OP1001_ADD_RETURN
00002514                          2163  OP1100_PRINT_L 
00002514  163C 004C               2164              MOVE.B  #'L',D3
00002518  6100 1420               2165              BSR     PUSH_STACK
0000251C                          2166              
0000251C                          2167              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000251C  13FC 0000 00004260      2168              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002524  13FC 0002 00004261      2169              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000252C                          2170             
0000252C                          2171              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000252C  13FC 00B9 00004263      2172              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002534  13FC 0020 00004264      2173              MOVE.B   #$20,GET_SRC_START_END
0000253C                          2174  
0000253C                          2175              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000253C  0285 0000FE3F           2176              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002542  0685 00000000           2177              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002548                          2178  
00002548                          2179                     
00002548  6100 0B52               2180              BSR     GET_EA_EA_SRC      *GETS <ea>
0000254C  163C 002C               2181              MOVE.B  #',',D3
00002550  6100 13E8               2182              BSR     PUSH_STACK                  
00002554  6100 0F76               2183              BSR     GET_EA_EA_DEST       *GETS Dn    
00002558                          2184  
00002558                          2185              
00002558  6000 0002               2186              BRA     OP1100_AND_RETURN
0000255C                          2187              
0000255C                          2188  OP1100_AND_RETURN
0000255C  4E75                    2189              RTS
0000255E                          2190  
0000255E                          2191  
0000255E                          2192  *---------------------------------------------------------------------------*
0000255E                          2193  * OP1101: Decode ADD/ADDA
0000255E                          2194  *---------------------------------------------------------------------------* 
0000255E  4280                    2195  OP1101      CLR.L   D0                  
00002560  4281                    2196              CLR.L   D1       
00002562  4284                    2197              CLR.L   D4                   
00002564  227C 00000000           2198              MOVEA.L #0, A1              
0000256A  2205                    2199              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
0000256C                          2200              
0000256C                          2201              *CLEAR D3
0000256C  4283                    2202              CLR.L   D3
0000256E                          2203              
0000256E                          2204              
0000256E                          2205              
0000256E                          2206              **INTEGRATING ADDA.W/.L INTO THIS CODE**
0000256E  2205                    2207              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00002570                          2208              *BITS (INDEX 8) 
00002570                          2209              *0 = ADD.B/W/L <EA>,Dn
00002570                          2210              *1 = ADD.B/W/L Dn,<EA> 
00002570  EC99                    2211              ROR.L   #6,D1
00002572  0281 00000007           2212              ANDI.L  #$07,D1                 *MASKS WITH 00000111
00002578  0C81 00000007           2213              CMPI.L  #$07,D1                 *IF EQUALS <ea>,Dn
0000257E  6700 0010               2214              BEQ     OP1101_ADDA_L            *BRANCHES TO ADDA.L
00002582  0C81 00000003           2215              CMPI.L  #$03,D1                 *IF EQUALS <ea>,Dn
00002588  6700 0078               2216              BEQ     OP1101_ADDA_W           *BRANCHES TO ADDA.W
0000258C  6000 00E6               2217              BRA     OP1101_DETERMINE_DN_EA_OR_EA_DN         *ELSE CHECK ADD.B/.W/.L
00002590                          2218              
00002590                          2219  OP1101_ADDA_L
00002590                          2220              *LOAD STACK WITH THIS OPMODE
00002590  6100 13A8               2221              BSR     PUSH_STACK
00002594  163C 0041               2222              MOVE.B  #'A',D3
00002598  6100 13A0               2223              BSR     PUSH_STACK
0000259C  163C 0044               2224              MOVE.B  #'D',D3
000025A0  6100 1398               2225              BSR     PUSH_STACK
000025A4  163C 0044               2226              MOVE.B  #'D',D3
000025A8  6100 1390               2227              BSR     PUSH_STACK
000025AC  163C 0041               2228              MOVE.B  #'A',D3
000025B0  6100 1388               2229              BSR     PUSH_STACK
000025B4  163C 002E               2230              MOVE.B  #'.',D3
000025B8  6100 1380               2231              BSR     PUSH_STACK
000025BC  163C 004C               2232              MOVE.B  #'L',D3
000025C0  6100 1378               2233              BSR     PUSH_STACK
000025C4                          2234              
000025C4                          2235             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000025C4  13FC 0000 00004260      2236             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000025CC  13FC 0000 00004261      2237             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000025D4                          2238             
000025D4                          2239             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000025D4  13FC 00B9 00004263      2240             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000025DC  13FC 0020 00004264      2241             MOVE.B   #$20,GET_SRC_START_END
000025E4                          2242  
000025E4                          2243              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000025E4  0285 0000FE3F           2244              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000025EA  0685 00000040           2245              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
000025F0                          2246       
000025F0                          2247              *PRINT <EA>,AN
000025F0  6100 0AAA               2248              BSR     GET_EA_EA_SRC       *GETS <ea>
000025F4  163C 002C               2249              MOVE.B  #',',D3
000025F8  6100 1340               2250              BSR     PUSH_STACK                     
000025FC  6100 0ECE               2251              BSR     GET_EA_EA_DEST      *GETS Dn
00002600                          2252  
00002600                          2253              
00002600                          2254              
00002600  4E75                    2255              RTS
00002602                          2256  OP1101_ADDA_W
00002602                          2257              *LOAD STACK WITH THIS OPMODE
00002602  6100 1336               2258              BSR     PUSH_STACK
00002606  163C 0041               2259              MOVE.B  #'A',D3
0000260A  6100 132E               2260              BSR     PUSH_STACK
0000260E  163C 0044               2261              MOVE.B  #'D',D3
00002612  6100 1326               2262              BSR     PUSH_STACK
00002616  163C 0044               2263              MOVE.B  #'D',D3
0000261A  6100 131E               2264              BSR     PUSH_STACK
0000261E  163C 0041               2265              MOVE.B  #'A',D3
00002622  6100 1316               2266              BSR     PUSH_STACK
00002626  163C 002E               2267              MOVE.B  #'.',D3
0000262A  6100 130E               2268              BSR     PUSH_STACK
0000262E  163C 0057               2269              MOVE.B  #'W',D3
00002632  6100 1306               2270              BSR     PUSH_STACK
00002636                          2271              
00002636                          2272             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002636  13FC 0000 00004260      2273             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000263E  13FC 0000 00004261      2274             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002646                          2275             
00002646                          2276             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002646  13FC 00B9 00004263      2277             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000264E  13FC 0020 00004264      2278             MOVE.B   #$20,GET_SRC_START_END
00002656                          2279  
00002656                          2280              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002656  0285 0000FE3F           2281              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000265C  0685 00000040           2282              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002662                          2283       
00002662                          2284              *PRINT <EA>,AN
00002662  6100 0A38               2285              BSR     GET_EA_EA_SRC       *GETS <ea>
00002666  163C 002C               2286              MOVE.B  #',',D3
0000266A  6100 12CE               2287              BSR     PUSH_STACK                     
0000266E  6100 0E5C               2288              BSR     GET_EA_EA_DEST      *GETS Dn
00002672                          2289  
00002672  4E75                    2290              RTS
00002674                          2291  
00002674                          2292  OP1101_DETERMINE_DN_EA_OR_EA_DN 
00002674                          2293              *LOAD STACK WITH THIS OPMODE
00002674  6100 12C4               2294              BSR     PUSH_STACK
00002678  163C 0041               2295              MOVE.B  #'A',D3
0000267C  6100 12BC               2296              BSR     PUSH_STACK
00002680  163C 0044               2297              MOVE.B  #'D',D3
00002684  6100 12B4               2298              BSR     PUSH_STACK
00002688  163C 0044               2299              MOVE.B  #'D',D3
0000268C  6100 12AC               2300              BSR     PUSH_STACK
00002690  163C 002E               2301              MOVE.B  #'.',D3
00002694  6100 12A4               2302              BSR     PUSH_STACK
00002698                          2303              
00002698  2205                    2304              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
0000269A                          2305              
0000269A                          2306              *BITS (INDEX 8) 
0000269A                          2307              *0 = ADD.B/W/L <EA>,Dn
0000269A                          2308              *1 = ADD.B/W/L Dn,<EA> 
0000269A  E099                    2309              ROR.L   #8,D1
0000269C  0281 00000001           2310              ANDI.L  #$01,D1     *MASKS WITH 00000001
000026A2  0C81 00000000           2311              CMPI.L  #$00,D1     *IF EQUALS <ea>,Dn
000026A8  6700 0102               2312              BEQ     OP1101_EA_DN
000026AC                          2313              *else procede to Dn_EA
000026AC                          2314              
000026AC                          2315  OP1101_DN_EA
000026AC                          2316              *BITS (7 TO 6) 
000026AC                          2317              *00 = .B
000026AC                          2318              *01 = .W
000026AC                          2319              *10 = .L 
000026AC  2205                    2320              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
000026AE  EC99                    2321              ROR.L   #6,D1
000026B0  0281 00000003           2322              ANDI.L  #$03,D1
000026B6  0C81 00000000           2323              CMPI.L  #$00,D1 *EQUALS .B
000026BC  6700 0016               2324              BEQ     OP1101_PRINT_B2
000026C0  0C81 00000001           2325              CMPI.L  #$01,D1 *EQUALS .W
000026C6  6700 0054               2326              BEQ     OP1101_PRINT_W2
000026CA  0C81 00000002           2327              CMPI.L  #$02,D1 *EQUALS .L
000026D0  6700 0092               2328              BEQ     OP1101_PRINT_L2
000026D4                          2329  OP1101_PRINT_B2
000026D4                          2330              *PUSH 'B'
000026D4  163C 0042               2331              MOVE.B  #'B',D3
000026D8  6100 1260               2332              BSR     PUSH_STACK
000026DC                          2333             
000026DC                          2334              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000026DC  13FC 0002 00004260      2335             MOVE.B   #$02,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000026E4  13FC 0083 00004261      2336             MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000026EC                          2337             
000026EC                          2338             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000026EC  13FC 00B9 00004263      2339             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000026F4  13FC 0020 00004264      2340             MOVE.B   #$20,GET_SRC_START_END
000026FC                          2341  
000026FC                          2342              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000026FC  0285 0000FE3F           2343              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002702  0685 00000000           2344              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002708                          2345       
00002708  6100 0DC2               2346              BSR     GET_EA_EA_DEST      *GETS Dn
0000270C  163C 002C               2347              MOVE.B  #',',D3
00002710  6100 1228               2348              BSR     PUSH_STACK                     
00002714  6100 0986               2349              BSR     GET_EA_EA_SRC       *GETS <ea>
00002718                          2350  
00002718                          2351              
00002718  6000 0192               2352              BRA     OP1101_ADD_RETURN
0000271C                          2353  OP1101_PRINT_W2
0000271C  163C 0057               2354              MOVE.B  #'W',D3
00002720  6100 1218               2355              BSR     PUSH_STACK
00002724                          2356  
00002724                          2357              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002724  13FC 0000 00004260      2358              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000272C  13FC 0083 00004261      2359              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002734                          2360             
00002734                          2361              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002734  13FC 00B9 00004263      2362              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000273C  13FC 0020 00004264      2363              MOVE.B   #$20,GET_SRC_START_END
00002744                          2364  
00002744                          2365              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002744  0285 0000FE3F           2366              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000274A  0685 00000000           2367              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002750                          2368  
00002750                          2369        
00002750  6100 0D7A               2370              BSR     GET_EA_EA_DEST      *GETS Dn
00002754  163C 002C               2371              MOVE.B  #',',D3
00002758  6100 11E0               2372              BSR     PUSH_STACK               
0000275C  6100 093E               2373              BSR     GET_EA_EA_SRC       *GETS <ea>       
00002760                          2374  
00002760                          2375  
00002760                          2376  
00002760  6000 014A               2377              BRA     OP1101_ADD_RETURN
00002764                          2378  OP1101_PRINT_L2 
00002764  163C 004C               2379              MOVE.B  #'L',D3
00002768  6100 11D0               2380              BSR     PUSH_STACK
0000276C                          2381              
0000276C                          2382              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000276C  13FC 0000 00004260      2383              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002774  13FC 0083 00004261      2384              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000277C                          2385             
0000277C                          2386              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000277C  13FC 00B9 00004263      2387              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002784  13FC 0020 00004264      2388              MOVE.B   #$20,GET_SRC_START_END
0000278C                          2389  
0000278C                          2390             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000278C  0285 0000FE3F           2391              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002792  0685 00000000           2392              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002798                          2393  
00002798                          2394               
00002798  6100 0D32               2395              BSR     GET_EA_EA_DEST       *GETS Dn
0000279C  163C 002C               2396              MOVE.B  #',',D3
000027A0  6100 1198               2397              BSR     PUSH_STACK          
000027A4  6100 08F6               2398              BSR     GET_EA_EA_SRC        *GETS <ea>
000027A8                          2399  
000027A8  6000 0102               2400              BRA     OP1101_ADD_RETURN
000027AC                          2401              
000027AC                          2402  OP1101_EA_DN           
000027AC                          2403              *BITS (7 TO 6) 
000027AC                          2404              *00 = .B
000027AC                          2405              *01 = .W
000027AC                          2406              *10 = .L 
000027AC  2205                    2407              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
000027AE  EC99                    2408              ROR.L   #6,D1
000027B0  0281 00000003           2409              ANDI.L  #$03,D1
000027B6  0C81 00000000           2410              CMPI.L  #$00,D1 *EQUALS .B
000027BC  6700 0016               2411              BEQ     OP1101_PRINT_B
000027C0  0C81 00000001           2412              CMPI.L  #$01,D1 *EQUALS .W
000027C6  6700 0054               2413              BEQ     OP1101_PRINT_W
000027CA  0C81 00000002           2414              CMPI.L  #$02,D1 *EQUALS .L
000027D0  6700 0092               2415              BEQ     OP1101_PRINT_L
000027D4                          2416  OP1101_PRINT_B
000027D4  163C 0042               2417              MOVE.B  #'B',D3
000027D8  6100 1160               2418              BSR     PUSH_STACK
000027DC                          2419                
000027DC                          2420              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000027DC  13FC 0002 00004260      2421              MOVE.B   #$02,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000027E4  13FC 0002 00004261      2422              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000027EC                          2423             
000027EC                          2424              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000027EC  13FC 00B9 00004263      2425              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000027F4  13FC 0020 00004264      2426              MOVE.B   #$20,GET_SRC_START_END
000027FC                          2427  
000027FC                          2428             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000027FC  0285 0000FE3F           2429              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002802  0685 00000000           2430              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002808                          2431  
00002808                          2432              
00002808  6100 0892               2433              BSR     GET_EA_EA_SRC      *GETS <ea>
0000280C  163C 002C               2434              MOVE.B  #',',D3
00002810  6100 1128               2435              BSR     PUSH_STACK          
00002814  6100 0CB6               2436              BSR     GET_EA_EA_DEST       *GETS Dn
00002818                          2437              
00002818  6000 0092               2438              BRA     OP1101_ADD_RETURN
0000281C                          2439  OP1101_PRINT_W
0000281C  163C 0057               2440              MOVE.B  #'W',D3
00002820  6100 1118               2441              BSR     PUSH_STACK
00002824                          2442  
00002824                          2443              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002824  13FC 0000 00004260      2444              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000282C  13FC 0000 00004261      2445              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002834                          2446             
00002834                          2447              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002834  13FC 00B9 00004263      2448              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000283C  13FC 0020 00004264      2449              MOVE.B   #$20,GET_SRC_START_END
00002844                          2450  
00002844                          2451             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002844  0285 0000FE3F           2452              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000284A  0685 00000000           2453              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002850                          2454  
00002850                          2455              
00002850  6100 084A               2456              BSR     GET_EA_EA_SRC      *GETS <ea>
00002854  163C 002C               2457              MOVE.B  #',',D3
00002858  6100 10E0               2458              BSR     PUSH_STACK
0000285C  6100 0C6E               2459              BSR     GET_EA_EA_DEST       *GETS Dn    
00002860                          2460              
00002860  6000 004A               2461              BRA     OP1101_ADD_RETURN
00002864                          2462  OP1101_PRINT_L 
00002864  163C 004C               2463              MOVE.B  #'L',D3
00002868  6100 10D0               2464              BSR     PUSH_STACK
0000286C                          2465              
0000286C                          2466              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000286C  13FC 0000 00004260      2467              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002874  13FC 0000 00004261      2468              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000287C                          2469             
0000287C                          2470              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000287C  13FC 00B9 00004263      2471              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002884  13FC 0020 00004264      2472              MOVE.B   #$20,GET_SRC_START_END
0000288C                          2473  
0000288C                          2474              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000288C  0285 0000FE3F           2475              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002892  0685 00000000           2476              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002898                          2477  
00002898                          2478                     
00002898  6100 0802               2479              BSR     GET_EA_EA_SRC      *GETS <ea>
0000289C  163C 002C               2480              MOVE.B  #',',D3
000028A0  6100 1098               2481              BSR     PUSH_STACK                  
000028A4  6100 0C26               2482              BSR     GET_EA_EA_DEST       *GETS Dn    
000028A8                          2483  
000028A8                          2484              
000028A8  6000 0002               2485              BRA     OP1101_ADD_RETURN
000028AC                          2486              
000028AC                          2487  OP1101_ADD_RETURN
000028AC  4E75                    2488              RTS
000028AE                          2489              
000028AE                          2490              *ADDW
000028AE  0C01 0006               2491              CMPI.B  #$6,D1
000028B2  6700 0056               2492              BEQ     OP_ADDA_W
000028B6  0C01 000E               2493              CMPI.B  #$E,D1
000028BA  6700 0066               2494              BEQ     OP_ADDA_L 
000028BE                          2495  
000028BE  4EF8 14B6               2496              JMP     OP_DATA  
000028C2                          2497            
000028C2                          2498  *---------------------------------------------------------------------------*
000028C2                          2499  * OP_ADD: display ADD and proceed to EA
000028C2                          2500  *---------------------------------------------------------------------------*  
000028C2  43F9 00004117           2501  OP_ADD_B    LEA     DISP_ADD_B,A1
000028C8  103C 000E               2502              MOVE.B  #14,D0
000028CC  4E4F                    2503              TRAP    #15
000028CE  183C 0000               2504              MOVE.B  #0,D4
000028D2  4EF9 00002C4C           2505              JMP     EA_GEN
000028D8                          2506  
000028D8  4E75                    2507              RTS
000028DA                          2508  
000028DA  43F9 00004120           2509  OP_ADD_W    LEA     DISP_ADD_W,A1
000028E0  103C 000E               2510              MOVE.B  #14,D0
000028E4  4E4F                    2511              TRAP    #15
000028E6  183C 0001               2512              MOVE.B  #1,D4
000028EA  4EF9 00002C4C           2513              JMP     EA_GEN
000028F0                          2514  
000028F0  4E75                    2515              RTS
000028F2                          2516  
000028F2  43F9 00004129           2517  OP_ADD_L    LEA     DISP_ADD_L,A1
000028F8  103C 000E               2518              MOVE.B  #14,D0
000028FC  4E4F                    2519              TRAP    #15
000028FE  183C 0002               2520              MOVE.B  #2,D4
00002902  4EF9 00002C4C           2521              JMP     EA_GEN
00002908                          2522  
00002908  4E75                    2523              RTS
0000290A                          2524  
0000290A                          2525  *---------------------------------------------------------------------------*
0000290A                          2526  * OP_ADDA: display ADDA and proceed to EA
0000290A                          2527  *---------------------------------------------------------------------------*  
0000290A  43F9 00004132           2528  OP_ADDA_W   LEA     DISP_ADDA_W,A1
00002910  103C 000E               2529              MOVE.B  #14,D0
00002914  4E4F                    2530              TRAP    #15
00002916  183C 0001               2531              MOVE.B  #1,D4
0000291A  4EF9 00002C4C           2532              JMP     EA_GEN
00002920                          2533  
00002920  4E75                    2534              RTS
00002922                          2535  
00002922  43F9 0000413C           2536  OP_ADDA_L   LEA     DISP_ADDA_L,A1
00002928  103C 000E               2537              MOVE.B  #14,D0
0000292C  4E4F                    2538              TRAP    #15
0000292E  183C 0002               2539              MOVE.B  #2,D4
00002932  4EF9 00002C4C           2540              JMP     EA_GEN
00002938                          2541  
00002938  4E75                    2542              RTS
0000293A                          2543              
0000293A                          2544  *---------------------------------------------------------------------------*
0000293A                          2545  * OP1110: LSR/LSL/ASR/ASL/ROL/ROR
0000293A                          2546  *---------------------------------------------------------------------------* 
0000293A  4280                    2547  OP1110      CLR.L   D0                  
0000293C  4281                    2548              CLR.L   D1   
0000293E  4284                    2549              CLR.L   D4                   
00002940  227C 00000000           2550              MOVEA.L #0, A1                 
00002946  2205                    2551              MOVE.L  D5,D1
00002948                          2552              
00002948                          2553              * check for LSX
00002948  E699                    2554              ROR.L   #3,D1
0000294A  0281 00000001           2555              ANDI.L  #$1,D1
00002950  0C01 0001               2556              CMPI.B  #1,D1
00002954  6700 002E               2557              BEQ     OP_LSX
00002958                          2558              
00002958                          2559              * reset D1 and check for ASX
00002958  4281                    2560              CLR.L   D1
0000295A  2205                    2561              MOVE.L  D5,D1
0000295C  E699                    2562              ROR.L   #3,D1
0000295E  0281 00000001           2563              ANDI.L  #$1,D1
00002964  0C01 0000               2564              CMPI.B  #0,D1
00002968  6700 0032               2565              BEQ     OP_ASX
0000296C                          2566  
0000296C                          2567              * reset D1 and check for ROX
0000296C  4281                    2568              CLR.L   D1
0000296E  2205                    2569              MOVE.L  D5,D1
00002970  E699                    2570              ROR.L   #3,D1
00002972  0281 00000001           2571              ANDI.L  #$1,D1
00002978  0C01 0003               2572              CMPI.B  #3,D1
0000297C  6700 0036               2573              BEQ     OP_ROX
00002980                          2574              
00002980  4EF8 14B6               2575              JMP     OP_DATA
00002984                          2576  
00002984                          2577  *---------------------------------------------------------------------------*
00002984                          2578  * OP_LSX: process LSR/LSL
00002984                          2579  *---------------------------------------------------------------------------*            
00002984  EA99                    2580  OP_LSX      ROR.L   #5,D1
00002986  0281 00000001           2581              ANDI.L  #$1,D1
0000298C  0C01 0000               2582              CMPI.B  #0,D1
00002990  6700 003A               2583              BEQ     OP_LSR
00002994  0C01 0001               2584              CMPI.B  #1,D1
00002998  6700 008C               2585              BEQ     OP_LSL
0000299C                          2586              
0000299C                          2587  *---------------------------------------------------------------------------*
0000299C                          2588  * OP_ASX: process ASR/ASL
0000299C                          2589  *---------------------------------------------------------------------------*  
0000299C  EA99                    2590  OP_ASX      ROR.L   #5,D1
0000299E  0281 00000001           2591              ANDI.L  #$1,D1
000029A4  0C01 0000               2592              CMPI.B  #0,D1
000029A8  6700 00D6               2593              BEQ     OP_ASR
000029AC  0C01 0001               2594              CMPI.B  #1,D1
000029B0  6700 0128               2595              BEQ     OP_ASL
000029B4                          2596              
000029B4                          2597  *---------------------------------------------------------------------------*
000029B4                          2598  * OP_ROX: process ROR/ROL
000029B4                          2599  *---------------------------------------------------------------------------*  
000029B4  EA99                    2600  OP_ROX      ROR.L   #5,D1
000029B6  0281 00000001           2601              ANDI.L  #$1,D1
000029BC  0C01 0000               2602              CMPI.B  #0,D1
000029C0  6700 0172               2603              BEQ     OP_ROR
000029C4  0C01 0001               2604              CMPI.B  #1,D1
000029C8  6700 01C4               2605              BEQ     OP_ROL
000029CC                          2606  
000029CC                          2607  *---------------------------------------------------------------------------*
000029CC                          2608  * OP_LSR: decode and display LSR
000029CC                          2609  *---------------------------------------------------------------------------*        
000029CC  E599                    2610  OP_LSR      ROL.L   #2,D1
000029CE  0281 00000003           2611              ANDI.L  #$3,D1
000029D4  0C01 0000               2612              CMPI.B  #0,D1
000029D8  6700 0016               2613              BEQ     OP_LSR_B
000029DC  0C01 0001               2614              CMPI.B  #$1,D1
000029E0  6700 0032               2615              BEQ     OP_LSR_W
000029E4  0C01 0002               2616              CMPI.B  #$2,D1
000029E8  6700 0018               2617              BEQ     OP_LSR_L
000029EC                          2618              
000029EC  4EF8 14B6               2619              JMP     OP_DATA
000029F0                          2620  
000029F0  43F9 00004146           2621  OP_LSR_B    LEA     DISP_LSR_B,A1
000029F6  103C 000E               2622              MOVE.B  #14,D0
000029FA  4E4F                    2623              TRAP    #15
000029FC  183C 0000               2624              MOVE.B  #0,D4
00002A00  4E75                    2625              RTS
00002A02                          2626  
00002A02  43F9 0000416A           2627  OP_LSR_L    LEA     DISP_LSR_L,A1
00002A08  103C 000E               2628              MOVE.B  #14,D0
00002A0C  4E4F                    2629              TRAP    #15
00002A0E  183C 0002               2630              MOVE.B  #2,D4
00002A12  4E75                    2631              RTS
00002A14                          2632  
00002A14  43F9 00004158           2633  OP_LSR_W    LEA     DISP_LSR_W,A1
00002A1A  103C 000E               2634              MOVE.B  #14,D0
00002A1E  4E4F                    2635              TRAP    #15
00002A20  183C 0001               2636              MOVE.B  #1,D4
00002A24  4E75                    2637              RTS
00002A26                          2638   
00002A26                          2639  *---------------------------------------------------------------------------*
00002A26                          2640  * OP_LSL: decode and display LSL
00002A26                          2641  *---------------------------------------------------------------------------*             
00002A26  E599                    2642  OP_LSL      ROL.L   #2,D1
00002A28  0281 00000003           2643              ANDI.L  #$3,D1
00002A2E  0C01 0000               2644              CMPI.B  #0,D1
00002A32  6700 0016               2645              BEQ     OP_LSL_B
00002A36  0C01 0001               2646              CMPI.B  #$1,D1
00002A3A  6700 0032               2647              BEQ     OP_LSL_W
00002A3E  0C01 0002               2648              CMPI.B  #$2,D1
00002A42  6700 0018               2649              BEQ     OP_LSL_L
00002A46                          2650              
00002A46  4EF8 14B6               2651              JMP OP_DATA
00002A4A                          2652  
00002A4A  43F9 0000414F           2653  OP_LSL_B    LEA     DISP_LSL_B,A1
00002A50  103C 000E               2654              MOVE.B  #14,D0
00002A54  4E4F                    2655              TRAP    #15
00002A56  183C 0000               2656              MOVE.B  #0,D4
00002A5A  4E75                    2657              RTS
00002A5C                          2658  
00002A5C  43F9 00004173           2659  OP_LSL_L    LEA     DISP_LSL_L,A1
00002A62  103C 000E               2660              MOVE.B  #14,D0
00002A66  4E4F                    2661              TRAP    #15
00002A68  183C 0002               2662              MOVE.B  #2,D4
00002A6C  4E75                    2663              RTS
00002A6E                          2664  
00002A6E  43F9 00004161           2665  OP_LSL_W    LEA     DISP_LSL_W,A1
00002A74  103C 000E               2666              MOVE.B  #14,D0
00002A78  4E4F                    2667              TRAP    #15
00002A7A  183C 0001               2668              MOVE.B  #1,D4
00002A7E  4E75                    2669              RTS
00002A80                          2670   
00002A80                          2671  *---------------------------------------------------------------------------*
00002A80                          2672  * OP_ASR: decode and display ASR
00002A80                          2673  *---------------------------------------------------------------------------*             
00002A80  E599                    2674  OP_ASR      ROL.L   #2,D1
00002A82  0281 00000003           2675              ANDI.L  #$3,D1
00002A88  0C01 0000               2676              CMPI.B  #0,D1
00002A8C  6700 0016               2677              BEQ     OP_ASR_B
00002A90  0C01 0001               2678              CMPI.B  #$1,D1
00002A94  6700 0032               2679              BEQ     OP_ASR_W
00002A98  0C01 0002               2680              CMPI.B  #$2,D1
00002A9C  6700 0018               2681              BEQ     OP_ASR_L
00002AA0                          2682              
00002AA0  4EF8 14B6               2683              JMP OP_DATA
00002AA4                          2684  
00002AA4  43F9 0000417C           2685  OP_ASR_B    LEA     DISP_ASR_B,A1
00002AAA  103C 000E               2686              MOVE.B  #14,D0
00002AAE  4E4F                    2687              TRAP    #15
00002AB0  183C 0000               2688              MOVE.B  #0,D4
00002AB4  4E75                    2689              RTS
00002AB6                          2690  
00002AB6  43F9 000041A0           2691  OP_ASR_L    LEA     DISP_ASR_L,A1
00002ABC  103C 000E               2692              MOVE.B  #14,D0
00002AC0  4E4F                    2693              TRAP    #15
00002AC2  183C 0002               2694              MOVE.B  #2,D4
00002AC6  4E75                    2695              RTS
00002AC8                          2696  
00002AC8  43F9 0000418E           2697  OP_ASR_W    LEA     DISP_ASR_W,A1
00002ACE  103C 000E               2698              MOVE.B  #14,D0
00002AD2  4E4F                    2699              TRAP    #15
00002AD4  183C 0001               2700              MOVE.B  #1,D4
00002AD8  4E75                    2701              RTS
00002ADA                          2702       
00002ADA                          2703  *---------------------------------------------------------------------------*
00002ADA                          2704  * OP_ASL: decode and display ASL
00002ADA                          2705  *---------------------------------------------------------------------------*         
00002ADA  E599                    2706  OP_ASL      ROL.L   #2,D1
00002ADC  0281 00000003           2707              ANDI.L  #$3,D1
00002AE2  0C01 0000               2708              CMPI.B  #0,D1
00002AE6  6700 0016               2709              BEQ     OP_ASL_B
00002AEA  0C01 0001               2710              CMPI.B  #$1,D1
00002AEE  6700 0032               2711              BEQ     OP_ASL_W
00002AF2  0C01 0002               2712              CMPI.B  #$2,D1
00002AF6  6700 0018               2713              BEQ     OP_ASL_L
00002AFA                          2714              
00002AFA  4EF8 14B6               2715              JMP OP_DATA
00002AFE                          2716  
00002AFE  43F9 00004185           2717  OP_ASL_B    LEA     DISP_ASL_B,A1
00002B04  103C 000E               2718              MOVE.B  #14,D0
00002B08  4E4F                    2719              TRAP    #15
00002B0A  183C 0000               2720              MOVE.B  #0,D4
00002B0E  4E75                    2721              RTS
00002B10                          2722  
00002B10  43F9 000041A9           2723  OP_ASL_L    LEA     DISP_ASL_L,A1
00002B16  103C 000E               2724              MOVE.B  #14,D0
00002B1A  4E4F                    2725              TRAP    #15
00002B1C  183C 0002               2726              MOVE.B  #2,D4
00002B20  4E75                    2727              RTS
00002B22                          2728  
00002B22  43F9 00004197           2729  OP_ASL_W    LEA     DISP_ASL_W,A1
00002B28  103C 000E               2730              MOVE.B  #14,D0
00002B2C  4E4F                    2731              TRAP    #15
00002B2E  183C 0001               2732              MOVE.B  #1,D4
00002B32  4E75                    2733              RTS
00002B34                          2734   
00002B34                          2735  *---------------------------------------------------------------------------*
00002B34                          2736  * OP_ROR: decode and display ROR
00002B34                          2737  *---------------------------------------------------------------------------*             
00002B34  E599                    2738  OP_ROR      ROL.L   #2,D1
00002B36  0281 00000003           2739              ANDI.L  #$3,D1
00002B3C  0C01 0000               2740              CMPI.B  #0,D1
00002B40  6700 0016               2741              BEQ     OP_ROR_B
00002B44  0C01 0001               2742              CMPI.B  #$1,D1
00002B48  6700 0032               2743              BEQ     OP_ROR_W
00002B4C  0C01 0002               2744              CMPI.B  #$2,D1
00002B50  6700 0018               2745              BEQ     OP_ROR_L
00002B54                          2746              
00002B54  4EF8 14B6               2747              JMP OP_DATA
00002B58                          2748  
00002B58  43F9 000041B2           2749  OP_ROR_B    LEA     DISP_ROR_B,A1
00002B5E  103C 000E               2750              MOVE.B  #14,D0
00002B62  4E4F                    2751              TRAP    #15
00002B64  183C 0000               2752              MOVE.B  #0,D4
00002B68  4E75                    2753              RTS
00002B6A                          2754  
00002B6A  43F9 000041D6           2755  OP_ROR_L    LEA     DISP_ROR_L,A1
00002B70  103C 000E               2756              MOVE.B  #14,D0
00002B74  4E4F                    2757              TRAP    #15
00002B76  183C 0002               2758              MOVE.B  #2,D4
00002B7A  4E75                    2759              RTS
00002B7C                          2760  
00002B7C  43F9 000041C4           2761  OP_ROR_W    LEA     DISP_ROR_W,A1
00002B82  103C 000E               2762              MOVE.B  #14,D0
00002B86  4E4F                    2763              TRAP    #15
00002B88  183C 0001               2764              MOVE.B  #1,D4
00002B8C  4E75                    2765              RTS
00002B8E                          2766  
00002B8E                          2767  *---------------------------------------------------------------------------*
00002B8E                          2768  * OP_ROL: decode and display ROL
00002B8E                          2769  *---------------------------------------------------------------------------*             
00002B8E  E599                    2770  OP_ROL      ROL.L   #2,D1
00002B90  0281 00000003           2771              ANDI.L  #$3,D1
00002B96  0C01 0000               2772              CMPI.B  #0,D1
00002B9A  6700 0016               2773              BEQ     OP_ROL_B
00002B9E  0C01 0001               2774              CMPI.B  #$1,D1
00002BA2  6700 0032               2775              BEQ     OP_ROL_W
00002BA6  0C01 0002               2776              CMPI.B  #$2,D1
00002BAA  6700 0018               2777              BEQ     OP_ROL_L
00002BAE                          2778              
00002BAE  4EF8 14B6               2779              JMP OP_DATA
00002BB2                          2780  
00002BB2                          2781  
00002BB2  43F9 000041BB           2782  OP_ROL_B    LEA     DISP_ROL_B,A1
00002BB8  103C 000E               2783              MOVE.B  #14,D0
00002BBC  4E4F                    2784              TRAP    #15
00002BBE  183C 0000               2785              MOVE.B  #0,D4
00002BC2  4E75                    2786              RTS
00002BC4                          2787  
00002BC4  43F9 000041DF           2788  OP_ROL_L    LEA     DISP_ROL_L,A1
00002BCA  103C 000E               2789              MOVE.B  #14,D0
00002BCE  4E4F                    2790              TRAP    #15
00002BD0  183C 0002               2791              MOVE.B  #2,D4
00002BD4  4E75                    2792              RTS
00002BD6                          2793  
00002BD6  43F9 000041CD           2794  OP_ROL_W    LEA     DISP_ROL_W,A1
00002BDC  103C 000E               2795              MOVE.B  #14,D0
00002BE0  4E4F                    2796              TRAP    #15
00002BE2  183C 0001               2797              MOVE.B  #1,D4
00002BE6  4E75                    2798              RTS
00002BE8                          2799              
00002BE8                          2800  *---------------------------------------------------------------------------*
00002BE8                          2801  * OP1111 : Special reserved
00002BE8                          2802  *---------------------------------------------------------------------------*           
00002BE8  4EF8 14B6               2803  OP1111      JMP     OP_DATA
00002BEC                          2804  
00002BEC                          2805  *---------------------------------------------------------------------------*
00002BEC                          2806  * EA_NOSRC: decode and display effective addresses for NEG/JSR
00002BEC                          2807  *---------------------------------------------------------------------------*
00002BEC                          2808  EA_NOSRC    
00002BEC  4EB9 00002CAA           2809              JSR     SRC_MODE
00002BF2  43F9 00003EAC           2810              LEA     ENDLINE_M,A1
00002BF8  103C 000E               2811              MOVE.B  #14,D0
00002BFC  4E4F                    2812              TRAP    #15
00002BFE  4E75                    2813              RTS
00002C00                          2814              
00002C00                          2815  *---------------------------------------------------------------------------*
00002C00                          2816  * EA_ARITH: decode and display effective addresses for DIVS/MULS
00002C00                          2817  *---------------------------------------------------------------------------*
00002C00                          2818  EA_ARITH
00002C00  4EB9 00002CAA           2819              JSR     SRC_MODE
00002C06  43F9 00004226           2820              LEA     DISP_D,A1
00002C0C  103C 000E               2821              MOVE.B  #14,D0
00002C10  4E4F                    2822              TRAP    #15
00002C12  4EB9 00002F36           2823              JSR     DEST_REGISTER
00002C18  43F9 00003EAC           2824              LEA     ENDLINE_M,A1
00002C1E  103C 000E               2825              MOVE.B  #14,D0
00002C22  4E4F                    2826              TRAP    #15
00002C24  4E75                    2827              RTS
00002C26                          2828              
00002C26                          2829  *---------------------------------------------------------------------------*
00002C26                          2830  * EA_MOVEA: decode and display effective addresses for MOVEA/LEA
00002C26                          2831  *---------------------------------------------------------------------------*
00002C26                          2832  EA_MOVEA
00002C26  4EB9 00002CAA           2833              JSR     SRC_MODE
00002C2C  43F9 00004237           2834              LEA     DISP_AOP,A1
00002C32  103C 000E               2835              MOVE.B  #14,D0
00002C36  4E4F                    2836              TRAP    #15
00002C38  4EB9 00002F36           2837              JSR     DEST_REGISTER
00002C3E  43F9 00004235           2838              LEA     DISP_CP,A1
00002C44  103C 000D               2839              MOVE.B  #13,D0
00002C48  4E4F                    2840              TRAP    #15
00002C4A  4E75                    2841              RTS
00002C4C                          2842              
00002C4C                          2843  *---------------------------------------------------------------------------*
00002C4C                          2844  * EA_GEN: decode and display effective addresses for MOVE
00002C4C                          2845  *---------------------------------------------------------------------------*
00002C4C                          2846  EA_GEN          
00002C4C                          2847              * retrieve/display source mode/register
00002C4C  4EB9 00002CAA           2848              JSR     SRC_MODE
00002C52                          2849              
00002C52                          2850              * retrieve/display destination mode/register
00002C52  4EB9 00002C66           2851              JSR     DEST_MODE
00002C58                          2852              
00002C58  43F9 00003EAC           2853              LEA     ENDLINE_M,A1
00002C5E  103C 000E               2854              MOVE.B  #14,D0
00002C62  4E4F                    2855              TRAP    #15
00002C64                          2856              
00002C64  4E75                    2857              RTS
00002C66                          2858  
00002C66                          2859  *---------------------------------------------------------------------------*
00002C66                          2860  * DEST_MODE: decode and display destination mode (bit 8 - 6)
00002C66                          2861  *---------------------------------------------------------------------------*           
00002C66                          2862  DEST_MODE   
00002C66                          2863              * clear registers to store temp data
00002C66  4280                    2864              CLR.L   D0                      
00002C68  4281                    2865              CLR.L   D1                      
00002C6A  207C 00000000           2866              MOVEA.L #0, A0                  
00002C70  227C 00000000           2867              MOVEA.L #0, A1                  
00002C76  2205                    2868              MOVE.L  D5,D1
00002C78  EC89                    2869              LSR.L   #6,D1
00002C7A  0281 00000007           2870              ANDI.L  #$7,D1
00002C80  0C01 0000               2871              CMPI.B  #0,D1   * Dn
00002C84  6700 0082               2872              BEQ     D_MODE000
00002C88  0C01 0002               2873              CMPI.B  #2,D1   * (An)
00002C8C  6700 00C2               2874              BEQ     D_MODE010
00002C90  0C01 0003               2875              CMPI.B  #3,D1   * (An)+
00002C94  6700 011A               2876              BEQ     D_MODE011
00002C98  0C01 0004               2877              CMPI.B  #4,D1   * -(An)
00002C9C  6700 0132               2878              BEQ     D_MODE100
00002CA0  0C01 0007               2879              CMPI.B  #7,D1  * abs
00002CA4  6700 017C               2880              BEQ     D_MODE111 
00002CA8  4E75                    2881              RTS
00002CAA                          2882  
00002CAA                          2883  *---------------------------------------------------------------------------*
00002CAA                          2884  * SRC_MODE: decode and display source mode (bit 5 - 3)
00002CAA                          2885  *---------------------------------------------------------------------------*  
00002CAA                          2886  SRC_MODE    
00002CAA                          2887              * clear registers to store temp data
00002CAA  4280                    2888              CLR.L   D0                      
00002CAC  4281                    2889              CLR.L   D1                      
00002CAE  207C 00000000           2890              MOVEA.L #0, A0                  
00002CB4  227C 00000000           2891              MOVEA.L #0, A1                  
00002CBA  2205                    2892              MOVE.L  D5,D1
00002CBC  E489                    2893              LSR.L   #2,D1
00002CBE  0281 0000000E           2894              ANDI.L  #$E,D1
00002CC4                          2895              
00002CC4  0C01 0000               2896              CMPI.B  #0,D1   * Dn
00002CC8  6700 002A               2897              BEQ     MODE000
00002CCC  0C01 0002               2898              CMPI.B  #2,D1   * An 
00002CD0  6700 004A               2899              BEQ     MODE001
00002CD4  0C01 0004               2900              CMPI.B  #4,D1   * (An)
00002CD8  6700 0056               2901              BEQ     MODE010
00002CDC  0C01 0006               2902              CMPI.B  #6,D1   * (An)+
00002CE0  6700 008E               2903              BEQ     MODE011
00002CE4  0C01 0008               2904              CMPI.B  #8,D1   * -(An)
00002CE8  6700 00A6               2905              BEQ     MODE100
00002CEC  0C01 000F               2906              CMPI.B  #15,D1  * abs/immediate
00002CF0  6700 00FE               2907              BEQ     MODE111 
00002CF4                          2908        
00002CF4                          2909  *---------------------------------------------------------------------------*
00002CF4                          2910  * MODE000: decode and display source mode Dn
00002CF4                          2911  *---------------------------------------------------------------------------*           
00002CF4                          2912  MODE000     *Dn
00002CF4  43F9 00004226           2913              LEA     DISP_D,A1
00002CFA  103C 000E               2914              MOVE.B  #14,D0
00002CFE  4E4F                    2915              TRAP    #15
00002D00  4EB9 00002F92           2916              JSR     SRC_REGISTER
00002D06  4E75                    2917              RTS
00002D08                          2918  
00002D08                          2919  *---------------------------------------------------------------------------*
00002D08                          2920  * D_MODE000: decode and display dest mode Dn
00002D08                          2921  *---------------------------------------------------------------------------*
00002D08                          2922  D_MODE000     *Dn
00002D08  43F9 00004226           2923              LEA     DISP_D,A1
00002D0E  103C 000E               2924              MOVE.B  #14,D0
00002D12  4E4F                    2925              TRAP    #15
00002D14  4EB9 00002F36           2926              JSR     DEST_REGISTER
00002D1A  4E75                    2927              RTS
00002D1C                          2928  
00002D1C                          2929  *---------------------------------------------------------------------------*
00002D1C                          2930  * MODE001: decode and display source mode An
00002D1C                          2931  *---------------------------------------------------------------------------* 
00002D1C                          2932  MODE001 *An
00002D1C  43F9 0000422B           2933              LEA     DISP_A,A1
00002D22  103C 000E               2934              MOVE.B  #14,D0
00002D26  4E4F                    2935              TRAP    #15
00002D28  4EB9 00002F92           2936              JSR     SRC_REGISTER
00002D2E                          2937          
00002D2E  4E75                    2938              RTS
00002D30                          2939  
00002D30                          2940  *---------------------------------------------------------------------------*
00002D30                          2941  * MODE010: decode and display source mode (An)
00002D30                          2942  *---------------------------------------------------------------------------*    
00002D30                          2943  MODE010 *(An)
00002D30  43F9 00004237           2944              LEA     DISP_AOP,A1  *display (A
00002D36  103C 000E               2945              MOVE.B  #14,D0
00002D3A  4E4F                    2946              TRAP    #15
00002D3C                          2947  
00002D3C  4EB9 00002F92           2948              JSR     SRC_REGISTER * display register
00002D42                          2949  
00002D42  43F9 00004235           2950              LEA     DISP_CP,A1   *display )
00002D48  103C 000E               2951              MOVE.B  #14,D0
00002D4C  4E4F                    2952              TRAP    #15
00002D4E                          2953              
00002D4E  4E75                    2954              RTS
00002D50                          2955  
00002D50                          2956  *---------------------------------------------------------------------------*
00002D50                          2957  * D_MODE010: decode and display dest mode (An)
00002D50                          2958  *---------------------------------------------------------------------------*
00002D50                          2959  D_MODE010 *(An)
00002D50  43F9 00004237           2960              LEA     DISP_AOP,A1  *display (A
00002D56  103C 000E               2961              MOVE.B  #14,D0
00002D5A  4E4F                    2962              TRAP    #15
00002D5C                          2963     
00002D5C  4EB9 00002F36           2964              JSR     DEST_REGISTER * display register
00002D62                          2965  
00002D62  43F9 00004235           2966              LEA     DISP_CP,A1   *display )
00002D68  103C 000E               2967              MOVE.B  #14,D0
00002D6C  4E4F                    2968              TRAP    #15
00002D6E                          2969              
00002D6E  4E75                    2970              RTS
00002D70                          2971  
00002D70                          2972  *---------------------------------------------------------------------------*
00002D70                          2973  * MODE011: decode and display source mode (An)+
00002D70                          2974  *---------------------------------------------------------------------------*
00002D70                          2975  MODE011 *(An)+
00002D70  43F9 00004237           2976              LEA     DISP_AOP,A1      *display (A
00002D76  103C 000E               2977              MOVE.B  #14,D0
00002D7A  4E4F                    2978              TRAP    #15
00002D7C                          2979              
00002D7C  4EB9 00002F92           2980              JSR     SRC_REGISTER    * display register
00002D82                          2981  
00002D82  43F9 00004244           2982              LEA     DISP_POST,A1    *display )+
00002D88  103C 000E               2983              MOVE.B  #14,D0
00002D8C  4E4F                    2984              TRAP    #15
00002D8E                          2985              
00002D8E  4E75                    2986              RTS
00002D90                          2987              
00002D90                          2988  *---------------------------------------------------------------------------*
00002D90                          2989  * MODE100: decode and display source mode -(An)
00002D90                          2990  *---------------------------------------------------------------------------*
00002D90                          2991  MODE100 *-(An)
00002D90  43F9 0000423D           2992              LEA     DISP_PRE,A1    *display -(A
00002D96  103C 000E               2993              MOVE.B  #14,D0
00002D9A  4E4F                    2994              TRAP    #15
00002D9C                          2995  
00002D9C  4EB9 00002F92           2996              JSR     SRC_REGISTER    *display register
00002DA2                          2997  
00002DA2  43F9 00004235           2998              LEA     DISP_CP,A1   *display )
00002DA8  103C 000E               2999              MOVE.B  #14,D0
00002DAC  4E4F                    3000              TRAP    #15
00002DAE                          3001              
00002DAE  4E75                    3002              RTS
00002DB0                          3003  
00002DB0                          3004  *---------------------------------------------------------------------------*
00002DB0                          3005  * D_MODE011: decode and display dest mode (An)+
00002DB0                          3006  *---------------------------------------------------------------------------*
00002DB0                          3007  D_MODE011 *(An)+
00002DB0  43F9 00004237           3008              LEA     DISP_AOP,A1      *display (A
00002DB6  103C 000E               3009              MOVE.B  #14,D0
00002DBA  4E4F                    3010              TRAP    #15
00002DBC                          3011  
00002DBC  4EB9 00002F36           3012              JSR     DEST_REGISTER    * display register
00002DC2                          3013  
00002DC2  43F9 00004244           3014              LEA     DISP_POST,A1    *display )+
00002DC8  103C 000E               3015              MOVE.B  #14,D0
00002DCC  4E4F                    3016              TRAP    #15
00002DCE                          3017              
00002DCE  4E75                    3018              RTS
00002DD0                          3019              
00002DD0                          3020  *---------------------------------------------------------------------------*
00002DD0                          3021  * D_MODE100: decode and display dest mode -(An)
00002DD0                          3022  *---------------------------------------------------------------------------*            
00002DD0                          3023  D_MODE100 *-(An)
00002DD0  43F9 0000423D           3024              LEA     DISP_PRE,A1    *display -(A
00002DD6  103C 000E               3025              MOVE.B  #14,D0
00002DDA  4E4F                    3026              TRAP    #15
00002DDC                          3027              
00002DDC  4EB9 00002F36           3028              JSR     DEST_REGISTER    *display register
00002DE2                          3029  
00002DE2  43F9 00004235           3030              LEA     DISP_CP,A1   *display )
00002DE8  103C 000E               3031              MOVE.B  #14,D0
00002DEC  4E4F                    3032              TRAP    #15
00002DEE                          3033              
00002DEE  4E75                    3034              RTS
00002DF0                          3035  
00002DF0                          3036  *---------------------------------------------------------------------------*
00002DF0                          3037  * MODE111: decode and display source mode absolute/immediate
00002DF0                          3038  *---------------------------------------------------------------------------*
00002DF0                          3039  MODE111     * abs/immediate
00002DF0                          3040              * clear registers to store temp data
00002DF0  4280                    3041              CLR.L   D0                      
00002DF2  4281                    3042              CLR.L   D1                      
00002DF4  207C 00000000           3043              MOVEA.L #0, A0                  
00002DFA  227C 00000000           3044              MOVEA.L #0, A1                  
00002E00  2205                    3045              MOVE.L  D5,D1
00002E02                          3046              
00002E02                          3047              * retrieve source register for MODE 111
00002E02  E389                    3048              LSL.L   #1,D1   * shift the bits to left by 1
00002E04  0281 0000000E           3049              ANDI.L  #$E,D1  * mask the first 4 bits 
00002E0A  0C01 0000               3050              CMPI.B  #0, D1  * if it's 0000, absolute word address
00002E0E  6700 003E               3051              BEQ     WORDMODE
00002E12  0C01 0002               3052              CMPI.B  #2, D1  * if it's 0010, absolute long address
00002E16  6700 0062               3053              BEQ     LONGMODE
00002E1A  0C01 0008               3054              CMPI.B  #8, D1  * if it's 1000, immediate data
00002E1E  6700 0086               3055              BEQ     IMMEDIATE
00002E22                          3056       
00002E22                          3057  *---------------------------------------------------------------------------*
00002E22                          3058  * D_MODE111: decode and display dest mode absolute/immediate
00002E22                          3059  *---------------------------------------------------------------------------*           
00002E22                          3060  D_MODE111   * abs
00002E22                          3061              * clear registers to store temp data
00002E22  4280                    3062              CLR.L   D0                      
00002E24  4281                    3063              CLR.L   D1                      
00002E26  207C 00000000           3064              MOVEA.L #0, A0                  
00002E2C  227C 00000000           3065              MOVEA.L #0, A1                  
00002E32  2205                    3066              MOVE.L  D5,D1
00002E34                          3067              
00002E34                          3068              * retrieve dest register for MODE 111
00002E34  EC89                    3069              LSR.L   #6,D1   * shift the bits to right by 6
00002E36  E689                    3070              LSR.L   #3,D1   * shift the bits to right by extra 3
00002E38  0201 0001               3071              ANDI.B  #1,D1   * mask the first 2 bits 
00002E3C  0C01 0000               3072              CMPI.B  #0, D1  * if it's 000, absolute word address
00002E40  6700 000C               3073              BEQ     WORDMODE
00002E44  0C01 0001               3074              CMPI.B  #1, D1  * if it's 001, absolute long address
00002E48  6700 0030               3075              BEQ     LONGMODE
00002E4C                          3076              *JSR     OP_DATA *not sure..
00002E4C  4E75                    3077              RTS
00002E4E                          3078  
00002E4E                          3079  
00002E4E                          3080  *---------------------------------------------------------------------------*
00002E4E                          3081  * WORDMODE: absolute word address
00002E4E                          3082  *---------------------------------------------------------------------------*
00002E4E  43F9 00004221           3083  WORDMODE    LEA     DISP_HEX,A1
00002E54  103C 000E               3084              MOVE.B  #14,D0
00002E58  4E4F                    3085              TRAP    #15
00002E5A                          3086              
00002E5A  4285                    3087              CLR.L   D5
00002E5C  3A1D                    3088              MOVE.W  (A5)+,D5
00002E5E                          3089              
00002E5E  43F9 00003EFF           3090              LEA     TMPOUTPUT,A1
00002E64  2205                    3091              MOVE.L  D5,D1
00002E66  7404                    3092              MOVE.L  #4,D2       *move word size 4
00002E68  4EB8 11B6               3093              JSR     HEX2ASCII
00002E6C  43F9 00003EFF           3094              LEA     TMPOUTPUT,A1
00002E72  103C 000E               3095              MOVE.B  #14,D0
00002E76  4E4F                    3096              TRAP    #15
00002E78                          3097              
00002E78  4E75                    3098              RTS
00002E7A                          3099  
00002E7A                          3100  *---------------------------------------------------------------------------*
00002E7A                          3101  * LONGMODE: absolute long address
00002E7A                          3102  *---------------------------------------------------------------------------*
00002E7A  43F9 00004221           3103  LONGMODE    LEA     DISP_HEX,A1
00002E80  103C 000E               3104              MOVE.B  #14,D0
00002E84  4E4F                    3105              TRAP    #15
00002E86                          3106              
00002E86  4285                    3107              CLR.L   D5
00002E88  2A1D                    3108              MOVE.L  (A5)+,D5
00002E8A                          3109              
00002E8A  43F9 00003EFF           3110              LEA     TMPOUTPUT,A1
00002E90  2205                    3111              MOVE.L  D5,D1
00002E92  7408                    3112              MOVE.L  #8,D2           *move longword size 8
00002E94  4EB8 11B6               3113              JSR     HEX2ASCII
00002E98  43F9 00003EFF           3114              LEA     TMPOUTPUT,A1
00002E9E  103C 000E               3115              MOVE.B  #14,D0
00002EA2  4E4F                    3116              TRAP    #15
00002EA4                          3117              
00002EA4  4E75                    3118              RTS
00002EA6                          3119  
00002EA6                          3120  
00002EA6                          3121  *---------------------------------------------------------------------------*
00002EA6                          3122  * IMMEDIATE: immediate address
00002EA6                          3123  *---------------------------------------------------------------------------*
00002EA6  43F9 00004247           3124  IMMEDIATE   LEA     DISP_LB,A1
00002EAC  103C 000E               3125              MOVE.B  #14,D0
00002EB0  4E4F                    3126              TRAP    #15
00002EB2  43F9 00004221           3127              LEA     DISP_HEX,A1
00002EB8  103C 000E               3128              MOVE.B  #14,D0
00002EBC  4E4F                    3129              TRAP    #15
00002EBE                          3130              
00002EBE                          3131              * check for size
00002EBE  0C04 0000               3132              CMPI.B  #0,D4
00002EC2  6700 0012               3133              BEQ     IMMD_B
00002EC6  0C04 0001               3134              CMPI.B  #1,D4
00002ECA  6700 002A               3135              BEQ     IMMD_W
00002ECE  0C04 0002               3136              CMPI.B  #2,D4
00002ED2  6700 0042               3137              BEQ     IMMD_L
00002ED6                          3138  
00002ED6                          3139  IMMD_B
00002ED6  4285                    3140              CLR.L   D5
00002ED8  3A1D                    3141              MOVE.W  (A5)+,D5
00002EDA                          3142              
00002EDA  43F9 00003EFF           3143              LEA     TMPOUTPUT,A1
00002EE0  2205                    3144              MOVE.L  D5,D1
00002EE2  7402                    3145              MOVE.L  #2,D2
00002EE4  4EB8 11B6               3146              JSR     HEX2ASCII
00002EE8  43F9 00003EFF           3147              LEA     TMPOUTPUT,A1
00002EEE  103C 000E               3148              MOVE.B  #14,D0
00002EF2  4E4F                    3149              TRAP    #15
00002EF4  4E75                    3150              RTS
00002EF6                          3151              
00002EF6                          3152  IMMD_W
00002EF6  4285                    3153              CLR.L   D5
00002EF8  3A1D                    3154              MOVE.W  (A5)+,D5
00002EFA                          3155              
00002EFA  43F9 00003EFF           3156              LEA     TMPOUTPUT,A1
00002F00  2205                    3157              MOVE.L  D5,D1
00002F02  7404                    3158              MOVE.L  #4,D2
00002F04  4EB8 11B6               3159              JSR     HEX2ASCII
00002F08  43F9 00003EFF           3160              LEA     TMPOUTPUT,A1
00002F0E  103C 000E               3161              MOVE.B  #14,D0
00002F12  4E4F                    3162              TRAP    #15
00002F14  4E75                    3163              RTS
00002F16                          3164              
00002F16                          3165  
00002F16                          3166  IMMD_L
00002F16  4285                    3167              CLR.L   D5
00002F18  3A1D                    3168              MOVE.W  (A5)+,D5
00002F1A                          3169              
00002F1A  43F9 00003EFF           3170              LEA     TMPOUTPUT,A1
00002F20  2205                    3171              MOVE.L  D5,D1
00002F22  7408                    3172              MOVE.L  #8,D2
00002F24  4EB8 11B6               3173              JSR     HEX2ASCII
00002F28  43F9 00003EFF           3174              LEA     TMPOUTPUT,A1
00002F2E  103C 000E               3175              MOVE.B  #14,D0
00002F32  4E4F                    3176              TRAP    #15
00002F34  4E75                    3177              RTS
00002F36                          3178  
00002F36                          3179  
00002F36                          3180  *---------------------------------------------------------------------------*
00002F36                          3181  * DEST_REGISTER: decode and display destination register (bit 11 - 9)
00002F36                          3182  *---------------------------------------------------------------------------*
00002F36                          3183  DEST_REGISTER
00002F36                          3184              * clear registers to store temp data
00002F36  4280                    3185              CLR.L   D0                      
00002F38  4281                    3186              CLR.L   D1                      
00002F3A  207C 00000000           3187              MOVEA.L #0, A0                  
00002F40  227C 00000000           3188              MOVEA.L #0, A1 
00002F46                          3189              
00002F46  2205                    3190              MOVE.L  D5,D1
00002F48  EC89                    3191              LSR.L   #6,D1
00002F4A  E689                    3192              LSR.L   #3,D1
00002F4C  0281 00000007           3193              ANDI.L  #7,D1
00002F52                          3194              
00002F52  0C01 0000               3195              CMPI.B  #0,D1
00002F56  6700 0092               3196              BEQ     REG_0
00002F5A  0C01 0001               3197              CMPI.B  #1,D1
00002F5E  6700 0098               3198              BEQ     REG_1
00002F62  0C01 0002               3199              CMPI.B  #2,D1
00002F66  6700 009E               3200              BEQ     REG_2
00002F6A  0C01 0003               3201              CMPI.B  #3,D1
00002F6E  6700 00A4               3202              BEQ     REG_3
00002F72  0C01 0004               3203              CMPI.B  #4,D1
00002F76  6700 00AA               3204              BEQ     REG_4
00002F7A  0C01 0005               3205              CMPI.B  #5,D1
00002F7E  6700 00B0               3206              BEQ     REG_5
00002F82  0C01 0006               3207              CMPI.B  #6,D1
00002F86  6700 00B6               3208              BEQ     REG_6
00002F8A  0C01 0007               3209              CMPI.B  #7,D1
00002F8E  6700 00BC               3210              BEQ     REG_7
00002F92                          3211  
00002F92                          3212  *---------------------------------------------------------------------------*
00002F92                          3213  * SRC_REGISTER: decode and display source register (bit 2 - 0)
00002F92                          3214  *---------------------------------------------------------------------------*           
00002F92                          3215  SRC_REGISTER 
00002F92                          3216              * clear registers to store temp data
00002F92  4280                    3217              CLR.L   D0                      
00002F94  4281                    3218              CLR.L   D1                      
00002F96  207C 00000000           3219              MOVEA.L #0, A0                  
00002F9C  227C 00000000           3220              MOVEA.L #0, A1                  
00002FA2                          3221              
00002FA2  2205                    3222              MOVE.L  D5,D1   * temp store the processing data
00002FA4  0281 00000007           3223              ANDI.L  #7,D1   * mask the first 4 bits with 0111
00002FAA                          3224              
00002FAA  0C01 0000               3225              CMPI.B  #0,D1
00002FAE  6700 003A               3226              BEQ     REG_0
00002FB2  0C01 0001               3227              CMPI.B  #1,D1
00002FB6  6700 0040               3228              BEQ     REG_1
00002FBA  0C01 0002               3229              CMPI.B  #2,D1
00002FBE  6700 0046               3230              BEQ     REG_2
00002FC2  0C01 0003               3231              CMPI.B  #3,D1
00002FC6  6700 004C               3232              BEQ     REG_3
00002FCA  0C01 0004               3233              CMPI.B  #4,D1
00002FCE  6700 0052               3234              BEQ     REG_4
00002FD2  0C01 0005               3235              CMPI.B  #5,D1
00002FD6  6700 0058               3236              BEQ     REG_5
00002FDA  0C01 0006               3237              CMPI.B  #6,D1
00002FDE  6700 005E               3238              BEQ     REG_6
00002FE2  0C01 0007               3239              CMPI.B  #7,D1
00002FE6  6700 0064               3240              BEQ     REG_7
00002FEA                          3241  
00002FEA                          3242  *---------------------------------------------------------------------------*
00002FEA                          3243  * REG_0 ~ REG_7: display register 0 to 7
00002FEA                          3244  *---------------------------------------------------------------------------*
00002FEA  43F9 0000424C           3245  REG_0       LEA     DISP_0,A1
00002FF0  103C 000E               3246              MOVE.B  #14,D0
00002FF4  4E4F                    3247              TRAP    #15
00002FF6  4E75                    3248              RTS
00002FF8                          3249              
00002FF8  43F9 0000424E           3250  REG_1       LEA     DISP_1,A1
00002FFE  103C 000E               3251              MOVE.B  #14,D0
00003002  4E4F                    3252              TRAP    #15
00003004  4E75                    3253              RTS
00003006                          3254              
00003006                          3255  
00003006  43F9 00004250           3256  REG_2       LEA     DISP_2,A1
0000300C  103C 000E               3257              MOVE.B  #14,D0
00003010  4E4F                    3258              TRAP    #15
00003012  4E75                    3259              RTS
00003014                          3260            
00003014  43F9 00004252           3261  REG_3       LEA     DISP_3,A1
0000301A  103C 000E               3262              MOVE.B  #14,D0
0000301E  4E4F                    3263              TRAP    #15
00003020  4E75                    3264              RTS
00003022                          3265              
00003022  43F9 00004254           3266  REG_4       LEA     DISP_4,A1
00003028  103C 000E               3267              MOVE.B  #14,D0
0000302C  4E4F                    3268              TRAP    #15
0000302E  4E75                    3269              RTS
00003030                          3270              
00003030  43F9 00004256           3271  REG_5       LEA     DISP_5,A1
00003036  103C 000E               3272              MOVE.B  #14,D0
0000303A  4E4F                    3273              TRAP    #15
0000303C  4E75                    3274              RTS
0000303E                          3275              
0000303E  43F9 00004258           3276  REG_6       LEA     DISP_6,A1
00003044  103C 000E               3277              MOVE.B  #14,D0
00003048  4E4F                    3278              TRAP    #15
0000304A  4E75                    3279              RTS
0000304C                          3280              
0000304C  43F9 0000425A           3281  REG_7       LEA     DISP_7,A1
00003052  103C 000E               3282              MOVE.B  #14,D0
00003056  4E4F                    3283              TRAP    #15
00003058  4E75                    3284              RTS
0000305A                          3285              
0000305A                          3286  *---------------------------------------------------------------------------*
0000305A                          3287  * REPEAT : Ask user whether they wish to run the program again
0000305A                          3288  *---------------------------------------------------------------------------*           
0000305A  4246                    3289  REPEAT      CLR.W   D6                      * Reset D6 (Loop Count)
0000305C  43F9 00003D25           3290              LEA     REPEATMSG,A1
00003062  103C 000E               3291              MOVE.B  #14,D0
00003066  4E4F                    3292              TRAP    #15
00003068                          3293              
00003068  43F9 00003EAF           3294              LEA     TMPINPUT,A1             * allocate space to temp store user input
0000306E  103C 0002               3295              MOVE.B  #2,D0
00003072  4E4F                    3296              TRAP    #15
00003074                          3297  
00003074  0C01 0001               3298              CMPI.B  #1,D1                   * check for length of user input
00003078  66E0                    3299              BNE     REPEAT                  * return to the beginning of the function if unequal
0000307A                          3300              
0000307A  0C11 0059               3301              CMPI.B  #$59,(A1)               * compare the input with Y    
0000307E  6700 DF8A               3302              BEQ     PROGLP                  * repeat the program
00003082                          3303              
00003082  0C11 0079               3304              CMPI.B  #$79,(A1)               * compare the input with y    
00003086  6700 DF82               3305              BEQ     PROGLP                  * repeat the program
0000308A                          3306              
0000308A  0C11 004E               3307              CMPI.B  #$4E,(A1)               * compare the input with N    
0000308E  6700 0928               3308              BEQ     TERMINATE               * finish program
00003092                          3309              
00003092  0C11 006E               3310              CMPI.B  #$6E,(A1)               * compare the input with n    
00003096  6700 0920               3311              BEQ     TERMINATE               * finish program
0000309A                          3312              
0000309A  60BE                    3313              BRA     REPEAT                  * invalid input/repeat the function
0000309C                          3314  
0000309C                          3315  *---------------------------------------------------------------------------*
0000309C                          3316  * EA DECODING INTERFACE
0000309C                          3317  * [A0] - RESERVED FOR USE
0000309C                          3318  * [D2] - RESERVED FOR USE
0000309C                          3319  * RETURNS - ERROR FLAG IF FAILED TO PUSH SRC EA INTO STACK
0000309C                          3320  *---------------------------------------------------------------------------*
0000309C                          3321  GET_EA_EA_SRC
0000309C                          3322      *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
0000309C                          3323      
0000309C                          3324      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
0000309C  2405                    3325      MOVE.L  D5,D2                           * CLEAN COPY TO D2
0000309E  E68A                    3326      LSR.L   #3,D2                           * [D2] Temporarily used D2 for shifting bits            *TODO: DYNAMIC FOR ANY LOCATION OF SOURCE
000030A0  23C2 00004272           3327      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
000030A6  7407                    3328      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
000030A8  C5B9 00004272           3329      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
000030AE                          3330                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
000030AE                          3331      
000030AE                          3332      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
000030AE                          3333      *DESTINATION REGISTER FORMAT STANDARD         *
000030AE                          3334      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
000030AE                          3335      *WHEN BIT = 0(VALID ADDRESS MODE)             *
000030AE                          3336      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
000030AE                          3337      *0 - Dn                                       *
000030AE                          3338      *1 - An                                       *
000030AE                          3339      *2 - (An)                                     *
000030AE                          3340      *3 - (An)+                                    *
000030AE                          3341      *4 - -(An)                                    *
000030AE                          3342      *5 - (XXX).W                                  *
000030AE                          3343      *6 - (XXX).L                                  *
000030AE                          3344      *7 - #<data>                                  *
000030AE                          3345      ***********************************************
000030AE                          3346      
000030AE                          3347      *** Check if source ...  <ea> = Dn
000030AE                          3348  CHECK0    
000030AE  41F9 00004262           3349            LEA     TEMP_REGISTER_FORMAT,A0
000030B4  1439 00004261           3350            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000030BA  1082                    3351            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000030BC  0239 0001 00004262      3352            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
000030C4  0C39 0001 00004262      3353            CMPI.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
000030CC  6700 006A               3354            BEQ     CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
000030D0  0CB9 00000000 00004272  3355            CMPI.L     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn) - COMPARE MODES TO SEE IF IT IS THIS MODE
000030DA  6600 005C               3356            BNE     CHECK1
000030DE                          3357            
000030DE                          3358            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000030DE  163C 0020               3359            MOVE.B    #' ',D3
000030E2  6100 0856               3360            BSR       PUSH_STACK
000030E6  163C 0044               3361            MOVE.B    #'D',D3
000030EA  6100 084E               3362            BSR       PUSH_STACK
000030EE                          3363  
000030EE                          3364            *FIND REGISTER NUMBER END LOCATION*  
000030EE  13F9 00004264 0000426A  3365            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
000030F8  0239 000F 0000426A      3366            AND.B   #$0F,VAR_BYTE_END
00003100                          3367            
00003100                          3368            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003100  23C5 0000426E           3369            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003106  1439 0000426A           3370            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
0000310C                          3371            
0000310C                          3372            *INTITIALIZE FOR BIT SHIFTING
0000310C  41F9 0000426E           3373            LEA     VAR_TEMP_CLEANCOPY,A0
00003112  2639 0000426E           3374            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003118                          3375  LOOP_SHIFTING
00003118  0C02 0000               3376            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000311C  6700 0008               3377            BEQ     MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00003120  E24B                    3378            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003122  5302                    3379            SUB.B   #1,D2                     *DECREMENT COUNTER
00003124  60F2                    3380            BRA     LOOP_SHIFTING             *CONTINUE SHIFTING
00003126                          3381  MASKING_NEXT
00003126  C6BC 00000007           3382            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
0000312C  0603 0030               3383            ADD.B   #$30,D3                   *CONVERT TO CHAR
00003130  6100 0808               3384            BSR     PUSH_STACK                *PUSH TO STACK
00003134                          3385            
00003134  6000 0394               3386            BRA     GET_SRC_SUCCESS           *RETURN          
00003138                          3387            
00003138                          3388            
00003138                          3389            *** Check if source ...  <ea> = An
00003138  41F9 00004262           3390  CHECK1    LEA     TEMP_REGISTER_FORMAT,A0
0000313E  1439 00004261           3391            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003144  1082                    3392            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003146  0239 0002 00004262      3393            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
0000314E  0C39 0002 00004262      3394            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
00003156  6700 006A               3395            BEQ     CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
0000315A  0CB9 00000001 00004272  3396            CMPI.L  #1,VAR_LONG_ADDRESS_MODE_CHECK                      * An - COMPARE MODES TO SEE IF IT IS THIS MODE
00003164  6600 005C               3397            BNE     CHECK2
00003168                          3398            
00003168                          3399            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003168  163C 0020               3400            MOVE.B    #' ',D3
0000316C  6100 07CC               3401            BSR       PUSH_STACK
00003170  163C 0041               3402            MOVE.B    #'A',D3
00003174  6100 07C4               3403            BSR       PUSH_STACK
00003178                          3404  
00003178                          3405            
00003178                          3406            *FIND REGISTER NUMBER END LOCATION*  
00003178  13F9 00004264 0000426A  3407            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00003182  0239 000F 0000426A      3408            AND.B   #$0F,VAR_BYTE_END
0000318A                          3409            
0000318A                          3410            *GET INDEX OF THE END OF SRC REGISTER NUMBER
0000318A  23C5 0000426E           3411            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003190  1439 0000426A           3412            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
00003196                          3413            
00003196                          3414            *INTITIALIZE FOR BIT SHIFTING
00003196  41F9 0000426E           3415            LEA     VAR_TEMP_CLEANCOPY,A0
0000319C  2639 0000426E           3416            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000031A2                          3417  LOOP_SHIFTING1
000031A2  0C02 0000               3418            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000031A6  6700 0008               3419            BEQ     MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
000031AA  E24B                    3420            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000031AC  5302                    3421            SUB.B   #1,D2                     *DECREMENT COUNTER
000031AE  60F2                    3422            BRA     LOOP_SHIFTING1             *CONTINUE SHIFTING
000031B0                          3423  MASKING_NEXT1
000031B0  C6BC 00000007           3424            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000031B6  0603 0030               3425            ADD.B   #$30,D3                   *CONVERT TO CHAR
000031BA  6100 077E               3426            BSR     PUSH_STACK                *PUSH TO STACK
000031BE                          3427            
000031BE  6000 030A               3428            BRA     GET_SRC_SUCCESS                   *RETURN 
000031C2                          3429            
000031C2                          3430            
000031C2                          3431            
000031C2                          3432            
000031C2                          3433            *** Check if source ...  <ea> = (An)       
000031C2  41F9 00004262           3434  CHECK2    LEA     TEMP_REGISTER_FORMAT,A0
000031C8  1439 00004261           3435            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000031CE  1082                    3436            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000031D0  0239 0004 00004262      3437            ANDI.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
000031D8  0C39 0004 00004262      3438            CMPI.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
000031E0  6700 007A               3439            BEQ     CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
000031E4  0CB9 00000002 00004272  3440            CMPI.L   #2,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)  COMPARE MODES TO SEE IF IT IS THIS MODE                                                                *change: checkx++*
000031EE  6600 006C               3441            BNE     CHECK3
000031F2                          3442            
000031F2                          3443            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
000031F2  163C 0020               3444            MOVE.B    #' ',D3
000031F6  6100 0742               3445            BSR       PUSH_STACK
000031FA  163C 0028               3446            MOVE.B    #'(',D3
000031FE  6100 073A               3447            BSR       PUSH_STACK
00003202  163C 0041               3448            MOVE.B    #'A',D3
00003206  6100 0732               3449            BSR       PUSH_STACK
0000320A                          3450  
0000320A                          3451            
0000320A                          3452            *FIND REGISTER NUMBER END LOCATION*  
0000320A  13F9 00004264 0000426A  3453            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00003214  0239 000F 0000426A      3454            AND.B   #$0F,VAR_BYTE_END
0000321C                          3455            
0000321C                          3456            *GET INDEX OF THE END OF SRC REGISTER NUMBER
0000321C  23C5 0000426E           3457            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003222  1439 0000426A           3458            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003228                          3459            
00003228                          3460            *INTITIALIZE FOR BIT SHIFTING
00003228  41F9 0000426E           3461            LEA     VAR_TEMP_CLEANCOPY,A0
0000322E  2639 0000426E           3462            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003234                          3463  LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
00003234  0C02 0000               3464            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003238  6700 0008               3465            BEQ     MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
0000323C  E24B                    3466            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
0000323E  5302                    3467            SUB.B   #1,D2                     *DECREMENT COUNTER
00003240  60F2                    3468            BRA     LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
00003242                          3469  MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
00003242  0283 00000007           3470            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003248  0603 0030               3471            ADDI.B   #$30,D3                   *CONVERT TO CHAR
0000324C  6100 06EC               3472            BSR     PUSH_STACK                *PUSH TO STACK
00003250                          3473            
00003250  163C 0029               3474            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003254  6100 06E4               3475            BSR       PUSH_STACK
00003258                          3476            
00003258  6000 0270               3477            BRA     GET_SRC_SUCCESS                   *RETURN 
0000325C                          3478  
0000325C                          3479            
0000325C                          3480            
0000325C                          3481                      
0000325C                          3482  *** Check if source ...  <ea> = (An)+       
0000325C  41F9 00004262           3483  CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
00003262  1439 00004261           3484            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003268  1082                    3485            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000326A  0239 0008 00004262      3486            ANDI.B  #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
00003272  0C39 0008 00004262      3487            CMPI.B  #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
0000327A  6700 0082               3488            BEQ     CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
0000327E  0CB9 00000003 00004272  3489            CMPI.L  #3,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)+ - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00003288  6600 0074               3490            BNE     CHECK4
0000328C                          3491            
0000328C                          3492            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
0000328C  163C 0020               3493            MOVE.B    #' ',D3
00003290  6100 06A8               3494            BSR       PUSH_STACK
00003294  163C 0028               3495            MOVE.B    #'(',D3
00003298  6100 06A0               3496            BSR       PUSH_STACK
0000329C  163C 0041               3497            MOVE.B    #'A',D3
000032A0  6100 0698               3498            BSR       PUSH_STACK
000032A4                          3499  
000032A4                          3500            
000032A4                          3501            *FIND REGISTER NUMBER END LOCATION*  
000032A4  13F9 00004264 0000426A  3502            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
000032AE  0239 000F 0000426A      3503            ANDI.B   #$0F,VAR_BYTE_END
000032B6                          3504            
000032B6                          3505            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000032B6  23C5 0000426E           3506            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000032BC  1439 0000426A           3507            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000032C2                          3508            
000032C2                          3509            *INTITIALIZE FOR BIT SHIFTING
000032C2  41F9 0000426E           3510            LEA     VAR_TEMP_CLEANCOPY,A0
000032C8  2639 0000426E           3511            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000032CE                          3512            
000032CE                          3513  LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
000032CE  0C02 0000               3514            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000032D2  6700 0008               3515            BEQ     MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
000032D6  E24B                    3516            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000032D8  5302                    3517            SUBI.B   #1,D2                     *DECREMENT COUNTER
000032DA  60F2                    3518            BRA     LOOP_SHIFTING3            *CONTINUE SHIFTING 
000032DC                          3519                                               *change: NAME OF LABEL*
000032DC                          3520  MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
000032DC  0283 00000007           3521            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000032E2  0603 0030               3522            ADDI.B   #$30,D3                   *CONVERT TO CHAR
000032E6  6100 0652               3523            BSR     PUSH_STACK                *PUSH TO STACK
000032EA                          3524            
000032EA  163C 0029               3525            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
000032EE  6100 064A               3526            BSR       PUSH_STACK
000032F2  163C 002B               3527            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
000032F6  6100 0642               3528            BSR       PUSH_STACK
000032FA                          3529            
000032FA  6000 01CE               3530            BRA       GET_SRC_SUCCESS                   *RETURN 
000032FE                          3531  
000032FE                          3532            
000032FE                          3533            
000032FE                          3534                      
000032FE                          3535            *** Check if source ...  <ea> = -(An)       
000032FE  41F9 00004262           3536  CHECK4    LEA     TEMP_REGISTER_FORMAT,A0
00003304  1439 00004261           3537            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000330A  1082                    3538            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000330C  0239 0010 00004262      3539            ANDI.B  #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
00003314  0C39 0010 00004262      3540            CMPI.B  #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
0000331C  6700 0082               3541            BEQ     CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00003320  0CB9 00000004 00004272  3542            CMPI.L  #4,VAR_LONG_ADDRESS_MODE_CHECK                      * -(An) - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
0000332A  6600 0074               3543            BNE     CHECK7
0000332E                          3544            
0000332E                          3545            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
0000332E  163C 0020               3546            MOVE.B    #' ',D3
00003332  6100 0606               3547            BSR       PUSH_STACK
00003336  163C 002D               3548            MOVE.B    #'-',D3
0000333A  6100 05FE               3549            BSR       PUSH_STACK
0000333E  163C 0028               3550            MOVE.B    #'(',D3
00003342  6100 05F6               3551            BSR       PUSH_STACK
00003346  163C 0041               3552            MOVE.B    #'A',D3
0000334A  6100 05EE               3553            BSR       PUSH_STACK
0000334E                          3554  
0000334E                          3555            
0000334E                          3556            *FIND REGISTER NUMBER END LOCATION*  
0000334E  13F9 00004264 0000426A  3557            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00003358  0239 000F 0000426A      3558            AND.B   #$0F,VAR_BYTE_END
00003360                          3559            
00003360                          3560            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003360  23C5 0000426E           3561            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003366  1439 0000426A           3562            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
0000336C                          3563            
0000336C                          3564            *INTITIALIZE FOR BIT SHIFTING
0000336C  41F9 0000426E           3565            LEA     VAR_TEMP_CLEANCOPY,A0
00003372  2639 0000426E           3566            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003378                          3567            
00003378                          3568  LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
00003378  0C02 0000               3569            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000337C  6700 0008               3570            BEQ     MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00003380  E24B                    3571            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003382  5302                    3572            SUBI.B   #1,D2                     *DECREMENT COUNTER
00003384  60F2                    3573            BRA     LOOP_SHIFTING4            *CONTINUE SHIFTING 
00003386                          3574                                               *change: NAME OF LABEL*
00003386                          3575  MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
00003386  0283 00000007           3576            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
0000338C  0603 0030               3577            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00003390  6100 05A8               3578            BSR     PUSH_STACK                *PUSH TO STACK
00003394                          3579            
00003394  163C 0029               3580            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003398  6100 05A0               3581            BSR       PUSH_STACK
0000339C                          3582            
0000339C  6000 012C               3583            BRA     GET_SRC_SUCCESS                   *RETURN
000033A0                          3584            
000033A0                          3585                      
000033A0                          3586            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
000033A0  0CB9 00000007 00004272  3587  CHECK7    CMPI.L  #7,VAR_LONG_ADDRESS_MODE_CHECK                      *IF (MODE != 111)
000033AA  6600 011A               3588            BNE     GET_SRC_FAILED                                      *THAN BRANCH TO UNCESSFULL SRC MODE READ
000033AE                          3589                   
000033AE                          3590            *NEXT: (MODE == 111) 
000033AE                          3591            *NOW: CHECK FOR SRC REGISTER 
000033AE                          3592                  *(000 = (xxx).W)
000033AE                          3593                  *(001 = (xxx).L)
000033AE                          3594                  *(010 = #<data>)
000033AE                          3595                  
000033AE                          3596            *FIND REGISTER NUMBER END LOCATION*  
000033AE  13F9 00004264 0000426A  3597            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
000033B8  0239 000F 0000426A      3598            AND.B   #$0F,VAR_BYTE_END
000033C0                          3599            
000033C0                          3600            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000033C0  23C5 0000426E           3601            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000033C6  1439 0000426A           3602            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000033CC                          3603            
000033CC                          3604            *INTITIALIZE FOR BIT SHIFTING
000033CC  41F9 0000426E           3605            LEA     VAR_TEMP_CLEANCOPY,A0
000033D2  2C39 0000426E           3606            MOVE.L  VAR_TEMP_CLEANCOPY,D6
000033D8                          3607  SRC_LOOP_SHIFTING
000033D8  0C02 0000               3608            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000033DC  6700 0008               3609            BEQ     SRC_MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
000033E0  E24E                    3610            LSR     #1,D6                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000033E2  5302                    3611            SUB.B   #1,D2                     *DECREMENT COUNTER
000033E4  60F2                    3612            BRA     SRC_LOOP_SHIFTING             *CONTINUE SHIFTING
000033E6                          3613  SRC_MASKING_NEXT
000033E6  CCBC 00000007           3614            AND.L   #7,D6                     *MASK, ONLY NEED 0-2 BIT INDEXES 
000033EC                          3615           *D3 - REGISTER NUMBER NEEDED TO CHECK WHICH W/L/#<DATA>*
000033EC                          3616           
000033EC                          3617  CHECK_WORD  
000033EC  41F9 00004262           3618            LEA     TEMP_REGISTER_FORMAT,A0
000033F2  1439 00004261           3619            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000033F8  1082                    3620            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000033FA  0239 0020 00004262      3621            ANDI.B  #$20,TEMP_REGISTER_FORMAT                           * MASKS 0010 0000                                                     *change <SRC>*
00003402  0C39 0020 00004262      3622            CMPI.B  #$20,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0010 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
0000340A  6700 0026               3623            BEQ     CHECK_LONG                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
0000340E  0C06 0000               3624            CMPI.B  #0,D6                          
00003412  6600 001E               3625            BNE     CHECK_LONG 
00003416                          3626            
00003416                          3627            *IT IS A WORD AT THIS POINT*
00003416                          3628            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003416  163C 0020               3629            MOVE.B    #' ',D3
0000341A  6100 051E               3630            BSR       PUSH_STACK
0000341E  163C 0024               3631            MOVE.B    #'$',D3
00003422  6100 0516               3632            BSR       PUSH_STACK
00003426  321D                    3633            MOVE.W    (A5)+,D1
00003428  7404                    3634            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
0000342A  6100 DDCC               3635            BSR       HEX2ASCII2STACK
0000342E  6000 009A               3636            BRA     GET_SRC_SUCCESS
00003432                          3637  
00003432                          3638  CHECK_LONG
00003432  41F9 00004262           3639            LEA     TEMP_REGISTER_FORMAT,A0
00003438  1439 00004261           3640            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000343E  1082                    3641            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003440  0239 0040 00004262      3642            ANDI.B  #$40,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00003448  0C39 0040 00004262      3643            CMPI.B  #$40,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003450  6700 002E               3644            BEQ     CHECK_IMMEDIATE                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00003454  0C06 0001               3645            CMPI.B  #1,D6                          
00003458  6600 0026               3646            BNE     CHECK_IMMEDIATE  
0000345C                          3647  
0000345C                          3648            *IT IS A WORD AT THIS POINT*
0000345C                          3649            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
0000345C  163C 0020               3650            MOVE.B    #' ',D3
00003460  6100 04D8               3651            BSR       PUSH_STACK
00003464  163C 0024               3652            MOVE.B    #'$',D3
00003468  6100 04D0               3653            BSR       PUSH_STACK
0000346C  321D                    3654            MOVE.W    (A5)+,D1
0000346E  7404                    3655            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003470  6100 DD86               3656            BSR       HEX2ASCII2STACK
00003474  321D                    3657            MOVE.W    (A5)+,D1
00003476  7404                    3658            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003478  6100 DD7E               3659            BSR       HEX2ASCII2STACK
0000347C  6000 004C               3660            BRA     GET_SRC_SUCCESS
00003480                          3661            
00003480                          3662  CHECK_IMMEDIATE
00003480  41F9 00004262           3663            LEA     TEMP_REGISTER_FORMAT,A0
00003486  1439 00004261           3664            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000348C  1082                    3665            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000348E  0239 0080 00004262      3666            ANDI.B  #$80,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00003496  0C39 0080 00004262      3667            CMPI.B  #$80,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
0000349E  6700 0026               3668            BEQ     GET_SRC_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
000034A2  0C06 0004               3669            CMPI.B  #4,D6                          
000034A6  6600 001E               3670            BNE     GET_SRC_FAILED 
000034AA                          3671  
000034AA                          3672            *IT IS A WORD AT THIS POINT*
000034AA                          3673            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000034AA  163C 0020               3674            MOVE.B    #' ',D3
000034AE  6100 048A               3675            BSR       PUSH_STACK
000034B2  163C 0023               3676            MOVE.B    #'#',D3
000034B6  6100 0482               3677            BSR       PUSH_STACK
000034BA  321D                    3678            MOVE.W    (A5)+,D1
000034BC  7404                    3679            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
000034BE  6100 DD38               3680            BSR       HEX2ASCII2STACK
000034C2  6000 0006               3681            BRA     GET_SRC_SUCCESS
000034C6                          3682            
000034C6                          3683  GET_SRC_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
000034C6  7801                    3684            MOVE.L #1,D4
000034C8  4E75                    3685            RTS
000034CA                          3686  GET_SRC_SUCCESS 
000034CA  4E75                    3687            RTS
000034CC                          3688                                 
000034CC                          3689      
000034CC                          3690  
000034CC                          3691  
000034CC                          3692  
000034CC                          3693  
000034CC                          3694  
000034CC                          3695  
000034CC                          3696  GET_EA_EA_DEST
000034CC                          3697  *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
000034CC                          3698      
000034CC                          3699      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
000034CC  2405                    3700      MOVE.L  D5,D2                           * CLEAN COPY TO D2
000034CE  EC8A                    3701      LSR.L   #6,D2                           * [D2] Temporarily used D2 for shifting bits                *TODO: DYNAMIC MODE LOCATION
000034D0  23C2 00004272           3702      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
000034D6  7407                    3703      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
000034D8  C5B9 00004272           3704      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
000034DE                          3705                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
000034DE                          3706      
000034DE                          3707      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
000034DE                          3708      *DESTINATION REGISTER FORMAT STANDARD         *
000034DE                          3709      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
000034DE                          3710      *WHEN BIT = 0(VALID ADDRESS MODE)             *
000034DE                          3711      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
000034DE                          3712      *0 - Dn                                       *
000034DE                          3713      *1 - An                                       *
000034DE                          3714      *2 - (An)                                     *
000034DE                          3715      *3 - (An)+                                    *
000034DE                          3716      *4 - -(An)                                    *
000034DE                          3717      *5 - (XXX).W                                  *
000034DE                          3718      *6 - (XXX).L                                  *
000034DE                          3719      *7 - #<data>                                  *
000034DE                          3720      ***********************************************
000034DE                          3721      
000034DE                          3722      *** Check if source ...  <ea> = Dn
000034DE                          3723  DEST_CHECK0    
000034DE  41F9 00004262           3724            LEA     TEMP_REGISTER_FORMAT,A0
000034E4  1439 00004260           3725            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000034EA  1082                    3726            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000034EC  0239 0001 00004262      3727            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
000034F4  0C39 0001 00004262      3728            CMPI.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
000034FC  6700 006A               3729            BEQ     DEST_CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00003500  0CB9 00000000 00004272  3730            CMPI.L     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn) - COMPARE MODES TO SEE IF IT IS THIS MODE
0000350A  6600 005C               3731            BNE     DEST_CHECK1
0000350E                          3732            
0000350E                          3733            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
0000350E  163C 0020               3734            MOVE.B    #' ',D3
00003512  6100 0426               3735            BSR       PUSH_STACK
00003516  163C 0044               3736            MOVE.B    #'D',D3
0000351A  6100 041E               3737            BSR       PUSH_STACK
0000351E                          3738  
0000351E                          3739            *FIND REGISTER NUMBER END LOCATION*  
0000351E  13F9 00004263 0000426A  3740            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00003528  0239 000F 0000426A      3741            AND.B   #$0F,VAR_BYTE_END
00003530                          3742            
00003530                          3743            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003530  23C5 0000426E           3744            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003536  1439 0000426A           3745            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
0000353C                          3746            
0000353C                          3747            *INTITIALIZE FOR BIT SHIFTING
0000353C  41F9 0000426E           3748            LEA     VAR_TEMP_CLEANCOPY,A0
00003542  2639 0000426E           3749            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003548                          3750  DEST_LOOP_SHIFTING
00003548  0C02 0000               3751            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000354C  6700 0008               3752            BEQ     DEST_MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00003550  E24B                    3753            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003552  5302                    3754            SUB.B   #1,D2                     *DECREMENT COUNTER
00003554  60F2                    3755            BRA     DEST_LOOP_SHIFTING             *CONTINUE SHIFTING
00003556                          3756  DEST_MASKING_NEXT
00003556  C6BC 00000007           3757            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
0000355C  0603 0030               3758            ADD.B   #$30,D3                   *CONVERT TO CHAR
00003560  6100 03D8               3759            BSR     PUSH_STACK                *PUSH TO STACK
00003564                          3760            
00003564  6000 0394               3761            BRA     GET_DST_SUCCESS           *RETURN          
00003568                          3762            
00003568                          3763            
00003568                          3764            *** Check if source ...  <ea> = An
00003568                          3765  DEST_CHECK1    
00003568  41F9 00004262           3766            LEA     TEMP_REGISTER_FORMAT,A0
0000356E  1439 00004260           3767            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003574  1082                    3768            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003576  0239 0002 00004262      3769            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
0000357E  0C39 0002 00004262      3770            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
00003586  6700 006A               3771            BEQ     DEST_CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
0000358A  0CB9 00000001 00004272  3772            CMPI.L  #1,VAR_LONG_ADDRESS_MODE_CHECK                      * An - COMPARE MODES TO SEE IF IT IS THIS MODE
00003594  6600 005C               3773            BNE     DEST_CHECK2
00003598                          3774            
00003598                          3775            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003598  163C 0020               3776            MOVE.B    #' ',D3
0000359C  6100 039C               3777            BSR       PUSH_STACK
000035A0  163C 0041               3778            MOVE.B    #'A',D3
000035A4  6100 0394               3779            BSR       PUSH_STACK
000035A8                          3780  
000035A8                          3781            
000035A8                          3782            *FIND REGISTER NUMBER END LOCATION*  
000035A8  13F9 00004263 0000426A  3783            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
000035B2  0239 000F 0000426A      3784            AND.B   #$0F,VAR_BYTE_END
000035BA                          3785            
000035BA                          3786            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000035BA  23C5 0000426E           3787            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000035C0  1439 0000426A           3788            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
000035C6                          3789            
000035C6                          3790            *INTITIALIZE FOR BIT SHIFTING
000035C6  41F9 0000426E           3791            LEA     VAR_TEMP_CLEANCOPY,A0
000035CC  2639 0000426E           3792            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000035D2                          3793  DEST_LOOP_SHIFTING1
000035D2  0C02 0000               3794            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000035D6  6700 0008               3795            BEQ     DEST_MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
000035DA  E24B                    3796            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000035DC  5302                    3797            SUB.B   #1,D2                     *DECREMENT COUNTER
000035DE  60F2                    3798            BRA     DEST_LOOP_SHIFTING1             *CONTINUE SHIFTING
000035E0                          3799  DEST_MASKING_NEXT1
000035E0  C6BC 00000007           3800            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000035E6  0603 0030               3801            ADD.B   #$30,D3                   *CONVERT TO CHAR
000035EA  6100 034E               3802            BSR     PUSH_STACK                *PUSH TO STACK
000035EE                          3803            
000035EE  6000 030A               3804            BRA     GET_DST_SUCCESS                   *RETURN 
000035F2                          3805            
000035F2                          3806            
000035F2                          3807            
000035F2                          3808            
000035F2                          3809            *** Check if source ...  <ea> = (An)       
000035F2                          3810  DEST_CHECK2    
000035F2  41F9 00004262           3811            LEA     TEMP_REGISTER_FORMAT,A0
000035F8  1439 00004260           3812            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000035FE  1082                    3813            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003600  0239 0004 00004262      3814            ANDI.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
00003608  0C39 0004 00004262      3815            CMPI.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
00003610  6700 007A               3816            BEQ     DEST_CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00003614  0CB9 00000002 00004272  3817            CMPI.L   #2,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)  COMPARE MODES TO SEE IF IT IS THIS MODE                                                                *change: checkx++*
0000361E  6600 006C               3818            BNE     DEST_CHECK3
00003622                          3819            
00003622                          3820            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00003622  163C 0020               3821            MOVE.B    #' ',D3
00003626  6100 0312               3822            BSR       PUSH_STACK
0000362A  163C 0028               3823            MOVE.B    #'(',D3
0000362E  6100 030A               3824            BSR       PUSH_STACK
00003632  163C 0041               3825            MOVE.B    #'A',D3
00003636  6100 0302               3826            BSR       PUSH_STACK
0000363A                          3827  
0000363A                          3828            
0000363A                          3829            *FIND REGISTER NUMBER END LOCATION*  
0000363A  13F9 00004263 0000426A  3830            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00003644  0239 000F 0000426A      3831            AND.B   #$0F,VAR_BYTE_END
0000364C                          3832            
0000364C                          3833            *GET INDEX OF THE END OF SRC REGISTER NUMBER
0000364C  23C5 0000426E           3834            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003652  1439 0000426A           3835            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003658                          3836            
00003658                          3837            *INTITIALIZE FOR BIT SHIFTING
00003658  41F9 0000426E           3838            LEA     VAR_TEMP_CLEANCOPY,A0
0000365E  2639 0000426E           3839            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003664                          3840  DEST_LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
00003664  0C02 0000               3841            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003668  6700 0008               3842            BEQ     DEST_MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
0000366C  E24B                    3843            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
0000366E  5302                    3844            SUB.B   #1,D2                     *DECREMENT COUNTER
00003670  60F2                    3845            BRA     DEST_LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
00003672                          3846  DEST_MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
00003672  0283 00000007           3847            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003678  0603 0030               3848            ADDI.B   #$30,D3                   *CONVERT TO CHAR
0000367C  6100 02BC               3849            BSR     PUSH_STACK                *PUSH TO STACK
00003680                          3850            
00003680  163C 0029               3851            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003684  6100 02B4               3852            BSR       PUSH_STACK
00003688                          3853            
00003688  6000 0270               3854            BRA     GET_DST_SUCCESS                   *RETURN 
0000368C                          3855  
0000368C                          3856            
0000368C                          3857            
0000368C                          3858                      
0000368C                          3859  *** Check if source ...  <ea> = (An)+       
0000368C  41F9 00004262           3860  DEST_CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
00003692  1439 00004260           3861            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003698  1082                    3862            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000369A  0239 0008 00004262      3863            ANDI.B  #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
000036A2  0C39 0008 00004262      3864            CMPI.B  #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
000036AA  6700 0082               3865            BEQ     DEST_CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
000036AE  0CB9 00000003 00004272  3866            CMPI.L  #3,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)+ - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
000036B8  6600 0074               3867            BNE     DEST_CHECK4
000036BC                          3868            
000036BC                          3869            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
000036BC  163C 0020               3870            MOVE.B    #' ',D3
000036C0  6100 0278               3871            BSR       PUSH_STACK
000036C4  163C 0028               3872            MOVE.B    #'(',D3
000036C8  6100 0270               3873            BSR       PUSH_STACK
000036CC  163C 0041               3874            MOVE.B    #'A',D3
000036D0  6100 0268               3875            BSR       PUSH_STACK
000036D4                          3876  
000036D4                          3877            
000036D4                          3878            *FIND REGISTER NUMBER END LOCATION*  
000036D4  13F9 00004263 0000426A  3879            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
000036DE  0239 000F 0000426A      3880            ANDI.B   #$0F,VAR_BYTE_END
000036E6                          3881            
000036E6                          3882            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000036E6  23C5 0000426E           3883            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000036EC  1439 0000426A           3884            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000036F2                          3885            
000036F2                          3886            *INTITIALIZE FOR BIT SHIFTING
000036F2  41F9 0000426E           3887            LEA     VAR_TEMP_CLEANCOPY,A0
000036F8  2639 0000426E           3888            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000036FE                          3889            
000036FE                          3890  DEST_LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
000036FE  0C02 0000               3891            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003702  6700 0008               3892            BEQ     DEST_MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00003706  E24B                    3893            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003708  5302                    3894            SUBI.B   #1,D2                     *DECREMENT COUNTER
0000370A  60F2                    3895            BRA     DEST_LOOP_SHIFTING3            *CONTINUE SHIFTING 
0000370C                          3896                                               *change: NAME OF LABEL*
0000370C                          3897  DEST_MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
0000370C  0283 00000007           3898            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003712  0603 0030               3899            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00003716  6100 0222               3900            BSR     PUSH_STACK                *PUSH TO STACK
0000371A                          3901            
0000371A  163C 0029               3902            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
0000371E  6100 021A               3903            BSR       PUSH_STACK
00003722  163C 002B               3904            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003726  6100 0212               3905            BSR       PUSH_STACK
0000372A                          3906            
0000372A  6000 01CE               3907            BRA       GET_DST_SUCCESS                   *RETURN 
0000372E                          3908  
0000372E                          3909            
0000372E                          3910            
0000372E                          3911                      
0000372E                          3912            *** Check if source ...  <ea> = -(An)       
0000372E                          3913  DEST_CHECK4    
0000372E  41F9 00004262           3914            LEA     TEMP_REGISTER_FORMAT,A0
00003734  1439 00004260           3915            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000373A  1082                    3916            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000373C  0239 0010 00004262      3917            ANDI.B  #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
00003744  0C39 0010 00004262      3918            CMPI.B  #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
0000374C  6700 0082               3919            BEQ     DEST_CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00003750  0CB9 00000004 00004272  3920            CMPI.L  #4,VAR_LONG_ADDRESS_MODE_CHECK                      * -(An) - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
0000375A  6600 0074               3921            BNE     DEST_CHECK7
0000375E                          3922            
0000375E                          3923            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
0000375E  163C 0020               3924            MOVE.B    #' ',D3
00003762  6100 01D6               3925            BSR       PUSH_STACK
00003766  163C 002D               3926            MOVE.B    #'-',D3
0000376A  6100 01CE               3927            BSR       PUSH_STACK
0000376E  163C 0028               3928            MOVE.B    #'(',D3
00003772  6100 01C6               3929            BSR       PUSH_STACK
00003776  163C 0041               3930            MOVE.B    #'A',D3
0000377A  6100 01BE               3931            BSR       PUSH_STACK
0000377E                          3932  
0000377E                          3933            
0000377E                          3934            *FIND REGISTER NUMBER END LOCATION*  
0000377E  13F9 00004263 0000426A  3935            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00003788  0239 000F 0000426A      3936            AND.B   #$0F,VAR_BYTE_END
00003790                          3937            
00003790                          3938            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003790  23C5 0000426E           3939            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003796  1439 0000426A           3940            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
0000379C                          3941            
0000379C                          3942            *INTITIALIZE FOR BIT SHIFTING
0000379C  41F9 0000426E           3943            LEA     VAR_TEMP_CLEANCOPY,A0
000037A2  2639 0000426E           3944            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000037A8                          3945            
000037A8                          3946  DEST_LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
000037A8  0C02 0000               3947            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000037AC  6700 0008               3948            BEQ     DEST_MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
000037B0  E24B                    3949            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000037B2  5302                    3950            SUBI.B   #1,D2                     *DECREMENT COUNTER
000037B4  60F2                    3951            BRA     DEST_LOOP_SHIFTING4            *CONTINUE SHIFTING 
000037B6                          3952                                               *change: NAME OF LABEL*
000037B6                          3953  DEST_MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
000037B6  0283 00000007           3954            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000037BC  0603 0030               3955            ADDI.B   #$30,D3                   *CONVERT TO CHAR
000037C0  6100 0178               3956            BSR     PUSH_STACK                *PUSH TO STACK
000037C4                          3957            
000037C4  163C 0029               3958            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
000037C8  6100 0170               3959            BSR       PUSH_STACK
000037CC                          3960            
000037CC  6000 012C               3961            BRA     GET_DST_SUCCESS                   *RETURN
000037D0                          3962            
000037D0                          3963                      
000037D0                          3964            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
000037D0                          3965  DEST_CHECK7    
000037D0  0CB9 00000007 00004272  3966            CMPI.L  #7,VAR_LONG_ADDRESS_MODE_CHECK                      *IF (MODE != 111)
000037DA  6600 011A               3967            BNE     GET_DST_FAILED                                      *THAN BRANCH TO UNCESSFULL SRC MODE READ
000037DE                          3968                   
000037DE                          3969            *NEXT: (MODE == 111) 
000037DE                          3970            *NOW: CHECK FOR SRC REGISTER 
000037DE                          3971                  *(000 = (xxx).W)
000037DE                          3972                  *(001 = (xxx).L)
000037DE                          3973                  *(010 = #<data>)
000037DE                          3974                  
000037DE                          3975            *FIND REGISTER NUMBER END LOCATION*  
000037DE  13F9 00004263 0000426A  3976            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
000037E8  0239 000F 0000426A      3977            AND.B   #$0F,VAR_BYTE_END
000037F0                          3978            
000037F0                          3979            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000037F0  23C5 0000426E           3980            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000037F6  1439 0000426A           3981            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000037FC                          3982            
000037FC                          3983            *INTITIALIZE FOR BIT SHIFTING
000037FC  41F9 0000426E           3984            LEA     VAR_TEMP_CLEANCOPY,A0
00003802  2C39 0000426E           3985            MOVE.L  VAR_TEMP_CLEANCOPY,D6
00003808                          3986  DEST_LOOP_SHIFTING7
00003808  0C02 0000               3987            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000380C  6700 0008               3988            BEQ     DEST_MASKING_NEXT7              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00003810  E24E                    3989            LSR     #1,D6                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003812  5302                    3990            SUB.B   #1,D2                     *DECREMENT COUNTER
00003814  60F2                    3991            BRA     DEST_LOOP_SHIFTING7             *CONTINUE SHIFTING
00003816                          3992  DEST_MASKING_NEXT7
00003816  CCBC 00000007           3993            AND.L   #7,D6                     *MASK, ONLY NEED 0-2 BIT INDEXES 
0000381C                          3994           *D3 - REGISTER NUMBER NEEDED TO CHECK WHICH W/L/#<DATA>*
0000381C                          3995            
0000381C                          3996  DEST_CHECK_WORD  
0000381C  41F9 00004262           3997            LEA     TEMP_REGISTER_FORMAT,A0
00003822  1439 00004260           3998            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003828  1082                    3999            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000382A  0239 0020 00004262      4000            ANDI.B  #$20,TEMP_REGISTER_FORMAT                           * MASKS 0010 0000                                                     *change <SRC>*
00003832  0C39 0020 00004262      4001            CMPI.B  #$20,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0010 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
0000383A  6700 0026               4002            BEQ     DEST_CHECK_LONG                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
0000383E  0C06 0000               4003            CMPI.B  #0,D6                                                   *COMPARE REGISTER NUMBER WITH (000 == 000) FOR WORD
00003842  6600 001E               4004            BNE     DEST_CHECK_LONG                                      * THE REGISTER NUMBER DOESN'T MATCH "(XXX).W" -> SO MOVE ON       
00003846                          4005            *IT IS A WORD AT THIS POINT*
00003846                          4006            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003846  163C 0020               4007            MOVE.B    #' ',D3
0000384A  6100 00EE               4008            BSR       PUSH_STACK
0000384E  163C 0024               4009            MOVE.B    #'$',D3
00003852  6100 00E6               4010            BSR       PUSH_STACK
00003856  321D                    4011            MOVE.W    (A5)+,D1
00003858  7404                    4012            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
0000385A  6100 D99C               4013            BSR       HEX2ASCII2STACK
0000385E  6000 009A               4014            BRA       GET_DST_SUCCESS
00003862                          4015  
00003862                          4016  DEST_CHECK_LONG
00003862  41F9 00004262           4017            LEA     TEMP_REGISTER_FORMAT,A0
00003868  1439 00004260           4018            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000386E  1082                    4019            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003870  0239 0040 00004262      4020            ANDI.B  #$40,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00003878  0C39 0040 00004262      4021            CMPI.B  #$40,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003880  6700 002E               4022            BEQ     DEST_CHECK_IMMEDIATE                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00003884  0C06 0001               4023            CMPI.B  #1,D6                                                   *COMPARE REGISTER NUMBER WITH (001 == 001) FOR WORD
00003888  6600 0026               4024            BNE     DEST_CHECK_IMMEDIATE                                      * THE REGISTER NUMBER DOESN'T MATCH "(XXX).L" -> SO MOVE ON 
0000388C                          4025            *IT IS A WORD AT THIS POINT*
0000388C                          4026            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
0000388C  163C 0020               4027            MOVE.B    #' ',D3
00003890  6100 00A8               4028            BSR       PUSH_STACK
00003894  163C 0024               4029            MOVE.B    #'$',D3
00003898  6100 00A0               4030            BSR       PUSH_STACK
0000389C  321D                    4031            MOVE.W    (A5)+,D1        * GET NEXT WORD INTO STACK
0000389E  7404                    4032            MOVE.L    #4,D2           * SETS SIZE = 4 FOR CONVERSION TO ASCII
000038A0  6100 D956               4033            BSR       HEX2ASCII2STACK
000038A4  321D                    4034            MOVE.W    (A5)+,D1        * GET NEXT WORD INTO STACK
000038A6  7404                    4035            MOVE.L    #4,D2          
000038A8  6100 D94E               4036            BSR       HEX2ASCII2STACK
000038AC  6000 004C               4037            BRA     GET_DST_SUCCESS
000038B0                          4038            
000038B0                          4039  DEST_CHECK_IMMEDIATE
000038B0  41F9 00004262           4040            LEA     TEMP_REGISTER_FORMAT,A0
000038B6  1439 00004260           4041            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000038BC  1082                    4042            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000038BE  0239 0080 00004262      4043            ANDI.B  #$80,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
000038C6  0C39 0080 00004262      4044            CMPI.B  #$80,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
000038CE  6700 0026               4045            BEQ     GET_DST_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
000038D2  0C06 0004               4046            CMPI.B  #4,D6                                               * COMPARE REGISTER NUMBER WITH (010 == 010) FOR WORD
000038D6  6600 001E               4047            BNE     GET_DST_FAILED                                      * THE REGISTER NUMBER DOESN'T MATCH "#<DATA>" -> SO MOVE ON 
000038DA                          4048            
000038DA                          4049            *IT IS A WORD AT THIS POINT*
000038DA                          4050            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000038DA  163C 0020               4051            MOVE.B    #' ',D3
000038DE  6100 005A               4052            BSR       PUSH_STACK
000038E2  163C 0023               4053            MOVE.B    #'#',D3
000038E6  6100 0052               4054            BSR       PUSH_STACK
000038EA  321D                    4055            MOVE.W    (A5)+,D1
000038EC  7404                    4056            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
000038EE  6100 D908               4057            BSR       HEX2ASCII2STACK
000038F2  6000 0006               4058            BRA       GET_DST_SUCCESS
000038F6                          4059            
000038F6                          4060  GET_DST_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
000038F6  7801                    4061            MOVE.L #1,D4
000038F8  4E75                    4062            RTS
000038FA                          4063  GET_DST_SUCCESS 
000038FA  4E75                    4064            RTS
000038FC                          4065  
000038FC                          4066  
000038FC                          4067  *---------------------------------------------------------------------------*
000038FC                          4068  * STACK/QUEUE INTERFACE
000038FC                          4069  *---------------------------------------------------------------------------*
000038FC                          4070  PRINT_STACK
000038FC  0C39 0000 0000425C      4071            CMP.B     #0,COUNTER
00003904  6700 000E               4072            BEQ       PRINT_STACK_RETURN             *CHECK IF LOOP IS FINISHED
00003908                          4073            
00003908                          4074  PRINT_STACK_HELPER
00003908  6100 0038               4075            BSR      POP_STACK          *PRINTS ADDRESS
0000390C  103C 0006               4076            MOVE.B   #6,D0              *Display single character in D1.B. 
00003910  4E4F                    4077            TRAP     #15             *ACTIVATES PRINT
00003912                          4078  
00003912  60E8                    4079            BRA       PRINT_STACK
00003914                          4080  PRINT_STACK_RETURN
00003914  4E75                    4081            RTS
00003916                          4082            
00003916                          4083            
00003916                          4084  PRINT_QUEUE
00003916  0C39 0000 0000425C      4085            CMP.B     #0,COUNTER
0000391E  6700 0018               4086            BEQ       PRINT_QUEUE_RETURN             *CHECK IF LOOP IS FINISHED
00003922                          4087            
00003922                          4088  PRINT_QUEUE_HELPER
00003922  33F9 0000425C 0000425E  4089            MOVE.W   COUNTER,QUEUE_COUNTER
0000392C  6100 0022               4090            BSR      POP_FRONT          *PRINTS ADDRESS
00003930  103C 0006               4091            MOVE.B   #6,D0              *Display single character in D1.B. 
00003934  4E4F                    4092            TRAP     #15             *ACTIVATES PRINT
00003936                          4093  
00003936  60DE                    4094            BRA       PRINT_QUEUE
00003938                          4095  PRINT_QUEUE_RETURN
00003938  4E75                    4096            RTS
0000393A                          4097            
0000393A                          4098  *PUSHES.W CONTENTS OF [D3] INTO STACK          
0000393A                          4099  PUSH_STACK
0000393A  1503                    4100              MOVE.B  D3,-(A2)
0000393C  6100 0058               4101              BSR     INCREMENT
00003940  4E75                    4102              RTS
00003942                          4103  *POPS.W TOP OF STACK INTO [D1], SO ITS READY TO PRINT WITH TRAP 15
00003942                          4104  *         MOVE.W   (A2)+,D1           *PRINTS ADDRESS
00003942                          4105  *         MOVE.B   #15,D0             *PRINTS ACCORDING TO D2 BASE VALUE
00003942                          4106  *         MOVE.B   #16,D2             *PRINTS BASED 16 NUMBER
00003942                          4107  *         TRAP        #15             *ACTIVATES PRINT
00003942                          4108  POP_STACK
00003942  BECA                    4109              CMPA.W   A2,SP            *CHECKS IF THERE IS ANYTHING TO PUSH
00003944  6700 0008               4110              BEQ     POP_RETURN        *IF NOTHING TO PUSH THAN JUST RETURN
00003948  121A                    4111              MOVE.B  (A2)+,D1 
0000394A  6100 0052               4112              BSR     DECREMENT
0000394E                          4113  POP_RETURN
0000394E  4E75                    4114              RTS 
00003950                          4115        
00003950                          4116  *USE [A4] AS SECOND POINTER IN SHIFTING      
00003950  0C39 0000 0000425E      4117  POP_FRONT   CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
00003958  6700 0030               4118              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
0000395C                          4119              
0000395C                          4120              
0000395C                          4121              *POSITION THE POINTERS A[4] RIGHT BEHIND A[2] WHICH IS RIGHT BEHIND STACK
0000395C  347C 7000               4122              MOVEA.W #STACK,A2   *START A2 AT STACK
00003960  0622 0000               4123              ADD.B   #0,-(A2)    *SHIFT A2 TO THE BOTTOM OF THE STACK
00003964  384A                    4124              MOVEA.W A2,A4     *START A4 RIGHT ABOVE A2
00003966  0624 0000               4125              ADD.B   #0,-(A4)  *leash one more higher in stack (a4)
0000396A  1212                    4126              MOVE.B  (A2),D1     *POP CONTENTS INTO D1
0000396C                          4127  POP_SHIFT_LOOP
0000396C  0C39 0000 0000425E      4128              CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
00003974  6700 0014               4129              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
00003978  1494                    4130              MOVE.B  (A4),(A2)   *SHIFT CONTENT DOWN THE STACK
0000397A  0624 0000               4131              ADD.B   #0,-(A4)
0000397E  0622 0000               4132              ADD.B   #0,-(A2) *SHIFT POINTERS DOWN THE STACK
00003982  5339 0000425E           4133              SUB.B   #1,QUEUE_COUNTER *DECREMENT INTERNAL QUEUE COUNTER
00003988                          4134              
00003988  60E2                    4135              BRA     POP_SHIFT_LOOP
0000398A                          4136                          
0000398A                          4137  POP_FRONT_RETURN 
0000398A                          4138              *RESET A2 BACK TO SP
0000398A  347C 7000               4139              MOVEA.W #STACK,A2    
0000398E  5339 0000425C           4140              SUB.B   #1,COUNTER *DECREMENT STACK COUNTER       
00003994  4E75                    4141              RTS   
00003996                          4142  
00003996                          4143  INCREMENT
00003996  5239 0000425C           4144              ADD.B   #1, COUNTER
0000399C  4E75                    4145              RTS           
0000399E                          4146  DECREMENT
0000399E  5339 0000425C           4147              SUB.B   #1, COUNTER
000039A4  4E75                    4148              RTS           
000039A6                          4149  CLEAR_STACK
000039A6  0C39 0000 0000425C      4150              CMP.B     #0,COUNTER
000039AE  6700 0006               4151              BEQ       CLEAR_RETURN
000039B2  618E                    4152              BSR       POP_STACK
000039B4  60F0                    4153              BRA       CLEAR_STACK
000039B6                          4154   
000039B6                          4155  CLEAR_RETURN
000039B6  4E75                    4156              RTS    
000039B8                          4157  *---------------------------------------------------------------------------*
000039B8                          4158  * TERMINATE
000039B8                          4159  *---------------------------------------------------------------------------*
000039B8                          4160  TERMINATE   
000039B8  43F9 00003D68           4161              LEA     FINMSG,A1
000039BE  103C 000E               4162              MOVE.B  #14,D0
000039C2  4E4F                    4163              TRAP    #15
000039C4                          4164  
000039C4  103C 0009               4165              MOVE.B  #9,D0
000039C8  4E4F                    4166              TRAP    #15
000039CA                          4167  
000039CA                          4168  *---------------------------------------------------------------------------*
000039CA                          4169  * Data storage                                                 
000039CA                          4170  *---------------------------------------------------------------------------*  
000039CA                          4171  WELCOME
000039CA= 20 20 20 20 20 20 ...   4172              DC.B '                         ___     ___ ___        ___   ___ ___                 ',CR,LF
00003A1A= 3D 3D 3D 3D 3D 20 ...   4173              DC.B '=====           \  /\  /|___|   |   |   ||\  /||___    | |   |           =====',CR,LF
00003A6A= 3D 3D 3D 3D 3D 20 ...   4174              DC.B '=====            \/  \/ |___|___|___|___|| \/ ||___    | |___|           =====',CR,LF
00003ABA                          4175      
00003ABA= 20 20 20 20 20 20 ...   4176              DC.B '                        ___ ___ ___  ___      ___                             ',CR,LF
00003B0A= 20 20 20 20 20 20 ...   4177              DC.B '                       |     | |___)|    |   |___                             ',CR,LF 
00003B5A= 20 20 20 20 20 20 ...   4178              DC.B '                       |___ _|_|\___|___ |___|___                             ',CR,LF
00003BAA                          4179      
00003BAA= 20 20 20 20 20 20 ...   4180              DC.B '           __  ___ ___   _   ___  ___  ___        ___      ___ ___            ',CR,LF
00003BFA= 3D 3D 3D 3D 3D 20 ...   4181              DC.B '=====     |  \  | |___  /_\ |___ |___ |___ |\  /||___||   |___|___)      =====',CR,LF 
00003C4A= 3D 3D 3D 3D 3D 20 ...   4182              DC.B '=====     |__/ _|_ ___|/   \ ___| ___||___ | \/ ||___||___|___|\___      =====',CR,LF,CR,LF,CR,LF,0
00003C9F                          4183  
00003C9F                          4184  PROMPT_START
00003C9F= 50 6C 65 61 73 65 ...   4185              DC.B    'Please enter a hexadecimal starting address.',CR,LF,0
00003CCE                          4186      
00003CCE                          4187  PROMPT_END
00003CCE= 50 6C 65 61 73 65 ...   4188              DC.B    'Please enter a hexadecimal ending address.',CR,LF,0
00003CFB= 0D 0A 48 69 74 20 ...   4189  DISP_NEXT   DC.B    CR,LF,'Hit Enter to print the next 30 lines.',CR,LF,0            
00003D25= 57 6F 75 6C 64 20 ...   4190  REPEATMSG   DC.B    'Would you like to run again? Press Y to continue or N to finish.',CR,LF,0
00003D68= 54 68 61 6E 6B 20 ...   4191  FINMSG      DC.B    'Thank you for using Circle Disassembler.',CR,LF,0
00003D93= 45 72 72 6F 72 3A ...   4192  ERRMSG_1    DC.B    'Error: Invalid Input Address',CR,LF,0
00003DB2= 45 72 72 6F 72 3A ...   4193  ERRMSG_3    DC.B    'Error: Invalid Input Address (Odd)',CR,LF,0
00003DD7= 45 72 72 6F 72 3A ...   4194  ERRMSG_5    DC.B    'Error: Invalid Input Address (start > end)',CR,LF,0
00003E04                          4195  
00003E04                          4196  VR_S_ADDR   DS.B    80                      * allocate storage space for the starting address
00003E54                          4197  VR_E_ADDR   DS.B    80                      * allocate storage space for the ending address
00003EA4                          4198  S_ADDR_HX   DS.L    1                       * allocate storage space for the starting address in hex
00003EA8                          4199  E_ADDR_HX   DS.L    1                       * allocate storage space for the ending address in hex
00003EAC= 0D 0A 00                4200  ENDLINE_M   DC.B    CR,LF,0
00003EAF                          4201  TMPINPUT    DS.B    80                      * temp store user input
00003EFF                          4202  TMPOUTPUT   DS.B    80                      * temp store prog output
00003F4F= 20 20 20 4F 52 49 ...   4203  DISP_ORI_B  DC.B    '   ORI.B',0
00003F58= 20 20 20 4F 52 49 ...   4204  DISP_ORI_W  DC.B    '   ORI.W',0
00003F61= 20 20 20 4F 52 49 ...   4205  DISP_ORI_L  DC.B    '   ORI.L',0
00003F6A= 20 20 20 45 4F 52 ...   4206  DISP_EORI_B  DC.B    '   EORI.B',0
00003F74= 20 20 20 45 4F 52 ...   4207  DISP_EORI_W  DC.B    '   EORI.W',0
00003F7E= 20 20 20 45 4F 52 ...   4208  DISP_EORI_L  DC.B    '   EORI.L',0
00003F88= 20 20 20 42 54 53 ...   4209  DISP_BTST   DC.B    '   BTST',0
00003F90= 20 20 20 43 4D 50 ...   4210  DISP_CMPI_B  DC.B    '   CMPI.B',0
00003F9A= 20 20 20 43 4D 50 ...   4211  DISP_CMPI_W  DC.B    '   CMPI.W',0
00003FA4= 20 20 20 43 4D 50 ...   4212  DISP_CMPI_L  DC.B    '   CMPI.L',0
00003FAE= 20 20 20 44 41 54 ...   4213  DISP_DATA   DC.B    '   DATA',0
00003FB6= 20 20 20 4D 4F 56 ...   4214  DISP_MOVE_B DC.B    '   MOVE.B',0
00003FC0= 20 20 20 4D 4F 56 ...   4215  DISP_MOVE_W DC.B    '   MOVE.W',0
00003FCA= 20 20 20 4D 4F 56 ...   4216  DISP_MOVE_L DC.B    '   MOVE.L',0
00003FD4= 20 20 20 52 54 53 00    4217  DISP_RTS    DC.B    '   RTS',0
00003FDB= 20 20 20 4A 53 52 00    4218  DISP_JSR    DC.B    '   JSR',0
00003FE2= 20 20 20 4E 45 47 ...   4219  DISP_NEG_B    DC.B    '   NEG.B',0
00003FEB= 20 20 20 4E 45 47 ...   4220  DISP_NEG_W    DC.B    '   NEG.W',0
00003FF4= 20 20 20 4E 45 47 ...   4221  DISP_NEG_L    DC.B    '   NEG.L',0
00003FFD= 20 20 20 4E 4F 54 ...   4222  DISP_NOT_B  DC.B    '   NOT.B',0
00004006= 20 20 20 4E 4F 54 ...   4223  DISP_NOT_W  DC.B    '   NOT.W',0
0000400F= 20 20 20 4E 4F 54 ...   4224  DISP_NOT_L  DC.B    '   NOT.L',0
00004018= 20 20 20 4C 45 41 00    4225  DISP_LEA    DC.B    '   LEA',0
0000401F= 20 20 20 4D 4F 56 ...   4226  DISP_MOVEM_W    DC.B    '   MOVEM.W',0
0000402A= 20 20 20 4D 4F 56 ...   4227  DISP_MOVEM_L    DC.B    '   MOVEM.L',0
00004035= 20 20 20 41 44 44 ...   4228  DISP_ADDQ_B DC.B    '   ADDQ.B',0
0000403F= 20 20 20 41 44 44 ...   4229  DISP_ADDQ_W DC.B    '   ADDQ.W',0
00004049= 20 20 20 41 44 44 ...   4230  DISP_ADDQ_L DC.B    '   ADDQ.L',0
00004053= 20 20 20 44 49 56 ...   4231  DISP_DIVS   DC.B    '   DIVS',0
0000405B= 20 20 20 53 55 42 ...   4232  DISP_SUB_B  DC.B    '   SUB.B',0
00004064= 20 20 20 53 55 42 ...   4233  DISP_SUB_W  DC.B    '   SUB.W',0
0000406D= 20 20 20 53 55 42 ...   4234  DISP_SUB_L  DC.B    '   SUB.L',0
00004076= 20 20 20 53 55 42 ...   4235  DISP_SUBI_B  DC.B    '   SUBI.B',0
00004080= 20 20 20 53 55 42 ...   4236  DISP_SUBI_W  DC.B    '   SUBI.W',0
0000408A= 20 20 20 53 55 42 ...   4237  DISP_SUBI_L  DC.B    '   SUBI.L',0
00004094= 20 20 20 53 55 42 ...   4238  DISP_SUBA_W  DC.B    '   SUBA.W',0
0000409E= 20 20 20 53 55 42 ...   4239  DISP_SUBA_L  DC.B    '   SUBA.L',0
000040A8= 20 20 20 45 4F 52 ...   4240  DISP_EOR_B  DC.B    '   EOR.B',0
000040B1= 20 20 20 45 4F 52 ...   4241  DISP_EOR_W  DC.B    '   EOR.W',0
000040BA= 20 20 20 45 4F 52 ...   4242  DISP_EOR_L  DC.B    '   EOR.L',0
000040C3= 20 20 20 43 4D 50 ...   4243  DISP_CMP_B  DC.B    '   CMP.B',0
000040CC= 20 20 20 43 4D 50 ...   4244  DISP_CMP_W  DC.B    '   CMP.W',0
000040D5= 20 20 20 43 4D 50 ...   4245  DISP_CMP_L  DC.B    '   CMP.L',0
000040DE= 20 20 20 43 4D 50 ...   4246  DISP_CMPA_W  DC.B    '   CMPA.W',0
000040E8= 20 20 20 43 4D 50 ...   4247  DISP_CMPA_L  DC.B    '   CMPA.L',0
000040F2= 20 20 20 4D 55 4C ...   4248  DISP_MULS_W DC.B    '   MULS.W',0
000040FC= 20 20 20 41 4E 44 ...   4249  DISP_AND_B  DC.B    '   AND.B',0
00004105= 20 20 20 41 4E 44 ...   4250  DISP_AND_W  DC.B    '   AND.W',0
0000410E= 20 20 20 41 4E 44 ...   4251  DISP_AND_L  DC.B    '   AND.L',0
00004117= 20 20 20 41 44 44 ...   4252  DISP_ADD_B  DC.B    '   ADD.B',0
00004120= 20 20 20 41 44 44 ...   4253  DISP_ADD_W  DC.B    '   ADD.W',0
00004129= 20 20 20 41 44 44 ...   4254  DISP_ADD_L  DC.B    '   ADD.L',0
00004132= 20 20 20 41 44 44 ...   4255  DISP_ADDA_W DC.B    '   ADDA.W',0
0000413C= 20 20 20 41 44 44 ...   4256  DISP_ADDA_L DC.B    '   ADDA.L',0
00004146= 20 20 20 4C 53 52 ...   4257  DISP_LSR_B  DC.B    '   LSR.B',0
0000414F= 20 20 20 4C 53 4C ...   4258  DISP_LSL_B  DC.B    '   LSL.B',0
00004158= 20 20 20 4C 53 52 ...   4259  DISP_LSR_W  DC.B    '   LSR.W',0
00004161= 20 20 20 4C 53 4C ...   4260  DISP_LSL_W  DC.B    '   LSL.W',0
0000416A= 20 20 20 4C 53 52 ...   4261  DISP_LSR_L  DC.B    '   LSR.L',0
00004173= 20 20 20 4C 53 4C ...   4262  DISP_LSL_L  DC.B    '   LSL.L',0
0000417C= 20 20 20 41 53 52 ...   4263  DISP_ASR_B  DC.B    '   ASR.B',0
00004185= 20 20 20 41 53 4C ...   4264  DISP_ASL_B  DC.B    '   ASL.B',0
0000418E= 20 20 20 41 53 52 ...   4265  DISP_ASR_W  DC.B    '   ASR.W',0
00004197= 20 20 20 41 53 4C ...   4266  DISP_ASL_W  DC.B    '   ASL.W',0
000041A0= 20 20 20 41 53 52 ...   4267  DISP_ASR_L  DC.B    '   ASR.L',0
000041A9= 20 20 20 41 53 4C ...   4268  DISP_ASL_L  DC.B    '   ASL.L',0
000041B2= 20 20 20 52 4F 52 ...   4269  DISP_ROR_B  DC.B    '   ROR.B',0
000041BB= 20 20 20 52 4F 4C ...   4270  DISP_ROL_B  DC.B    '   ROL.B',0
000041C4= 20 20 20 52 4F 52 ...   4271  DISP_ROR_W  DC.B    '   ROR.W',0
000041CD= 20 20 20 52 4F 4C ...   4272  DISP_ROL_W  DC.B    '   ROL.W',0
000041D6= 20 20 20 52 4F 52 ...   4273  DISP_ROR_L  DC.B    '   ROR.L',0
000041DF= 20 20 20 52 4F 4C ...   4274  DISP_ROL_L  DC.B    '   ROL.L',0
000041E8= 20 20 20 42 52 41 00    4275  DISP_BRA    DC.B    '   BRA',0
000041EF= 20 20 20 42 4C 54 00    4276  DISP_BLT    DC.B    '   BLT',0
000041F6= 20 20 20 42 45 51 00    4277  DISP_BEQ    DC.B    '   BEQ',0
000041FD= 20 20 20 42 4E 45 00    4278  DISP_BNE    DC.B    '   BNE',0
00004204= 20 20 20 42 48 49 00    4279  DISP_BHI    DC.B    '   BHI',0
0000420B= 20 20 20 4D 4F 56 ...   4280  DISP_MOVEA_W    DC.B    '   MOVEA.W',0
00004216= 20 20 20 4D 4F 56 ...   4281  DISP_MOVEA_L    DC.B    '   MOVEA.L',0
00004221                          4282  
00004221= 20 20 20 24 00          4283  DISP_HEX     DC.B    '   $',0
00004226= 20 20 20 44 00          4284  DISP_D  DC.B    '   D',0
0000422B= 20 20 20 41 00          4285  DISP_A  DC.B    '   A',0
00004230= 20 20 20 28 00          4286  DISP_OP  DC.B    '   (',0
00004235= 29 00                   4287  DISP_CP  DC.B   ')',0
00004237= 20 20 20 28 41 00       4288  DISP_AOP  DC.B    '   (A',0
0000423D                          4289  
0000423D= 20 20 20 2D 28 41 00    4290  DISP_PRE    DC.B    '   -(A',0
00004244= 29 2B 00                4291  DISP_POST   DC.B    ')+',0
00004247= 20 20 20 23 00          4292  DISP_LB DC.B    '   #',0
0000424C= 30 00                   4293  DISP_0  DC.B    '0',0
0000424E= 31 00                   4294  DISP_1  DC.B    '1',0
00004250= 32 00                   4295  DISP_2  DC.B    '2',0
00004252= 33 00                   4296  DISP_3  DC.B    '3',0
00004254= 34 00                   4297  DISP_4  DC.B    '4',0
00004256= 35 00                   4298  DISP_5  DC.B    '5',0
00004258= 36 00                   4299  DISP_6  DC.B    '6',0
0000425A= 37 00                   4300  DISP_7  DC.B    '7',0
0000425C                          4301  
0000425C                          4302  *STACK INTERFACE VARIABLES*
0000425C                          4303  COUNTER         DS.W    1
0000425E                          4304  QUEUE_COUNTER   DS.W    1
00004260                          4305  
00004260                          4306  *EA DECODING INTERFACE VARIABLES* 
00004260                          4307  DEST_REGISTER_FORMAT    DS.B    1           *all address modes acceptable standard
00004261                          4308  SRC_REGISTER_FORMAT  DS.B    1           *all address modes acceptable standard
00004262                          4309  TEMP_REGISTER_FORMAT    DS.B    1           *place holder for masking other register formats
00004263                          4310  
00004263                          4311  *FORMAT OF WHERE TO GET THE EA BY THE ENDING BIT AND STARTING BIT
00004263                          4312  * WORD + WORD = LONG
00004263                          4313  * (STARTING BIT) + (ENDING BIT) = 2 HEX CHAR
00004263                          4314  * A              + F            = AF         <= EXAMPLE
00004263                          4315  *(10TH BIT)      + (15TH BIT)   = CHECK BITS 15 THROUGH 10
00004263                          4316  GET_DST_START_END    DS.B    1
00004264                          4317  GET_SRC_START_END    DS.B    1
00004265                          4318  
00004265                          4319  *STORES THE START + END BITS HERE (FROM ABOVE)
00004266                          4320  VAR_BYTE_START      DS.L    1
0000426A                          4321  VAR_BYTE_END        DS.L    1
0000426E                          4322  VAR_TEMP_CLEANCOPY  DS.L    1
00004272                          4323  
00004272                          4324  VAR_LONG_ADDRESS_MODE_CHECK        DS.L    1       *holds the bits 0-2 in long form
00004276                          4325  
00004276                          4326  *MORE FOR STACK USAGE*
00004276= 2C 00                   4327  DISP_COMMA  DC.B    ',',0
00004278= 20 20 20 00             4328  DISP_INDENT  DC.B    '   ',0
0000427C                          4329  
0000427C                          4330  *NEXT WORD POINTER: FOR IDENTIFING (xxx).W or (xxx).L*
0000427C                          4331  POINTER_WORD    DS.W       1
0000427E                          4332  
0000427E                          4333  
0000427E                          4334  
0000427E                          4335  *---------------------------------------------------------------------------*
0000427E                          4336  * Ends program
0000427E                          4337  *---------------------------------------------------------------------------*
0000427E                          4338              END    START                    * last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASC2HXLP            1154
ASCII2HEX           114E
ASC_ERR             11B0
ASC_LOW             1192
ASC_NUM             11A2
ASC_SFT             11AA
ASC_UPP             119A
CHECK0              30AE
CHECK1              3138
CHECK2              31C2
CHECK3              325C
CHECK4              32FE
CHECK7              33A0
CHECK_IMMEDIATE     3480
CHECK_LONG          3432
CHECK_WORD          33EC
CLEAR_RETURN        39B6
CLEAR_STACK         39A6
COUNTER             425C
CR                  D
DECREMENT           399E
DEST_CHECK0         34DE
DEST_CHECK1         3568
DEST_CHECK2         35F2
DEST_CHECK3         368C
DEST_CHECK4         372E
DEST_CHECK7         37D0
DEST_CHECK_IMMEDIATE  38B0
DEST_CHECK_LONG     3862
DEST_CHECK_WORD     381C
DEST_LOOP_SHIFTING  3548
DEST_LOOP_SHIFTING1  35D2
DEST_LOOP_SHIFTING2  3664
DEST_LOOP_SHIFTING3  36FE
DEST_LOOP_SHIFTING4  37A8
DEST_LOOP_SHIFTING7  3808
DEST_MASKING_NEXT   3556
DEST_MASKING_NEXT1  35E0
DEST_MASKING_NEXT2  3672
DEST_MASKING_NEXT3  370C
DEST_MASKING_NEXT4  37B6
DEST_MASKING_NEXT7  3816
DEST_MODE           2C66
DEST_REGISTER       2F36
DEST_REGISTER_FORMAT  4260
DISPLAY_30_LINES    12FC
DISP_0              424C
DISP_1              424E
DISP_2              4250
DISP_3              4252
DISP_4              4254
DISP_5              4256
DISP_6              4258
DISP_7              425A
DISP_A              422B
DISP_ADDA_L         413C
DISP_ADDA_W         4132
DISP_ADDQ_B         4035
DISP_ADDQ_L         4049
DISP_ADDQ_W         403F
DISP_ADD_B          4117
DISP_ADD_L          4129
DISP_ADD_W          4120
DISP_AND_B          40FC
DISP_AND_L          410E
DISP_AND_W          4105
DISP_AOP            4237
DISP_ASL_B          4185
DISP_ASL_L          41A9
DISP_ASL_W          4197
DISP_ASR_B          417C
DISP_ASR_L          41A0
DISP_ASR_W          418E
DISP_BEQ            41F6
DISP_BHI            4204
DISP_BLT            41EF
DISP_BNE            41FD
DISP_BRA            41E8
DISP_BTST           3F88
DISP_CMPA_L         40E8
DISP_CMPA_W         40DE
DISP_CMPI_B         3F90
DISP_CMPI_L         3FA4
DISP_CMPI_W         3F9A
DISP_CMP_B          40C3
DISP_CMP_L          40D5
DISP_CMP_W          40CC
DISP_COMMA          4276
DISP_CP             4235
DISP_D              4226
DISP_DATA           3FAE
DISP_DIVS           4053
DISP_EORI_B         3F6A
DISP_EORI_L         3F7E
DISP_EORI_W         3F74
DISP_EOR_B          40A8
DISP_EOR_L          40BA
DISP_EOR_W          40B1
DISP_HEX            4221
DISP_INDENT         4278
DISP_JSR            3FDB
DISP_LB             4247
DISP_LEA            4018
DISP_LSL_B          414F
DISP_LSL_L          4173
DISP_LSL_W          4161
DISP_LSR_B          4146
DISP_LSR_L          416A
DISP_LSR_W          4158
DISP_MOVEA_L        4216
DISP_MOVEA_W        420B
DISP_MOVEM_L        402A
DISP_MOVEM_W        401F
DISP_MOVE_B         3FB6
DISP_MOVE_L         3FCA
DISP_MOVE_W         3FC0
DISP_MULS_W         40F2
DISP_NEG_B          3FE2
DISP_NEG_L          3FF4
DISP_NEG_W          3FEB
DISP_NEXT           3CFB
DISP_NOT_B          3FFD
DISP_NOT_L          400F
DISP_NOT_W          4006
DISP_OP             4230
DISP_ORI_B          3F4F
DISP_ORI_L          3F61
DISP_ORI_W          3F58
DISP_POST           4244
DISP_PRE            423D
DISP_ROL_B          41BB
DISP_ROL_L          41DF
DISP_ROL_W          41CD
DISP_ROR_B          41B2
DISP_ROR_L          41D6
DISP_ROR_W          41C4
DISP_RTS            3FD4
DISP_SUBA_L         409E
DISP_SUBA_W         4094
DISP_SUBI_B         4076
DISP_SUBI_L         408A
DISP_SUBI_W         4080
DISP_SUB_B          405B
DISP_SUB_L          406D
DISP_SUB_W          4064
D_MODE000           2D08
D_MODE010           2D50
D_MODE011           2DB0
D_MODE100           2DD0
D_MODE111           2E22
EA_ARITH            2C00
EA_DATA             14DA
EA_GEN              2C4C
EA_MOVEA            2C26
EA_NOSRC            2BEC
ENDLINE_M           3EAC
END_ADDR            109A
ERRMSG_1            3D93
ERRMSG_3            3DB2
ERRMSG_5            3DD7
ERROR_1             10FE
ERROR_2             110E
ERROR_3             111E
ERROR_4             112E
ERROR_5             113E
E_ADDR_HX           3EA8
FINMSG              3D68
GET_DST_FAILED      38F6
GET_DST_START_END   4263
GET_DST_SUCCESS     38FA
GET_EA_EA_DEST      34CC
GET_EA_EA_SRC       309C
GET_SRC_FAILED      34C6
GET_SRC_START_END   4264
GET_SRC_SUCCESS     34CA
HEX2ASCII           11B6
HEX2ASCII2STACK     11F8
HEX_CHAR            11E4
HEX_CONT            11E8
HEX_LOOP            11CA
IMMD_B              2ED6
IMMD_L              2F16
IMMD_W              2EF6
IMMEDIATE           2EA6
INCREMENT           3996
INTRO               1028
IS_ODD              123C
IS_ODD_ERR          1252
JMPTABLE            1328
LF                  A
LONGMODE            2E7A
LOOP_SHIFTING       3118
LOOP_SHIFTING1      31A2
LOOP_SHIFTING2      3234
LOOP_SHIFTING3      32CE
LOOP_SHIFTING4      3378
MAIN                1258
MASKING_NEXT        3126
MASKING_NEXT1       31B0
MASKING_NEXT2       3242
MASKING_NEXT3       32DC
MASKING_NEXT4       3386
MODE000             2CF4
MODE001             2D1C
MODE010             2D30
MODE011             2D70
MODE100             2D90
MODE111             2DF0
NEXTLINES           130A
OP0000              1388
OP0001              15AE
OP0010              161C
OP0011              171A
OP0100              1816
OP0101              1A12
OP0101_ADDQ_B       1A8E
OP0101_ADDQ_B_0     1B0A
OP0101_ADDQ_B_1     1B16
OP0101_ADDQ_B_2     1B22
OP0101_ADDQ_B_3     1B2E
OP0101_ADDQ_B_4     1B3A
OP0101_ADDQ_B_5     1B46
OP0101_ADDQ_B_6     1B52
OP0101_ADDQ_B_7     1B5E
OP0101_ADDQ_B_8     1B6A
OP0101_ADDQ_L       1AA6
OP0101_ADDQ_W       1A9A
OP0101_RETURN       1AAE
OP0101_RETURN2      1B72
OP0110              1BB6
OP0111              1C44
OP1000              1C48
OP1000_DIVS_DN_EA_OR_EA_DN  1C56
OP1000_DIVS_RETURN  1D3A
OP1000_EA_DN_DIVS   1C84
OP1000_PRINT_L_DIVS  1CF2
OP1000_PRINT_W_DIVS  1CAA
OP1001              1D50
OP1001_ADD_RETURN   209E
OP1001_DETERMINE_DN_EA_OR_EA_DN  1E66
OP1001_DN_EA        1E9E
OP1001_EA_DN        1F9E
OP1001_PRINT_B      1FC6
OP1001_PRINT_B2     1EC6
OP1001_PRINT_L      2056
OP1001_PRINT_L2     1F56
OP1001_PRINT_W      200E
OP1001_PRINT_W2     1F0E
OP1001_SUBA_L       1D82
OP1001_SUBA_W       1DF4
OP1010              210C
OP1011              2110
OP1100              220C
OP1100_AND_RETURN   255C
OP1100_DETERMINE_DN_EA_OR_EA_DN  2322
OP1100_DN_EA        235C
OP1100_EA_DN        245C
OP1100_EA_DN_MULS   226A
OP1100_MULS_DN_EA_OR_EA_DN  223C
OP1100_MULS_RETURN  2320
OP1100_PRINT_B      2484
OP1100_PRINT_B2     2384
OP1100_PRINT_L      2514
OP1100_PRINT_L2     2414
OP1100_PRINT_L_MULS  22D8
OP1100_PRINT_W      24CC
OP1100_PRINT_W2     23CC
OP1100_PRINT_W_MULS  2290
OP1101              255E
OP1101_ADDA_L       2590
OP1101_ADDA_W       2602
OP1101_ADD_RETURN   28AC
OP1101_DETERMINE_DN_EA_OR_EA_DN  2674
OP1101_DN_EA        26AC
OP1101_EA_DN        27AC
OP1101_PRINT_B      27D4
OP1101_PRINT_B2     26D4
OP1101_PRINT_L      2864
OP1101_PRINT_L2     2764
OP1101_PRINT_W      281C
OP1101_PRINT_W2     271C
OP1110              293A
OP1111              2BE8
OP_ADDA_L           2922
OP_ADDA_W           290A
OP_ADDQ_B           1B80
OP_ADDQ_L           1BA4
OP_ADDQ_W           1B92
OP_ADD_B            28C2
OP_ADD_L            28F2
OP_ADD_W            28DA
OP_ASL              2ADA
OP_ASL_B            2AFE
OP_ASL_L            2B10
OP_ASL_W            2B22
OP_ASR              2A80
OP_ASR_B            2AA4
OP_ASR_L            2AB6
OP_ASR_W            2AC8
OP_ASX              299C
OP_BEQ              1C1A
OP_BHI              1BFE
OP_BLT              1C36
OP_BNE              1C0C
OP_BRA              1C28
OP_BTST             13FC
OP_CMPA_L           217C
OP_CMPA_W           216A
OP_CMPI             1502
OP_CMPI_B           1522
OP_CMPI_L           1546
OP_CMPI_W           1534
OP_CMP_B            218E
OP_CMP_L            21BE
OP_CMP_W            21A6
OP_DATA             14B6
OP_DIVS             1D3C
OP_EORI             140A
OP_EORI_B           142A
OP_EORI_L           144E
OP_EORI_W           143C
OP_EOR_B            21D6
OP_EOR_L            21FA
OP_EOR_W            21E8
OP_JSR              19F0
OP_LEA              18C4
OP_LEA_DN_EA_OR_EA_DN  18D2
OP_LEA_RETURN       1930
OP_LSL              2A26
OP_LSL_B            2A4A
OP_LSL_L            2A5C
OP_LSL_W            2A6E
OP_LSR              29CC
OP_LSR_B            29F0
OP_LSR_L            2A02
OP_LSR_W            2A14
OP_LSX              2984
OP_MOVEA_L          16AA
OP_MOVEA_W          17A6
OP_MOVEM_L          18B2
OP_MOVEM_W          18A0
OP_MOVE_B           15B4
OP_MOVE_L           1642
OP_MOVE_W           173E
OP_MULS             222E
OP_NEG              1932
OP_NEG_B            1952
OP_NEG_L            1982
OP_NEG_W            196A
OP_NOT              199A
OP_NOT_B            19BA
OP_NOT_L            19DE
OP_NOT_W            19CC
OP_ORI              1558
OP_ORI_B            1578
OP_ORI_L            159C
OP_ORI_W            158A
OP_PRINT_L_LEA      18F0
OP_ROL              2B8E
OP_ROL_B            2BB2
OP_ROL_L            2BC4
OP_ROL_W            2BD6
OP_ROR              2B34
OP_ROR_B            2B58
OP_ROR_L            2B6A
OP_ROR_W            2B7C
OP_ROX              29B4
OP_RTS              1A04
OP_SUBA_L           20FA
OP_SUBA_W           20E8
OP_SUBI             1460
OP_SUBI_B           1480
OP_SUBI_L           14A4
OP_SUBI_W           1492
OP_SUB_B            20A0
OP_SUB_L            20D0
OP_SUB_W            20B8
OUTPUT_PROCESSED_DATA  12DC
POINTER_WORD        427C
POP_FRONT           3950
POP_FRONT_RETURN    398A
POP_RETURN          394E
POP_SHIFT_LOOP      396C
POP_STACK           3942
PRINT_QUEUE         3916
PRINT_QUEUE_HELPER  3922
PRINT_QUEUE_RETURN  3938
PRINT_STACK         38FC
PRINT_STACK_HELPER  3908
PRINT_STACK_RETURN  3914
PROGLP              100A
PROMPT_END          3CCE
PROMPT_START        3C9F
PUSH_STACK          393A
QUEUE_COUNTER       425E
REG_0               2FEA
REG_1               2FF8
REG_2               3006
REG_3               3014
REG_4               3022
REG_5               3030
REG_6               303E
REG_7               304C
REPEAT              305A
REPEATMSG           3D25
RETURN              11B4
SRC_LOOP_SHIFTING   33D8
SRC_MASKING_NEXT    33E6
SRC_MODE            2CAA
SRC_REGISTER        2F92
SRC_REGISTER_FORMAT  4261
STACK               7000
STACK_HEX_CHAR      1226
STACK_HEX_CONT      122A
STACK_HEX_LOOP      120C
START               1004
START_ADDR          1048
S_ADDR_HX           3EA4
TEMP_REGISTER_FORMAT  4262
TERMINATE           39B8
TESTING             1036
TMPINPUT            3EAF
TMPOUTPUT           3EFF
VAR_BYTE_END        426A
VAR_BYTE_START      4266
VAR_LONG_ADDRESS_MODE_CHECK  4272
VAR_TEMP_CLEANCOPY  426E
VR_E_ADDR           3E54
VR_S_ADDR           3E04
WELCOME             39CA
WORDMODE            2E4E

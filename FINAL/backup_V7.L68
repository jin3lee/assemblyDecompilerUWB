00001004 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/9/2014 2:54:12 PM

00000000                             1  *---------------------------------------------------------------------------*
00000000                             2  * Title      : 68K Disassembler
00000000                             3  * Written by : Team Circle
00000000                             4  * Date       : 12/05/14
00000000                             5  * Description: Scans a section of memory and converts its
00000000                             6  *              contents to a listing of valid assembly 
00000000                             7  *              language instructions
00000000                             8  *---------------------------------------------------------------------------*
00000000                             9  
00000000                            10  *---------------------------------------------------------------------------*
00000000                            11  * System Equates                                                 
00000000                            12  *---------------------------------------------------------------------------*
00000000  =0000000D                 13  CR          EQU     $0D                     * ASCII for Carriage Return
00000000  =0000000A                 14  LF          EQU     $0A                     * ASCII for Line Feed 
00000000  =00007000                 15  STACK       EQU     $7000                   * Initial Stack Pointer                         
00000000                            16              
00000000                            17  *---------------------------------------------------------------------------*
00000000                            18  * Reserved Registers
00000000                            19  *---------------------------------------------------------------------------*  
00000000                            20  * D0 - I/O
00000000                            21  * D1 - Temporary storage of processing data
00000000                            22  * D3 - [PUSH_STACK]
00000000                            23  * D4 - Opcode size (0 - byte; 1- word; 2-long)
00000000                            24  * D5 - Processing data
00000000                            25  * D6 - Loop counter to print 30 lines
00000000                            26  * D7 - Error flag
00000000                            27  * A2 - [STACK POINTER]
00000000                            28  * A5 - Processing address in hex
00000000                            29  
00000000                            30  *---------------------------------------------------------------------------*
00000000                            31  * Start and loop program
00000000                            32  *---------------------------------------------------------------------------*  
00001000                            33              ORG     $1000
00001000  4FF8 7000                 34              LEA     STACK,SP
00001004                            35  START:            
00001004  4EB9 00001028             36              JSR     INTRO                 
0000100A  4EB9 0000104A             37  PROGLP      JSR     START_ADDR
00001010  4EB9 0000109C             38              JSR     END_ADDR
00001016  43F9 0000406E             39              LEA     ENDLINE_M,A1           * Add a new line
0000101C  103C 000E                 40              MOVE.B  #14, D0                  * Display A1
00001020  4E4F                      41              TRAP    #15
00001022                            42              
00001022  4EF9 0000125A             43              JMP     MAIN
00001028                            44              
00001028                            45  *---------------------------------------------------------------------------*
00001028                            46  * INTRO: Display the introduction of the program
00001028                            47  *---------------------------------------------------------------------------*
00001028  43F9 00003B8C             48  INTRO       LEA     WELCOME,A1              * Load PROMPT_START
0000102E  103C 000E                 49              MOVE.B  #14,D0                  * Display A1
00001032  4E4F                      50              TRAP    #15
00001034  4E75                      51              RTS
00001036                            52  TESTING     
00001036  B683                      53             CMP.L  D3,D3
00001038  B693                      54              CMP.L  (A3),D3
0000103A  B89C                      55              CMP.L  (A4)+,D4
0000103C  BAA5                      56              CMP.L  -(A5),D5
0000103E  BCB8 3331                 57              CMP.L  $3331,D6
00001042  BEB9 44444441             58              CMP.L  $44444441,D7
00001048                            59         
00001048                            60  
00001048                            61  
00001048                            62  
00001048                            63  
00001048  4E75                      64              RTS
0000104A                            65  *---------------------------------------------------------------------------*
0000104A                            66  * START_ADDR: Compute the starting address
0000104A                            67  *---------------------------------------------------------------------------*
0000104A                            68  START_ADDR
0000104A                            69              * Output
0000104A  43F9 00003E61             70              LEA     PROMPT_START,A1         * Load PROMPT_START 
00001050  103C 000E                 71              MOVE.B  #14,D0                  * Display PROMPT_START
00001054  4E4F                      72              TRAP    #15
00001056                            73      
00001056                            74              * Input
00001056  43F9 00003FC6             75              LEA     VR_S_ADDR,A1            * Load VR_S_ADDR
0000105C  103C 0002                 76              MOVE.B  #2,D0                   * Ask user for input
00001060  4E4F                      77              TRAP    #15
00001062                            78              
00001062                            79              * Error Checking (length)
00001062  0C01 0000                 80              CMPI.B  #0, D1                  * Check if input length <= 0
00001066  6F00 0098                 81              BLE     ERROR_1
0000106A  0C01 0008                 82              CMPI.B  #8, D1                  * Check if input length > 8
0000106E  6E00 0090                 83              BGT     ERROR_1
00001072                            84              
00001072                            85              * Conversion & Storage
00001072  4EB9 00001150             86              JSR     ASCII2HEX               * Jump to ASCII2HEX
00001078  0C07 0001                 87              CMPI.B  #1, D7                  * Check for error
0000107C  6700 0082                 88              BEQ     ERROR_1                 
00001080  23C1 00004066             89              MOVE.L  D1, S_ADDR_HX           * Move the result to S_ADDR_HX 
00001086                            90              
00001086                            91              * Error Checking (Odd)
00001086  43F9 00004066             92              LEA     S_ADDR_HX, A1           * Load 'S_ADDR_HX' for odd error
0000108C  4EB9 0000123E             93              JSR     IS_ODD                  * Check if the input address is odd
00001092  0C07 0001                 94              CMPI.B  #1, D7                  * Check for error
00001096  6700 0088                 95              BEQ     ERROR_3
0000109A                            96              
0000109A                            97              * Return
0000109A  4E75                      98              RTS     
0000109C                            99  *---------------------------------------------------------------------------*
0000109C                           100  * END_ADDR: Compute the ending address
0000109C                           101  *---------------------------------------------------------------------------*
0000109C                           102  END_ADDR
0000109C                           103              * Output
0000109C  43F9 00003E90            104              LEA     PROMPT_END,A1           * Load PROMPT_END
000010A2  103C 000E                105              MOVE.B  #14,D0                  * Display PROMPT_END
000010A6  4E4F                     106              TRAP    #15
000010A8                           107  
000010A8                           108              * Input
000010A8  43F9 00004016            109              LEA     VR_E_ADDR,A1            * Load VR_E_ADDR
000010AE  103C 0002                110              MOVE.B  #2,D0                   * Ask user for input
000010B2  4E4F                     111              TRAP    #15
000010B4                           112              
000010B4                           113              * Error Checking (length)
000010B4  0C01 0000                114              CMPI.B  #0, D1                  * Check if input length <= 0
000010B8  6F00 0056                115              BLE     ERROR_2
000010BC  0C01 0008                116              CMPI.B  #8, D1                  * Check if input length > 8
000010C0  6E00 004E                117              BGT     ERROR_2
000010C4                           118              
000010C4                           119              * Conversion & Storage
000010C4  4EB9 00001150            120              JSR     ASCII2HEX               * Jump to ASCII2HEX
000010CA  0C07 0001                121              CMPI.B  #1, D7                  * Check for error
000010CE  6700 0040                122              BEQ     ERROR_2
000010D2  23C1 0000406A            123              MOVE.L  D1, E_ADDR_HX           * Move the result to E_ADDR_HX
000010D8                           124              
000010D8                           125              * Error Checking (start > end case)
000010D8  2439 00004066            126              MOVE.L  S_ADDR_HX, D2           * Move the starting address to D2
000010DE  B282                     127              CMP.L   D2, D1                  * Compare starting and ending address
000010E0  6300 005E                128              BLS     ERROR_5                 * Go to ERROR_5 if ending < starting
000010E4                           129              
000010E4                           130              * Error Checking (Odd case)
000010E4  43F9 0000406A            131              LEA     E_ADDR_HX, A1           * Move the ending address
000010EA  4EB9 0000123E            132              JSR     IS_ODD                  * Go to IS_ODD for odd address checking
000010F0  0C07 0001                133              CMPI.B  #1, D7                  * Check for an error flag
000010F4  6700 003A                134              BEQ     ERROR_4
000010F8                           135              
000010F8                           136              * Inputs are valid
000010F8  2A79 00004066            137              MOVE.L  S_ADDR_HX, A5           * Store the valid input in A5
000010FE                           138              
000010FE  4E75                     139              RTS
00001100                           140              
00001100                           141  *---------------------------------------------------------------------------*
00001100                           142  * ERROR_1: Address error (Invalid starting address)
00001100                           143  *---------------------------------------------------------------------------*
00001100                           144  ERROR_1
00001100  43F9 00003F55            145              LEA     ERRMSG_1, A1            * Load ERRMSG_1
00001106  103C 000E                146              MOVE.B  #14, D0                 * Display ERRMSG_1
0000110A  4E4F                     147              TRAP    #15
0000110C  4EF8 104A                148              JMP     START_ADDR              * Jump to START_ADDR
00001110                           149      
00001110                           150  *---------------------------------------------------------------------------*
00001110                           151  * ERROR_2: Address error (Invalid ending address)
00001110                           152  *---------------------------------------------------------------------------*
00001110                           153  ERROR_2
00001110  43F9 00003F55            154              LEA     ERRMSG_1, A1            * Load ERRMSG_1
00001116  103C 000E                155              MOVE.B  #14, D0                 * Display ERRMSG_1
0000111A  4E4F                     156              TRAP    #15
0000111C  4EF8 109C                157              JMP     END_ADDR                * Jump to END_ADDR
00001120                           158  
00001120                           159  *---------------------------------------------------------------------------*
00001120                           160  * ERROR_3: Address error (Odd starting address)
00001120                           161  *---------------------------------------------------------------------------*
00001120                           162  ERROR_3
00001120  43F9 00003F74            163              LEA     ERRMSG_3, A1
00001126  103C 000E                164              MOVE.B  #14, D0
0000112A  4E4F                     165              TRAP    #15
0000112C  4EF8 104A                166              JMP     START_ADDR
00001130                           167     
00001130                           168  *---------------------------------------------------------------------------*
00001130                           169  * ERROR_4: Address error (Odd ending address)
00001130                           170  *---------------------------------------------------------------------------*         
00001130                           171  ERROR_4
00001130  43F9 00003F74            172              LEA     ERRMSG_3, A1
00001136  103C 000E                173              MOVE.B  #14, D0
0000113A  4E4F                     174              TRAP    #15
0000113C  4EF8 109C                175              JMP     END_ADDR
00001140                           176            
00001140                           177  *---------------------------------------------------------------------------*
00001140                           178  * ERROR_3: Address error (Ending address is less than starting address)
00001140                           179  *---------------------------------------------------------------------------*
00001140                           180  ERROR_5
00001140  43F9 00003F99            181              LEA     ERRMSG_5, A1
00001146  103C 000E                182              MOVE.B  #14, D0
0000114A  4E4F                     183              TRAP    #15
0000114C  4EF8 109C                184              JMP     END_ADDR
00001150                           185    
00001150                           186  *---------------------------------------------------------------------------*
00001150                           187  * ASCII2HEX: Convert ASCii to Hexadecimal
00001150                           188  * Reserved registers: A1 = Source, D1 = Destination, D2 = Byte, D7 = Error
00001150                           189  *---------------------------------------------------------------------------*
00001150  4281                     190  ASCII2HEX   CLR.L   D1                      * Clear the destination 
00001152  4287                     191              CLR.L   D7                      * Set the error flag to 0
00001154  4282                     192              CLR.L   D2                      * Clear D2 for temp storage
00001156                           193              
00001156  1419                     194  ASC2HXLP    MOVE.B  (A1)+, D2               * Read a byte to D2
00001158  0C02 0000                195              CMPI.B  #0, D2                  * Check for NULL (indicates the end of source)
0000115C  6700 0058                196              BEQ     RETURN                  * If it's NULL, go to return
00001160  0C02 0066                197              CMPI.B  #102, D2                * Decimal ASCII value of f is 102
00001164  6E00 004C                198              BGT     ASC_ERR                 * ASCII > f (invalid input) 
00001168  0C02 0061                199              CMPI.B  #97, D2                 * Decimal ASCII value of a is 97
0000116C  6C00 0026                200              BGE     ASC_LOW                 * ASCII >= a (valid input)
00001170  0C02 0046                201              CMPI.B  #70, D2                 * Decimal ASCII value of F is 70
00001174  6E00 003C                202              BGT     ASC_ERR                 * ASCII > F (invalid input)
00001178  0C02 0041                203              CMPI.B  #65, D2                 * Decimal ASCII value of A is 65
0000117C  6C00 001E                204              BGE     ASC_UPP                 * ASCII >= A (valid input)
00001180  0C02 0039                205              CMPI.B  #57, D2                 * Decimal value of 9 is 57
00001184  6E00 002C                206              BGT     ASC_ERR                 * ASCII > 9 (invalid input)
00001188  0C02 0030                207              CMPI.B  #48, D2                 * Decimal ASCII value of 0 is 48
0000118C  6C00 0016                208              BGE     ASC_NUM                 * ASCII >= 0 (valid input)
00001190  6000 0020                209              BRA     ASC_ERR                 * Invalid input
00001194                           210  
00001194  0442 0057                211  ASC_LOW     SUBI    #87, D2                 * Convert the ASCII input to Hex
00001198  6000 0012                212              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
0000119C                           213              
0000119C  0442 0037                214  ASC_UPP     SUBI    #55, D2                 * Convert the ASCII input to Hex
000011A0  6000 000A                215              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011A4                           216              
000011A4  0442 0030                217  ASC_NUM     SUBI    #48, D2                 * Convert the ASCII input to Hex
000011A8  6000 0002                218              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011AC                           219              
000011AC  E981                     220  ASC_SFT     ASL.L   #4, D1                  * Shift the dest to left by 4 bits
000011AE  D202                     221              ADD.B   D2, D1                  * Add the converted input to D1
000011B0  60A4                     222              BRA     ASC2HXLP                * Loop
000011B2                           223  
000011B2  1E3C 0001                224  ASC_ERR     MOVE.B  #1, D7                  * Set the error flag to 1            
000011B6  4E75                     225  RETURN      RTS     
000011B8                           226  
000011B8                           227  *---------------------------------------------------------------------------*
000011B8                           228  * HEX2ASCII: Convert Hexadecimal to ASCii 
000011B8                           229  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
000011B8                           230  *---------------------------------------------------------------------------*
000011B8  0C02 0008                231  HEX2ASCII   CMPI.B  #8, D2                  * Check to see if the size is long
000011BC  6700 000E                232              BEQ     HEX_LOOP
000011C0  4841                     233              SWAP    D1
000011C2  0C02 0002                234              CMPI.B  #2,D2
000011C6  6600 0004                235              BNE     HEX_LOOP
000011CA  E189                     236              LSL.L   #8,D1
000011CC                           237             
000011CC  E999                     238  HEX_LOOP    ROL.L   #4, D1                  * Roll D1 to left
000011CE  2601                     239              MOVE.L  D1, D3                  * Move D1 to D3
000011D0  0283 0000000F            240              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
000011D6  0C03 0009                241              CMPI.B  #9, D3                  * Compare te digit
000011DA  6E00 000A                242              BGT     HEX_CHAR              
000011DE  0603 0030                243              ADDI.B  #48,D3                  * Add 48 for numerical output
000011E2  6000 0006                244              BRA     HEX_CONT
000011E6                           245              
000011E6  0603 0037                246  HEX_CHAR    ADDI.B  #55,D3                  * Add 55 for character output
000011EA                           247  
000011EA  12C3                     248  HEX_CONT    MOVE.B  D3, (A1)+               * Place into A1
000011EC  5342                     249              SUBI    #1, D2                  * Decrement the size
000011EE  0C02 0000                250              CMPI.B  #0, D2                  * Check if D2 is 0
000011F2  66D8                     251              BNE     HEX_LOOP                * Loop
000011F4  12BC 0000                252              MOVE.B  #$0,(A1)                * Null terminator
000011F8  4E75                     253              RTS
000011FA                           254  *---------------------------------------------------------------------------*
000011FA                           255  * HEX2ASCII2STACK: Convert Hexadecimal to ASCii 
000011FA                           256  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
000011FA                           257  *---------------------------------------------------------------------------*
000011FA                           258  HEX2ASCII2STACK
000011FA  0C02 0008                259              CMPI.B  #8, D2                  * Check to see if the size is long
000011FE  6700 000E                260              BEQ     STACK_HEX_LOOP
00001202  4841                     261              SWAP    D1
00001204  0C02 0002                262              CMPI.B  #2,D2
00001208  6600 0004                263              BNE     STACK_HEX_LOOP
0000120C  E189                     264              LSL.L   #8,D1
0000120E                           265             
0000120E                           266  STACK_HEX_LOOP    
0000120E  E999                     267              ROL.L   #4, D1                  * Roll D1 to left
00001210  2601                     268              MOVE.L  D1, D3                  * Move D1 to D3
00001212  0283 0000000F            269              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
00001218  0C03 0009                270              CMPI.B  #9, D3                  * Compare te digit
0000121C  6E00 000A                271              BGT     STACK_HEX_CHAR              
00001220  0603 0030                272              ADDI.B  #48,D3                  * Add 48 for numerical output
00001224  6000 0006                273              BRA     STACK_HEX_CONT
00001228                           274              
00001228                           275  STACK_HEX_CHAR    
00001228  0603 0037                276              ADDI.B  #55,D3                  * Add 55 for character output
0000122C                           277  
0000122C                           278  STACK_HEX_CONT    
0000122C  6100 28CE                279              BSR     PUSH_STACK              *PLACE INTO STACK
00001230  5342                     280              SUBI    #1, D2                  * Decrement the size
00001232  0C02 0000                281              CMPI.B  #0, D2                  * Check if D2 is 0
00001236  66D6                     282              BNE     STACK_HEX_LOOP                * Loop
00001238  12BC 0000                283              MOVE.B  #$0,(A1)                * Null terminator
0000123C  4E75                     284              RTS
0000123E                           285  
0000123E                           286  
0000123E                           287  *---------------------------------------------------------------------------*
0000123E                           288  * IS_ODD: Check whether the source address is odd
0000123E                           289  * Reserved registers: A1 = Source, D1 = Result, D7 = error flag
0000123E                           290  *---------------------------------------------------------------------------*
0000123E  4281                     291  IS_ODD      CLR.L   D1                      * Clear the result
00001240  4287                     292              CLR.L   D7                      * Set the error flag to 0
00001242  2211                     293              MOVE.L  (A1),D1                * Temp store the checking address to D1
00001244  82FC 0002                294              DIVU    #2, D1                  * Divide the result by 2
00001248  4841                     295              SWAP    D1                      * Swap remainder with quotient
0000124A  0C01 0001                296              CMPI.B  #1, D1                  * Check for error
0000124E  6700 0004                297              BEQ     IS_ODD_ERR
00001252  4E75                     298              RTS
00001254                           299              
00001254  1E3C 0001                300  IS_ODD_ERR  MOVE.B  #1, D7
00001258  4E75                     301              RTS
0000125A                           302  
0000125A                           303  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*
0000125A                           304  * MAIN                    
0000125A                           305  * A2: STACK POINTER                                                      MAIN                                                                        MAIN
0000125A                           306  * A5: Processing address
0000125A                           307  *
0000125A                           308  * D3: USED FOR PUSHING INTO STACK
0000125A                           309  *     To push into stack => MOVE.W #DATA,D3 
0000125A                           310  *                           BSR    PUSH_STACK
0000125A                           311  *     To print stack     => BSR    PRINT_STACK 
0000125A                           312  *     To clear stack     => BSR    CLEAR_STACK
0000125A                           313  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*  
0000125A                           314  MAIN        
0000125A                           315              *initialize stack pointer
0000125A  33FC 0000 0000441E       316              MOVE.W  #0,COUNTER
00001262  347C 7000                317              MOVEA.W #STACK,A2
00001266  163C 0020                318              MOVE.B  #' ',D3
0000126A  6100 2890                319              BSR     PUSH_STACK
0000126E  6100 288C                320              BSR     PUSH_STACK
00001272  6100 2888                321              BSR     PUSH_STACK
00001276                           322              
00001276                           323              * clear registers for temp storage
00001276  4280                     324              CLR.L   D0                   
00001278  4281                     325              CLR.L   D1                   
0000127A  227C 00000000            326              MOVEA.L #0, A1                
00001280                           327              
00001280  220D                     328              MOVE.L  A5,D1                   * check to see if the address is fully read
00001282  23CD 00004066            329              MOVE.L  A5,S_ADDR_HX
00001288  B2B9 0000406A            330              CMP.L   E_ADDR_HX,D1
0000128E  6C00 1F8C                331              BGE     REPEAT                  * go to repeat for user action
00001292                           332  
00001292  43F9 000040C1            333              LEA     TMPOUTPUT,A1            * allocate storage to hold output
00001298  143C 0008                334              MOVE.B  #8,D2                   * set the output size
0000129C  4EB8 11B8                335              JSR     HEX2ASCII               
000012A0  43F9 000040C1            336              LEA     TMPOUTPUT,A1
000012A6  103C 000E                337              MOVE.B  #14,D0
000012AA  4E4F                     338              TRAP    #15
000012AC                           339              
000012AC  4285                     340              CLR.L    D5                      * clear the processing data
000012AE  3A1D                     341              MOVE.W  (A5)+,D5                 * copy the currently processing data in A5 over to D5
000012B0                           342                                               * advance the current instruction pointer to the next
000012B0                           343                                               * instruction in memory
000012B0                           344  *----------------------------------------*
000012B0                           345  * Registers          
000012B0                           346  * [D1] - COPY OF D5
000012B0                           347  * [D5] - DATA TO BE PROCESSED
000012B0                           348  * [D6] - COUNTER FOR LINES PROCESSED
000012B0                           349  *
000012B0                           350  * [D4]      - ERROR FLAG BEFORE PRINTING
000012B0                           351  * [STACK]   - PRINTS PROCESS DATA
000012B0                           352  * [COUNTER] - KEEPS TRACK OF STACK INCREMENT
000012B0                           353  *
000012B0                           354  * [A1] - USED FOR JUMPING/PRINTING
000012B0                           355  *
000012B0                           356  *----------------------------------------*
000012B0                           357  
000012B0                           358              
000012B0                           359              *Processing the first 4 most significant bits 
000012B0  2205                     360              MOVE.L  D5,D1                    * copy the current processing data to D1
000012B2  143C 000C                361              MOVE.B  #12,D2                   * shift to right by 12 bits
000012B6  E469                     362              LSR.W   D2,D1                    * [D2] Temporarily used D2 for shifting bits
000012B8  C2FC 0006                363              MULU    #6,D1                    * form offset
000012BC  43F9 0000132A            364              LEA     JMPTABLE,A1              * index into table
000012C2  4EB1 1000                365              JSR     0(A1,D1)                 * jump indirect with index
000012C6                           366              
000012C6                           367              *SECURED EA*
000012C6  B83C 0001                368              CMP.B   #1,D4                    * ERROR FLAG CHECK [ERROR WHEN D4 == 1]
000012CA  6600 0012                369              BNE     OUTPUT_PROCESSED_DATA    * PRINTS PROCESSED OP-CODE & EA
000012CE  6100 01E8                370              BSR     OP_DATA                  * PRINT ERROR MESSAGE "DATA"
000012D2  6100 2894                371              BSR     CLEAR_STACK              * CLEARS THE STACK 
000012D6  183C 0000                372              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
000012DA  6000 0022                373              BRA     DISPLAY_30_LINES         * GO TO LAST STEP
000012DE                           374             
000012DE                           375  OUTPUT_PROCESSED_DATA       
000012DE  163C 000D                376              MOVE.B  #$D,D3                  *carriage return
000012E2  6100 2818                377              BSR     PUSH_STACK
000012E6  163C 000A                378              MOVE.B  #$A,D3                  *new line feed
000012EA  6100 2810                379              BSR     PUSH_STACK
000012EE  163C 0000                380              MOVE.B  #$0,D3                  *null
000012F2  6100 2808                381              BSR     PUSH_STACK
000012F6                           382       
000012F6  6100 27E0                383              BSR     PRINT_QUEUE
000012FA  183C 0000                384              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
000012FE                           385  DISPLAY_30_LINES
000012FE                           386              * display 30 lines per page
000012FE  5206                     387              ADDI.B  #1,D6
00001300  0C06 001E                388              CMPI.B  #30,D6
00001304  6C00 0006                389              BGE     NEXTLINES
00001308  6000 FF50                390              BRA     MAIN
0000130C                           391            
0000130C                           392  *---------------------------------------------------------------------------*
0000130C                           393  * NEXTLINES: receive input from user to print the next 30 lines
0000130C                           394  *---------------------------------------------------------------------------*  
0000130C  4206                     395  NEXTLINES   CLR.B   D6
0000130E  43F9 00003EBD            396              LEA     DISP_NEXT,A1
00001314  103C 000E                397              MOVE.B  #14,D0
00001318  4E4F                     398              TRAP    #15
0000131A  43F9 00004071            399              LEA     TMPINPUT,A1
00001320  103C 0002                400              MOVE.B  #2,D0
00001324  4E4F                     401              TRAP    #15
00001326  4EF8 125A                402              JMP     MAIN
0000132A                           403    
0000132A                           404  *---------------------------------------------------------------------------*
0000132A                           405  * JMPTABLE: OP code jump/branch table used to decode and display opcodes
0000132A                           406  *---------------------------------------------------------------------------*  
0000132A  4EF9 0000138A            407  JMPTABLE    JMP     OP0000  * CMPI/ORI/BTST/EORI/SUBI/BTST
00001330  4EF9 000015B0            408              JMP     OP0001  * MOVE.B                                        *FINISHED - JOSEPH
00001336  4EF9 0000161E            409              JMP     OP0010  * MOVE.L/MOVEA.L                                *FINISHED - JOSEPH
0000133C  4EF9 0000171C            410              JMP     OP0011  * MOVE.W/MOVEA.W                                *FINISHED - JOSEPH
00001342  4EF9 00001818            411              JMP     OP0100  * MOVEM/LEA/NEG/NOT/JSR/RTS                     *FINISHED - JOSEPH
00001348  4EF9 00001A6E            412              JMP     OP0101  * ADDQ                                          *FINISHED - JOSEPH
0000134E  4EF9 00001C12            413              JMP     OP0110  * BRA/Bcc (BEQ/BNE/BLT/BHI)                     *NOT FINISHED - LYN
00001354  4EF9 00001CA0            414              JMP     OP0111  * MOVEQ (unassigned)                            *FINISHED - NEVER ASSIGNED
0000135A  4EF9 00001CA4            415              JMP     OP1000  * DIVS                                          *FINISHED - JOSEPH
00001360  4EF9 00001DAC            416              JMP     OP1001  * SUB/SUBA                                      *FINISHED - JOSEPH
00001366  4EF9 00002168            417              JMP     OP1010  * Unassigned                                    *FINISHED - NEVER ASSIGNED
0000136C  4EF9 0000216C            418              JMP     OP1011  * CMP/EOR/CMPA                                  *FINISHED - EOR - JOSEPH
00001372  4EF9 000023CE            419              JMP     OP1100  * MULS/AND                                      *FINISHED - JOSEPH
00001378  4EF9 00002720            420              JMP     OP1101  * ADD/ADDA                                      *FINISHED - JOSEPH
0000137E  4EF9 00002AFC            421              JMP     OP1110  * LSR/LSL/ASR/ASL/ROL/ROR
00001384  4EF9 00002DAA            422              JMP     OP1111  * Special/Reserved
0000138A                           423              
0000138A                           424  *---------------------------------------------------------------------------*
0000138A                           425  * OP0000: decode CMPI/ORI/BTST/SUBI/EORI
0000138A                           426  *---------------------------------------------------------------------------*           
0000138A                           427  OP0000                                                                                  
0000138A  4281                     428              CLR.L   D1          * to temporarily store the address to process
0000138C  4280                     429              CLR.L   D0  
0000138E  4284                     430              CLR.L   D4                 
00001390  227C 00000000            431              MOVEA.L #0, A1                
00001396                           432              * Check for ORI (0000 0000 xx (size) xxx (EA mode) xxx(EA reg)
00001396                           433              * Check if bit 11,10,9,8 are 0000)
00001396  2205                     434              MOVE.L  D5,D1
00001398  0281 00000F00            435              ANDI.L  #$0F00,D1
0000139E  0C81 00000000            436              CMPI.L  #$0000,D1   * if they are 0000, it is ORI
000013A4  6700 01B4                437              BEQ     OP_ORI
000013A8                           438  
000013A8                           439              * check for CMPI (0000 1100 xx (size) xxx (EA mode) xxx (EA reg)
000013A8                           440              * check if bit 11,10,9,8 are 1100
000013A8  4281                     441              CLR.L   D1
000013AA  2205                     442              MOVE.L  D5,D1
000013AC  0281 00000F00            443              ANDI.L  #$0F00,D1
000013B2  0C81 00000C00            444              CMPI.L  #$0C00,D1
000013B8  6700 014A                445              BEQ     OP_CMPI
000013BC                           446              
000013BC                           447              * check for SUBI
000013BC  4281                     448              CLR.L   D1
000013BE  2205                     449              MOVE.L  D5,D1
000013C0  0281 00000F00            450              ANDI.L  #$0F00,D1
000013C6  0C81 00000400            451              CMPI.L  #$0400,D1
000013CC  6700 0094                452              BEQ     OP_SUBI
000013D0                           453              
000013D0                           454              * check for EORI
000013D0  4281                     455              CLR.L   D1
000013D2  2205                     456              MOVE.L  D5,D1
000013D4  0281 00000F00            457              ANDI.L  #$0F00,D1
000013DA  0C81 00000A00            458              CMPI.L  #$0A00,D1
000013E0  6700 002A                459              BEQ     OP_EORI
000013E4                           460              
000013E4                           461              * check for BTST
000013E4  4281                     462              CLR.L   D1
000013E6  2205                     463              MOVE.L  D5,D1
000013E8  EA99                     464              ROR.L   #5,D1
000013EA  0281 00000008            465              ANDI.L  #$8,D1
000013F0  0C01 0008                466              CMPI.B  #8,D1
000013F4  6700 0008                467              BEQ     OP_BTST
000013F8                           468  
000013F8                           469              * OP0000 series other than ORI/CMPI/BTST/EORI
000013F8  4EF9 000014B8            470              JMP     OP_DATA
000013FE                           471              
000013FE                           472  *---------------------------------------------------------------------------*
000013FE                           473  * OP_BTST: display BTST
000013FE                           474  *---------------------------------------------------------------------------* 
000013FE  43F9 0000414A            475  OP_BTST     LEA     DISP_BTST,A1
00001404  103C 000E                476              MOVE.B  #14,D0
00001408  4E4F                     477              TRAP    #15
0000140A  4E75                     478              RTS
0000140C                           479  
0000140C                           480  *---------------------------------------------------------------------------*
0000140C                           481  * OP_EORI: decode and display EORI
0000140C                           482  *---------------------------------------------------------------------------* 
0000140C                           483  OP_EORI
0000140C  4281                     484              CLR.L   D1
0000140E  4284                     485              CLR.L   D4
00001410  2205                     486              MOVE.L  D5,D1
00001412  EC99                     487              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001414  0C01 0000                488              CMPI.B  #0,D1
00001418  6700 0012                489              BEQ     OP_EORI_B    * size is byte
0000141C  0C01 0001                490              CMPI.B  #1,D1
00001420  6700 001C                491              BEQ     OP_EORI_W    * size is word
00001424  0C01 0002                492              CMPI.B  #2,D1
00001428  6700 0026                493              BEQ     OP_EORI_L    * size is long
0000142C                           494  
0000142C                           495  OP_EORI_B    * size is byte    
0000142C  183C 0000                496              MOVE.B  #0,D4
00001430  43F9 0000412C            497              LEA     DISP_EORI_B,A1
00001436  103C 000E                498              MOVE.B  #14,D0
0000143A  4E4F                     499              TRAP    #15
0000143C  4E75                     500              RTS
0000143E                           501              
0000143E                           502  OP_EORI_W    * size is word
0000143E  183C 0001                503              MOVE.B  #1,D4
00001442  43F9 00004136            504              LEA     DISP_EORI_W,A1
00001448  103C 000E                505              MOVE.B  #14,D0
0000144C  4E4F                     506              TRAP    #15
0000144E  4E75                     507              RTS
00001450                           508              
00001450                           509  OP_EORI_L    * size is long
00001450  183C 0002                510              MOVE.B  #2,D4
00001454  43F9 00004140            511              LEA     DISP_EORI_L,A1
0000145A  103C 000E                512              MOVE.B  #14,D0
0000145E  4E4F                     513              TRAP    #15
00001460  4E75                     514              RTS
00001462                           515              
00001462                           516  *---------------------------------------------------------------------------*
00001462                           517  * OP_SUBI: decode SUBI.B/.W/.L
00001462                           518  *---------------------------------------------------------------------------* 
00001462                           519  OP_SUBI
00001462  4281                     520              CLR.L   D1
00001464  4284                     521              CLR.L   D4
00001466  2205                     522              MOVE.L  D5,D1
00001468  EC99                     523              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
0000146A  0C01 0000                524              CMPI.B  #0,D1
0000146E  6700 0012                525              BEQ     OP_SUBI_B    * size is byte
00001472  0C01 0001                526              CMPI.B  #1,D1
00001476  6700 001C                527              BEQ     OP_SUBI_W    * size is word
0000147A  0C01 0002                528              CMPI.B  #2,D1
0000147E  6700 0026                529              BEQ     OP_SUBI_L    * size is long
00001482                           530  
00001482                           531  OP_SUBI_B    * size is byte    
00001482  183C 0000                532              MOVE.B  #0,D4
00001486  43F9 00004238            533              LEA     DISP_SUBI_B,A1
0000148C  103C 000E                534              MOVE.B  #14,D0
00001490  4E4F                     535              TRAP    #15
00001492  4E75                     536              RTS
00001494                           537              
00001494                           538  OP_SUBI_W    * size is word
00001494  183C 0001                539              MOVE.B  #1,D4
00001498  43F9 00004242            540              LEA     DISP_SUBI_W,A1
0000149E  103C 000E                541              MOVE.B  #14,D0
000014A2  4E4F                     542              TRAP    #15
000014A4  4E75                     543              RTS
000014A6                           544              
000014A6                           545  OP_SUBI_L    * size is long
000014A6  183C 0002                546              MOVE.B  #2,D4
000014AA  43F9 0000424C            547              LEA     DISP_SUBI_L,A1
000014B0  103C 000E                548              MOVE.B  #14,D0
000014B4  4E4F                     549              TRAP    #15
000014B6  4E75                     550              RTS
000014B8                           551              
000014B8                           552  *---------------------------------------------------------------------------*
000014B8                           553  * OP_DATA : unidentified opcode
000014B8                           554  *---------------------------------------------------------------------------* 
000014B8                           555  OP_DATA
000014B8  4280                     556              CLR.L   D0                   
000014BA  4281                     557              CLR.L   D1     
000014BC  4284                     558              CLR.L   D4                    
000014BE  227C 00000000            559              MOVEA.L #0, A1             
000014C4  4287                     560              CLR.L   D7
000014C6  1E3C 0001                561              MOVE.B  #1,D7                   * error flag is true
000014CA                           562              
000014CA  43F9 00004170            563              LEA     DISP_DATA,A1
000014D0  103C 000E                564              MOVE.B  #14,D0
000014D4  4E4F                     565              TRAP    #15
000014D6                           566              
000014D6  4EF9 000014DC            567              JMP     EA_DATA
000014DC                           568             
000014DC                           569             
000014DC                           570  *---------------------------------------------------------------------------*
000014DC                           571  * EA_DATA
000014DC                           572  *---------------------------------------------------------------------------*       
000014DC  43F9 000040C1            573  EA_DATA     LEA     TMPOUTPUT,A1    * load the temporarily stored output address
000014E2  2205                     574              MOVE.L  D5,D1           * transfer the processing data to D1
000014E4  7404                     575              MOVE.L  #4,D2           * set to word size
000014E6  4EB8 11B8                576              JSR     HEX2ASCII       * prepare output in ascii
000014EA  43F9 000043E3            577              LEA     DISP_HEX,A1     * display $ symbol
000014F0  103C 000E                578              MOVE.B  #14,D0      
000014F4  4E4F                     579              TRAP    #15
000014F6  43F9 000040C1            580              LEA     TMPOUTPUT,A1    * display with a new line
000014FC  103C 000D                581              MOVE.B  #13,D0
00001500  4E4F                     582              TRAP    #15
00001502                           583  
00001502  4E75                     584              RTS
00001504                           585              
00001504                           586  *---------------------------------------------------------------------------*
00001504                           587  * OP_CMPI : decode CMPI and its size
00001504                           588  *---------------------------------------------------------------------------*          
00001504                           589  OP_CMPI
00001504  4281                     590              CLR.L   D1
00001506  4284                     591              CLR.L   D4
00001508  2205                     592              MOVE.L  D5,D1
0000150A  EC99                     593              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
0000150C  0C01 0000                594              CMPI.B  #0,D1
00001510  6700 0012                595              BEQ     OP_CMPI_B    * size is byte
00001514  0C01 0001                596              CMPI.B  #1,D1
00001518  6700 001C                597              BEQ     OP_CMPI_W    * size is word
0000151C  0C01 0002                598              CMPI.B  #2,D1
00001520  6700 0026                599              BEQ     OP_CMPI_L    * size is long
00001524                           600  
00001524                           601  OP_CMPI_B    * size is byte    
00001524  183C 0000                602              MOVE.B  #0,D4
00001528  43F9 00004152            603              LEA     DISP_CMPI_B,A1
0000152E  103C 000E                604              MOVE.B  #14,D0
00001532  4E4F                     605              TRAP    #15
00001534  4E75                     606              RTS
00001536                           607              
00001536                           608  OP_CMPI_W    * size is word
00001536  183C 0001                609              MOVE.B  #1,D4
0000153A  43F9 0000415C            610              LEA     DISP_CMPI_W,A1
00001540  103C 000E                611              MOVE.B  #14,D0
00001544  4E4F                     612              TRAP    #15
00001546  4E75                     613              RTS
00001548                           614              
00001548                           615  OP_CMPI_L    * size is long
00001548  183C 0002                616              MOVE.B  #2,D4
0000154C  43F9 00004166            617              LEA     DISP_CMPI_L,A1
00001552  103C 000E                618              MOVE.B  #14,D0
00001556  4E4F                     619              TRAP    #15
00001558  4E75                     620              RTS
0000155A                           621   
0000155A                           622  *---------------------------------------------------------------------------*
0000155A                           623  * OP_ORI : decode ORI and its size
0000155A                           624  *---------------------------------------------------------------------------* 
0000155A                           625  OP_ORI      
0000155A  4281                     626              CLR.L   D1
0000155C  4284                     627              CLR.L   D4
0000155E  2205                     628              MOVE.L  D5,D1
00001560  EC99                     629              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001562  0C01 0000                630              CMPI.B  #0,D1
00001566  6700 0012                631              BEQ     OP_ORI_B    * size is byte
0000156A  0C01 0001                632              CMPI.B  #1,D1
0000156E  6700 001C                633              BEQ     OP_ORI_W    * size is word
00001572  0C01 0002                634              CMPI.B  #2,D1
00001576  6700 0026                635              BEQ     OP_ORI_L    * size is long
0000157A                           636  
0000157A                           637  OP_ORI_B    * size is byte    
0000157A  183C 0000                638              MOVE.B  #0,D4
0000157E  43F9 00004111            639              LEA     DISP_ORI_B,A1
00001584  103C 000E                640              MOVE.B  #14,D0
00001588  4E4F                     641              TRAP    #15
0000158A  4E75                     642              RTS
0000158C                           643              
0000158C                           644  OP_ORI_W    * size is word
0000158C  183C 0001                645              MOVE.B  #1,D4
00001590  43F9 0000411A            646              LEA     DISP_ORI_W,A1
00001596  103C 000E                647              MOVE.B  #14,D0
0000159A  4E4F                     648              TRAP    #15
0000159C  4E75                     649              RTS
0000159E                           650              
0000159E                           651  OP_ORI_L    * size is long
0000159E  183C 0002                652              MOVE.B  #2,D4
000015A2  43F9 00004123            653              LEA     DISP_ORI_L,A1
000015A8  103C 000E                654              MOVE.B  #14,D0
000015AC  4E4F                     655              TRAP    #15
000015AE  4E75                     656              RTS
000015B0                           657          
000015B0                           658  *---------------------------------------------------------------------------*
000015B0                           659  * OP0001: MOVE.B
000015B0                           660  *---------------------------------------------------------------------------*
000015B0                           661  OP0001      
000015B0  4EF9 000015B6            662              JMP     OP_MOVE_B   * display MOVE.B
000015B6                           663              
000015B6                           664  *---------------------------------------------------------------------------*
000015B6                           665  * OP_MOVE_B: display MOVE_B and proceed to EA
000015B6                           666  *---------------------------------------------------------------------------*
000015B6                           667  OP_MOVE_B                                                                       
000015B6                           668             
000015B6                           669             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000015B6  13FC 0082 00004422       670             MOVE.B   #$82,DEST_REGISTER_FORMAT
000015BE  13FC 0000 00004423       671             MOVE.B   #$00,SRC_REGISTER_FORMAT
000015C6                           672             
000015C6                           673             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000015C6  13FC 00B9 00004425       674             MOVE.B   #$B9,GET_DST_START_END
000015CE  13FC 0020 00004426       675             MOVE.B   #$20,GET_SRC_START_END
000015D6                           676             
000015D6                           677              *CLEAR D3
000015D6  4283                     678              CLR.L   D3
000015D8                           679              *LOAD STACK WITH THIS OPMODE
000015D8  6100 2522                680              BSR     PUSH_STACK
000015DC  163C 004D                681              MOVE.B  #'M',D3
000015E0  6100 251A                682              BSR     PUSH_STACK
000015E4  163C 004F                683              MOVE.B  #'O',D3
000015E8  6100 2512                684              BSR     PUSH_STACK
000015EC  163C 0056                685              MOVE.B  #'V',D3
000015F0  6100 250A                686              BSR     PUSH_STACK
000015F4  163C 0045                687              MOVE.B  #'E',D3
000015F8  6100 2502                688              BSR     PUSH_STACK
000015FC  163C 002E                689              MOVE.B  #'.',D3
00001600  6100 24FA                690              BSR     PUSH_STACK
00001604  163C 0042                691              MOVE.B  #'B',D3
00001608  6100 24F2                692              BSR     PUSH_STACK
0000160C                           693              
0000160C  6100 1C50                694              BSR     GET_EA_EA_SRC
00001610  163C 002C                695              MOVE.B  #',',D3
00001614  6100 24E6                696              BSR     PUSH_STACK
00001618  6100 2074                697              BSR     GET_EA_EA_DEST
0000161C                           698              
0000161C  4E75                     699              RTS
0000161E                           700              
0000161E                           701             
0000161E                           702  *---------------------------------------------------------------------------*
0000161E                           703  * OP0010: decode MOVE.L/MOVEA.L
0000161E                           704  *---------------------------------------------------------------------------*
0000161E                           705  OP0010      
0000161E  183C 0002                706              MOVE.B  #2,D4
00001622  4280                     707              CLR.L   D0                     
00001624  4281                     708              CLR.L   D1                      
00001626  227C 00000000            709              MOVEA.L #0, A1                 
0000162C                           710              
0000162C  2205                     711              MOVE.L  D5,D1
0000162E  EA99                     712              ROR.L   #5,D1
00001630  0281 0000000E            713              ANDI.L  #$E,D1
00001636  0C01 0002                714              CMPI.B  #2,D1
0000163A  6700 0070                715              BEQ     OP_MOVEA_L
0000163E                           716  
0000163E  4EF9 00001644            717              JMP     OP_MOVE_L
00001644                           718             
00001644                           719  
00001644                           720  *---------------------------------------------------------------------------*
00001644                           721  * OP_MOVE_L: display MOVE_L and proceed to EA
00001644                           722  *---------------------------------------------------------------------------*
00001644                           723  OP_MOVE_L   
00001644                           724             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001644  13FC 0082 00004422       725             MOVE.B   #$82,DEST_REGISTER_FORMAT
0000164C  13FC 0000 00004423       726             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001654                           727             
00001654                           728             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001654  13FC 00B9 00004425       729             MOVE.B   #$B9,GET_DST_START_END
0000165C  13FC 0020 00004426       730             MOVE.B   #$20,GET_SRC_START_END
00001664                           731             
00001664                           732              *CLEAR D3
00001664  4283                     733              CLR.L   D3
00001666                           734              *LOAD STACK WITH THIS OPMODE
00001666  6100 2494                735              BSR     PUSH_STACK
0000166A  163C 004D                736              MOVE.B  #'M',D3
0000166E  6100 248C                737              BSR     PUSH_STACK
00001672  163C 004F                738              MOVE.B  #'O',D3
00001676  6100 2484                739              BSR     PUSH_STACK
0000167A  163C 0056                740              MOVE.B  #'V',D3
0000167E  6100 247C                741              BSR     PUSH_STACK
00001682  163C 0045                742              MOVE.B  #'E',D3
00001686  6100 2474                743              BSR     PUSH_STACK
0000168A  163C 002E                744              MOVE.B  #'.',D3
0000168E  6100 246C                745              BSR     PUSH_STACK
00001692  163C 004C                746              MOVE.B  #'L',D3
00001696  6100 2464                747              BSR     PUSH_STACK
0000169A                           748              
0000169A  6100 1BC2                749              BSR     GET_EA_EA_SRC
0000169E  163C 002C                750              MOVE.B  #',',D3
000016A2  6100 2458                751              BSR     PUSH_STACK
000016A6  6100 1FE6                752              BSR     GET_EA_EA_DEST
000016AA                           753              
000016AA  4E75                     754              RTS
000016AC                           755  
000016AC                           756  
000016AC                           757  *---------------------------------------------------------------------------*
000016AC                           758  * OP_MOVEA_L: display MOVEA_L and proceed to EA
000016AC                           759  *---------------------------------------------------------------------------*
000016AC                           760  OP_MOVEA_L 
000016AC                           761             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000016AC  13FC 00FD 00004422       762             MOVE.B   #$FD,DEST_REGISTER_FORMAT
000016B4  13FC 0000 00004423       763             MOVE.B   #$00,SRC_REGISTER_FORMAT
000016BC                           764             
000016BC                           765             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000016BC  13FC 00B9 00004425       766             MOVE.B   #$B9,GET_DST_START_END
000016C4  13FC 0020 00004426       767             MOVE.B   #$20,GET_SRC_START_END
000016CC                           768             
000016CC                           769              *CLEAR D3
000016CC  4283                     770              CLR.L   D3
000016CE                           771              *LOAD STACK WITH THIS OPMODE
000016CE  6100 242C                772              BSR     PUSH_STACK
000016D2  163C 004D                773              MOVE.B  #'M',D3
000016D6  6100 2424                774              BSR     PUSH_STACK
000016DA  163C 004F                775              MOVE.B  #'O',D3
000016DE  6100 241C                776              BSR     PUSH_STACK
000016E2  163C 0056                777              MOVE.B  #'V',D3
000016E6  6100 2414                778              BSR     PUSH_STACK
000016EA  163C 0045                779              MOVE.B  #'E',D3
000016EE  6100 240C                780              BSR     PUSH_STACK           
000016F2  163C 0041                781              MOVE.B  #'A',D3
000016F6  6100 2404                782              BSR     PUSH_STACK
000016FA  163C 002E                783              MOVE.B  #'.',D3
000016FE  6100 23FC                784              BSR     PUSH_STACK
00001702  163C 004C                785              MOVE.B  #'L',D3
00001706  6100 23F4                786              BSR     PUSH_STACK
0000170A                           787              
0000170A  6100 1B52                788              BSR     GET_EA_EA_SRC
0000170E  163C 002C                789              MOVE.B  #',',D3
00001712  6100 23E8                790              BSR     PUSH_STACK
00001716  6100 1F76                791              BSR     GET_EA_EA_DEST
0000171A                           792              
0000171A  4E75                     793              RTS
0000171C                           794  
0000171C                           795              
0000171C                           796  *---------------------------------------------------------------------------*
0000171C                           797  * OP0011: decode MOVE.W/MOVEA.W
0000171C                           798  *---------------------------------------------------------------------------*
0000171C                           799  OP0011      
0000171C  4280                     800              CLR.L   D0                      
0000171E  4281                     801              CLR.L   D1  
00001720  4284                     802              CLR.L   D4                   
00001722  227C 00000000            803              MOVEA.L #0, A1 
00001728                           804                
00001728  2205                     805              MOVE.L  D5,D1
0000172A  EC99                     806              ROR.L   #6,D1
0000172C  0281 00000007            807              ANDI.L  #$07,D1
00001732  0C01 0001                808              CMPI.B  #1,D1
00001736  6700 0070                809              BEQ     OP_MOVEA_W
0000173A                           810              
0000173A  4EF9 00001740            811              JMP     OP_MOVE_W
00001740                           812            
00001740                           813  *---------------------------------------------------------------------------*
00001740                           814  * OP_MOVE_W: display MOVE_W and proceed to EA
00001740                           815  *---------------------------------------------------------------------------*
00001740                           816  OP_MOVE_W   
00001740                           817             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001740  13FC 0082 00004422       818             MOVE.B   #$82,DEST_REGISTER_FORMAT
00001748  13FC 0000 00004423       819             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001750                           820             
00001750                           821             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001750  13FC 00B9 00004425       822             MOVE.B   #$B9,GET_DST_START_END
00001758  13FC 0020 00004426       823             MOVE.B   #$20,GET_SRC_START_END
00001760                           824             
00001760                           825              *CLEAR D3
00001760  4283                     826              CLR.L   D3
00001762                           827              *LOAD STACK WITH THIS OPMODE
00001762  6100 2398                828              BSR     PUSH_STACK
00001766  163C 004D                829              MOVE.B  #'M',D3
0000176A  6100 2390                830              BSR     PUSH_STACK
0000176E  163C 004F                831              MOVE.B  #'O',D3
00001772  6100 2388                832              BSR     PUSH_STACK
00001776  163C 0056                833              MOVE.B  #'V',D3
0000177A  6100 2380                834              BSR     PUSH_STACK
0000177E  163C 0045                835              MOVE.B  #'E',D3
00001782  6100 2378                836              BSR     PUSH_STACK
00001786  163C 002E                837              MOVE.B  #'.',D3
0000178A  6100 2370                838              BSR     PUSH_STACK
0000178E  163C 0057                839              MOVE.B  #'W',D3
00001792  6100 2368                840              BSR     PUSH_STACK
00001796                           841              
00001796  6100 1AC6                842              BSR     GET_EA_EA_SRC
0000179A  163C 002C                843              MOVE.B  #',',D3
0000179E  6100 235C                844              BSR     PUSH_STACK
000017A2  6100 1EEA                845              BSR     GET_EA_EA_DEST
000017A6                           846              
000017A6  4E75                     847              RTS
000017A8                           848  
000017A8                           849  *---------------------------------------------------------------------------*
000017A8                           850  * OP_MOVEA_W: display MOVEA and proceed to EA
000017A8                           851  *---------------------------------------------------------------------------*
000017A8                           852  OP_MOVEA_W 
000017A8                           853             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000017A8  13FC 00FD 00004422       854             MOVE.B   #$FD,DEST_REGISTER_FORMAT
000017B0  13FC 0000 00004423       855             MOVE.B   #$00,SRC_REGISTER_FORMAT
000017B8                           856             
000017B8                           857             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000017B8  13FC 00B9 00004425       858             MOVE.B   #$B9,GET_DST_START_END
000017C0  13FC 0020 00004426       859             MOVE.B   #$20,GET_SRC_START_END
000017C8                           860             
000017C8                           861              *CLEAR D3
000017C8  4283                     862              CLR.L   D3
000017CA                           863              *LOAD STACK WITH THIS OPMODE
000017CA  6100 2330                864              BSR     PUSH_STACK
000017CE  163C 004D                865              MOVE.B  #'M',D3
000017D2  6100 2328                866              BSR     PUSH_STACK
000017D6  163C 004F                867              MOVE.B  #'O',D3
000017DA  6100 2320                868              BSR     PUSH_STACK
000017DE  163C 0056                869              MOVE.B  #'V',D3
000017E2  6100 2318                870              BSR     PUSH_STACK
000017E6  163C 0045                871              MOVE.B  #'E',D3
000017EA  6100 2310                872              BSR     PUSH_STACK           
000017EE  163C 0041                873              MOVE.B  #'A',D3
000017F2  6100 2308                874              BSR     PUSH_STACK
000017F6  163C 002E                875              MOVE.B  #'.',D3
000017FA  6100 2300                876              BSR     PUSH_STACK
000017FE  163C 0057                877              MOVE.B  #'W',D3
00001802  6100 22F8                878              BSR     PUSH_STACK
00001806                           879              
00001806  6100 1A56                880              BSR     GET_EA_EA_SRC
0000180A  163C 002C                881              MOVE.B  #',',D3
0000180E  6100 22EC                882              BSR     PUSH_STACK
00001812  6100 1E7A                883              BSR     GET_EA_EA_DEST
00001816                           884            
00001816  4E75                     885              RTS
00001818                           886  *---------------------------------------------------------------------------*
00001818                           887  * OP0100: decode MOVEM/LEA/NEG/JSR/RTS/NOT
00001818                           888  *---------------------------------------------------------------------------*
00001818                           889  OP0100
00001818  4280                     890              CLR.L   D0                      
0000181A  4281                     891              CLR.L   D1  
0000181C  4284                     892              CLR.L   D4                      
0000181E  227C 00000000            893              MOVEA.L #0, A1                  
00001824  2205                     894              MOVE.L  D5,D1  
00001826                           895              
00001826                           896              * check for RTS
00001826  0C41 4E75                897              CMPI.W  #$4E75,D1   * 0100 1110 0111 0101
0000182A  6700 0228                898              BEQ     OP_RTS
0000182E                           899              
0000182E                           900              * check for JSR     * 0100 1110 10 xxx (ea mode) xxx (ea reg)
0000182E  4281                     901              CLR.L   D1 
00001830  2205                     902              MOVE.L  D5,D1  
00001832  0241 0F00                903              ANDI.W  #$0F00,D1
00001836  0C41 0E00                904              CMPI.W  #$0E00,D1
0000183A  6700 0204                905              BEQ     OP_JSR
0000183E                           906  
0000183E                           907              * check for NEG     * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
0000183E  4281                     908              CLR.L   D1 
00001840  2205                     909              MOVE.L  D5,D1  
00001842  0241 0F00                910              ANDI.W  #$0F00,D1
00001846  0C41 0400                911              CMPI.W  #$0400,D1
0000184A  6700 00E8                912              BEQ     OP_NEG
0000184E                           913              
0000184E                           914              * check for NOT     * 0100 0110 xx (size) xxx (ea mode) xxx (ea reg)
0000184E  4281                     915              CLR.L   D1 
00001850  2205                     916              MOVE.L  D5,D1  
00001852  0241 0F00                917              ANDI.W  #$0F00,D1
00001856  0C41 0600                918              CMPI.W  #$0600,D1
0000185A  6700 015E                919              BEQ     OP_NOT
0000185E                           920              
0000185E                           921              * check for LEA     * 0100 xxx (reg) 111 xxx (ea mode) xxx (ea reg)
0000185E  4281                     922              CLR.L   D1 
00001860  2205                     923              MOVE.L  D5,D1  
00001862  EC99                     924              ROR.L   #6,D1
00001864  0281 00000007            925              ANDI.L  #7,D1
0000186A  0C81 00000007            926              CMPI.L  #7,D1
00001870  6700 0054                927              BEQ     OP_LEA
00001874                           928              
00001874                           929              * check for MOVEM   * 0100 1 x 001 x (size) xxx (ea mode) xxx (ea reg)
00001874  4281                     930              CLR.L   D1 
00001876  2205                     931              MOVE.L  D5,D1  
00001878  EB59                     932              ROL.W   #5,D1
0000187A  0C01 0001                933              CMPI.B  #1,D1
0000187E  6600 FC38                934              BNE     OP_DATA
00001882  E959                     935              ROL.W   #4,D1
00001884  0C01 0001                936              CMPI.B  #1,D1
00001888  6600 FC2E                937              BNE     OP_DATA
0000188C  E359                     938              ROL.W   #1,D1
0000188E  0C01 0000                939              CMPI.B  #0,D1
00001892  6700 000E                940              BEQ     OP_MOVEM_W
00001896  0C01 0001                941              CMPI.B  #1,D1
0000189A  6700 0018                942              BEQ     OP_MOVEM_L
0000189E  4EF8 14B8                943              JMP     OP_DATA
000018A2                           944  
000018A2                           945  *---------------------------------------------------------------------------*
000018A2                           946  * OP_MOVEM_W: display MOVEM_W
000018A2                           947  *---------------------------------------------------------------------------*    
000018A2                           948  OP_MOVEM_W  
000018A2  183C 0001                949              MOVE.B  #1,D4
000018A6  43F9 000041E1            950              LEA     DISP_MOVEM_W,A1
000018AC  103C 000E                951              MOVE.B  #14,D0
000018B0  4E4F                     952              TRAP    #15
000018B2  4E75                     953              RTS
000018B4                           954  
000018B4                           955  *---------------------------------------------------------------------------*
000018B4                           956  * OP_MOVEM_L: display MOVEM_L
000018B4                           957  *---------------------------------------------------------------------------*
000018B4                           958  OP_MOVEM_L  
000018B4  183C 0002                959              MOVE.B  #2,D4
000018B8  43F9 000041EC            960              LEA     DISP_MOVEM_L,A1
000018BE  103C 000E                961              MOVE.B  #14,D0
000018C2  4E4F                     962              TRAP    #15
000018C4  4E75                     963              RTS
000018C6                           964     
000018C6                           965  *---------------------------------------------------------------------------*
000018C6                           966  * OP_LEA: decode and display LEA
000018C6                           967  *---------------------------------------------------------------------------*
000018C6                           968  OP_LEA      
000018C6  4281                     969               CLR.L   D1       
000018C8  4284                     970              CLR.L   D4                   
000018CA  227C 00000000            971              MOVEA.L #0, A1              
000018D0  2205                     972              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
000018D2                           973              *CLEAR D3
000018D2  4283                     974              CLR.L   D3
000018D4                           975  
000018D4                           976  OP_LEA_DN_EA_OR_EA_DN 
000018D4                           977              *LOAD STACK WITH THIS OPMODE
000018D4  6100 2226                978              BSR     PUSH_STACK
000018D8  163C 004C                979              MOVE.B  #'L',D3
000018DC  6100 221E                980              BSR     PUSH_STACK
000018E0  163C 0045                981              MOVE.B  #'E',D3
000018E4  6100 2216                982              BSR     PUSH_STACK
000018E8  163C 0041                983              MOVE.B  #'A',D3
000018EC  6100 220E                984              BSR     PUSH_STACK
000018F0  2205                     985              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
000018F2                           986          
000018F2                           987  
000018F2                           988  OP_PRINT_L_LEA
000018F2                           989                          
000018F2                           990              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000018F2  13FC 0000 00004422       991              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000018FA  13FC 009B 00004423       992              MOVE.B   #$9B,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001902                           993             
00001902                           994              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001902  13FC 00B9 00004425       995              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000190A  13FC 0020 00004426       996              MOVE.B   #$20,GET_SRC_START_END
00001912                           997  
00001912                           998              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001912  0285 0000FE3F            999              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001918  0685 00000040           1000              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
0000191E                          1001  
0000191E  6100 193E               1002              BSR     GET_EA_EA_SRC      *GETS <ea>
00001922  163C 002C               1003              MOVE.B  #',',D3
00001926  6100 21D4               1004              BSR     PUSH_STACK           
0000192A  6100 1D62               1005              BSR     GET_EA_EA_DEST       *GETS Dn    
0000192E                          1006  
0000192E                          1007              
0000192E  6000 0002               1008              BRA     OP_LEA_RETURN
00001932                          1009              
00001932                          1010  OP_LEA_RETURN
00001932  4E75                    1011              RTS
00001934                          1012              
00001934                          1013  
00001934                          1014  
00001934                          1015  *---------------------------------------------------------------------------*
00001934                          1016  * OP_NEG: decode and display NEG 
00001934                          1017  *---------------------------------------------------------------------------*
00001934                          1018  OP_NEG      * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
00001934  4281                    1019              CLR.L   D1
00001936  4284                    1020              CLR.L   D4
00001938  2205                    1021              MOVE.L  D5,D1
0000193A                          1022              
0000193A                          1023              *CLEAR D3
0000193A  4283                    1024              CLR.L   D3
0000193C                          1025              *LOAD STACK WITH THIS OPMODE
0000193C  6100 21BE               1026              BSR     PUSH_STACK
00001940  163C 004E               1027              MOVE.B  #'N',D3
00001944  6100 21B6               1028              BSR     PUSH_STACK
00001948  163C 0045               1029              MOVE.B  #'E',D3
0000194C  6100 21AE               1030              BSR     PUSH_STACK
00001950  163C 0047               1031              MOVE.B  #'G',D3
00001954  6100 21A6               1032              BSR     PUSH_STACK
00001958  163C 002E               1033              MOVE.B  #'.',D3
0000195C  6100 219E               1034              BSR     PUSH_STACK
00001960                          1035              
00001960                          1036              
00001960  EC99                    1037              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001962  0281 00000007           1038              ANDI.L  #$07,D1
00001968                          1039              
00001968  0C01 0000               1040              CMPI.B  #0,D1
0000196C  6700 0012               1041              BEQ     OP_NEG_B    * size is byte
00001970  0C01 0001               1042              CMPI.B  #1,D1
00001974  6700 0016               1043              BEQ     OP_NEG_W    * size is word
00001978  0C01 0002               1044              CMPI.B  #2,D1
0000197C  6700 001A               1045              BEQ     OP_NEG_L    * size is long
00001980                          1046                         
00001980                          1047  
00001980                          1048  OP_NEG_B    * size is byte   
00001980  163C 0042               1049              MOVE.B  #'B',D3
00001984  6100 2176               1050              BSR     PUSH_STACK
00001988  6000 001A               1051              BRA     OP_NEG_PRINT_EA
0000198C                          1052  
0000198C                          1053              
0000198C                          1054  OP_NEG_W    * size is word
0000198C  163C 0057               1055              MOVE.B  #'W',D3
00001990  6100 216A               1056              BSR     PUSH_STACK
00001994  6000 000E               1057              BRA     OP_NEG_PRINT_EA
00001998                          1058  
00001998                          1059              
00001998                          1060  OP_NEG_L    * size is long
00001998  163C 004C               1061              MOVE.B  #'L',D3
0000199C  6100 215E               1062              BSR     PUSH_STACK
000019A0  6000 0002               1063              BRA     OP_NEG_PRINT_EA
000019A4                          1064  
000019A4                          1065  
000019A4                          1066  OP_NEG_PRINT_EA
000019A4                          1067   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000019A4  13FC 0082 00004423      1068             MOVE.B   #$82,SRC_REGISTER_FORMAT
000019AC                          1069             
000019AC                          1070             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000019AC  13FC 0020 00004426      1071             MOVE.B   #$20,GET_SRC_START_END
000019B4                          1072                         
000019B4                          1073  
000019B4  6100 18A8               1074              BSR     GET_EA_EA_SRC
000019B8                          1075              
000019B8  4E75                    1076              RTS
000019BA                          1077  
000019BA                          1078  *---------------------------------------------------------------------------*
000019BA                          1079  * OP_NOT: decode and display NOT 
000019BA                          1080  *---------------------------------------------------------------------------*
000019BA                          1081  OP_NOT
000019BA  4281                    1082              CLR.L   D1
000019BC  4284                    1083              CLR.L   D4
000019BE  2205                    1084              MOVE.L  D5,D1
000019C0                          1085              
000019C0                          1086              *CLEAR D3
000019C0  4283                    1087              CLR.L   D3
000019C2                          1088              *LOAD STACK WITH THIS OPMODE
000019C2  6100 2138               1089              BSR     PUSH_STACK
000019C6  163C 004E               1090              MOVE.B  #'N',D3
000019CA  6100 2130               1091              BSR     PUSH_STACK
000019CE  163C 004F               1092              MOVE.B  #'O',D3
000019D2  6100 2128               1093              BSR     PUSH_STACK
000019D6  163C 0054               1094              MOVE.B  #'T',D3
000019DA  6100 2120               1095              BSR     PUSH_STACK
000019DE  163C 002E               1096              MOVE.B  #'.',D3
000019E2  6100 2118               1097              BSR     PUSH_STACK
000019E6                          1098              
000019E6                          1099              
000019E6  EC99                    1100              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000019E8  0281 00000007           1101              ANDI.L  #$07,D1
000019EE                          1102              
000019EE  0C01 0000               1103              CMPI.B  #0,D1
000019F2  6700 0012               1104              BEQ     OP_NOT_B    * size is byte
000019F6  0C01 0001               1105              CMPI.B  #1,D1
000019FA  6700 0016               1106              BEQ     OP_NOT_W    * size is word
000019FE  0C01 0002               1107              CMPI.B  #2,D1
00001A02  6700 001A               1108              BEQ     OP_NOT_L    * size is long
00001A06                          1109                         
00001A06                          1110  
00001A06                          1111  OP_NOT_B    * size is byte   
00001A06  163C 0042               1112              MOVE.B  #'B',D3
00001A0A  6100 20F0               1113              BSR     PUSH_STACK
00001A0E  6000 001A               1114              BRA     OP_NOT_PRINT_EA
00001A12                          1115  
00001A12                          1116              
00001A12                          1117  OP_NOT_W    * size is word
00001A12  163C 0057               1118              MOVE.B  #'W',D3
00001A16  6100 20E4               1119              BSR     PUSH_STACK
00001A1A  6000 000E               1120              BRA     OP_NOT_PRINT_EA
00001A1E                          1121  
00001A1E                          1122              
00001A1E                          1123  OP_NOT_L    * size is long
00001A1E  163C 004C               1124              MOVE.B  #'L',D3
00001A22  6100 20D8               1125              BSR     PUSH_STACK
00001A26  6000 0002               1126              BRA     OP_NOT_PRINT_EA
00001A2A                          1127  
00001A2A                          1128  
00001A2A                          1129  OP_NOT_PRINT_EA
00001A2A                          1130   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001A2A  13FC 0082 00004423      1131             MOVE.B   #$82,SRC_REGISTER_FORMAT
00001A32                          1132             
00001A32                          1133             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001A32  13FC 0020 00004426      1134             MOVE.B   #$20,GET_SRC_START_END
00001A3A  6100 1822               1135              BSR     GET_EA_EA_SRC
00001A3E                          1136              
00001A3E  4E75                    1137              RTS
00001A40                          1138  
00001A40                          1139  
00001A40                          1140  *---------------------------------------------------------------------------*
00001A40                          1141  * OP_JSR: display JSR     
00001A40                          1142  *---------------------------------------------------------------------------*
00001A40  43F9 0000419D           1143  OP_JSR      LEA     DISP_JSR,A1
00001A46  103C 000E               1144              MOVE.B  #14,D0
00001A4A  4E4F                    1145              TRAP    #15
00001A4C  4EB9 00002DAE           1146              JSR     EA_NOSRC
00001A52                          1147  
00001A52  4E75                    1148              RTS
00001A54                          1149  
00001A54                          1150  *---------------------------------------------------------------------------*
00001A54                          1151  * OP_RTS: display RTS     
00001A54                          1152  *---------------------------------------------------------------------------* 
00001A54                          1153  OP_RTS      
00001A54  163C 0052               1154              MOVE.B #'R',D3
00001A58  6100 20A2               1155              BSR     PUSH_STACK
00001A5C  163C 0054               1156              MOVE.B #'T',D3
00001A60  6100 209A               1157              BSR     PUSH_STACK
00001A64  163C 0053               1158              MOVE.B #'S',D3
00001A68  6100 2092               1159              BSR     PUSH_STACK
00001A6C  4E75                    1160              RTS
00001A6E                          1161  
00001A6E                          1162  *---------------------------------------------------------------------------*
00001A6E                          1163  * OP0101: decode ADDQ
00001A6E                          1164  *---------------------------------------------------------------------------* 
00001A6E                          1165  OP0101      
00001A6E                          1166             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001A6E  13FC 0082 00004422      1167             MOVE.B   #$82,DEST_REGISTER_FORMAT
00001A76  13FC 0080 00004423      1168             MOVE.B   #$80,SRC_REGISTER_FORMAT
00001A7E                          1169             
00001A7E                          1170             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001A7E  13FC 00B9 00004425      1171             MOVE.B   #$B9,GET_DST_START_END
00001A86  13FC 0020 00004426      1172             MOVE.B   #$20,GET_SRC_START_END
00001A8E                          1173             
00001A8E                          1174              *CLEAR D3
00001A8E  4283                    1175              CLR.L   D3
00001A90                          1176              *LOAD STACK WITH THIS OPMODE
00001A90  6100 206A               1177              BSR     PUSH_STACK
00001A94  163C 0041               1178              MOVE.B  #'A',D3
00001A98  6100 2062               1179              BSR     PUSH_STACK
00001A9C  163C 0044               1180              MOVE.B  #'D',D3
00001AA0  6100 205A               1181              BSR     PUSH_STACK
00001AA4  163C 0044               1182              MOVE.B  #'D',D3
00001AA8  6100 2052               1183              BSR     PUSH_STACK
00001AAC  163C 0051               1184              MOVE.B  #'Q',D3
00001AB0  6100 204A               1185              BSR     PUSH_STACK
00001AB4  163C 002E               1186              MOVE.B  #'.',D3
00001AB8  6100 2042               1187              BSR     PUSH_STACK
00001ABC                          1188              
00001ABC                          1189              *FIGURE OUT SIZE*
00001ABC                          1190              *00 = BYTE
00001ABC                          1191              *01 = WORD
00001ABC                          1192              *10 = LONG
00001ABC                          1193              * BITS 7&6
00001ABC                          1194              
00001ABC                          1195              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
00001ABC  2205                    1196              MOVE.L  D5,D1
00001ABE  EC99                    1197              ROR.L   #6,D1
00001AC0  0281 00000003           1198              ANDI.L  #$03,D1
00001AC6  0C01 0000               1199              CMPI.B  #%00,D1
00001ACA  6700 001E               1200              BEQ     OP0101_ADDQ_B
00001ACE  0281 00000003           1201              ANDI.L  #$03,D1
00001AD4  0C01 0001               1202              CMPI.B  #%01,D1
00001AD8  6700 001C               1203              BEQ     OP0101_ADDQ_W
00001ADC  0281 00000003           1204              ANDI.L  #$03,D1
00001AE2  0C01 0002               1205              CMPI.B  #%10,D1
00001AE6  6700 001A               1206              BEQ     OP0101_ADDQ_L
00001AEA                          1207            
00001AEA                          1208  OP0101_ADDQ_B
00001AEA                          1209              
00001AEA  163C 0042               1210              MOVE.B  #'B',D3
00001AEE  6100 200C               1211              BSR     PUSH_STACK
00001AF2  6000 0016               1212              BRA     OP0101_RETURN
00001AF6                          1213  OP0101_ADDQ_W
00001AF6                          1214              
00001AF6  163C 0057               1215              MOVE.B  #'W',D3
00001AFA  6100 2000               1216              BSR     PUSH_STACK
00001AFE  6000 000A               1217              BRA     OP0101_RETURN
00001B02                          1218  OP0101_ADDQ_L
00001B02                          1219              
00001B02  163C 004C               1220              MOVE.B  #'L',D3
00001B06  6100 1FF4               1221              BSR     PUSH_STACK
00001B0A                          1222  OP0101_RETURN            
00001B0A                          1223  
00001B0A                          1224              
00001B0A                          1225  *GET DATA FROM ADDQ AND PRINT #0-8
00001B0A  163C 0020               1226              MOVE.B  #' ',D3
00001B0E  6100 1FEC               1227              BSR     PUSH_STACK
00001B12  163C 0023               1228              MOVE.B  #'#',D3
00001B16  6100 1FE4               1229              BSR     PUSH_STACK 
00001B1A                          1230  
00001B1A                          1231                       
00001B1A                          1232              *GET DATA #   
00001B1A  2205                    1233              MOVE.L  D5,D1
00001B1C  EC99                    1234              ROR.L   #6,D1            
00001B1E  E699                    1235              ROR.L   #3,D1
00001B20  0281 00000007           1236              ANDI.L  #$07,D1
00001B26                          1237              
00001B26  0C01 0000               1238              CMPI.B  #%000,D1
00001B2A  6700 009A               1239              BEQ     OP0101_ADDQ_B_8
00001B2E  0C01 0001               1240              CMPI.B  #%001,D1
00001B32  6700 003E               1241              BEQ     OP0101_ADDQ_B_1
00001B36  0C01 0002               1242              CMPI.B  #%010,D1
00001B3A  6700 0042               1243              BEQ     OP0101_ADDQ_B_2
00001B3E  0C01 0003               1244              CMPI.B  #%011,D1
00001B42  6700 0046               1245              BEQ     OP0101_ADDQ_B_3
00001B46  0C01 0004               1246              CMPI.B  #%100,D1
00001B4A  6700 004A               1247              BEQ     OP0101_ADDQ_B_4
00001B4E  0C01 0005               1248              CMPI.B  #%101,D1
00001B52  6700 004E               1249              BEQ     OP0101_ADDQ_B_5
00001B56  0C01 0006               1250              CMPI.B  #%110,D1
00001B5A  6700 0052               1251              BEQ     OP0101_ADDQ_B_6
00001B5E  0C01 0007               1252              CMPI.B  #%111,D1
00001B62  6700 0056               1253              BEQ     OP0101_ADDQ_B_7
00001B66                          1254              
00001B66                          1255  OP0101_ADDQ_B_0
00001B66  163C 0030               1256              MOVE.B  #'0',D3
00001B6A  6100 1F90               1257              BSR     PUSH_STACK
00001B6E  6000 005E               1258              BRA     OP0101_RETURN2            
00001B72                          1259  OP0101_ADDQ_B_1
00001B72  163C 0031               1260              MOVE.B  #'1',D3
00001B76  6100 1F84               1261              BSR     PUSH_STACK
00001B7A  6000 0052               1262              BRA     OP0101_RETURN2            
00001B7E                          1263  OP0101_ADDQ_B_2
00001B7E  163C 0032               1264              MOVE.B  #'2',D3
00001B82  6100 1F78               1265              BSR     PUSH_STACK
00001B86  6000 0046               1266              BRA     OP0101_RETURN2            
00001B8A                          1267  OP0101_ADDQ_B_3
00001B8A  163C 0033               1268              MOVE.B  #'3',D3
00001B8E  6100 1F6C               1269              BSR     PUSH_STACK
00001B92  6000 003A               1270              BRA     OP0101_RETURN2            
00001B96                          1271  OP0101_ADDQ_B_4
00001B96  163C 0034               1272              MOVE.B  #'4',D3
00001B9A  6100 1F60               1273              BSR     PUSH_STACK
00001B9E  6000 002E               1274              BRA     OP0101_RETURN2            
00001BA2                          1275  OP0101_ADDQ_B_5
00001BA2  163C 0035               1276              MOVE.B  #'5',D3
00001BA6  6100 1F54               1277              BSR     PUSH_STACK
00001BAA  6000 0022               1278              BRA     OP0101_RETURN2
00001BAE                          1279  OP0101_ADDQ_B_6
00001BAE  163C 0036               1280              MOVE.B  #'6',D3
00001BB2  6100 1F48               1281              BSR     PUSH_STACK
00001BB6  6000 0016               1282              BRA     OP0101_RETURN2
00001BBA                          1283  OP0101_ADDQ_B_7
00001BBA  163C 0037               1284              MOVE.B  #'7',D3
00001BBE  6100 1F3C               1285              BSR     PUSH_STACK
00001BC2  6000 000A               1286              BRA     OP0101_RETURN2
00001BC6                          1287  
00001BC6                          1288  OP0101_ADDQ_B_8
00001BC6  163C 0038               1289              MOVE.B  #'8',D3
00001BCA  6100 1F30               1290              BSR     PUSH_STACK
00001BCE                          1291              
00001BCE                          1292  OP0101_RETURN2            
00001BCE  163C 002C               1293              MOVE.B  #',',D3
00001BD2  6100 1F28               1294              BSR     PUSH_STACK
00001BD6  6100 1686               1295              BSR     GET_EA_EA_SRC
00001BDA                          1296              
00001BDA  4E75                    1297              RTS
00001BDC                          1298  
00001BDC                          1299  
00001BDC                          1300              
00001BDC                          1301  *---------------------------------------------------------------------------*
00001BDC                          1302  * OP_ADDQ: display ADDQ
00001BDC                          1303  *---------------------------------------------------------------------------*              
00001BDC                          1304  OP_ADDQ_B    * size is byte   
00001BDC  183C 0000               1305              MOVE.B  #0,D4 
00001BE0  43F9 000041F7           1306              LEA     DISP_ADDQ_B,A1
00001BE6  103C 000E               1307              MOVE.B  #14,D0
00001BEA  4E4F                    1308              TRAP    #15
00001BEC  4E75                    1309              RTS
00001BEE                          1310              
00001BEE                          1311  OP_ADDQ_W    * size is word
00001BEE  183C 0001               1312              MOVE.B  #1,D4
00001BF2  43F9 00004201           1313              LEA     DISP_ADDQ_W,A1
00001BF8  103C 000E               1314              MOVE.B  #14,D0
00001BFC  4E4F                    1315              TRAP    #15
00001BFE  4E75                    1316              RTS
00001C00                          1317              
00001C00                          1318  OP_ADDQ_L    * size is long
00001C00  183C 0002               1319              MOVE.B  #2,D4
00001C04  43F9 0000420B           1320              LEA     DISP_ADDQ_L,A1
00001C0A  103C 000E               1321              MOVE.B  #14,D0
00001C0E  4E4F                    1322              TRAP    #15
00001C10  4E75                    1323              RTS
00001C12                          1324  
00001C12                          1325  *---------------------------------------------------------------------------*
00001C12                          1326  * OP0110: decode BRA/BEQ/BNE/BLT/BHI
00001C12                          1327  *---------------------------------------------------------------------------*              
00001C12  4280                    1328  OP0110      CLR.L   D0                  
00001C14  4281                    1329              CLR.L   D1   
00001C16  4284                    1330              CLR.L   D4                 
00001C18  227C 00000000           1331              MOVEA.L #0,A1
00001C1E  2205                    1332              MOVE.L  D5, D1                
00001C20  0281 000000FF           1333              ANDI.L  #$00FF, D1              * Get 8-bit displacement 
00001C26  2205                    1334              MOVE.L  D5,D1                  
00001C28  0281 00000F00           1335              ANDI.L  #$0F00,D1
00001C2E                          1336                 
00001C2E  0C41 0000               1337              CMPI.W  #$0000,D1               * Check for BRA
00001C32  6700 0050               1338              BEQ     OP_BRA                  
00001C36                          1339                          
00001C36  0C41 0D00               1340              CMPI.W  #$0D00,D1               * Check for BLT
00001C3A  6700 0056               1341              BEQ     OP_BLT      
00001C3E                          1342  
00001C3E  0C41 0700               1343              CMPI.W  #$0700,D1               * Check for BEQ
00001C42  6700 0032               1344              BEQ     OP_BEQ      
00001C46                          1345  
00001C46  0C41 0600               1346              CMPI.W  #$0600,D1               * Check for BNE
00001C4A  6700 001C               1347              BEQ     OP_BNE  
00001C4E                          1348              
00001C4E  0C41 0200               1349              CMPI.W  #$0200,D1               * Check for BHI
00001C52  6700 0006               1350              BEQ     OP_BHI
00001C56                          1351  
00001C56  4EF8 14B8               1352              JMP     OP_DATA
00001C5A                          1353              
00001C5A  43F9 000043C6           1354  OP_BHI      LEA     DISP_BHI,A1             
00001C60  103C 000E               1355              MOVE.B  #14,D0
00001C64  4E4F                    1356              TRAP    #15
00001C66  4E75                    1357              RTS
00001C68                          1358  
00001C68  43F9 000043BF           1359  OP_BNE      LEA     DISP_BNE,A1             
00001C6E  103C 000E               1360              MOVE.B  #14,D0
00001C72  4E4F                    1361              TRAP    #15
00001C74  4E75                    1362              RTS
00001C76                          1363  
00001C76  43F9 000043B8           1364  OP_BEQ      LEA     DISP_BEQ,A1             
00001C7C  103C 000E               1365              MOVE.B  #14,D0
00001C80  4E4F                    1366              TRAP    #15
00001C82  4E75                    1367              RTS          
00001C84                          1368                          
00001C84  43F9 000043AA           1369  OP_BRA      LEA     DISP_BRA,A1             
00001C8A  103C 000E               1370              MOVE.B  #14,D0
00001C8E  4E4F                    1371              TRAP    #15
00001C90  4E75                    1372              RTS
00001C92                          1373              
00001C92  43F9 000043B1           1374  OP_BLT      LEA     DISP_BLT,A1          
00001C98  103C 000E               1375              MOVE.B  #14,D0
00001C9C  4E4F                    1376              TRAP    #15
00001C9E  4E75                    1377              RTS
00001CA0                          1378     
00001CA0                          1379  *---------------------------------------------------------------------------*
00001CA0                          1380  * OP0111 : MOVEQ not required
00001CA0                          1381  *---------------------------------------------------------------------------*           
00001CA0  4EF8 14B8               1382  OP0111      JMP     OP_DATA
00001CA4                          1383             
00001CA4                          1384  *---------------------------------------------------------------------------*
00001CA4                          1385  * OP1000 : decode DIVS
00001CA4                          1386  *---------------------------------------------------------------------------*           
00001CA4                          1387  OP1000                           
00001CA4  4281                    1388              CLR.L   D1       
00001CA6  4284                    1389              CLR.L   D4                   
00001CA8  227C 00000000           1390              MOVEA.L #0, A1              
00001CAE  2205                    1391              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
00001CB0                          1392              *CLEAR D3
00001CB0  4283                    1393              CLR.L   D3
00001CB2                          1394  
00001CB2                          1395  OP1000_DIVS_DN_EA_OR_EA_DN 
00001CB2                          1396              *LOAD STACK WITH THIS OPMODE
00001CB2  6100 1E48               1397              BSR     PUSH_STACK
00001CB6  163C 0044               1398              MOVE.B  #'D',D3
00001CBA  6100 1E40               1399              BSR     PUSH_STACK
00001CBE  163C 0049               1400              MOVE.B  #'I',D3
00001CC2  6100 1E38               1401              BSR     PUSH_STACK
00001CC6  163C 0056               1402              MOVE.B  #'V',D3
00001CCA  6100 1E30               1403              BSR     PUSH_STACK
00001CCE  163C 0053               1404              MOVE.B  #'S',D3
00001CD2  6100 1E28               1405              BSR     PUSH_STACK
00001CD6  163C 002E               1406              MOVE.B  #'.',D3
00001CDA  6100 1E20               1407              BSR     PUSH_STACK
00001CDE                          1408              
00001CDE  2205                    1409              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00001CE0                          1410              
00001CE0                          1411  OP1000_EA_DN_DIVS
00001CE0                          1412              *BITS (7 TO 6) 
00001CE0                          1413              *00 = .B
00001CE0                          1414              *01 = .W
00001CE0                          1415              *10 = .L 
00001CE0  2205                    1416              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00001CE2  EC99                    1417              ROR.L   #6,D1
00001CE4  0281 00000003           1418              ANDI.L  #$03,D1
00001CEA  0C81 00000003           1419              CMPI.L  #%11,D1 *EQUALS .W
00001CF0  6700 0014               1420              BEQ     OP1000_PRINT_W_DIVS
00001CF4  0C81 00000000           1421              CMPI.L  #%00,D1 *EQUALS .L
00001CFA  6700 0052               1422              BEQ     OP1000_PRINT_L_DIVS
00001CFE                          1423              
00001CFE  183C 0001               1424              MOVE.B  #1,D4               *ERROR READ
00001D02  6000 0092               1425              BRA     OP1000_DIVS_RETURN
00001D06                          1426  OP1000_PRINT_W_DIVS
00001D06  163C 0057               1427              MOVE.B  #'W',D3
00001D0A  6100 1DF0               1428              BSR     PUSH_STACK
00001D0E                          1429  
00001D0E                          1430              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001D0E  13FC 0000 00004422      1431              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001D16  13FC 0000 00004423      1432              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001D1E                          1433             
00001D1E                          1434              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001D1E  13FC 00B9 00004425      1435              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001D26  13FC 0020 00004426      1436              MOVE.B   #$20,GET_SRC_START_END
00001D2E                          1437  
00001D2E                          1438             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001D2E  0285 0000FE3F           1439              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001D34  0685 00000000           1440              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00001D3A                          1441  
00001D3A                          1442              
00001D3A  6100 1522               1443              BSR     GET_EA_EA_SRC      *GETS <ea>
00001D3E  163C 002C               1444              MOVE.B  #',',D3
00001D42  6100 1DB8               1445              BSR     PUSH_STACK
00001D46  6100 1946               1446              BSR     GET_EA_EA_DEST       *GETS Dn    
00001D4A                          1447              
00001D4A  6000 004A               1448              BRA     OP1000_DIVS_RETURN
00001D4E                          1449  OP1000_PRINT_L_DIVS
00001D4E  163C 004C               1450              MOVE.B  #'L',D3
00001D52  6100 1DA8               1451              BSR     PUSH_STACK
00001D56                          1452              
00001D56                          1453              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001D56  13FC 0000 00004422      1454              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001D5E  13FC 0000 00004423      1455              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001D66                          1456             
00001D66                          1457              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001D66  13FC 00B9 00004425      1458              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001D6E  13FC 0020 00004426      1459              MOVE.B   #$20,GET_SRC_START_END
00001D76                          1460  
00001D76                          1461              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001D76  0285 0000FE3F           1462              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001D7C  0685 00000000           1463              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00001D82                          1464  
00001D82                          1465                     
00001D82  6100 14DA               1466              BSR     GET_EA_EA_SRC      *GETS <ea>
00001D86  163C 002C               1467              MOVE.B  #',',D3
00001D8A  6100 1D70               1468              BSR     PUSH_STACK                  
00001D8E  6100 18FE               1469              BSR     GET_EA_EA_DEST       *GETS Dn    
00001D92                          1470  
00001D92                          1471              
00001D92  6000 0002               1472              BRA     OP1000_DIVS_RETURN
00001D96                          1473              
00001D96                          1474  OP1000_DIVS_RETURN
00001D96  4E75                    1475              RTS
00001D98                          1476              
00001D98                          1477  
00001D98                          1478  
00001D98                          1479  *---------------------------------------------------------------------------*
00001D98                          1480  * OP_DIVS: display DIVS and proceed to EA
00001D98                          1481  *---------------------------------------------------------------------------*  
00001D98  43F9 00004215           1482  OP_DIVS     LEA     DISP_DIVS,A1
00001D9E  103C 000E               1483              MOVE.B  #14,D0
00001DA2  4E4F                    1484              TRAP    #15
00001DA4  4EF9 00002DC2           1485              JMP     EA_ARITH
00001DAA                          1486  
00001DAA  4E75                    1487              RTS
00001DAC                          1488              
00001DAC                          1489  *---------------------------------------------------------------------------*
00001DAC                          1490  * OP1001: decode SUB/SUBA
00001DAC                          1491  *---------------------------------------------------------------------------*      
00001DAC                          1492  OP1001      
00001DAC  4280                    1493              CLR.L   D0                  
00001DAE  4281                    1494              CLR.L   D1       
00001DB0  4284                    1495              CLR.L   D4                   
00001DB2  227C 00000000           1496              MOVEA.L #0, A1              
00001DB8  2205                    1497              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
00001DBA                          1498              
00001DBA                          1499              *CLEAR D3
00001DBA  4283                    1500              CLR.L   D3
00001DBC                          1501              
00001DBC                          1502              
00001DBC                          1503              
00001DBC                          1504              **INTEGRATING SUB.W/.L INTO THIS CODE**
00001DBC  2205                    1505              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00001DBE                          1506              *BITS (INDEX 8) 
00001DBE                          1507              *0 = ADD.B/W/L <EA>,Dn
00001DBE                          1508              *1 = ADD.B/W/L Dn,<EA> 
00001DBE  EC99                    1509              ROR.L   #6,D1
00001DC0  0281 00000007           1510              ANDI.L  #$07,D1                 *MASKS WITH 00000111
00001DC6  0C81 00000007           1511              CMPI.L  #$07,D1                 *IF EQUALS <ea>,Dn
00001DCC  6700 0010               1512              BEQ     OP1001_SUBA_L            *BRANCHES TO ADDA.L
00001DD0  0C81 00000003           1513              CMPI.L  #$03,D1                 *IF EQUALS <ea>,Dn
00001DD6  6700 0078               1514              BEQ     OP1001_SUBA_W           *BRANCHES TO ADDA.W
00001DDA  6000 00E6               1515              BRA     OP1001_DETERMINE_DN_EA_OR_EA_DN         *ELSE CHECK ADD.B/.W/.L
00001DDE                          1516              
00001DDE                          1517  OP1001_SUBA_L
00001DDE                          1518              *LOAD STACK WITH THIS OPMODE
00001DDE  6100 1D1C               1519              BSR     PUSH_STACK
00001DE2  163C 0053               1520              MOVE.B  #'S',D3
00001DE6  6100 1D14               1521              BSR     PUSH_STACK
00001DEA  163C 0055               1522              MOVE.B  #'U',D3
00001DEE  6100 1D0C               1523              BSR     PUSH_STACK
00001DF2  163C 0042               1524              MOVE.B  #'B',D3
00001DF6  6100 1D04               1525              BSR     PUSH_STACK
00001DFA  163C 0041               1526              MOVE.B  #'A',D3
00001DFE  6100 1CFC               1527              BSR     PUSH_STACK
00001E02  163C 002E               1528              MOVE.B  #'.',D3
00001E06  6100 1CF4               1529              BSR     PUSH_STACK
00001E0A  163C 004C               1530              MOVE.B  #'L',D3
00001E0E  6100 1CEC               1531              BSR     PUSH_STACK
00001E12                          1532              
00001E12                          1533             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001E12  13FC 0000 00004422      1534             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001E1A  13FC 0000 00004423      1535             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001E22                          1536             
00001E22                          1537             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001E22  13FC 00B9 00004425      1538             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001E2A  13FC 0020 00004426      1539             MOVE.B   #$20,GET_SRC_START_END
00001E32                          1540  
00001E32                          1541              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001E32  0285 0000FE3F           1542              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001E38  0685 00000040           1543              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00001E3E                          1544       
00001E3E                          1545              *PRINT <EA>,AN
00001E3E  6100 141E               1546              BSR     GET_EA_EA_SRC       *GETS <ea>
00001E42  163C 002C               1547              MOVE.B  #',',D3
00001E46  6100 1CB4               1548              BSR     PUSH_STACK                     
00001E4A  6100 1842               1549              BSR     GET_EA_EA_DEST      *GETS Dn
00001E4E                          1550  
00001E4E                          1551              
00001E4E                          1552              
00001E4E  4E75                    1553              RTS
00001E50                          1554  OP1001_SUBA_W
00001E50                          1555              *LOAD STACK WITH THIS OPMODE
00001E50  6100 1CAA               1556              BSR     PUSH_STACK
00001E54  163C 0053               1557              MOVE.B  #'S',D3
00001E58  6100 1CA2               1558              BSR     PUSH_STACK
00001E5C  163C 0055               1559              MOVE.B  #'U',D3
00001E60  6100 1C9A               1560              BSR     PUSH_STACK
00001E64  163C 0042               1561              MOVE.B  #'B',D3
00001E68  6100 1C92               1562              BSR     PUSH_STACK
00001E6C  163C 0041               1563              MOVE.B  #'A',D3
00001E70  6100 1C8A               1564              BSR     PUSH_STACK
00001E74  163C 002E               1565              MOVE.B  #'.',D3
00001E78  6100 1C82               1566              BSR     PUSH_STACK
00001E7C  163C 0057               1567              MOVE.B  #'W',D3
00001E80  6100 1C7A               1568              BSR     PUSH_STACK
00001E84                          1569              
00001E84                          1570             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001E84  13FC 0000 00004422      1571             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001E8C  13FC 0000 00004423      1572             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001E94                          1573             
00001E94                          1574             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001E94  13FC 00B9 00004425      1575             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001E9C  13FC 0020 00004426      1576             MOVE.B   #$20,GET_SRC_START_END
00001EA4                          1577  
00001EA4                          1578              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001EA4  0285 0000FE3F           1579              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001EAA  0685 00000040           1580              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00001EB0                          1581       
00001EB0                          1582              *PRINT <EA>,AN
00001EB0  6100 13AC               1583              BSR     GET_EA_EA_SRC       *GETS <ea>
00001EB4  163C 002C               1584              MOVE.B  #',',D3
00001EB8  6100 1C42               1585              BSR     PUSH_STACK                     
00001EBC  6100 17D0               1586              BSR     GET_EA_EA_DEST      *GETS Dn
00001EC0                          1587  
00001EC0  4E75                    1588              RTS
00001EC2                          1589  
00001EC2                          1590  OP1001_DETERMINE_DN_EA_OR_EA_DN 
00001EC2                          1591              *LOAD STACK WITH THIS OPMODE
00001EC2  6100 1C38               1592              BSR     PUSH_STACK
00001EC6  163C 0053               1593              MOVE.B  #'S',D3
00001ECA  6100 1C30               1594              BSR     PUSH_STACK
00001ECE  163C 0055               1595              MOVE.B  #'U',D3
00001ED2  6100 1C28               1596              BSR     PUSH_STACK
00001ED6  163C 0042               1597              MOVE.B  #'B',D3
00001EDA  6100 1C20               1598              BSR     PUSH_STACK
00001EDE  163C 002E               1599              MOVE.B  #'.',D3
00001EE2  6100 1C18               1600              BSR     PUSH_STACK
00001EE6                          1601              
00001EE6  2205                    1602              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00001EE8                          1603              
00001EE8                          1604              *BITS (INDEX 8) 
00001EE8                          1605              *0 = ADD.B/W/L <EA>,Dn
00001EE8                          1606              *1 = ADD.B/W/L Dn,<EA> 
00001EE8  E099                    1607              ROR.L   #8,D1
00001EEA  0281 00000001           1608              ANDI.L  #$01,D1     *MASKS WITH 00000001
00001EF0  0C81 00000000           1609              CMPI.L  #$00,D1     *IF EQUALS <ea>,Dn
00001EF6  6700 0102               1610              BEQ     OP1001_EA_DN
00001EFA                          1611              *else procede to Dn_EA
00001EFA                          1612              
00001EFA                          1613  OP1001_DN_EA
00001EFA                          1614              *BITS (7 TO 6) 
00001EFA                          1615              *00 = .B
00001EFA                          1616              *01 = .W
00001EFA                          1617              *10 = .L 
00001EFA  2205                    1618              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00001EFC  EC99                    1619              ROR.L   #6,D1
00001EFE  0281 00000003           1620              ANDI.L  #$03,D1
00001F04  0C81 00000000           1621              CMPI.L  #$00,D1 *EQUALS .B
00001F0A  6700 0016               1622              BEQ     OP1001_PRINT_B2
00001F0E  0C81 00000001           1623              CMPI.L  #$01,D1 *EQUALS .W
00001F14  6700 0054               1624              BEQ     OP1001_PRINT_W2
00001F18  0C81 00000002           1625              CMPI.L  #$02,D1 *EQUALS .L
00001F1E  6700 0092               1626              BEQ     OP1001_PRINT_L2
00001F22                          1627  OP1001_PRINT_B2
00001F22                          1628              *PUSH 'B'
00001F22  163C 0042               1629              MOVE.B  #'B',D3
00001F26  6100 1BD4               1630              BSR     PUSH_STACK
00001F2A                          1631             
00001F2A                          1632              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001F2A  13FC 0000 00004422      1633             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001F32  13FC 0083 00004423      1634             MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001F3A                          1635             
00001F3A                          1636             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001F3A  13FC 00B9 00004425      1637             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001F42  13FC 0020 00004426      1638             MOVE.B   #$20,GET_SRC_START_END
00001F4A                          1639  
00001F4A                          1640              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001F4A  0285 0000FE3F           1641              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001F50  0685 00000040           1642              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00001F56                          1643       
00001F56  6100 1736               1644              BSR     GET_EA_EA_DEST      *GETS Dn
00001F5A  163C 002C               1645              MOVE.B  #',',D3
00001F5E  6100 1B9C               1646              BSR     PUSH_STACK                     
00001F62  6100 12FA               1647              BSR     GET_EA_EA_SRC       *GETS <ea>
00001F66                          1648  
00001F66                          1649              
00001F66  6000 0B06               1650              BRA     OP1101_ADD_RETURN
00001F6A                          1651  OP1001_PRINT_W2
00001F6A  163C 0057               1652              MOVE.B  #'W',D3
00001F6E  6100 1B8C               1653              BSR     PUSH_STACK
00001F72                          1654  
00001F72                          1655              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001F72  13FC 0000 00004422      1656              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001F7A  13FC 0083 00004423      1657              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001F82                          1658             
00001F82                          1659              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001F82  13FC 00B9 00004425      1660              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001F8A  13FC 0020 00004426      1661              MOVE.B   #$20,GET_SRC_START_END
00001F92                          1662  
00001F92                          1663              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001F92  0285 0000FE3F           1664              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001F98  0685 00000040           1665              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A An Register (001) 
00001F9E                          1666  
00001F9E                          1667        
00001F9E  6100 16EE               1668              BSR     GET_EA_EA_DEST      *GETS Dn
00001FA2  163C 002C               1669              MOVE.B  #',',D3
00001FA6  6100 1B54               1670              BSR     PUSH_STACK               
00001FAA  6100 12B2               1671              BSR     GET_EA_EA_SRC       *GETS <ea>       
00001FAE                          1672  
00001FAE                          1673  
00001FAE                          1674  
00001FAE  6000 0ABE               1675              BRA     OP1101_ADD_RETURN
00001FB2                          1676  OP1001_PRINT_L2 
00001FB2  163C 004C               1677              MOVE.B  #'L',D3
00001FB6  6100 1B44               1678              BSR     PUSH_STACK
00001FBA                          1679              
00001FBA                          1680              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001FBA  13FC 0000 00004422      1681              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001FC2  13FC 0083 00004423      1682              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001FCA                          1683             
00001FCA                          1684              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001FCA  13FC 00B9 00004425      1685              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001FD2  13FC 0020 00004426      1686              MOVE.B   #$20,GET_SRC_START_END
00001FDA                          1687  
00001FDA                          1688             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001FDA  0285 0000FE3F           1689              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001FE0  0685 00000040           1690              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00001FE6                          1691  
00001FE6                          1692               
00001FE6  6100 16A6               1693              BSR     GET_EA_EA_DEST       *GETS Dn
00001FEA  163C 002C               1694              MOVE.B  #',',D3
00001FEE  6100 1B0C               1695              BSR     PUSH_STACK          
00001FF2  6100 126A               1696              BSR     GET_EA_EA_SRC        *GETS <ea>
00001FF6                          1697  
00001FF6  6000 0A76               1698              BRA     OP1101_ADD_RETURN
00001FFA                          1699              
00001FFA                          1700  OP1001_EA_DN           
00001FFA                          1701              *BITS (7 TO 6) 
00001FFA                          1702              *00 = .B
00001FFA                          1703              *01 = .W
00001FFA                          1704              *10 = .L 
00001FFA  2205                    1705              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00001FFC  EC99                    1706              ROR.L   #6,D1
00001FFE  0281 00000003           1707              ANDI.L  #$03,D1
00002004  0C81 00000000           1708              CMPI.L  #$00,D1 *EQUALS .B
0000200A  6700 0016               1709              BEQ     OP1001_PRINT_B
0000200E  0C81 00000001           1710              CMPI.L  #$01,D1 *EQUALS .W
00002014  6700 0054               1711              BEQ     OP1001_PRINT_W
00002018  0C81 00000002           1712              CMPI.L  #$02,D1 *EQUALS .L
0000201E  6700 0092               1713              BEQ     OP1001_PRINT_L
00002022                          1714  OP1001_PRINT_B
00002022  163C 0042               1715              MOVE.B  #'B',D3
00002026  6100 1AD4               1716              BSR     PUSH_STACK
0000202A                          1717                
0000202A                          1718              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000202A  13FC 0000 00004422      1719              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002032  13FC 0002 00004423      1720              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000203A                          1721             
0000203A                          1722              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000203A  13FC 00B9 00004425      1723              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002042  13FC 0020 00004426      1724              MOVE.B   #$20,GET_SRC_START_END
0000204A                          1725  
0000204A                          1726             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000204A  0285 0000FE3F           1727              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002050  0685 00000040           1728              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "AN" Register (001) 
00002056                          1729  
00002056                          1730              
00002056  6100 1206               1731              BSR     GET_EA_EA_SRC      *GETS <ea>
0000205A  163C 002C               1732              MOVE.B  #',',D3
0000205E  6100 1A9C               1733              BSR     PUSH_STACK          
00002062  6100 162A               1734              BSR     GET_EA_EA_DEST       *GETS Dn
00002066                          1735              
00002066  6000 0A06               1736              BRA     OP1101_ADD_RETURN
0000206A                          1737  OP1001_PRINT_W
0000206A  163C 0057               1738              MOVE.B  #'W',D3
0000206E  6100 1A8C               1739              BSR     PUSH_STACK
00002072                          1740  
00002072                          1741              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002072  13FC 0000 00004422      1742              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000207A  13FC 0000 00004423      1743              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002082                          1744             
00002082                          1745              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002082  13FC 00B9 00004425      1746              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000208A  13FC 0020 00004426      1747              MOVE.B   #$20,GET_SRC_START_END
00002092                          1748  
00002092                          1749             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002092  0285 0000FE3F           1750              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002098  0685 00000040           1751              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
0000209E                          1752  
0000209E                          1753              
0000209E  6100 11BE               1754              BSR     GET_EA_EA_SRC      *GETS <ea>
000020A2  163C 002C               1755              MOVE.B  #',',D3
000020A6  6100 1A54               1756              BSR     PUSH_STACK
000020AA  6100 15E2               1757              BSR     GET_EA_EA_DEST       *GETS Dn    
000020AE                          1758              
000020AE  6000 004A               1759              BRA     OP1001_ADD_RETURN
000020B2                          1760  OP1001_PRINT_L 
000020B2  163C 004C               1761              MOVE.B  #'L',D3
000020B6  6100 1A44               1762              BSR     PUSH_STACK
000020BA                          1763              
000020BA                          1764              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000020BA  13FC 0000 00004422      1765              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000020C2  13FC 0000 00004423      1766              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000020CA                          1767             
000020CA                          1768              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000020CA  13FC 00B9 00004425      1769              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000020D2  13FC 0020 00004426      1770              MOVE.B   #$20,GET_SRC_START_END
000020DA                          1771  
000020DA                          1772              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000020DA  0285 0000FE3F           1773              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000020E0  0685 00000040           1774              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
000020E6                          1775  
000020E6                          1776                     
000020E6  6100 1176               1777              BSR     GET_EA_EA_SRC      *GETS <ea>
000020EA  163C 002C               1778              MOVE.B  #',',D3
000020EE  6100 1A0C               1779              BSR     PUSH_STACK                  
000020F2  6100 159A               1780              BSR     GET_EA_EA_DEST       *GETS Dn    
000020F6                          1781  
000020F6                          1782              
000020F6  6000 0002               1783              BRA     OP1001_ADD_RETURN
000020FA                          1784              
000020FA                          1785  OP1001_ADD_RETURN
000020FA  4E75                    1786              RTS
000020FC                          1787  
000020FC                          1788    
000020FC                          1789  *---------------------------------------------------------------------------*
000020FC                          1790  * OP_SUB: display SUB and proceed to EA
000020FC                          1791  *---------------------------------------------------------------------------*            
000020FC  43F9 0000421D           1792  OP_SUB_B    LEA     DISP_SUB_B,A1
00002102  103C 000E               1793              MOVE.B  #14,D0
00002106  4E4F                    1794              TRAP    #15
00002108  183C 0000               1795              MOVE.B  #0,D4
0000210C  4EF9 00002E0E           1796              JMP     EA_GEN
00002112                          1797  
00002112  4E75                    1798              RTS
00002114                          1799  
00002114  43F9 00004226           1800  OP_SUB_W    LEA     DISP_SUB_W,A1
0000211A  103C 000E               1801              MOVE.B  #14,D0
0000211E  4E4F                    1802              TRAP    #15
00002120  183C 0001               1803              MOVE.B  #1,D4
00002124  4EF9 00002E0E           1804              JMP     EA_GEN
0000212A                          1805  
0000212A  4E75                    1806              RTS
0000212C                          1807  
0000212C  43F9 0000422F           1808  OP_SUB_L    LEA     DISP_SUB_L,A1
00002132  103C 000E               1809              MOVE.B  #14,D0
00002136  4E4F                    1810              TRAP    #15
00002138  183C 0002               1811              MOVE.B  #2,D4
0000213C  4EF9 00002E0E           1812              JMP     EA_GEN
00002142                          1813  
00002142  4E75                    1814              RTS
00002144                          1815  
00002144                          1816  *---------------------------------------------------------------------------*
00002144                          1817  * OP_SUBA: display SUBA
00002144                          1818  *---------------------------------------------------------------------------*  
00002144  43F9 00004256           1819  OP_SUBA_W   LEA     DISP_SUBA_W,A1
0000214A  103C 000E               1820              MOVE.B  #14,D0
0000214E  4E4F                    1821              TRAP    #15
00002150  183C 0001               1822              MOVE.B  #1,D4
00002154  4E75                    1823              RTS
00002156                          1824  
00002156  43F9 00004260           1825  OP_SUBA_L   LEA     DISP_SUBA_L,A1
0000215C  103C 000E               1826              MOVE.B  #14,D0
00002160  4E4F                    1827              TRAP    #15
00002162  183C 0002               1828              MOVE.B  #2,D4
00002166  4E75                    1829              RTS         
00002168                          1830  *---------------------------------------------------------------------------*
00002168                          1831  * OP1010 : unassigned
00002168                          1832  *---------------------------------------------------------------------------*           
00002168  4EF8 14B8               1833  OP1010      JMP     OP_DATA
0000216C                          1834              
0000216C                          1835  *---------------------------------------------------------------------------*
0000216C                          1836  * OP1011 : decode CMP/EOR/CMPA
0000216C                          1837  *---------------------------------------------------------------------------*           
0000216C  4280                    1838  OP1011      CLR.L   D0                
0000216E  4281                    1839              CLR.L   D1            
00002170  4284                    1840              CLR.L   D4                   
00002172  227C 00000000           1841              MOVEA.L #0, A1               
00002178  2205                    1842              MOVE.L  D5,D1
0000217A  EA99                    1843              ROR.L   #5,D1
0000217C  0281 0000000E           1844              ANDI.L  #$E,D1
00002182  0C01 0000               1845              CMPI.B  #$0,D1
00002186  6700 003E               1846              BEQ     OP1011_CMP
0000218A  0C01 0002               1847              CMPI.B  #$2,D1
0000218E  6700 0036               1848              BEQ     OP1011_CMP
00002192  0C01 0004               1849              CMPI.B  #$4,D1
00002196  6700 002E               1850              BEQ     OP1011_CMP
0000219A  0C01 0008               1851              CMPI.B  #$8,D1
0000219E  6700 00DA               1852              BEQ     OP1011_EOR
000021A2  0C01 000A               1853              CMPI.B  #$A,D1
000021A6  6700 00D2               1854              BEQ     OP1011_EOR
000021AA  0C01 000C               1855              CMPI.B  #$C,D1
000021AE  6700 00CA               1856              BEQ     OP1011_EOR  
000021B2  0C01 0006               1857              CMPI.B  #$6,D1
000021B6  6700 00C0               1858              BEQ     OP1011_CMPA
000021BA  0C01 000E               1859              CMPI.B  #$E,D1
000021BE  6700 00B8               1860              BEQ     OP1011_CMPA 
000021C2                          1861  
000021C2  4EF8 14B8               1862              JMP     OP_DATA          
000021C6                          1863  
000021C6                          1864  
000021C6                          1865  
000021C6                          1866  
000021C6                          1867  OP1011_CMP
000021C6                          1868             
000021C6                          1869   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000021C6  13FC 0082 00004422      1870             MOVE.B   #$82,DEST_REGISTER_FORMAT
000021CE  13FC 0000 00004423      1871             MOVE.B   #$00,SRC_REGISTER_FORMAT
000021D6                          1872             
000021D6                          1873             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000021D6  13FC 00B9 00004425      1874             MOVE.B   #$B9,GET_DST_START_END
000021DE  13FC 0020 00004426      1875             MOVE.B   #$20,GET_SRC_START_END
000021E6                          1876             
000021E6                          1877              *CLEAR D3
000021E6  4283                    1878              CLR.L   D3
000021E8                          1879              *LOAD STACK WITH THIS OPMODE
000021E8  6100 1912               1880              BSR     PUSH_STACK
000021EC  163C 0043               1881              MOVE.B  #'C',D3
000021F0  6100 190A               1882              BSR     PUSH_STACK
000021F4  163C 004D               1883              MOVE.B  #'M',D3
000021F8  6100 1902               1884              BSR     PUSH_STACK
000021FC  163C 0050               1885              MOVE.B  #'P',D3
00002200  6100 18FA               1886              BSR     PUSH_STACK
00002204  163C 002E               1887              MOVE.B  #'.',D3
00002208  6100 18F2               1888              BSR     PUSH_STACK
0000220C                          1889              
0000220C                          1890              *FIGURE OUT SIZE*
0000220C                          1891              *00 = BYTE
0000220C                          1892              *01 = WORD
0000220C                          1893              *10 = LONG
0000220C                          1894              * BITS 7&6
0000220C                          1895              
0000220C                          1896              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
0000220C  2205                    1897              MOVE.L  D5,D1
0000220E  EC99                    1898              ROR.L   #6,D1
00002210  0281 00000003           1899              ANDI.L  #$03,D1
00002216  0C01 0000               1900              CMPI.B  #%00,D1
0000221A  6700 001E               1901              BEQ     OP1011_CMP_B
0000221E  0281 00000003           1902              ANDI.L  #$03,D1
00002224  0C01 0001               1903              CMPI.B  #%01,D1
00002228  6700 001C               1904              BEQ     OP1011_CMP_W
0000222C  0281 00000003           1905              ANDI.L  #$03,D1
00002232  0C01 0002               1906              CMPI.B  #%10,D1
00002236  6700 001A               1907              BEQ     OP1011_CMP_L
0000223A                          1908            
0000223A                          1909  OP1011_CMP_B
0000223A                          1910              
0000223A  163C 0042               1911              MOVE.B  #'B',D3
0000223E  6100 18BC               1912              BSR     PUSH_STACK
00002242  6000 0016               1913              BRA     OP1011_RETURN_CMP  
00002246                          1914  OP1011_CMP_W
00002246                          1915              
00002246  163C 0057               1916              MOVE.B  #'W',D3
0000224A  6100 18B0               1917              BSR     PUSH_STACK
0000224E  6000 000A               1918              BRA     OP1011_RETURN_CMP  
00002252                          1919  OP1011_CMP_L
00002252                          1920              
00002252  163C 004C               1921              MOVE.B  #'L',D3
00002256  6100 18A4               1922              BSR     PUSH_STACK
0000225A                          1923  OP1011_RETURN_CMP            
0000225A                          1924  
0000225A                          1925              
0000225A                          1926  *GET DATA FROM ADDQ AND PRINT #0-8
0000225A                          1927       
0000225A                          1928              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000225A  0285 0000FE3F           1929              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002260  0685 00000000           1930              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002266                          1931  
00002266  6100 0FF6               1932              BSR     GET_EA_EA_SRC
0000226A  163C 002C               1933              MOVE.B  #',',D3
0000226E  6100 188C               1934              BSR     PUSH_STACK
00002272  6100 141A               1935              BSR     GET_EA_EA_DEST
00002276                          1936              
00002276  4E75                    1937              RTS
00002278                          1938              
00002278                          1939  
00002278                          1940  
00002278                          1941  OP1011_CMPA
00002278  4E75                    1942              RTS
0000227A                          1943  OP1011_EOR
0000227A                          1944  
0000227A                          1945   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000227A  13FC 0082 00004422      1946             MOVE.B   #$82,DEST_REGISTER_FORMAT
00002282  13FC 0080 00004423      1947             MOVE.B   #$80,SRC_REGISTER_FORMAT
0000228A                          1948             
0000228A                          1949             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000228A  13FC 00B9 00004425      1950             MOVE.B   #$B9,GET_DST_START_END
00002292  13FC 0020 00004426      1951             MOVE.B   #$20,GET_SRC_START_END
0000229A                          1952             
0000229A                          1953              *CLEAR D3
0000229A  4283                    1954              CLR.L   D3
0000229C                          1955              *LOAD STACK WITH THIS OPMODE
0000229C  6100 185E               1956              BSR     PUSH_STACK
000022A0  163C 0045               1957              MOVE.B  #'E',D3
000022A4  6100 1856               1958              BSR     PUSH_STACK
000022A8  163C 004F               1959              MOVE.B  #'O',D3
000022AC  6100 184E               1960              BSR     PUSH_STACK
000022B0  163C 0052               1961              MOVE.B  #'R',D3
000022B4  6100 1846               1962              BSR     PUSH_STACK
000022B8  163C 002E               1963              MOVE.B  #'.',D3
000022BC  6100 183E               1964              BSR     PUSH_STACK
000022C0                          1965              
000022C0                          1966              *FIGURE OUT SIZE*
000022C0                          1967              *00 = BYTE
000022C0                          1968              *01 = WORD
000022C0                          1969              *10 = LONG
000022C0                          1970              * BITS 7&6
000022C0                          1971              
000022C0                          1972              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
000022C0  2205                    1973              MOVE.L  D5,D1
000022C2  EC99                    1974              ROR.L   #6,D1
000022C4  0281 00000003           1975              ANDI.L  #$03,D1
000022CA  0C01 0000               1976              CMPI.B  #%00,D1
000022CE  6700 001E               1977              BEQ     OP1011_EOR_B
000022D2  0281 00000003           1978              ANDI.L  #$03,D1
000022D8  0C01 0001               1979              CMPI.B  #%01,D1
000022DC  6700 001C               1980              BEQ     OP1011_EOR_W
000022E0  0281 00000003           1981              ANDI.L  #$03,D1
000022E6  0C01 0002               1982              CMPI.B  #%10,D1
000022EA  6700 001A               1983              BEQ     OP1011_EOR_L
000022EE                          1984            
000022EE                          1985  OP1011_EOR_B
000022EE                          1986              
000022EE  163C 0042               1987              MOVE.B  #'B',D3
000022F2  6100 1808               1988              BSR     PUSH_STACK
000022F6  6000 0016               1989              BRA     OP1011_RETURN
000022FA                          1990  OP1011_EOR_W
000022FA                          1991              
000022FA  163C 0057               1992              MOVE.B  #'W',D3
000022FE  6100 17FC               1993              BSR     PUSH_STACK
00002302  6000 000A               1994              BRA     OP1011_RETURN
00002306                          1995  OP1011_EOR_L
00002306                          1996              
00002306  163C 004C               1997              MOVE.B  #'L',D3
0000230A  6100 17F0               1998              BSR     PUSH_STACK
0000230E                          1999  OP1011_RETURN            
0000230E                          2000  
0000230E                          2001              
0000230E                          2002  *GET DATA FROM ADDQ AND PRINT #0-8
0000230E                          2003       
0000230E                          2004              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000230E  0285 0000FE3F           2005              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002314  0685 00000000           2006              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
0000231A                          2007  
0000231A  6100 1372               2008              BSR     GET_EA_EA_DEST
0000231E  163C 002C               2009              MOVE.B  #',',D3
00002322  6100 17D8               2010              BSR     PUSH_STACK
00002326  6100 0F36               2011              BSR     GET_EA_EA_SRC
0000232A                          2012              
0000232A  4E75                    2013              RTS
0000232C                          2014              
0000232C                          2015              
0000232C                          2016              
0000232C                          2017              
0000232C                          2018  
0000232C                          2019  *---------------------------------------------------------------------------*
0000232C                          2020  * OP_CMPA: display CMPA 
0000232C                          2021  *---------------------------------------------------------------------------
0000232C  43F9 000042A0           2022  OP_CMPA_W   LEA     DISP_CMPA_W,A1
00002332  103C 000E               2023              MOVE.B  #14,D0
00002336  4E4F                    2024              TRAP    #15
00002338  183C 0001               2025              MOVE.B  #1,D4
0000233C  4E75                    2026              RTS
0000233E                          2027  
0000233E  43F9 000042AA           2028  OP_CMPA_L   LEA     DISP_CMPA_L,A1
00002344  103C 000E               2029              MOVE.B  #14,D0
00002348  4E4F                    2030              TRAP    #15
0000234A  183C 0002               2031              MOVE.B  #2,D4
0000234E  4E75                    2032              RTS
00002350                          2033  
00002350                          2034  *---------------------------------------------------------------------------*
00002350                          2035  * OP_CMP: display CMP and proceed to EA
00002350                          2036  *---------------------------------------------------------------------------*  
00002350  43F9 00004285           2037  OP_CMP_B    LEA     DISP_CMP_B,A1
00002356  103C 000E               2038              MOVE.B  #14,D0
0000235A  4E4F                    2039              TRAP    #15
0000235C  183C 0000               2040              MOVE.B  #0,D4
00002360  4EF9 00002E0E           2041              JMP     EA_GEN
00002366                          2042  
00002366  4E75                    2043              RTS
00002368                          2044              
00002368  43F9 0000428E           2045  OP_CMP_W    LEA     DISP_CMP_W,A1
0000236E  103C 000E               2046              MOVE.B  #14,D0
00002372  4E4F                    2047              TRAP    #15
00002374  183C 0001               2048              MOVE.B  #1,D4
00002378  4EF9 00002E0E           2049              JMP     EA_GEN
0000237E                          2050  
0000237E  4E75                    2051              RTS
00002380                          2052              
00002380  43F9 00004297           2053  OP_CMP_L    LEA     DISP_CMP_L,A1
00002386  103C 000E               2054              MOVE.B  #14,D0
0000238A  4E4F                    2055              TRAP    #15
0000238C  183C 0002               2056              MOVE.B  #2,D4
00002390  4EF9 00002E0E           2057              JMP     EA_GEN
00002396                          2058  
00002396  4E75                    2059              RTS
00002398                          2060              
00002398                          2061  *---------------------------------------------------------------------------*
00002398                          2062  * OP_EOR: display EOR
00002398                          2063  *---------------------------------------------------------------------------*  
00002398  43F9 0000426A           2064  OP_EOR_B    LEA     DISP_EOR_B,A1
0000239E  103C 000E               2065              MOVE.B  #14,D0
000023A2  4E4F                    2066              TRAP    #15
000023A4  183C 0000               2067              MOVE.B  #0,D4
000023A8  4E75                    2068              RTS
000023AA                          2069              
000023AA  43F9 00004273           2070  OP_EOR_W    LEA     DISP_EOR_W,A1
000023B0  103C 000E               2071              MOVE.B  #14,D0
000023B4  4E4F                    2072              TRAP    #15
000023B6  183C 0001               2073              MOVE.B  #1,D4
000023BA  4E75                    2074              RTS
000023BC                          2075              
000023BC  43F9 0000427C           2076  OP_EOR_L    LEA     DISP_EOR_L,A1
000023C2  103C 000E               2077              MOVE.B  #14,D0
000023C6  4E4F                    2078              TRAP    #15
000023C8  183C 0002               2079              MOVE.B  #2,D4
000023CC  4E75                    2080              RTS    
000023CE                          2081  
000023CE                          2082  *---------------------------------------------------------------------------*
000023CE                          2083  * OP1100: Decode and display MULS/AND and proceed to EA
000023CE                          2084  *---------------------------------------------------------------------------* 
000023CE  4280                    2085  OP1100      CLR.L   D0                 
000023D0  4281                    2086              CLR.L   D1    
000023D2  4284                    2087              CLR.L   D4                
000023D4  227C 00000000           2088              MOVEA.L #0, A1        
000023DA  2205                    2089              MOVE.L  D5,D1
000023DC  EA89                    2090              LSR.L   #5,D1
000023DE  0281 0000000E           2091              ANDI.L  #$E,D1
000023E4  0C41 000E               2092              CMPI.W  #$E,D1
000023E8  6700 0006               2093              BEQ     OP_MULS
000023EC  6000 00F6               2094              BRA     OP1100_DETERMINE_DN_EA_OR_EA_DN 
000023F0                          2095  
000023F0                          2096  OP_MULS                      
000023F0  4281                    2097              CLR.L   D1       
000023F2  4284                    2098              CLR.L   D4                   
000023F4  227C 00000000           2099              MOVEA.L #0, A1              
000023FA  2205                    2100              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
000023FC                          2101              *CLEAR D3
000023FC  4283                    2102              CLR.L   D3
000023FE                          2103  
000023FE                          2104  OP1100_MULS_DN_EA_OR_EA_DN 
000023FE                          2105              *LOAD STACK WITH THIS OPMODE
000023FE  6100 16FC               2106              BSR     PUSH_STACK
00002402  163C 004D               2107              MOVE.B  #'M',D3
00002406  6100 16F4               2108              BSR     PUSH_STACK
0000240A  163C 0055               2109              MOVE.B  #'U',D3
0000240E  6100 16EC               2110              BSR     PUSH_STACK
00002412  163C 004C               2111              MOVE.B  #'L',D3
00002416  6100 16E4               2112              BSR     PUSH_STACK
0000241A  163C 0053               2113              MOVE.B  #'S',D3
0000241E  6100 16DC               2114              BSR     PUSH_STACK
00002422  163C 002E               2115              MOVE.B  #'.',D3
00002426  6100 16D4               2116              BSR     PUSH_STACK
0000242A                          2117              
0000242A  2205                    2118              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
0000242C                          2119              
0000242C                          2120  OP1100_EA_DN_MULS           
0000242C                          2121              *BITS (7 TO 6) 
0000242C                          2122              *00 = .B
0000242C                          2123              *01 = .W
0000242C                          2124              *10 = .L 
0000242C  2205                    2125              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
0000242E  EC99                    2126              ROR.L   #6,D1
00002430  0281 00000003           2127              ANDI.L  #$03,D1
00002436  0C81 00000003           2128              CMPI.L  #%11,D1 *EQUALS .W
0000243C  6700 0014               2129              BEQ     OP1100_PRINT_W_MULS
00002440  0C81 00000000           2130              CMPI.L  #%00,D1 *EQUALS .L
00002446  6700 0052               2131              BEQ     OP1100_PRINT_L_MULS
0000244A                          2132              
0000244A  183C 0001               2133              MOVE.B  #1,D4               *ERROR READ
0000244E  6000 0092               2134              BRA     OP1100_MULS_RETURN
00002452                          2135  OP1100_PRINT_W_MULS
00002452  163C 0057               2136              MOVE.B  #'W',D3
00002456  6100 16A4               2137              BSR     PUSH_STACK
0000245A                          2138  
0000245A                          2139              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000245A  13FC 0000 00004422      2140              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002462  13FC 0000 00004423      2141              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000246A                          2142             
0000246A                          2143              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000246A  13FC 00B9 00004425      2144              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002472  13FC 0020 00004426      2145              MOVE.B   #$20,GET_SRC_START_END
0000247A                          2146  
0000247A                          2147             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000247A  0285 0000FE3F           2148              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002480  0685 00000000           2149              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002486                          2150  
00002486                          2151              
00002486  6100 0DD6               2152              BSR     GET_EA_EA_SRC      *GETS <ea>
0000248A  163C 002C               2153              MOVE.B  #',',D3
0000248E  6100 166C               2154              BSR     PUSH_STACK
00002492  6100 11FA               2155              BSR     GET_EA_EA_DEST       *GETS Dn    
00002496                          2156              
00002496  6000 004A               2157              BRA     OP1100_MULS_RETURN
0000249A                          2158  OP1100_PRINT_L_MULS 
0000249A  163C 004C               2159              MOVE.B  #'L',D3
0000249E  6100 165C               2160              BSR     PUSH_STACK
000024A2                          2161              
000024A2                          2162              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000024A2  13FC 0000 00004422      2163              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000024AA  13FC 0000 00004423      2164              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000024B2                          2165             
000024B2                          2166              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000024B2  13FC 00B9 00004425      2167              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000024BA  13FC 0020 00004426      2168              MOVE.B   #$20,GET_SRC_START_END
000024C2                          2169  
000024C2                          2170              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000024C2  0285 0000FE3F           2171              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000024C8  0685 00000000           2172              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
000024CE                          2173  
000024CE                          2174                     
000024CE  6100 0D8E               2175              BSR     GET_EA_EA_SRC      *GETS <ea>
000024D2  163C 002C               2176              MOVE.B  #',',D3
000024D6  6100 1624               2177              BSR     PUSH_STACK                  
000024DA  6100 11B2               2178              BSR     GET_EA_EA_DEST       *GETS Dn    
000024DE                          2179  
000024DE                          2180              
000024DE  6000 0002               2181              BRA     OP1100_MULS_RETURN
000024E2                          2182              
000024E2                          2183  OP1100_MULS_RETURN
000024E2  4E75                    2184              RTS
000024E4                          2185              
000024E4                          2186  
000024E4                          2187  
000024E4                          2188  
000024E4                          2189  
000024E4                          2190  
000024E4                          2191  
000024E4                          2192  
000024E4                          2193  
000024E4                          2194  
000024E4                          2195  
000024E4                          2196  
000024E4                          2197  
000024E4                          2198  OP1100_DETERMINE_DN_EA_OR_EA_DN 
000024E4                          2199              *LOAD STACK WITH THIS OPMODE
000024E4  4283                    2200              CLR.L   D3
000024E6  6100 1614               2201              BSR     PUSH_STACK
000024EA  163C 0041               2202              MOVE.B  #'A',D3
000024EE  6100 160C               2203              BSR     PUSH_STACK
000024F2  163C 004E               2204              MOVE.B  #'N',D3
000024F6  6100 1604               2205              BSR     PUSH_STACK
000024FA  163C 0044               2206              MOVE.B  #'D',D3
000024FE  6100 15FC               2207              BSR     PUSH_STACK
00002502  163C 002E               2208              MOVE.B  #'.',D3
00002506  6100 15F4               2209              BSR     PUSH_STACK
0000250A                          2210              
0000250A  2205                    2211              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
0000250C                          2212              
0000250C                          2213              *BITS (INDEX 8) 
0000250C                          2214              *0 = ADD.B/W/L <EA>,Dn
0000250C                          2215              *1 = ADD.B/W/L Dn,<EA> 
0000250C  E099                    2216              ROR.L   #8,D1
0000250E  0281 00000001           2217              ANDI.L  #$01,D1     *MASKS WITH 00000001
00002514  0C81 00000000           2218              CMPI.L  #$00,D1     *IF EQUALS <ea>,Dn
0000251A  6700 0102               2219              BEQ     OP1100_EA_DN
0000251E                          2220              *else procede to Dn_EA
0000251E                          2221              
0000251E                          2222  OP1100_DN_EA
0000251E                          2223              *BITS (7 TO 6) 
0000251E                          2224              *00 = .B
0000251E                          2225              *01 = .W
0000251E                          2226              *10 = .L 
0000251E  2205                    2227              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00002520  EC99                    2228              ROR.L   #6,D1
00002522  0281 00000003           2229              ANDI.L  #$03,D1
00002528  0C81 00000000           2230              CMPI.L  #$00,D1 *EQUALS .B
0000252E  6700 0016               2231              BEQ     OP1100_PRINT_B2
00002532  0C81 00000001           2232              CMPI.L  #$01,D1 *EQUALS .W
00002538  6700 0054               2233              BEQ     OP1100_PRINT_W2
0000253C  0C81 00000002           2234              CMPI.L  #$02,D1 *EQUALS .L
00002542  6700 0092               2235              BEQ     OP1100_PRINT_L2
00002546                          2236  OP1100_PRINT_B2
00002546                          2237              *PUSH 'B'
00002546  163C 0042               2238              MOVE.B  #'B',D3
0000254A  6100 15B0               2239              BSR     PUSH_STACK
0000254E                          2240             
0000254E                          2241              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000254E  13FC 0000 00004422      2242             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002556  13FC 0083 00004423      2243             MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000255E                          2244             
0000255E                          2245             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000255E  13FC 00B9 00004425      2246             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002566  13FC 0020 00004426      2247             MOVE.B   #$20,GET_SRC_START_END
0000256E                          2248  
0000256E                          2249              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000256E  0285 0000FE3F           2250              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002574  0685 00000000           2251              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
0000257A                          2252       
0000257A  6100 1112               2253              BSR     GET_EA_EA_DEST      *GETS Dn
0000257E  163C 002C               2254              MOVE.B  #',',D3
00002582  6100 1578               2255              BSR     PUSH_STACK                     
00002586  6100 0CD6               2256              BSR     GET_EA_EA_SRC       *GETS <ea>
0000258A                          2257  
0000258A                          2258              
0000258A  6000 0192               2259              BRA     OP1100_AND_RETURN
0000258E                          2260  OP1100_PRINT_W2
0000258E  163C 0057               2261              MOVE.B  #'W',D3
00002592  6100 1568               2262              BSR     PUSH_STACK
00002596                          2263  
00002596                          2264              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002596  13FC 0000 00004422      2265              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000259E  13FC 0083 00004423      2266              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000025A6                          2267             
000025A6                          2268              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000025A6  13FC 00B9 00004425      2269              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000025AE  13FC 0020 00004426      2270              MOVE.B   #$20,GET_SRC_START_END
000025B6                          2271  
000025B6                          2272              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000025B6  0285 0000FE3F           2273              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000025BC  0685 00000000           2274              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A An Register (001) 
000025C2                          2275  
000025C2                          2276        
000025C2  6100 10CA               2277              BSR     GET_EA_EA_DEST      *GETS Dn
000025C6  163C 002C               2278              MOVE.B  #',',D3
000025CA  6100 1530               2279              BSR     PUSH_STACK               
000025CE  6100 0C8E               2280              BSR     GET_EA_EA_SRC       *GETS <ea>       
000025D2                          2281  
000025D2                          2282  
000025D2                          2283  
000025D2  6000 049A               2284              BRA     OP1101_ADD_RETURN
000025D6                          2285  OP1100_PRINT_L2 
000025D6  163C 004C               2286              MOVE.B  #'L',D3
000025DA  6100 1520               2287              BSR     PUSH_STACK
000025DE                          2288              
000025DE                          2289              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000025DE  13FC 0000 00004422      2290              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000025E6  13FC 0083 00004423      2291              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000025EE                          2292             
000025EE                          2293              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000025EE  13FC 00B9 00004425      2294              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000025F6  13FC 0020 00004426      2295              MOVE.B   #$20,GET_SRC_START_END
000025FE                          2296  
000025FE                          2297             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000025FE  0285 0000FE3F           2298              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002604  0685 00000000           2299              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
0000260A                          2300  
0000260A                          2301               
0000260A  6100 1082               2302              BSR     GET_EA_EA_DEST       *GETS Dn
0000260E  163C 002C               2303              MOVE.B  #',',D3
00002612  6100 14E8               2304              BSR     PUSH_STACK          
00002616  6100 0C46               2305              BSR     GET_EA_EA_SRC        *GETS <ea>
0000261A                          2306  
0000261A  6000 0102               2307              BRA     OP1100_AND_RETURN
0000261E                          2308              
0000261E                          2309  OP1100_EA_DN           
0000261E                          2310              *BITS (7 TO 6) 
0000261E                          2311              *00 = .B
0000261E                          2312              *01 = .W
0000261E                          2313              *10 = .L 
0000261E  2205                    2314              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00002620  EC99                    2315              ROR.L   #6,D1
00002622  0281 00000003           2316              ANDI.L  #$03,D1
00002628  0C81 00000000           2317              CMPI.L  #$00,D1 *EQUALS .B
0000262E  6700 0016               2318              BEQ     OP1100_PRINT_B
00002632  0C81 00000001           2319              CMPI.L  #$01,D1 *EQUALS .W
00002638  6700 0054               2320              BEQ     OP1100_PRINT_W
0000263C  0C81 00000002           2321              CMPI.L  #$02,D1 *EQUALS .L
00002642  6700 0092               2322              BEQ     OP1100_PRINT_L
00002646                          2323  OP1100_PRINT_B
00002646  163C 0042               2324              MOVE.B  #'B',D3
0000264A  6100 14B0               2325              BSR     PUSH_STACK
0000264E                          2326                
0000264E                          2327              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000264E  13FC 0000 00004422      2328              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002656  13FC 0002 00004423      2329              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000265E                          2330             
0000265E                          2331              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000265E  13FC 00B9 00004425      2332              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002666  13FC 0020 00004426      2333              MOVE.B   #$20,GET_SRC_START_END
0000266E                          2334  
0000266E                          2335             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000266E  0285 0000FE3F           2336              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002674  0685 00000000           2337              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "AN" Register (001) 
0000267A                          2338  
0000267A                          2339              
0000267A  6100 0BE2               2340              BSR     GET_EA_EA_SRC      *GETS <ea>
0000267E  163C 002C               2341              MOVE.B  #',',D3
00002682  6100 1478               2342              BSR     PUSH_STACK          
00002686  6100 1006               2343              BSR     GET_EA_EA_DEST       *GETS Dn
0000268A                          2344              
0000268A  6000 03E2               2345              BRA     OP1101_ADD_RETURN
0000268E                          2346  OP1100_PRINT_W
0000268E  163C 0057               2347              MOVE.B  #'W',D3
00002692  6100 1468               2348              BSR     PUSH_STACK
00002696                          2349  
00002696                          2350              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002696  13FC 0000 00004422      2351              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000269E  13FC 0002 00004423      2352              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000026A6                          2353             
000026A6                          2354              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000026A6  13FC 00B9 00004425      2355              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000026AE  13FC 0020 00004426      2356              MOVE.B   #$20,GET_SRC_START_END
000026B6                          2357  
000026B6                          2358             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000026B6  0285 0000FE3F           2359              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000026BC  0685 00000000           2360              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
000026C2                          2361  
000026C2                          2362              
000026C2  6100 0B9A               2363              BSR     GET_EA_EA_SRC      *GETS <ea>
000026C6  163C 002C               2364              MOVE.B  #',',D3
000026CA  6100 1430               2365              BSR     PUSH_STACK
000026CE  6100 0FBE               2366              BSR     GET_EA_EA_DEST       *GETS Dn    
000026D2                          2367              
000026D2  6000 FA26               2368              BRA     OP1001_ADD_RETURN
000026D6                          2369  OP1100_PRINT_L 
000026D6  163C 004C               2370              MOVE.B  #'L',D3
000026DA  6100 1420               2371              BSR     PUSH_STACK
000026DE                          2372              
000026DE                          2373              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000026DE  13FC 0000 00004422      2374              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000026E6  13FC 0002 00004423      2375              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000026EE                          2376             
000026EE                          2377              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000026EE  13FC 00B9 00004425      2378              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000026F6  13FC 0020 00004426      2379              MOVE.B   #$20,GET_SRC_START_END
000026FE                          2380  
000026FE                          2381              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000026FE  0285 0000FE3F           2382              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002704  0685 00000000           2383              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
0000270A                          2384  
0000270A                          2385                     
0000270A  6100 0B52               2386              BSR     GET_EA_EA_SRC      *GETS <ea>
0000270E  163C 002C               2387              MOVE.B  #',',D3
00002712  6100 13E8               2388              BSR     PUSH_STACK                  
00002716  6100 0F76               2389              BSR     GET_EA_EA_DEST       *GETS Dn    
0000271A                          2390  
0000271A                          2391              
0000271A  6000 0002               2392              BRA     OP1100_AND_RETURN
0000271E                          2393              
0000271E                          2394  OP1100_AND_RETURN
0000271E  4E75                    2395              RTS
00002720                          2396  
00002720                          2397  
00002720                          2398  *---------------------------------------------------------------------------*
00002720                          2399  * OP1101: Decode ADD/ADDA
00002720                          2400  *---------------------------------------------------------------------------* 
00002720  4280                    2401  OP1101      CLR.L   D0                  
00002722  4281                    2402              CLR.L   D1       
00002724  4284                    2403              CLR.L   D4                   
00002726  227C 00000000           2404              MOVEA.L #0, A1              
0000272C  2205                    2405              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
0000272E                          2406              
0000272E                          2407              *CLEAR D3
0000272E  4283                    2408              CLR.L   D3
00002730                          2409              
00002730                          2410              
00002730                          2411              
00002730                          2412              **INTEGRATING ADDA.W/.L INTO THIS CODE**
00002730  2205                    2413              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00002732                          2414              *BITS (INDEX 8) 
00002732                          2415              *0 = ADD.B/W/L <EA>,Dn
00002732                          2416              *1 = ADD.B/W/L Dn,<EA> 
00002732  EC99                    2417              ROR.L   #6,D1
00002734  0281 00000007           2418              ANDI.L  #$07,D1                 *MASKS WITH 00000111
0000273A  0C81 00000007           2419              CMPI.L  #$07,D1                 *IF EQUALS <ea>,Dn
00002740  6700 0010               2420              BEQ     OP1101_ADDA_L            *BRANCHES TO ADDA.L
00002744  0C81 00000003           2421              CMPI.L  #$03,D1                 *IF EQUALS <ea>,Dn
0000274A  6700 0078               2422              BEQ     OP1101_ADDA_W           *BRANCHES TO ADDA.W
0000274E  6000 00E6               2423              BRA     OP1101_DETERMINE_DN_EA_OR_EA_DN         *ELSE CHECK ADD.B/.W/.L
00002752                          2424              
00002752                          2425  OP1101_ADDA_L
00002752                          2426              *LOAD STACK WITH THIS OPMODE
00002752  6100 13A8               2427              BSR     PUSH_STACK
00002756  163C 0041               2428              MOVE.B  #'A',D3
0000275A  6100 13A0               2429              BSR     PUSH_STACK
0000275E  163C 0044               2430              MOVE.B  #'D',D3
00002762  6100 1398               2431              BSR     PUSH_STACK
00002766  163C 0044               2432              MOVE.B  #'D',D3
0000276A  6100 1390               2433              BSR     PUSH_STACK
0000276E  163C 0041               2434              MOVE.B  #'A',D3
00002772  6100 1388               2435              BSR     PUSH_STACK
00002776  163C 002E               2436              MOVE.B  #'.',D3
0000277A  6100 1380               2437              BSR     PUSH_STACK
0000277E  163C 004C               2438              MOVE.B  #'L',D3
00002782  6100 1378               2439              BSR     PUSH_STACK
00002786                          2440              
00002786                          2441             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002786  13FC 0000 00004422      2442             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000278E  13FC 0000 00004423      2443             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002796                          2444             
00002796                          2445             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002796  13FC 00B9 00004425      2446             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000279E  13FC 0020 00004426      2447             MOVE.B   #$20,GET_SRC_START_END
000027A6                          2448  
000027A6                          2449              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000027A6  0285 0000FE3F           2450              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000027AC  0685 00000040           2451              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
000027B2                          2452       
000027B2                          2453              *PRINT <EA>,AN
000027B2  6100 0AAA               2454              BSR     GET_EA_EA_SRC       *GETS <ea>
000027B6  163C 002C               2455              MOVE.B  #',',D3
000027BA  6100 1340               2456              BSR     PUSH_STACK                     
000027BE  6100 0ECE               2457              BSR     GET_EA_EA_DEST      *GETS Dn
000027C2                          2458  
000027C2                          2459              
000027C2                          2460              
000027C2  4E75                    2461              RTS
000027C4                          2462  OP1101_ADDA_W
000027C4                          2463              *LOAD STACK WITH THIS OPMODE
000027C4  6100 1336               2464              BSR     PUSH_STACK
000027C8  163C 0041               2465              MOVE.B  #'A',D3
000027CC  6100 132E               2466              BSR     PUSH_STACK
000027D0  163C 0044               2467              MOVE.B  #'D',D3
000027D4  6100 1326               2468              BSR     PUSH_STACK
000027D8  163C 0044               2469              MOVE.B  #'D',D3
000027DC  6100 131E               2470              BSR     PUSH_STACK
000027E0  163C 0041               2471              MOVE.B  #'A',D3
000027E4  6100 1316               2472              BSR     PUSH_STACK
000027E8  163C 002E               2473              MOVE.B  #'.',D3
000027EC  6100 130E               2474              BSR     PUSH_STACK
000027F0  163C 0057               2475              MOVE.B  #'W',D3
000027F4  6100 1306               2476              BSR     PUSH_STACK
000027F8                          2477              
000027F8                          2478             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000027F8  13FC 0000 00004422      2479             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002800  13FC 0000 00004423      2480             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002808                          2481             
00002808                          2482             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002808  13FC 00B9 00004425      2483             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002810  13FC 0020 00004426      2484             MOVE.B   #$20,GET_SRC_START_END
00002818                          2485  
00002818                          2486              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002818  0285 0000FE3F           2487              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000281E  0685 00000040           2488              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002824                          2489       
00002824                          2490              *PRINT <EA>,AN
00002824  6100 0A38               2491              BSR     GET_EA_EA_SRC       *GETS <ea>
00002828  163C 002C               2492              MOVE.B  #',',D3
0000282C  6100 12CE               2493              BSR     PUSH_STACK                     
00002830  6100 0E5C               2494              BSR     GET_EA_EA_DEST      *GETS Dn
00002834                          2495  
00002834  4E75                    2496              RTS
00002836                          2497  
00002836                          2498  OP1101_DETERMINE_DN_EA_OR_EA_DN 
00002836                          2499              *LOAD STACK WITH THIS OPMODE
00002836  6100 12C4               2500              BSR     PUSH_STACK
0000283A  163C 0041               2501              MOVE.B  #'A',D3
0000283E  6100 12BC               2502              BSR     PUSH_STACK
00002842  163C 0044               2503              MOVE.B  #'D',D3
00002846  6100 12B4               2504              BSR     PUSH_STACK
0000284A  163C 0044               2505              MOVE.B  #'D',D3
0000284E  6100 12AC               2506              BSR     PUSH_STACK
00002852  163C 002E               2507              MOVE.B  #'.',D3
00002856  6100 12A4               2508              BSR     PUSH_STACK
0000285A                          2509              
0000285A  2205                    2510              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
0000285C                          2511              
0000285C                          2512              *BITS (INDEX 8) 
0000285C                          2513              *0 = ADD.B/W/L <EA>,Dn
0000285C                          2514              *1 = ADD.B/W/L Dn,<EA> 
0000285C  E099                    2515              ROR.L   #8,D1
0000285E  0281 00000001           2516              ANDI.L  #$01,D1     *MASKS WITH 00000001
00002864  0C81 00000000           2517              CMPI.L  #$00,D1     *IF EQUALS <ea>,Dn
0000286A  6700 0102               2518              BEQ     OP1101_EA_DN
0000286E                          2519              *else procede to Dn_EA
0000286E                          2520              
0000286E                          2521  OP1101_DN_EA
0000286E                          2522              *BITS (7 TO 6) 
0000286E                          2523              *00 = .B
0000286E                          2524              *01 = .W
0000286E                          2525              *10 = .L 
0000286E  2205                    2526              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00002870  EC99                    2527              ROR.L   #6,D1
00002872  0281 00000003           2528              ANDI.L  #$03,D1
00002878  0C81 00000000           2529              CMPI.L  #$00,D1 *EQUALS .B
0000287E  6700 0016               2530              BEQ     OP1101_PRINT_B2
00002882  0C81 00000001           2531              CMPI.L  #$01,D1 *EQUALS .W
00002888  6700 0054               2532              BEQ     OP1101_PRINT_W2
0000288C  0C81 00000002           2533              CMPI.L  #$02,D1 *EQUALS .L
00002892  6700 0092               2534              BEQ     OP1101_PRINT_L2
00002896                          2535  OP1101_PRINT_B2
00002896                          2536              *PUSH 'B'
00002896  163C 0042               2537              MOVE.B  #'B',D3
0000289A  6100 1260               2538              BSR     PUSH_STACK
0000289E                          2539             
0000289E                          2540              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000289E  13FC 0002 00004422      2541             MOVE.B   #$02,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000028A6  13FC 0083 00004423      2542             MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000028AE                          2543             
000028AE                          2544             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000028AE  13FC 00B9 00004425      2545             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000028B6  13FC 0020 00004426      2546             MOVE.B   #$20,GET_SRC_START_END
000028BE                          2547  
000028BE                          2548              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000028BE  0285 0000FE3F           2549              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000028C4  0685 00000000           2550              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
000028CA                          2551       
000028CA  6100 0DC2               2552              BSR     GET_EA_EA_DEST      *GETS Dn
000028CE  163C 002C               2553              MOVE.B  #',',D3
000028D2  6100 1228               2554              BSR     PUSH_STACK                     
000028D6  6100 0986               2555              BSR     GET_EA_EA_SRC       *GETS <ea>
000028DA                          2556  
000028DA                          2557              
000028DA  6000 0192               2558              BRA     OP1101_ADD_RETURN
000028DE                          2559  OP1101_PRINT_W2
000028DE  163C 0057               2560              MOVE.B  #'W',D3
000028E2  6100 1218               2561              BSR     PUSH_STACK
000028E6                          2562  
000028E6                          2563              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000028E6  13FC 0000 00004422      2564              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000028EE  13FC 0083 00004423      2565              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000028F6                          2566             
000028F6                          2567              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000028F6  13FC 00B9 00004425      2568              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000028FE  13FC 0020 00004426      2569              MOVE.B   #$20,GET_SRC_START_END
00002906                          2570  
00002906                          2571              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002906  0285 0000FE3F           2572              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000290C  0685 00000000           2573              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002912                          2574  
00002912                          2575        
00002912  6100 0D7A               2576              BSR     GET_EA_EA_DEST      *GETS Dn
00002916  163C 002C               2577              MOVE.B  #',',D3
0000291A  6100 11E0               2578              BSR     PUSH_STACK               
0000291E  6100 093E               2579              BSR     GET_EA_EA_SRC       *GETS <ea>       
00002922                          2580  
00002922                          2581  
00002922                          2582  
00002922  6000 014A               2583              BRA     OP1101_ADD_RETURN
00002926                          2584  OP1101_PRINT_L2 
00002926  163C 004C               2585              MOVE.B  #'L',D3
0000292A  6100 11D0               2586              BSR     PUSH_STACK
0000292E                          2587              
0000292E                          2588              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000292E  13FC 0000 00004422      2589              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002936  13FC 0083 00004423      2590              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000293E                          2591             
0000293E                          2592              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000293E  13FC 00B9 00004425      2593              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002946  13FC 0020 00004426      2594              MOVE.B   #$20,GET_SRC_START_END
0000294E                          2595  
0000294E                          2596             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000294E  0285 0000FE3F           2597              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002954  0685 00000000           2598              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
0000295A                          2599  
0000295A                          2600               
0000295A  6100 0D32               2601              BSR     GET_EA_EA_DEST       *GETS Dn
0000295E  163C 002C               2602              MOVE.B  #',',D3
00002962  6100 1198               2603              BSR     PUSH_STACK          
00002966  6100 08F6               2604              BSR     GET_EA_EA_SRC        *GETS <ea>
0000296A                          2605  
0000296A  6000 0102               2606              BRA     OP1101_ADD_RETURN
0000296E                          2607              
0000296E                          2608  OP1101_EA_DN           
0000296E                          2609              *BITS (7 TO 6) 
0000296E                          2610              *00 = .B
0000296E                          2611              *01 = .W
0000296E                          2612              *10 = .L 
0000296E  2205                    2613              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00002970  EC99                    2614              ROR.L   #6,D1
00002972  0281 00000003           2615              ANDI.L  #$03,D1
00002978  0C81 00000000           2616              CMPI.L  #$00,D1 *EQUALS .B
0000297E  6700 0016               2617              BEQ     OP1101_PRINT_B
00002982  0C81 00000001           2618              CMPI.L  #$01,D1 *EQUALS .W
00002988  6700 0054               2619              BEQ     OP1101_PRINT_W
0000298C  0C81 00000002           2620              CMPI.L  #$02,D1 *EQUALS .L
00002992  6700 0092               2621              BEQ     OP1101_PRINT_L
00002996                          2622  OP1101_PRINT_B
00002996  163C 0042               2623              MOVE.B  #'B',D3
0000299A  6100 1160               2624              BSR     PUSH_STACK
0000299E                          2625                
0000299E                          2626              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000299E  13FC 0002 00004422      2627              MOVE.B   #$02,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000029A6  13FC 0002 00004423      2628              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000029AE                          2629             
000029AE                          2630              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000029AE  13FC 00B9 00004425      2631              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000029B6  13FC 0020 00004426      2632              MOVE.B   #$20,GET_SRC_START_END
000029BE                          2633  
000029BE                          2634             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000029BE  0285 0000FE3F           2635              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000029C4  0685 00000000           2636              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
000029CA                          2637  
000029CA                          2638              
000029CA  6100 0892               2639              BSR     GET_EA_EA_SRC      *GETS <ea>
000029CE  163C 002C               2640              MOVE.B  #',',D3
000029D2  6100 1128               2641              BSR     PUSH_STACK          
000029D6  6100 0CB6               2642              BSR     GET_EA_EA_DEST       *GETS Dn
000029DA                          2643              
000029DA  6000 0092               2644              BRA     OP1101_ADD_RETURN
000029DE                          2645  OP1101_PRINT_W
000029DE  163C 0057               2646              MOVE.B  #'W',D3
000029E2  6100 1118               2647              BSR     PUSH_STACK
000029E6                          2648  
000029E6                          2649              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000029E6  13FC 0000 00004422      2650              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000029EE  13FC 0000 00004423      2651              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000029F6                          2652             
000029F6                          2653              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000029F6  13FC 00B9 00004425      2654              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000029FE  13FC 0020 00004426      2655              MOVE.B   #$20,GET_SRC_START_END
00002A06                          2656  
00002A06                          2657             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002A06  0285 0000FE3F           2658              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002A0C  0685 00000000           2659              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002A12                          2660  
00002A12                          2661              
00002A12  6100 084A               2662              BSR     GET_EA_EA_SRC      *GETS <ea>
00002A16  163C 002C               2663              MOVE.B  #',',D3
00002A1A  6100 10E0               2664              BSR     PUSH_STACK
00002A1E  6100 0C6E               2665              BSR     GET_EA_EA_DEST       *GETS Dn    
00002A22                          2666              
00002A22  6000 004A               2667              BRA     OP1101_ADD_RETURN
00002A26                          2668  OP1101_PRINT_L 
00002A26  163C 004C               2669              MOVE.B  #'L',D3
00002A2A  6100 10D0               2670              BSR     PUSH_STACK
00002A2E                          2671              
00002A2E                          2672              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002A2E  13FC 0000 00004422      2673              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002A36  13FC 0000 00004423      2674              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002A3E                          2675             
00002A3E                          2676              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002A3E  13FC 00B9 00004425      2677              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002A46  13FC 0020 00004426      2678              MOVE.B   #$20,GET_SRC_START_END
00002A4E                          2679  
00002A4E                          2680              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002A4E  0285 0000FE3F           2681              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002A54  0685 00000000           2682              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002A5A                          2683  
00002A5A                          2684                     
00002A5A  6100 0802               2685              BSR     GET_EA_EA_SRC      *GETS <ea>
00002A5E  163C 002C               2686              MOVE.B  #',',D3
00002A62  6100 1098               2687              BSR     PUSH_STACK                  
00002A66  6100 0C26               2688              BSR     GET_EA_EA_DEST       *GETS Dn    
00002A6A                          2689  
00002A6A                          2690              
00002A6A  6000 0002               2691              BRA     OP1101_ADD_RETURN
00002A6E                          2692              
00002A6E                          2693  OP1101_ADD_RETURN
00002A6E  4E75                    2694              RTS
00002A70                          2695              
00002A70                          2696              *ADDW
00002A70  0C01 0006               2697              CMPI.B  #$6,D1
00002A74  6700 0056               2698              BEQ     OP_ADDA_W
00002A78  0C01 000E               2699              CMPI.B  #$E,D1
00002A7C  6700 0066               2700              BEQ     OP_ADDA_L 
00002A80                          2701  
00002A80  4EF8 14B8               2702              JMP     OP_DATA  
00002A84                          2703            
00002A84                          2704  *---------------------------------------------------------------------------*
00002A84                          2705  * OP_ADD: display ADD and proceed to EA
00002A84                          2706  *---------------------------------------------------------------------------*  
00002A84  43F9 000042D9           2707  OP_ADD_B    LEA     DISP_ADD_B,A1
00002A8A  103C 000E               2708              MOVE.B  #14,D0
00002A8E  4E4F                    2709              TRAP    #15
00002A90  183C 0000               2710              MOVE.B  #0,D4
00002A94  4EF9 00002E0E           2711              JMP     EA_GEN
00002A9A                          2712  
00002A9A  4E75                    2713              RTS
00002A9C                          2714  
00002A9C  43F9 000042E2           2715  OP_ADD_W    LEA     DISP_ADD_W,A1
00002AA2  103C 000E               2716              MOVE.B  #14,D0
00002AA6  4E4F                    2717              TRAP    #15
00002AA8  183C 0001               2718              MOVE.B  #1,D4
00002AAC  4EF9 00002E0E           2719              JMP     EA_GEN
00002AB2                          2720  
00002AB2  4E75                    2721              RTS
00002AB4                          2722  
00002AB4  43F9 000042EB           2723  OP_ADD_L    LEA     DISP_ADD_L,A1
00002ABA  103C 000E               2724              MOVE.B  #14,D0
00002ABE  4E4F                    2725              TRAP    #15
00002AC0  183C 0002               2726              MOVE.B  #2,D4
00002AC4  4EF9 00002E0E           2727              JMP     EA_GEN
00002ACA                          2728  
00002ACA  4E75                    2729              RTS
00002ACC                          2730  
00002ACC                          2731  *---------------------------------------------------------------------------*
00002ACC                          2732  * OP_ADDA: display ADDA and proceed to EA
00002ACC                          2733  *---------------------------------------------------------------------------*  
00002ACC  43F9 000042F4           2734  OP_ADDA_W   LEA     DISP_ADDA_W,A1
00002AD2  103C 000E               2735              MOVE.B  #14,D0
00002AD6  4E4F                    2736              TRAP    #15
00002AD8  183C 0001               2737              MOVE.B  #1,D4
00002ADC  4EF9 00002E0E           2738              JMP     EA_GEN
00002AE2                          2739  
00002AE2  4E75                    2740              RTS
00002AE4                          2741  
00002AE4  43F9 000042FE           2742  OP_ADDA_L   LEA     DISP_ADDA_L,A1
00002AEA  103C 000E               2743              MOVE.B  #14,D0
00002AEE  4E4F                    2744              TRAP    #15
00002AF0  183C 0002               2745              MOVE.B  #2,D4
00002AF4  4EF9 00002E0E           2746              JMP     EA_GEN
00002AFA                          2747  
00002AFA  4E75                    2748              RTS
00002AFC                          2749              
00002AFC                          2750  *---------------------------------------------------------------------------*
00002AFC                          2751  * OP1110: LSR/LSL/ASR/ASL/ROL/ROR
00002AFC                          2752  *---------------------------------------------------------------------------* 
00002AFC  4280                    2753  OP1110      CLR.L   D0                  
00002AFE  4281                    2754              CLR.L   D1   
00002B00  4284                    2755              CLR.L   D4                   
00002B02  227C 00000000           2756              MOVEA.L #0, A1                 
00002B08  2205                    2757              MOVE.L  D5,D1
00002B0A                          2758              
00002B0A                          2759              * check for LSX
00002B0A  E699                    2760              ROR.L   #3,D1
00002B0C  0281 00000001           2761              ANDI.L  #$1,D1
00002B12  0C01 0001               2762              CMPI.B  #1,D1
00002B16  6700 002E               2763              BEQ     OP_LSX
00002B1A                          2764              
00002B1A                          2765              * reset D1 and check for ASX
00002B1A  4281                    2766              CLR.L   D1
00002B1C  2205                    2767              MOVE.L  D5,D1
00002B1E  E699                    2768              ROR.L   #3,D1
00002B20  0281 00000001           2769              ANDI.L  #$1,D1
00002B26  0C01 0000               2770              CMPI.B  #0,D1
00002B2A  6700 0032               2771              BEQ     OP_ASX
00002B2E                          2772  
00002B2E                          2773              * reset D1 and check for ROX
00002B2E  4281                    2774              CLR.L   D1
00002B30  2205                    2775              MOVE.L  D5,D1
00002B32  E699                    2776              ROR.L   #3,D1
00002B34  0281 00000001           2777              ANDI.L  #$1,D1
00002B3A  0C01 0003               2778              CMPI.B  #3,D1
00002B3E  6700 0036               2779              BEQ     OP_ROX
00002B42                          2780              
00002B42  4EF8 14B8               2781              JMP     OP_DATA
00002B46                          2782  
00002B46                          2783  *---------------------------------------------------------------------------*
00002B46                          2784  * OP_LSX: process LSR/LSL
00002B46                          2785  *---------------------------------------------------------------------------*            
00002B46  EA99                    2786  OP_LSX      ROR.L   #5,D1
00002B48  0281 00000001           2787              ANDI.L  #$1,D1
00002B4E  0C01 0000               2788              CMPI.B  #0,D1
00002B52  6700 003A               2789              BEQ     OP_LSR
00002B56  0C01 0001               2790              CMPI.B  #1,D1
00002B5A  6700 008C               2791              BEQ     OP_LSL
00002B5E                          2792              
00002B5E                          2793  *---------------------------------------------------------------------------*
00002B5E                          2794  * OP_ASX: process ASR/ASL
00002B5E                          2795  *---------------------------------------------------------------------------*  
00002B5E  EA99                    2796  OP_ASX      ROR.L   #5,D1
00002B60  0281 00000001           2797              ANDI.L  #$1,D1
00002B66  0C01 0000               2798              CMPI.B  #0,D1
00002B6A  6700 00D6               2799              BEQ     OP_ASR
00002B6E  0C01 0001               2800              CMPI.B  #1,D1
00002B72  6700 0128               2801              BEQ     OP_ASL
00002B76                          2802              
00002B76                          2803  *---------------------------------------------------------------------------*
00002B76                          2804  * OP_ROX: process ROR/ROL
00002B76                          2805  *---------------------------------------------------------------------------*  
00002B76  EA99                    2806  OP_ROX      ROR.L   #5,D1
00002B78  0281 00000001           2807              ANDI.L  #$1,D1
00002B7E  0C01 0000               2808              CMPI.B  #0,D1
00002B82  6700 0172               2809              BEQ     OP_ROR
00002B86  0C01 0001               2810              CMPI.B  #1,D1
00002B8A  6700 01C4               2811              BEQ     OP_ROL
00002B8E                          2812  
00002B8E                          2813  *---------------------------------------------------------------------------*
00002B8E                          2814  * OP_LSR: decode and display LSR
00002B8E                          2815  *---------------------------------------------------------------------------*        
00002B8E  E599                    2816  OP_LSR      ROL.L   #2,D1
00002B90  0281 00000003           2817              ANDI.L  #$3,D1
00002B96  0C01 0000               2818              CMPI.B  #0,D1
00002B9A  6700 0016               2819              BEQ     OP_LSR_B
00002B9E  0C01 0001               2820              CMPI.B  #$1,D1
00002BA2  6700 0032               2821              BEQ     OP_LSR_W
00002BA6  0C01 0002               2822              CMPI.B  #$2,D1
00002BAA  6700 0018               2823              BEQ     OP_LSR_L
00002BAE                          2824              
00002BAE  4EF8 14B8               2825              JMP     OP_DATA
00002BB2                          2826  
00002BB2  43F9 00004308           2827  OP_LSR_B    LEA     DISP_LSR_B,A1
00002BB8  103C 000E               2828              MOVE.B  #14,D0
00002BBC  4E4F                    2829              TRAP    #15
00002BBE  183C 0000               2830              MOVE.B  #0,D4
00002BC2  4E75                    2831              RTS
00002BC4                          2832  
00002BC4  43F9 0000432C           2833  OP_LSR_L    LEA     DISP_LSR_L,A1
00002BCA  103C 000E               2834              MOVE.B  #14,D0
00002BCE  4E4F                    2835              TRAP    #15
00002BD0  183C 0002               2836              MOVE.B  #2,D4
00002BD4  4E75                    2837              RTS
00002BD6                          2838  
00002BD6  43F9 0000431A           2839  OP_LSR_W    LEA     DISP_LSR_W,A1
00002BDC  103C 000E               2840              MOVE.B  #14,D0
00002BE0  4E4F                    2841              TRAP    #15
00002BE2  183C 0001               2842              MOVE.B  #1,D4
00002BE6  4E75                    2843              RTS
00002BE8                          2844   
00002BE8                          2845  *---------------------------------------------------------------------------*
00002BE8                          2846  * OP_LSL: decode and display LSL
00002BE8                          2847  *---------------------------------------------------------------------------*             
00002BE8  E599                    2848  OP_LSL      ROL.L   #2,D1
00002BEA  0281 00000003           2849              ANDI.L  #$3,D1
00002BF0  0C01 0000               2850              CMPI.B  #0,D1
00002BF4  6700 0016               2851              BEQ     OP_LSL_B
00002BF8  0C01 0001               2852              CMPI.B  #$1,D1
00002BFC  6700 0032               2853              BEQ     OP_LSL_W
00002C00  0C01 0002               2854              CMPI.B  #$2,D1
00002C04  6700 0018               2855              BEQ     OP_LSL_L
00002C08                          2856              
00002C08  4EF8 14B8               2857              JMP OP_DATA
00002C0C                          2858  
00002C0C  43F9 00004311           2859  OP_LSL_B    LEA     DISP_LSL_B,A1
00002C12  103C 000E               2860              MOVE.B  #14,D0
00002C16  4E4F                    2861              TRAP    #15
00002C18  183C 0000               2862              MOVE.B  #0,D4
00002C1C  4E75                    2863              RTS
00002C1E                          2864  
00002C1E  43F9 00004335           2865  OP_LSL_L    LEA     DISP_LSL_L,A1
00002C24  103C 000E               2866              MOVE.B  #14,D0
00002C28  4E4F                    2867              TRAP    #15
00002C2A  183C 0002               2868              MOVE.B  #2,D4
00002C2E  4E75                    2869              RTS
00002C30                          2870  
00002C30  43F9 00004323           2871  OP_LSL_W    LEA     DISP_LSL_W,A1
00002C36  103C 000E               2872              MOVE.B  #14,D0
00002C3A  4E4F                    2873              TRAP    #15
00002C3C  183C 0001               2874              MOVE.B  #1,D4
00002C40  4E75                    2875              RTS
00002C42                          2876   
00002C42                          2877  *---------------------------------------------------------------------------*
00002C42                          2878  * OP_ASR: decode and display ASR
00002C42                          2879  *---------------------------------------------------------------------------*             
00002C42  E599                    2880  OP_ASR      ROL.L   #2,D1
00002C44  0281 00000003           2881              ANDI.L  #$3,D1
00002C4A  0C01 0000               2882              CMPI.B  #0,D1
00002C4E  6700 0016               2883              BEQ     OP_ASR_B
00002C52  0C01 0001               2884              CMPI.B  #$1,D1
00002C56  6700 0032               2885              BEQ     OP_ASR_W
00002C5A  0C01 0002               2886              CMPI.B  #$2,D1
00002C5E  6700 0018               2887              BEQ     OP_ASR_L
00002C62                          2888              
00002C62  4EF8 14B8               2889              JMP OP_DATA
00002C66                          2890  
00002C66  43F9 0000433E           2891  OP_ASR_B    LEA     DISP_ASR_B,A1
00002C6C  103C 000E               2892              MOVE.B  #14,D0
00002C70  4E4F                    2893              TRAP    #15
00002C72  183C 0000               2894              MOVE.B  #0,D4
00002C76  4E75                    2895              RTS
00002C78                          2896  
00002C78  43F9 00004362           2897  OP_ASR_L    LEA     DISP_ASR_L,A1
00002C7E  103C 000E               2898              MOVE.B  #14,D0
00002C82  4E4F                    2899              TRAP    #15
00002C84  183C 0002               2900              MOVE.B  #2,D4
00002C88  4E75                    2901              RTS
00002C8A                          2902  
00002C8A  43F9 00004350           2903  OP_ASR_W    LEA     DISP_ASR_W,A1
00002C90  103C 000E               2904              MOVE.B  #14,D0
00002C94  4E4F                    2905              TRAP    #15
00002C96  183C 0001               2906              MOVE.B  #1,D4
00002C9A  4E75                    2907              RTS
00002C9C                          2908       
00002C9C                          2909  *---------------------------------------------------------------------------*
00002C9C                          2910  * OP_ASL: decode and display ASL
00002C9C                          2911  *---------------------------------------------------------------------------*         
00002C9C  E599                    2912  OP_ASL      ROL.L   #2,D1
00002C9E  0281 00000003           2913              ANDI.L  #$3,D1
00002CA4  0C01 0000               2914              CMPI.B  #0,D1
00002CA8  6700 0016               2915              BEQ     OP_ASL_B
00002CAC  0C01 0001               2916              CMPI.B  #$1,D1
00002CB0  6700 0032               2917              BEQ     OP_ASL_W
00002CB4  0C01 0002               2918              CMPI.B  #$2,D1
00002CB8  6700 0018               2919              BEQ     OP_ASL_L
00002CBC                          2920              
00002CBC  4EF8 14B8               2921              JMP OP_DATA
00002CC0                          2922  
00002CC0  43F9 00004347           2923  OP_ASL_B    LEA     DISP_ASL_B,A1
00002CC6  103C 000E               2924              MOVE.B  #14,D0
00002CCA  4E4F                    2925              TRAP    #15
00002CCC  183C 0000               2926              MOVE.B  #0,D4
00002CD0  4E75                    2927              RTS
00002CD2                          2928  
00002CD2  43F9 0000436B           2929  OP_ASL_L    LEA     DISP_ASL_L,A1
00002CD8  103C 000E               2930              MOVE.B  #14,D0
00002CDC  4E4F                    2931              TRAP    #15
00002CDE  183C 0002               2932              MOVE.B  #2,D4
00002CE2  4E75                    2933              RTS
00002CE4                          2934  
00002CE4  43F9 00004359           2935  OP_ASL_W    LEA     DISP_ASL_W,A1
00002CEA  103C 000E               2936              MOVE.B  #14,D0
00002CEE  4E4F                    2937              TRAP    #15
00002CF0  183C 0001               2938              MOVE.B  #1,D4
00002CF4  4E75                    2939              RTS
00002CF6                          2940   
00002CF6                          2941  *---------------------------------------------------------------------------*
00002CF6                          2942  * OP_ROR: decode and display ROR
00002CF6                          2943  *---------------------------------------------------------------------------*             
00002CF6  E599                    2944  OP_ROR      ROL.L   #2,D1
00002CF8  0281 00000003           2945              ANDI.L  #$3,D1
00002CFE  0C01 0000               2946              CMPI.B  #0,D1
00002D02  6700 0016               2947              BEQ     OP_ROR_B
00002D06  0C01 0001               2948              CMPI.B  #$1,D1
00002D0A  6700 0032               2949              BEQ     OP_ROR_W
00002D0E  0C01 0002               2950              CMPI.B  #$2,D1
00002D12  6700 0018               2951              BEQ     OP_ROR_L
00002D16                          2952              
00002D16  4EF8 14B8               2953              JMP OP_DATA
00002D1A                          2954  
00002D1A  43F9 00004374           2955  OP_ROR_B    LEA     DISP_ROR_B,A1
00002D20  103C 000E               2956              MOVE.B  #14,D0
00002D24  4E4F                    2957              TRAP    #15
00002D26  183C 0000               2958              MOVE.B  #0,D4
00002D2A  4E75                    2959              RTS
00002D2C                          2960  
00002D2C  43F9 00004398           2961  OP_ROR_L    LEA     DISP_ROR_L,A1
00002D32  103C 000E               2962              MOVE.B  #14,D0
00002D36  4E4F                    2963              TRAP    #15
00002D38  183C 0002               2964              MOVE.B  #2,D4
00002D3C  4E75                    2965              RTS
00002D3E                          2966  
00002D3E  43F9 00004386           2967  OP_ROR_W    LEA     DISP_ROR_W,A1
00002D44  103C 000E               2968              MOVE.B  #14,D0
00002D48  4E4F                    2969              TRAP    #15
00002D4A  183C 0001               2970              MOVE.B  #1,D4
00002D4E  4E75                    2971              RTS
00002D50                          2972  
00002D50                          2973  *---------------------------------------------------------------------------*
00002D50                          2974  * OP_ROL: decode and display ROL
00002D50                          2975  *---------------------------------------------------------------------------*             
00002D50  E599                    2976  OP_ROL      ROL.L   #2,D1
00002D52  0281 00000003           2977              ANDI.L  #$3,D1
00002D58  0C01 0000               2978              CMPI.B  #0,D1
00002D5C  6700 0016               2979              BEQ     OP_ROL_B
00002D60  0C01 0001               2980              CMPI.B  #$1,D1
00002D64  6700 0032               2981              BEQ     OP_ROL_W
00002D68  0C01 0002               2982              CMPI.B  #$2,D1
00002D6C  6700 0018               2983              BEQ     OP_ROL_L
00002D70                          2984              
00002D70  4EF8 14B8               2985              JMP OP_DATA
00002D74                          2986  
00002D74                          2987  
00002D74  43F9 0000437D           2988  OP_ROL_B    LEA     DISP_ROL_B,A1
00002D7A  103C 000E               2989              MOVE.B  #14,D0
00002D7E  4E4F                    2990              TRAP    #15
00002D80  183C 0000               2991              MOVE.B  #0,D4
00002D84  4E75                    2992              RTS
00002D86                          2993  
00002D86  43F9 000043A1           2994  OP_ROL_L    LEA     DISP_ROL_L,A1
00002D8C  103C 000E               2995              MOVE.B  #14,D0
00002D90  4E4F                    2996              TRAP    #15
00002D92  183C 0002               2997              MOVE.B  #2,D4
00002D96  4E75                    2998              RTS
00002D98                          2999  
00002D98  43F9 0000438F           3000  OP_ROL_W    LEA     DISP_ROL_W,A1
00002D9E  103C 000E               3001              MOVE.B  #14,D0
00002DA2  4E4F                    3002              TRAP    #15
00002DA4  183C 0001               3003              MOVE.B  #1,D4
00002DA8  4E75                    3004              RTS
00002DAA                          3005              
00002DAA                          3006  *---------------------------------------------------------------------------*
00002DAA                          3007  * OP1111 : Special reserved
00002DAA                          3008  *---------------------------------------------------------------------------*           
00002DAA  4EF8 14B8               3009  OP1111      JMP     OP_DATA
00002DAE                          3010  
00002DAE                          3011  *---------------------------------------------------------------------------*
00002DAE                          3012  * EA_NOSRC: decode and display effective addresses for NEG/JSR
00002DAE                          3013  *---------------------------------------------------------------------------*
00002DAE                          3014  EA_NOSRC    
00002DAE  4EB9 00002E6C           3015              JSR     SRC_MODE
00002DB4  43F9 0000406E           3016              LEA     ENDLINE_M,A1
00002DBA  103C 000E               3017              MOVE.B  #14,D0
00002DBE  4E4F                    3018              TRAP    #15
00002DC0  4E75                    3019              RTS
00002DC2                          3020              
00002DC2                          3021  *---------------------------------------------------------------------------*
00002DC2                          3022  * EA_ARITH: decode and display effective addresses for DIVS/MULS
00002DC2                          3023  *---------------------------------------------------------------------------*
00002DC2                          3024  EA_ARITH
00002DC2  4EB9 00002E6C           3025              JSR     SRC_MODE
00002DC8  43F9 000043E8           3026              LEA     DISP_D,A1
00002DCE  103C 000E               3027              MOVE.B  #14,D0
00002DD2  4E4F                    3028              TRAP    #15
00002DD4  4EB9 000030F8           3029              JSR     DEST_REGISTER
00002DDA  43F9 0000406E           3030              LEA     ENDLINE_M,A1
00002DE0  103C 000E               3031              MOVE.B  #14,D0
00002DE4  4E4F                    3032              TRAP    #15
00002DE6  4E75                    3033              RTS
00002DE8                          3034              
00002DE8                          3035  *---------------------------------------------------------------------------*
00002DE8                          3036  * EA_MOVEA: decode and display effective addresses for MOVEA/LEA
00002DE8                          3037  *---------------------------------------------------------------------------*
00002DE8                          3038  EA_MOVEA
00002DE8  4EB9 00002E6C           3039              JSR     SRC_MODE
00002DEE  43F9 000043F9           3040              LEA     DISP_AOP,A1
00002DF4  103C 000E               3041              MOVE.B  #14,D0
00002DF8  4E4F                    3042              TRAP    #15
00002DFA  4EB9 000030F8           3043              JSR     DEST_REGISTER
00002E00  43F9 000043F7           3044              LEA     DISP_CP,A1
00002E06  103C 000D               3045              MOVE.B  #13,D0
00002E0A  4E4F                    3046              TRAP    #15
00002E0C  4E75                    3047              RTS
00002E0E                          3048              
00002E0E                          3049  *---------------------------------------------------------------------------*
00002E0E                          3050  * EA_GEN: decode and display effective addresses for MOVE
00002E0E                          3051  *---------------------------------------------------------------------------*
00002E0E                          3052  EA_GEN          
00002E0E                          3053              * retrieve/display source mode/register
00002E0E  4EB9 00002E6C           3054              JSR     SRC_MODE
00002E14                          3055              
00002E14                          3056              * retrieve/display destination mode/register
00002E14  4EB9 00002E28           3057              JSR     DEST_MODE
00002E1A                          3058              
00002E1A  43F9 0000406E           3059              LEA     ENDLINE_M,A1
00002E20  103C 000E               3060              MOVE.B  #14,D0
00002E24  4E4F                    3061              TRAP    #15
00002E26                          3062              
00002E26  4E75                    3063              RTS
00002E28                          3064  
00002E28                          3065  *---------------------------------------------------------------------------*
00002E28                          3066  * DEST_MODE: decode and display destination mode (bit 8 - 6)
00002E28                          3067  *---------------------------------------------------------------------------*           
00002E28                          3068  DEST_MODE   
00002E28                          3069              * clear registers to store temp data
00002E28  4280                    3070              CLR.L   D0                      
00002E2A  4281                    3071              CLR.L   D1                      
00002E2C  207C 00000000           3072              MOVEA.L #0, A0                  
00002E32  227C 00000000           3073              MOVEA.L #0, A1                  
00002E38  2205                    3074              MOVE.L  D5,D1
00002E3A  EC89                    3075              LSR.L   #6,D1
00002E3C  0281 00000007           3076              ANDI.L  #$7,D1
00002E42  0C01 0000               3077              CMPI.B  #0,D1   * Dn
00002E46  6700 0082               3078              BEQ     D_MODE000
00002E4A  0C01 0002               3079              CMPI.B  #2,D1   * (An)
00002E4E  6700 00C2               3080              BEQ     D_MODE010
00002E52  0C01 0003               3081              CMPI.B  #3,D1   * (An)+
00002E56  6700 011A               3082              BEQ     D_MODE011
00002E5A  0C01 0004               3083              CMPI.B  #4,D1   * -(An)
00002E5E  6700 0132               3084              BEQ     D_MODE100
00002E62  0C01 0007               3085              CMPI.B  #7,D1  * abs
00002E66  6700 017C               3086              BEQ     D_MODE111 
00002E6A  4E75                    3087              RTS
00002E6C                          3088  
00002E6C                          3089  *---------------------------------------------------------------------------*
00002E6C                          3090  * SRC_MODE: decode and display source mode (bit 5 - 3)
00002E6C                          3091  *---------------------------------------------------------------------------*  
00002E6C                          3092  SRC_MODE    
00002E6C                          3093              * clear registers to store temp data
00002E6C  4280                    3094              CLR.L   D0                      
00002E6E  4281                    3095              CLR.L   D1                      
00002E70  207C 00000000           3096              MOVEA.L #0, A0                  
00002E76  227C 00000000           3097              MOVEA.L #0, A1                  
00002E7C  2205                    3098              MOVE.L  D5,D1
00002E7E  E489                    3099              LSR.L   #2,D1
00002E80  0281 0000000E           3100              ANDI.L  #$E,D1
00002E86                          3101              
00002E86  0C01 0000               3102              CMPI.B  #0,D1   * Dn
00002E8A  6700 002A               3103              BEQ     MODE000
00002E8E  0C01 0002               3104              CMPI.B  #2,D1   * An 
00002E92  6700 004A               3105              BEQ     MODE001
00002E96  0C01 0004               3106              CMPI.B  #4,D1   * (An)
00002E9A  6700 0056               3107              BEQ     MODE010
00002E9E  0C01 0006               3108              CMPI.B  #6,D1   * (An)+
00002EA2  6700 008E               3109              BEQ     MODE011
00002EA6  0C01 0008               3110              CMPI.B  #8,D1   * -(An)
00002EAA  6700 00A6               3111              BEQ     MODE100
00002EAE  0C01 000F               3112              CMPI.B  #15,D1  * abs/immediate
00002EB2  6700 00FE               3113              BEQ     MODE111 
00002EB6                          3114        
00002EB6                          3115  *---------------------------------------------------------------------------*
00002EB6                          3116  * MODE000: decode and display source mode Dn
00002EB6                          3117  *---------------------------------------------------------------------------*           
00002EB6                          3118  MODE000     *Dn
00002EB6  43F9 000043E8           3119              LEA     DISP_D,A1
00002EBC  103C 000E               3120              MOVE.B  #14,D0
00002EC0  4E4F                    3121              TRAP    #15
00002EC2  4EB9 00003154           3122              JSR     SRC_REGISTER
00002EC8  4E75                    3123              RTS
00002ECA                          3124  
00002ECA                          3125  *---------------------------------------------------------------------------*
00002ECA                          3126  * D_MODE000: decode and display dest mode Dn
00002ECA                          3127  *---------------------------------------------------------------------------*
00002ECA                          3128  D_MODE000     *Dn
00002ECA  43F9 000043E8           3129              LEA     DISP_D,A1
00002ED0  103C 000E               3130              MOVE.B  #14,D0
00002ED4  4E4F                    3131              TRAP    #15
00002ED6  4EB9 000030F8           3132              JSR     DEST_REGISTER
00002EDC  4E75                    3133              RTS
00002EDE                          3134  
00002EDE                          3135  *---------------------------------------------------------------------------*
00002EDE                          3136  * MODE001: decode and display source mode An
00002EDE                          3137  *---------------------------------------------------------------------------* 
00002EDE                          3138  MODE001 *An
00002EDE  43F9 000043ED           3139              LEA     DISP_A,A1
00002EE4  103C 000E               3140              MOVE.B  #14,D0
00002EE8  4E4F                    3141              TRAP    #15
00002EEA  4EB9 00003154           3142              JSR     SRC_REGISTER
00002EF0                          3143          
00002EF0  4E75                    3144              RTS
00002EF2                          3145  
00002EF2                          3146  *---------------------------------------------------------------------------*
00002EF2                          3147  * MODE010: decode and display source mode (An)
00002EF2                          3148  *---------------------------------------------------------------------------*    
00002EF2                          3149  MODE010 *(An)
00002EF2  43F9 000043F9           3150              LEA     DISP_AOP,A1  *display (A
00002EF8  103C 000E               3151              MOVE.B  #14,D0
00002EFC  4E4F                    3152              TRAP    #15
00002EFE                          3153  
00002EFE  4EB9 00003154           3154              JSR     SRC_REGISTER * display register
00002F04                          3155  
00002F04  43F9 000043F7           3156              LEA     DISP_CP,A1   *display )
00002F0A  103C 000E               3157              MOVE.B  #14,D0
00002F0E  4E4F                    3158              TRAP    #15
00002F10                          3159              
00002F10  4E75                    3160              RTS
00002F12                          3161  
00002F12                          3162  *---------------------------------------------------------------------------*
00002F12                          3163  * D_MODE010: decode and display dest mode (An)
00002F12                          3164  *---------------------------------------------------------------------------*
00002F12                          3165  D_MODE010 *(An)
00002F12  43F9 000043F9           3166              LEA     DISP_AOP,A1  *display (A
00002F18  103C 000E               3167              MOVE.B  #14,D0
00002F1C  4E4F                    3168              TRAP    #15
00002F1E                          3169     
00002F1E  4EB9 000030F8           3170              JSR     DEST_REGISTER * display register
00002F24                          3171  
00002F24  43F9 000043F7           3172              LEA     DISP_CP,A1   *display )
00002F2A  103C 000E               3173              MOVE.B  #14,D0
00002F2E  4E4F                    3174              TRAP    #15
00002F30                          3175              
00002F30  4E75                    3176              RTS
00002F32                          3177  
00002F32                          3178  *---------------------------------------------------------------------------*
00002F32                          3179  * MODE011: decode and display source mode (An)+
00002F32                          3180  *---------------------------------------------------------------------------*
00002F32                          3181  MODE011 *(An)+
00002F32  43F9 000043F9           3182              LEA     DISP_AOP,A1      *display (A
00002F38  103C 000E               3183              MOVE.B  #14,D0
00002F3C  4E4F                    3184              TRAP    #15
00002F3E                          3185              
00002F3E  4EB9 00003154           3186              JSR     SRC_REGISTER    * display register
00002F44                          3187  
00002F44  43F9 00004406           3188              LEA     DISP_POST,A1    *display )+
00002F4A  103C 000E               3189              MOVE.B  #14,D0
00002F4E  4E4F                    3190              TRAP    #15
00002F50                          3191              
00002F50  4E75                    3192              RTS
00002F52                          3193              
00002F52                          3194  *---------------------------------------------------------------------------*
00002F52                          3195  * MODE100: decode and display source mode -(An)
00002F52                          3196  *---------------------------------------------------------------------------*
00002F52                          3197  MODE100 *-(An)
00002F52  43F9 000043FF           3198              LEA     DISP_PRE,A1    *display -(A
00002F58  103C 000E               3199              MOVE.B  #14,D0
00002F5C  4E4F                    3200              TRAP    #15
00002F5E                          3201  
00002F5E  4EB9 00003154           3202              JSR     SRC_REGISTER    *display register
00002F64                          3203  
00002F64  43F9 000043F7           3204              LEA     DISP_CP,A1   *display )
00002F6A  103C 000E               3205              MOVE.B  #14,D0
00002F6E  4E4F                    3206              TRAP    #15
00002F70                          3207              
00002F70  4E75                    3208              RTS
00002F72                          3209  
00002F72                          3210  *---------------------------------------------------------------------------*
00002F72                          3211  * D_MODE011: decode and display dest mode (An)+
00002F72                          3212  *---------------------------------------------------------------------------*
00002F72                          3213  D_MODE011 *(An)+
00002F72  43F9 000043F9           3214              LEA     DISP_AOP,A1      *display (A
00002F78  103C 000E               3215              MOVE.B  #14,D0
00002F7C  4E4F                    3216              TRAP    #15
00002F7E                          3217  
00002F7E  4EB9 000030F8           3218              JSR     DEST_REGISTER    * display register
00002F84                          3219  
00002F84  43F9 00004406           3220              LEA     DISP_POST,A1    *display )+
00002F8A  103C 000E               3221              MOVE.B  #14,D0
00002F8E  4E4F                    3222              TRAP    #15
00002F90                          3223              
00002F90  4E75                    3224              RTS
00002F92                          3225              
00002F92                          3226  *---------------------------------------------------------------------------*
00002F92                          3227  * D_MODE100: decode and display dest mode -(An)
00002F92                          3228  *---------------------------------------------------------------------------*            
00002F92                          3229  D_MODE100 *-(An)
00002F92  43F9 000043FF           3230              LEA     DISP_PRE,A1    *display -(A
00002F98  103C 000E               3231              MOVE.B  #14,D0
00002F9C  4E4F                    3232              TRAP    #15
00002F9E                          3233              
00002F9E  4EB9 000030F8           3234              JSR     DEST_REGISTER    *display register
00002FA4                          3235  
00002FA4  43F9 000043F7           3236              LEA     DISP_CP,A1   *display )
00002FAA  103C 000E               3237              MOVE.B  #14,D0
00002FAE  4E4F                    3238              TRAP    #15
00002FB0                          3239              
00002FB0  4E75                    3240              RTS
00002FB2                          3241  
00002FB2                          3242  *---------------------------------------------------------------------------*
00002FB2                          3243  * MODE111: decode and display source mode absolute/immediate
00002FB2                          3244  *---------------------------------------------------------------------------*
00002FB2                          3245  MODE111     * abs/immediate
00002FB2                          3246              * clear registers to store temp data
00002FB2  4280                    3247              CLR.L   D0                      
00002FB4  4281                    3248              CLR.L   D1                      
00002FB6  207C 00000000           3249              MOVEA.L #0, A0                  
00002FBC  227C 00000000           3250              MOVEA.L #0, A1                  
00002FC2  2205                    3251              MOVE.L  D5,D1
00002FC4                          3252              
00002FC4                          3253              * retrieve source register for MODE 111
00002FC4  E389                    3254              LSL.L   #1,D1   * shift the bits to left by 1
00002FC6  0281 0000000E           3255              ANDI.L  #$E,D1  * mask the first 4 bits 
00002FCC  0C01 0000               3256              CMPI.B  #0, D1  * if it's 0000, absolute word address
00002FD0  6700 003E               3257              BEQ     WORDMODE
00002FD4  0C01 0002               3258              CMPI.B  #2, D1  * if it's 0010, absolute long address
00002FD8  6700 0062               3259              BEQ     LONGMODE
00002FDC  0C01 0008               3260              CMPI.B  #8, D1  * if it's 1000, immediate data
00002FE0  6700 0086               3261              BEQ     IMMEDIATE
00002FE4                          3262       
00002FE4                          3263  *---------------------------------------------------------------------------*
00002FE4                          3264  * D_MODE111: decode and display dest mode absolute/immediate
00002FE4                          3265  *---------------------------------------------------------------------------*           
00002FE4                          3266  D_MODE111   * abs
00002FE4                          3267              * clear registers to store temp data
00002FE4  4280                    3268              CLR.L   D0                      
00002FE6  4281                    3269              CLR.L   D1                      
00002FE8  207C 00000000           3270              MOVEA.L #0, A0                  
00002FEE  227C 00000000           3271              MOVEA.L #0, A1                  
00002FF4  2205                    3272              MOVE.L  D5,D1
00002FF6                          3273              
00002FF6                          3274              * retrieve dest register for MODE 111
00002FF6  EC89                    3275              LSR.L   #6,D1   * shift the bits to right by 6
00002FF8  E689                    3276              LSR.L   #3,D1   * shift the bits to right by extra 3
00002FFA  0201 0001               3277              ANDI.B  #1,D1   * mask the first 2 bits 
00002FFE  0C01 0000               3278              CMPI.B  #0, D1  * if it's 000, absolute word address
00003002  6700 000C               3279              BEQ     WORDMODE
00003006  0C01 0001               3280              CMPI.B  #1, D1  * if it's 001, absolute long address
0000300A  6700 0030               3281              BEQ     LONGMODE
0000300E                          3282              *JSR     OP_DATA *not sure..
0000300E  4E75                    3283              RTS
00003010                          3284  
00003010                          3285  
00003010                          3286  *---------------------------------------------------------------------------*
00003010                          3287  * WORDMODE: absolute word address
00003010                          3288  *---------------------------------------------------------------------------*
00003010  43F9 000043E3           3289  WORDMODE    LEA     DISP_HEX,A1
00003016  103C 000E               3290              MOVE.B  #14,D0
0000301A  4E4F                    3291              TRAP    #15
0000301C                          3292              
0000301C  4285                    3293              CLR.L   D5
0000301E  3A1D                    3294              MOVE.W  (A5)+,D5
00003020                          3295              
00003020  43F9 000040C1           3296              LEA     TMPOUTPUT,A1
00003026  2205                    3297              MOVE.L  D5,D1
00003028  7404                    3298              MOVE.L  #4,D2       *move word size 4
0000302A  4EB8 11B8               3299              JSR     HEX2ASCII
0000302E  43F9 000040C1           3300              LEA     TMPOUTPUT,A1
00003034  103C 000E               3301              MOVE.B  #14,D0
00003038  4E4F                    3302              TRAP    #15
0000303A                          3303              
0000303A  4E75                    3304              RTS
0000303C                          3305  
0000303C                          3306  *---------------------------------------------------------------------------*
0000303C                          3307  * LONGMODE: absolute long address
0000303C                          3308  *---------------------------------------------------------------------------*
0000303C  43F9 000043E3           3309  LONGMODE    LEA     DISP_HEX,A1
00003042  103C 000E               3310              MOVE.B  #14,D0
00003046  4E4F                    3311              TRAP    #15
00003048                          3312              
00003048  4285                    3313              CLR.L   D5
0000304A  2A1D                    3314              MOVE.L  (A5)+,D5
0000304C                          3315              
0000304C  43F9 000040C1           3316              LEA     TMPOUTPUT,A1
00003052  2205                    3317              MOVE.L  D5,D1
00003054  7408                    3318              MOVE.L  #8,D2           *move longword size 8
00003056  4EB8 11B8               3319              JSR     HEX2ASCII
0000305A  43F9 000040C1           3320              LEA     TMPOUTPUT,A1
00003060  103C 000E               3321              MOVE.B  #14,D0
00003064  4E4F                    3322              TRAP    #15
00003066                          3323              
00003066  4E75                    3324              RTS
00003068                          3325  
00003068                          3326  
00003068                          3327  *---------------------------------------------------------------------------*
00003068                          3328  * IMMEDIATE: immediate address
00003068                          3329  *---------------------------------------------------------------------------*
00003068  43F9 00004409           3330  IMMEDIATE   LEA     DISP_LB,A1
0000306E  103C 000E               3331              MOVE.B  #14,D0
00003072  4E4F                    3332              TRAP    #15
00003074  43F9 000043E3           3333              LEA     DISP_HEX,A1
0000307A  103C 000E               3334              MOVE.B  #14,D0
0000307E  4E4F                    3335              TRAP    #15
00003080                          3336              
00003080                          3337              * check for size
00003080  0C04 0000               3338              CMPI.B  #0,D4
00003084  6700 0012               3339              BEQ     IMMD_B
00003088  0C04 0001               3340              CMPI.B  #1,D4
0000308C  6700 002A               3341              BEQ     IMMD_W
00003090  0C04 0002               3342              CMPI.B  #2,D4
00003094  6700 0042               3343              BEQ     IMMD_L
00003098                          3344  
00003098                          3345  IMMD_B
00003098  4285                    3346              CLR.L   D5
0000309A  3A1D                    3347              MOVE.W  (A5)+,D5
0000309C                          3348              
0000309C  43F9 000040C1           3349              LEA     TMPOUTPUT,A1
000030A2  2205                    3350              MOVE.L  D5,D1
000030A4  7402                    3351              MOVE.L  #2,D2
000030A6  4EB8 11B8               3352              JSR     HEX2ASCII
000030AA  43F9 000040C1           3353              LEA     TMPOUTPUT,A1
000030B0  103C 000E               3354              MOVE.B  #14,D0
000030B4  4E4F                    3355              TRAP    #15
000030B6  4E75                    3356              RTS
000030B8                          3357              
000030B8                          3358  IMMD_W
000030B8  4285                    3359              CLR.L   D5
000030BA  3A1D                    3360              MOVE.W  (A5)+,D5
000030BC                          3361              
000030BC  43F9 000040C1           3362              LEA     TMPOUTPUT,A1
000030C2  2205                    3363              MOVE.L  D5,D1
000030C4  7404                    3364              MOVE.L  #4,D2
000030C6  4EB8 11B8               3365              JSR     HEX2ASCII
000030CA  43F9 000040C1           3366              LEA     TMPOUTPUT,A1
000030D0  103C 000E               3367              MOVE.B  #14,D0
000030D4  4E4F                    3368              TRAP    #15
000030D6  4E75                    3369              RTS
000030D8                          3370              
000030D8                          3371  
000030D8                          3372  IMMD_L
000030D8  4285                    3373              CLR.L   D5
000030DA  3A1D                    3374              MOVE.W  (A5)+,D5
000030DC                          3375              
000030DC  43F9 000040C1           3376              LEA     TMPOUTPUT,A1
000030E2  2205                    3377              MOVE.L  D5,D1
000030E4  7408                    3378              MOVE.L  #8,D2
000030E6  4EB8 11B8               3379              JSR     HEX2ASCII
000030EA  43F9 000040C1           3380              LEA     TMPOUTPUT,A1
000030F0  103C 000E               3381              MOVE.B  #14,D0
000030F4  4E4F                    3382              TRAP    #15
000030F6  4E75                    3383              RTS
000030F8                          3384  
000030F8                          3385  
000030F8                          3386  *---------------------------------------------------------------------------*
000030F8                          3387  * DEST_REGISTER: decode and display destination register (bit 11 - 9)
000030F8                          3388  *---------------------------------------------------------------------------*
000030F8                          3389  DEST_REGISTER
000030F8                          3390              * clear registers to store temp data
000030F8  4280                    3391              CLR.L   D0                      
000030FA  4281                    3392              CLR.L   D1                      
000030FC  207C 00000000           3393              MOVEA.L #0, A0                  
00003102  227C 00000000           3394              MOVEA.L #0, A1 
00003108                          3395              
00003108  2205                    3396              MOVE.L  D5,D1
0000310A  EC89                    3397              LSR.L   #6,D1
0000310C  E689                    3398              LSR.L   #3,D1
0000310E  0281 00000007           3399              ANDI.L  #7,D1
00003114                          3400              
00003114  0C01 0000               3401              CMPI.B  #0,D1
00003118  6700 0092               3402              BEQ     REG_0
0000311C  0C01 0001               3403              CMPI.B  #1,D1
00003120  6700 0098               3404              BEQ     REG_1
00003124  0C01 0002               3405              CMPI.B  #2,D1
00003128  6700 009E               3406              BEQ     REG_2
0000312C  0C01 0003               3407              CMPI.B  #3,D1
00003130  6700 00A4               3408              BEQ     REG_3
00003134  0C01 0004               3409              CMPI.B  #4,D1
00003138  6700 00AA               3410              BEQ     REG_4
0000313C  0C01 0005               3411              CMPI.B  #5,D1
00003140  6700 00B0               3412              BEQ     REG_5
00003144  0C01 0006               3413              CMPI.B  #6,D1
00003148  6700 00B6               3414              BEQ     REG_6
0000314C  0C01 0007               3415              CMPI.B  #7,D1
00003150  6700 00BC               3416              BEQ     REG_7
00003154                          3417  
00003154                          3418  *---------------------------------------------------------------------------*
00003154                          3419  * SRC_REGISTER: decode and display source register (bit 2 - 0)
00003154                          3420  *---------------------------------------------------------------------------*           
00003154                          3421  SRC_REGISTER 
00003154                          3422              * clear registers to store temp data
00003154  4280                    3423              CLR.L   D0                      
00003156  4281                    3424              CLR.L   D1                      
00003158  207C 00000000           3425              MOVEA.L #0, A0                  
0000315E  227C 00000000           3426              MOVEA.L #0, A1                  
00003164                          3427              
00003164  2205                    3428              MOVE.L  D5,D1   * temp store the processing data
00003166  0281 00000007           3429              ANDI.L  #7,D1   * mask the first 4 bits with 0111
0000316C                          3430              
0000316C  0C01 0000               3431              CMPI.B  #0,D1
00003170  6700 003A               3432              BEQ     REG_0
00003174  0C01 0001               3433              CMPI.B  #1,D1
00003178  6700 0040               3434              BEQ     REG_1
0000317C  0C01 0002               3435              CMPI.B  #2,D1
00003180  6700 0046               3436              BEQ     REG_2
00003184  0C01 0003               3437              CMPI.B  #3,D1
00003188  6700 004C               3438              BEQ     REG_3
0000318C  0C01 0004               3439              CMPI.B  #4,D1
00003190  6700 0052               3440              BEQ     REG_4
00003194  0C01 0005               3441              CMPI.B  #5,D1
00003198  6700 0058               3442              BEQ     REG_5
0000319C  0C01 0006               3443              CMPI.B  #6,D1
000031A0  6700 005E               3444              BEQ     REG_6
000031A4  0C01 0007               3445              CMPI.B  #7,D1
000031A8  6700 0064               3446              BEQ     REG_7
000031AC                          3447  
000031AC                          3448  *---------------------------------------------------------------------------*
000031AC                          3449  * REG_0 ~ REG_7: display register 0 to 7
000031AC                          3450  *---------------------------------------------------------------------------*
000031AC  43F9 0000440E           3451  REG_0       LEA     DISP_0,A1
000031B2  103C 000E               3452              MOVE.B  #14,D0
000031B6  4E4F                    3453              TRAP    #15
000031B8  4E75                    3454              RTS
000031BA                          3455              
000031BA  43F9 00004410           3456  REG_1       LEA     DISP_1,A1
000031C0  103C 000E               3457              MOVE.B  #14,D0
000031C4  4E4F                    3458              TRAP    #15
000031C6  4E75                    3459              RTS
000031C8                          3460              
000031C8                          3461  
000031C8  43F9 00004412           3462  REG_2       LEA     DISP_2,A1
000031CE  103C 000E               3463              MOVE.B  #14,D0
000031D2  4E4F                    3464              TRAP    #15
000031D4  4E75                    3465              RTS
000031D6                          3466            
000031D6  43F9 00004414           3467  REG_3       LEA     DISP_3,A1
000031DC  103C 000E               3468              MOVE.B  #14,D0
000031E0  4E4F                    3469              TRAP    #15
000031E2  4E75                    3470              RTS
000031E4                          3471              
000031E4  43F9 00004416           3472  REG_4       LEA     DISP_4,A1
000031EA  103C 000E               3473              MOVE.B  #14,D0
000031EE  4E4F                    3474              TRAP    #15
000031F0  4E75                    3475              RTS
000031F2                          3476              
000031F2  43F9 00004418           3477  REG_5       LEA     DISP_5,A1
000031F8  103C 000E               3478              MOVE.B  #14,D0
000031FC  4E4F                    3479              TRAP    #15
000031FE  4E75                    3480              RTS
00003200                          3481              
00003200  43F9 0000441A           3482  REG_6       LEA     DISP_6,A1
00003206  103C 000E               3483              MOVE.B  #14,D0
0000320A  4E4F                    3484              TRAP    #15
0000320C  4E75                    3485              RTS
0000320E                          3486              
0000320E  43F9 0000441C           3487  REG_7       LEA     DISP_7,A1
00003214  103C 000E               3488              MOVE.B  #14,D0
00003218  4E4F                    3489              TRAP    #15
0000321A  4E75                    3490              RTS
0000321C                          3491              
0000321C                          3492  *---------------------------------------------------------------------------*
0000321C                          3493  * REPEAT : Ask user whether they wish to run the program again
0000321C                          3494  *---------------------------------------------------------------------------*           
0000321C  4246                    3495  REPEAT      CLR.W   D6                      * Reset D6 (Loop Count)
0000321E  43F9 00003EE7           3496              LEA     REPEATMSG,A1
00003224  103C 000E               3497              MOVE.B  #14,D0
00003228  4E4F                    3498              TRAP    #15
0000322A                          3499              
0000322A  43F9 00004071           3500              LEA     TMPINPUT,A1             * allocate space to temp store user input
00003230  103C 0002               3501              MOVE.B  #2,D0
00003234  4E4F                    3502              TRAP    #15
00003236                          3503  
00003236  0C01 0001               3504              CMPI.B  #1,D1                   * check for length of user input
0000323A  66E0                    3505              BNE     REPEAT                  * return to the beginning of the function if unequal
0000323C                          3506              
0000323C  0C11 0059               3507              CMPI.B  #$59,(A1)               * compare the input with Y    
00003240  6700 DDC8               3508              BEQ     PROGLP                  * repeat the program
00003244                          3509              
00003244  0C11 0079               3510              CMPI.B  #$79,(A1)               * compare the input with y    
00003248  6700 DDC0               3511              BEQ     PROGLP                  * repeat the program
0000324C                          3512              
0000324C  0C11 004E               3513              CMPI.B  #$4E,(A1)               * compare the input with N    
00003250  6700 0928               3514              BEQ     TERMINATE               * finish program
00003254                          3515              
00003254  0C11 006E               3516              CMPI.B  #$6E,(A1)               * compare the input with n    
00003258  6700 0920               3517              BEQ     TERMINATE               * finish program
0000325C                          3518              
0000325C  60BE                    3519              BRA     REPEAT                  * invalid input/repeat the function
0000325E                          3520  
0000325E                          3521  *---------------------------------------------------------------------------*
0000325E                          3522  * EA DECODING INTERFACE
0000325E                          3523  * [A0] - RESERVED FOR USE
0000325E                          3524  * [D2] - RESERVED FOR USE
0000325E                          3525  * RETURNS - ERROR FLAG IF FAILED TO PUSH SRC EA INTO STACK
0000325E                          3526  *---------------------------------------------------------------------------*
0000325E                          3527  GET_EA_EA_SRC
0000325E                          3528      *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
0000325E                          3529      
0000325E                          3530      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
0000325E  2405                    3531      MOVE.L  D5,D2                           * CLEAN COPY TO D2
00003260  E68A                    3532      LSR.L   #3,D2                           * [D2] Temporarily used D2 for shifting bits            *TODO: DYNAMIC FOR ANY LOCATION OF SOURCE
00003262  23C2 00004434           3533      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
00003268  7407                    3534      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
0000326A  C5B9 00004434           3535      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
00003270                          3536                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
00003270                          3537      
00003270                          3538      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
00003270                          3539      *DESTINATION REGISTER FORMAT STANDARD         *
00003270                          3540      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
00003270                          3541      *WHEN BIT = 0(VALID ADDRESS MODE)             *
00003270                          3542      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
00003270                          3543      *0 - Dn                                       *
00003270                          3544      *1 - An                                       *
00003270                          3545      *2 - (An)                                     *
00003270                          3546      *3 - (An)+                                    *
00003270                          3547      *4 - -(An)                                    *
00003270                          3548      *5 - (XXX).W                                  *
00003270                          3549      *6 - (XXX).L                                  *
00003270                          3550      *7 - #<data>                                  *
00003270                          3551      ***********************************************
00003270                          3552      
00003270                          3553      *** Check if source ...  <ea> = Dn
00003270                          3554  CHECK0    
00003270  41F9 00004424           3555            LEA     TEMP_REGISTER_FORMAT,A0
00003276  1439 00004423           3556            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000327C  1082                    3557            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000327E  0239 0001 00004424      3558            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
00003286  0C39 0001 00004424      3559            CMPI.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
0000328E  6700 006A               3560            BEQ     CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00003292  0CB9 00000000 00004434  3561            CMPI.L     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn) - COMPARE MODES TO SEE IF IT IS THIS MODE
0000329C  6600 005C               3562            BNE     CHECK1
000032A0                          3563            
000032A0                          3564            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000032A0  163C 0020               3565            MOVE.B    #' ',D3
000032A4  6100 0856               3566            BSR       PUSH_STACK
000032A8  163C 0044               3567            MOVE.B    #'D',D3
000032AC  6100 084E               3568            BSR       PUSH_STACK
000032B0                          3569  
000032B0                          3570            *FIND REGISTER NUMBER END LOCATION*  
000032B0  13F9 00004426 0000442C  3571            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
000032BA  0239 000F 0000442C      3572            AND.B   #$0F,VAR_BYTE_END
000032C2                          3573            
000032C2                          3574            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000032C2  23C5 00004430           3575            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000032C8  1439 0000442C           3576            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000032CE                          3577            
000032CE                          3578            *INTITIALIZE FOR BIT SHIFTING
000032CE  41F9 00004430           3579            LEA     VAR_TEMP_CLEANCOPY,A0
000032D4  2639 00004430           3580            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000032DA                          3581  LOOP_SHIFTING
000032DA  0C02 0000               3582            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000032DE  6700 0008               3583            BEQ     MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
000032E2  E24B                    3584            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000032E4  5302                    3585            SUB.B   #1,D2                     *DECREMENT COUNTER
000032E6  60F2                    3586            BRA     LOOP_SHIFTING             *CONTINUE SHIFTING
000032E8                          3587  MASKING_NEXT
000032E8  C6BC 00000007           3588            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000032EE  0603 0030               3589            ADD.B   #$30,D3                   *CONVERT TO CHAR
000032F2  6100 0808               3590            BSR     PUSH_STACK                *PUSH TO STACK
000032F6                          3591            
000032F6  6000 0394               3592            BRA     GET_SRC_SUCCESS           *RETURN          
000032FA                          3593            
000032FA                          3594            
000032FA                          3595            *** Check if source ...  <ea> = An
000032FA  41F9 00004424           3596  CHECK1    LEA     TEMP_REGISTER_FORMAT,A0
00003300  1439 00004423           3597            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003306  1082                    3598            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003308  0239 0002 00004424      3599            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
00003310  0C39 0002 00004424      3600            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
00003318  6700 006A               3601            BEQ     CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
0000331C  0CB9 00000001 00004434  3602            CMPI.L  #1,VAR_LONG_ADDRESS_MODE_CHECK                      * An - COMPARE MODES TO SEE IF IT IS THIS MODE
00003326  6600 005C               3603            BNE     CHECK2
0000332A                          3604            
0000332A                          3605            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
0000332A  163C 0020               3606            MOVE.B    #' ',D3
0000332E  6100 07CC               3607            BSR       PUSH_STACK
00003332  163C 0041               3608            MOVE.B    #'A',D3
00003336  6100 07C4               3609            BSR       PUSH_STACK
0000333A                          3610  
0000333A                          3611            
0000333A                          3612            *FIND REGISTER NUMBER END LOCATION*  
0000333A  13F9 00004426 0000442C  3613            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00003344  0239 000F 0000442C      3614            AND.B   #$0F,VAR_BYTE_END
0000334C                          3615            
0000334C                          3616            *GET INDEX OF THE END OF SRC REGISTER NUMBER
0000334C  23C5 00004430           3617            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003352  1439 0000442C           3618            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
00003358                          3619            
00003358                          3620            *INTITIALIZE FOR BIT SHIFTING
00003358  41F9 00004430           3621            LEA     VAR_TEMP_CLEANCOPY,A0
0000335E  2639 00004430           3622            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003364                          3623  LOOP_SHIFTING1
00003364  0C02 0000               3624            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003368  6700 0008               3625            BEQ     MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
0000336C  E24B                    3626            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
0000336E  5302                    3627            SUB.B   #1,D2                     *DECREMENT COUNTER
00003370  60F2                    3628            BRA     LOOP_SHIFTING1             *CONTINUE SHIFTING
00003372                          3629  MASKING_NEXT1
00003372  C6BC 00000007           3630            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003378  0603 0030               3631            ADD.B   #$30,D3                   *CONVERT TO CHAR
0000337C  6100 077E               3632            BSR     PUSH_STACK                *PUSH TO STACK
00003380                          3633            
00003380  6000 030A               3634            BRA     GET_SRC_SUCCESS                   *RETURN 
00003384                          3635            
00003384                          3636            
00003384                          3637            
00003384                          3638            
00003384                          3639            *** Check if source ...  <ea> = (An)       
00003384  41F9 00004424           3640  CHECK2    LEA     TEMP_REGISTER_FORMAT,A0
0000338A  1439 00004423           3641            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003390  1082                    3642            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003392  0239 0004 00004424      3643            ANDI.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
0000339A  0C39 0004 00004424      3644            CMPI.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
000033A2  6700 007A               3645            BEQ     CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
000033A6  0CB9 00000002 00004434  3646            CMPI.L   #2,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)  COMPARE MODES TO SEE IF IT IS THIS MODE                                                                *change: checkx++*
000033B0  6600 006C               3647            BNE     CHECK3
000033B4                          3648            
000033B4                          3649            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
000033B4  163C 0020               3650            MOVE.B    #' ',D3
000033B8  6100 0742               3651            BSR       PUSH_STACK
000033BC  163C 0028               3652            MOVE.B    #'(',D3
000033C0  6100 073A               3653            BSR       PUSH_STACK
000033C4  163C 0041               3654            MOVE.B    #'A',D3
000033C8  6100 0732               3655            BSR       PUSH_STACK
000033CC                          3656  
000033CC                          3657            
000033CC                          3658            *FIND REGISTER NUMBER END LOCATION*  
000033CC  13F9 00004426 0000442C  3659            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
000033D6  0239 000F 0000442C      3660            AND.B   #$0F,VAR_BYTE_END
000033DE                          3661            
000033DE                          3662            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000033DE  23C5 00004430           3663            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000033E4  1439 0000442C           3664            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000033EA                          3665            
000033EA                          3666            *INTITIALIZE FOR BIT SHIFTING
000033EA  41F9 00004430           3667            LEA     VAR_TEMP_CLEANCOPY,A0
000033F0  2639 00004430           3668            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000033F6                          3669  LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
000033F6  0C02 0000               3670            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000033FA  6700 0008               3671            BEQ     MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
000033FE  E24B                    3672            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003400  5302                    3673            SUB.B   #1,D2                     *DECREMENT COUNTER
00003402  60F2                    3674            BRA     LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
00003404                          3675  MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
00003404  0283 00000007           3676            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
0000340A  0603 0030               3677            ADDI.B   #$30,D3                   *CONVERT TO CHAR
0000340E  6100 06EC               3678            BSR     PUSH_STACK                *PUSH TO STACK
00003412                          3679            
00003412  163C 0029               3680            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003416  6100 06E4               3681            BSR       PUSH_STACK
0000341A                          3682            
0000341A  6000 0270               3683            BRA     GET_SRC_SUCCESS                   *RETURN 
0000341E                          3684  
0000341E                          3685            
0000341E                          3686            
0000341E                          3687                      
0000341E                          3688  *** Check if source ...  <ea> = (An)+       
0000341E  41F9 00004424           3689  CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
00003424  1439 00004423           3690            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000342A  1082                    3691            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000342C  0239 0008 00004424      3692            ANDI.B  #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
00003434  0C39 0008 00004424      3693            CMPI.B  #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
0000343C  6700 0082               3694            BEQ     CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00003440  0CB9 00000003 00004434  3695            CMPI.L  #3,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)+ - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
0000344A  6600 0074               3696            BNE     CHECK4
0000344E                          3697            
0000344E                          3698            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
0000344E  163C 0020               3699            MOVE.B    #' ',D3
00003452  6100 06A8               3700            BSR       PUSH_STACK
00003456  163C 0028               3701            MOVE.B    #'(',D3
0000345A  6100 06A0               3702            BSR       PUSH_STACK
0000345E  163C 0041               3703            MOVE.B    #'A',D3
00003462  6100 0698               3704            BSR       PUSH_STACK
00003466                          3705  
00003466                          3706            
00003466                          3707            *FIND REGISTER NUMBER END LOCATION*  
00003466  13F9 00004426 0000442C  3708            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00003470  0239 000F 0000442C      3709            ANDI.B   #$0F,VAR_BYTE_END
00003478                          3710            
00003478                          3711            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003478  23C5 00004430           3712            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
0000347E  1439 0000442C           3713            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003484                          3714            
00003484                          3715            *INTITIALIZE FOR BIT SHIFTING
00003484  41F9 00004430           3716            LEA     VAR_TEMP_CLEANCOPY,A0
0000348A  2639 00004430           3717            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003490                          3718            
00003490                          3719  LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
00003490  0C02 0000               3720            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003494  6700 0008               3721            BEQ     MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00003498  E24B                    3722            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
0000349A  5302                    3723            SUBI.B   #1,D2                     *DECREMENT COUNTER
0000349C  60F2                    3724            BRA     LOOP_SHIFTING3            *CONTINUE SHIFTING 
0000349E                          3725                                               *change: NAME OF LABEL*
0000349E                          3726  MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
0000349E  0283 00000007           3727            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000034A4  0603 0030               3728            ADDI.B   #$30,D3                   *CONVERT TO CHAR
000034A8  6100 0652               3729            BSR     PUSH_STACK                *PUSH TO STACK
000034AC                          3730            
000034AC  163C 0029               3731            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
000034B0  6100 064A               3732            BSR       PUSH_STACK
000034B4  163C 002B               3733            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
000034B8  6100 0642               3734            BSR       PUSH_STACK
000034BC                          3735            
000034BC  6000 01CE               3736            BRA       GET_SRC_SUCCESS                   *RETURN 
000034C0                          3737  
000034C0                          3738            
000034C0                          3739            
000034C0                          3740                      
000034C0                          3741            *** Check if source ...  <ea> = -(An)       
000034C0  41F9 00004424           3742  CHECK4    LEA     TEMP_REGISTER_FORMAT,A0
000034C6  1439 00004423           3743            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000034CC  1082                    3744            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000034CE  0239 0010 00004424      3745            ANDI.B  #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
000034D6  0C39 0010 00004424      3746            CMPI.B  #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
000034DE  6700 0082               3747            BEQ     CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
000034E2  0CB9 00000004 00004434  3748            CMPI.L  #4,VAR_LONG_ADDRESS_MODE_CHECK                      * -(An) - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
000034EC  6600 0074               3749            BNE     CHECK7
000034F0                          3750            
000034F0                          3751            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
000034F0  163C 0020               3752            MOVE.B    #' ',D3
000034F4  6100 0606               3753            BSR       PUSH_STACK
000034F8  163C 002D               3754            MOVE.B    #'-',D3
000034FC  6100 05FE               3755            BSR       PUSH_STACK
00003500  163C 0028               3756            MOVE.B    #'(',D3
00003504  6100 05F6               3757            BSR       PUSH_STACK
00003508  163C 0041               3758            MOVE.B    #'A',D3
0000350C  6100 05EE               3759            BSR       PUSH_STACK
00003510                          3760  
00003510                          3761            
00003510                          3762            *FIND REGISTER NUMBER END LOCATION*  
00003510  13F9 00004426 0000442C  3763            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
0000351A  0239 000F 0000442C      3764            AND.B   #$0F,VAR_BYTE_END
00003522                          3765            
00003522                          3766            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003522  23C5 00004430           3767            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003528  1439 0000442C           3768            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
0000352E                          3769            
0000352E                          3770            *INTITIALIZE FOR BIT SHIFTING
0000352E  41F9 00004430           3771            LEA     VAR_TEMP_CLEANCOPY,A0
00003534  2639 00004430           3772            MOVE.L  VAR_TEMP_CLEANCOPY,D3
0000353A                          3773            
0000353A                          3774  LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
0000353A  0C02 0000               3775            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000353E  6700 0008               3776            BEQ     MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00003542  E24B                    3777            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003544  5302                    3778            SUBI.B   #1,D2                     *DECREMENT COUNTER
00003546  60F2                    3779            BRA     LOOP_SHIFTING4            *CONTINUE SHIFTING 
00003548                          3780                                               *change: NAME OF LABEL*
00003548                          3781  MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
00003548  0283 00000007           3782            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
0000354E  0603 0030               3783            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00003552  6100 05A8               3784            BSR     PUSH_STACK                *PUSH TO STACK
00003556                          3785            
00003556  163C 0029               3786            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
0000355A  6100 05A0               3787            BSR       PUSH_STACK
0000355E                          3788            
0000355E  6000 012C               3789            BRA     GET_SRC_SUCCESS                   *RETURN
00003562                          3790            
00003562                          3791                      
00003562                          3792            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
00003562  0CB9 00000007 00004434  3793  CHECK7    CMPI.L  #7,VAR_LONG_ADDRESS_MODE_CHECK                      *IF (MODE != 111)
0000356C  6600 011A               3794            BNE     GET_SRC_FAILED                                      *THAN BRANCH TO UNCESSFULL SRC MODE READ
00003570                          3795                   
00003570                          3796            *NEXT: (MODE == 111) 
00003570                          3797            *NOW: CHECK FOR SRC REGISTER 
00003570                          3798                  *(000 = (xxx).W)
00003570                          3799                  *(001 = (xxx).L)
00003570                          3800                  *(010 = #<data>)
00003570                          3801                  
00003570                          3802            *FIND REGISTER NUMBER END LOCATION*  
00003570  13F9 00004426 0000442C  3803            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
0000357A  0239 000F 0000442C      3804            AND.B   #$0F,VAR_BYTE_END
00003582                          3805            
00003582                          3806            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003582  23C5 00004430           3807            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003588  1439 0000442C           3808            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
0000358E                          3809            
0000358E                          3810            *INTITIALIZE FOR BIT SHIFTING
0000358E  41F9 00004430           3811            LEA     VAR_TEMP_CLEANCOPY,A0
00003594  2C39 00004430           3812            MOVE.L  VAR_TEMP_CLEANCOPY,D6
0000359A                          3813  SRC_LOOP_SHIFTING
0000359A  0C02 0000               3814            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000359E  6700 0008               3815            BEQ     SRC_MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
000035A2  E24E                    3816            LSR     #1,D6                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000035A4  5302                    3817            SUB.B   #1,D2                     *DECREMENT COUNTER
000035A6  60F2                    3818            BRA     SRC_LOOP_SHIFTING             *CONTINUE SHIFTING
000035A8                          3819  SRC_MASKING_NEXT
000035A8  CCBC 00000007           3820            AND.L   #7,D6                     *MASK, ONLY NEED 0-2 BIT INDEXES 
000035AE                          3821           *D3 - REGISTER NUMBER NEEDED TO CHECK WHICH W/L/#<DATA>*
000035AE                          3822           
000035AE                          3823  CHECK_WORD  
000035AE  41F9 00004424           3824            LEA     TEMP_REGISTER_FORMAT,A0
000035B4  1439 00004423           3825            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000035BA  1082                    3826            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000035BC  0239 0020 00004424      3827            ANDI.B  #$20,TEMP_REGISTER_FORMAT                           * MASKS 0010 0000                                                     *change <SRC>*
000035C4  0C39 0020 00004424      3828            CMPI.B  #$20,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0010 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
000035CC  6700 0026               3829            BEQ     CHECK_LONG                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
000035D0  0C06 0000               3830            CMPI.B  #0,D6                          
000035D4  6600 001E               3831            BNE     CHECK_LONG 
000035D8                          3832            
000035D8                          3833            *IT IS A WORD AT THIS POINT*
000035D8                          3834            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000035D8  163C 0020               3835            MOVE.B    #' ',D3
000035DC  6100 051E               3836            BSR       PUSH_STACK
000035E0  163C 0024               3837            MOVE.B    #'$',D3
000035E4  6100 0516               3838            BSR       PUSH_STACK
000035E8  321D                    3839            MOVE.W    (A5)+,D1
000035EA  7404                    3840            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
000035EC  6100 DC0C               3841            BSR       HEX2ASCII2STACK
000035F0  6000 009A               3842            BRA     GET_SRC_SUCCESS
000035F4                          3843  
000035F4                          3844  CHECK_LONG
000035F4  41F9 00004424           3845            LEA     TEMP_REGISTER_FORMAT,A0
000035FA  1439 00004423           3846            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003600  1082                    3847            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003602  0239 0040 00004424      3848            ANDI.B  #$40,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
0000360A  0C39 0040 00004424      3849            CMPI.B  #$40,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003612  6700 002E               3850            BEQ     CHECK_IMMEDIATE                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00003616  0C06 0001               3851            CMPI.B  #1,D6                          
0000361A  6600 0026               3852            BNE     CHECK_IMMEDIATE  
0000361E                          3853  
0000361E                          3854            *IT IS A WORD AT THIS POINT*
0000361E                          3855            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
0000361E  163C 0020               3856            MOVE.B    #' ',D3
00003622  6100 04D8               3857            BSR       PUSH_STACK
00003626  163C 0024               3858            MOVE.B    #'$',D3
0000362A  6100 04D0               3859            BSR       PUSH_STACK
0000362E  321D                    3860            MOVE.W    (A5)+,D1
00003630  7404                    3861            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003632  6100 DBC6               3862            BSR       HEX2ASCII2STACK
00003636  321D                    3863            MOVE.W    (A5)+,D1
00003638  7404                    3864            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
0000363A  6100 DBBE               3865            BSR       HEX2ASCII2STACK
0000363E  6000 004C               3866            BRA     GET_SRC_SUCCESS
00003642                          3867            
00003642                          3868  CHECK_IMMEDIATE
00003642  41F9 00004424           3869            LEA     TEMP_REGISTER_FORMAT,A0
00003648  1439 00004423           3870            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000364E  1082                    3871            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003650  0239 0080 00004424      3872            ANDI.B  #$80,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00003658  0C39 0080 00004424      3873            CMPI.B  #$80,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003660  6700 0026               3874            BEQ     GET_SRC_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00003664  0C06 0004               3875            CMPI.B  #4,D6                          
00003668  6600 001E               3876            BNE     GET_SRC_FAILED 
0000366C                          3877  
0000366C                          3878            *IT IS A WORD AT THIS POINT*
0000366C                          3879            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
0000366C  163C 0020               3880            MOVE.B    #' ',D3
00003670  6100 048A               3881            BSR       PUSH_STACK
00003674  163C 0023               3882            MOVE.B    #'#',D3
00003678  6100 0482               3883            BSR       PUSH_STACK
0000367C  321D                    3884            MOVE.W    (A5)+,D1
0000367E  7404                    3885            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003680  6100 DB78               3886            BSR       HEX2ASCII2STACK
00003684  6000 0006               3887            BRA     GET_SRC_SUCCESS
00003688                          3888            
00003688                          3889  GET_SRC_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
00003688  7801                    3890            MOVE.L #1,D4
0000368A  4E75                    3891            RTS
0000368C                          3892  GET_SRC_SUCCESS 
0000368C  4E75                    3893            RTS
0000368E                          3894                                 
0000368E                          3895      
0000368E                          3896  
0000368E                          3897  
0000368E                          3898  
0000368E                          3899  
0000368E                          3900  
0000368E                          3901  
0000368E                          3902  GET_EA_EA_DEST
0000368E                          3903  *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
0000368E                          3904      
0000368E                          3905      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
0000368E  2405                    3906      MOVE.L  D5,D2                           * CLEAN COPY TO D2
00003690  EC8A                    3907      LSR.L   #6,D2                           * [D2] Temporarily used D2 for shifting bits                *TODO: DYNAMIC MODE LOCATION
00003692  23C2 00004434           3908      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
00003698  7407                    3909      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
0000369A  C5B9 00004434           3910      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
000036A0                          3911                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
000036A0                          3912      
000036A0                          3913      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
000036A0                          3914      *DESTINATION REGISTER FORMAT STANDARD         *
000036A0                          3915      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
000036A0                          3916      *WHEN BIT = 0(VALID ADDRESS MODE)             *
000036A0                          3917      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
000036A0                          3918      *0 - Dn                                       *
000036A0                          3919      *1 - An                                       *
000036A0                          3920      *2 - (An)                                     *
000036A0                          3921      *3 - (An)+                                    *
000036A0                          3922      *4 - -(An)                                    *
000036A0                          3923      *5 - (XXX).W                                  *
000036A0                          3924      *6 - (XXX).L                                  *
000036A0                          3925      *7 - #<data>                                  *
000036A0                          3926      ***********************************************
000036A0                          3927      
000036A0                          3928      *** Check if source ...  <ea> = Dn
000036A0                          3929  DEST_CHECK0    
000036A0  41F9 00004424           3930            LEA     TEMP_REGISTER_FORMAT,A0
000036A6  1439 00004422           3931            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000036AC  1082                    3932            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000036AE  0239 0001 00004424      3933            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
000036B6  0C39 0001 00004424      3934            CMPI.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
000036BE  6700 006A               3935            BEQ     DEST_CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
000036C2  0CB9 00000000 00004434  3936            CMPI.L     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn) - COMPARE MODES TO SEE IF IT IS THIS MODE
000036CC  6600 005C               3937            BNE     DEST_CHECK1
000036D0                          3938            
000036D0                          3939            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000036D0  163C 0020               3940            MOVE.B    #' ',D3
000036D4  6100 0426               3941            BSR       PUSH_STACK
000036D8  163C 0044               3942            MOVE.B    #'D',D3
000036DC  6100 041E               3943            BSR       PUSH_STACK
000036E0                          3944  
000036E0                          3945            *FIND REGISTER NUMBER END LOCATION*  
000036E0  13F9 00004425 0000442C  3946            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
000036EA  0239 000F 0000442C      3947            AND.B   #$0F,VAR_BYTE_END
000036F2                          3948            
000036F2                          3949            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000036F2  23C5 00004430           3950            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000036F8  1439 0000442C           3951            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000036FE                          3952            
000036FE                          3953            *INTITIALIZE FOR BIT SHIFTING
000036FE  41F9 00004430           3954            LEA     VAR_TEMP_CLEANCOPY,A0
00003704  2639 00004430           3955            MOVE.L  VAR_TEMP_CLEANCOPY,D3
0000370A                          3956  DEST_LOOP_SHIFTING
0000370A  0C02 0000               3957            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000370E  6700 0008               3958            BEQ     DEST_MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00003712  E24B                    3959            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003714  5302                    3960            SUB.B   #1,D2                     *DECREMENT COUNTER
00003716  60F2                    3961            BRA     DEST_LOOP_SHIFTING             *CONTINUE SHIFTING
00003718                          3962  DEST_MASKING_NEXT
00003718  C6BC 00000007           3963            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
0000371E  0603 0030               3964            ADD.B   #$30,D3                   *CONVERT TO CHAR
00003722  6100 03D8               3965            BSR     PUSH_STACK                *PUSH TO STACK
00003726                          3966            
00003726  6000 0394               3967            BRA     GET_DST_SUCCESS           *RETURN          
0000372A                          3968            
0000372A                          3969            
0000372A                          3970            *** Check if source ...  <ea> = An
0000372A                          3971  DEST_CHECK1    
0000372A  41F9 00004424           3972            LEA     TEMP_REGISTER_FORMAT,A0
00003730  1439 00004422           3973            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003736  1082                    3974            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003738  0239 0002 00004424      3975            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
00003740  0C39 0002 00004424      3976            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
00003748  6700 006A               3977            BEQ     DEST_CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
0000374C  0CB9 00000001 00004434  3978            CMPI.L  #1,VAR_LONG_ADDRESS_MODE_CHECK                      * An - COMPARE MODES TO SEE IF IT IS THIS MODE
00003756  6600 005C               3979            BNE     DEST_CHECK2
0000375A                          3980            
0000375A                          3981            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
0000375A  163C 0020               3982            MOVE.B    #' ',D3
0000375E  6100 039C               3983            BSR       PUSH_STACK
00003762  163C 0041               3984            MOVE.B    #'A',D3
00003766  6100 0394               3985            BSR       PUSH_STACK
0000376A                          3986  
0000376A                          3987            
0000376A                          3988            *FIND REGISTER NUMBER END LOCATION*  
0000376A  13F9 00004425 0000442C  3989            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00003774  0239 000F 0000442C      3990            AND.B   #$0F,VAR_BYTE_END
0000377C                          3991            
0000377C                          3992            *GET INDEX OF THE END OF SRC REGISTER NUMBER
0000377C  23C5 00004430           3993            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003782  1439 0000442C           3994            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
00003788                          3995            
00003788                          3996            *INTITIALIZE FOR BIT SHIFTING
00003788  41F9 00004430           3997            LEA     VAR_TEMP_CLEANCOPY,A0
0000378E  2639 00004430           3998            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003794                          3999  DEST_LOOP_SHIFTING1
00003794  0C02 0000               4000            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003798  6700 0008               4001            BEQ     DEST_MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
0000379C  E24B                    4002            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
0000379E  5302                    4003            SUB.B   #1,D2                     *DECREMENT COUNTER
000037A0  60F2                    4004            BRA     DEST_LOOP_SHIFTING1             *CONTINUE SHIFTING
000037A2                          4005  DEST_MASKING_NEXT1
000037A2  C6BC 00000007           4006            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000037A8  0603 0030               4007            ADD.B   #$30,D3                   *CONVERT TO CHAR
000037AC  6100 034E               4008            BSR     PUSH_STACK                *PUSH TO STACK
000037B0                          4009            
000037B0  6000 030A               4010            BRA     GET_DST_SUCCESS                   *RETURN 
000037B4                          4011            
000037B4                          4012            
000037B4                          4013            
000037B4                          4014            
000037B4                          4015            *** Check if source ...  <ea> = (An)       
000037B4                          4016  DEST_CHECK2    
000037B4  41F9 00004424           4017            LEA     TEMP_REGISTER_FORMAT,A0
000037BA  1439 00004422           4018            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000037C0  1082                    4019            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000037C2  0239 0004 00004424      4020            ANDI.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
000037CA  0C39 0004 00004424      4021            CMPI.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
000037D2  6700 007A               4022            BEQ     DEST_CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
000037D6  0CB9 00000002 00004434  4023            CMPI.L   #2,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)  COMPARE MODES TO SEE IF IT IS THIS MODE                                                                *change: checkx++*
000037E0  6600 006C               4024            BNE     DEST_CHECK3
000037E4                          4025            
000037E4                          4026            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
000037E4  163C 0020               4027            MOVE.B    #' ',D3
000037E8  6100 0312               4028            BSR       PUSH_STACK
000037EC  163C 0028               4029            MOVE.B    #'(',D3
000037F0  6100 030A               4030            BSR       PUSH_STACK
000037F4  163C 0041               4031            MOVE.B    #'A',D3
000037F8  6100 0302               4032            BSR       PUSH_STACK
000037FC                          4033  
000037FC                          4034            
000037FC                          4035            *FIND REGISTER NUMBER END LOCATION*  
000037FC  13F9 00004425 0000442C  4036            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00003806  0239 000F 0000442C      4037            AND.B   #$0F,VAR_BYTE_END
0000380E                          4038            
0000380E                          4039            *GET INDEX OF THE END OF SRC REGISTER NUMBER
0000380E  23C5 00004430           4040            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003814  1439 0000442C           4041            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
0000381A                          4042            
0000381A                          4043            *INTITIALIZE FOR BIT SHIFTING
0000381A  41F9 00004430           4044            LEA     VAR_TEMP_CLEANCOPY,A0
00003820  2639 00004430           4045            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003826                          4046  DEST_LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
00003826  0C02 0000               4047            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000382A  6700 0008               4048            BEQ     DEST_MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
0000382E  E24B                    4049            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003830  5302                    4050            SUB.B   #1,D2                     *DECREMENT COUNTER
00003832  60F2                    4051            BRA     DEST_LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
00003834                          4052  DEST_MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
00003834  0283 00000007           4053            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
0000383A  0603 0030               4054            ADDI.B   #$30,D3                   *CONVERT TO CHAR
0000383E  6100 02BC               4055            BSR     PUSH_STACK                *PUSH TO STACK
00003842                          4056            
00003842  163C 0029               4057            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003846  6100 02B4               4058            BSR       PUSH_STACK
0000384A                          4059            
0000384A  6000 0270               4060            BRA     GET_DST_SUCCESS                   *RETURN 
0000384E                          4061  
0000384E                          4062            
0000384E                          4063            
0000384E                          4064                      
0000384E                          4065  *** Check if source ...  <ea> = (An)+       
0000384E  41F9 00004424           4066  DEST_CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
00003854  1439 00004422           4067            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000385A  1082                    4068            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000385C  0239 0008 00004424      4069            ANDI.B  #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
00003864  0C39 0008 00004424      4070            CMPI.B  #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
0000386C  6700 0082               4071            BEQ     DEST_CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00003870  0CB9 00000003 00004434  4072            CMPI.L  #3,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)+ - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
0000387A  6600 0074               4073            BNE     DEST_CHECK4
0000387E                          4074            
0000387E                          4075            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
0000387E  163C 0020               4076            MOVE.B    #' ',D3
00003882  6100 0278               4077            BSR       PUSH_STACK
00003886  163C 0028               4078            MOVE.B    #'(',D3
0000388A  6100 0270               4079            BSR       PUSH_STACK
0000388E  163C 0041               4080            MOVE.B    #'A',D3
00003892  6100 0268               4081            BSR       PUSH_STACK
00003896                          4082  
00003896                          4083            
00003896                          4084            *FIND REGISTER NUMBER END LOCATION*  
00003896  13F9 00004425 0000442C  4085            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
000038A0  0239 000F 0000442C      4086            ANDI.B   #$0F,VAR_BYTE_END
000038A8                          4087            
000038A8                          4088            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000038A8  23C5 00004430           4089            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000038AE  1439 0000442C           4090            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000038B4                          4091            
000038B4                          4092            *INTITIALIZE FOR BIT SHIFTING
000038B4  41F9 00004430           4093            LEA     VAR_TEMP_CLEANCOPY,A0
000038BA  2639 00004430           4094            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000038C0                          4095            
000038C0                          4096  DEST_LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
000038C0  0C02 0000               4097            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000038C4  6700 0008               4098            BEQ     DEST_MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
000038C8  E24B                    4099            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000038CA  5302                    4100            SUBI.B   #1,D2                     *DECREMENT COUNTER
000038CC  60F2                    4101            BRA     DEST_LOOP_SHIFTING3            *CONTINUE SHIFTING 
000038CE                          4102                                               *change: NAME OF LABEL*
000038CE                          4103  DEST_MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
000038CE  0283 00000007           4104            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000038D4  0603 0030               4105            ADDI.B   #$30,D3                   *CONVERT TO CHAR
000038D8  6100 0222               4106            BSR     PUSH_STACK                *PUSH TO STACK
000038DC                          4107            
000038DC  163C 0029               4108            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
000038E0  6100 021A               4109            BSR       PUSH_STACK
000038E4  163C 002B               4110            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
000038E8  6100 0212               4111            BSR       PUSH_STACK
000038EC                          4112            
000038EC  6000 01CE               4113            BRA       GET_DST_SUCCESS                   *RETURN 
000038F0                          4114  
000038F0                          4115            
000038F0                          4116            
000038F0                          4117                      
000038F0                          4118            *** Check if source ...  <ea> = -(An)       
000038F0                          4119  DEST_CHECK4    
000038F0  41F9 00004424           4120            LEA     TEMP_REGISTER_FORMAT,A0
000038F6  1439 00004422           4121            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000038FC  1082                    4122            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000038FE  0239 0010 00004424      4123            ANDI.B  #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
00003906  0C39 0010 00004424      4124            CMPI.B  #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
0000390E  6700 0082               4125            BEQ     DEST_CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00003912  0CB9 00000004 00004434  4126            CMPI.L  #4,VAR_LONG_ADDRESS_MODE_CHECK                      * -(An) - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
0000391C  6600 0074               4127            BNE     DEST_CHECK7
00003920                          4128            
00003920                          4129            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00003920  163C 0020               4130            MOVE.B    #' ',D3
00003924  6100 01D6               4131            BSR       PUSH_STACK
00003928  163C 002D               4132            MOVE.B    #'-',D3
0000392C  6100 01CE               4133            BSR       PUSH_STACK
00003930  163C 0028               4134            MOVE.B    #'(',D3
00003934  6100 01C6               4135            BSR       PUSH_STACK
00003938  163C 0041               4136            MOVE.B    #'A',D3
0000393C  6100 01BE               4137            BSR       PUSH_STACK
00003940                          4138  
00003940                          4139            
00003940                          4140            *FIND REGISTER NUMBER END LOCATION*  
00003940  13F9 00004425 0000442C  4141            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
0000394A  0239 000F 0000442C      4142            AND.B   #$0F,VAR_BYTE_END
00003952                          4143            
00003952                          4144            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003952  23C5 00004430           4145            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003958  1439 0000442C           4146            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
0000395E                          4147            
0000395E                          4148            *INTITIALIZE FOR BIT SHIFTING
0000395E  41F9 00004430           4149            LEA     VAR_TEMP_CLEANCOPY,A0
00003964  2639 00004430           4150            MOVE.L  VAR_TEMP_CLEANCOPY,D3
0000396A                          4151            
0000396A                          4152  DEST_LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
0000396A  0C02 0000               4153            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000396E  6700 0008               4154            BEQ     DEST_MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00003972  E24B                    4155            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003974  5302                    4156            SUBI.B   #1,D2                     *DECREMENT COUNTER
00003976  60F2                    4157            BRA     DEST_LOOP_SHIFTING4            *CONTINUE SHIFTING 
00003978                          4158                                               *change: NAME OF LABEL*
00003978                          4159  DEST_MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
00003978  0283 00000007           4160            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
0000397E  0603 0030               4161            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00003982  6100 0178               4162            BSR     PUSH_STACK                *PUSH TO STACK
00003986                          4163            
00003986  163C 0029               4164            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
0000398A  6100 0170               4165            BSR       PUSH_STACK
0000398E                          4166            
0000398E  6000 012C               4167            BRA     GET_DST_SUCCESS                   *RETURN
00003992                          4168            
00003992                          4169                      
00003992                          4170            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
00003992                          4171  DEST_CHECK7    
00003992  0CB9 00000007 00004434  4172            CMPI.L  #7,VAR_LONG_ADDRESS_MODE_CHECK                      *IF (MODE != 111)
0000399C  6600 011A               4173            BNE     GET_DST_FAILED                                      *THAN BRANCH TO UNCESSFULL SRC MODE READ
000039A0                          4174                   
000039A0                          4175            *NEXT: (MODE == 111) 
000039A0                          4176            *NOW: CHECK FOR SRC REGISTER 
000039A0                          4177                  *(000 = (xxx).W)
000039A0                          4178                  *(001 = (xxx).L)
000039A0                          4179                  *(010 = #<data>)
000039A0                          4180                  
000039A0                          4181            *FIND REGISTER NUMBER END LOCATION*  
000039A0  13F9 00004425 0000442C  4182            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
000039AA  0239 000F 0000442C      4183            AND.B   #$0F,VAR_BYTE_END
000039B2                          4184            
000039B2                          4185            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000039B2  23C5 00004430           4186            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000039B8  1439 0000442C           4187            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000039BE                          4188            
000039BE                          4189            *INTITIALIZE FOR BIT SHIFTING
000039BE  41F9 00004430           4190            LEA     VAR_TEMP_CLEANCOPY,A0
000039C4  2C39 00004430           4191            MOVE.L  VAR_TEMP_CLEANCOPY,D6
000039CA                          4192  DEST_LOOP_SHIFTING7
000039CA  0C02 0000               4193            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000039CE  6700 0008               4194            BEQ     DEST_MASKING_NEXT7              *IF SHIFTING FINISHED MOVE ON TO MASKING 
000039D2  E24E                    4195            LSR     #1,D6                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000039D4  5302                    4196            SUB.B   #1,D2                     *DECREMENT COUNTER
000039D6  60F2                    4197            BRA     DEST_LOOP_SHIFTING7             *CONTINUE SHIFTING
000039D8                          4198  DEST_MASKING_NEXT7
000039D8  CCBC 00000007           4199            AND.L   #7,D6                     *MASK, ONLY NEED 0-2 BIT INDEXES 
000039DE                          4200           *D3 - REGISTER NUMBER NEEDED TO CHECK WHICH W/L/#<DATA>*
000039DE                          4201            
000039DE                          4202  DEST_CHECK_WORD  
000039DE  41F9 00004424           4203            LEA     TEMP_REGISTER_FORMAT,A0
000039E4  1439 00004422           4204            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000039EA  1082                    4205            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000039EC  0239 0020 00004424      4206            ANDI.B  #$20,TEMP_REGISTER_FORMAT                           * MASKS 0010 0000                                                     *change <SRC>*
000039F4  0C39 0020 00004424      4207            CMPI.B  #$20,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0010 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
000039FC  6700 0026               4208            BEQ     DEST_CHECK_LONG                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00003A00  0C06 0000               4209            CMPI.B  #0,D6                                                   *COMPARE REGISTER NUMBER WITH (000 == 000) FOR WORD
00003A04  6600 001E               4210            BNE     DEST_CHECK_LONG                                      * THE REGISTER NUMBER DOESN'T MATCH "(XXX).W" -> SO MOVE ON       
00003A08                          4211            *IT IS A WORD AT THIS POINT*
00003A08                          4212            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003A08  163C 0020               4213            MOVE.B    #' ',D3
00003A0C  6100 00EE               4214            BSR       PUSH_STACK
00003A10  163C 0024               4215            MOVE.B    #'$',D3
00003A14  6100 00E6               4216            BSR       PUSH_STACK
00003A18  321D                    4217            MOVE.W    (A5)+,D1
00003A1A  7404                    4218            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003A1C  6100 D7DC               4219            BSR       HEX2ASCII2STACK
00003A20  6000 009A               4220            BRA       GET_DST_SUCCESS
00003A24                          4221  
00003A24                          4222  DEST_CHECK_LONG
00003A24  41F9 00004424           4223            LEA     TEMP_REGISTER_FORMAT,A0
00003A2A  1439 00004422           4224            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003A30  1082                    4225            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003A32  0239 0040 00004424      4226            ANDI.B  #$40,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00003A3A  0C39 0040 00004424      4227            CMPI.B  #$40,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003A42  6700 002E               4228            BEQ     DEST_CHECK_IMMEDIATE                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00003A46  0C06 0001               4229            CMPI.B  #1,D6                                                   *COMPARE REGISTER NUMBER WITH (001 == 001) FOR WORD
00003A4A  6600 0026               4230            BNE     DEST_CHECK_IMMEDIATE                                      * THE REGISTER NUMBER DOESN'T MATCH "(XXX).L" -> SO MOVE ON 
00003A4E                          4231            *IT IS A WORD AT THIS POINT*
00003A4E                          4232            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003A4E  163C 0020               4233            MOVE.B    #' ',D3
00003A52  6100 00A8               4234            BSR       PUSH_STACK
00003A56  163C 0024               4235            MOVE.B    #'$',D3
00003A5A  6100 00A0               4236            BSR       PUSH_STACK
00003A5E  321D                    4237            MOVE.W    (A5)+,D1        * GET NEXT WORD INTO STACK
00003A60  7404                    4238            MOVE.L    #4,D2           * SETS SIZE = 4 FOR CONVERSION TO ASCII
00003A62  6100 D796               4239            BSR       HEX2ASCII2STACK
00003A66  321D                    4240            MOVE.W    (A5)+,D1        * GET NEXT WORD INTO STACK
00003A68  7404                    4241            MOVE.L    #4,D2          
00003A6A  6100 D78E               4242            BSR       HEX2ASCII2STACK
00003A6E  6000 004C               4243            BRA     GET_DST_SUCCESS
00003A72                          4244            
00003A72                          4245  DEST_CHECK_IMMEDIATE
00003A72  41F9 00004424           4246            LEA     TEMP_REGISTER_FORMAT,A0
00003A78  1439 00004422           4247            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003A7E  1082                    4248            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003A80  0239 0080 00004424      4249            ANDI.B  #$80,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00003A88  0C39 0080 00004424      4250            CMPI.B  #$80,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003A90  6700 0026               4251            BEQ     GET_DST_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00003A94  0C06 0004               4252            CMPI.B  #4,D6                                               * COMPARE REGISTER NUMBER WITH (010 == 010) FOR WORD
00003A98  6600 001E               4253            BNE     GET_DST_FAILED                                      * THE REGISTER NUMBER DOESN'T MATCH "#<DATA>" -> SO MOVE ON 
00003A9C                          4254            
00003A9C                          4255            *IT IS A WORD AT THIS POINT*
00003A9C                          4256            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003A9C  163C 0020               4257            MOVE.B    #' ',D3
00003AA0  6100 005A               4258            BSR       PUSH_STACK
00003AA4  163C 0023               4259            MOVE.B    #'#',D3
00003AA8  6100 0052               4260            BSR       PUSH_STACK
00003AAC  321D                    4261            MOVE.W    (A5)+,D1
00003AAE  7404                    4262            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003AB0  6100 D748               4263            BSR       HEX2ASCII2STACK
00003AB4  6000 0006               4264            BRA       GET_DST_SUCCESS
00003AB8                          4265            
00003AB8                          4266  GET_DST_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
00003AB8  7801                    4267            MOVE.L #1,D4
00003ABA  4E75                    4268            RTS
00003ABC                          4269  GET_DST_SUCCESS 
00003ABC  4E75                    4270            RTS
00003ABE                          4271  
00003ABE                          4272  
00003ABE                          4273  *---------------------------------------------------------------------------*
00003ABE                          4274  * STACK/QUEUE INTERFACE
00003ABE                          4275  *---------------------------------------------------------------------------*
00003ABE                          4276  PRINT_STACK
00003ABE  0C39 0000 0000441E      4277            CMP.B     #0,COUNTER
00003AC6  6700 000E               4278            BEQ       PRINT_STACK_RETURN             *CHECK IF LOOP IS FINISHED
00003ACA                          4279            
00003ACA                          4280  PRINT_STACK_HELPER
00003ACA  6100 0038               4281            BSR      POP_STACK          *PRINTS ADDRESS
00003ACE  103C 0006               4282            MOVE.B   #6,D0              *Display single character in D1.B. 
00003AD2  4E4F                    4283            TRAP     #15             *ACTIVATES PRINT
00003AD4                          4284  
00003AD4  60E8                    4285            BRA       PRINT_STACK
00003AD6                          4286  PRINT_STACK_RETURN
00003AD6  4E75                    4287            RTS
00003AD8                          4288            
00003AD8                          4289            
00003AD8                          4290  PRINT_QUEUE
00003AD8  0C39 0000 0000441E      4291            CMP.B     #0,COUNTER
00003AE0  6700 0018               4292            BEQ       PRINT_QUEUE_RETURN             *CHECK IF LOOP IS FINISHED
00003AE4                          4293            
00003AE4                          4294  PRINT_QUEUE_HELPER
00003AE4  33F9 0000441E 00004420  4295            MOVE.W   COUNTER,QUEUE_COUNTER
00003AEE  6100 0022               4296            BSR      POP_FRONT          *PRINTS ADDRESS
00003AF2  103C 0006               4297            MOVE.B   #6,D0              *Display single character in D1.B. 
00003AF6  4E4F                    4298            TRAP     #15             *ACTIVATES PRINT
00003AF8                          4299  
00003AF8  60DE                    4300            BRA       PRINT_QUEUE
00003AFA                          4301  PRINT_QUEUE_RETURN
00003AFA  4E75                    4302            RTS
00003AFC                          4303            
00003AFC                          4304  *PUSHES.W CONTENTS OF [D3] INTO STACK          
00003AFC                          4305  PUSH_STACK
00003AFC  1503                    4306              MOVE.B  D3,-(A2)
00003AFE  6100 0058               4307              BSR     INCREMENT
00003B02  4E75                    4308              RTS
00003B04                          4309  *POPS.W TOP OF STACK INTO [D1], SO ITS READY TO PRINT WITH TRAP 15
00003B04                          4310  *         MOVE.W   (A2)+,D1           *PRINTS ADDRESS
00003B04                          4311  *         MOVE.B   #15,D0             *PRINTS ACCORDING TO D2 BASE VALUE
00003B04                          4312  *         MOVE.B   #16,D2             *PRINTS BASED 16 NUMBER
00003B04                          4313  *         TRAP        #15             *ACTIVATES PRINT
00003B04                          4314  POP_STACK
00003B04  BECA                    4315              CMPA.W   A2,SP            *CHECKS IF THERE IS ANYTHING TO PUSH
00003B06  6700 0008               4316              BEQ     POP_RETURN        *IF NOTHING TO PUSH THAN JUST RETURN
00003B0A  121A                    4317              MOVE.B  (A2)+,D1 
00003B0C  6100 0052               4318              BSR     DECREMENT
00003B10                          4319  POP_RETURN
00003B10  4E75                    4320              RTS 
00003B12                          4321        
00003B12                          4322  *USE [A4] AS SECOND POINTER IN SHIFTING      
00003B12  0C39 0000 00004420      4323  POP_FRONT   CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
00003B1A  6700 0030               4324              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
00003B1E                          4325              
00003B1E                          4326              
00003B1E                          4327              *POSITION THE POINTERS A[4] RIGHT BEHIND A[2] WHICH IS RIGHT BEHIND STACK
00003B1E  347C 7000               4328              MOVEA.W #STACK,A2   *START A2 AT STACK
00003B22  0622 0000               4329              ADD.B   #0,-(A2)    *SHIFT A2 TO THE BOTTOM OF THE STACK
00003B26  384A                    4330              MOVEA.W A2,A4     *START A4 RIGHT ABOVE A2
00003B28  0624 0000               4331              ADD.B   #0,-(A4)  *leash one more higher in stack (a4)
00003B2C  1212                    4332              MOVE.B  (A2),D1     *POP CONTENTS INTO D1
00003B2E                          4333  POP_SHIFT_LOOP
00003B2E  0C39 0000 00004420      4334              CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
00003B36  6700 0014               4335              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
00003B3A  1494                    4336              MOVE.B  (A4),(A2)   *SHIFT CONTENT DOWN THE STACK
00003B3C  0624 0000               4337              ADD.B   #0,-(A4)
00003B40  0622 0000               4338              ADD.B   #0,-(A2) *SHIFT POINTERS DOWN THE STACK
00003B44  5339 00004420           4339              SUB.B   #1,QUEUE_COUNTER *DECREMENT INTERNAL QUEUE COUNTER
00003B4A                          4340              
00003B4A  60E2                    4341              BRA     POP_SHIFT_LOOP
00003B4C                          4342                          
00003B4C                          4343  POP_FRONT_RETURN 
00003B4C                          4344              *RESET A2 BACK TO SP
00003B4C  347C 7000               4345              MOVEA.W #STACK,A2    
00003B50  5339 0000441E           4346              SUB.B   #1,COUNTER *DECREMENT STACK COUNTER       
00003B56  4E75                    4347              RTS   
00003B58                          4348  
00003B58                          4349  INCREMENT
00003B58  5239 0000441E           4350              ADD.B   #1, COUNTER
00003B5E  4E75                    4351              RTS           
00003B60                          4352  DECREMENT
00003B60  5339 0000441E           4353              SUB.B   #1, COUNTER
00003B66  4E75                    4354              RTS           
00003B68                          4355  CLEAR_STACK
00003B68  0C39 0000 0000441E      4356              CMP.B     #0,COUNTER
00003B70  6700 0006               4357              BEQ       CLEAR_RETURN
00003B74  618E                    4358              BSR       POP_STACK
00003B76  60F0                    4359              BRA       CLEAR_STACK
00003B78                          4360   
00003B78                          4361  CLEAR_RETURN
00003B78  4E75                    4362              RTS    
00003B7A                          4363  *---------------------------------------------------------------------------*
00003B7A                          4364  * TERMINATE
00003B7A                          4365  *---------------------------------------------------------------------------*
00003B7A                          4366  TERMINATE   
00003B7A  43F9 00003F2A           4367              LEA     FINMSG,A1
00003B80  103C 000E               4368              MOVE.B  #14,D0
00003B84  4E4F                    4369              TRAP    #15
00003B86                          4370  
00003B86  103C 0009               4371              MOVE.B  #9,D0
00003B8A  4E4F                    4372              TRAP    #15
00003B8C                          4373  
00003B8C                          4374  *---------------------------------------------------------------------------*
00003B8C                          4375  * Data storage                                                 
00003B8C                          4376  *---------------------------------------------------------------------------*  
00003B8C                          4377  WELCOME
00003B8C= 20 20 20 20 20 20 ...   4378              DC.B '                         ___     ___ ___        ___   ___ ___                 ',CR,LF
00003BDC= 3D 3D 3D 3D 3D 20 ...   4379              DC.B '=====           \  /\  /|___|   |   |   ||\  /||___    | |   |           =====',CR,LF
00003C2C= 3D 3D 3D 3D 3D 20 ...   4380              DC.B '=====            \/  \/ |___|___|___|___|| \/ ||___    | |___|           =====',CR,LF
00003C7C                          4381      
00003C7C= 20 20 20 20 20 20 ...   4382              DC.B '                        ___ ___ ___  ___      ___                             ',CR,LF
00003CCC= 20 20 20 20 20 20 ...   4383              DC.B '                       |     | |___)|    |   |___                             ',CR,LF 
00003D1C= 20 20 20 20 20 20 ...   4384              DC.B '                       |___ _|_|\___|___ |___|___                             ',CR,LF
00003D6C                          4385      
00003D6C= 20 20 20 20 20 20 ...   4386              DC.B '           __  ___ ___   _   ___  ___  ___        ___      ___ ___            ',CR,LF
00003DBC= 3D 3D 3D 3D 3D 20 ...   4387              DC.B '=====     |  \  | |___  /_\ |___ |___ |___ |\  /||___||   |___|___)      =====',CR,LF 
00003E0C= 3D 3D 3D 3D 3D 20 ...   4388              DC.B '=====     |__/ _|_ ___|/   \ ___| ___||___ | \/ ||___||___|___|\___      =====',CR,LF,CR,LF,CR,LF,0
00003E61                          4389  
00003E61                          4390  PROMPT_START
00003E61= 50 6C 65 61 73 65 ...   4391              DC.B    'Please enter a hexadecimal starting address.',CR,LF,0
00003E90                          4392      
00003E90                          4393  PROMPT_END
00003E90= 50 6C 65 61 73 65 ...   4394              DC.B    'Please enter a hexadecimal ending address.',CR,LF,0
00003EBD= 0D 0A 48 69 74 20 ...   4395  DISP_NEXT   DC.B    CR,LF,'Hit Enter to print the next 30 lines.',CR,LF,0            
00003EE7= 57 6F 75 6C 64 20 ...   4396  REPEATMSG   DC.B    'Would you like to run again? Press Y to continue or N to finish.',CR,LF,0
00003F2A= 54 68 61 6E 6B 20 ...   4397  FINMSG      DC.B    'Thank you for using Circle Disassembler.',CR,LF,0
00003F55= 45 72 72 6F 72 3A ...   4398  ERRMSG_1    DC.B    'Error: Invalid Input Address',CR,LF,0
00003F74= 45 72 72 6F 72 3A ...   4399  ERRMSG_3    DC.B    'Error: Invalid Input Address (Odd)',CR,LF,0
00003F99= 45 72 72 6F 72 3A ...   4400  ERRMSG_5    DC.B    'Error: Invalid Input Address (start > end)',CR,LF,0
00003FC6                          4401  
00003FC6                          4402  VR_S_ADDR   DS.B    80                      * allocate storage space for the starting address
00004016                          4403  VR_E_ADDR   DS.B    80                      * allocate storage space for the ending address
00004066                          4404  S_ADDR_HX   DS.L    1                       * allocate storage space for the starting address in hex
0000406A                          4405  E_ADDR_HX   DS.L    1                       * allocate storage space for the ending address in hex
0000406E= 0D 0A 00                4406  ENDLINE_M   DC.B    CR,LF,0
00004071                          4407  TMPINPUT    DS.B    80                      * temp store user input
000040C1                          4408  TMPOUTPUT   DS.B    80                      * temp store prog output
00004111= 20 20 20 4F 52 49 ...   4409  DISP_ORI_B  DC.B    '   ORI.B',0
0000411A= 20 20 20 4F 52 49 ...   4410  DISP_ORI_W  DC.B    '   ORI.W',0
00004123= 20 20 20 4F 52 49 ...   4411  DISP_ORI_L  DC.B    '   ORI.L',0
0000412C= 20 20 20 45 4F 52 ...   4412  DISP_EORI_B  DC.B    '   EORI.B',0
00004136= 20 20 20 45 4F 52 ...   4413  DISP_EORI_W  DC.B    '   EORI.W',0
00004140= 20 20 20 45 4F 52 ...   4414  DISP_EORI_L  DC.B    '   EORI.L',0
0000414A= 20 20 20 42 54 53 ...   4415  DISP_BTST   DC.B    '   BTST',0
00004152= 20 20 20 43 4D 50 ...   4416  DISP_CMPI_B  DC.B    '   CMPI.B',0
0000415C= 20 20 20 43 4D 50 ...   4417  DISP_CMPI_W  DC.B    '   CMPI.W',0
00004166= 20 20 20 43 4D 50 ...   4418  DISP_CMPI_L  DC.B    '   CMPI.L',0
00004170= 20 20 20 44 41 54 ...   4419  DISP_DATA   DC.B    '   DATA',0
00004178= 20 20 20 4D 4F 56 ...   4420  DISP_MOVE_B DC.B    '   MOVE.B',0
00004182= 20 20 20 4D 4F 56 ...   4421  DISP_MOVE_W DC.B    '   MOVE.W',0
0000418C= 20 20 20 4D 4F 56 ...   4422  DISP_MOVE_L DC.B    '   MOVE.L',0
00004196= 20 20 20 52 54 53 00    4423  DISP_RTS    DC.B    '   RTS',0
0000419D= 20 20 20 4A 53 52 00    4424  DISP_JSR    DC.B    '   JSR',0
000041A4= 20 20 20 4E 45 47 ...   4425  DISP_NEG_B    DC.B    '   NEG.B',0
000041AD= 20 20 20 4E 45 47 ...   4426  DISP_NEG_W    DC.B    '   NEG.W',0
000041B6= 20 20 20 4E 45 47 ...   4427  DISP_NEG_L    DC.B    '   NEG.L',0
000041BF= 20 20 20 4E 4F 54 ...   4428  DISP_NOT_B  DC.B    '   NOT.B',0
000041C8= 20 20 20 4E 4F 54 ...   4429  DISP_NOT_W  DC.B    '   NOT.W',0
000041D1= 20 20 20 4E 4F 54 ...   4430  DISP_NOT_L  DC.B    '   NOT.L',0
000041DA= 20 20 20 4C 45 41 00    4431  DISP_LEA    DC.B    '   LEA',0
000041E1= 20 20 20 4D 4F 56 ...   4432  DISP_MOVEM_W    DC.B    '   MOVEM.W',0
000041EC= 20 20 20 4D 4F 56 ...   4433  DISP_MOVEM_L    DC.B    '   MOVEM.L',0
000041F7= 20 20 20 41 44 44 ...   4434  DISP_ADDQ_B DC.B    '   ADDQ.B',0
00004201= 20 20 20 41 44 44 ...   4435  DISP_ADDQ_W DC.B    '   ADDQ.W',0
0000420B= 20 20 20 41 44 44 ...   4436  DISP_ADDQ_L DC.B    '   ADDQ.L',0
00004215= 20 20 20 44 49 56 ...   4437  DISP_DIVS   DC.B    '   DIVS',0
0000421D= 20 20 20 53 55 42 ...   4438  DISP_SUB_B  DC.B    '   SUB.B',0
00004226= 20 20 20 53 55 42 ...   4439  DISP_SUB_W  DC.B    '   SUB.W',0
0000422F= 20 20 20 53 55 42 ...   4440  DISP_SUB_L  DC.B    '   SUB.L',0
00004238= 20 20 20 53 55 42 ...   4441  DISP_SUBI_B  DC.B    '   SUBI.B',0
00004242= 20 20 20 53 55 42 ...   4442  DISP_SUBI_W  DC.B    '   SUBI.W',0
0000424C= 20 20 20 53 55 42 ...   4443  DISP_SUBI_L  DC.B    '   SUBI.L',0
00004256= 20 20 20 53 55 42 ...   4444  DISP_SUBA_W  DC.B    '   SUBA.W',0
00004260= 20 20 20 53 55 42 ...   4445  DISP_SUBA_L  DC.B    '   SUBA.L',0
0000426A= 20 20 20 45 4F 52 ...   4446  DISP_EOR_B  DC.B    '   EOR.B',0
00004273= 20 20 20 45 4F 52 ...   4447  DISP_EOR_W  DC.B    '   EOR.W',0
0000427C= 20 20 20 45 4F 52 ...   4448  DISP_EOR_L  DC.B    '   EOR.L',0
00004285= 20 20 20 43 4D 50 ...   4449  DISP_CMP_B  DC.B    '   CMP.B',0
0000428E= 20 20 20 43 4D 50 ...   4450  DISP_CMP_W  DC.B    '   CMP.W',0
00004297= 20 20 20 43 4D 50 ...   4451  DISP_CMP_L  DC.B    '   CMP.L',0
000042A0= 20 20 20 43 4D 50 ...   4452  DISP_CMPA_W  DC.B    '   CMPA.W',0
000042AA= 20 20 20 43 4D 50 ...   4453  DISP_CMPA_L  DC.B    '   CMPA.L',0
000042B4= 20 20 20 4D 55 4C ...   4454  DISP_MULS_W DC.B    '   MULS.W',0
000042BE= 20 20 20 41 4E 44 ...   4455  DISP_AND_B  DC.B    '   AND.B',0
000042C7= 20 20 20 41 4E 44 ...   4456  DISP_AND_W  DC.B    '   AND.W',0
000042D0= 20 20 20 41 4E 44 ...   4457  DISP_AND_L  DC.B    '   AND.L',0
000042D9= 20 20 20 41 44 44 ...   4458  DISP_ADD_B  DC.B    '   ADD.B',0
000042E2= 20 20 20 41 44 44 ...   4459  DISP_ADD_W  DC.B    '   ADD.W',0
000042EB= 20 20 20 41 44 44 ...   4460  DISP_ADD_L  DC.B    '   ADD.L',0
000042F4= 20 20 20 41 44 44 ...   4461  DISP_ADDA_W DC.B    '   ADDA.W',0
000042FE= 20 20 20 41 44 44 ...   4462  DISP_ADDA_L DC.B    '   ADDA.L',0
00004308= 20 20 20 4C 53 52 ...   4463  DISP_LSR_B  DC.B    '   LSR.B',0
00004311= 20 20 20 4C 53 4C ...   4464  DISP_LSL_B  DC.B    '   LSL.B',0
0000431A= 20 20 20 4C 53 52 ...   4465  DISP_LSR_W  DC.B    '   LSR.W',0
00004323= 20 20 20 4C 53 4C ...   4466  DISP_LSL_W  DC.B    '   LSL.W',0
0000432C= 20 20 20 4C 53 52 ...   4467  DISP_LSR_L  DC.B    '   LSR.L',0
00004335= 20 20 20 4C 53 4C ...   4468  DISP_LSL_L  DC.B    '   LSL.L',0
0000433E= 20 20 20 41 53 52 ...   4469  DISP_ASR_B  DC.B    '   ASR.B',0
00004347= 20 20 20 41 53 4C ...   4470  DISP_ASL_B  DC.B    '   ASL.B',0
00004350= 20 20 20 41 53 52 ...   4471  DISP_ASR_W  DC.B    '   ASR.W',0
00004359= 20 20 20 41 53 4C ...   4472  DISP_ASL_W  DC.B    '   ASL.W',0
00004362= 20 20 20 41 53 52 ...   4473  DISP_ASR_L  DC.B    '   ASR.L',0
0000436B= 20 20 20 41 53 4C ...   4474  DISP_ASL_L  DC.B    '   ASL.L',0
00004374= 20 20 20 52 4F 52 ...   4475  DISP_ROR_B  DC.B    '   ROR.B',0
0000437D= 20 20 20 52 4F 4C ...   4476  DISP_ROL_B  DC.B    '   ROL.B',0
00004386= 20 20 20 52 4F 52 ...   4477  DISP_ROR_W  DC.B    '   ROR.W',0
0000438F= 20 20 20 52 4F 4C ...   4478  DISP_ROL_W  DC.B    '   ROL.W',0
00004398= 20 20 20 52 4F 52 ...   4479  DISP_ROR_L  DC.B    '   ROR.L',0
000043A1= 20 20 20 52 4F 4C ...   4480  DISP_ROL_L  DC.B    '   ROL.L',0
000043AA= 20 20 20 42 52 41 00    4481  DISP_BRA    DC.B    '   BRA',0
000043B1= 20 20 20 42 4C 54 00    4482  DISP_BLT    DC.B    '   BLT',0
000043B8= 20 20 20 42 45 51 00    4483  DISP_BEQ    DC.B    '   BEQ',0
000043BF= 20 20 20 42 4E 45 00    4484  DISP_BNE    DC.B    '   BNE',0
000043C6= 20 20 20 42 48 49 00    4485  DISP_BHI    DC.B    '   BHI',0
000043CD= 20 20 20 4D 4F 56 ...   4486  DISP_MOVEA_W    DC.B    '   MOVEA.W',0
000043D8= 20 20 20 4D 4F 56 ...   4487  DISP_MOVEA_L    DC.B    '   MOVEA.L',0
000043E3                          4488  
000043E3= 20 20 20 24 00          4489  DISP_HEX     DC.B    '   $',0
000043E8= 20 20 20 44 00          4490  DISP_D  DC.B    '   D',0
000043ED= 20 20 20 41 00          4491  DISP_A  DC.B    '   A',0
000043F2= 20 20 20 28 00          4492  DISP_OP  DC.B    '   (',0
000043F7= 29 00                   4493  DISP_CP  DC.B   ')',0
000043F9= 20 20 20 28 41 00       4494  DISP_AOP  DC.B    '   (A',0
000043FF                          4495  
000043FF= 20 20 20 2D 28 41 00    4496  DISP_PRE    DC.B    '   -(A',0
00004406= 29 2B 00                4497  DISP_POST   DC.B    ')+',0
00004409= 20 20 20 23 00          4498  DISP_LB DC.B    '   #',0
0000440E= 30 00                   4499  DISP_0  DC.B    '0',0
00004410= 31 00                   4500  DISP_1  DC.B    '1',0
00004412= 32 00                   4501  DISP_2  DC.B    '2',0
00004414= 33 00                   4502  DISP_3  DC.B    '3',0
00004416= 34 00                   4503  DISP_4  DC.B    '4',0
00004418= 35 00                   4504  DISP_5  DC.B    '5',0
0000441A= 36 00                   4505  DISP_6  DC.B    '6',0
0000441C= 37 00                   4506  DISP_7  DC.B    '7',0
0000441E                          4507  
0000441E                          4508  *STACK INTERFACE VARIABLES*
0000441E                          4509  COUNTER         DS.W    1
00004420                          4510  QUEUE_COUNTER   DS.W    1
00004422                          4511  
00004422                          4512  *EA DECODING INTERFACE VARIABLES* 
00004422                          4513  DEST_REGISTER_FORMAT    DS.B    1           *all address modes acceptable standard
00004423                          4514  SRC_REGISTER_FORMAT  DS.B    1           *all address modes acceptable standard
00004424                          4515  TEMP_REGISTER_FORMAT    DS.B    1           *place holder for masking other register formats
00004425                          4516  
00004425                          4517  *FORMAT OF WHERE TO GET THE EA BY THE ENDING BIT AND STARTING BIT
00004425                          4518  * WORD + WORD = LONG
00004425                          4519  * (STARTING BIT) + (ENDING BIT) = 2 HEX CHAR
00004425                          4520  * A              + F            = AF         <= EXAMPLE
00004425                          4521  *(10TH BIT)      + (15TH BIT)   = CHECK BITS 15 THROUGH 10
00004425                          4522  GET_DST_START_END    DS.B    1
00004426                          4523  GET_SRC_START_END    DS.B    1
00004427                          4524  
00004427                          4525  *STORES THE START + END BITS HERE (FROM ABOVE)
00004428                          4526  VAR_BYTE_START      DS.L    1
0000442C                          4527  VAR_BYTE_END        DS.L    1
00004430                          4528  VAR_TEMP_CLEANCOPY  DS.L    1
00004434                          4529  
00004434                          4530  VAR_LONG_ADDRESS_MODE_CHECK        DS.L    1       *holds the bits 0-2 in long form
00004438                          4531  
00004438                          4532  *MORE FOR STACK USAGE*
00004438= 2C 00                   4533  DISP_COMMA  DC.B    ',',0
0000443A= 20 20 20 00             4534  DISP_INDENT  DC.B    '   ',0
0000443E                          4535  
0000443E                          4536  *NEXT WORD POINTER: FOR IDENTIFING (xxx).W or (xxx).L*
0000443E                          4537  POINTER_WORD    DS.W       1
00004440                          4538  
00004440                          4539  
00004440                          4540  
00004440                          4541  *---------------------------------------------------------------------------*
00004440                          4542  * Ends program
00004440                          4543  *---------------------------------------------------------------------------*
00004440                          4544              END    START                    * last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASC2HXLP            1156
ASCII2HEX           1150
ASC_ERR             11B2
ASC_LOW             1194
ASC_NUM             11A4
ASC_SFT             11AC
ASC_UPP             119C
CHECK0              3270
CHECK1              32FA
CHECK2              3384
CHECK3              341E
CHECK4              34C0
CHECK7              3562
CHECK_IMMEDIATE     3642
CHECK_LONG          35F4
CHECK_WORD          35AE
CLEAR_RETURN        3B78
CLEAR_STACK         3B68
COUNTER             441E
CR                  D
DECREMENT           3B60
DEST_CHECK0         36A0
DEST_CHECK1         372A
DEST_CHECK2         37B4
DEST_CHECK3         384E
DEST_CHECK4         38F0
DEST_CHECK7         3992
DEST_CHECK_IMMEDIATE  3A72
DEST_CHECK_LONG     3A24
DEST_CHECK_WORD     39DE
DEST_LOOP_SHIFTING  370A
DEST_LOOP_SHIFTING1  3794
DEST_LOOP_SHIFTING2  3826
DEST_LOOP_SHIFTING3  38C0
DEST_LOOP_SHIFTING4  396A
DEST_LOOP_SHIFTING7  39CA
DEST_MASKING_NEXT   3718
DEST_MASKING_NEXT1  37A2
DEST_MASKING_NEXT2  3834
DEST_MASKING_NEXT3  38CE
DEST_MASKING_NEXT4  3978
DEST_MASKING_NEXT7  39D8
DEST_MODE           2E28
DEST_REGISTER       30F8
DEST_REGISTER_FORMAT  4422
DISPLAY_30_LINES    12FE
DISP_0              440E
DISP_1              4410
DISP_2              4412
DISP_3              4414
DISP_4              4416
DISP_5              4418
DISP_6              441A
DISP_7              441C
DISP_A              43ED
DISP_ADDA_L         42FE
DISP_ADDA_W         42F4
DISP_ADDQ_B         41F7
DISP_ADDQ_L         420B
DISP_ADDQ_W         4201
DISP_ADD_B          42D9
DISP_ADD_L          42EB
DISP_ADD_W          42E2
DISP_AND_B          42BE
DISP_AND_L          42D0
DISP_AND_W          42C7
DISP_AOP            43F9
DISP_ASL_B          4347
DISP_ASL_L          436B
DISP_ASL_W          4359
DISP_ASR_B          433E
DISP_ASR_L          4362
DISP_ASR_W          4350
DISP_BEQ            43B8
DISP_BHI            43C6
DISP_BLT            43B1
DISP_BNE            43BF
DISP_BRA            43AA
DISP_BTST           414A
DISP_CMPA_L         42AA
DISP_CMPA_W         42A0
DISP_CMPI_B         4152
DISP_CMPI_L         4166
DISP_CMPI_W         415C
DISP_CMP_B          4285
DISP_CMP_L          4297
DISP_CMP_W          428E
DISP_COMMA          4438
DISP_CP             43F7
DISP_D              43E8
DISP_DATA           4170
DISP_DIVS           4215
DISP_EORI_B         412C
DISP_EORI_L         4140
DISP_EORI_W         4136
DISP_EOR_B          426A
DISP_EOR_L          427C
DISP_EOR_W          4273
DISP_HEX            43E3
DISP_INDENT         443A
DISP_JSR            419D
DISP_LB             4409
DISP_LEA            41DA
DISP_LSL_B          4311
DISP_LSL_L          4335
DISP_LSL_W          4323
DISP_LSR_B          4308
DISP_LSR_L          432C
DISP_LSR_W          431A
DISP_MOVEA_L        43D8
DISP_MOVEA_W        43CD
DISP_MOVEM_L        41EC
DISP_MOVEM_W        41E1
DISP_MOVE_B         4178
DISP_MOVE_L         418C
DISP_MOVE_W         4182
DISP_MULS_W         42B4
DISP_NEG_B          41A4
DISP_NEG_L          41B6
DISP_NEG_W          41AD
DISP_NEXT           3EBD
DISP_NOT_B          41BF
DISP_NOT_L          41D1
DISP_NOT_W          41C8
DISP_OP             43F2
DISP_ORI_B          4111
DISP_ORI_L          4123
DISP_ORI_W          411A
DISP_POST           4406
DISP_PRE            43FF
DISP_ROL_B          437D
DISP_ROL_L          43A1
DISP_ROL_W          438F
DISP_ROR_B          4374
DISP_ROR_L          4398
DISP_ROR_W          4386
DISP_RTS            4196
DISP_SUBA_L         4260
DISP_SUBA_W         4256
DISP_SUBI_B         4238
DISP_SUBI_L         424C
DISP_SUBI_W         4242
DISP_SUB_B          421D
DISP_SUB_L          422F
DISP_SUB_W          4226
D_MODE000           2ECA
D_MODE010           2F12
D_MODE011           2F72
D_MODE100           2F92
D_MODE111           2FE4
EA_ARITH            2DC2
EA_DATA             14DC
EA_GEN              2E0E
EA_MOVEA            2DE8
EA_NOSRC            2DAE
ENDLINE_M           406E
END_ADDR            109C
ERRMSG_1            3F55
ERRMSG_3            3F74
ERRMSG_5            3F99
ERROR_1             1100
ERROR_2             1110
ERROR_3             1120
ERROR_4             1130
ERROR_5             1140
E_ADDR_HX           406A
FINMSG              3F2A
GET_DST_FAILED      3AB8
GET_DST_START_END   4425
GET_DST_SUCCESS     3ABC
GET_EA_EA_DEST      368E
GET_EA_EA_SRC       325E
GET_SRC_FAILED      3688
GET_SRC_START_END   4426
GET_SRC_SUCCESS     368C
HEX2ASCII           11B8
HEX2ASCII2STACK     11FA
HEX_CHAR            11E6
HEX_CONT            11EA
HEX_LOOP            11CC
IMMD_B              3098
IMMD_L              30D8
IMMD_W              30B8
IMMEDIATE           3068
INCREMENT           3B58
INTRO               1028
IS_ODD              123E
IS_ODD_ERR          1254
JMPTABLE            132A
LF                  A
LONGMODE            303C
LOOP_SHIFTING       32DA
LOOP_SHIFTING1      3364
LOOP_SHIFTING2      33F6
LOOP_SHIFTING3      3490
LOOP_SHIFTING4      353A
MAIN                125A
MASKING_NEXT        32E8
MASKING_NEXT1       3372
MASKING_NEXT2       3404
MASKING_NEXT3       349E
MASKING_NEXT4       3548
MODE000             2EB6
MODE001             2EDE
MODE010             2EF2
MODE011             2F32
MODE100             2F52
MODE111             2FB2
NEXTLINES           130C
OP0000              138A
OP0001              15B0
OP0010              161E
OP0011              171C
OP0100              1818
OP0101              1A6E
OP0101_ADDQ_B       1AEA
OP0101_ADDQ_B_0     1B66
OP0101_ADDQ_B_1     1B72
OP0101_ADDQ_B_2     1B7E
OP0101_ADDQ_B_3     1B8A
OP0101_ADDQ_B_4     1B96
OP0101_ADDQ_B_5     1BA2
OP0101_ADDQ_B_6     1BAE
OP0101_ADDQ_B_7     1BBA
OP0101_ADDQ_B_8     1BC6
OP0101_ADDQ_L       1B02
OP0101_ADDQ_W       1AF6
OP0101_RETURN       1B0A
OP0101_RETURN2      1BCE
OP0110              1C12
OP0111              1CA0
OP1000              1CA4
OP1000_DIVS_DN_EA_OR_EA_DN  1CB2
OP1000_DIVS_RETURN  1D96
OP1000_EA_DN_DIVS   1CE0
OP1000_PRINT_L_DIVS  1D4E
OP1000_PRINT_W_DIVS  1D06
OP1001              1DAC
OP1001_ADD_RETURN   20FA
OP1001_DETERMINE_DN_EA_OR_EA_DN  1EC2
OP1001_DN_EA        1EFA
OP1001_EA_DN        1FFA
OP1001_PRINT_B      2022
OP1001_PRINT_B2     1F22
OP1001_PRINT_L      20B2
OP1001_PRINT_L2     1FB2
OP1001_PRINT_W      206A
OP1001_PRINT_W2     1F6A
OP1001_SUBA_L       1DDE
OP1001_SUBA_W       1E50
OP1010              2168
OP1011              216C
OP1011_CMP          21C6
OP1011_CMPA         2278
OP1011_CMP_B        223A
OP1011_CMP_L        2252
OP1011_CMP_W        2246
OP1011_EOR          227A
OP1011_EOR_B        22EE
OP1011_EOR_L        2306
OP1011_EOR_W        22FA
OP1011_RETURN       230E
OP1011_RETURN_CMP   225A
OP1100              23CE
OP1100_AND_RETURN   271E
OP1100_DETERMINE_DN_EA_OR_EA_DN  24E4
OP1100_DN_EA        251E
OP1100_EA_DN        261E
OP1100_EA_DN_MULS   242C
OP1100_MULS_DN_EA_OR_EA_DN  23FE
OP1100_MULS_RETURN  24E2
OP1100_PRINT_B      2646
OP1100_PRINT_B2     2546
OP1100_PRINT_L      26D6
OP1100_PRINT_L2     25D6
OP1100_PRINT_L_MULS  249A
OP1100_PRINT_W      268E
OP1100_PRINT_W2     258E
OP1100_PRINT_W_MULS  2452
OP1101              2720
OP1101_ADDA_L       2752
OP1101_ADDA_W       27C4
OP1101_ADD_RETURN   2A6E
OP1101_DETERMINE_DN_EA_OR_EA_DN  2836
OP1101_DN_EA        286E
OP1101_EA_DN        296E
OP1101_PRINT_B      2996
OP1101_PRINT_B2     2896
OP1101_PRINT_L      2A26
OP1101_PRINT_L2     2926
OP1101_PRINT_W      29DE
OP1101_PRINT_W2     28DE
OP1110              2AFC
OP1111              2DAA
OP_ADDA_L           2AE4
OP_ADDA_W           2ACC
OP_ADDQ_B           1BDC
OP_ADDQ_L           1C00
OP_ADDQ_W           1BEE
OP_ADD_B            2A84
OP_ADD_L            2AB4
OP_ADD_W            2A9C
OP_ASL              2C9C
OP_ASL_B            2CC0
OP_ASL_L            2CD2
OP_ASL_W            2CE4
OP_ASR              2C42
OP_ASR_B            2C66
OP_ASR_L            2C78
OP_ASR_W            2C8A
OP_ASX              2B5E
OP_BEQ              1C76
OP_BHI              1C5A
OP_BLT              1C92
OP_BNE              1C68
OP_BRA              1C84
OP_BTST             13FE
OP_CMPA_L           233E
OP_CMPA_W           232C
OP_CMPI             1504
OP_CMPI_B           1524
OP_CMPI_L           1548
OP_CMPI_W           1536
OP_CMP_B            2350
OP_CMP_L            2380
OP_CMP_W            2368
OP_DATA             14B8
OP_DIVS             1D98
OP_EORI             140C
OP_EORI_B           142C
OP_EORI_L           1450
OP_EORI_W           143E
OP_EOR_B            2398
OP_EOR_L            23BC
OP_EOR_W            23AA
OP_JSR              1A40
OP_LEA              18C6
OP_LEA_DN_EA_OR_EA_DN  18D4
OP_LEA_RETURN       1932
OP_LSL              2BE8
OP_LSL_B            2C0C
OP_LSL_L            2C1E
OP_LSL_W            2C30
OP_LSR              2B8E
OP_LSR_B            2BB2
OP_LSR_L            2BC4
OP_LSR_W            2BD6
OP_LSX              2B46
OP_MOVEA_L          16AC
OP_MOVEA_W          17A8
OP_MOVEM_L          18B4
OP_MOVEM_W          18A2
OP_MOVE_B           15B6
OP_MOVE_L           1644
OP_MOVE_W           1740
OP_MULS             23F0
OP_NEG              1934
OP_NEG_B            1980
OP_NEG_L            1998
OP_NEG_PRINT_EA     19A4
OP_NEG_W            198C
OP_NOT              19BA
OP_NOT_B            1A06
OP_NOT_L            1A1E
OP_NOT_PRINT_EA     1A2A
OP_NOT_W            1A12
OP_ORI              155A
OP_ORI_B            157A
OP_ORI_L            159E
OP_ORI_W            158C
OP_PRINT_L_LEA      18F2
OP_ROL              2D50
OP_ROL_B            2D74
OP_ROL_L            2D86
OP_ROL_W            2D98
OP_ROR              2CF6
OP_ROR_B            2D1A
OP_ROR_L            2D2C
OP_ROR_W            2D3E
OP_ROX              2B76
OP_RTS              1A54
OP_SUBA_L           2156
OP_SUBA_W           2144
OP_SUBI             1462
OP_SUBI_B           1482
OP_SUBI_L           14A6
OP_SUBI_W           1494
OP_SUB_B            20FC
OP_SUB_L            212C
OP_SUB_W            2114
OUTPUT_PROCESSED_DATA  12DE
POINTER_WORD        443E
POP_FRONT           3B12
POP_FRONT_RETURN    3B4C
POP_RETURN          3B10
POP_SHIFT_LOOP      3B2E
POP_STACK           3B04
PRINT_QUEUE         3AD8
PRINT_QUEUE_HELPER  3AE4
PRINT_QUEUE_RETURN  3AFA
PRINT_STACK         3ABE
PRINT_STACK_HELPER  3ACA
PRINT_STACK_RETURN  3AD6
PROGLP              100A
PROMPT_END          3E90
PROMPT_START        3E61
PUSH_STACK          3AFC
QUEUE_COUNTER       4420
REG_0               31AC
REG_1               31BA
REG_2               31C8
REG_3               31D6
REG_4               31E4
REG_5               31F2
REG_6               3200
REG_7               320E
REPEAT              321C
REPEATMSG           3EE7
RETURN              11B6
SRC_LOOP_SHIFTING   359A
SRC_MASKING_NEXT    35A8
SRC_MODE            2E6C
SRC_REGISTER        3154
SRC_REGISTER_FORMAT  4423
STACK               7000
STACK_HEX_CHAR      1228
STACK_HEX_CONT      122C
STACK_HEX_LOOP      120E
START               1004
START_ADDR          104A
S_ADDR_HX           4066
TEMP_REGISTER_FORMAT  4424
TERMINATE           3B7A
TESTING             1036
TMPINPUT            4071
TMPOUTPUT           40C1
VAR_BYTE_END        442C
VAR_BYTE_START      4428
VAR_LONG_ADDRESS_MODE_CHECK  4434
VAR_TEMP_CLEANCOPY  4430
VR_E_ADDR           4016
VR_S_ADDR           3FC6
WELCOME             3B8C
WORDMODE            3010

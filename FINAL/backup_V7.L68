00001004 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/9/2014 4:14:47 PM

00000000                             1  *---------------------------------------------------------------------------*
00000000                             2  * Title      : 68K Disassembler
00000000                             3  * Written by : Team Circle
00000000                             4  * Date       : 12/05/14
00000000                             5  * Description: Scans a section of memory and converts its
00000000                             6  *              contents to a listing of valid assembly 
00000000                             7  *              language instructions
00000000                             8  *---------------------------------------------------------------------------*
00000000                             9  
00000000                            10  *---------------------------------------------------------------------------*
00000000                            11  * System Equates                                                 
00000000                            12  *---------------------------------------------------------------------------*
00000000  =0000000D                 13  CR          EQU     $0D                     * ASCII for Carriage Return
00000000  =0000000A                 14  LF          EQU     $0A                     * ASCII for Line Feed 
00000000  =00007000                 15  STACK       EQU     $7000                   * Initial Stack Pointer                         
00000000                            16              
00000000                            17  *---------------------------------------------------------------------------*
00000000                            18  * Reserved Registers
00000000                            19  *---------------------------------------------------------------------------*  
00000000                            20  * D0 - I/O
00000000                            21  * D1 - Temporary storage of processing data
00000000                            22  * D3 - [PUSH_STACK]
00000000                            23  * D4 - Opcode size (0 - byte; 1- word; 2-long)
00000000                            24  * D5 - Processing data
00000000                            25  * D6 - Loop counter to print 30 lines
00000000                            26  * D7 - Error flag
00000000                            27  * A2 - [STACK POINTER]
00000000                            28  * A5 - Processing address in hex
00000000                            29  
00000000                            30  *---------------------------------------------------------------------------*
00000000                            31  * Start and loop program
00000000                            32  *---------------------------------------------------------------------------*  
00001000                            33              ORG     $1000
00001000  4FF8 7000                 34              LEA     STACK,SP
00001004                            35  START:            
00001004  4EB9 00001028             36              JSR     INTRO                 
0000100A  4EB9 00001052             37  PROGLP      JSR     START_ADDR
00001010  4EB9 000010A4             38              JSR     END_ADDR
00001016  43F9 0000439C             39              LEA     ENDLINE_M,A1           * Add a new line
0000101C  103C 000E                 40              MOVE.B  #14, D0                  * Display A1
00001020  4E4F                      41              TRAP    #15
00001022                            42              
00001022  4EF9 00001262             43              JMP     MAIN
00001028                            44              
00001028                            45  *---------------------------------------------------------------------------*
00001028                            46  * INTRO: Display the introduction of the program
00001028                            47  *---------------------------------------------------------------------------*
00001028  43F9 00003EBA             48  INTRO       LEA     WELCOME,A1              * Load PROMPT_START
0000102E  103C 000E                 49              MOVE.B  #14,D0                  * Display A1
00001032  4E4F                      50              TRAP    #15
00001034  4E75                      51              RTS
00001036                            52  TESTING     
00001036  0813 0011                 53              BTST.B  #$11111111,(A3)
0000103A  081C 0011                 54              BTST.B  #$111,(A4)+
0000103E  0825 0011                 55              BTST.B  #$11,-(A5)
00001042  0838 0001 3331            56              BTST.B  #$1,$3331
00001048  0839 0001 44444441        57              BTST.B  #$1,$44444441
00001050                            58  
00001050                            59  
00001050                            60  
00001050                            61  
00001050  4E75                      62              RTS
00001052                            63  *---------------------------------------------------------------------------*
00001052                            64  * START_ADDR: Compute the starting address
00001052                            65  *---------------------------------------------------------------------------*
00001052                            66  START_ADDR
00001052                            67              * Output
00001052  43F9 0000418F             68              LEA     PROMPT_START,A1         * Load PROMPT_START 
00001058  103C 000E                 69              MOVE.B  #14,D0                  * Display PROMPT_START
0000105C  4E4F                      70              TRAP    #15
0000105E                            71      
0000105E                            72              * Input
0000105E  43F9 000042F4             73              LEA     VR_S_ADDR,A1            * Load VR_S_ADDR
00001064  103C 0002                 74              MOVE.B  #2,D0                   * Ask user for input
00001068  4E4F                      75              TRAP    #15
0000106A                            76              
0000106A                            77              * Error Checking (length)
0000106A  0C01 0000                 78              CMPI.B  #0, D1                  * Check if input length <= 0
0000106E  6F00 0098                 79              BLE     ERROR_1
00001072  0C01 0008                 80              CMPI.B  #8, D1                  * Check if input length > 8
00001076  6E00 0090                 81              BGT     ERROR_1
0000107A                            82              
0000107A                            83              * Conversion & Storage
0000107A  4EB9 00001158             84              JSR     ASCII2HEX               * Jump to ASCII2HEX
00001080  0C07 0001                 85              CMPI.B  #1, D7                  * Check for error
00001084  6700 0082                 86              BEQ     ERROR_1                 
00001088  23C1 00004394             87              MOVE.L  D1, S_ADDR_HX           * Move the result to S_ADDR_HX 
0000108E                            88              
0000108E                            89              * Error Checking (Odd)
0000108E  43F9 00004394             90              LEA     S_ADDR_HX, A1           * Load 'S_ADDR_HX' for odd error
00001094  4EB9 00001246             91              JSR     IS_ODD                  * Check if the input address is odd
0000109A  0C07 0001                 92              CMPI.B  #1, D7                  * Check for error
0000109E  6700 0088                 93              BEQ     ERROR_3
000010A2                            94              
000010A2                            95              * Return
000010A2  4E75                      96              RTS     
000010A4                            97  *---------------------------------------------------------------------------*
000010A4                            98  * END_ADDR: Compute the ending address
000010A4                            99  *---------------------------------------------------------------------------*
000010A4                           100  END_ADDR
000010A4                           101              * Output
000010A4  43F9 000041BE            102              LEA     PROMPT_END,A1           * Load PROMPT_END
000010AA  103C 000E                103              MOVE.B  #14,D0                  * Display PROMPT_END
000010AE  4E4F                     104              TRAP    #15
000010B0                           105  
000010B0                           106              * Input
000010B0  43F9 00004344            107              LEA     VR_E_ADDR,A1            * Load VR_E_ADDR
000010B6  103C 0002                108              MOVE.B  #2,D0                   * Ask user for input
000010BA  4E4F                     109              TRAP    #15
000010BC                           110              
000010BC                           111              * Error Checking (length)
000010BC  0C01 0000                112              CMPI.B  #0, D1                  * Check if input length <= 0
000010C0  6F00 0056                113              BLE     ERROR_2
000010C4  0C01 0008                114              CMPI.B  #8, D1                  * Check if input length > 8
000010C8  6E00 004E                115              BGT     ERROR_2
000010CC                           116              
000010CC                           117              * Conversion & Storage
000010CC  4EB9 00001158            118              JSR     ASCII2HEX               * Jump to ASCII2HEX
000010D2  0C07 0001                119              CMPI.B  #1, D7                  * Check for error
000010D6  6700 0040                120              BEQ     ERROR_2
000010DA  23C1 00004398            121              MOVE.L  D1, E_ADDR_HX           * Move the result to E_ADDR_HX
000010E0                           122              
000010E0                           123              * Error Checking (start > end case)
000010E0  2439 00004394            124              MOVE.L  S_ADDR_HX, D2           * Move the starting address to D2
000010E6  B282                     125              CMP.L   D2, D1                  * Compare starting and ending address
000010E8  6300 005E                126              BLS     ERROR_5                 * Go to ERROR_5 if ending < starting
000010EC                           127              
000010EC                           128              * Error Checking (Odd case)
000010EC  43F9 00004398            129              LEA     E_ADDR_HX, A1           * Move the ending address
000010F2  4EB9 00001246            130              JSR     IS_ODD                  * Go to IS_ODD for odd address checking
000010F8  0C07 0001                131              CMPI.B  #1, D7                  * Check for an error flag
000010FC  6700 003A                132              BEQ     ERROR_4
00001100                           133              
00001100                           134              * Inputs are valid
00001100  2A79 00004394            135              MOVE.L  S_ADDR_HX, A5           * Store the valid input in A5
00001106                           136              
00001106  4E75                     137              RTS
00001108                           138              
00001108                           139  *---------------------------------------------------------------------------*
00001108                           140  * ERROR_1: Address error (Invalid starting address)
00001108                           141  *---------------------------------------------------------------------------*
00001108                           142  ERROR_1
00001108  43F9 00004283            143              LEA     ERRMSG_1, A1            * Load ERRMSG_1
0000110E  103C 000E                144              MOVE.B  #14, D0                 * Display ERRMSG_1
00001112  4E4F                     145              TRAP    #15
00001114  4EF8 1052                146              JMP     START_ADDR              * Jump to START_ADDR
00001118                           147      
00001118                           148  *---------------------------------------------------------------------------*
00001118                           149  * ERROR_2: Address error (Invalid ending address)
00001118                           150  *---------------------------------------------------------------------------*
00001118                           151  ERROR_2
00001118  43F9 00004283            152              LEA     ERRMSG_1, A1            * Load ERRMSG_1
0000111E  103C 000E                153              MOVE.B  #14, D0                 * Display ERRMSG_1
00001122  4E4F                     154              TRAP    #15
00001124  4EF8 10A4                155              JMP     END_ADDR                * Jump to END_ADDR
00001128                           156  
00001128                           157  *---------------------------------------------------------------------------*
00001128                           158  * ERROR_3: Address error (Odd starting address)
00001128                           159  *---------------------------------------------------------------------------*
00001128                           160  ERROR_3
00001128  43F9 000042A2            161              LEA     ERRMSG_3, A1
0000112E  103C 000E                162              MOVE.B  #14, D0
00001132  4E4F                     163              TRAP    #15
00001134  4EF8 1052                164              JMP     START_ADDR
00001138                           165     
00001138                           166  *---------------------------------------------------------------------------*
00001138                           167  * ERROR_4: Address error (Odd ending address)
00001138                           168  *---------------------------------------------------------------------------*         
00001138                           169  ERROR_4
00001138  43F9 000042A2            170              LEA     ERRMSG_3, A1
0000113E  103C 000E                171              MOVE.B  #14, D0
00001142  4E4F                     172              TRAP    #15
00001144  4EF8 10A4                173              JMP     END_ADDR
00001148                           174            
00001148                           175  *---------------------------------------------------------------------------*
00001148                           176  * ERROR_3: Address error (Ending address is less than starting address)
00001148                           177  *---------------------------------------------------------------------------*
00001148                           178  ERROR_5
00001148  43F9 000042C7            179              LEA     ERRMSG_5, A1
0000114E  103C 000E                180              MOVE.B  #14, D0
00001152  4E4F                     181              TRAP    #15
00001154  4EF8 10A4                182              JMP     END_ADDR
00001158                           183    
00001158                           184  *---------------------------------------------------------------------------*
00001158                           185  * ASCII2HEX: Convert ASCii to Hexadecimal
00001158                           186  * Reserved registers: A1 = Source, D1 = Destination, D2 = Byte, D7 = Error
00001158                           187  *---------------------------------------------------------------------------*
00001158  4281                     188  ASCII2HEX   CLR.L   D1                      * Clear the destination 
0000115A  4287                     189              CLR.L   D7                      * Set the error flag to 0
0000115C  4282                     190              CLR.L   D2                      * Clear D2 for temp storage
0000115E                           191              
0000115E  1419                     192  ASC2HXLP    MOVE.B  (A1)+, D2               * Read a byte to D2
00001160  0C02 0000                193              CMPI.B  #0, D2                  * Check for NULL (indicates the end of source)
00001164  6700 0058                194              BEQ     RETURN                  * If it's NULL, go to return
00001168  0C02 0066                195              CMPI.B  #102, D2                * Decimal ASCII value of f is 102
0000116C  6E00 004C                196              BGT     ASC_ERR                 * ASCII > f (invalid input) 
00001170  0C02 0061                197              CMPI.B  #97, D2                 * Decimal ASCII value of a is 97
00001174  6C00 0026                198              BGE     ASC_LOW                 * ASCII >= a (valid input)
00001178  0C02 0046                199              CMPI.B  #70, D2                 * Decimal ASCII value of F is 70
0000117C  6E00 003C                200              BGT     ASC_ERR                 * ASCII > F (invalid input)
00001180  0C02 0041                201              CMPI.B  #65, D2                 * Decimal ASCII value of A is 65
00001184  6C00 001E                202              BGE     ASC_UPP                 * ASCII >= A (valid input)
00001188  0C02 0039                203              CMPI.B  #57, D2                 * Decimal value of 9 is 57
0000118C  6E00 002C                204              BGT     ASC_ERR                 * ASCII > 9 (invalid input)
00001190  0C02 0030                205              CMPI.B  #48, D2                 * Decimal ASCII value of 0 is 48
00001194  6C00 0016                206              BGE     ASC_NUM                 * ASCII >= 0 (valid input)
00001198  6000 0020                207              BRA     ASC_ERR                 * Invalid input
0000119C                           208  
0000119C  0442 0057                209  ASC_LOW     SUBI    #87, D2                 * Convert the ASCII input to Hex
000011A0  6000 0012                210              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011A4                           211              
000011A4  0442 0037                212  ASC_UPP     SUBI    #55, D2                 * Convert the ASCII input to Hex
000011A8  6000 000A                213              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011AC                           214              
000011AC  0442 0030                215  ASC_NUM     SUBI    #48, D2                 * Convert the ASCII input to Hex
000011B0  6000 0002                216              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011B4                           217              
000011B4  E981                     218  ASC_SFT     ASL.L   #4, D1                  * Shift the dest to left by 4 bits
000011B6  D202                     219              ADD.B   D2, D1                  * Add the converted input to D1
000011B8  60A4                     220              BRA     ASC2HXLP                * Loop
000011BA                           221  
000011BA  1E3C 0001                222  ASC_ERR     MOVE.B  #1, D7                  * Set the error flag to 1            
000011BE  4E75                     223  RETURN      RTS     
000011C0                           224  
000011C0                           225  *---------------------------------------------------------------------------*
000011C0                           226  * HEX2ASCII: Convert Hexadecimal to ASCii 
000011C0                           227  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
000011C0                           228  *---------------------------------------------------------------------------*
000011C0  0C02 0008                229  HEX2ASCII   CMPI.B  #8, D2                  * Check to see if the size is long
000011C4  6700 000E                230              BEQ     HEX_LOOP
000011C8  4841                     231              SWAP    D1
000011CA  0C02 0002                232              CMPI.B  #2,D2
000011CE  6600 0004                233              BNE     HEX_LOOP
000011D2  E189                     234              LSL.L   #8,D1
000011D4                           235             
000011D4  E999                     236  HEX_LOOP    ROL.L   #4, D1                  * Roll D1 to left
000011D6  2601                     237              MOVE.L  D1, D3                  * Move D1 to D3
000011D8  0283 0000000F            238              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
000011DE  0C03 0009                239              CMPI.B  #9, D3                  * Compare te digit
000011E2  6E00 000A                240              BGT     HEX_CHAR              
000011E6  0603 0030                241              ADDI.B  #48,D3                  * Add 48 for numerical output
000011EA  6000 0006                242              BRA     HEX_CONT
000011EE                           243              
000011EE  0603 0037                244  HEX_CHAR    ADDI.B  #55,D3                  * Add 55 for character output
000011F2                           245  
000011F2  12C3                     246  HEX_CONT    MOVE.B  D3, (A1)+               * Place into A1
000011F4  5342                     247              SUBI    #1, D2                  * Decrement the size
000011F6  0C02 0000                248              CMPI.B  #0, D2                  * Check if D2 is 0
000011FA  66D8                     249              BNE     HEX_LOOP                * Loop
000011FC  12BC 0000                250              MOVE.B  #$0,(A1)                * Null terminator
00001200  4E75                     251              RTS
00001202                           252  *---------------------------------------------------------------------------*
00001202                           253  * HEX2ASCII2STACK: Convert Hexadecimal to ASCii 
00001202                           254  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
00001202                           255  *---------------------------------------------------------------------------*
00001202                           256  HEX2ASCII2STACK
00001202  0C02 0008                257              CMPI.B  #8, D2                  * Check to see if the size is long
00001206  6700 000E                258              BEQ     STACK_HEX_LOOP
0000120A  4841                     259              SWAP    D1
0000120C  0C02 0002                260              CMPI.B  #2,D2
00001210  6600 0004                261              BNE     STACK_HEX_LOOP
00001214  E189                     262              LSL.L   #8,D1
00001216                           263             
00001216                           264  STACK_HEX_LOOP    
00001216  E999                     265              ROL.L   #4, D1                  * Roll D1 to left
00001218  2601                     266              MOVE.L  D1, D3                  * Move D1 to D3
0000121A  0283 0000000F            267              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
00001220  0C03 0009                268              CMPI.B  #9, D3                  * Compare te digit
00001224  6E00 000A                269              BGT     STACK_HEX_CHAR              
00001228  0603 0030                270              ADDI.B  #48,D3                  * Add 48 for numerical output
0000122C  6000 0006                271              BRA     STACK_HEX_CONT
00001230                           272              
00001230                           273  STACK_HEX_CHAR    
00001230  0603 0037                274              ADDI.B  #55,D3                  * Add 55 for character output
00001234                           275  
00001234                           276  STACK_HEX_CONT    
00001234  6100 2BF4                277              BSR     PUSH_STACK              *PLACE INTO STACK
00001238  5342                     278              SUBI    #1, D2                  * Decrement the size
0000123A  0C02 0000                279              CMPI.B  #0, D2                  * Check if D2 is 0
0000123E  66D6                     280              BNE     STACK_HEX_LOOP                * Loop
00001240  12BC 0000                281              MOVE.B  #$0,(A1)                * Null terminator
00001244  4E75                     282              RTS
00001246                           283  
00001246                           284  
00001246                           285  *---------------------------------------------------------------------------*
00001246                           286  * IS_ODD: Check whether the source address is odd
00001246                           287  * Reserved registers: A1 = Source, D1 = Result, D7 = error flag
00001246                           288  *---------------------------------------------------------------------------*
00001246  4281                     289  IS_ODD      CLR.L   D1                      * Clear the result
00001248  4287                     290              CLR.L   D7                      * Set the error flag to 0
0000124A  2211                     291              MOVE.L  (A1),D1                * Temp store the checking address to D1
0000124C  82FC 0002                292              DIVU    #2, D1                  * Divide the result by 2
00001250  4841                     293              SWAP    D1                      * Swap remainder with quotient
00001252  0C01 0001                294              CMPI.B  #1, D1                  * Check for error
00001256  6700 0004                295              BEQ     IS_ODD_ERR
0000125A  4E75                     296              RTS
0000125C                           297              
0000125C  1E3C 0001                298  IS_ODD_ERR  MOVE.B  #1, D7
00001260  4E75                     299              RTS
00001262                           300  
00001262                           301  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*
00001262                           302  * MAIN                    
00001262                           303  * A2: STACK POINTER                                                      MAIN                                                                        MAIN
00001262                           304  * A5: Processing address
00001262                           305  *
00001262                           306  * D3: USED FOR PUSHING INTO STACK
00001262                           307  *     To push into stack => MOVE.W #DATA,D3 
00001262                           308  *                           BSR    PUSH_STACK
00001262                           309  *     To print stack     => BSR    PRINT_STACK 
00001262                           310  *     To clear stack     => BSR    CLEAR_STACK
00001262                           311  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*  
00001262                           312  MAIN        
00001262                           313              *initialize stack pointer
00001262  33FC 0000 0000474C       314              MOVE.W  #0,COUNTER
0000126A  347C 7000                315              MOVEA.W #STACK,A2
0000126E  163C 0020                316              MOVE.B  #' ',D3
00001272  6100 2BB6                317              BSR     PUSH_STACK
00001276  6100 2BB2                318              BSR     PUSH_STACK
0000127A  6100 2BAE                319              BSR     PUSH_STACK
0000127E                           320              
0000127E                           321              * clear registers for temp storage
0000127E  4280                     322              CLR.L   D0                   
00001280  4281                     323              CLR.L   D1                   
00001282  227C 00000000            324              MOVEA.L #0, A1                
00001288                           325              
00001288  220D                     326              MOVE.L  A5,D1                   * check to see if the address is fully read
0000128A  23CD 00004394            327              MOVE.L  A5,S_ADDR_HX
00001290  B2B9 00004398            328              CMP.L   E_ADDR_HX,D1
00001296  6C00 22B2                329              BGE     REPEAT                  * go to repeat for user action
0000129A                           330  
0000129A  43F9 000043EF            331              LEA     TMPOUTPUT,A1            * allocate storage to hold output
000012A0  143C 0008                332              MOVE.B  #8,D2                   * set the output size
000012A4  4EB8 11C0                333              JSR     HEX2ASCII               
000012A8  43F9 000043EF            334              LEA     TMPOUTPUT,A1
000012AE  103C 000E                335              MOVE.B  #14,D0
000012B2  4E4F                     336              TRAP    #15
000012B4                           337              
000012B4  4285                     338              CLR.L    D5                      * clear the processing data
000012B6  3A1D                     339              MOVE.W  (A5)+,D5                 * copy the currently processing data in A5 over to D5
000012B8                           340                                               * advance the current instruction pointer to the next
000012B8                           341                                               * instruction in memory
000012B8                           342  *----------------------------------------*
000012B8                           343  * Registers          
000012B8                           344  * [D1] - COPY OF D5
000012B8                           345  * [D5] - DATA TO BE PROCESSED
000012B8                           346  * [D6] - COUNTER FOR LINES PROCESSED
000012B8                           347  *
000012B8                           348  * [D4]      - ERROR FLAG BEFORE PRINTING
000012B8                           349  * [STACK]   - PRINTS PROCESS DATA
000012B8                           350  * [COUNTER] - KEEPS TRACK OF STACK INCREMENT
000012B8                           351  *
000012B8                           352  * [A1] - USED FOR JUMPING/PRINTING
000012B8                           353  *
000012B8                           354  *----------------------------------------*
000012B8                           355  
000012B8                           356              
000012B8                           357              *Processing the first 4 most significant bits 
000012B8  2205                     358              MOVE.L  D5,D1                    * copy the current processing data to D1
000012BA  143C 000C                359              MOVE.B  #12,D2                   * shift to right by 12 bits
000012BE  E469                     360              LSR.W   D2,D1                    * [D2] Temporarily used D2 for shifting bits
000012C0  C2FC 0006                361              MULU    #6,D1                    * form offset
000012C4  43F9 00001332            362              LEA     JMPTABLE,A1              * index into table
000012CA  4EB1 1000                363              JSR     0(A1,D1)                 * jump indirect with index
000012CE                           364              
000012CE                           365              *SECURED EA*
000012CE  B83C 0001                366              CMP.B   #1,D4                    * ERROR FLAG CHECK [ERROR WHEN D4 == 1]
000012D2  6600 0012                367              BNE     OUTPUT_PROCESSED_DATA    * PRINTS PROCESSED OP-CODE & EA
000012D6  6100 034C                368              BSR     OP_DATA                  * PRINT ERROR MESSAGE "DATA"
000012DA  6100 2BBA                369              BSR     CLEAR_STACK              * CLEARS THE STACK 
000012DE  183C 0000                370              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
000012E2  6000 0022                371              BRA     DISPLAY_30_LINES         * GO TO LAST STEP
000012E6                           372             
000012E6                           373  OUTPUT_PROCESSED_DATA       
000012E6  163C 000D                374              MOVE.B  #$D,D3                  *carriage return
000012EA  6100 2B3E                375              BSR     PUSH_STACK
000012EE  163C 000A                376              MOVE.B  #$A,D3                  *new line feed
000012F2  6100 2B36                377              BSR     PUSH_STACK
000012F6  163C 0000                378              MOVE.B  #$0,D3                  *null
000012FA  6100 2B2E                379              BSR     PUSH_STACK
000012FE                           380       
000012FE  6100 2B06                381              BSR     PRINT_QUEUE
00001302  183C 0000                382              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
00001306                           383  DISPLAY_30_LINES
00001306                           384              * display 30 lines per page
00001306  5206                     385              ADDI.B  #1,D6
00001308  0C06 001E                386              CMPI.B  #30,D6
0000130C  6C00 0006                387              BGE     NEXTLINES
00001310  6000 FF50                388              BRA     MAIN
00001314                           389            
00001314                           390  *---------------------------------------------------------------------------*
00001314                           391  * NEXTLINES: receive input from user to print the next 30 lines
00001314                           392  *---------------------------------------------------------------------------*  
00001314  4206                     393  NEXTLINES   CLR.B   D6
00001316  43F9 000041EB            394              LEA     DISP_NEXT,A1
0000131C  103C 000E                395              MOVE.B  #14,D0
00001320  4E4F                     396              TRAP    #15
00001322  43F9 0000439F            397              LEA     TMPINPUT,A1
00001328  103C 0002                398              MOVE.B  #2,D0
0000132C  4E4F                     399              TRAP    #15
0000132E  4EF8 1262                400              JMP     MAIN
00001332                           401    
00001332                           402  *---------------------------------------------------------------------------*
00001332                           403  * JMPTABLE: OP code jump/branch table used to decode and display opcodes
00001332                           404  *---------------------------------------------------------------------------*  
00001332  4EF9 00001392            405  JMPTABLE    JMP     OP0000  * CMPI/ORI/BTST/EORI/SUBI/BTST                  *CMPI/ORI/ -
00001338  4EF9 00001840            406              JMP     OP0001  * MOVE.B                                        *FINISHED - JOSEPH
0000133E  4EF9 000018AE            407              JMP     OP0010  * MOVE.L/MOVEA.L                                *FINISHED - JOSEPH
00001344  4EF9 000019AC            408              JMP     OP0011  * MOVE.W/MOVEA.W                                *FINISHED - JOSEPH
0000134A  4EF9 00001AA8            409              JMP     OP0100  * MOVEM/LEA/NEG/NOT/JSR/RTS                     *FINISHED - JOSEPH
00001350  4EF9 00001CFE            410              JMP     OP0101  * ADDQ                                          *FINISHED - JOSEPH
00001356  4EF9 00001EA2            411              JMP     OP0110  * BRA/Bcc (BEQ/BNE/BLT/BHI)                     *NOT FINISHED - LYN
0000135C  4EF9 00001F30            412              JMP     OP0111  * MOVEQ (unassigned)                            *FINISHED - NEVER ASSIGNED
00001362  4EF9 00001F34            413              JMP     OP1000  * DIVS                                          *FINISHED - JOSEPH
00001368  4EF9 0000203C            414              JMP     OP1001  * SUB/SUBA                                      *FINISHED - JOSEPH
0000136E  4EF9 000023F8            415              JMP     OP1010  * Unassigned                                    *FINISHED - NEVER ASSIGNED
00001374  4EF9 000023FC            416              JMP     OP1011  * CMP/EOR/CMPA                                  *FINISHED - JOSEPH
0000137A  4EF9 000026FC            417              JMP     OP1100  * MULS/AND                                      *FINISHED - JOSEPH
00001380  4EF9 00002A4E            418              JMP     OP1101  * ADD/ADDA                                      *FINISHED - JOSEPH
00001386  4EF9 00002E2A            419              JMP     OP1110  * LSR/LSL/ASR/ASL/ROL/ROR
0000138C  4EF9 000030D8            420              JMP     OP1111  * Special/Reserved
00001392                           421              
00001392                           422  *---------------------------------------------------------------------------*
00001392                           423  * OP0000: decode CMPI/ORI/BTST/SUBI/EORI
00001392                           424  *---------------------------------------------------------------------------*           
00001392                           425  OP0000                                                                                  
00001392  4281                     426              CLR.L   D1          * to temporarily store the address to process
00001394  4280                     427              CLR.L   D0  
00001396  4284                     428              CLR.L   D4                 
00001398  227C 00000000            429              MOVEA.L #0, A1                
0000139E                           430              * Check for ORI (0000 0000 xx (size) xxx (EA mode) xxx(EA reg)
0000139E                           431              * Check if bit 11,10,9,8 are 0000)
0000139E  2205                     432              MOVE.L  D5,D1
000013A0  0281 00000F00            433              ANDI.L  #$0F00,D1
000013A6  0C81 00000000            434              CMPI.L  #$0000,D1   * if they are 0000, it is ORI
000013AC  6700 03AE                435              BEQ     OP_ORI
000013B0                           436  
000013B0                           437              * check for CMPI (0000 1100 xx (size) xxx (EA mode) xxx (EA reg)
000013B0                           438              * check if bit 11,10,9,8 are 1100
000013B0  4281                     439              CLR.L   D1
000013B2  2205                     440              MOVE.L  D5,D1
000013B4  0281 00000F00            441              ANDI.L  #$0F00,D1
000013BA  0C81 00000C00            442              CMPI.L  #$0C00,D1
000013C0  6700 02AE                443              BEQ     OP0000_CMPI
000013C4                           444              
000013C4                           445              * check for SUBI
000013C4  4281                     446              CLR.L   D1
000013C6  2205                     447              MOVE.L  D5,D1
000013C8  0281 00000F00            448              ANDI.L  #$0F00,D1
000013CE  0C81 00000400            449              CMPI.L  #$0400,D1
000013D4  6700 01F8                450              BEQ     OP_SUBI
000013D8                           451              
000013D8                           452              * check for EORI
000013D8  4281                     453              CLR.L   D1
000013DA  2205                     454              MOVE.L  D5,D1
000013DC  0281 00000F00            455              ANDI.L  #$0F00,D1
000013E2  0C81 00000A00            456              CMPI.L  #$0A00,D1
000013E8  6700 018E                457              BEQ     OP_EORI
000013EC                           458              
000013EC                           459              * check for BTST
000013EC  4281                     460              CLR.L   D1
000013EE  2205                     461              MOVE.L  D5,D1
000013F0  E099                     462              ROR.L   #8,D1
000013F2  0281 00000001            463              ANDI.L  #$1,D1
000013F8  0C01 0001                464              CMPI.B  #$1,D1
000013FC  6700 0008                465              BEQ     OP_BTST
00001400                           466  
00001400                           467              * OP0000 series other than ORI/CMPI/BTST/EORI
00001400  4EF9 00001624            468              JMP     OP_DATA
00001406                           469              
00001406                           470  *---------------------------------------------------------------------------*
00001406                           471  * OP_BTST: display BTST
00001406                           472  *---------------------------------------------------------------------------* 
00001406                           473  OP_BTST     
00001406                           474              *FIGURE OUT IF it is : Dn,<ea> or #<data>,<ea>
00001406                           475              *bits #8 indicates which
00001406                           476              *0 - #immediate format
00001406                           477              *1 - Dn format
00001406  4281                     478              CLR.L   D1
00001408  2205                     479              MOVE.L  D5,D1
0000140A  E099                     480              ROR.L   #8,D1
0000140C  0281 00000001            481              ANDI.L  #1,D1
00001412  0C01 0001                482              CMPI.B  #1,D1
00001416  6600 006C                483              BNE     OP_BTST_IMMEDIATE
0000141A                           484  
0000141A                           485             
0000141A                           486             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000141A  13FC 0000 00004750       487             MOVE.B   #$00,DEST_REGISTER_FORMAT
00001422  13FC 0002 00004751       488             MOVE.B   #$02,SRC_REGISTER_FORMAT
0000142A                           489             
0000142A                           490             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000142A  13FC 00B9 00004753       491             MOVE.B   #$B9,GET_DST_START_END
00001432  13FC 0020 00004754       492             MOVE.B   #$20,GET_SRC_START_END
0000143A                           493             
0000143A                           494              *CLEAR D3
0000143A  4283                     495              CLR.L   D3
0000143C                           496              *LOAD STACK WITH THIS OPMODE
0000143C  6100 29EC                497              BSR     PUSH_STACK
00001440  163C 0042                498              MOVE.B  #'B',D3
00001444  6100 29E4                499              BSR     PUSH_STACK
00001448  163C 0054                500              MOVE.B  #'T',D3
0000144C  6100 29DC                501              BSR     PUSH_STACK
00001450  163C 0053                502              MOVE.B  #'S',D3
00001454  6100 29D4                503              BSR     PUSH_STACK
00001458  163C 0054                504              MOVE.B  #'T',D3
0000145C  6100 29CC                505              BSR     PUSH_STACK
00001460  163C 002E                506              MOVE.B  #'.',D3
00001464  6100 29C4                507              BSR     PUSH_STACK
00001468  163C 004C                508              MOVE.B  #'L',D3
0000146C  6100 29BC                509              BSR     PUSH_STACK
00001470                           510              
00001470  6100 254A                511              BSR     GET_EA_EA_DEST
00001474  163C 002C                512              MOVE.B  #',',D3
00001478  6100 29B0                513              BSR     PUSH_STACK
0000147C  6100 210E                514              BSR     GET_EA_EA_SRC
00001480                           515              
00001480  6000 00F4                516              BRA     OP0000_RETURN_BTST
00001484                           517              
00001484                           518              
00001484                           519              *MOVE **** OR **** CMPI
00001484                           520              
00001484                           521  OP_BTST_IMMEDIATE              
00001484                           522   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001484  13FC 0000 00004750       523             MOVE.B   #$00,DEST_REGISTER_FORMAT
0000148C  13FC 0082 00004751       524             MOVE.B   #$82,SRC_REGISTER_FORMAT
00001494                           525             
00001494                           526             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001494  13FC 00B9 00004753       527             MOVE.B   #$B9,GET_DST_START_END
0000149C  13FC 0020 00004754       528             MOVE.B   #$20,GET_SRC_START_END
000014A4                           529             
000014A4                           530              *CLEAR D3
000014A4  4283                     531              CLR.L   D3
000014A6                           532              *LOAD STACK WITH THIS OPMODE
000014A6  6100 2982                533              BSR     PUSH_STACK
000014AA  163C 0042                534              MOVE.B  #'B',D3
000014AE  6100 297A                535              BSR     PUSH_STACK
000014B2  163C 0054                536              MOVE.B  #'T',D3
000014B6  6100 2972                537              BSR     PUSH_STACK
000014BA  163C 0053                538              MOVE.B  #'S',D3
000014BE  6100 296A                539              BSR     PUSH_STACK
000014C2  163C 0054                540              MOVE.B  #'T',D3
000014C6  6100 2962                541              BSR     PUSH_STACK
000014CA  163C 002E                542              MOVE.B  #'.',D3
000014CE  6100 295A                543              BSR     PUSH_STACK
000014D2  163C 0042                544              MOVE.B  #'B',D3
000014D6  6100 2952                545              BSR     PUSH_STACK
000014DA                           546              
000014DA                           547              *FIGURE OUT SIZE*
000014DA                           548              *00 = BYTE
000014DA                           549              *01 = WORD
000014DA                           550              *10 = LONG
000014DA                           551              * BITS 7&6
000014DA                           552              
000014DA                           553              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
000014DA  2205                     554              MOVE.L  D5,D1
000014DC  EC99                     555              ROR.L   #6,D1
000014DE  0281 00000003            556              ANDI.L  #$03,D1
000014E4  0C01 0000                557              CMPI.B  #%00,D1
000014E8  6700 0018                558              BEQ     OP0000_BTST_B
000014EC  0C01 0001                559              CMPI.B  #%01,D1
000014F0  6700 0038                560              BEQ     OP0000_BTST_W
000014F4  0281 00000003            561              ANDI.L  #$03,D1
000014FA  0C01 0002                562              CMPI.B  #%10,D1
000014FE  6700 0052                563              BEQ     OP0000_BTST_L
00001502                           564  
00001502                           565  OP0000_BTST_B
00001502  163C 0042                566              MOVE.B  #'B',D3
00001506  6100 2922                567              BSR     PUSH_STACK
0000150A                           568  *GET DATA FROM ADDQ AND PRINT #0-8
0000150A                           569              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000150A  0285 0000F03F            570              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001510  0685 000001C0            571              ADDI.L  #$01C0,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
00001516  6100 24A4                572              BSR     GET_EA_EA_DEST
0000151A  163C 002C                573              MOVE.B  #',',D3
0000151E  6100 290A                574              BSR     PUSH_STACK
00001522  6100 2068                575              BSR     GET_EA_EA_SRC
00001526  6000 004E                576              BRA     OP0000_RETURN_BTST
0000152A                           577  
0000152A                           578  OP0000_BTST_W
0000152A  163C 0057                579              MOVE.B  #'W',D3
0000152E  6100 28FA                580              BSR     PUSH_STACK
00001532                           581  *GET DATA FROM ADDQ AND PRINT #0-8
00001532                           582              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001532  0285 0000F03F            583              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001538  0685 000001C0            584              ADDI.L  #$01C0,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
0000153E  6100 247C                585              BSR     GET_EA_EA_DEST
00001542  163C 002C                586              MOVE.B  #',',D3
00001546  6100 28E2                587              BSR     PUSH_STACK
0000154A  6100 2040                588              BSR     GET_EA_EA_SRC
0000154E  6000 0026                589              BRA     OP0000_RETURN_BTST
00001552                           590  
00001552                           591  OP0000_BTST_L
00001552  163C 004C                592              MOVE.B  #'L',D3
00001556  6100 28D2                593              BSR     PUSH_STACK
0000155A                           594              *GET DATA FROM ADDQ AND PRINT #0-8
0000155A                           595              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000155A  0285 0000F03F            596              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001560  0685 000003C0            597              ADDI.L  #$03C0,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
00001566  6100 2454                598              BSR     GET_EA_EA_DEST
0000156A  163C 002C                599              MOVE.B  #',',D3
0000156E  6100 28BA                600              BSR     PUSH_STACK
00001572  6100 2018                601              BSR     GET_EA_EA_SRC
00001576                           602              
00001576                           603  OP0000_RETURN_BTST
00001576                           604              
00001576  4E75                     605              RTS
00001578                           606  
00001578                           607  
00001578                           608  *---------------------------------------------------------------------------*
00001578                           609  * OP_EORI: decode and display EORI
00001578                           610  *---------------------------------------------------------------------------* 
00001578                           611  OP_EORI
00001578  4281                     612              CLR.L   D1
0000157A  4284                     613              CLR.L   D4
0000157C  2205                     614              MOVE.L  D5,D1
0000157E  EC99                     615              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001580  0C01 0000                616              CMPI.B  #0,D1
00001584  6700 0012                617              BEQ     OP_EORI_B    * size is byte
00001588  0C01 0001                618              CMPI.B  #1,D1
0000158C  6700 001C                619              BEQ     OP_EORI_W    * size is word
00001590  0C01 0002                620              CMPI.B  #2,D1
00001594  6700 0026                621              BEQ     OP_EORI_L    * size is long
00001598                           622  
00001598                           623  OP_EORI_B    * size is byte    
00001598  183C 0000                624              MOVE.B  #0,D4
0000159C  43F9 0000445A            625              LEA     DISP_EORI_B,A1
000015A2  103C 000E                626              MOVE.B  #14,D0
000015A6  4E4F                     627              TRAP    #15
000015A8  4E75                     628              RTS
000015AA                           629              
000015AA                           630  OP_EORI_W    * size is word
000015AA  183C 0001                631              MOVE.B  #1,D4
000015AE  43F9 00004464            632              LEA     DISP_EORI_W,A1
000015B4  103C 000E                633              MOVE.B  #14,D0
000015B8  4E4F                     634              TRAP    #15
000015BA  4E75                     635              RTS
000015BC                           636              
000015BC                           637  OP_EORI_L    * size is long
000015BC  183C 0002                638              MOVE.B  #2,D4
000015C0  43F9 0000446E            639              LEA     DISP_EORI_L,A1
000015C6  103C 000E                640              MOVE.B  #14,D0
000015CA  4E4F                     641              TRAP    #15
000015CC  4E75                     642              RTS
000015CE                           643              
000015CE                           644  *---------------------------------------------------------------------------*
000015CE                           645  * OP_SUBI: decode SUBI.B/.W/.L
000015CE                           646  *---------------------------------------------------------------------------* 
000015CE                           647  OP_SUBI
000015CE  4281                     648              CLR.L   D1
000015D0  4284                     649              CLR.L   D4
000015D2  2205                     650              MOVE.L  D5,D1
000015D4  EC99                     651              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000015D6  0C01 0000                652              CMPI.B  #0,D1
000015DA  6700 0012                653              BEQ     OP_SUBI_B    * size is byte
000015DE  0C01 0001                654              CMPI.B  #1,D1
000015E2  6700 001C                655              BEQ     OP_SUBI_W    * size is word
000015E6  0C01 0002                656              CMPI.B  #2,D1
000015EA  6700 0026                657              BEQ     OP_SUBI_L    * size is long
000015EE                           658  
000015EE                           659  OP_SUBI_B    * size is byte    
000015EE  183C 0000                660              MOVE.B  #0,D4
000015F2  43F9 00004566            661              LEA     DISP_SUBI_B,A1
000015F8  103C 000E                662              MOVE.B  #14,D0
000015FC  4E4F                     663              TRAP    #15
000015FE  4E75                     664              RTS
00001600                           665              
00001600                           666  OP_SUBI_W    * size is word
00001600  183C 0001                667              MOVE.B  #1,D4
00001604  43F9 00004570            668              LEA     DISP_SUBI_W,A1
0000160A  103C 000E                669              MOVE.B  #14,D0
0000160E  4E4F                     670              TRAP    #15
00001610  4E75                     671              RTS
00001612                           672              
00001612                           673  OP_SUBI_L    * size is long
00001612  183C 0002                674              MOVE.B  #2,D4
00001616  43F9 0000457A            675              LEA     DISP_SUBI_L,A1
0000161C  103C 000E                676              MOVE.B  #14,D0
00001620  4E4F                     677              TRAP    #15
00001622  4E75                     678              RTS
00001624                           679              
00001624                           680  *---------------------------------------------------------------------------*
00001624                           681  * OP_DATA : unidentified opcode
00001624                           682  *---------------------------------------------------------------------------* 
00001624                           683  OP_DATA
00001624  4280                     684              CLR.L   D0                   
00001626  4281                     685              CLR.L   D1     
00001628  4284                     686              CLR.L   D4                    
0000162A  227C 00000000            687              MOVEA.L #0, A1             
00001630  4287                     688              CLR.L   D7
00001632  1E3C 0001                689              MOVE.B  #1,D7                   * error flag is true
00001636                           690              
00001636  43F9 0000449E            691              LEA     DISP_DATA,A1
0000163C  103C 000E                692              MOVE.B  #14,D0
00001640  4E4F                     693              TRAP    #15
00001642                           694              
00001642  4EF9 00001648            695              JMP     EA_DATA
00001648                           696             
00001648                           697             
00001648                           698  *---------------------------------------------------------------------------*
00001648                           699  * EA_DATA
00001648                           700  *---------------------------------------------------------------------------*       
00001648  43F9 000043EF            701  EA_DATA     LEA     TMPOUTPUT,A1    * load the temporarily stored output address
0000164E  2205                     702              MOVE.L  D5,D1           * transfer the processing data to D1
00001650  7404                     703              MOVE.L  #4,D2           * set to word size
00001652  4EB8 11C0                704              JSR     HEX2ASCII       * prepare output in ascii
00001656  43F9 00004711            705              LEA     DISP_HEX,A1     * display $ symbol
0000165C  103C 000E                706              MOVE.B  #14,D0      
00001660  4E4F                     707              TRAP    #15
00001662  43F9 000043EF            708              LEA     TMPOUTPUT,A1    * display with a new line
00001668  103C 000D                709              MOVE.B  #13,D0
0000166C  4E4F                     710              TRAP    #15
0000166E                           711  
0000166E  4E75                     712              RTS
00001670                           713              
00001670                           714  *---------------------------------------------------------------------------*
00001670                           715  * OP_CMPI : decode CMPI and its size
00001670                           716  *---------------------------------------------------------------------------*          
00001670                           717  OP0000_CMPI
00001670                           718  
00001670                           719              
00001670                           720   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001670  13FC 0000 00004750       721             MOVE.B   #$00,DEST_REGISTER_FORMAT
00001678  13FC 0082 00004751       722             MOVE.B   #$82,SRC_REGISTER_FORMAT
00001680                           723             
00001680                           724             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001680  13FC 00B9 00004753       725             MOVE.B   #$B9,GET_DST_START_END
00001688  13FC 0020 00004754       726             MOVE.B   #$20,GET_SRC_START_END
00001690                           727             
00001690                           728              *CLEAR D3
00001690  4283                     729              CLR.L   D3
00001692                           730              *LOAD STACK WITH THIS OPMODE
00001692  6100 2796                731              BSR     PUSH_STACK
00001696  163C 0043                732              MOVE.B  #'C',D3
0000169A  6100 278E                733              BSR     PUSH_STACK
0000169E  163C 004D                734              MOVE.B  #'M',D3
000016A2  6100 2786                735              BSR     PUSH_STACK
000016A6  163C 0050                736              MOVE.B  #'P',D3
000016AA  6100 277E                737              BSR     PUSH_STACK
000016AE  163C 0049                738              MOVE.B  #'I',D3
000016B2  6100 2776                739              BSR     PUSH_STACK
000016B6  163C 002E                740              MOVE.B  #'.',D3
000016BA  6100 276E                741              BSR     PUSH_STACK
000016BE                           742              
000016BE                           743              *FIGURE OUT SIZE*
000016BE                           744              *00 = BYTE
000016BE                           745              *01 = WORD
000016BE                           746              *10 = LONG
000016BE                           747              * BITS 7&6
000016BE                           748              
000016BE                           749              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
000016BE  2205                     750              MOVE.L  D5,D1
000016C0  EC99                     751              ROR.L   #6,D1
000016C2  0281 00000003            752              ANDI.L  #$03,D1
000016C8  0C01 0000                753              CMPI.B  #%00,D1
000016CC  6700 0018                754              BEQ     OP0000_CMPI_B
000016D0  0C01 0001                755              CMPI.B  #%01,D1
000016D4  6700 0038                756              BEQ     OP0000_CMPI_W
000016D8  0281 00000003            757              ANDI.L  #$03,D1
000016DE  0C01 0002                758              CMPI.B  #%10,D1
000016E2  6700 0052                759              BEQ     OP0000_CMPI_L
000016E6                           760  
000016E6                           761  OP0000_CMPI_B
000016E6  163C 0042                762              MOVE.B  #'B',D3
000016EA  6100 273E                763              BSR     PUSH_STACK
000016EE                           764  *GET DATA FROM ADDQ AND PRINT #0-8
000016EE                           765              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000016EE  0285 0000F03F            766              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000016F4  0685 000001C0            767              ADDI.L  #$01C0,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
000016FA  6100 22C0                768              BSR     GET_EA_EA_DEST
000016FE  163C 002C                769              MOVE.B  #',',D3
00001702  6100 2726                770              BSR     PUSH_STACK
00001706  6100 1E84                771              BSR     GET_EA_EA_SRC
0000170A  6000 004E                772              BRA     OP0000_RETURN_CMPI
0000170E                           773  
0000170E                           774  OP0000_CMPI_W
0000170E  163C 0057                775              MOVE.B  #'W',D3
00001712  6100 2716                776              BSR     PUSH_STACK
00001716                           777  *GET DATA FROM ADDQ AND PRINT #0-8
00001716                           778              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001716  0285 0000F03F            779              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000171C  0685 000001C0            780              ADDI.L  #$01C0,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
00001722  6100 2298                781              BSR     GET_EA_EA_DEST
00001726  163C 002C                782              MOVE.B  #',',D3
0000172A  6100 26FE                783              BSR     PUSH_STACK
0000172E  6100 1E5C                784              BSR     GET_EA_EA_SRC
00001732  6000 0026                785              BRA     OP0000_RETURN_CMPI
00001736                           786  
00001736                           787  OP0000_CMPI_L
00001736  163C 004C                788              MOVE.B  #'L',D3
0000173A  6100 26EE                789              BSR     PUSH_STACK
0000173E                           790              *GET DATA FROM ADDQ AND PRINT #0-8
0000173E                           791              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000173E  0285 0000F03F            792              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001744  0685 000003C0            793              ADDI.L  #$03C0,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
0000174A  6100 2270                794              BSR     GET_EA_EA_DEST
0000174E  163C 002C                795              MOVE.B  #',',D3
00001752  6100 26D6                796              BSR     PUSH_STACK
00001756  6100 1E34                797              BSR     GET_EA_EA_SRC
0000175A                           798              
0000175A                           799  OP0000_RETURN_CMPI
0000175A                           800  
0000175A                           801  
0000175A                           802              
0000175A  4E75                     803              RTS
0000175C                           804   
0000175C                           805  *---------------------------------------------------------------------------*
0000175C                           806  * OP_ORI : decode ORI and its size
0000175C                           807  *---------------------------------------------------------------------------* 
0000175C                           808  OP_ORI      
0000175C                           809           
0000175C                           810   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000175C  13FC 0000 00004750       811             MOVE.B   #$00,DEST_REGISTER_FORMAT
00001764  13FC 0082 00004751       812             MOVE.B   #$82,SRC_REGISTER_FORMAT
0000176C                           813             
0000176C                           814             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000176C  13FC 00B9 00004753       815             MOVE.B   #$B9,GET_DST_START_END
00001774  13FC 0020 00004754       816             MOVE.B   #$20,GET_SRC_START_END
0000177C                           817             
0000177C                           818              *CLEAR D3
0000177C  4283                     819              CLR.L   D3
0000177E                           820              *LOAD STACK WITH THIS OPMODE
0000177E  6100 26AA                821              BSR     PUSH_STACK
00001782  163C 004F                822              MOVE.B  #'O',D3
00001786  6100 26A2                823              BSR     PUSH_STACK
0000178A  163C 0052                824              MOVE.B  #'R',D3
0000178E  6100 269A                825              BSR     PUSH_STACK
00001792  163C 0049                826              MOVE.B  #'I',D3
00001796  6100 2692                827              BSR     PUSH_STACK
0000179A  163C 002E                828              MOVE.B  #'.',D3
0000179E  6100 268A                829              BSR     PUSH_STACK
000017A2                           830              
000017A2                           831              *FIGURE OUT SIZE*
000017A2                           832              *00 = BYTE
000017A2                           833              *01 = WORD
000017A2                           834              *10 = LONG
000017A2                           835              * BITS 7&6
000017A2                           836              
000017A2                           837              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
000017A2  2205                     838              MOVE.L  D5,D1
000017A4  EC99                     839              ROR.L   #6,D1
000017A6  0281 00000003            840              ANDI.L  #$03,D1
000017AC  0C01 0000                841              CMPI.B  #%00,D1
000017B0  6700 0018                842              BEQ     OP0000_ORI_B
000017B4  0C01 0001                843              CMPI.B  #%01,D1
000017B8  6700 0038                844              BEQ     OP0000_ORI_W
000017BC  0281 00000003            845              ANDI.L  #$03,D1
000017C2  0C01 0002                846              CMPI.B  #%10,D1
000017C6  6700 0052                847              BEQ     OP0000_ORI_L
000017CA                           848  
000017CA                           849  OP0000_ORI_B
000017CA  163C 0042                850              MOVE.B  #'B',D3
000017CE  6100 265A                851              BSR     PUSH_STACK
000017D2                           852  *GET DATA FROM ADDQ AND PRINT #0-8
000017D2                           853              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000017D2  0285 0000F03F            854              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000017D8  0685 000001C0            855              ADDI.L  #$01C0,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
000017DE  6100 21DC                856              BSR     GET_EA_EA_DEST
000017E2  163C 002C                857              MOVE.B  #',',D3
000017E6  6100 2642                858              BSR     PUSH_STACK
000017EA  6100 1DA0                859              BSR     GET_EA_EA_SRC
000017EE  6000 004E                860              BRA     OP0000_RETURN_ORI
000017F2                           861  
000017F2                           862  OP0000_ORI_W
000017F2  163C 0057                863              MOVE.B  #'W',D3
000017F6  6100 2632                864              BSR     PUSH_STACK
000017FA                           865  *GET DATA FROM ADDQ AND PRINT #0-8
000017FA                           866              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000017FA  0285 0000F03F            867              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001800  0685 000001C0            868              ADDI.L  #$01C0,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
00001806  6100 21B4                869              BSR     GET_EA_EA_DEST
0000180A  163C 002C                870              MOVE.B  #',',D3
0000180E  6100 261A                871              BSR     PUSH_STACK
00001812  6100 1D78                872              BSR     GET_EA_EA_SRC
00001816  6000 0026                873              BRA     OP0000_RETURN_ORI
0000181A                           874  
0000181A                           875  OP0000_ORI_L
0000181A  163C 004C                876              MOVE.B  #'L',D3
0000181E  6100 260A                877              BSR     PUSH_STACK
00001822                           878              *GET DATA FROM ADDQ AND PRINT #0-8
00001822                           879              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001822  0285 0000F03F            880              ANDI.L  #$F03F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001828  0685 000003C0            881              ADDI.L  #$03C0,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
0000182E  6100 218C                882              BSR     GET_EA_EA_DEST
00001832  163C 002C                883              MOVE.B  #',',D3
00001836  6100 25F2                884              BSR     PUSH_STACK
0000183A  6100 1D50                885              BSR     GET_EA_EA_SRC
0000183E                           886              
0000183E                           887  OP0000_RETURN_ORI
0000183E                           888  
0000183E                           889  
0000183E                           890              
0000183E  4E75                     891              RTS
00001840                           892  
00001840                           893          
00001840                           894  *---------------------------------------------------------------------------*
00001840                           895  * OP0001: MOVE.B
00001840                           896  *---------------------------------------------------------------------------*
00001840                           897  OP0001      
00001840  4EF9 00001846            898              JMP     OP_MOVE_B   * display MOVE.B
00001846                           899              
00001846                           900  *---------------------------------------------------------------------------*
00001846                           901  * OP_MOVE_B: display MOVE_B and proceed to EA
00001846                           902  *---------------------------------------------------------------------------*
00001846                           903  OP_MOVE_B                                                                       
00001846                           904             
00001846                           905             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001846  13FC 0082 00004750       906             MOVE.B   #$82,DEST_REGISTER_FORMAT
0000184E  13FC 0000 00004751       907             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001856                           908             
00001856                           909             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001856  13FC 00B9 00004753       910             MOVE.B   #$B9,GET_DST_START_END
0000185E  13FC 0020 00004754       911             MOVE.B   #$20,GET_SRC_START_END
00001866                           912             
00001866                           913              *CLEAR D3
00001866  4283                     914              CLR.L   D3
00001868                           915              *LOAD STACK WITH THIS OPMODE
00001868  6100 25C0                916              BSR     PUSH_STACK
0000186C  163C 004D                917              MOVE.B  #'M',D3
00001870  6100 25B8                918              BSR     PUSH_STACK
00001874  163C 004F                919              MOVE.B  #'O',D3
00001878  6100 25B0                920              BSR     PUSH_STACK
0000187C  163C 0056                921              MOVE.B  #'V',D3
00001880  6100 25A8                922              BSR     PUSH_STACK
00001884  163C 0045                923              MOVE.B  #'E',D3
00001888  6100 25A0                924              BSR     PUSH_STACK
0000188C  163C 002E                925              MOVE.B  #'.',D3
00001890  6100 2598                926              BSR     PUSH_STACK
00001894  163C 0042                927              MOVE.B  #'B',D3
00001898  6100 2590                928              BSR     PUSH_STACK
0000189C                           929              
0000189C  6100 1CEE                930              BSR     GET_EA_EA_SRC
000018A0  163C 002C                931              MOVE.B  #',',D3
000018A4  6100 2584                932              BSR     PUSH_STACK
000018A8  6100 2112                933              BSR     GET_EA_EA_DEST
000018AC                           934              
000018AC  4E75                     935              RTS
000018AE                           936              
000018AE                           937             
000018AE                           938  *---------------------------------------------------------------------------*
000018AE                           939  * OP0010: decode MOVE.L/MOVEA.L
000018AE                           940  *---------------------------------------------------------------------------*
000018AE                           941  OP0010      
000018AE  183C 0002                942              MOVE.B  #2,D4
000018B2  4280                     943              CLR.L   D0                     
000018B4  4281                     944              CLR.L   D1                      
000018B6  227C 00000000            945              MOVEA.L #0, A1                 
000018BC                           946              
000018BC  2205                     947              MOVE.L  D5,D1
000018BE  EA99                     948              ROR.L   #5,D1
000018C0  0281 0000000E            949              ANDI.L  #$E,D1
000018C6  0C01 0002                950              CMPI.B  #2,D1
000018CA  6700 0070                951              BEQ     OP_MOVEA_L
000018CE                           952  
000018CE  4EF9 000018D4            953              JMP     OP_MOVE_L
000018D4                           954             
000018D4                           955  
000018D4                           956  *---------------------------------------------------------------------------*
000018D4                           957  * OP_MOVE_L: display MOVE_L and proceed to EA
000018D4                           958  *---------------------------------------------------------------------------*
000018D4                           959  OP_MOVE_L   
000018D4                           960             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000018D4  13FC 0082 00004750       961             MOVE.B   #$82,DEST_REGISTER_FORMAT
000018DC  13FC 0000 00004751       962             MOVE.B   #$00,SRC_REGISTER_FORMAT
000018E4                           963             
000018E4                           964             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000018E4  13FC 00B9 00004753       965             MOVE.B   #$B9,GET_DST_START_END
000018EC  13FC 0020 00004754       966             MOVE.B   #$20,GET_SRC_START_END
000018F4                           967             
000018F4                           968              *CLEAR D3
000018F4  4283                     969              CLR.L   D3
000018F6                           970              *LOAD STACK WITH THIS OPMODE
000018F6  6100 2532                971              BSR     PUSH_STACK
000018FA  163C 004D                972              MOVE.B  #'M',D3
000018FE  6100 252A                973              BSR     PUSH_STACK
00001902  163C 004F                974              MOVE.B  #'O',D3
00001906  6100 2522                975              BSR     PUSH_STACK
0000190A  163C 0056                976              MOVE.B  #'V',D3
0000190E  6100 251A                977              BSR     PUSH_STACK
00001912  163C 0045                978              MOVE.B  #'E',D3
00001916  6100 2512                979              BSR     PUSH_STACK
0000191A  163C 002E                980              MOVE.B  #'.',D3
0000191E  6100 250A                981              BSR     PUSH_STACK
00001922  163C 004C                982              MOVE.B  #'L',D3
00001926  6100 2502                983              BSR     PUSH_STACK
0000192A                           984              
0000192A  6100 1C60                985              BSR     GET_EA_EA_SRC
0000192E  163C 002C                986              MOVE.B  #',',D3
00001932  6100 24F6                987              BSR     PUSH_STACK
00001936  6100 2084                988              BSR     GET_EA_EA_DEST
0000193A                           989              
0000193A  4E75                     990              RTS
0000193C                           991  
0000193C                           992  
0000193C                           993  *---------------------------------------------------------------------------*
0000193C                           994  * OP_MOVEA_L: display MOVEA_L and proceed to EA
0000193C                           995  *---------------------------------------------------------------------------*
0000193C                           996  OP_MOVEA_L 
0000193C                           997             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000193C  13FC 00FD 00004750       998             MOVE.B   #$FD,DEST_REGISTER_FORMAT
00001944  13FC 0000 00004751       999             MOVE.B   #$00,SRC_REGISTER_FORMAT
0000194C                          1000             
0000194C                          1001             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000194C  13FC 00B9 00004753      1002             MOVE.B   #$B9,GET_DST_START_END
00001954  13FC 0020 00004754      1003             MOVE.B   #$20,GET_SRC_START_END
0000195C                          1004             
0000195C                          1005              *CLEAR D3
0000195C  4283                    1006              CLR.L   D3
0000195E                          1007              *LOAD STACK WITH THIS OPMODE
0000195E  6100 24CA               1008              BSR     PUSH_STACK
00001962  163C 004D               1009              MOVE.B  #'M',D3
00001966  6100 24C2               1010              BSR     PUSH_STACK
0000196A  163C 004F               1011              MOVE.B  #'O',D3
0000196E  6100 24BA               1012              BSR     PUSH_STACK
00001972  163C 0056               1013              MOVE.B  #'V',D3
00001976  6100 24B2               1014              BSR     PUSH_STACK
0000197A  163C 0045               1015              MOVE.B  #'E',D3
0000197E  6100 24AA               1016              BSR     PUSH_STACK           
00001982  163C 0041               1017              MOVE.B  #'A',D3
00001986  6100 24A2               1018              BSR     PUSH_STACK
0000198A  163C 002E               1019              MOVE.B  #'.',D3
0000198E  6100 249A               1020              BSR     PUSH_STACK
00001992  163C 004C               1021              MOVE.B  #'L',D3
00001996  6100 2492               1022              BSR     PUSH_STACK
0000199A                          1023              
0000199A  6100 1BF0               1024              BSR     GET_EA_EA_SRC
0000199E  163C 002C               1025              MOVE.B  #',',D3
000019A2  6100 2486               1026              BSR     PUSH_STACK
000019A6  6100 2014               1027              BSR     GET_EA_EA_DEST
000019AA                          1028              
000019AA  4E75                    1029              RTS
000019AC                          1030  
000019AC                          1031              
000019AC                          1032  *---------------------------------------------------------------------------*
000019AC                          1033  * OP0011: decode MOVE.W/MOVEA.W
000019AC                          1034  *---------------------------------------------------------------------------*
000019AC                          1035  OP0011      
000019AC  4280                    1036              CLR.L   D0                      
000019AE  4281                    1037              CLR.L   D1  
000019B0  4284                    1038              CLR.L   D4                   
000019B2  227C 00000000           1039              MOVEA.L #0, A1 
000019B8                          1040                
000019B8  2205                    1041              MOVE.L  D5,D1
000019BA  EC99                    1042              ROR.L   #6,D1
000019BC  0281 00000007           1043              ANDI.L  #$07,D1
000019C2  0C01 0001               1044              CMPI.B  #1,D1
000019C6  6700 0070               1045              BEQ     OP_MOVEA_W
000019CA                          1046              
000019CA  4EF9 000019D0           1047              JMP     OP_MOVE_W
000019D0                          1048            
000019D0                          1049  *---------------------------------------------------------------------------*
000019D0                          1050  * OP_MOVE_W: display MOVE_W and proceed to EA
000019D0                          1051  *---------------------------------------------------------------------------*
000019D0                          1052  OP_MOVE_W   
000019D0                          1053             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000019D0  13FC 0082 00004750      1054             MOVE.B   #$82,DEST_REGISTER_FORMAT
000019D8  13FC 0000 00004751      1055             MOVE.B   #$00,SRC_REGISTER_FORMAT
000019E0                          1056             
000019E0                          1057             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000019E0  13FC 00B9 00004753      1058             MOVE.B   #$B9,GET_DST_START_END
000019E8  13FC 0020 00004754      1059             MOVE.B   #$20,GET_SRC_START_END
000019F0                          1060             
000019F0                          1061              *CLEAR D3
000019F0  4283                    1062              CLR.L   D3
000019F2                          1063              *LOAD STACK WITH THIS OPMODE
000019F2  6100 2436               1064              BSR     PUSH_STACK
000019F6  163C 004D               1065              MOVE.B  #'M',D3
000019FA  6100 242E               1066              BSR     PUSH_STACK
000019FE  163C 004F               1067              MOVE.B  #'O',D3
00001A02  6100 2426               1068              BSR     PUSH_STACK
00001A06  163C 0056               1069              MOVE.B  #'V',D3
00001A0A  6100 241E               1070              BSR     PUSH_STACK
00001A0E  163C 0045               1071              MOVE.B  #'E',D3
00001A12  6100 2416               1072              BSR     PUSH_STACK
00001A16  163C 002E               1073              MOVE.B  #'.',D3
00001A1A  6100 240E               1074              BSR     PUSH_STACK
00001A1E  163C 0057               1075              MOVE.B  #'W',D3
00001A22  6100 2406               1076              BSR     PUSH_STACK
00001A26                          1077              
00001A26  6100 1B64               1078              BSR     GET_EA_EA_SRC
00001A2A  163C 002C               1079              MOVE.B  #',',D3
00001A2E  6100 23FA               1080              BSR     PUSH_STACK
00001A32  6100 1F88               1081              BSR     GET_EA_EA_DEST
00001A36                          1082              
00001A36  4E75                    1083              RTS
00001A38                          1084  
00001A38                          1085  *---------------------------------------------------------------------------*
00001A38                          1086  * OP_MOVEA_W: display MOVEA and proceed to EA
00001A38                          1087  *---------------------------------------------------------------------------*
00001A38                          1088  OP_MOVEA_W 
00001A38                          1089             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001A38  13FC 00FD 00004750      1090             MOVE.B   #$FD,DEST_REGISTER_FORMAT
00001A40  13FC 0000 00004751      1091             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001A48                          1092             
00001A48                          1093             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001A48  13FC 00B9 00004753      1094             MOVE.B   #$B9,GET_DST_START_END
00001A50  13FC 0020 00004754      1095             MOVE.B   #$20,GET_SRC_START_END
00001A58                          1096             
00001A58                          1097              *CLEAR D3
00001A58  4283                    1098              CLR.L   D3
00001A5A                          1099              *LOAD STACK WITH THIS OPMODE
00001A5A  6100 23CE               1100              BSR     PUSH_STACK
00001A5E  163C 004D               1101              MOVE.B  #'M',D3
00001A62  6100 23C6               1102              BSR     PUSH_STACK
00001A66  163C 004F               1103              MOVE.B  #'O',D3
00001A6A  6100 23BE               1104              BSR     PUSH_STACK
00001A6E  163C 0056               1105              MOVE.B  #'V',D3
00001A72  6100 23B6               1106              BSR     PUSH_STACK
00001A76  163C 0045               1107              MOVE.B  #'E',D3
00001A7A  6100 23AE               1108              BSR     PUSH_STACK           
00001A7E  163C 0041               1109              MOVE.B  #'A',D3
00001A82  6100 23A6               1110              BSR     PUSH_STACK
00001A86  163C 002E               1111              MOVE.B  #'.',D3
00001A8A  6100 239E               1112              BSR     PUSH_STACK
00001A8E  163C 0057               1113              MOVE.B  #'W',D3
00001A92  6100 2396               1114              BSR     PUSH_STACK
00001A96                          1115              
00001A96  6100 1AF4               1116              BSR     GET_EA_EA_SRC
00001A9A  163C 002C               1117              MOVE.B  #',',D3
00001A9E  6100 238A               1118              BSR     PUSH_STACK
00001AA2  6100 1F18               1119              BSR     GET_EA_EA_DEST
00001AA6                          1120            
00001AA6  4E75                    1121              RTS
00001AA8                          1122  *---------------------------------------------------------------------------*
00001AA8                          1123  * OP0100: decode MOVEM/LEA/NEG/JSR/RTS/NOT
00001AA8                          1124  *---------------------------------------------------------------------------*
00001AA8                          1125  OP0100
00001AA8  4280                    1126              CLR.L   D0                      
00001AAA  4281                    1127              CLR.L   D1  
00001AAC  4284                    1128              CLR.L   D4                      
00001AAE  227C 00000000           1129              MOVEA.L #0, A1                  
00001AB4  2205                    1130              MOVE.L  D5,D1  
00001AB6                          1131              
00001AB6                          1132              * check for RTS
00001AB6  0C41 4E75               1133              CMPI.W  #$4E75,D1   * 0100 1110 0111 0101
00001ABA  6700 0228               1134              BEQ     OP_RTS
00001ABE                          1135              
00001ABE                          1136              * check for JSR     * 0100 1110 10 xxx (ea mode) xxx (ea reg)
00001ABE  4281                    1137              CLR.L   D1 
00001AC0  2205                    1138              MOVE.L  D5,D1  
00001AC2  0241 0F00               1139              ANDI.W  #$0F00,D1
00001AC6  0C41 0E00               1140              CMPI.W  #$0E00,D1
00001ACA  6700 0204               1141              BEQ     OP_JSR
00001ACE                          1142  
00001ACE                          1143              * check for NEG     * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
00001ACE  4281                    1144              CLR.L   D1 
00001AD0  2205                    1145              MOVE.L  D5,D1  
00001AD2  0241 0F00               1146              ANDI.W  #$0F00,D1
00001AD6  0C41 0400               1147              CMPI.W  #$0400,D1
00001ADA  6700 00E8               1148              BEQ     OP_NEG
00001ADE                          1149              
00001ADE                          1150              * check for NOT     * 0100 0110 xx (size) xxx (ea mode) xxx (ea reg)
00001ADE  4281                    1151              CLR.L   D1 
00001AE0  2205                    1152              MOVE.L  D5,D1  
00001AE2  0241 0F00               1153              ANDI.W  #$0F00,D1
00001AE6  0C41 0600               1154              CMPI.W  #$0600,D1
00001AEA  6700 015E               1155              BEQ     OP_NOT
00001AEE                          1156              
00001AEE                          1157              * check for LEA     * 0100 xxx (reg) 111 xxx (ea mode) xxx (ea reg)
00001AEE  4281                    1158              CLR.L   D1 
00001AF0  2205                    1159              MOVE.L  D5,D1  
00001AF2  EC99                    1160              ROR.L   #6,D1
00001AF4  0281 00000007           1161              ANDI.L  #7,D1
00001AFA  0C81 00000007           1162              CMPI.L  #7,D1
00001B00  6700 0054               1163              BEQ     OP_LEA
00001B04                          1164              
00001B04                          1165              * check for MOVEM   * 0100 1 x 001 x (size) xxx (ea mode) xxx (ea reg)
00001B04  4281                    1166              CLR.L   D1 
00001B06  2205                    1167              MOVE.L  D5,D1  
00001B08  EB59                    1168              ROL.W   #5,D1
00001B0A  0C01 0001               1169              CMPI.B  #1,D1
00001B0E  6600 FB14               1170              BNE     OP_DATA
00001B12  E959                    1171              ROL.W   #4,D1
00001B14  0C01 0001               1172              CMPI.B  #1,D1
00001B18  6600 FB0A               1173              BNE     OP_DATA
00001B1C  E359                    1174              ROL.W   #1,D1
00001B1E  0C01 0000               1175              CMPI.B  #0,D1
00001B22  6700 000E               1176              BEQ     OP_MOVEM_W
00001B26  0C01 0001               1177              CMPI.B  #1,D1
00001B2A  6700 0018               1178              BEQ     OP_MOVEM_L
00001B2E  4EF8 1624               1179              JMP     OP_DATA
00001B32                          1180  
00001B32                          1181  *---------------------------------------------------------------------------*
00001B32                          1182  * OP_MOVEM_W: display MOVEM_W
00001B32                          1183  *---------------------------------------------------------------------------*    
00001B32                          1184  OP_MOVEM_W  
00001B32  183C 0001               1185              MOVE.B  #1,D4
00001B36  43F9 0000450F           1186              LEA     DISP_MOVEM_W,A1
00001B3C  103C 000E               1187              MOVE.B  #14,D0
00001B40  4E4F                    1188              TRAP    #15
00001B42  4E75                    1189              RTS
00001B44                          1190  
00001B44                          1191  *---------------------------------------------------------------------------*
00001B44                          1192  * OP_MOVEM_L: display MOVEM_L
00001B44                          1193  *---------------------------------------------------------------------------*
00001B44                          1194  OP_MOVEM_L  
00001B44  183C 0002               1195              MOVE.B  #2,D4
00001B48  43F9 0000451A           1196              LEA     DISP_MOVEM_L,A1
00001B4E  103C 000E               1197              MOVE.B  #14,D0
00001B52  4E4F                    1198              TRAP    #15
00001B54  4E75                    1199              RTS
00001B56                          1200     
00001B56                          1201  *---------------------------------------------------------------------------*
00001B56                          1202  * OP_LEA: decode and display LEA
00001B56                          1203  *---------------------------------------------------------------------------*
00001B56                          1204  OP_LEA      
00001B56  4281                    1205               CLR.L   D1       
00001B58  4284                    1206              CLR.L   D4                   
00001B5A  227C 00000000           1207              MOVEA.L #0, A1              
00001B60  2205                    1208              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
00001B62                          1209              *CLEAR D3
00001B62  4283                    1210              CLR.L   D3
00001B64                          1211  
00001B64                          1212  OP_LEA_DN_EA_OR_EA_DN 
00001B64                          1213              *LOAD STACK WITH THIS OPMODE
00001B64  6100 22C4               1214              BSR     PUSH_STACK
00001B68  163C 004C               1215              MOVE.B  #'L',D3
00001B6C  6100 22BC               1216              BSR     PUSH_STACK
00001B70  163C 0045               1217              MOVE.B  #'E',D3
00001B74  6100 22B4               1218              BSR     PUSH_STACK
00001B78  163C 0041               1219              MOVE.B  #'A',D3
00001B7C  6100 22AC               1220              BSR     PUSH_STACK
00001B80  2205                    1221              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00001B82                          1222          
00001B82                          1223  
00001B82                          1224  OP_PRINT_L_LEA
00001B82                          1225                          
00001B82                          1226              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001B82  13FC 0000 00004750      1227              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001B8A  13FC 009B 00004751      1228              MOVE.B   #$9B,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001B92                          1229             
00001B92                          1230              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001B92  13FC 00B9 00004753      1231              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001B9A  13FC 0020 00004754      1232              MOVE.B   #$20,GET_SRC_START_END
00001BA2                          1233  
00001BA2                          1234              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001BA2  0285 0000FE3F           1235              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001BA8  0685 00000040           1236              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00001BAE                          1237  
00001BAE  6100 19DC               1238              BSR     GET_EA_EA_SRC      *GETS <ea>
00001BB2  163C 002C               1239              MOVE.B  #',',D3
00001BB6  6100 2272               1240              BSR     PUSH_STACK           
00001BBA  6100 1E00               1241              BSR     GET_EA_EA_DEST       *GETS Dn    
00001BBE                          1242  
00001BBE                          1243              
00001BBE  6000 0002               1244              BRA     OP_LEA_RETURN
00001BC2                          1245              
00001BC2                          1246  OP_LEA_RETURN
00001BC2  4E75                    1247              RTS
00001BC4                          1248              
00001BC4                          1249  
00001BC4                          1250  
00001BC4                          1251  *---------------------------------------------------------------------------*
00001BC4                          1252  * OP_NEG: decode and display NEG 
00001BC4                          1253  *---------------------------------------------------------------------------*
00001BC4                          1254  OP_NEG      * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
00001BC4  4281                    1255              CLR.L   D1
00001BC6  4284                    1256              CLR.L   D4
00001BC8  2205                    1257              MOVE.L  D5,D1
00001BCA                          1258              
00001BCA                          1259              *CLEAR D3
00001BCA  4283                    1260              CLR.L   D3
00001BCC                          1261              *LOAD STACK WITH THIS OPMODE
00001BCC  6100 225C               1262              BSR     PUSH_STACK
00001BD0  163C 004E               1263              MOVE.B  #'N',D3
00001BD4  6100 2254               1264              BSR     PUSH_STACK
00001BD8  163C 0045               1265              MOVE.B  #'E',D3
00001BDC  6100 224C               1266              BSR     PUSH_STACK
00001BE0  163C 0047               1267              MOVE.B  #'G',D3
00001BE4  6100 2244               1268              BSR     PUSH_STACK
00001BE8  163C 002E               1269              MOVE.B  #'.',D3
00001BEC  6100 223C               1270              BSR     PUSH_STACK
00001BF0                          1271              
00001BF0                          1272              
00001BF0  EC99                    1273              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001BF2  0281 00000007           1274              ANDI.L  #$07,D1
00001BF8                          1275              
00001BF8  0C01 0000               1276              CMPI.B  #0,D1
00001BFC  6700 0012               1277              BEQ     OP_NEG_B    * size is byte
00001C00  0C01 0001               1278              CMPI.B  #1,D1
00001C04  6700 0016               1279              BEQ     OP_NEG_W    * size is word
00001C08  0C01 0002               1280              CMPI.B  #2,D1
00001C0C  6700 001A               1281              BEQ     OP_NEG_L    * size is long
00001C10                          1282                         
00001C10                          1283  
00001C10                          1284  OP_NEG_B    * size is byte   
00001C10  163C 0042               1285              MOVE.B  #'B',D3
00001C14  6100 2214               1286              BSR     PUSH_STACK
00001C18  6000 001A               1287              BRA     OP_NEG_PRINT_EA
00001C1C                          1288  
00001C1C                          1289              
00001C1C                          1290  OP_NEG_W    * size is word
00001C1C  163C 0057               1291              MOVE.B  #'W',D3
00001C20  6100 2208               1292              BSR     PUSH_STACK
00001C24  6000 000E               1293              BRA     OP_NEG_PRINT_EA
00001C28                          1294  
00001C28                          1295              
00001C28                          1296  OP_NEG_L    * size is long
00001C28  163C 004C               1297              MOVE.B  #'L',D3
00001C2C  6100 21FC               1298              BSR     PUSH_STACK
00001C30  6000 0002               1299              BRA     OP_NEG_PRINT_EA
00001C34                          1300  
00001C34                          1301  
00001C34                          1302  OP_NEG_PRINT_EA
00001C34                          1303   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001C34  13FC 0082 00004751      1304             MOVE.B   #$82,SRC_REGISTER_FORMAT
00001C3C                          1305             
00001C3C                          1306             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001C3C  13FC 0020 00004754      1307             MOVE.B   #$20,GET_SRC_START_END
00001C44                          1308                         
00001C44                          1309  
00001C44  6100 1946               1310              BSR     GET_EA_EA_SRC
00001C48                          1311              
00001C48  4E75                    1312              RTS
00001C4A                          1313  
00001C4A                          1314  *---------------------------------------------------------------------------*
00001C4A                          1315  * OP_NOT: decode and display NOT 
00001C4A                          1316  *---------------------------------------------------------------------------*
00001C4A                          1317  OP_NOT
00001C4A  4281                    1318              CLR.L   D1
00001C4C  4284                    1319              CLR.L   D4
00001C4E  2205                    1320              MOVE.L  D5,D1
00001C50                          1321              
00001C50                          1322              *CLEAR D3
00001C50  4283                    1323              CLR.L   D3
00001C52                          1324              *LOAD STACK WITH THIS OPMODE
00001C52  6100 21D6               1325              BSR     PUSH_STACK
00001C56  163C 004E               1326              MOVE.B  #'N',D3
00001C5A  6100 21CE               1327              BSR     PUSH_STACK
00001C5E  163C 004F               1328              MOVE.B  #'O',D3
00001C62  6100 21C6               1329              BSR     PUSH_STACK
00001C66  163C 0054               1330              MOVE.B  #'T',D3
00001C6A  6100 21BE               1331              BSR     PUSH_STACK
00001C6E  163C 002E               1332              MOVE.B  #'.',D3
00001C72  6100 21B6               1333              BSR     PUSH_STACK
00001C76                          1334              
00001C76                          1335              
00001C76  EC99                    1336              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001C78  0281 00000007           1337              ANDI.L  #$07,D1
00001C7E                          1338              
00001C7E  0C01 0000               1339              CMPI.B  #0,D1
00001C82  6700 0012               1340              BEQ     OP_NOT_B    * size is byte
00001C86  0C01 0001               1341              CMPI.B  #1,D1
00001C8A  6700 0016               1342              BEQ     OP_NOT_W    * size is word
00001C8E  0C01 0002               1343              CMPI.B  #2,D1
00001C92  6700 001A               1344              BEQ     OP_NOT_L    * size is long
00001C96                          1345                         
00001C96                          1346  
00001C96                          1347  OP_NOT_B    * size is byte   
00001C96  163C 0042               1348              MOVE.B  #'B',D3
00001C9A  6100 218E               1349              BSR     PUSH_STACK
00001C9E  6000 001A               1350              BRA     OP_NOT_PRINT_EA
00001CA2                          1351  
00001CA2                          1352              
00001CA2                          1353  OP_NOT_W    * size is word
00001CA2  163C 0057               1354              MOVE.B  #'W',D3
00001CA6  6100 2182               1355              BSR     PUSH_STACK
00001CAA  6000 000E               1356              BRA     OP_NOT_PRINT_EA
00001CAE                          1357  
00001CAE                          1358              
00001CAE                          1359  OP_NOT_L    * size is long
00001CAE  163C 004C               1360              MOVE.B  #'L',D3
00001CB2  6100 2176               1361              BSR     PUSH_STACK
00001CB6  6000 0002               1362              BRA     OP_NOT_PRINT_EA
00001CBA                          1363  
00001CBA                          1364  
00001CBA                          1365  OP_NOT_PRINT_EA
00001CBA                          1366   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001CBA  13FC 0082 00004751      1367             MOVE.B   #$82,SRC_REGISTER_FORMAT
00001CC2                          1368             
00001CC2                          1369             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001CC2  13FC 0020 00004754      1370             MOVE.B   #$20,GET_SRC_START_END
00001CCA  6100 18C0               1371              BSR     GET_EA_EA_SRC
00001CCE                          1372              
00001CCE  4E75                    1373              RTS
00001CD0                          1374  
00001CD0                          1375  
00001CD0                          1376  *---------------------------------------------------------------------------*
00001CD0                          1377  * OP_JSR: display JSR     
00001CD0                          1378  *---------------------------------------------------------------------------*
00001CD0  43F9 000044CB           1379  OP_JSR      LEA     DISP_JSR,A1
00001CD6  103C 000E               1380              MOVE.B  #14,D0
00001CDA  4E4F                    1381              TRAP    #15
00001CDC  4EB9 000030DC           1382              JSR     EA_NOSRC
00001CE2                          1383  
00001CE2  4E75                    1384              RTS
00001CE4                          1385  
00001CE4                          1386  *---------------------------------------------------------------------------*
00001CE4                          1387  * OP_RTS: display RTS     
00001CE4                          1388  *---------------------------------------------------------------------------* 
00001CE4                          1389  OP_RTS      
00001CE4  163C 0052               1390              MOVE.B #'R',D3
00001CE8  6100 2140               1391              BSR     PUSH_STACK
00001CEC  163C 0054               1392              MOVE.B #'T',D3
00001CF0  6100 2138               1393              BSR     PUSH_STACK
00001CF4  163C 0053               1394              MOVE.B #'S',D3
00001CF8  6100 2130               1395              BSR     PUSH_STACK
00001CFC  4E75                    1396              RTS
00001CFE                          1397  
00001CFE                          1398  *---------------------------------------------------------------------------*
00001CFE                          1399  * OP0101: decode ADDQ
00001CFE                          1400  *---------------------------------------------------------------------------* 
00001CFE                          1401  OP0101      
00001CFE                          1402             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001CFE  13FC 0082 00004750      1403             MOVE.B   #$82,DEST_REGISTER_FORMAT
00001D06  13FC 0080 00004751      1404             MOVE.B   #$80,SRC_REGISTER_FORMAT
00001D0E                          1405             
00001D0E                          1406             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001D0E  13FC 00B9 00004753      1407             MOVE.B   #$B9,GET_DST_START_END
00001D16  13FC 0020 00004754      1408             MOVE.B   #$20,GET_SRC_START_END
00001D1E                          1409             
00001D1E                          1410              *CLEAR D3
00001D1E  4283                    1411              CLR.L   D3
00001D20                          1412              *LOAD STACK WITH THIS OPMODE
00001D20  6100 2108               1413              BSR     PUSH_STACK
00001D24  163C 0041               1414              MOVE.B  #'A',D3
00001D28  6100 2100               1415              BSR     PUSH_STACK
00001D2C  163C 0044               1416              MOVE.B  #'D',D3
00001D30  6100 20F8               1417              BSR     PUSH_STACK
00001D34  163C 0044               1418              MOVE.B  #'D',D3
00001D38  6100 20F0               1419              BSR     PUSH_STACK
00001D3C  163C 0051               1420              MOVE.B  #'Q',D3
00001D40  6100 20E8               1421              BSR     PUSH_STACK
00001D44  163C 002E               1422              MOVE.B  #'.',D3
00001D48  6100 20E0               1423              BSR     PUSH_STACK
00001D4C                          1424              
00001D4C                          1425              *FIGURE OUT SIZE*
00001D4C                          1426              *00 = BYTE
00001D4C                          1427              *01 = WORD
00001D4C                          1428              *10 = LONG
00001D4C                          1429              * BITS 7&6
00001D4C                          1430              
00001D4C                          1431              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
00001D4C  2205                    1432              MOVE.L  D5,D1
00001D4E  EC99                    1433              ROR.L   #6,D1
00001D50  0281 00000003           1434              ANDI.L  #$03,D1
00001D56  0C01 0000               1435              CMPI.B  #%00,D1
00001D5A  6700 001E               1436              BEQ     OP0101_ADDQ_B
00001D5E  0281 00000003           1437              ANDI.L  #$03,D1
00001D64  0C01 0001               1438              CMPI.B  #%01,D1
00001D68  6700 001C               1439              BEQ     OP0101_ADDQ_W
00001D6C  0281 00000003           1440              ANDI.L  #$03,D1
00001D72  0C01 0002               1441              CMPI.B  #%10,D1
00001D76  6700 001A               1442              BEQ     OP0101_ADDQ_L
00001D7A                          1443            
00001D7A                          1444  OP0101_ADDQ_B
00001D7A                          1445              
00001D7A  163C 0042               1446              MOVE.B  #'B',D3
00001D7E  6100 20AA               1447              BSR     PUSH_STACK
00001D82  6000 0016               1448              BRA     OP0101_RETURN
00001D86                          1449  OP0101_ADDQ_W
00001D86                          1450              
00001D86  163C 0057               1451              MOVE.B  #'W',D3
00001D8A  6100 209E               1452              BSR     PUSH_STACK
00001D8E  6000 000A               1453              BRA     OP0101_RETURN
00001D92                          1454  OP0101_ADDQ_L
00001D92                          1455              
00001D92  163C 004C               1456              MOVE.B  #'L',D3
00001D96  6100 2092               1457              BSR     PUSH_STACK
00001D9A                          1458  OP0101_RETURN            
00001D9A                          1459  
00001D9A                          1460              
00001D9A                          1461  *GET DATA FROM ADDQ AND PRINT #0-8
00001D9A  163C 0020               1462              MOVE.B  #' ',D3
00001D9E  6100 208A               1463              BSR     PUSH_STACK
00001DA2  163C 0023               1464              MOVE.B  #'#',D3
00001DA6  6100 2082               1465              BSR     PUSH_STACK 
00001DAA                          1466  
00001DAA                          1467                       
00001DAA                          1468              *GET DATA #   
00001DAA  2205                    1469              MOVE.L  D5,D1
00001DAC  EC99                    1470              ROR.L   #6,D1            
00001DAE  E699                    1471              ROR.L   #3,D1
00001DB0  0281 00000007           1472              ANDI.L  #$07,D1
00001DB6                          1473              
00001DB6  0C01 0000               1474              CMPI.B  #%000,D1
00001DBA  6700 009A               1475              BEQ     OP0101_ADDQ_B_8
00001DBE  0C01 0001               1476              CMPI.B  #%001,D1
00001DC2  6700 003E               1477              BEQ     OP0101_ADDQ_B_1
00001DC6  0C01 0002               1478              CMPI.B  #%010,D1
00001DCA  6700 0042               1479              BEQ     OP0101_ADDQ_B_2
00001DCE  0C01 0003               1480              CMPI.B  #%011,D1
00001DD2  6700 0046               1481              BEQ     OP0101_ADDQ_B_3
00001DD6  0C01 0004               1482              CMPI.B  #%100,D1
00001DDA  6700 004A               1483              BEQ     OP0101_ADDQ_B_4
00001DDE  0C01 0005               1484              CMPI.B  #%101,D1
00001DE2  6700 004E               1485              BEQ     OP0101_ADDQ_B_5
00001DE6  0C01 0006               1486              CMPI.B  #%110,D1
00001DEA  6700 0052               1487              BEQ     OP0101_ADDQ_B_6
00001DEE  0C01 0007               1488              CMPI.B  #%111,D1
00001DF2  6700 0056               1489              BEQ     OP0101_ADDQ_B_7
00001DF6                          1490              
00001DF6                          1491  OP0101_ADDQ_B_0
00001DF6  163C 0030               1492              MOVE.B  #'0',D3
00001DFA  6100 202E               1493              BSR     PUSH_STACK
00001DFE  6000 005E               1494              BRA     OP0101_RETURN2            
00001E02                          1495  OP0101_ADDQ_B_1
00001E02  163C 0031               1496              MOVE.B  #'1',D3
00001E06  6100 2022               1497              BSR     PUSH_STACK
00001E0A  6000 0052               1498              BRA     OP0101_RETURN2            
00001E0E                          1499  OP0101_ADDQ_B_2
00001E0E  163C 0032               1500              MOVE.B  #'2',D3
00001E12  6100 2016               1501              BSR     PUSH_STACK
00001E16  6000 0046               1502              BRA     OP0101_RETURN2            
00001E1A                          1503  OP0101_ADDQ_B_3
00001E1A  163C 0033               1504              MOVE.B  #'3',D3
00001E1E  6100 200A               1505              BSR     PUSH_STACK
00001E22  6000 003A               1506              BRA     OP0101_RETURN2            
00001E26                          1507  OP0101_ADDQ_B_4
00001E26  163C 0034               1508              MOVE.B  #'4',D3
00001E2A  6100 1FFE               1509              BSR     PUSH_STACK
00001E2E  6000 002E               1510              BRA     OP0101_RETURN2            
00001E32                          1511  OP0101_ADDQ_B_5
00001E32  163C 0035               1512              MOVE.B  #'5',D3
00001E36  6100 1FF2               1513              BSR     PUSH_STACK
00001E3A  6000 0022               1514              BRA     OP0101_RETURN2
00001E3E                          1515  OP0101_ADDQ_B_6
00001E3E  163C 0036               1516              MOVE.B  #'6',D3
00001E42  6100 1FE6               1517              BSR     PUSH_STACK
00001E46  6000 0016               1518              BRA     OP0101_RETURN2
00001E4A                          1519  OP0101_ADDQ_B_7
00001E4A  163C 0037               1520              MOVE.B  #'7',D3
00001E4E  6100 1FDA               1521              BSR     PUSH_STACK
00001E52  6000 000A               1522              BRA     OP0101_RETURN2
00001E56                          1523  
00001E56                          1524  OP0101_ADDQ_B_8
00001E56  163C 0038               1525              MOVE.B  #'8',D3
00001E5A  6100 1FCE               1526              BSR     PUSH_STACK
00001E5E                          1527              
00001E5E                          1528  OP0101_RETURN2            
00001E5E  163C 002C               1529              MOVE.B  #',',D3
00001E62  6100 1FC6               1530              BSR     PUSH_STACK
00001E66  6100 1724               1531              BSR     GET_EA_EA_SRC
00001E6A                          1532              
00001E6A  4E75                    1533              RTS
00001E6C                          1534  
00001E6C                          1535  
00001E6C                          1536              
00001E6C                          1537  *---------------------------------------------------------------------------*
00001E6C                          1538  * OP_ADDQ: display ADDQ
00001E6C                          1539  *---------------------------------------------------------------------------*              
00001E6C                          1540  OP_ADDQ_B    * size is byte   
00001E6C  183C 0000               1541              MOVE.B  #0,D4 
00001E70  43F9 00004525           1542              LEA     DISP_ADDQ_B,A1
00001E76  103C 000E               1543              MOVE.B  #14,D0
00001E7A  4E4F                    1544              TRAP    #15
00001E7C  4E75                    1545              RTS
00001E7E                          1546              
00001E7E                          1547  OP_ADDQ_W    * size is word
00001E7E  183C 0001               1548              MOVE.B  #1,D4
00001E82  43F9 0000452F           1549              LEA     DISP_ADDQ_W,A1
00001E88  103C 000E               1550              MOVE.B  #14,D0
00001E8C  4E4F                    1551              TRAP    #15
00001E8E  4E75                    1552              RTS
00001E90                          1553              
00001E90                          1554  OP_ADDQ_L    * size is long
00001E90  183C 0002               1555              MOVE.B  #2,D4
00001E94  43F9 00004539           1556              LEA     DISP_ADDQ_L,A1
00001E9A  103C 000E               1557              MOVE.B  #14,D0
00001E9E  4E4F                    1558              TRAP    #15
00001EA0  4E75                    1559              RTS
00001EA2                          1560  
00001EA2                          1561  *---------------------------------------------------------------------------*
00001EA2                          1562  * OP0110: decode BRA/BEQ/BNE/BLT/BHI
00001EA2                          1563  *---------------------------------------------------------------------------*              
00001EA2  4280                    1564  OP0110      CLR.L   D0                  
00001EA4  4281                    1565              CLR.L   D1   
00001EA6  4284                    1566              CLR.L   D4                 
00001EA8  227C 00000000           1567              MOVEA.L #0,A1
00001EAE  2205                    1568              MOVE.L  D5, D1                
00001EB0  0281 000000FF           1569              ANDI.L  #$00FF, D1              * Get 8-bit displacement 
00001EB6  2205                    1570              MOVE.L  D5,D1                  
00001EB8  0281 00000F00           1571              ANDI.L  #$0F00,D1
00001EBE                          1572                 
00001EBE  0C41 0000               1573              CMPI.W  #$0000,D1               * Check for BRA
00001EC2  6700 0050               1574              BEQ     OP_BRA                  
00001EC6                          1575                          
00001EC6  0C41 0D00               1576              CMPI.W  #$0D00,D1               * Check for BLT
00001ECA  6700 0056               1577              BEQ     OP_BLT      
00001ECE                          1578  
00001ECE  0C41 0700               1579              CMPI.W  #$0700,D1               * Check for BEQ
00001ED2  6700 0032               1580              BEQ     OP_BEQ      
00001ED6                          1581  
00001ED6  0C41 0600               1582              CMPI.W  #$0600,D1               * Check for BNE
00001EDA  6700 001C               1583              BEQ     OP_BNE  
00001EDE                          1584              
00001EDE  0C41 0200               1585              CMPI.W  #$0200,D1               * Check for BHI
00001EE2  6700 0006               1586              BEQ     OP_BHI
00001EE6                          1587  
00001EE6  4EF8 1624               1588              JMP     OP_DATA
00001EEA                          1589              
00001EEA  43F9 000046F4           1590  OP_BHI      LEA     DISP_BHI,A1             
00001EF0  103C 000E               1591              MOVE.B  #14,D0
00001EF4  4E4F                    1592              TRAP    #15
00001EF6  4E75                    1593              RTS
00001EF8                          1594  
00001EF8  43F9 000046ED           1595  OP_BNE      LEA     DISP_BNE,A1             
00001EFE  103C 000E               1596              MOVE.B  #14,D0
00001F02  4E4F                    1597              TRAP    #15
00001F04  4E75                    1598              RTS
00001F06                          1599  
00001F06  43F9 000046E6           1600  OP_BEQ      LEA     DISP_BEQ,A1             
00001F0C  103C 000E               1601              MOVE.B  #14,D0
00001F10  4E4F                    1602              TRAP    #15
00001F12  4E75                    1603              RTS          
00001F14                          1604                          
00001F14  43F9 000046D8           1605  OP_BRA      LEA     DISP_BRA,A1             
00001F1A  103C 000E               1606              MOVE.B  #14,D0
00001F1E  4E4F                    1607              TRAP    #15
00001F20  4E75                    1608              RTS
00001F22                          1609              
00001F22  43F9 000046DF           1610  OP_BLT      LEA     DISP_BLT,A1          
00001F28  103C 000E               1611              MOVE.B  #14,D0
00001F2C  4E4F                    1612              TRAP    #15
00001F2E  4E75                    1613              RTS
00001F30                          1614     
00001F30                          1615  *---------------------------------------------------------------------------*
00001F30                          1616  * OP0111 : MOVEQ not required
00001F30                          1617  *---------------------------------------------------------------------------*           
00001F30  4EF8 1624               1618  OP0111      JMP     OP_DATA
00001F34                          1619             
00001F34                          1620  *---------------------------------------------------------------------------*
00001F34                          1621  * OP1000 : decode DIVS
00001F34                          1622  *---------------------------------------------------------------------------*           
00001F34                          1623  OP1000                           
00001F34  4281                    1624              CLR.L   D1       
00001F36  4284                    1625              CLR.L   D4                   
00001F38  227C 00000000           1626              MOVEA.L #0, A1              
00001F3E  2205                    1627              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
00001F40                          1628              *CLEAR D3
00001F40  4283                    1629              CLR.L   D3
00001F42                          1630  
00001F42                          1631  OP1000_DIVS_DN_EA_OR_EA_DN 
00001F42                          1632              *LOAD STACK WITH THIS OPMODE
00001F42  6100 1EE6               1633              BSR     PUSH_STACK
00001F46  163C 0044               1634              MOVE.B  #'D',D3
00001F4A  6100 1EDE               1635              BSR     PUSH_STACK
00001F4E  163C 0049               1636              MOVE.B  #'I',D3
00001F52  6100 1ED6               1637              BSR     PUSH_STACK
00001F56  163C 0056               1638              MOVE.B  #'V',D3
00001F5A  6100 1ECE               1639              BSR     PUSH_STACK
00001F5E  163C 0053               1640              MOVE.B  #'S',D3
00001F62  6100 1EC6               1641              BSR     PUSH_STACK
00001F66  163C 002E               1642              MOVE.B  #'.',D3
00001F6A  6100 1EBE               1643              BSR     PUSH_STACK
00001F6E                          1644              
00001F6E  2205                    1645              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00001F70                          1646              
00001F70                          1647  OP1000_EA_DN_DIVS
00001F70                          1648              *BITS (7 TO 6) 
00001F70                          1649              *00 = .B
00001F70                          1650              *01 = .W
00001F70                          1651              *10 = .L 
00001F70  2205                    1652              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00001F72  EC99                    1653              ROR.L   #6,D1
00001F74  0281 00000003           1654              ANDI.L  #$03,D1
00001F7A  0C81 00000003           1655              CMPI.L  #%11,D1 *EQUALS .W
00001F80  6700 0014               1656              BEQ     OP1000_PRINT_W_DIVS
00001F84  0C81 00000000           1657              CMPI.L  #%00,D1 *EQUALS .L
00001F8A  6700 0052               1658              BEQ     OP1000_PRINT_L_DIVS
00001F8E                          1659              
00001F8E  183C 0001               1660              MOVE.B  #1,D4               *ERROR READ
00001F92  6000 0092               1661              BRA     OP1000_DIVS_RETURN
00001F96                          1662  OP1000_PRINT_W_DIVS
00001F96  163C 0057               1663              MOVE.B  #'W',D3
00001F9A  6100 1E8E               1664              BSR     PUSH_STACK
00001F9E                          1665  
00001F9E                          1666              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001F9E  13FC 0000 00004750      1667              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001FA6  13FC 0000 00004751      1668              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001FAE                          1669             
00001FAE                          1670              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001FAE  13FC 00B9 00004753      1671              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001FB6  13FC 0020 00004754      1672              MOVE.B   #$20,GET_SRC_START_END
00001FBE                          1673  
00001FBE                          1674             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001FBE  0285 0000FE3F           1675              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001FC4  0685 00000000           1676              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00001FCA                          1677  
00001FCA                          1678              
00001FCA  6100 15C0               1679              BSR     GET_EA_EA_SRC      *GETS <ea>
00001FCE  163C 002C               1680              MOVE.B  #',',D3
00001FD2  6100 1E56               1681              BSR     PUSH_STACK
00001FD6  6100 19E4               1682              BSR     GET_EA_EA_DEST       *GETS Dn    
00001FDA                          1683              
00001FDA  6000 004A               1684              BRA     OP1000_DIVS_RETURN
00001FDE                          1685  OP1000_PRINT_L_DIVS
00001FDE  163C 004C               1686              MOVE.B  #'L',D3
00001FE2  6100 1E46               1687              BSR     PUSH_STACK
00001FE6                          1688              
00001FE6                          1689              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001FE6  13FC 0000 00004750      1690              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001FEE  13FC 0000 00004751      1691              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001FF6                          1692             
00001FF6                          1693              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001FF6  13FC 00B9 00004753      1694              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001FFE  13FC 0020 00004754      1695              MOVE.B   #$20,GET_SRC_START_END
00002006                          1696  
00002006                          1697              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002006  0285 0000FE3F           1698              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000200C  0685 00000000           1699              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002012                          1700  
00002012                          1701                     
00002012  6100 1578               1702              BSR     GET_EA_EA_SRC      *GETS <ea>
00002016  163C 002C               1703              MOVE.B  #',',D3
0000201A  6100 1E0E               1704              BSR     PUSH_STACK                  
0000201E  6100 199C               1705              BSR     GET_EA_EA_DEST       *GETS Dn    
00002022                          1706  
00002022                          1707              
00002022  6000 0002               1708              BRA     OP1000_DIVS_RETURN
00002026                          1709              
00002026                          1710  OP1000_DIVS_RETURN
00002026  4E75                    1711              RTS
00002028                          1712              
00002028                          1713  
00002028                          1714  
00002028                          1715  *---------------------------------------------------------------------------*
00002028                          1716  * OP_DIVS: display DIVS and proceed to EA
00002028                          1717  *---------------------------------------------------------------------------*  
00002028  43F9 00004543           1718  OP_DIVS     LEA     DISP_DIVS,A1
0000202E  103C 000E               1719              MOVE.B  #14,D0
00002032  4E4F                    1720              TRAP    #15
00002034  4EF9 000030F0           1721              JMP     EA_ARITH
0000203A                          1722  
0000203A  4E75                    1723              RTS
0000203C                          1724              
0000203C                          1725  *---------------------------------------------------------------------------*
0000203C                          1726  * OP1001: decode SUB/SUBA
0000203C                          1727  *---------------------------------------------------------------------------*      
0000203C                          1728  OP1001      
0000203C  4280                    1729              CLR.L   D0                  
0000203E  4281                    1730              CLR.L   D1       
00002040  4284                    1731              CLR.L   D4                   
00002042  227C 00000000           1732              MOVEA.L #0, A1              
00002048  2205                    1733              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
0000204A                          1734              
0000204A                          1735              *CLEAR D3
0000204A  4283                    1736              CLR.L   D3
0000204C                          1737              
0000204C                          1738              
0000204C                          1739              
0000204C                          1740              **INTEGRATING SUB.W/.L INTO THIS CODE**
0000204C  2205                    1741              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
0000204E                          1742              *BITS (INDEX 8) 
0000204E                          1743              *0 = ADD.B/W/L <EA>,Dn
0000204E                          1744              *1 = ADD.B/W/L Dn,<EA> 
0000204E  EC99                    1745              ROR.L   #6,D1
00002050  0281 00000007           1746              ANDI.L  #$07,D1                 *MASKS WITH 00000111
00002056  0C81 00000007           1747              CMPI.L  #$07,D1                 *IF EQUALS <ea>,Dn
0000205C  6700 0010               1748              BEQ     OP1001_SUBA_L            *BRANCHES TO ADDA.L
00002060  0C81 00000003           1749              CMPI.L  #$03,D1                 *IF EQUALS <ea>,Dn
00002066  6700 0078               1750              BEQ     OP1001_SUBA_W           *BRANCHES TO ADDA.W
0000206A  6000 00E6               1751              BRA     OP1001_DETERMINE_DN_EA_OR_EA_DN         *ELSE CHECK ADD.B/.W/.L
0000206E                          1752              
0000206E                          1753  OP1001_SUBA_L
0000206E                          1754              *LOAD STACK WITH THIS OPMODE
0000206E  6100 1DBA               1755              BSR     PUSH_STACK
00002072  163C 0053               1756              MOVE.B  #'S',D3
00002076  6100 1DB2               1757              BSR     PUSH_STACK
0000207A  163C 0055               1758              MOVE.B  #'U',D3
0000207E  6100 1DAA               1759              BSR     PUSH_STACK
00002082  163C 0042               1760              MOVE.B  #'B',D3
00002086  6100 1DA2               1761              BSR     PUSH_STACK
0000208A  163C 0041               1762              MOVE.B  #'A',D3
0000208E  6100 1D9A               1763              BSR     PUSH_STACK
00002092  163C 002E               1764              MOVE.B  #'.',D3
00002096  6100 1D92               1765              BSR     PUSH_STACK
0000209A  163C 004C               1766              MOVE.B  #'L',D3
0000209E  6100 1D8A               1767              BSR     PUSH_STACK
000020A2                          1768              
000020A2                          1769             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000020A2  13FC 0000 00004750      1770             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000020AA  13FC 0000 00004751      1771             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000020B2                          1772             
000020B2                          1773             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000020B2  13FC 00B9 00004753      1774             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000020BA  13FC 0020 00004754      1775             MOVE.B   #$20,GET_SRC_START_END
000020C2                          1776  
000020C2                          1777              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000020C2  0285 0000FE3F           1778              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000020C8  0685 00000040           1779              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
000020CE                          1780       
000020CE                          1781              *PRINT <EA>,AN
000020CE  6100 14BC               1782              BSR     GET_EA_EA_SRC       *GETS <ea>
000020D2  163C 002C               1783              MOVE.B  #',',D3
000020D6  6100 1D52               1784              BSR     PUSH_STACK                     
000020DA  6100 18E0               1785              BSR     GET_EA_EA_DEST      *GETS Dn
000020DE                          1786  
000020DE                          1787              
000020DE                          1788              
000020DE  4E75                    1789              RTS
000020E0                          1790  OP1001_SUBA_W
000020E0                          1791              *LOAD STACK WITH THIS OPMODE
000020E0  6100 1D48               1792              BSR     PUSH_STACK
000020E4  163C 0053               1793              MOVE.B  #'S',D3
000020E8  6100 1D40               1794              BSR     PUSH_STACK
000020EC  163C 0055               1795              MOVE.B  #'U',D3
000020F0  6100 1D38               1796              BSR     PUSH_STACK
000020F4  163C 0042               1797              MOVE.B  #'B',D3
000020F8  6100 1D30               1798              BSR     PUSH_STACK
000020FC  163C 0041               1799              MOVE.B  #'A',D3
00002100  6100 1D28               1800              BSR     PUSH_STACK
00002104  163C 002E               1801              MOVE.B  #'.',D3
00002108  6100 1D20               1802              BSR     PUSH_STACK
0000210C  163C 0057               1803              MOVE.B  #'W',D3
00002110  6100 1D18               1804              BSR     PUSH_STACK
00002114                          1805              
00002114                          1806             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002114  13FC 0000 00004750      1807             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000211C  13FC 0000 00004751      1808             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002124                          1809             
00002124                          1810             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002124  13FC 00B9 00004753      1811             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000212C  13FC 0020 00004754      1812             MOVE.B   #$20,GET_SRC_START_END
00002134                          1813  
00002134                          1814              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002134  0285 0000FE3F           1815              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000213A  0685 00000040           1816              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002140                          1817       
00002140                          1818              *PRINT <EA>,AN
00002140  6100 144A               1819              BSR     GET_EA_EA_SRC       *GETS <ea>
00002144  163C 002C               1820              MOVE.B  #',',D3
00002148  6100 1CE0               1821              BSR     PUSH_STACK                     
0000214C  6100 186E               1822              BSR     GET_EA_EA_DEST      *GETS Dn
00002150                          1823  
00002150  4E75                    1824              RTS
00002152                          1825  
00002152                          1826  OP1001_DETERMINE_DN_EA_OR_EA_DN 
00002152                          1827              *LOAD STACK WITH THIS OPMODE
00002152  6100 1CD6               1828              BSR     PUSH_STACK
00002156  163C 0053               1829              MOVE.B  #'S',D3
0000215A  6100 1CCE               1830              BSR     PUSH_STACK
0000215E  163C 0055               1831              MOVE.B  #'U',D3
00002162  6100 1CC6               1832              BSR     PUSH_STACK
00002166  163C 0042               1833              MOVE.B  #'B',D3
0000216A  6100 1CBE               1834              BSR     PUSH_STACK
0000216E  163C 002E               1835              MOVE.B  #'.',D3
00002172  6100 1CB6               1836              BSR     PUSH_STACK
00002176                          1837              
00002176  2205                    1838              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00002178                          1839              
00002178                          1840              *BITS (INDEX 8) 
00002178                          1841              *0 = ADD.B/W/L <EA>,Dn
00002178                          1842              *1 = ADD.B/W/L Dn,<EA> 
00002178  E099                    1843              ROR.L   #8,D1
0000217A  0281 00000001           1844              ANDI.L  #$01,D1     *MASKS WITH 00000001
00002180  0C81 00000000           1845              CMPI.L  #$00,D1     *IF EQUALS <ea>,Dn
00002186  6700 0102               1846              BEQ     OP1001_EA_DN
0000218A                          1847              *else procede to Dn_EA
0000218A                          1848              
0000218A                          1849  OP1001_DN_EA
0000218A                          1850              *BITS (7 TO 6) 
0000218A                          1851              *00 = .B
0000218A                          1852              *01 = .W
0000218A                          1853              *10 = .L 
0000218A  2205                    1854              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
0000218C  EC99                    1855              ROR.L   #6,D1
0000218E  0281 00000003           1856              ANDI.L  #$03,D1
00002194  0C81 00000000           1857              CMPI.L  #$00,D1 *EQUALS .B
0000219A  6700 0016               1858              BEQ     OP1001_PRINT_B2
0000219E  0C81 00000001           1859              CMPI.L  #$01,D1 *EQUALS .W
000021A4  6700 0054               1860              BEQ     OP1001_PRINT_W2
000021A8  0C81 00000002           1861              CMPI.L  #$02,D1 *EQUALS .L
000021AE  6700 0092               1862              BEQ     OP1001_PRINT_L2
000021B2                          1863  OP1001_PRINT_B2
000021B2                          1864              *PUSH 'B'
000021B2  163C 0042               1865              MOVE.B  #'B',D3
000021B6  6100 1C72               1866              BSR     PUSH_STACK
000021BA                          1867             
000021BA                          1868              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000021BA  13FC 0000 00004750      1869             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000021C2  13FC 0083 00004751      1870             MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000021CA                          1871             
000021CA                          1872             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000021CA  13FC 00B9 00004753      1873             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000021D2  13FC 0020 00004754      1874             MOVE.B   #$20,GET_SRC_START_END
000021DA                          1875  
000021DA                          1876              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000021DA  0285 0000FE3F           1877              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000021E0  0685 00000040           1878              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
000021E6                          1879       
000021E6  6100 17D4               1880              BSR     GET_EA_EA_DEST      *GETS Dn
000021EA  163C 002C               1881              MOVE.B  #',',D3
000021EE  6100 1C3A               1882              BSR     PUSH_STACK                     
000021F2  6100 1398               1883              BSR     GET_EA_EA_SRC       *GETS <ea>
000021F6                          1884  
000021F6                          1885              
000021F6  6000 0BA4               1886              BRA     OP1101_ADD_RETURN
000021FA                          1887  OP1001_PRINT_W2
000021FA  163C 0057               1888              MOVE.B  #'W',D3
000021FE  6100 1C2A               1889              BSR     PUSH_STACK
00002202                          1890  
00002202                          1891              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002202  13FC 0000 00004750      1892              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000220A  13FC 0083 00004751      1893              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002212                          1894             
00002212                          1895              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002212  13FC 00B9 00004753      1896              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000221A  13FC 0020 00004754      1897              MOVE.B   #$20,GET_SRC_START_END
00002222                          1898  
00002222                          1899              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002222  0285 0000FE3F           1900              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002228  0685 00000040           1901              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A An Register (001) 
0000222E                          1902  
0000222E                          1903        
0000222E  6100 178C               1904              BSR     GET_EA_EA_DEST      *GETS Dn
00002232  163C 002C               1905              MOVE.B  #',',D3
00002236  6100 1BF2               1906              BSR     PUSH_STACK               
0000223A  6100 1350               1907              BSR     GET_EA_EA_SRC       *GETS <ea>       
0000223E                          1908  
0000223E                          1909  
0000223E                          1910  
0000223E  6000 0B5C               1911              BRA     OP1101_ADD_RETURN
00002242                          1912  OP1001_PRINT_L2 
00002242  163C 004C               1913              MOVE.B  #'L',D3
00002246  6100 1BE2               1914              BSR     PUSH_STACK
0000224A                          1915              
0000224A                          1916              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000224A  13FC 0000 00004750      1917              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002252  13FC 0083 00004751      1918              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000225A                          1919             
0000225A                          1920              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000225A  13FC 00B9 00004753      1921              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002262  13FC 0020 00004754      1922              MOVE.B   #$20,GET_SRC_START_END
0000226A                          1923  
0000226A                          1924             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000226A  0285 0000FE3F           1925              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002270  0685 00000040           1926              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002276                          1927  
00002276                          1928               
00002276  6100 1744               1929              BSR     GET_EA_EA_DEST       *GETS Dn
0000227A  163C 002C               1930              MOVE.B  #',',D3
0000227E  6100 1BAA               1931              BSR     PUSH_STACK          
00002282  6100 1308               1932              BSR     GET_EA_EA_SRC        *GETS <ea>
00002286                          1933  
00002286  6000 0B14               1934              BRA     OP1101_ADD_RETURN
0000228A                          1935              
0000228A                          1936  OP1001_EA_DN           
0000228A                          1937              *BITS (7 TO 6) 
0000228A                          1938              *00 = .B
0000228A                          1939              *01 = .W
0000228A                          1940              *10 = .L 
0000228A  2205                    1941              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
0000228C  EC99                    1942              ROR.L   #6,D1
0000228E  0281 00000003           1943              ANDI.L  #$03,D1
00002294  0C81 00000000           1944              CMPI.L  #$00,D1 *EQUALS .B
0000229A  6700 0016               1945              BEQ     OP1001_PRINT_B
0000229E  0C81 00000001           1946              CMPI.L  #$01,D1 *EQUALS .W
000022A4  6700 0054               1947              BEQ     OP1001_PRINT_W
000022A8  0C81 00000002           1948              CMPI.L  #$02,D1 *EQUALS .L
000022AE  6700 0092               1949              BEQ     OP1001_PRINT_L
000022B2                          1950  OP1001_PRINT_B
000022B2  163C 0042               1951              MOVE.B  #'B',D3
000022B6  6100 1B72               1952              BSR     PUSH_STACK
000022BA                          1953                
000022BA                          1954              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000022BA  13FC 0000 00004750      1955              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000022C2  13FC 0002 00004751      1956              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000022CA                          1957             
000022CA                          1958              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000022CA  13FC 00B9 00004753      1959              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000022D2  13FC 0020 00004754      1960              MOVE.B   #$20,GET_SRC_START_END
000022DA                          1961  
000022DA                          1962             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000022DA  0285 0000FE3F           1963              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000022E0  0685 00000040           1964              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "AN" Register (001) 
000022E6                          1965  
000022E6                          1966              
000022E6  6100 12A4               1967              BSR     GET_EA_EA_SRC      *GETS <ea>
000022EA  163C 002C               1968              MOVE.B  #',',D3
000022EE  6100 1B3A               1969              BSR     PUSH_STACK          
000022F2  6100 16C8               1970              BSR     GET_EA_EA_DEST       *GETS Dn
000022F6                          1971              
000022F6  6000 0AA4               1972              BRA     OP1101_ADD_RETURN
000022FA                          1973  OP1001_PRINT_W
000022FA  163C 0057               1974              MOVE.B  #'W',D3
000022FE  6100 1B2A               1975              BSR     PUSH_STACK
00002302                          1976  
00002302                          1977              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002302  13FC 0000 00004750      1978              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000230A  13FC 0000 00004751      1979              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002312                          1980             
00002312                          1981              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002312  13FC 00B9 00004753      1982              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000231A  13FC 0020 00004754      1983              MOVE.B   #$20,GET_SRC_START_END
00002322                          1984  
00002322                          1985             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002322  0285 0000FE3F           1986              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002328  0685 00000040           1987              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
0000232E                          1988  
0000232E                          1989              
0000232E  6100 125C               1990              BSR     GET_EA_EA_SRC      *GETS <ea>
00002332  163C 002C               1991              MOVE.B  #',',D3
00002336  6100 1AF2               1992              BSR     PUSH_STACK
0000233A  6100 1680               1993              BSR     GET_EA_EA_DEST       *GETS Dn    
0000233E                          1994              
0000233E  6000 004A               1995              BRA     OP1001_ADD_RETURN
00002342                          1996  OP1001_PRINT_L 
00002342  163C 004C               1997              MOVE.B  #'L',D3
00002346  6100 1AE2               1998              BSR     PUSH_STACK
0000234A                          1999              
0000234A                          2000              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000234A  13FC 0000 00004750      2001              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002352  13FC 0000 00004751      2002              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000235A                          2003             
0000235A                          2004              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000235A  13FC 00B9 00004753      2005              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002362  13FC 0020 00004754      2006              MOVE.B   #$20,GET_SRC_START_END
0000236A                          2007  
0000236A                          2008              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000236A  0285 0000FE3F           2009              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002370  0685 00000040           2010              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002376                          2011  
00002376                          2012                     
00002376  6100 1214               2013              BSR     GET_EA_EA_SRC      *GETS <ea>
0000237A  163C 002C               2014              MOVE.B  #',',D3
0000237E  6100 1AAA               2015              BSR     PUSH_STACK                  
00002382  6100 1638               2016              BSR     GET_EA_EA_DEST       *GETS Dn    
00002386                          2017  
00002386                          2018              
00002386  6000 0002               2019              BRA     OP1001_ADD_RETURN
0000238A                          2020              
0000238A                          2021  OP1001_ADD_RETURN
0000238A  4E75                    2022              RTS
0000238C                          2023  
0000238C                          2024    
0000238C                          2025  *---------------------------------------------------------------------------*
0000238C                          2026  * OP_SUB: display SUB and proceed to EA
0000238C                          2027  *---------------------------------------------------------------------------*            
0000238C  43F9 0000454B           2028  OP_SUB_B    LEA     DISP_SUB_B,A1
00002392  103C 000E               2029              MOVE.B  #14,D0
00002396  4E4F                    2030              TRAP    #15
00002398  183C 0000               2031              MOVE.B  #0,D4
0000239C  4EF9 0000313C           2032              JMP     EA_GEN
000023A2                          2033  
000023A2  4E75                    2034              RTS
000023A4                          2035  
000023A4  43F9 00004554           2036  OP_SUB_W    LEA     DISP_SUB_W,A1
000023AA  103C 000E               2037              MOVE.B  #14,D0
000023AE  4E4F                    2038              TRAP    #15
000023B0  183C 0001               2039              MOVE.B  #1,D4
000023B4  4EF9 0000313C           2040              JMP     EA_GEN
000023BA                          2041  
000023BA  4E75                    2042              RTS
000023BC                          2043  
000023BC  43F9 0000455D           2044  OP_SUB_L    LEA     DISP_SUB_L,A1
000023C2  103C 000E               2045              MOVE.B  #14,D0
000023C6  4E4F                    2046              TRAP    #15
000023C8  183C 0002               2047              MOVE.B  #2,D4
000023CC  4EF9 0000313C           2048              JMP     EA_GEN
000023D2                          2049  
000023D2  4E75                    2050              RTS
000023D4                          2051  
000023D4                          2052  *---------------------------------------------------------------------------*
000023D4                          2053  * OP_SUBA: display SUBA
000023D4                          2054  *---------------------------------------------------------------------------*  
000023D4  43F9 00004584           2055  OP_SUBA_W   LEA     DISP_SUBA_W,A1
000023DA  103C 000E               2056              MOVE.B  #14,D0
000023DE  4E4F                    2057              TRAP    #15
000023E0  183C 0001               2058              MOVE.B  #1,D4
000023E4  4E75                    2059              RTS
000023E6                          2060  
000023E6  43F9 0000458E           2061  OP_SUBA_L   LEA     DISP_SUBA_L,A1
000023EC  103C 000E               2062              MOVE.B  #14,D0
000023F0  4E4F                    2063              TRAP    #15
000023F2  183C 0002               2064              MOVE.B  #2,D4
000023F6  4E75                    2065              RTS         
000023F8                          2066  *---------------------------------------------------------------------------*
000023F8                          2067  * OP1010 : unassigned
000023F8                          2068  *---------------------------------------------------------------------------*           
000023F8  4EF8 1624               2069  OP1010      JMP     OP_DATA
000023FC                          2070              
000023FC                          2071  *---------------------------------------------------------------------------*
000023FC                          2072  * OP1011 : decode CMP/EOR/CMPA
000023FC                          2073  *---------------------------------------------------------------------------*           
000023FC  4280                    2074  OP1011      CLR.L   D0                
000023FE  4281                    2075              CLR.L   D1            
00002400  4284                    2076              CLR.L   D4                   
00002402  227C 00000000           2077              MOVEA.L #0, A1               
00002408  2205                    2078              MOVE.L  D5,D1
0000240A  EA99                    2079              ROR.L   #5,D1
0000240C  0281 0000000E           2080              ANDI.L  #$E,D1
00002412  0C01 0000               2081              CMPI.B  #$0,D1
00002416  6700 003E               2082              BEQ     OP1011_CMP
0000241A  0C01 0002               2083              CMPI.B  #$2,D1
0000241E  6700 0036               2084              BEQ     OP1011_CMP
00002422  0C01 0004               2085              CMPI.B  #$4,D1
00002426  6700 002E               2086              BEQ     OP1011_CMP
0000242A  0C01 0008               2087              CMPI.B  #$8,D1
0000242E  6700 0178               2088              BEQ     OP1011_EOR
00002432  0C01 000A               2089              CMPI.B  #$A,D1
00002436  6700 0170               2090              BEQ     OP1011_EOR
0000243A  0C01 000C               2091              CMPI.B  #$C,D1
0000243E  6700 0168               2092              BEQ     OP1011_EOR  
00002442  0C01 0006               2093              CMPI.B  #$6,D1
00002446  6700 00C0               2094              BEQ     OP1011_CMPA
0000244A  0C01 000E               2095              CMPI.B  #$E,D1
0000244E  6700 00B8               2096              BEQ     OP1011_CMPA 
00002452                          2097  
00002452  4EF8 1624               2098              JMP     OP_DATA          
00002456                          2099  
00002456                          2100  
00002456                          2101  
00002456                          2102  
00002456                          2103  OP1011_CMP
00002456                          2104             
00002456                          2105   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002456  13FC 0082 00004750      2106             MOVE.B   #$82,DEST_REGISTER_FORMAT
0000245E  13FC 0000 00004751      2107             MOVE.B   #$00,SRC_REGISTER_FORMAT
00002466                          2108             
00002466                          2109             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002466  13FC 00B9 00004753      2110             MOVE.B   #$B9,GET_DST_START_END
0000246E  13FC 0020 00004754      2111             MOVE.B   #$20,GET_SRC_START_END
00002476                          2112             
00002476                          2113              *CLEAR D3
00002476  4283                    2114              CLR.L   D3
00002478                          2115              *LOAD STACK WITH THIS OPMODE
00002478  6100 19B0               2116              BSR     PUSH_STACK
0000247C  163C 0043               2117              MOVE.B  #'C',D3
00002480  6100 19A8               2118              BSR     PUSH_STACK
00002484  163C 004D               2119              MOVE.B  #'M',D3
00002488  6100 19A0               2120              BSR     PUSH_STACK
0000248C  163C 0050               2121              MOVE.B  #'P',D3
00002490  6100 1998               2122              BSR     PUSH_STACK
00002494  163C 002E               2123              MOVE.B  #'.',D3
00002498  6100 1990               2124              BSR     PUSH_STACK
0000249C                          2125              
0000249C                          2126              *FIGURE OUT SIZE*
0000249C                          2127              *00 = BYTE
0000249C                          2128              *01 = WORD
0000249C                          2129              *10 = LONG
0000249C                          2130              * BITS 7&6
0000249C                          2131              
0000249C                          2132              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
0000249C  2205                    2133              MOVE.L  D5,D1
0000249E  EC99                    2134              ROR.L   #6,D1
000024A0  0281 00000003           2135              ANDI.L  #$03,D1
000024A6  0C01 0000               2136              CMPI.B  #%00,D1
000024AA  6700 001E               2137              BEQ     OP1011_CMP_B
000024AE  0281 00000003           2138              ANDI.L  #$03,D1
000024B4  0C01 0001               2139              CMPI.B  #%01,D1
000024B8  6700 001C               2140              BEQ     OP1011_CMP_W
000024BC  0281 00000003           2141              ANDI.L  #$03,D1
000024C2  0C01 0002               2142              CMPI.B  #%10,D1
000024C6  6700 001A               2143              BEQ     OP1011_CMP_L
000024CA                          2144            
000024CA                          2145  OP1011_CMP_B
000024CA                          2146              
000024CA  163C 0042               2147              MOVE.B  #'B',D3
000024CE  6100 195A               2148              BSR     PUSH_STACK
000024D2  6000 0016               2149              BRA     OP1011_RETURN_CMP  
000024D6                          2150  OP1011_CMP_W
000024D6                          2151              
000024D6  163C 0057               2152              MOVE.B  #'W',D3
000024DA  6100 194E               2153              BSR     PUSH_STACK
000024DE  6000 000A               2154              BRA     OP1011_RETURN_CMP  
000024E2                          2155  OP1011_CMP_L
000024E2                          2156              
000024E2  163C 004C               2157              MOVE.B  #'L',D3
000024E6  6100 1942               2158              BSR     PUSH_STACK
000024EA                          2159  OP1011_RETURN_CMP            
000024EA                          2160  
000024EA                          2161              
000024EA                          2162  *GET DATA FROM ADDQ AND PRINT #0-8
000024EA                          2163       
000024EA                          2164              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000024EA  0285 0000FE3F           2165              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000024F0  0685 00000000           2166              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
000024F6                          2167  
000024F6  6100 1094               2168              BSR     GET_EA_EA_SRC
000024FA  163C 002C               2169              MOVE.B  #',',D3
000024FE  6100 192A               2170              BSR     PUSH_STACK
00002502  6100 14B8               2171              BSR     GET_EA_EA_DEST
00002506                          2172              
00002506  4E75                    2173              RTS
00002508                          2174              
00002508                          2175  
00002508                          2176  
00002508                          2177  OP1011_CMPA
00002508                          2178              
00002508                          2179   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002508  13FC 0080 00004750      2180             MOVE.B   #$80,DEST_REGISTER_FORMAT
00002510  13FC 0000 00004751      2181             MOVE.B   #$00,SRC_REGISTER_FORMAT
00002518                          2182             
00002518                          2183             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002518  13FC 00B9 00004753      2184             MOVE.B   #$B9,GET_DST_START_END
00002520  13FC 0020 00004754      2185             MOVE.B   #$20,GET_SRC_START_END
00002528                          2186             
00002528                          2187              *CLEAR D3
00002528  4283                    2188              CLR.L   D3
0000252A                          2189              *LOAD STACK WITH THIS OPMODE
0000252A  6100 18FE               2190              BSR     PUSH_STACK
0000252E  163C 0043               2191              MOVE.B  #'C',D3
00002532  6100 18F6               2192              BSR     PUSH_STACK
00002536  163C 004D               2193              MOVE.B  #'M',D3
0000253A  6100 18EE               2194              BSR     PUSH_STACK
0000253E  163C 0050               2195              MOVE.B  #'P',D3
00002542  6100 18E6               2196              BSR     PUSH_STACK
00002546  163C 0041               2197              MOVE.B  #'A',D3
0000254A  6100 18DE               2198              BSR     PUSH_STACK
0000254E  163C 002E               2199              MOVE.B  #'.',D3
00002552  6100 18D6               2200              BSR     PUSH_STACK
00002556                          2201              
00002556                          2202              *FIGURE OUT SIZE*
00002556                          2203              *00 = BYTE
00002556                          2204              *01 = WORD
00002556                          2205              *10 = LONG
00002556                          2206              * BITS 7&6
00002556                          2207              
00002556                          2208              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
00002556  2205                    2209              MOVE.L  D5,D1
00002558  EC99                    2210              ROR.L   #6,D1
0000255A  0281 00000003           2211              ANDI.L  #$03,D1
00002560  0C01 0001               2212              CMPI.B  #%01,D1
00002564  6700 0010               2213              BEQ     OP1011_CMPA_W
00002568  0281 00000003           2214              ANDI.L  #$03,D1
0000256E  0C01 0002               2215              CMPI.B  #%10,D1
00002572  6700 000E               2216              BEQ     OP1011_CMPA_L
00002576                          2217  OP1011_CMPA_W
00002576                          2218              
00002576  163C 0057               2219              MOVE.B  #'W',D3
0000257A  6100 18AE               2220              BSR     PUSH_STACK
0000257E  6000 000A               2221              BRA     OP1011_RETURN_CMPA 
00002582                          2222  OP1011_CMPA_L
00002582                          2223              
00002582  163C 004C               2224              MOVE.B  #'L',D3
00002586  6100 18A2               2225              BSR     PUSH_STACK
0000258A                          2226  OP1011_RETURN_CMPA            
0000258A                          2227  
0000258A                          2228              
0000258A                          2229  *GET DATA FROM ADDQ AND PRINT #0-8
0000258A                          2230       
0000258A                          2231              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000258A  0285 0000FE3F           2232              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002590  0685 00000040           2233              ADDI.L  #$0040,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (000) 
00002596                          2234  
00002596  6100 0FF4               2235              BSR     GET_EA_EA_SRC
0000259A  163C 002C               2236              MOVE.B  #',',D3
0000259E  6100 188A               2237              BSR     PUSH_STACK
000025A2  6100 1418               2238              BSR     GET_EA_EA_DEST
000025A6                          2239              
000025A6  4E75                    2240              RTS
000025A8                          2241  
000025A8                          2242  OP1011_EOR
000025A8                          2243  
000025A8                          2244   *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000025A8  13FC 0082 00004750      2245             MOVE.B   #$82,DEST_REGISTER_FORMAT
000025B0  13FC 0080 00004751      2246             MOVE.B   #$80,SRC_REGISTER_FORMAT
000025B8                          2247             
000025B8                          2248             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000025B8  13FC 00B9 00004753      2249             MOVE.B   #$B9,GET_DST_START_END
000025C0  13FC 0020 00004754      2250             MOVE.B   #$20,GET_SRC_START_END
000025C8                          2251             
000025C8                          2252              *CLEAR D3
000025C8  4283                    2253              CLR.L   D3
000025CA                          2254              *LOAD STACK WITH THIS OPMODE
000025CA  6100 185E               2255              BSR     PUSH_STACK
000025CE  163C 0045               2256              MOVE.B  #'E',D3
000025D2  6100 1856               2257              BSR     PUSH_STACK
000025D6  163C 004F               2258              MOVE.B  #'O',D3
000025DA  6100 184E               2259              BSR     PUSH_STACK
000025DE  163C 0052               2260              MOVE.B  #'R',D3
000025E2  6100 1846               2261              BSR     PUSH_STACK
000025E6  163C 002E               2262              MOVE.B  #'.',D3
000025EA  6100 183E               2263              BSR     PUSH_STACK
000025EE                          2264              
000025EE                          2265              *FIGURE OUT SIZE*
000025EE                          2266              *00 = BYTE
000025EE                          2267              *01 = WORD
000025EE                          2268              *10 = LONG
000025EE                          2269              * BITS 7&6
000025EE                          2270              
000025EE                          2271              *COMPARE TO SEE IF IT IS BYTE/WORD/LONG SIZE
000025EE  2205                    2272              MOVE.L  D5,D1
000025F0  EC99                    2273              ROR.L   #6,D1
000025F2  0281 00000003           2274              ANDI.L  #$03,D1
000025F8  0C01 0000               2275              CMPI.B  #%00,D1
000025FC  6700 001E               2276              BEQ     OP1011_EOR_B
00002600  0281 00000003           2277              ANDI.L  #$03,D1
00002606  0C01 0001               2278              CMPI.B  #%01,D1
0000260A  6700 001C               2279              BEQ     OP1011_EOR_W
0000260E  0281 00000003           2280              ANDI.L  #$03,D1
00002614  0C01 0002               2281              CMPI.B  #%10,D1
00002618  6700 001A               2282              BEQ     OP1011_EOR_L
0000261C                          2283            
0000261C                          2284  OP1011_EOR_B
0000261C                          2285              
0000261C  163C 0042               2286              MOVE.B  #'B',D3
00002620  6100 1808               2287              BSR     PUSH_STACK
00002624  6000 0016               2288              BRA     OP1011_RETURN
00002628                          2289  OP1011_EOR_W
00002628                          2290              
00002628  163C 0057               2291              MOVE.B  #'W',D3
0000262C  6100 17FC               2292              BSR     PUSH_STACK
00002630  6000 000A               2293              BRA     OP1011_RETURN
00002634                          2294  OP1011_EOR_L
00002634                          2295              
00002634  163C 004C               2296              MOVE.B  #'L',D3
00002638  6100 17F0               2297              BSR     PUSH_STACK
0000263C                          2298  OP1011_RETURN            
0000263C                          2299  
0000263C                          2300              
0000263C                          2301  *GET DATA FROM ADDQ AND PRINT #0-8
0000263C                          2302       
0000263C                          2303              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000263C  0285 0000FE3F           2304              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002642  0685 00000000           2305              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002648                          2306  
00002648  6100 1372               2307              BSR     GET_EA_EA_DEST
0000264C  163C 002C               2308              MOVE.B  #',',D3
00002650  6100 17D8               2309              BSR     PUSH_STACK
00002654  6100 0F36               2310              BSR     GET_EA_EA_SRC
00002658                          2311              
00002658  4E75                    2312              RTS
0000265A                          2313              
0000265A                          2314              
0000265A                          2315              
0000265A                          2316              
0000265A                          2317  
0000265A                          2318  *---------------------------------------------------------------------------*
0000265A                          2319  * OP_CMPA: display CMPA 
0000265A                          2320  *---------------------------------------------------------------------------
0000265A  43F9 000045CE           2321  OP_CMPA_W   LEA     DISP_CMPA_W,A1
00002660  103C 000E               2322              MOVE.B  #14,D0
00002664  4E4F                    2323              TRAP    #15
00002666  183C 0001               2324              MOVE.B  #1,D4
0000266A  4E75                    2325              RTS
0000266C                          2326  
0000266C  43F9 000045D8           2327  OP_CMPA_L   LEA     DISP_CMPA_L,A1
00002672  103C 000E               2328              MOVE.B  #14,D0
00002676  4E4F                    2329              TRAP    #15
00002678  183C 0002               2330              MOVE.B  #2,D4
0000267C  4E75                    2331              RTS
0000267E                          2332  
0000267E                          2333  *---------------------------------------------------------------------------*
0000267E                          2334  * OP_CMP: display CMP and proceed to EA
0000267E                          2335  *---------------------------------------------------------------------------*  
0000267E  43F9 000045B3           2336  OP_CMP_B    LEA     DISP_CMP_B,A1
00002684  103C 000E               2337              MOVE.B  #14,D0
00002688  4E4F                    2338              TRAP    #15
0000268A  183C 0000               2339              MOVE.B  #0,D4
0000268E  4EF9 0000313C           2340              JMP     EA_GEN
00002694                          2341  
00002694  4E75                    2342              RTS
00002696                          2343              
00002696  43F9 000045BC           2344  OP_CMP_W    LEA     DISP_CMP_W,A1
0000269C  103C 000E               2345              MOVE.B  #14,D0
000026A0  4E4F                    2346              TRAP    #15
000026A2  183C 0001               2347              MOVE.B  #1,D4
000026A6  4EF9 0000313C           2348              JMP     EA_GEN
000026AC                          2349  
000026AC  4E75                    2350              RTS
000026AE                          2351              
000026AE  43F9 000045C5           2352  OP_CMP_L    LEA     DISP_CMP_L,A1
000026B4  103C 000E               2353              MOVE.B  #14,D0
000026B8  4E4F                    2354              TRAP    #15
000026BA  183C 0002               2355              MOVE.B  #2,D4
000026BE  4EF9 0000313C           2356              JMP     EA_GEN
000026C4                          2357  
000026C4  4E75                    2358              RTS
000026C6                          2359              
000026C6                          2360  *---------------------------------------------------------------------------*
000026C6                          2361  * OP_EOR: display EOR
000026C6                          2362  *---------------------------------------------------------------------------*  
000026C6  43F9 00004598           2363  OP_EOR_B    LEA     DISP_EOR_B,A1
000026CC  103C 000E               2364              MOVE.B  #14,D0
000026D0  4E4F                    2365              TRAP    #15
000026D2  183C 0000               2366              MOVE.B  #0,D4
000026D6  4E75                    2367              RTS
000026D8                          2368              
000026D8  43F9 000045A1           2369  OP_EOR_W    LEA     DISP_EOR_W,A1
000026DE  103C 000E               2370              MOVE.B  #14,D0
000026E2  4E4F                    2371              TRAP    #15
000026E4  183C 0001               2372              MOVE.B  #1,D4
000026E8  4E75                    2373              RTS
000026EA                          2374              
000026EA  43F9 000045AA           2375  OP_EOR_L    LEA     DISP_EOR_L,A1
000026F0  103C 000E               2376              MOVE.B  #14,D0
000026F4  4E4F                    2377              TRAP    #15
000026F6  183C 0002               2378              MOVE.B  #2,D4
000026FA  4E75                    2379              RTS    
000026FC                          2380  
000026FC                          2381  *---------------------------------------------------------------------------*
000026FC                          2382  * OP1100: Decode and display MULS/AND and proceed to EA
000026FC                          2383  *---------------------------------------------------------------------------* 
000026FC  4280                    2384  OP1100      CLR.L   D0                 
000026FE  4281                    2385              CLR.L   D1    
00002700  4284                    2386              CLR.L   D4                
00002702  227C 00000000           2387              MOVEA.L #0, A1        
00002708  2205                    2388              MOVE.L  D5,D1
0000270A  EA89                    2389              LSR.L   #5,D1
0000270C  0281 0000000E           2390              ANDI.L  #$E,D1
00002712  0C41 000E               2391              CMPI.W  #$E,D1
00002716  6700 0006               2392              BEQ     OP_MULS
0000271A  6000 00F6               2393              BRA     OP1100_DETERMINE_DN_EA_OR_EA_DN 
0000271E                          2394  
0000271E                          2395  OP_MULS                      
0000271E  4281                    2396              CLR.L   D1       
00002720  4284                    2397              CLR.L   D4                   
00002722  227C 00000000           2398              MOVEA.L #0, A1              
00002728  2205                    2399              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
0000272A                          2400              *CLEAR D3
0000272A  4283                    2401              CLR.L   D3
0000272C                          2402  
0000272C                          2403  OP1100_MULS_DN_EA_OR_EA_DN 
0000272C                          2404              *LOAD STACK WITH THIS OPMODE
0000272C  6100 16FC               2405              BSR     PUSH_STACK
00002730  163C 004D               2406              MOVE.B  #'M',D3
00002734  6100 16F4               2407              BSR     PUSH_STACK
00002738  163C 0055               2408              MOVE.B  #'U',D3
0000273C  6100 16EC               2409              BSR     PUSH_STACK
00002740  163C 004C               2410              MOVE.B  #'L',D3
00002744  6100 16E4               2411              BSR     PUSH_STACK
00002748  163C 0053               2412              MOVE.B  #'S',D3
0000274C  6100 16DC               2413              BSR     PUSH_STACK
00002750  163C 002E               2414              MOVE.B  #'.',D3
00002754  6100 16D4               2415              BSR     PUSH_STACK
00002758                          2416              
00002758  2205                    2417              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
0000275A                          2418              
0000275A                          2419  OP1100_EA_DN_MULS           
0000275A                          2420              *BITS (7 TO 6) 
0000275A                          2421              *00 = .B
0000275A                          2422              *01 = .W
0000275A                          2423              *10 = .L 
0000275A  2205                    2424              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
0000275C  EC99                    2425              ROR.L   #6,D1
0000275E  0281 00000003           2426              ANDI.L  #$03,D1
00002764  0C81 00000003           2427              CMPI.L  #%11,D1 *EQUALS .W
0000276A  6700 0014               2428              BEQ     OP1100_PRINT_W_MULS
0000276E  0C81 00000000           2429              CMPI.L  #%00,D1 *EQUALS .L
00002774  6700 0052               2430              BEQ     OP1100_PRINT_L_MULS
00002778                          2431              
00002778  183C 0001               2432              MOVE.B  #1,D4               *ERROR READ
0000277C  6000 0092               2433              BRA     OP1100_MULS_RETURN
00002780                          2434  OP1100_PRINT_W_MULS
00002780  163C 0057               2435              MOVE.B  #'W',D3
00002784  6100 16A4               2436              BSR     PUSH_STACK
00002788                          2437  
00002788                          2438              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002788  13FC 0000 00004750      2439              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002790  13FC 0000 00004751      2440              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002798                          2441             
00002798                          2442              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002798  13FC 00B9 00004753      2443              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000027A0  13FC 0020 00004754      2444              MOVE.B   #$20,GET_SRC_START_END
000027A8                          2445  
000027A8                          2446             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000027A8  0285 0000FE3F           2447              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000027AE  0685 00000000           2448              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
000027B4                          2449  
000027B4                          2450              
000027B4  6100 0DD6               2451              BSR     GET_EA_EA_SRC      *GETS <ea>
000027B8  163C 002C               2452              MOVE.B  #',',D3
000027BC  6100 166C               2453              BSR     PUSH_STACK
000027C0  6100 11FA               2454              BSR     GET_EA_EA_DEST       *GETS Dn    
000027C4                          2455              
000027C4  6000 004A               2456              BRA     OP1100_MULS_RETURN
000027C8                          2457  OP1100_PRINT_L_MULS 
000027C8  163C 004C               2458              MOVE.B  #'L',D3
000027CC  6100 165C               2459              BSR     PUSH_STACK
000027D0                          2460              
000027D0                          2461              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000027D0  13FC 0000 00004750      2462              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000027D8  13FC 0000 00004751      2463              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000027E0                          2464             
000027E0                          2465              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000027E0  13FC 00B9 00004753      2466              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000027E8  13FC 0020 00004754      2467              MOVE.B   #$20,GET_SRC_START_END
000027F0                          2468  
000027F0                          2469              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000027F0  0285 0000FE3F           2470              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000027F6  0685 00000000           2471              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
000027FC                          2472  
000027FC                          2473                     
000027FC  6100 0D8E               2474              BSR     GET_EA_EA_SRC      *GETS <ea>
00002800  163C 002C               2475              MOVE.B  #',',D3
00002804  6100 1624               2476              BSR     PUSH_STACK                  
00002808  6100 11B2               2477              BSR     GET_EA_EA_DEST       *GETS Dn    
0000280C                          2478  
0000280C                          2479              
0000280C  6000 0002               2480              BRA     OP1100_MULS_RETURN
00002810                          2481              
00002810                          2482  OP1100_MULS_RETURN
00002810  4E75                    2483              RTS
00002812                          2484              
00002812                          2485  
00002812                          2486  
00002812                          2487  
00002812                          2488  
00002812                          2489  
00002812                          2490  
00002812                          2491  
00002812                          2492  
00002812                          2493  
00002812                          2494  
00002812                          2495  
00002812                          2496  
00002812                          2497  OP1100_DETERMINE_DN_EA_OR_EA_DN 
00002812                          2498              *LOAD STACK WITH THIS OPMODE
00002812  4283                    2499              CLR.L   D3
00002814  6100 1614               2500              BSR     PUSH_STACK
00002818  163C 0041               2501              MOVE.B  #'A',D3
0000281C  6100 160C               2502              BSR     PUSH_STACK
00002820  163C 004E               2503              MOVE.B  #'N',D3
00002824  6100 1604               2504              BSR     PUSH_STACK
00002828  163C 0044               2505              MOVE.B  #'D',D3
0000282C  6100 15FC               2506              BSR     PUSH_STACK
00002830  163C 002E               2507              MOVE.B  #'.',D3
00002834  6100 15F4               2508              BSR     PUSH_STACK
00002838                          2509              
00002838  2205                    2510              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
0000283A                          2511              
0000283A                          2512              *BITS (INDEX 8) 
0000283A                          2513              *0 = ADD.B/W/L <EA>,Dn
0000283A                          2514              *1 = ADD.B/W/L Dn,<EA> 
0000283A  E099                    2515              ROR.L   #8,D1
0000283C  0281 00000001           2516              ANDI.L  #$01,D1     *MASKS WITH 00000001
00002842  0C81 00000000           2517              CMPI.L  #$00,D1     *IF EQUALS <ea>,Dn
00002848  6700 0102               2518              BEQ     OP1100_EA_DN
0000284C                          2519              *else procede to Dn_EA
0000284C                          2520              
0000284C                          2521  OP1100_DN_EA
0000284C                          2522              *BITS (7 TO 6) 
0000284C                          2523              *00 = .B
0000284C                          2524              *01 = .W
0000284C                          2525              *10 = .L 
0000284C  2205                    2526              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
0000284E  EC99                    2527              ROR.L   #6,D1
00002850  0281 00000003           2528              ANDI.L  #$03,D1
00002856  0C81 00000000           2529              CMPI.L  #$00,D1 *EQUALS .B
0000285C  6700 0016               2530              BEQ     OP1100_PRINT_B2
00002860  0C81 00000001           2531              CMPI.L  #$01,D1 *EQUALS .W
00002866  6700 0054               2532              BEQ     OP1100_PRINT_W2
0000286A  0C81 00000002           2533              CMPI.L  #$02,D1 *EQUALS .L
00002870  6700 0092               2534              BEQ     OP1100_PRINT_L2
00002874                          2535  OP1100_PRINT_B2
00002874                          2536              *PUSH 'B'
00002874  163C 0042               2537              MOVE.B  #'B',D3
00002878  6100 15B0               2538              BSR     PUSH_STACK
0000287C                          2539             
0000287C                          2540              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000287C  13FC 0000 00004750      2541             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002884  13FC 0083 00004751      2542             MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000288C                          2543             
0000288C                          2544             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000288C  13FC 00B9 00004753      2545             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002894  13FC 0020 00004754      2546             MOVE.B   #$20,GET_SRC_START_END
0000289C                          2547  
0000289C                          2548              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000289C  0285 0000FE3F           2549              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000028A2  0685 00000000           2550              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
000028A8                          2551       
000028A8  6100 1112               2552              BSR     GET_EA_EA_DEST      *GETS Dn
000028AC  163C 002C               2553              MOVE.B  #',',D3
000028B0  6100 1578               2554              BSR     PUSH_STACK                     
000028B4  6100 0CD6               2555              BSR     GET_EA_EA_SRC       *GETS <ea>
000028B8                          2556  
000028B8                          2557              
000028B8  6000 0192               2558              BRA     OP1100_AND_RETURN
000028BC                          2559  OP1100_PRINT_W2
000028BC  163C 0057               2560              MOVE.B  #'W',D3
000028C0  6100 1568               2561              BSR     PUSH_STACK
000028C4                          2562  
000028C4                          2563              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000028C4  13FC 0000 00004750      2564              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000028CC  13FC 0083 00004751      2565              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000028D4                          2566             
000028D4                          2567              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000028D4  13FC 00B9 00004753      2568              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000028DC  13FC 0020 00004754      2569              MOVE.B   #$20,GET_SRC_START_END
000028E4                          2570  
000028E4                          2571              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000028E4  0285 0000FE3F           2572              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000028EA  0685 00000000           2573              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A An Register (001) 
000028F0                          2574  
000028F0                          2575        
000028F0  6100 10CA               2576              BSR     GET_EA_EA_DEST      *GETS Dn
000028F4  163C 002C               2577              MOVE.B  #',',D3
000028F8  6100 1530               2578              BSR     PUSH_STACK               
000028FC  6100 0C8E               2579              BSR     GET_EA_EA_SRC       *GETS <ea>       
00002900                          2580  
00002900                          2581  
00002900                          2582  
00002900  6000 049A               2583              BRA     OP1101_ADD_RETURN
00002904                          2584  OP1100_PRINT_L2 
00002904  163C 004C               2585              MOVE.B  #'L',D3
00002908  6100 1520               2586              BSR     PUSH_STACK
0000290C                          2587              
0000290C                          2588              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000290C  13FC 0000 00004750      2589              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002914  13FC 0083 00004751      2590              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000291C                          2591             
0000291C                          2592              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000291C  13FC 00B9 00004753      2593              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002924  13FC 0020 00004754      2594              MOVE.B   #$20,GET_SRC_START_END
0000292C                          2595  
0000292C                          2596             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000292C  0285 0000FE3F           2597              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002932  0685 00000000           2598              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002938                          2599  
00002938                          2600               
00002938  6100 1082               2601              BSR     GET_EA_EA_DEST       *GETS Dn
0000293C  163C 002C               2602              MOVE.B  #',',D3
00002940  6100 14E8               2603              BSR     PUSH_STACK          
00002944  6100 0C46               2604              BSR     GET_EA_EA_SRC        *GETS <ea>
00002948                          2605  
00002948  6000 0102               2606              BRA     OP1100_AND_RETURN
0000294C                          2607              
0000294C                          2608  OP1100_EA_DN           
0000294C                          2609              *BITS (7 TO 6) 
0000294C                          2610              *00 = .B
0000294C                          2611              *01 = .W
0000294C                          2612              *10 = .L 
0000294C  2205                    2613              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
0000294E  EC99                    2614              ROR.L   #6,D1
00002950  0281 00000003           2615              ANDI.L  #$03,D1
00002956  0C81 00000000           2616              CMPI.L  #$00,D1 *EQUALS .B
0000295C  6700 0016               2617              BEQ     OP1100_PRINT_B
00002960  0C81 00000001           2618              CMPI.L  #$01,D1 *EQUALS .W
00002966  6700 0054               2619              BEQ     OP1100_PRINT_W
0000296A  0C81 00000002           2620              CMPI.L  #$02,D1 *EQUALS .L
00002970  6700 0092               2621              BEQ     OP1100_PRINT_L
00002974                          2622  OP1100_PRINT_B
00002974  163C 0042               2623              MOVE.B  #'B',D3
00002978  6100 14B0               2624              BSR     PUSH_STACK
0000297C                          2625                
0000297C                          2626              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000297C  13FC 0000 00004750      2627              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002984  13FC 0002 00004751      2628              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000298C                          2629             
0000298C                          2630              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000298C  13FC 00B9 00004753      2631              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002994  13FC 0020 00004754      2632              MOVE.B   #$20,GET_SRC_START_END
0000299C                          2633  
0000299C                          2634             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000299C  0285 0000FE3F           2635              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000029A2  0685 00000000           2636              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "AN" Register (001) 
000029A8                          2637  
000029A8                          2638              
000029A8  6100 0BE2               2639              BSR     GET_EA_EA_SRC      *GETS <ea>
000029AC  163C 002C               2640              MOVE.B  #',',D3
000029B0  6100 1478               2641              BSR     PUSH_STACK          
000029B4  6100 1006               2642              BSR     GET_EA_EA_DEST       *GETS Dn
000029B8                          2643              
000029B8  6000 03E2               2644              BRA     OP1101_ADD_RETURN
000029BC                          2645  OP1100_PRINT_W
000029BC  163C 0057               2646              MOVE.B  #'W',D3
000029C0  6100 1468               2647              BSR     PUSH_STACK
000029C4                          2648  
000029C4                          2649              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000029C4  13FC 0000 00004750      2650              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000029CC  13FC 0002 00004751      2651              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000029D4                          2652             
000029D4                          2653              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000029D4  13FC 00B9 00004753      2654              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000029DC  13FC 0020 00004754      2655              MOVE.B   #$20,GET_SRC_START_END
000029E4                          2656  
000029E4                          2657             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000029E4  0285 0000FE3F           2658              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000029EA  0685 00000000           2659              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
000029F0                          2660  
000029F0                          2661              
000029F0  6100 0B9A               2662              BSR     GET_EA_EA_SRC      *GETS <ea>
000029F4  163C 002C               2663              MOVE.B  #',',D3
000029F8  6100 1430               2664              BSR     PUSH_STACK
000029FC  6100 0FBE               2665              BSR     GET_EA_EA_DEST       *GETS Dn    
00002A00                          2666              
00002A00  6000 F988               2667              BRA     OP1001_ADD_RETURN
00002A04                          2668  OP1100_PRINT_L 
00002A04  163C 004C               2669              MOVE.B  #'L',D3
00002A08  6100 1420               2670              BSR     PUSH_STACK
00002A0C                          2671              
00002A0C                          2672              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002A0C  13FC 0000 00004750      2673              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002A14  13FC 0002 00004751      2674              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002A1C                          2675             
00002A1C                          2676              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002A1C  13FC 00B9 00004753      2677              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002A24  13FC 0020 00004754      2678              MOVE.B   #$20,GET_SRC_START_END
00002A2C                          2679  
00002A2C                          2680              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002A2C  0285 0000FE3F           2681              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002A32  0685 00000000           2682              ADDI.L  #%0000000000000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002A38                          2683  
00002A38                          2684                     
00002A38  6100 0B52               2685              BSR     GET_EA_EA_SRC      *GETS <ea>
00002A3C  163C 002C               2686              MOVE.B  #',',D3
00002A40  6100 13E8               2687              BSR     PUSH_STACK                  
00002A44  6100 0F76               2688              BSR     GET_EA_EA_DEST       *GETS Dn    
00002A48                          2689  
00002A48                          2690              
00002A48  6000 0002               2691              BRA     OP1100_AND_RETURN
00002A4C                          2692              
00002A4C                          2693  OP1100_AND_RETURN
00002A4C  4E75                    2694              RTS
00002A4E                          2695  
00002A4E                          2696  
00002A4E                          2697  *---------------------------------------------------------------------------*
00002A4E                          2698  * OP1101: Decode ADD/ADDA
00002A4E                          2699  *---------------------------------------------------------------------------* 
00002A4E  4280                    2700  OP1101      CLR.L   D0                  
00002A50  4281                    2701              CLR.L   D1       
00002A52  4284                    2702              CLR.L   D4                   
00002A54  227C 00000000           2703              MOVEA.L #0, A1              
00002A5A  2205                    2704              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
00002A5C                          2705              
00002A5C                          2706              *CLEAR D3
00002A5C  4283                    2707              CLR.L   D3
00002A5E                          2708              
00002A5E                          2709              
00002A5E                          2710              
00002A5E                          2711              **INTEGRATING ADDA.W/.L INTO THIS CODE**
00002A5E  2205                    2712              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00002A60                          2713              *BITS (INDEX 8) 
00002A60                          2714              *0 = ADD.B/W/L <EA>,Dn
00002A60                          2715              *1 = ADD.B/W/L Dn,<EA> 
00002A60  EC99                    2716              ROR.L   #6,D1
00002A62  0281 00000007           2717              ANDI.L  #$07,D1                 *MASKS WITH 00000111
00002A68  0C81 00000007           2718              CMPI.L  #$07,D1                 *IF EQUALS <ea>,Dn
00002A6E  6700 0010               2719              BEQ     OP1101_ADDA_L            *BRANCHES TO ADDA.L
00002A72  0C81 00000003           2720              CMPI.L  #$03,D1                 *IF EQUALS <ea>,Dn
00002A78  6700 0078               2721              BEQ     OP1101_ADDA_W           *BRANCHES TO ADDA.W
00002A7C  6000 00E6               2722              BRA     OP1101_DETERMINE_DN_EA_OR_EA_DN         *ELSE CHECK ADD.B/.W/.L
00002A80                          2723              
00002A80                          2724  OP1101_ADDA_L
00002A80                          2725              *LOAD STACK WITH THIS OPMODE
00002A80  6100 13A8               2726              BSR     PUSH_STACK
00002A84  163C 0041               2727              MOVE.B  #'A',D3
00002A88  6100 13A0               2728              BSR     PUSH_STACK
00002A8C  163C 0044               2729              MOVE.B  #'D',D3
00002A90  6100 1398               2730              BSR     PUSH_STACK
00002A94  163C 0044               2731              MOVE.B  #'D',D3
00002A98  6100 1390               2732              BSR     PUSH_STACK
00002A9C  163C 0041               2733              MOVE.B  #'A',D3
00002AA0  6100 1388               2734              BSR     PUSH_STACK
00002AA4  163C 002E               2735              MOVE.B  #'.',D3
00002AA8  6100 1380               2736              BSR     PUSH_STACK
00002AAC  163C 004C               2737              MOVE.B  #'L',D3
00002AB0  6100 1378               2738              BSR     PUSH_STACK
00002AB4                          2739              
00002AB4                          2740             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002AB4  13FC 0000 00004750      2741             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002ABC  13FC 0000 00004751      2742             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002AC4                          2743             
00002AC4                          2744             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002AC4  13FC 00B9 00004753      2745             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002ACC  13FC 0020 00004754      2746             MOVE.B   #$20,GET_SRC_START_END
00002AD4                          2747  
00002AD4                          2748              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002AD4  0285 0000FE3F           2749              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002ADA  0685 00000040           2750              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002AE0                          2751       
00002AE0                          2752              *PRINT <EA>,AN
00002AE0  6100 0AAA               2753              BSR     GET_EA_EA_SRC       *GETS <ea>
00002AE4  163C 002C               2754              MOVE.B  #',',D3
00002AE8  6100 1340               2755              BSR     PUSH_STACK                     
00002AEC  6100 0ECE               2756              BSR     GET_EA_EA_DEST      *GETS Dn
00002AF0                          2757  
00002AF0                          2758              
00002AF0                          2759              
00002AF0  4E75                    2760              RTS
00002AF2                          2761  OP1101_ADDA_W
00002AF2                          2762              *LOAD STACK WITH THIS OPMODE
00002AF2  6100 1336               2763              BSR     PUSH_STACK
00002AF6  163C 0041               2764              MOVE.B  #'A',D3
00002AFA  6100 132E               2765              BSR     PUSH_STACK
00002AFE  163C 0044               2766              MOVE.B  #'D',D3
00002B02  6100 1326               2767              BSR     PUSH_STACK
00002B06  163C 0044               2768              MOVE.B  #'D',D3
00002B0A  6100 131E               2769              BSR     PUSH_STACK
00002B0E  163C 0041               2770              MOVE.B  #'A',D3
00002B12  6100 1316               2771              BSR     PUSH_STACK
00002B16  163C 002E               2772              MOVE.B  #'.',D3
00002B1A  6100 130E               2773              BSR     PUSH_STACK
00002B1E  163C 0057               2774              MOVE.B  #'W',D3
00002B22  6100 1306               2775              BSR     PUSH_STACK
00002B26                          2776              
00002B26                          2777             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002B26  13FC 0000 00004750      2778             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002B2E  13FC 0000 00004751      2779             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002B36                          2780             
00002B36                          2781             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002B36  13FC 00B9 00004753      2782             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002B3E  13FC 0020 00004754      2783             MOVE.B   #$20,GET_SRC_START_END
00002B46                          2784  
00002B46                          2785              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002B46  0285 0000FE3F           2786              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002B4C  0685 00000040           2787              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00002B52                          2788       
00002B52                          2789              *PRINT <EA>,AN
00002B52  6100 0A38               2790              BSR     GET_EA_EA_SRC       *GETS <ea>
00002B56  163C 002C               2791              MOVE.B  #',',D3
00002B5A  6100 12CE               2792              BSR     PUSH_STACK                     
00002B5E  6100 0E5C               2793              BSR     GET_EA_EA_DEST      *GETS Dn
00002B62                          2794  
00002B62  4E75                    2795              RTS
00002B64                          2796  
00002B64                          2797  OP1101_DETERMINE_DN_EA_OR_EA_DN 
00002B64                          2798              *LOAD STACK WITH THIS OPMODE
00002B64  6100 12C4               2799              BSR     PUSH_STACK
00002B68  163C 0041               2800              MOVE.B  #'A',D3
00002B6C  6100 12BC               2801              BSR     PUSH_STACK
00002B70  163C 0044               2802              MOVE.B  #'D',D3
00002B74  6100 12B4               2803              BSR     PUSH_STACK
00002B78  163C 0044               2804              MOVE.B  #'D',D3
00002B7C  6100 12AC               2805              BSR     PUSH_STACK
00002B80  163C 002E               2806              MOVE.B  #'.',D3
00002B84  6100 12A4               2807              BSR     PUSH_STACK
00002B88                          2808              
00002B88  2205                    2809              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00002B8A                          2810              
00002B8A                          2811              *BITS (INDEX 8) 
00002B8A                          2812              *0 = ADD.B/W/L <EA>,Dn
00002B8A                          2813              *1 = ADD.B/W/L Dn,<EA> 
00002B8A  E099                    2814              ROR.L   #8,D1
00002B8C  0281 00000001           2815              ANDI.L  #$01,D1     *MASKS WITH 00000001
00002B92  0C81 00000000           2816              CMPI.L  #$00,D1     *IF EQUALS <ea>,Dn
00002B98  6700 0102               2817              BEQ     OP1101_EA_DN
00002B9C                          2818              *else procede to Dn_EA
00002B9C                          2819              
00002B9C                          2820  OP1101_DN_EA
00002B9C                          2821              *BITS (7 TO 6) 
00002B9C                          2822              *00 = .B
00002B9C                          2823              *01 = .W
00002B9C                          2824              *10 = .L 
00002B9C  2205                    2825              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00002B9E  EC99                    2826              ROR.L   #6,D1
00002BA0  0281 00000003           2827              ANDI.L  #$03,D1
00002BA6  0C81 00000000           2828              CMPI.L  #$00,D1 *EQUALS .B
00002BAC  6700 0016               2829              BEQ     OP1101_PRINT_B2
00002BB0  0C81 00000001           2830              CMPI.L  #$01,D1 *EQUALS .W
00002BB6  6700 0054               2831              BEQ     OP1101_PRINT_W2
00002BBA  0C81 00000002           2832              CMPI.L  #$02,D1 *EQUALS .L
00002BC0  6700 0092               2833              BEQ     OP1101_PRINT_L2
00002BC4                          2834  OP1101_PRINT_B2
00002BC4                          2835              *PUSH 'B'
00002BC4  163C 0042               2836              MOVE.B  #'B',D3
00002BC8  6100 1260               2837              BSR     PUSH_STACK
00002BCC                          2838             
00002BCC                          2839              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002BCC  13FC 0002 00004750      2840             MOVE.B   #$02,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002BD4  13FC 0083 00004751      2841             MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002BDC                          2842             
00002BDC                          2843             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002BDC  13FC 00B9 00004753      2844             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002BE4  13FC 0020 00004754      2845             MOVE.B   #$20,GET_SRC_START_END
00002BEC                          2846  
00002BEC                          2847              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002BEC  0285 0000FE3F           2848              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002BF2  0685 00000000           2849              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002BF8                          2850       
00002BF8  6100 0DC2               2851              BSR     GET_EA_EA_DEST      *GETS Dn
00002BFC  163C 002C               2852              MOVE.B  #',',D3
00002C00  6100 1228               2853              BSR     PUSH_STACK                     
00002C04  6100 0986               2854              BSR     GET_EA_EA_SRC       *GETS <ea>
00002C08                          2855  
00002C08                          2856              
00002C08  6000 0192               2857              BRA     OP1101_ADD_RETURN
00002C0C                          2858  OP1101_PRINT_W2
00002C0C  163C 0057               2859              MOVE.B  #'W',D3
00002C10  6100 1218               2860              BSR     PUSH_STACK
00002C14                          2861  
00002C14                          2862              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002C14  13FC 0000 00004750      2863              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002C1C  13FC 0083 00004751      2864              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002C24                          2865             
00002C24                          2866              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002C24  13FC 00B9 00004753      2867              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002C2C  13FC 0020 00004754      2868              MOVE.B   #$20,GET_SRC_START_END
00002C34                          2869  
00002C34                          2870              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002C34  0285 0000FE3F           2871              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002C3A  0685 00000000           2872              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002C40                          2873  
00002C40                          2874        
00002C40  6100 0D7A               2875              BSR     GET_EA_EA_DEST      *GETS Dn
00002C44  163C 002C               2876              MOVE.B  #',',D3
00002C48  6100 11E0               2877              BSR     PUSH_STACK               
00002C4C  6100 093E               2878              BSR     GET_EA_EA_SRC       *GETS <ea>       
00002C50                          2879  
00002C50                          2880  
00002C50                          2881  
00002C50  6000 014A               2882              BRA     OP1101_ADD_RETURN
00002C54                          2883  OP1101_PRINT_L2 
00002C54  163C 004C               2884              MOVE.B  #'L',D3
00002C58  6100 11D0               2885              BSR     PUSH_STACK
00002C5C                          2886              
00002C5C                          2887              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002C5C  13FC 0000 00004750      2888              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002C64  13FC 0083 00004751      2889              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002C6C                          2890             
00002C6C                          2891              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002C6C  13FC 00B9 00004753      2892              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002C74  13FC 0020 00004754      2893              MOVE.B   #$20,GET_SRC_START_END
00002C7C                          2894  
00002C7C                          2895             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002C7C  0285 0000FE3F           2896              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002C82  0685 00000000           2897              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002C88                          2898  
00002C88                          2899               
00002C88  6100 0D32               2900              BSR     GET_EA_EA_DEST       *GETS Dn
00002C8C  163C 002C               2901              MOVE.B  #',',D3
00002C90  6100 1198               2902              BSR     PUSH_STACK          
00002C94  6100 08F6               2903              BSR     GET_EA_EA_SRC        *GETS <ea>
00002C98                          2904  
00002C98  6000 0102               2905              BRA     OP1101_ADD_RETURN
00002C9C                          2906              
00002C9C                          2907  OP1101_EA_DN           
00002C9C                          2908              *BITS (7 TO 6) 
00002C9C                          2909              *00 = .B
00002C9C                          2910              *01 = .W
00002C9C                          2911              *10 = .L 
00002C9C  2205                    2912              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00002C9E  EC99                    2913              ROR.L   #6,D1
00002CA0  0281 00000003           2914              ANDI.L  #$03,D1
00002CA6  0C81 00000000           2915              CMPI.L  #$00,D1 *EQUALS .B
00002CAC  6700 0016               2916              BEQ     OP1101_PRINT_B
00002CB0  0C81 00000001           2917              CMPI.L  #$01,D1 *EQUALS .W
00002CB6  6700 0054               2918              BEQ     OP1101_PRINT_W
00002CBA  0C81 00000002           2919              CMPI.L  #$02,D1 *EQUALS .L
00002CC0  6700 0092               2920              BEQ     OP1101_PRINT_L
00002CC4                          2921  OP1101_PRINT_B
00002CC4  163C 0042               2922              MOVE.B  #'B',D3
00002CC8  6100 1160               2923              BSR     PUSH_STACK
00002CCC                          2924                
00002CCC                          2925              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002CCC  13FC 0002 00004750      2926              MOVE.B   #$02,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002CD4  13FC 0002 00004751      2927              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002CDC                          2928             
00002CDC                          2929              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002CDC  13FC 00B9 00004753      2930              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002CE4  13FC 0020 00004754      2931              MOVE.B   #$20,GET_SRC_START_END
00002CEC                          2932  
00002CEC                          2933             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002CEC  0285 0000FE3F           2934              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002CF2  0685 00000000           2935              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002CF8                          2936  
00002CF8                          2937              
00002CF8  6100 0892               2938              BSR     GET_EA_EA_SRC      *GETS <ea>
00002CFC  163C 002C               2939              MOVE.B  #',',D3
00002D00  6100 1128               2940              BSR     PUSH_STACK          
00002D04  6100 0CB6               2941              BSR     GET_EA_EA_DEST       *GETS Dn
00002D08                          2942              
00002D08  6000 0092               2943              BRA     OP1101_ADD_RETURN
00002D0C                          2944  OP1101_PRINT_W
00002D0C  163C 0057               2945              MOVE.B  #'W',D3
00002D10  6100 1118               2946              BSR     PUSH_STACK
00002D14                          2947  
00002D14                          2948              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002D14  13FC 0000 00004750      2949              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002D1C  13FC 0000 00004751      2950              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002D24                          2951             
00002D24                          2952              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002D24  13FC 00B9 00004753      2953              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002D2C  13FC 0020 00004754      2954              MOVE.B   #$20,GET_SRC_START_END
00002D34                          2955  
00002D34                          2956             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002D34  0285 0000FE3F           2957              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002D3A  0685 00000000           2958              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002D40                          2959  
00002D40                          2960              
00002D40  6100 084A               2961              BSR     GET_EA_EA_SRC      *GETS <ea>
00002D44  163C 002C               2962              MOVE.B  #',',D3
00002D48  6100 10E0               2963              BSR     PUSH_STACK
00002D4C  6100 0C6E               2964              BSR     GET_EA_EA_DEST       *GETS Dn    
00002D50                          2965              
00002D50  6000 004A               2966              BRA     OP1101_ADD_RETURN
00002D54                          2967  OP1101_PRINT_L 
00002D54  163C 004C               2968              MOVE.B  #'L',D3
00002D58  6100 10D0               2969              BSR     PUSH_STACK
00002D5C                          2970              
00002D5C                          2971              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002D5C  13FC 0000 00004750      2972              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002D64  13FC 0000 00004751      2973              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002D6C                          2974             
00002D6C                          2975              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002D6C  13FC 00B9 00004753      2976              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002D74  13FC 0020 00004754      2977              MOVE.B   #$20,GET_SRC_START_END
00002D7C                          2978  
00002D7C                          2979              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002D7C  0285 0000FE3F           2980              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002D82  0685 00000000           2981              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002D88                          2982  
00002D88                          2983                     
00002D88  6100 0802               2984              BSR     GET_EA_EA_SRC      *GETS <ea>
00002D8C  163C 002C               2985              MOVE.B  #',',D3
00002D90  6100 1098               2986              BSR     PUSH_STACK                  
00002D94  6100 0C26               2987              BSR     GET_EA_EA_DEST       *GETS Dn    
00002D98                          2988  
00002D98                          2989              
00002D98  6000 0002               2990              BRA     OP1101_ADD_RETURN
00002D9C                          2991              
00002D9C                          2992  OP1101_ADD_RETURN
00002D9C  4E75                    2993              RTS
00002D9E                          2994              
00002D9E                          2995              *ADDW
00002D9E  0C01 0006               2996              CMPI.B  #$6,D1
00002DA2  6700 0056               2997              BEQ     OP_ADDA_W
00002DA6  0C01 000E               2998              CMPI.B  #$E,D1
00002DAA  6700 0066               2999              BEQ     OP_ADDA_L 
00002DAE                          3000  
00002DAE  4EF8 1624               3001              JMP     OP_DATA  
00002DB2                          3002            
00002DB2                          3003  *---------------------------------------------------------------------------*
00002DB2                          3004  * OP_ADD: display ADD and proceed to EA
00002DB2                          3005  *---------------------------------------------------------------------------*  
00002DB2  43F9 00004607           3006  OP_ADD_B    LEA     DISP_ADD_B,A1
00002DB8  103C 000E               3007              MOVE.B  #14,D0
00002DBC  4E4F                    3008              TRAP    #15
00002DBE  183C 0000               3009              MOVE.B  #0,D4
00002DC2  4EF9 0000313C           3010              JMP     EA_GEN
00002DC8                          3011  
00002DC8  4E75                    3012              RTS
00002DCA                          3013  
00002DCA  43F9 00004610           3014  OP_ADD_W    LEA     DISP_ADD_W,A1
00002DD0  103C 000E               3015              MOVE.B  #14,D0
00002DD4  4E4F                    3016              TRAP    #15
00002DD6  183C 0001               3017              MOVE.B  #1,D4
00002DDA  4EF9 0000313C           3018              JMP     EA_GEN
00002DE0                          3019  
00002DE0  4E75                    3020              RTS
00002DE2                          3021  
00002DE2  43F9 00004619           3022  OP_ADD_L    LEA     DISP_ADD_L,A1
00002DE8  103C 000E               3023              MOVE.B  #14,D0
00002DEC  4E4F                    3024              TRAP    #15
00002DEE  183C 0002               3025              MOVE.B  #2,D4
00002DF2  4EF9 0000313C           3026              JMP     EA_GEN
00002DF8                          3027  
00002DF8  4E75                    3028              RTS
00002DFA                          3029  
00002DFA                          3030  *---------------------------------------------------------------------------*
00002DFA                          3031  * OP_ADDA: display ADDA and proceed to EA
00002DFA                          3032  *---------------------------------------------------------------------------*  
00002DFA  43F9 00004622           3033  OP_ADDA_W   LEA     DISP_ADDA_W,A1
00002E00  103C 000E               3034              MOVE.B  #14,D0
00002E04  4E4F                    3035              TRAP    #15
00002E06  183C 0001               3036              MOVE.B  #1,D4
00002E0A  4EF9 0000313C           3037              JMP     EA_GEN
00002E10                          3038  
00002E10  4E75                    3039              RTS
00002E12                          3040  
00002E12  43F9 0000462C           3041  OP_ADDA_L   LEA     DISP_ADDA_L,A1
00002E18  103C 000E               3042              MOVE.B  #14,D0
00002E1C  4E4F                    3043              TRAP    #15
00002E1E  183C 0002               3044              MOVE.B  #2,D4
00002E22  4EF9 0000313C           3045              JMP     EA_GEN
00002E28                          3046  
00002E28  4E75                    3047              RTS
00002E2A                          3048              
00002E2A                          3049  *---------------------------------------------------------------------------*
00002E2A                          3050  * OP1110: LSR/LSL/ASR/ASL/ROL/ROR
00002E2A                          3051  *---------------------------------------------------------------------------* 
00002E2A  4280                    3052  OP1110      CLR.L   D0                  
00002E2C  4281                    3053              CLR.L   D1   
00002E2E  4284                    3054              CLR.L   D4                   
00002E30  227C 00000000           3055              MOVEA.L #0, A1                 
00002E36  2205                    3056              MOVE.L  D5,D1
00002E38                          3057              
00002E38                          3058              * check for LSX
00002E38  E699                    3059              ROR.L   #3,D1
00002E3A  0281 00000001           3060              ANDI.L  #$1,D1
00002E40  0C01 0001               3061              CMPI.B  #1,D1
00002E44  6700 002E               3062              BEQ     OP_LSX
00002E48                          3063              
00002E48                          3064              * reset D1 and check for ASX
00002E48  4281                    3065              CLR.L   D1
00002E4A  2205                    3066              MOVE.L  D5,D1
00002E4C  E699                    3067              ROR.L   #3,D1
00002E4E  0281 00000001           3068              ANDI.L  #$1,D1
00002E54  0C01 0000               3069              CMPI.B  #0,D1
00002E58  6700 0032               3070              BEQ     OP_ASX
00002E5C                          3071  
00002E5C                          3072              * reset D1 and check for ROX
00002E5C  4281                    3073              CLR.L   D1
00002E5E  2205                    3074              MOVE.L  D5,D1
00002E60  E699                    3075              ROR.L   #3,D1
00002E62  0281 00000001           3076              ANDI.L  #$1,D1
00002E68  0C01 0003               3077              CMPI.B  #3,D1
00002E6C  6700 0036               3078              BEQ     OP_ROX
00002E70                          3079              
00002E70  4EF8 1624               3080              JMP     OP_DATA
00002E74                          3081  
00002E74                          3082  *---------------------------------------------------------------------------*
00002E74                          3083  * OP_LSX: process LSR/LSL
00002E74                          3084  *---------------------------------------------------------------------------*            
00002E74  EA99                    3085  OP_LSX      ROR.L   #5,D1
00002E76  0281 00000001           3086              ANDI.L  #$1,D1
00002E7C  0C01 0000               3087              CMPI.B  #0,D1
00002E80  6700 003A               3088              BEQ     OP_LSR
00002E84  0C01 0001               3089              CMPI.B  #1,D1
00002E88  6700 008C               3090              BEQ     OP_LSL
00002E8C                          3091              
00002E8C                          3092  *---------------------------------------------------------------------------*
00002E8C                          3093  * OP_ASX: process ASR/ASL
00002E8C                          3094  *---------------------------------------------------------------------------*  
00002E8C  EA99                    3095  OP_ASX      ROR.L   #5,D1
00002E8E  0281 00000001           3096              ANDI.L  #$1,D1
00002E94  0C01 0000               3097              CMPI.B  #0,D1
00002E98  6700 00D6               3098              BEQ     OP_ASR
00002E9C  0C01 0001               3099              CMPI.B  #1,D1
00002EA0  6700 0128               3100              BEQ     OP_ASL
00002EA4                          3101              
00002EA4                          3102  *---------------------------------------------------------------------------*
00002EA4                          3103  * OP_ROX: process ROR/ROL
00002EA4                          3104  *---------------------------------------------------------------------------*  
00002EA4  EA99                    3105  OP_ROX      ROR.L   #5,D1
00002EA6  0281 00000001           3106              ANDI.L  #$1,D1
00002EAC  0C01 0000               3107              CMPI.B  #0,D1
00002EB0  6700 0172               3108              BEQ     OP_ROR
00002EB4  0C01 0001               3109              CMPI.B  #1,D1
00002EB8  6700 01C4               3110              BEQ     OP_ROL
00002EBC                          3111  
00002EBC                          3112  *---------------------------------------------------------------------------*
00002EBC                          3113  * OP_LSR: decode and display LSR
00002EBC                          3114  *---------------------------------------------------------------------------*        
00002EBC  E599                    3115  OP_LSR      ROL.L   #2,D1
00002EBE  0281 00000003           3116              ANDI.L  #$3,D1
00002EC4  0C01 0000               3117              CMPI.B  #0,D1
00002EC8  6700 0016               3118              BEQ     OP_LSR_B
00002ECC  0C01 0001               3119              CMPI.B  #$1,D1
00002ED0  6700 0032               3120              BEQ     OP_LSR_W
00002ED4  0C01 0002               3121              CMPI.B  #$2,D1
00002ED8  6700 0018               3122              BEQ     OP_LSR_L
00002EDC                          3123              
00002EDC  4EF8 1624               3124              JMP     OP_DATA
00002EE0                          3125  
00002EE0  43F9 00004636           3126  OP_LSR_B    LEA     DISP_LSR_B,A1
00002EE6  103C 000E               3127              MOVE.B  #14,D0
00002EEA  4E4F                    3128              TRAP    #15
00002EEC  183C 0000               3129              MOVE.B  #0,D4
00002EF0  4E75                    3130              RTS
00002EF2                          3131  
00002EF2  43F9 0000465A           3132  OP_LSR_L    LEA     DISP_LSR_L,A1
00002EF8  103C 000E               3133              MOVE.B  #14,D0
00002EFC  4E4F                    3134              TRAP    #15
00002EFE  183C 0002               3135              MOVE.B  #2,D4
00002F02  4E75                    3136              RTS
00002F04                          3137  
00002F04  43F9 00004648           3138  OP_LSR_W    LEA     DISP_LSR_W,A1
00002F0A  103C 000E               3139              MOVE.B  #14,D0
00002F0E  4E4F                    3140              TRAP    #15
00002F10  183C 0001               3141              MOVE.B  #1,D4
00002F14  4E75                    3142              RTS
00002F16                          3143   
00002F16                          3144  *---------------------------------------------------------------------------*
00002F16                          3145  * OP_LSL: decode and display LSL
00002F16                          3146  *---------------------------------------------------------------------------*             
00002F16  E599                    3147  OP_LSL      ROL.L   #2,D1
00002F18  0281 00000003           3148              ANDI.L  #$3,D1
00002F1E  0C01 0000               3149              CMPI.B  #0,D1
00002F22  6700 0016               3150              BEQ     OP_LSL_B
00002F26  0C01 0001               3151              CMPI.B  #$1,D1
00002F2A  6700 0032               3152              BEQ     OP_LSL_W
00002F2E  0C01 0002               3153              CMPI.B  #$2,D1
00002F32  6700 0018               3154              BEQ     OP_LSL_L
00002F36                          3155              
00002F36  4EF8 1624               3156              JMP OP_DATA
00002F3A                          3157  
00002F3A  43F9 0000463F           3158  OP_LSL_B    LEA     DISP_LSL_B,A1
00002F40  103C 000E               3159              MOVE.B  #14,D0
00002F44  4E4F                    3160              TRAP    #15
00002F46  183C 0000               3161              MOVE.B  #0,D4
00002F4A  4E75                    3162              RTS
00002F4C                          3163  
00002F4C  43F9 00004663           3164  OP_LSL_L    LEA     DISP_LSL_L,A1
00002F52  103C 000E               3165              MOVE.B  #14,D0
00002F56  4E4F                    3166              TRAP    #15
00002F58  183C 0002               3167              MOVE.B  #2,D4
00002F5C  4E75                    3168              RTS
00002F5E                          3169  
00002F5E  43F9 00004651           3170  OP_LSL_W    LEA     DISP_LSL_W,A1
00002F64  103C 000E               3171              MOVE.B  #14,D0
00002F68  4E4F                    3172              TRAP    #15
00002F6A  183C 0001               3173              MOVE.B  #1,D4
00002F6E  4E75                    3174              RTS
00002F70                          3175   
00002F70                          3176  *---------------------------------------------------------------------------*
00002F70                          3177  * OP_ASR: decode and display ASR
00002F70                          3178  *---------------------------------------------------------------------------*             
00002F70  E599                    3179  OP_ASR      ROL.L   #2,D1
00002F72  0281 00000003           3180              ANDI.L  #$3,D1
00002F78  0C01 0000               3181              CMPI.B  #0,D1
00002F7C  6700 0016               3182              BEQ     OP_ASR_B
00002F80  0C01 0001               3183              CMPI.B  #$1,D1
00002F84  6700 0032               3184              BEQ     OP_ASR_W
00002F88  0C01 0002               3185              CMPI.B  #$2,D1
00002F8C  6700 0018               3186              BEQ     OP_ASR_L
00002F90                          3187              
00002F90  4EF8 1624               3188              JMP OP_DATA
00002F94                          3189  
00002F94  43F9 0000466C           3190  OP_ASR_B    LEA     DISP_ASR_B,A1
00002F9A  103C 000E               3191              MOVE.B  #14,D0
00002F9E  4E4F                    3192              TRAP    #15
00002FA0  183C 0000               3193              MOVE.B  #0,D4
00002FA4  4E75                    3194              RTS
00002FA6                          3195  
00002FA6  43F9 00004690           3196  OP_ASR_L    LEA     DISP_ASR_L,A1
00002FAC  103C 000E               3197              MOVE.B  #14,D0
00002FB0  4E4F                    3198              TRAP    #15
00002FB2  183C 0002               3199              MOVE.B  #2,D4
00002FB6  4E75                    3200              RTS
00002FB8                          3201  
00002FB8  43F9 0000467E           3202  OP_ASR_W    LEA     DISP_ASR_W,A1
00002FBE  103C 000E               3203              MOVE.B  #14,D0
00002FC2  4E4F                    3204              TRAP    #15
00002FC4  183C 0001               3205              MOVE.B  #1,D4
00002FC8  4E75                    3206              RTS
00002FCA                          3207       
00002FCA                          3208  *---------------------------------------------------------------------------*
00002FCA                          3209  * OP_ASL: decode and display ASL
00002FCA                          3210  *---------------------------------------------------------------------------*         
00002FCA  E599                    3211  OP_ASL      ROL.L   #2,D1
00002FCC  0281 00000003           3212              ANDI.L  #$3,D1
00002FD2  0C01 0000               3213              CMPI.B  #0,D1
00002FD6  6700 0016               3214              BEQ     OP_ASL_B
00002FDA  0C01 0001               3215              CMPI.B  #$1,D1
00002FDE  6700 0032               3216              BEQ     OP_ASL_W
00002FE2  0C01 0002               3217              CMPI.B  #$2,D1
00002FE6  6700 0018               3218              BEQ     OP_ASL_L
00002FEA                          3219              
00002FEA  4EF8 1624               3220              JMP OP_DATA
00002FEE                          3221  
00002FEE  43F9 00004675           3222  OP_ASL_B    LEA     DISP_ASL_B,A1
00002FF4  103C 000E               3223              MOVE.B  #14,D0
00002FF8  4E4F                    3224              TRAP    #15
00002FFA  183C 0000               3225              MOVE.B  #0,D4
00002FFE  4E75                    3226              RTS
00003000                          3227  
00003000  43F9 00004699           3228  OP_ASL_L    LEA     DISP_ASL_L,A1
00003006  103C 000E               3229              MOVE.B  #14,D0
0000300A  4E4F                    3230              TRAP    #15
0000300C  183C 0002               3231              MOVE.B  #2,D4
00003010  4E75                    3232              RTS
00003012                          3233  
00003012  43F9 00004687           3234  OP_ASL_W    LEA     DISP_ASL_W,A1
00003018  103C 000E               3235              MOVE.B  #14,D0
0000301C  4E4F                    3236              TRAP    #15
0000301E  183C 0001               3237              MOVE.B  #1,D4
00003022  4E75                    3238              RTS
00003024                          3239   
00003024                          3240  *---------------------------------------------------------------------------*
00003024                          3241  * OP_ROR: decode and display ROR
00003024                          3242  *---------------------------------------------------------------------------*             
00003024  E599                    3243  OP_ROR      ROL.L   #2,D1
00003026  0281 00000003           3244              ANDI.L  #$3,D1
0000302C  0C01 0000               3245              CMPI.B  #0,D1
00003030  6700 0016               3246              BEQ     OP_ROR_B
00003034  0C01 0001               3247              CMPI.B  #$1,D1
00003038  6700 0032               3248              BEQ     OP_ROR_W
0000303C  0C01 0002               3249              CMPI.B  #$2,D1
00003040  6700 0018               3250              BEQ     OP_ROR_L
00003044                          3251              
00003044  4EF8 1624               3252              JMP OP_DATA
00003048                          3253  
00003048  43F9 000046A2           3254  OP_ROR_B    LEA     DISP_ROR_B,A1
0000304E  103C 000E               3255              MOVE.B  #14,D0
00003052  4E4F                    3256              TRAP    #15
00003054  183C 0000               3257              MOVE.B  #0,D4
00003058  4E75                    3258              RTS
0000305A                          3259  
0000305A  43F9 000046C6           3260  OP_ROR_L    LEA     DISP_ROR_L,A1
00003060  103C 000E               3261              MOVE.B  #14,D0
00003064  4E4F                    3262              TRAP    #15
00003066  183C 0002               3263              MOVE.B  #2,D4
0000306A  4E75                    3264              RTS
0000306C                          3265  
0000306C  43F9 000046B4           3266  OP_ROR_W    LEA     DISP_ROR_W,A1
00003072  103C 000E               3267              MOVE.B  #14,D0
00003076  4E4F                    3268              TRAP    #15
00003078  183C 0001               3269              MOVE.B  #1,D4
0000307C  4E75                    3270              RTS
0000307E                          3271  
0000307E                          3272  *---------------------------------------------------------------------------*
0000307E                          3273  * OP_ROL: decode and display ROL
0000307E                          3274  *---------------------------------------------------------------------------*             
0000307E  E599                    3275  OP_ROL      ROL.L   #2,D1
00003080  0281 00000003           3276              ANDI.L  #$3,D1
00003086  0C01 0000               3277              CMPI.B  #0,D1
0000308A  6700 0016               3278              BEQ     OP_ROL_B
0000308E  0C01 0001               3279              CMPI.B  #$1,D1
00003092  6700 0032               3280              BEQ     OP_ROL_W
00003096  0C01 0002               3281              CMPI.B  #$2,D1
0000309A  6700 0018               3282              BEQ     OP_ROL_L
0000309E                          3283              
0000309E  4EF8 1624               3284              JMP OP_DATA
000030A2                          3285  
000030A2                          3286  
000030A2  43F9 000046AB           3287  OP_ROL_B    LEA     DISP_ROL_B,A1
000030A8  103C 000E               3288              MOVE.B  #14,D0
000030AC  4E4F                    3289              TRAP    #15
000030AE  183C 0000               3290              MOVE.B  #0,D4
000030B2  4E75                    3291              RTS
000030B4                          3292  
000030B4  43F9 000046CF           3293  OP_ROL_L    LEA     DISP_ROL_L,A1
000030BA  103C 000E               3294              MOVE.B  #14,D0
000030BE  4E4F                    3295              TRAP    #15
000030C0  183C 0002               3296              MOVE.B  #2,D4
000030C4  4E75                    3297              RTS
000030C6                          3298  
000030C6  43F9 000046BD           3299  OP_ROL_W    LEA     DISP_ROL_W,A1
000030CC  103C 000E               3300              MOVE.B  #14,D0
000030D0  4E4F                    3301              TRAP    #15
000030D2  183C 0001               3302              MOVE.B  #1,D4
000030D6  4E75                    3303              RTS
000030D8                          3304              
000030D8                          3305  *---------------------------------------------------------------------------*
000030D8                          3306  * OP1111 : Special reserved
000030D8                          3307  *---------------------------------------------------------------------------*           
000030D8  4EF8 1624               3308  OP1111      JMP     OP_DATA
000030DC                          3309  
000030DC                          3310  *---------------------------------------------------------------------------*
000030DC                          3311  * EA_NOSRC: decode and display effective addresses for NEG/JSR
000030DC                          3312  *---------------------------------------------------------------------------*
000030DC                          3313  EA_NOSRC    
000030DC  4EB9 0000319A           3314              JSR     SRC_MODE
000030E2  43F9 0000439C           3315              LEA     ENDLINE_M,A1
000030E8  103C 000E               3316              MOVE.B  #14,D0
000030EC  4E4F                    3317              TRAP    #15
000030EE  4E75                    3318              RTS
000030F0                          3319              
000030F0                          3320  *---------------------------------------------------------------------------*
000030F0                          3321  * EA_ARITH: decode and display effective addresses for DIVS/MULS
000030F0                          3322  *---------------------------------------------------------------------------*
000030F0                          3323  EA_ARITH
000030F0  4EB9 0000319A           3324              JSR     SRC_MODE
000030F6  43F9 00004716           3325              LEA     DISP_D,A1
000030FC  103C 000E               3326              MOVE.B  #14,D0
00003100  4E4F                    3327              TRAP    #15
00003102  4EB9 00003426           3328              JSR     DEST_REGISTER
00003108  43F9 0000439C           3329              LEA     ENDLINE_M,A1
0000310E  103C 000E               3330              MOVE.B  #14,D0
00003112  4E4F                    3331              TRAP    #15
00003114  4E75                    3332              RTS
00003116                          3333              
00003116                          3334  *---------------------------------------------------------------------------*
00003116                          3335  * EA_MOVEA: decode and display effective addresses for MOVEA/LEA
00003116                          3336  *---------------------------------------------------------------------------*
00003116                          3337  EA_MOVEA
00003116  4EB9 0000319A           3338              JSR     SRC_MODE
0000311C  43F9 00004727           3339              LEA     DISP_AOP,A1
00003122  103C 000E               3340              MOVE.B  #14,D0
00003126  4E4F                    3341              TRAP    #15
00003128  4EB9 00003426           3342              JSR     DEST_REGISTER
0000312E  43F9 00004725           3343              LEA     DISP_CP,A1
00003134  103C 000D               3344              MOVE.B  #13,D0
00003138  4E4F                    3345              TRAP    #15
0000313A  4E75                    3346              RTS
0000313C                          3347              
0000313C                          3348  *---------------------------------------------------------------------------*
0000313C                          3349  * EA_GEN: decode and display effective addresses for MOVE
0000313C                          3350  *---------------------------------------------------------------------------*
0000313C                          3351  EA_GEN          
0000313C                          3352              * retrieve/display source mode/register
0000313C  4EB9 0000319A           3353              JSR     SRC_MODE
00003142                          3354              
00003142                          3355              * retrieve/display destination mode/register
00003142  4EB9 00003156           3356              JSR     DEST_MODE
00003148                          3357              
00003148  43F9 0000439C           3358              LEA     ENDLINE_M,A1
0000314E  103C 000E               3359              MOVE.B  #14,D0
00003152  4E4F                    3360              TRAP    #15
00003154                          3361              
00003154  4E75                    3362              RTS
00003156                          3363  
00003156                          3364  *---------------------------------------------------------------------------*
00003156                          3365  * DEST_MODE: decode and display destination mode (bit 8 - 6)
00003156                          3366  *---------------------------------------------------------------------------*           
00003156                          3367  DEST_MODE   
00003156                          3368              * clear registers to store temp data
00003156  4280                    3369              CLR.L   D0                      
00003158  4281                    3370              CLR.L   D1                      
0000315A  207C 00000000           3371              MOVEA.L #0, A0                  
00003160  227C 00000000           3372              MOVEA.L #0, A1                  
00003166  2205                    3373              MOVE.L  D5,D1
00003168  EC89                    3374              LSR.L   #6,D1
0000316A  0281 00000007           3375              ANDI.L  #$7,D1
00003170  0C01 0000               3376              CMPI.B  #0,D1   * Dn
00003174  6700 0082               3377              BEQ     D_MODE000
00003178  0C01 0002               3378              CMPI.B  #2,D1   * (An)
0000317C  6700 00C2               3379              BEQ     D_MODE010
00003180  0C01 0003               3380              CMPI.B  #3,D1   * (An)+
00003184  6700 011A               3381              BEQ     D_MODE011
00003188  0C01 0004               3382              CMPI.B  #4,D1   * -(An)
0000318C  6700 0132               3383              BEQ     D_MODE100
00003190  0C01 0007               3384              CMPI.B  #7,D1  * abs
00003194  6700 017C               3385              BEQ     D_MODE111 
00003198  4E75                    3386              RTS
0000319A                          3387  
0000319A                          3388  *---------------------------------------------------------------------------*
0000319A                          3389  * SRC_MODE: decode and display source mode (bit 5 - 3)
0000319A                          3390  *---------------------------------------------------------------------------*  
0000319A                          3391  SRC_MODE    
0000319A                          3392              * clear registers to store temp data
0000319A  4280                    3393              CLR.L   D0                      
0000319C  4281                    3394              CLR.L   D1                      
0000319E  207C 00000000           3395              MOVEA.L #0, A0                  
000031A4  227C 00000000           3396              MOVEA.L #0, A1                  
000031AA  2205                    3397              MOVE.L  D5,D1
000031AC  E489                    3398              LSR.L   #2,D1
000031AE  0281 0000000E           3399              ANDI.L  #$E,D1
000031B4                          3400              
000031B4  0C01 0000               3401              CMPI.B  #0,D1   * Dn
000031B8  6700 002A               3402              BEQ     MODE000
000031BC  0C01 0002               3403              CMPI.B  #2,D1   * An 
000031C0  6700 004A               3404              BEQ     MODE001
000031C4  0C01 0004               3405              CMPI.B  #4,D1   * (An)
000031C8  6700 0056               3406              BEQ     MODE010
000031CC  0C01 0006               3407              CMPI.B  #6,D1   * (An)+
000031D0  6700 008E               3408              BEQ     MODE011
000031D4  0C01 0008               3409              CMPI.B  #8,D1   * -(An)
000031D8  6700 00A6               3410              BEQ     MODE100
000031DC  0C01 000F               3411              CMPI.B  #15,D1  * abs/immediate
000031E0  6700 00FE               3412              BEQ     MODE111 
000031E4                          3413        
000031E4                          3414  *---------------------------------------------------------------------------*
000031E4                          3415  * MODE000: decode and display source mode Dn
000031E4                          3416  *---------------------------------------------------------------------------*           
000031E4                          3417  MODE000     *Dn
000031E4  43F9 00004716           3418              LEA     DISP_D,A1
000031EA  103C 000E               3419              MOVE.B  #14,D0
000031EE  4E4F                    3420              TRAP    #15
000031F0  4EB9 00003482           3421              JSR     SRC_REGISTER
000031F6  4E75                    3422              RTS
000031F8                          3423  
000031F8                          3424  *---------------------------------------------------------------------------*
000031F8                          3425  * D_MODE000: decode and display dest mode Dn
000031F8                          3426  *---------------------------------------------------------------------------*
000031F8                          3427  D_MODE000     *Dn
000031F8  43F9 00004716           3428              LEA     DISP_D,A1
000031FE  103C 000E               3429              MOVE.B  #14,D0
00003202  4E4F                    3430              TRAP    #15
00003204  4EB9 00003426           3431              JSR     DEST_REGISTER
0000320A  4E75                    3432              RTS
0000320C                          3433  
0000320C                          3434  *---------------------------------------------------------------------------*
0000320C                          3435  * MODE001: decode and display source mode An
0000320C                          3436  *---------------------------------------------------------------------------* 
0000320C                          3437  MODE001 *An
0000320C  43F9 0000471B           3438              LEA     DISP_A,A1
00003212  103C 000E               3439              MOVE.B  #14,D0
00003216  4E4F                    3440              TRAP    #15
00003218  4EB9 00003482           3441              JSR     SRC_REGISTER
0000321E                          3442          
0000321E  4E75                    3443              RTS
00003220                          3444  
00003220                          3445  *---------------------------------------------------------------------------*
00003220                          3446  * MODE010: decode and display source mode (An)
00003220                          3447  *---------------------------------------------------------------------------*    
00003220                          3448  MODE010 *(An)
00003220  43F9 00004727           3449              LEA     DISP_AOP,A1  *display (A
00003226  103C 000E               3450              MOVE.B  #14,D0
0000322A  4E4F                    3451              TRAP    #15
0000322C                          3452  
0000322C  4EB9 00003482           3453              JSR     SRC_REGISTER * display register
00003232                          3454  
00003232  43F9 00004725           3455              LEA     DISP_CP,A1   *display )
00003238  103C 000E               3456              MOVE.B  #14,D0
0000323C  4E4F                    3457              TRAP    #15
0000323E                          3458              
0000323E  4E75                    3459              RTS
00003240                          3460  
00003240                          3461  *---------------------------------------------------------------------------*
00003240                          3462  * D_MODE010: decode and display dest mode (An)
00003240                          3463  *---------------------------------------------------------------------------*
00003240                          3464  D_MODE010 *(An)
00003240  43F9 00004727           3465              LEA     DISP_AOP,A1  *display (A
00003246  103C 000E               3466              MOVE.B  #14,D0
0000324A  4E4F                    3467              TRAP    #15
0000324C                          3468     
0000324C  4EB9 00003426           3469              JSR     DEST_REGISTER * display register
00003252                          3470  
00003252  43F9 00004725           3471              LEA     DISP_CP,A1   *display )
00003258  103C 000E               3472              MOVE.B  #14,D0
0000325C  4E4F                    3473              TRAP    #15
0000325E                          3474              
0000325E  4E75                    3475              RTS
00003260                          3476  
00003260                          3477  *---------------------------------------------------------------------------*
00003260                          3478  * MODE011: decode and display source mode (An)+
00003260                          3479  *---------------------------------------------------------------------------*
00003260                          3480  MODE011 *(An)+
00003260  43F9 00004727           3481              LEA     DISP_AOP,A1      *display (A
00003266  103C 000E               3482              MOVE.B  #14,D0
0000326A  4E4F                    3483              TRAP    #15
0000326C                          3484              
0000326C  4EB9 00003482           3485              JSR     SRC_REGISTER    * display register
00003272                          3486  
00003272  43F9 00004734           3487              LEA     DISP_POST,A1    *display )+
00003278  103C 000E               3488              MOVE.B  #14,D0
0000327C  4E4F                    3489              TRAP    #15
0000327E                          3490              
0000327E  4E75                    3491              RTS
00003280                          3492              
00003280                          3493  *---------------------------------------------------------------------------*
00003280                          3494  * MODE100: decode and display source mode -(An)
00003280                          3495  *---------------------------------------------------------------------------*
00003280                          3496  MODE100 *-(An)
00003280  43F9 0000472D           3497              LEA     DISP_PRE,A1    *display -(A
00003286  103C 000E               3498              MOVE.B  #14,D0
0000328A  4E4F                    3499              TRAP    #15
0000328C                          3500  
0000328C  4EB9 00003482           3501              JSR     SRC_REGISTER    *display register
00003292                          3502  
00003292  43F9 00004725           3503              LEA     DISP_CP,A1   *display )
00003298  103C 000E               3504              MOVE.B  #14,D0
0000329C  4E4F                    3505              TRAP    #15
0000329E                          3506              
0000329E  4E75                    3507              RTS
000032A0                          3508  
000032A0                          3509  *---------------------------------------------------------------------------*
000032A0                          3510  * D_MODE011: decode and display dest mode (An)+
000032A0                          3511  *---------------------------------------------------------------------------*
000032A0                          3512  D_MODE011 *(An)+
000032A0  43F9 00004727           3513              LEA     DISP_AOP,A1      *display (A
000032A6  103C 000E               3514              MOVE.B  #14,D0
000032AA  4E4F                    3515              TRAP    #15
000032AC                          3516  
000032AC  4EB9 00003426           3517              JSR     DEST_REGISTER    * display register
000032B2                          3518  
000032B2  43F9 00004734           3519              LEA     DISP_POST,A1    *display )+
000032B8  103C 000E               3520              MOVE.B  #14,D0
000032BC  4E4F                    3521              TRAP    #15
000032BE                          3522              
000032BE  4E75                    3523              RTS
000032C0                          3524              
000032C0                          3525  *---------------------------------------------------------------------------*
000032C0                          3526  * D_MODE100: decode and display dest mode -(An)
000032C0                          3527  *---------------------------------------------------------------------------*            
000032C0                          3528  D_MODE100 *-(An)
000032C0  43F9 0000472D           3529              LEA     DISP_PRE,A1    *display -(A
000032C6  103C 000E               3530              MOVE.B  #14,D0
000032CA  4E4F                    3531              TRAP    #15
000032CC                          3532              
000032CC  4EB9 00003426           3533              JSR     DEST_REGISTER    *display register
000032D2                          3534  
000032D2  43F9 00004725           3535              LEA     DISP_CP,A1   *display )
000032D8  103C 000E               3536              MOVE.B  #14,D0
000032DC  4E4F                    3537              TRAP    #15
000032DE                          3538              
000032DE  4E75                    3539              RTS
000032E0                          3540  
000032E0                          3541  *---------------------------------------------------------------------------*
000032E0                          3542  * MODE111: decode and display source mode absolute/immediate
000032E0                          3543  *---------------------------------------------------------------------------*
000032E0                          3544  MODE111     * abs/immediate
000032E0                          3545              * clear registers to store temp data
000032E0  4280                    3546              CLR.L   D0                      
000032E2  4281                    3547              CLR.L   D1                      
000032E4  207C 00000000           3548              MOVEA.L #0, A0                  
000032EA  227C 00000000           3549              MOVEA.L #0, A1                  
000032F0  2205                    3550              MOVE.L  D5,D1
000032F2                          3551              
000032F2                          3552              * retrieve source register for MODE 111
000032F2  E389                    3553              LSL.L   #1,D1   * shift the bits to left by 1
000032F4  0281 0000000E           3554              ANDI.L  #$E,D1  * mask the first 4 bits 
000032FA  0C01 0000               3555              CMPI.B  #0, D1  * if it's 0000, absolute word address
000032FE  6700 003E               3556              BEQ     WORDMODE
00003302  0C01 0002               3557              CMPI.B  #2, D1  * if it's 0010, absolute long address
00003306  6700 0062               3558              BEQ     LONGMODE
0000330A  0C01 0008               3559              CMPI.B  #8, D1  * if it's 1000, immediate data
0000330E  6700 0086               3560              BEQ     IMMEDIATE
00003312                          3561       
00003312                          3562  *---------------------------------------------------------------------------*
00003312                          3563  * D_MODE111: decode and display dest mode absolute/immediate
00003312                          3564  *---------------------------------------------------------------------------*           
00003312                          3565  D_MODE111   * abs
00003312                          3566              * clear registers to store temp data
00003312  4280                    3567              CLR.L   D0                      
00003314  4281                    3568              CLR.L   D1                      
00003316  207C 00000000           3569              MOVEA.L #0, A0                  
0000331C  227C 00000000           3570              MOVEA.L #0, A1                  
00003322  2205                    3571              MOVE.L  D5,D1
00003324                          3572              
00003324                          3573              * retrieve dest register for MODE 111
00003324  EC89                    3574              LSR.L   #6,D1   * shift the bits to right by 6
00003326  E689                    3575              LSR.L   #3,D1   * shift the bits to right by extra 3
00003328  0201 0001               3576              ANDI.B  #1,D1   * mask the first 2 bits 
0000332C  0C01 0000               3577              CMPI.B  #0, D1  * if it's 000, absolute word address
00003330  6700 000C               3578              BEQ     WORDMODE
00003334  0C01 0001               3579              CMPI.B  #1, D1  * if it's 001, absolute long address
00003338  6700 0030               3580              BEQ     LONGMODE
0000333C                          3581              *JSR     OP_DATA *not sure..
0000333C  4E75                    3582              RTS
0000333E                          3583  
0000333E                          3584  
0000333E                          3585  *---------------------------------------------------------------------------*
0000333E                          3586  * WORDMODE: absolute word address
0000333E                          3587  *---------------------------------------------------------------------------*
0000333E  43F9 00004711           3588  WORDMODE    LEA     DISP_HEX,A1
00003344  103C 000E               3589              MOVE.B  #14,D0
00003348  4E4F                    3590              TRAP    #15
0000334A                          3591              
0000334A  4285                    3592              CLR.L   D5
0000334C  3A1D                    3593              MOVE.W  (A5)+,D5
0000334E                          3594              
0000334E  43F9 000043EF           3595              LEA     TMPOUTPUT,A1
00003354  2205                    3596              MOVE.L  D5,D1
00003356  7404                    3597              MOVE.L  #4,D2       *move word size 4
00003358  4EB8 11C0               3598              JSR     HEX2ASCII
0000335C  43F9 000043EF           3599              LEA     TMPOUTPUT,A1
00003362  103C 000E               3600              MOVE.B  #14,D0
00003366  4E4F                    3601              TRAP    #15
00003368                          3602              
00003368  4E75                    3603              RTS
0000336A                          3604  
0000336A                          3605  *---------------------------------------------------------------------------*
0000336A                          3606  * LONGMODE: absolute long address
0000336A                          3607  *---------------------------------------------------------------------------*
0000336A  43F9 00004711           3608  LONGMODE    LEA     DISP_HEX,A1
00003370  103C 000E               3609              MOVE.B  #14,D0
00003374  4E4F                    3610              TRAP    #15
00003376                          3611              
00003376  4285                    3612              CLR.L   D5
00003378  2A1D                    3613              MOVE.L  (A5)+,D5
0000337A                          3614              
0000337A  43F9 000043EF           3615              LEA     TMPOUTPUT,A1
00003380  2205                    3616              MOVE.L  D5,D1
00003382  7408                    3617              MOVE.L  #8,D2           *move longword size 8
00003384  4EB8 11C0               3618              JSR     HEX2ASCII
00003388  43F9 000043EF           3619              LEA     TMPOUTPUT,A1
0000338E  103C 000E               3620              MOVE.B  #14,D0
00003392  4E4F                    3621              TRAP    #15
00003394                          3622              
00003394  4E75                    3623              RTS
00003396                          3624  
00003396                          3625  
00003396                          3626  *---------------------------------------------------------------------------*
00003396                          3627  * IMMEDIATE: immediate address
00003396                          3628  *---------------------------------------------------------------------------*
00003396  43F9 00004737           3629  IMMEDIATE   LEA     DISP_LB,A1
0000339C  103C 000E               3630              MOVE.B  #14,D0
000033A0  4E4F                    3631              TRAP    #15
000033A2  43F9 00004711           3632              LEA     DISP_HEX,A1
000033A8  103C 000E               3633              MOVE.B  #14,D0
000033AC  4E4F                    3634              TRAP    #15
000033AE                          3635              
000033AE                          3636              * check for size
000033AE  0C04 0000               3637              CMPI.B  #0,D4
000033B2  6700 0012               3638              BEQ     IMMD_B
000033B6  0C04 0001               3639              CMPI.B  #1,D4
000033BA  6700 002A               3640              BEQ     IMMD_W
000033BE  0C04 0002               3641              CMPI.B  #2,D4
000033C2  6700 0042               3642              BEQ     IMMD_L
000033C6                          3643  
000033C6                          3644  IMMD_B
000033C6  4285                    3645              CLR.L   D5
000033C8  3A1D                    3646              MOVE.W  (A5)+,D5
000033CA                          3647              
000033CA  43F9 000043EF           3648              LEA     TMPOUTPUT,A1
000033D0  2205                    3649              MOVE.L  D5,D1
000033D2  7402                    3650              MOVE.L  #2,D2
000033D4  4EB8 11C0               3651              JSR     HEX2ASCII
000033D8  43F9 000043EF           3652              LEA     TMPOUTPUT,A1
000033DE  103C 000E               3653              MOVE.B  #14,D0
000033E2  4E4F                    3654              TRAP    #15
000033E4  4E75                    3655              RTS
000033E6                          3656              
000033E6                          3657  IMMD_W
000033E6  4285                    3658              CLR.L   D5
000033E8  3A1D                    3659              MOVE.W  (A5)+,D5
000033EA                          3660              
000033EA  43F9 000043EF           3661              LEA     TMPOUTPUT,A1
000033F0  2205                    3662              MOVE.L  D5,D1
000033F2  7404                    3663              MOVE.L  #4,D2
000033F4  4EB8 11C0               3664              JSR     HEX2ASCII
000033F8  43F9 000043EF           3665              LEA     TMPOUTPUT,A1
000033FE  103C 000E               3666              MOVE.B  #14,D0
00003402  4E4F                    3667              TRAP    #15
00003404  4E75                    3668              RTS
00003406                          3669              
00003406                          3670  
00003406                          3671  IMMD_L
00003406  4285                    3672              CLR.L   D5
00003408  3A1D                    3673              MOVE.W  (A5)+,D5
0000340A                          3674              
0000340A  43F9 000043EF           3675              LEA     TMPOUTPUT,A1
00003410  2205                    3676              MOVE.L  D5,D1
00003412  7408                    3677              MOVE.L  #8,D2
00003414  4EB8 11C0               3678              JSR     HEX2ASCII
00003418  43F9 000043EF           3679              LEA     TMPOUTPUT,A1
0000341E  103C 000E               3680              MOVE.B  #14,D0
00003422  4E4F                    3681              TRAP    #15
00003424  4E75                    3682              RTS
00003426                          3683  
00003426                          3684  
00003426                          3685  *---------------------------------------------------------------------------*
00003426                          3686  * DEST_REGISTER: decode and display destination register (bit 11 - 9)
00003426                          3687  *---------------------------------------------------------------------------*
00003426                          3688  DEST_REGISTER
00003426                          3689              * clear registers to store temp data
00003426  4280                    3690              CLR.L   D0                      
00003428  4281                    3691              CLR.L   D1                      
0000342A  207C 00000000           3692              MOVEA.L #0, A0                  
00003430  227C 00000000           3693              MOVEA.L #0, A1 
00003436                          3694              
00003436  2205                    3695              MOVE.L  D5,D1
00003438  EC89                    3696              LSR.L   #6,D1
0000343A  E689                    3697              LSR.L   #3,D1
0000343C  0281 00000007           3698              ANDI.L  #7,D1
00003442                          3699              
00003442  0C01 0000               3700              CMPI.B  #0,D1
00003446  6700 0092               3701              BEQ     REG_0
0000344A  0C01 0001               3702              CMPI.B  #1,D1
0000344E  6700 0098               3703              BEQ     REG_1
00003452  0C01 0002               3704              CMPI.B  #2,D1
00003456  6700 009E               3705              BEQ     REG_2
0000345A  0C01 0003               3706              CMPI.B  #3,D1
0000345E  6700 00A4               3707              BEQ     REG_3
00003462  0C01 0004               3708              CMPI.B  #4,D1
00003466  6700 00AA               3709              BEQ     REG_4
0000346A  0C01 0005               3710              CMPI.B  #5,D1
0000346E  6700 00B0               3711              BEQ     REG_5
00003472  0C01 0006               3712              CMPI.B  #6,D1
00003476  6700 00B6               3713              BEQ     REG_6
0000347A  0C01 0007               3714              CMPI.B  #7,D1
0000347E  6700 00BC               3715              BEQ     REG_7
00003482                          3716  
00003482                          3717  *---------------------------------------------------------------------------*
00003482                          3718  * SRC_REGISTER: decode and display source register (bit 2 - 0)
00003482                          3719  *---------------------------------------------------------------------------*           
00003482                          3720  SRC_REGISTER 
00003482                          3721              * clear registers to store temp data
00003482  4280                    3722              CLR.L   D0                      
00003484  4281                    3723              CLR.L   D1                      
00003486  207C 00000000           3724              MOVEA.L #0, A0                  
0000348C  227C 00000000           3725              MOVEA.L #0, A1                  
00003492                          3726              
00003492  2205                    3727              MOVE.L  D5,D1   * temp store the processing data
00003494  0281 00000007           3728              ANDI.L  #7,D1   * mask the first 4 bits with 0111
0000349A                          3729              
0000349A  0C01 0000               3730              CMPI.B  #0,D1
0000349E  6700 003A               3731              BEQ     REG_0
000034A2  0C01 0001               3732              CMPI.B  #1,D1
000034A6  6700 0040               3733              BEQ     REG_1
000034AA  0C01 0002               3734              CMPI.B  #2,D1
000034AE  6700 0046               3735              BEQ     REG_2
000034B2  0C01 0003               3736              CMPI.B  #3,D1
000034B6  6700 004C               3737              BEQ     REG_3
000034BA  0C01 0004               3738              CMPI.B  #4,D1
000034BE  6700 0052               3739              BEQ     REG_4
000034C2  0C01 0005               3740              CMPI.B  #5,D1
000034C6  6700 0058               3741              BEQ     REG_5
000034CA  0C01 0006               3742              CMPI.B  #6,D1
000034CE  6700 005E               3743              BEQ     REG_6
000034D2  0C01 0007               3744              CMPI.B  #7,D1
000034D6  6700 0064               3745              BEQ     REG_7
000034DA                          3746  
000034DA                          3747  *---------------------------------------------------------------------------*
000034DA                          3748  * REG_0 ~ REG_7: display register 0 to 7
000034DA                          3749  *---------------------------------------------------------------------------*
000034DA  43F9 0000473C           3750  REG_0       LEA     DISP_0,A1
000034E0  103C 000E               3751              MOVE.B  #14,D0
000034E4  4E4F                    3752              TRAP    #15
000034E6  4E75                    3753              RTS
000034E8                          3754              
000034E8  43F9 0000473E           3755  REG_1       LEA     DISP_1,A1
000034EE  103C 000E               3756              MOVE.B  #14,D0
000034F2  4E4F                    3757              TRAP    #15
000034F4  4E75                    3758              RTS
000034F6                          3759              
000034F6                          3760  
000034F6  43F9 00004740           3761  REG_2       LEA     DISP_2,A1
000034FC  103C 000E               3762              MOVE.B  #14,D0
00003500  4E4F                    3763              TRAP    #15
00003502  4E75                    3764              RTS
00003504                          3765            
00003504  43F9 00004742           3766  REG_3       LEA     DISP_3,A1
0000350A  103C 000E               3767              MOVE.B  #14,D0
0000350E  4E4F                    3768              TRAP    #15
00003510  4E75                    3769              RTS
00003512                          3770              
00003512  43F9 00004744           3771  REG_4       LEA     DISP_4,A1
00003518  103C 000E               3772              MOVE.B  #14,D0
0000351C  4E4F                    3773              TRAP    #15
0000351E  4E75                    3774              RTS
00003520                          3775              
00003520  43F9 00004746           3776  REG_5       LEA     DISP_5,A1
00003526  103C 000E               3777              MOVE.B  #14,D0
0000352A  4E4F                    3778              TRAP    #15
0000352C  4E75                    3779              RTS
0000352E                          3780              
0000352E  43F9 00004748           3781  REG_6       LEA     DISP_6,A1
00003534  103C 000E               3782              MOVE.B  #14,D0
00003538  4E4F                    3783              TRAP    #15
0000353A  4E75                    3784              RTS
0000353C                          3785              
0000353C  43F9 0000474A           3786  REG_7       LEA     DISP_7,A1
00003542  103C 000E               3787              MOVE.B  #14,D0
00003546  4E4F                    3788              TRAP    #15
00003548  4E75                    3789              RTS
0000354A                          3790              
0000354A                          3791  *---------------------------------------------------------------------------*
0000354A                          3792  * REPEAT : Ask user whether they wish to run the program again
0000354A                          3793  *---------------------------------------------------------------------------*           
0000354A  4246                    3794  REPEAT      CLR.W   D6                      * Reset D6 (Loop Count)
0000354C  43F9 00004215           3795              LEA     REPEATMSG,A1
00003552  103C 000E               3796              MOVE.B  #14,D0
00003556  4E4F                    3797              TRAP    #15
00003558                          3798              
00003558  43F9 0000439F           3799              LEA     TMPINPUT,A1             * allocate space to temp store user input
0000355E  103C 0002               3800              MOVE.B  #2,D0
00003562  4E4F                    3801              TRAP    #15
00003564                          3802  
00003564  0C01 0001               3803              CMPI.B  #1,D1                   * check for length of user input
00003568  66E0                    3804              BNE     REPEAT                  * return to the beginning of the function if unequal
0000356A                          3805              
0000356A  0C11 0059               3806              CMPI.B  #$59,(A1)               * compare the input with Y    
0000356E  6700 DA9A               3807              BEQ     PROGLP                  * repeat the program
00003572                          3808              
00003572  0C11 0079               3809              CMPI.B  #$79,(A1)               * compare the input with y    
00003576  6700 DA92               3810              BEQ     PROGLP                  * repeat the program
0000357A                          3811              
0000357A  0C11 004E               3812              CMPI.B  #$4E,(A1)               * compare the input with N    
0000357E  6700 0928               3813              BEQ     TERMINATE               * finish program
00003582                          3814              
00003582  0C11 006E               3815              CMPI.B  #$6E,(A1)               * compare the input with n    
00003586  6700 0920               3816              BEQ     TERMINATE               * finish program
0000358A                          3817              
0000358A  60BE                    3818              BRA     REPEAT                  * invalid input/repeat the function
0000358C                          3819  
0000358C                          3820  *---------------------------------------------------------------------------*
0000358C                          3821  * EA DECODING INTERFACE
0000358C                          3822  * [A0] - RESERVED FOR USE
0000358C                          3823  * [D2] - RESERVED FOR USE
0000358C                          3824  * RETURNS - ERROR FLAG IF FAILED TO PUSH SRC EA INTO STACK
0000358C                          3825  *---------------------------------------------------------------------------*
0000358C                          3826  GET_EA_EA_SRC
0000358C                          3827      *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
0000358C                          3828      
0000358C                          3829      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
0000358C  2405                    3830      MOVE.L  D5,D2                           * CLEAN COPY TO D2
0000358E  E68A                    3831      LSR.L   #3,D2                           * [D2] Temporarily used D2 for shifting bits            *TODO: DYNAMIC FOR ANY LOCATION OF SOURCE
00003590  23C2 00004762           3832      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
00003596  7407                    3833      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
00003598  C5B9 00004762           3834      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
0000359E                          3835                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
0000359E                          3836      
0000359E                          3837      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
0000359E                          3838      *DESTINATION REGISTER FORMAT STANDARD         *
0000359E                          3839      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
0000359E                          3840      *WHEN BIT = 0(VALID ADDRESS MODE)             *
0000359E                          3841      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
0000359E                          3842      *0 - Dn                                       *
0000359E                          3843      *1 - An                                       *
0000359E                          3844      *2 - (An)                                     *
0000359E                          3845      *3 - (An)+                                    *
0000359E                          3846      *4 - -(An)                                    *
0000359E                          3847      *5 - (XXX).W                                  *
0000359E                          3848      *6 - (XXX).L                                  *
0000359E                          3849      *7 - #<data>                                  *
0000359E                          3850      ***********************************************
0000359E                          3851      
0000359E                          3852      *** Check if source ...  <ea> = Dn
0000359E                          3853  CHECK0    
0000359E  41F9 00004752           3854            LEA     TEMP_REGISTER_FORMAT,A0
000035A4  1439 00004751           3855            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000035AA  1082                    3856            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000035AC  0239 0001 00004752      3857            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
000035B4  0C39 0001 00004752      3858            CMPI.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
000035BC  6700 006A               3859            BEQ     CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
000035C0  0CB9 00000000 00004762  3860            CMPI.L     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn) - COMPARE MODES TO SEE IF IT IS THIS MODE
000035CA  6600 005C               3861            BNE     CHECK1
000035CE                          3862            
000035CE                          3863            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000035CE  163C 0020               3864            MOVE.B    #' ',D3
000035D2  6100 0856               3865            BSR       PUSH_STACK
000035D6  163C 0044               3866            MOVE.B    #'D',D3
000035DA  6100 084E               3867            BSR       PUSH_STACK
000035DE                          3868  
000035DE                          3869            *FIND REGISTER NUMBER END LOCATION*  
000035DE  13F9 00004754 0000475A  3870            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
000035E8  0239 000F 0000475A      3871            AND.B   #$0F,VAR_BYTE_END
000035F0                          3872            
000035F0                          3873            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000035F0  23C5 0000475E           3874            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000035F6  1439 0000475A           3875            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000035FC                          3876            
000035FC                          3877            *INTITIALIZE FOR BIT SHIFTING
000035FC  41F9 0000475E           3878            LEA     VAR_TEMP_CLEANCOPY,A0
00003602  2639 0000475E           3879            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003608                          3880  LOOP_SHIFTING
00003608  0C02 0000               3881            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000360C  6700 0008               3882            BEQ     MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00003610  E24B                    3883            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003612  5302                    3884            SUB.B   #1,D2                     *DECREMENT COUNTER
00003614  60F2                    3885            BRA     LOOP_SHIFTING             *CONTINUE SHIFTING
00003616                          3886  MASKING_NEXT
00003616  C6BC 00000007           3887            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
0000361C  0603 0030               3888            ADD.B   #$30,D3                   *CONVERT TO CHAR
00003620  6100 0808               3889            BSR     PUSH_STACK                *PUSH TO STACK
00003624                          3890            
00003624  6000 0394               3891            BRA     GET_SRC_SUCCESS           *RETURN          
00003628                          3892            
00003628                          3893            
00003628                          3894            *** Check if source ...  <ea> = An
00003628  41F9 00004752           3895  CHECK1    LEA     TEMP_REGISTER_FORMAT,A0
0000362E  1439 00004751           3896            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003634  1082                    3897            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003636  0239 0002 00004752      3898            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
0000363E  0C39 0002 00004752      3899            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
00003646  6700 006A               3900            BEQ     CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
0000364A  0CB9 00000001 00004762  3901            CMPI.L  #1,VAR_LONG_ADDRESS_MODE_CHECK                      * An - COMPARE MODES TO SEE IF IT IS THIS MODE
00003654  6600 005C               3902            BNE     CHECK2
00003658                          3903            
00003658                          3904            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003658  163C 0020               3905            MOVE.B    #' ',D3
0000365C  6100 07CC               3906            BSR       PUSH_STACK
00003660  163C 0041               3907            MOVE.B    #'A',D3
00003664  6100 07C4               3908            BSR       PUSH_STACK
00003668                          3909  
00003668                          3910            
00003668                          3911            *FIND REGISTER NUMBER END LOCATION*  
00003668  13F9 00004754 0000475A  3912            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00003672  0239 000F 0000475A      3913            AND.B   #$0F,VAR_BYTE_END
0000367A                          3914            
0000367A                          3915            *GET INDEX OF THE END OF SRC REGISTER NUMBER
0000367A  23C5 0000475E           3916            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003680  1439 0000475A           3917            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
00003686                          3918            
00003686                          3919            *INTITIALIZE FOR BIT SHIFTING
00003686  41F9 0000475E           3920            LEA     VAR_TEMP_CLEANCOPY,A0
0000368C  2639 0000475E           3921            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003692                          3922  LOOP_SHIFTING1
00003692  0C02 0000               3923            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003696  6700 0008               3924            BEQ     MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
0000369A  E24B                    3925            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
0000369C  5302                    3926            SUB.B   #1,D2                     *DECREMENT COUNTER
0000369E  60F2                    3927            BRA     LOOP_SHIFTING1             *CONTINUE SHIFTING
000036A0                          3928  MASKING_NEXT1
000036A0  C6BC 00000007           3929            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000036A6  0603 0030               3930            ADD.B   #$30,D3                   *CONVERT TO CHAR
000036AA  6100 077E               3931            BSR     PUSH_STACK                *PUSH TO STACK
000036AE                          3932            
000036AE  6000 030A               3933            BRA     GET_SRC_SUCCESS                   *RETURN 
000036B2                          3934            
000036B2                          3935            
000036B2                          3936            
000036B2                          3937            
000036B2                          3938            *** Check if source ...  <ea> = (An)       
000036B2  41F9 00004752           3939  CHECK2    LEA     TEMP_REGISTER_FORMAT,A0
000036B8  1439 00004751           3940            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000036BE  1082                    3941            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000036C0  0239 0004 00004752      3942            ANDI.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
000036C8  0C39 0004 00004752      3943            CMPI.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
000036D0  6700 007A               3944            BEQ     CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
000036D4  0CB9 00000002 00004762  3945            CMPI.L   #2,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)  COMPARE MODES TO SEE IF IT IS THIS MODE                                                                *change: checkx++*
000036DE  6600 006C               3946            BNE     CHECK3
000036E2                          3947            
000036E2                          3948            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
000036E2  163C 0020               3949            MOVE.B    #' ',D3
000036E6  6100 0742               3950            BSR       PUSH_STACK
000036EA  163C 0028               3951            MOVE.B    #'(',D3
000036EE  6100 073A               3952            BSR       PUSH_STACK
000036F2  163C 0041               3953            MOVE.B    #'A',D3
000036F6  6100 0732               3954            BSR       PUSH_STACK
000036FA                          3955  
000036FA                          3956            
000036FA                          3957            *FIND REGISTER NUMBER END LOCATION*  
000036FA  13F9 00004754 0000475A  3958            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00003704  0239 000F 0000475A      3959            AND.B   #$0F,VAR_BYTE_END
0000370C                          3960            
0000370C                          3961            *GET INDEX OF THE END OF SRC REGISTER NUMBER
0000370C  23C5 0000475E           3962            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003712  1439 0000475A           3963            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003718                          3964            
00003718                          3965            *INTITIALIZE FOR BIT SHIFTING
00003718  41F9 0000475E           3966            LEA     VAR_TEMP_CLEANCOPY,A0
0000371E  2639 0000475E           3967            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003724                          3968  LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
00003724  0C02 0000               3969            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003728  6700 0008               3970            BEQ     MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
0000372C  E24B                    3971            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
0000372E  5302                    3972            SUB.B   #1,D2                     *DECREMENT COUNTER
00003730  60F2                    3973            BRA     LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
00003732                          3974  MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
00003732  0283 00000007           3975            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003738  0603 0030               3976            ADDI.B   #$30,D3                   *CONVERT TO CHAR
0000373C  6100 06EC               3977            BSR     PUSH_STACK                *PUSH TO STACK
00003740                          3978            
00003740  163C 0029               3979            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003744  6100 06E4               3980            BSR       PUSH_STACK
00003748                          3981            
00003748  6000 0270               3982            BRA     GET_SRC_SUCCESS                   *RETURN 
0000374C                          3983  
0000374C                          3984            
0000374C                          3985            
0000374C                          3986                      
0000374C                          3987  *** Check if source ...  <ea> = (An)+       
0000374C  41F9 00004752           3988  CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
00003752  1439 00004751           3989            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003758  1082                    3990            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000375A  0239 0008 00004752      3991            ANDI.B  #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
00003762  0C39 0008 00004752      3992            CMPI.B  #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
0000376A  6700 0082               3993            BEQ     CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
0000376E  0CB9 00000003 00004762  3994            CMPI.L  #3,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)+ - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00003778  6600 0074               3995            BNE     CHECK4
0000377C                          3996            
0000377C                          3997            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
0000377C  163C 0020               3998            MOVE.B    #' ',D3
00003780  6100 06A8               3999            BSR       PUSH_STACK
00003784  163C 0028               4000            MOVE.B    #'(',D3
00003788  6100 06A0               4001            BSR       PUSH_STACK
0000378C  163C 0041               4002            MOVE.B    #'A',D3
00003790  6100 0698               4003            BSR       PUSH_STACK
00003794                          4004  
00003794                          4005            
00003794                          4006            *FIND REGISTER NUMBER END LOCATION*  
00003794  13F9 00004754 0000475A  4007            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
0000379E  0239 000F 0000475A      4008            ANDI.B   #$0F,VAR_BYTE_END
000037A6                          4009            
000037A6                          4010            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000037A6  23C5 0000475E           4011            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000037AC  1439 0000475A           4012            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000037B2                          4013            
000037B2                          4014            *INTITIALIZE FOR BIT SHIFTING
000037B2  41F9 0000475E           4015            LEA     VAR_TEMP_CLEANCOPY,A0
000037B8  2639 0000475E           4016            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000037BE                          4017            
000037BE                          4018  LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
000037BE  0C02 0000               4019            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000037C2  6700 0008               4020            BEQ     MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
000037C6  E24B                    4021            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000037C8  5302                    4022            SUBI.B   #1,D2                     *DECREMENT COUNTER
000037CA  60F2                    4023            BRA     LOOP_SHIFTING3            *CONTINUE SHIFTING 
000037CC                          4024                                               *change: NAME OF LABEL*
000037CC                          4025  MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
000037CC  0283 00000007           4026            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000037D2  0603 0030               4027            ADDI.B   #$30,D3                   *CONVERT TO CHAR
000037D6  6100 0652               4028            BSR     PUSH_STACK                *PUSH TO STACK
000037DA                          4029            
000037DA  163C 0029               4030            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
000037DE  6100 064A               4031            BSR       PUSH_STACK
000037E2  163C 002B               4032            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
000037E6  6100 0642               4033            BSR       PUSH_STACK
000037EA                          4034            
000037EA  6000 01CE               4035            BRA       GET_SRC_SUCCESS                   *RETURN 
000037EE                          4036  
000037EE                          4037            
000037EE                          4038            
000037EE                          4039                      
000037EE                          4040            *** Check if source ...  <ea> = -(An)       
000037EE  41F9 00004752           4041  CHECK4    LEA     TEMP_REGISTER_FORMAT,A0
000037F4  1439 00004751           4042            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000037FA  1082                    4043            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000037FC  0239 0010 00004752      4044            ANDI.B  #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
00003804  0C39 0010 00004752      4045            CMPI.B  #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
0000380C  6700 0082               4046            BEQ     CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00003810  0CB9 00000004 00004762  4047            CMPI.L  #4,VAR_LONG_ADDRESS_MODE_CHECK                      * -(An) - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
0000381A  6600 0074               4048            BNE     CHECK7
0000381E                          4049            
0000381E                          4050            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
0000381E  163C 0020               4051            MOVE.B    #' ',D3
00003822  6100 0606               4052            BSR       PUSH_STACK
00003826  163C 002D               4053            MOVE.B    #'-',D3
0000382A  6100 05FE               4054            BSR       PUSH_STACK
0000382E  163C 0028               4055            MOVE.B    #'(',D3
00003832  6100 05F6               4056            BSR       PUSH_STACK
00003836  163C 0041               4057            MOVE.B    #'A',D3
0000383A  6100 05EE               4058            BSR       PUSH_STACK
0000383E                          4059  
0000383E                          4060            
0000383E                          4061            *FIND REGISTER NUMBER END LOCATION*  
0000383E  13F9 00004754 0000475A  4062            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00003848  0239 000F 0000475A      4063            AND.B   #$0F,VAR_BYTE_END
00003850                          4064            
00003850                          4065            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003850  23C5 0000475E           4066            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003856  1439 0000475A           4067            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
0000385C                          4068            
0000385C                          4069            *INTITIALIZE FOR BIT SHIFTING
0000385C  41F9 0000475E           4070            LEA     VAR_TEMP_CLEANCOPY,A0
00003862  2639 0000475E           4071            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003868                          4072            
00003868                          4073  LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
00003868  0C02 0000               4074            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000386C  6700 0008               4075            BEQ     MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00003870  E24B                    4076            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003872  5302                    4077            SUBI.B   #1,D2                     *DECREMENT COUNTER
00003874  60F2                    4078            BRA     LOOP_SHIFTING4            *CONTINUE SHIFTING 
00003876                          4079                                               *change: NAME OF LABEL*
00003876                          4080  MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
00003876  0283 00000007           4081            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
0000387C  0603 0030               4082            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00003880  6100 05A8               4083            BSR     PUSH_STACK                *PUSH TO STACK
00003884                          4084            
00003884  163C 0029               4085            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003888  6100 05A0               4086            BSR       PUSH_STACK
0000388C                          4087            
0000388C  6000 012C               4088            BRA     GET_SRC_SUCCESS                   *RETURN
00003890                          4089            
00003890                          4090                      
00003890                          4091            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
00003890  0CB9 00000007 00004762  4092  CHECK7    CMPI.L  #7,VAR_LONG_ADDRESS_MODE_CHECK                      *IF (MODE != 111)
0000389A  6600 011A               4093            BNE     GET_SRC_FAILED                                      *THAN BRANCH TO UNCESSFULL SRC MODE READ
0000389E                          4094                   
0000389E                          4095            *NEXT: (MODE == 111) 
0000389E                          4096            *NOW: CHECK FOR SRC REGISTER 
0000389E                          4097                  *(000 = (xxx).W)
0000389E                          4098                  *(001 = (xxx).L)
0000389E                          4099                  *(010 = #<data>)
0000389E                          4100                  
0000389E                          4101            *FIND REGISTER NUMBER END LOCATION*  
0000389E  13F9 00004754 0000475A  4102            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
000038A8  0239 000F 0000475A      4103            AND.B   #$0F,VAR_BYTE_END
000038B0                          4104            
000038B0                          4105            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000038B0  23C5 0000475E           4106            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000038B6  1439 0000475A           4107            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000038BC                          4108            
000038BC                          4109            *INTITIALIZE FOR BIT SHIFTING
000038BC  41F9 0000475E           4110            LEA     VAR_TEMP_CLEANCOPY,A0
000038C2  2C39 0000475E           4111            MOVE.L  VAR_TEMP_CLEANCOPY,D6
000038C8                          4112  SRC_LOOP_SHIFTING
000038C8  0C02 0000               4113            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000038CC  6700 0008               4114            BEQ     SRC_MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
000038D0  E24E                    4115            LSR     #1,D6                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000038D2  5302                    4116            SUB.B   #1,D2                     *DECREMENT COUNTER
000038D4  60F2                    4117            BRA     SRC_LOOP_SHIFTING             *CONTINUE SHIFTING
000038D6                          4118  SRC_MASKING_NEXT
000038D6  CCBC 00000007           4119            AND.L   #7,D6                     *MASK, ONLY NEED 0-2 BIT INDEXES 
000038DC                          4120           *D3 - REGISTER NUMBER NEEDED TO CHECK WHICH W/L/#<DATA>*
000038DC                          4121           
000038DC                          4122  CHECK_WORD  
000038DC  41F9 00004752           4123            LEA     TEMP_REGISTER_FORMAT,A0
000038E2  1439 00004751           4124            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000038E8  1082                    4125            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000038EA  0239 0020 00004752      4126            ANDI.B  #$20,TEMP_REGISTER_FORMAT                           * MASKS 0010 0000                                                     *change <SRC>*
000038F2  0C39 0020 00004752      4127            CMPI.B  #$20,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0010 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
000038FA  6700 0026               4128            BEQ     CHECK_LONG                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
000038FE  0C06 0000               4129            CMPI.B  #0,D6                          
00003902  6600 001E               4130            BNE     CHECK_LONG 
00003906                          4131            
00003906                          4132            *IT IS A WORD AT THIS POINT*
00003906                          4133            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003906  163C 0020               4134            MOVE.B    #' ',D3
0000390A  6100 051E               4135            BSR       PUSH_STACK
0000390E  163C 0024               4136            MOVE.B    #'$',D3
00003912  6100 0516               4137            BSR       PUSH_STACK
00003916  321D                    4138            MOVE.W    (A5)+,D1
00003918  7404                    4139            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
0000391A  6100 D8E6               4140            BSR       HEX2ASCII2STACK
0000391E  6000 009A               4141            BRA     GET_SRC_SUCCESS
00003922                          4142  
00003922                          4143  CHECK_LONG
00003922  41F9 00004752           4144            LEA     TEMP_REGISTER_FORMAT,A0
00003928  1439 00004751           4145            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000392E  1082                    4146            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003930  0239 0040 00004752      4147            ANDI.B  #$40,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00003938  0C39 0040 00004752      4148            CMPI.B  #$40,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003940  6700 002E               4149            BEQ     CHECK_IMMEDIATE                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00003944  0C06 0001               4150            CMPI.B  #1,D6                          
00003948  6600 0026               4151            BNE     CHECK_IMMEDIATE  
0000394C                          4152  
0000394C                          4153            *IT IS A WORD AT THIS POINT*
0000394C                          4154            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
0000394C  163C 0020               4155            MOVE.B    #' ',D3
00003950  6100 04D8               4156            BSR       PUSH_STACK
00003954  163C 0024               4157            MOVE.B    #'$',D3
00003958  6100 04D0               4158            BSR       PUSH_STACK
0000395C  321D                    4159            MOVE.W    (A5)+,D1
0000395E  7404                    4160            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003960  6100 D8A0               4161            BSR       HEX2ASCII2STACK
00003964  321D                    4162            MOVE.W    (A5)+,D1
00003966  7404                    4163            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003968  6100 D898               4164            BSR       HEX2ASCII2STACK
0000396C  6000 004C               4165            BRA     GET_SRC_SUCCESS
00003970                          4166            
00003970                          4167  CHECK_IMMEDIATE
00003970  41F9 00004752           4168            LEA     TEMP_REGISTER_FORMAT,A0
00003976  1439 00004751           4169            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000397C  1082                    4170            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000397E  0239 0080 00004752      4171            ANDI.B  #$80,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00003986  0C39 0080 00004752      4172            CMPI.B  #$80,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
0000398E  6700 0026               4173            BEQ     GET_SRC_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00003992  0C06 0004               4174            CMPI.B  #4,D6                          
00003996  6600 001E               4175            BNE     GET_SRC_FAILED 
0000399A                          4176  
0000399A                          4177            *IT IS A WORD AT THIS POINT*
0000399A                          4178            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
0000399A  163C 0020               4179            MOVE.B    #' ',D3
0000399E  6100 048A               4180            BSR       PUSH_STACK
000039A2  163C 0023               4181            MOVE.B    #'#',D3
000039A6  6100 0482               4182            BSR       PUSH_STACK
000039AA  321D                    4183            MOVE.W    (A5)+,D1
000039AC  7404                    4184            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
000039AE  6100 D852               4185            BSR       HEX2ASCII2STACK
000039B2  6000 0006               4186            BRA     GET_SRC_SUCCESS
000039B6                          4187            
000039B6                          4188  GET_SRC_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
000039B6  7801                    4189            MOVE.L #1,D4
000039B8  4E75                    4190            RTS
000039BA                          4191  GET_SRC_SUCCESS 
000039BA  4E75                    4192            RTS
000039BC                          4193                                 
000039BC                          4194      
000039BC                          4195  
000039BC                          4196  
000039BC                          4197  
000039BC                          4198  
000039BC                          4199  
000039BC                          4200  
000039BC                          4201  GET_EA_EA_DEST
000039BC                          4202  *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
000039BC                          4203      
000039BC                          4204      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
000039BC  2405                    4205      MOVE.L  D5,D2                           * CLEAN COPY TO D2
000039BE  EC8A                    4206      LSR.L   #6,D2                           * [D2] Temporarily used D2 for shifting bits                *TODO: DYNAMIC MODE LOCATION
000039C0  23C2 00004762           4207      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
000039C6  7407                    4208      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
000039C8  C5B9 00004762           4209      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
000039CE                          4210                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
000039CE                          4211      
000039CE                          4212      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
000039CE                          4213      *DESTINATION REGISTER FORMAT STANDARD         *
000039CE                          4214      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
000039CE                          4215      *WHEN BIT = 0(VALID ADDRESS MODE)             *
000039CE                          4216      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
000039CE                          4217      *0 - Dn                                       *
000039CE                          4218      *1 - An                                       *
000039CE                          4219      *2 - (An)                                     *
000039CE                          4220      *3 - (An)+                                    *
000039CE                          4221      *4 - -(An)                                    *
000039CE                          4222      *5 - (XXX).W                                  *
000039CE                          4223      *6 - (XXX).L                                  *
000039CE                          4224      *7 - #<data>                                  *
000039CE                          4225      ***********************************************
000039CE                          4226      
000039CE                          4227      *** Check if source ...  <ea> = Dn
000039CE                          4228  DEST_CHECK0    
000039CE  41F9 00004752           4229            LEA     TEMP_REGISTER_FORMAT,A0
000039D4  1439 00004750           4230            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000039DA  1082                    4231            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000039DC  0239 0001 00004752      4232            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
000039E4  0C39 0001 00004752      4233            CMPI.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
000039EC  6700 006A               4234            BEQ     DEST_CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
000039F0  0CB9 00000000 00004762  4235            CMPI.L     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn) - COMPARE MODES TO SEE IF IT IS THIS MODE
000039FA  6600 005C               4236            BNE     DEST_CHECK1
000039FE                          4237            
000039FE                          4238            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000039FE  163C 0020               4239            MOVE.B    #' ',D3
00003A02  6100 0426               4240            BSR       PUSH_STACK
00003A06  163C 0044               4241            MOVE.B    #'D',D3
00003A0A  6100 041E               4242            BSR       PUSH_STACK
00003A0E                          4243  
00003A0E                          4244            *FIND REGISTER NUMBER END LOCATION*  
00003A0E  13F9 00004753 0000475A  4245            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00003A18  0239 000F 0000475A      4246            AND.B   #$0F,VAR_BYTE_END
00003A20                          4247            
00003A20                          4248            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003A20  23C5 0000475E           4249            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003A26  1439 0000475A           4250            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003A2C                          4251            
00003A2C                          4252            *INTITIALIZE FOR BIT SHIFTING
00003A2C  41F9 0000475E           4253            LEA     VAR_TEMP_CLEANCOPY,A0
00003A32  2639 0000475E           4254            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003A38                          4255  DEST_LOOP_SHIFTING
00003A38  0C02 0000               4256            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003A3C  6700 0008               4257            BEQ     DEST_MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00003A40  E24B                    4258            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003A42  5302                    4259            SUB.B   #1,D2                     *DECREMENT COUNTER
00003A44  60F2                    4260            BRA     DEST_LOOP_SHIFTING             *CONTINUE SHIFTING
00003A46                          4261  DEST_MASKING_NEXT
00003A46  C6BC 00000007           4262            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003A4C  0603 0030               4263            ADD.B   #$30,D3                   *CONVERT TO CHAR
00003A50  6100 03D8               4264            BSR     PUSH_STACK                *PUSH TO STACK
00003A54                          4265            
00003A54  6000 0394               4266            BRA     GET_DST_SUCCESS           *RETURN          
00003A58                          4267            
00003A58                          4268            
00003A58                          4269            *** Check if source ...  <ea> = An
00003A58                          4270  DEST_CHECK1    
00003A58  41F9 00004752           4271            LEA     TEMP_REGISTER_FORMAT,A0
00003A5E  1439 00004750           4272            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003A64  1082                    4273            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003A66  0239 0002 00004752      4274            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
00003A6E  0C39 0002 00004752      4275            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
00003A76  6700 006A               4276            BEQ     DEST_CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00003A7A  0CB9 00000001 00004762  4277            CMPI.L  #1,VAR_LONG_ADDRESS_MODE_CHECK                      * An - COMPARE MODES TO SEE IF IT IS THIS MODE
00003A84  6600 005C               4278            BNE     DEST_CHECK2
00003A88                          4279            
00003A88                          4280            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003A88  163C 0020               4281            MOVE.B    #' ',D3
00003A8C  6100 039C               4282            BSR       PUSH_STACK
00003A90  163C 0041               4283            MOVE.B    #'A',D3
00003A94  6100 0394               4284            BSR       PUSH_STACK
00003A98                          4285  
00003A98                          4286            
00003A98                          4287            *FIND REGISTER NUMBER END LOCATION*  
00003A98  13F9 00004753 0000475A  4288            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00003AA2  0239 000F 0000475A      4289            AND.B   #$0F,VAR_BYTE_END
00003AAA                          4290            
00003AAA                          4291            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003AAA  23C5 0000475E           4292            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003AB0  1439 0000475A           4293            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
00003AB6                          4294            
00003AB6                          4295            *INTITIALIZE FOR BIT SHIFTING
00003AB6  41F9 0000475E           4296            LEA     VAR_TEMP_CLEANCOPY,A0
00003ABC  2639 0000475E           4297            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003AC2                          4298  DEST_LOOP_SHIFTING1
00003AC2  0C02 0000               4299            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003AC6  6700 0008               4300            BEQ     DEST_MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00003ACA  E24B                    4301            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003ACC  5302                    4302            SUB.B   #1,D2                     *DECREMENT COUNTER
00003ACE  60F2                    4303            BRA     DEST_LOOP_SHIFTING1             *CONTINUE SHIFTING
00003AD0                          4304  DEST_MASKING_NEXT1
00003AD0  C6BC 00000007           4305            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003AD6  0603 0030               4306            ADD.B   #$30,D3                   *CONVERT TO CHAR
00003ADA  6100 034E               4307            BSR     PUSH_STACK                *PUSH TO STACK
00003ADE                          4308            
00003ADE  6000 030A               4309            BRA     GET_DST_SUCCESS                   *RETURN 
00003AE2                          4310            
00003AE2                          4311            
00003AE2                          4312            
00003AE2                          4313            
00003AE2                          4314            *** Check if source ...  <ea> = (An)       
00003AE2                          4315  DEST_CHECK2    
00003AE2  41F9 00004752           4316            LEA     TEMP_REGISTER_FORMAT,A0
00003AE8  1439 00004750           4317            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003AEE  1082                    4318            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003AF0  0239 0004 00004752      4319            ANDI.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
00003AF8  0C39 0004 00004752      4320            CMPI.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
00003B00  6700 007A               4321            BEQ     DEST_CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00003B04  0CB9 00000002 00004762  4322            CMPI.L   #2,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)  COMPARE MODES TO SEE IF IT IS THIS MODE                                                                *change: checkx++*
00003B0E  6600 006C               4323            BNE     DEST_CHECK3
00003B12                          4324            
00003B12                          4325            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00003B12  163C 0020               4326            MOVE.B    #' ',D3
00003B16  6100 0312               4327            BSR       PUSH_STACK
00003B1A  163C 0028               4328            MOVE.B    #'(',D3
00003B1E  6100 030A               4329            BSR       PUSH_STACK
00003B22  163C 0041               4330            MOVE.B    #'A',D3
00003B26  6100 0302               4331            BSR       PUSH_STACK
00003B2A                          4332  
00003B2A                          4333            
00003B2A                          4334            *FIND REGISTER NUMBER END LOCATION*  
00003B2A  13F9 00004753 0000475A  4335            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00003B34  0239 000F 0000475A      4336            AND.B   #$0F,VAR_BYTE_END
00003B3C                          4337            
00003B3C                          4338            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003B3C  23C5 0000475E           4339            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003B42  1439 0000475A           4340            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003B48                          4341            
00003B48                          4342            *INTITIALIZE FOR BIT SHIFTING
00003B48  41F9 0000475E           4343            LEA     VAR_TEMP_CLEANCOPY,A0
00003B4E  2639 0000475E           4344            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003B54                          4345  DEST_LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
00003B54  0C02 0000               4346            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003B58  6700 0008               4347            BEQ     DEST_MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00003B5C  E24B                    4348            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003B5E  5302                    4349            SUB.B   #1,D2                     *DECREMENT COUNTER
00003B60  60F2                    4350            BRA     DEST_LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
00003B62                          4351  DEST_MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
00003B62  0283 00000007           4352            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003B68  0603 0030               4353            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00003B6C  6100 02BC               4354            BSR     PUSH_STACK                *PUSH TO STACK
00003B70                          4355            
00003B70  163C 0029               4356            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003B74  6100 02B4               4357            BSR       PUSH_STACK
00003B78                          4358            
00003B78  6000 0270               4359            BRA     GET_DST_SUCCESS                   *RETURN 
00003B7C                          4360  
00003B7C                          4361            
00003B7C                          4362            
00003B7C                          4363                      
00003B7C                          4364  *** Check if source ...  <ea> = (An)+       
00003B7C  41F9 00004752           4365  DEST_CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
00003B82  1439 00004750           4366            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003B88  1082                    4367            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003B8A  0239 0008 00004752      4368            ANDI.B  #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
00003B92  0C39 0008 00004752      4369            CMPI.B  #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
00003B9A  6700 0082               4370            BEQ     DEST_CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00003B9E  0CB9 00000003 00004762  4371            CMPI.L  #3,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)+ - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00003BA8  6600 0074               4372            BNE     DEST_CHECK4
00003BAC                          4373            
00003BAC                          4374            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00003BAC  163C 0020               4375            MOVE.B    #' ',D3
00003BB0  6100 0278               4376            BSR       PUSH_STACK
00003BB4  163C 0028               4377            MOVE.B    #'(',D3
00003BB8  6100 0270               4378            BSR       PUSH_STACK
00003BBC  163C 0041               4379            MOVE.B    #'A',D3
00003BC0  6100 0268               4380            BSR       PUSH_STACK
00003BC4                          4381  
00003BC4                          4382            
00003BC4                          4383            *FIND REGISTER NUMBER END LOCATION*  
00003BC4  13F9 00004753 0000475A  4384            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00003BCE  0239 000F 0000475A      4385            ANDI.B   #$0F,VAR_BYTE_END
00003BD6                          4386            
00003BD6                          4387            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003BD6  23C5 0000475E           4388            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003BDC  1439 0000475A           4389            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003BE2                          4390            
00003BE2                          4391            *INTITIALIZE FOR BIT SHIFTING
00003BE2  41F9 0000475E           4392            LEA     VAR_TEMP_CLEANCOPY,A0
00003BE8  2639 0000475E           4393            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003BEE                          4394            
00003BEE                          4395  DEST_LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
00003BEE  0C02 0000               4396            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003BF2  6700 0008               4397            BEQ     DEST_MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00003BF6  E24B                    4398            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003BF8  5302                    4399            SUBI.B   #1,D2                     *DECREMENT COUNTER
00003BFA  60F2                    4400            BRA     DEST_LOOP_SHIFTING3            *CONTINUE SHIFTING 
00003BFC                          4401                                               *change: NAME OF LABEL*
00003BFC                          4402  DEST_MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
00003BFC  0283 00000007           4403            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003C02  0603 0030               4404            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00003C06  6100 0222               4405            BSR     PUSH_STACK                *PUSH TO STACK
00003C0A                          4406            
00003C0A  163C 0029               4407            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003C0E  6100 021A               4408            BSR       PUSH_STACK
00003C12  163C 002B               4409            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003C16  6100 0212               4410            BSR       PUSH_STACK
00003C1A                          4411            
00003C1A  6000 01CE               4412            BRA       GET_DST_SUCCESS                   *RETURN 
00003C1E                          4413  
00003C1E                          4414            
00003C1E                          4415            
00003C1E                          4416                      
00003C1E                          4417            *** Check if source ...  <ea> = -(An)       
00003C1E                          4418  DEST_CHECK4    
00003C1E  41F9 00004752           4419            LEA     TEMP_REGISTER_FORMAT,A0
00003C24  1439 00004750           4420            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003C2A  1082                    4421            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003C2C  0239 0010 00004752      4422            ANDI.B  #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
00003C34  0C39 0010 00004752      4423            CMPI.B  #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003C3C  6700 0082               4424            BEQ     DEST_CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00003C40  0CB9 00000004 00004762  4425            CMPI.L  #4,VAR_LONG_ADDRESS_MODE_CHECK                      * -(An) - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00003C4A  6600 0074               4426            BNE     DEST_CHECK7
00003C4E                          4427            
00003C4E                          4428            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00003C4E  163C 0020               4429            MOVE.B    #' ',D3
00003C52  6100 01D6               4430            BSR       PUSH_STACK
00003C56  163C 002D               4431            MOVE.B    #'-',D3
00003C5A  6100 01CE               4432            BSR       PUSH_STACK
00003C5E  163C 0028               4433            MOVE.B    #'(',D3
00003C62  6100 01C6               4434            BSR       PUSH_STACK
00003C66  163C 0041               4435            MOVE.B    #'A',D3
00003C6A  6100 01BE               4436            BSR       PUSH_STACK
00003C6E                          4437  
00003C6E                          4438            
00003C6E                          4439            *FIND REGISTER NUMBER END LOCATION*  
00003C6E  13F9 00004753 0000475A  4440            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00003C78  0239 000F 0000475A      4441            AND.B   #$0F,VAR_BYTE_END
00003C80                          4442            
00003C80                          4443            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003C80  23C5 0000475E           4444            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003C86  1439 0000475A           4445            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003C8C                          4446            
00003C8C                          4447            *INTITIALIZE FOR BIT SHIFTING
00003C8C  41F9 0000475E           4448            LEA     VAR_TEMP_CLEANCOPY,A0
00003C92  2639 0000475E           4449            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003C98                          4450            
00003C98                          4451  DEST_LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
00003C98  0C02 0000               4452            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003C9C  6700 0008               4453            BEQ     DEST_MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00003CA0  E24B                    4454            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003CA2  5302                    4455            SUBI.B   #1,D2                     *DECREMENT COUNTER
00003CA4  60F2                    4456            BRA     DEST_LOOP_SHIFTING4            *CONTINUE SHIFTING 
00003CA6                          4457                                               *change: NAME OF LABEL*
00003CA6                          4458  DEST_MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
00003CA6  0283 00000007           4459            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003CAC  0603 0030               4460            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00003CB0  6100 0178               4461            BSR     PUSH_STACK                *PUSH TO STACK
00003CB4                          4462            
00003CB4  163C 0029               4463            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003CB8  6100 0170               4464            BSR       PUSH_STACK
00003CBC                          4465            
00003CBC  6000 012C               4466            BRA     GET_DST_SUCCESS                   *RETURN
00003CC0                          4467            
00003CC0                          4468                      
00003CC0                          4469            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
00003CC0                          4470  DEST_CHECK7    
00003CC0  0CB9 00000007 00004762  4471            CMPI.L  #7,VAR_LONG_ADDRESS_MODE_CHECK                      *IF (MODE != 111)
00003CCA  6600 011A               4472            BNE     GET_DST_FAILED                                      *THAN BRANCH TO UNCESSFULL SRC MODE READ
00003CCE                          4473                   
00003CCE                          4474            *NEXT: (MODE == 111) 
00003CCE                          4475            *NOW: CHECK FOR SRC REGISTER 
00003CCE                          4476                  *(000 = (xxx).W)
00003CCE                          4477                  *(001 = (xxx).L)
00003CCE                          4478                  *(010 = #<data>)
00003CCE                          4479                  
00003CCE                          4480            *FIND REGISTER NUMBER END LOCATION*  
00003CCE  13F9 00004753 0000475A  4481            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00003CD8  0239 000F 0000475A      4482            AND.B   #$0F,VAR_BYTE_END
00003CE0                          4483            
00003CE0                          4484            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003CE0  23C5 0000475E           4485            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00003CE6  1439 0000475A           4486            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003CEC                          4487            
00003CEC                          4488            *INTITIALIZE FOR BIT SHIFTING
00003CEC  41F9 0000475E           4489            LEA     VAR_TEMP_CLEANCOPY,A0
00003CF2  2C39 0000475E           4490            MOVE.L  VAR_TEMP_CLEANCOPY,D6
00003CF8                          4491  DEST_LOOP_SHIFTING7
00003CF8  0C02 0000               4492            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003CFC  6700 0008               4493            BEQ     DEST_MASKING_NEXT7              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00003D00  E24E                    4494            LSR     #1,D6                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003D02  5302                    4495            SUB.B   #1,D2                     *DECREMENT COUNTER
00003D04  60F2                    4496            BRA     DEST_LOOP_SHIFTING7             *CONTINUE SHIFTING
00003D06                          4497  DEST_MASKING_NEXT7
00003D06  CCBC 00000007           4498            AND.L   #7,D6                     *MASK, ONLY NEED 0-2 BIT INDEXES 
00003D0C                          4499           *D3 - REGISTER NUMBER NEEDED TO CHECK WHICH W/L/#<DATA>*
00003D0C                          4500            
00003D0C                          4501  DEST_CHECK_WORD  
00003D0C  41F9 00004752           4502            LEA     TEMP_REGISTER_FORMAT,A0
00003D12  1439 00004750           4503            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003D18  1082                    4504            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003D1A  0239 0020 00004752      4505            ANDI.B  #$20,TEMP_REGISTER_FORMAT                           * MASKS 0010 0000                                                     *change <SRC>*
00003D22  0C39 0020 00004752      4506            CMPI.B  #$20,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0010 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003D2A  6700 0026               4507            BEQ     DEST_CHECK_LONG                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00003D2E  0C06 0000               4508            CMPI.B  #0,D6                                                   *COMPARE REGISTER NUMBER WITH (000 == 000) FOR WORD
00003D32  6600 001E               4509            BNE     DEST_CHECK_LONG                                      * THE REGISTER NUMBER DOESN'T MATCH "(XXX).W" -> SO MOVE ON       
00003D36                          4510            *IT IS A WORD AT THIS POINT*
00003D36                          4511            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003D36  163C 0020               4512            MOVE.B    #' ',D3
00003D3A  6100 00EE               4513            BSR       PUSH_STACK
00003D3E  163C 0024               4514            MOVE.B    #'$',D3
00003D42  6100 00E6               4515            BSR       PUSH_STACK
00003D46  321D                    4516            MOVE.W    (A5)+,D1
00003D48  7404                    4517            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003D4A  6100 D4B6               4518            BSR       HEX2ASCII2STACK
00003D4E  6000 009A               4519            BRA       GET_DST_SUCCESS
00003D52                          4520  
00003D52                          4521  DEST_CHECK_LONG
00003D52  41F9 00004752           4522            LEA     TEMP_REGISTER_FORMAT,A0
00003D58  1439 00004750           4523            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003D5E  1082                    4524            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003D60  0239 0040 00004752      4525            ANDI.B  #$40,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00003D68  0C39 0040 00004752      4526            CMPI.B  #$40,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003D70  6700 002E               4527            BEQ     DEST_CHECK_IMMEDIATE                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00003D74  0C06 0001               4528            CMPI.B  #1,D6                                                   *COMPARE REGISTER NUMBER WITH (001 == 001) FOR WORD
00003D78  6600 0026               4529            BNE     DEST_CHECK_IMMEDIATE                                      * THE REGISTER NUMBER DOESN'T MATCH "(XXX).L" -> SO MOVE ON 
00003D7C                          4530            *IT IS A WORD AT THIS POINT*
00003D7C                          4531            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003D7C  163C 0020               4532            MOVE.B    #' ',D3
00003D80  6100 00A8               4533            BSR       PUSH_STACK
00003D84  163C 0024               4534            MOVE.B    #'$',D3
00003D88  6100 00A0               4535            BSR       PUSH_STACK
00003D8C  321D                    4536            MOVE.W    (A5)+,D1        * GET NEXT WORD INTO STACK
00003D8E  7404                    4537            MOVE.L    #4,D2           * SETS SIZE = 4 FOR CONVERSION TO ASCII
00003D90  6100 D470               4538            BSR       HEX2ASCII2STACK
00003D94  321D                    4539            MOVE.W    (A5)+,D1        * GET NEXT WORD INTO STACK
00003D96  7404                    4540            MOVE.L    #4,D2          
00003D98  6100 D468               4541            BSR       HEX2ASCII2STACK
00003D9C  6000 004C               4542            BRA     GET_DST_SUCCESS
00003DA0                          4543            
00003DA0                          4544  DEST_CHECK_IMMEDIATE
00003DA0  41F9 00004752           4545            LEA     TEMP_REGISTER_FORMAT,A0
00003DA6  1439 00004750           4546            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003DAC  1082                    4547            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003DAE  0239 0080 00004752      4548            ANDI.B  #$80,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00003DB6  0C39 0080 00004752      4549            CMPI.B  #$80,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003DBE  6700 0026               4550            BEQ     GET_DST_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00003DC2  0C06 0004               4551            CMPI.B  #4,D6                                               * COMPARE REGISTER NUMBER WITH (010 == 010) FOR WORD
00003DC6  6600 001E               4552            BNE     GET_DST_FAILED                                      * THE REGISTER NUMBER DOESN'T MATCH "#<DATA>" -> SO MOVE ON 
00003DCA                          4553            
00003DCA                          4554            *IT IS A WORD AT THIS POINT*
00003DCA                          4555            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003DCA  163C 0020               4556            MOVE.B    #' ',D3
00003DCE  6100 005A               4557            BSR       PUSH_STACK
00003DD2  163C 0023               4558            MOVE.B    #'#',D3
00003DD6  6100 0052               4559            BSR       PUSH_STACK
00003DDA  321D                    4560            MOVE.W    (A5)+,D1
00003DDC  7404                    4561            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003DDE  6100 D422               4562            BSR       HEX2ASCII2STACK
00003DE2  6000 0006               4563            BRA       GET_DST_SUCCESS
00003DE6                          4564            
00003DE6                          4565  GET_DST_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
00003DE6  7801                    4566            MOVE.L #1,D4
00003DE8  4E75                    4567            RTS
00003DEA                          4568  GET_DST_SUCCESS 
00003DEA  4E75                    4569            RTS
00003DEC                          4570  
00003DEC                          4571  
00003DEC                          4572  *---------------------------------------------------------------------------*
00003DEC                          4573  * STACK/QUEUE INTERFACE
00003DEC                          4574  *---------------------------------------------------------------------------*
00003DEC                          4575  PRINT_STACK
00003DEC  0C39 0000 0000474C      4576            CMP.B     #0,COUNTER
00003DF4  6700 000E               4577            BEQ       PRINT_STACK_RETURN             *CHECK IF LOOP IS FINISHED
00003DF8                          4578            
00003DF8                          4579  PRINT_STACK_HELPER
00003DF8  6100 0038               4580            BSR      POP_STACK          *PRINTS ADDRESS
00003DFC  103C 0006               4581            MOVE.B   #6,D0              *Display single character in D1.B. 
00003E00  4E4F                    4582            TRAP     #15             *ACTIVATES PRINT
00003E02                          4583  
00003E02  60E8                    4584            BRA       PRINT_STACK
00003E04                          4585  PRINT_STACK_RETURN
00003E04  4E75                    4586            RTS
00003E06                          4587            
00003E06                          4588            
00003E06                          4589  PRINT_QUEUE
00003E06  0C39 0000 0000474C      4590            CMP.B     #0,COUNTER
00003E0E  6700 0018               4591            BEQ       PRINT_QUEUE_RETURN             *CHECK IF LOOP IS FINISHED
00003E12                          4592            
00003E12                          4593  PRINT_QUEUE_HELPER
00003E12  33F9 0000474C 0000474E  4594            MOVE.W   COUNTER,QUEUE_COUNTER
00003E1C  6100 0022               4595            BSR      POP_FRONT          *PRINTS ADDRESS
00003E20  103C 0006               4596            MOVE.B   #6,D0              *Display single character in D1.B. 
00003E24  4E4F                    4597            TRAP     #15             *ACTIVATES PRINT
00003E26                          4598  
00003E26  60DE                    4599            BRA       PRINT_QUEUE
00003E28                          4600  PRINT_QUEUE_RETURN
00003E28  4E75                    4601            RTS
00003E2A                          4602            
00003E2A                          4603  *PUSHES.W CONTENTS OF [D3] INTO STACK          
00003E2A                          4604  PUSH_STACK
00003E2A  1503                    4605              MOVE.B  D3,-(A2)
00003E2C  6100 0058               4606              BSR     INCREMENT
00003E30  4E75                    4607              RTS
00003E32                          4608  *POPS.W TOP OF STACK INTO [D1], SO ITS READY TO PRINT WITH TRAP 15
00003E32                          4609  *         MOVE.W   (A2)+,D1           *PRINTS ADDRESS
00003E32                          4610  *         MOVE.B   #15,D0             *PRINTS ACCORDING TO D2 BASE VALUE
00003E32                          4611  *         MOVE.B   #16,D2             *PRINTS BASED 16 NUMBER
00003E32                          4612  *         TRAP        #15             *ACTIVATES PRINT
00003E32                          4613  POP_STACK
00003E32  BECA                    4614              CMPA.W   A2,SP            *CHECKS IF THERE IS ANYTHING TO PUSH
00003E34  6700 0008               4615              BEQ     POP_RETURN        *IF NOTHING TO PUSH THAN JUST RETURN
00003E38  121A                    4616              MOVE.B  (A2)+,D1 
00003E3A  6100 0052               4617              BSR     DECREMENT
00003E3E                          4618  POP_RETURN
00003E3E  4E75                    4619              RTS 
00003E40                          4620        
00003E40                          4621  *USE [A4] AS SECOND POINTER IN SHIFTING      
00003E40  0C39 0000 0000474E      4622  POP_FRONT   CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
00003E48  6700 0030               4623              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
00003E4C                          4624              
00003E4C                          4625              
00003E4C                          4626              *POSITION THE POINTERS A[4] RIGHT BEHIND A[2] WHICH IS RIGHT BEHIND STACK
00003E4C  347C 7000               4627              MOVEA.W #STACK,A2   *START A2 AT STACK
00003E50  0622 0000               4628              ADD.B   #0,-(A2)    *SHIFT A2 TO THE BOTTOM OF THE STACK
00003E54  384A                    4629              MOVEA.W A2,A4     *START A4 RIGHT ABOVE A2
00003E56  0624 0000               4630              ADD.B   #0,-(A4)  *leash one more higher in stack (a4)
00003E5A  1212                    4631              MOVE.B  (A2),D1     *POP CONTENTS INTO D1
00003E5C                          4632  POP_SHIFT_LOOP
00003E5C  0C39 0000 0000474E      4633              CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
00003E64  6700 0014               4634              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
00003E68  1494                    4635              MOVE.B  (A4),(A2)   *SHIFT CONTENT DOWN THE STACK
00003E6A  0624 0000               4636              ADD.B   #0,-(A4)
00003E6E  0622 0000               4637              ADD.B   #0,-(A2) *SHIFT POINTERS DOWN THE STACK
00003E72  5339 0000474E           4638              SUB.B   #1,QUEUE_COUNTER *DECREMENT INTERNAL QUEUE COUNTER
00003E78                          4639              
00003E78  60E2                    4640              BRA     POP_SHIFT_LOOP
00003E7A                          4641                          
00003E7A                          4642  POP_FRONT_RETURN 
00003E7A                          4643              *RESET A2 BACK TO SP
00003E7A  347C 7000               4644              MOVEA.W #STACK,A2    
00003E7E  5339 0000474C           4645              SUB.B   #1,COUNTER *DECREMENT STACK COUNTER       
00003E84  4E75                    4646              RTS   
00003E86                          4647  
00003E86                          4648  INCREMENT
00003E86  5239 0000474C           4649              ADD.B   #1, COUNTER
00003E8C  4E75                    4650              RTS           
00003E8E                          4651  DECREMENT
00003E8E  5339 0000474C           4652              SUB.B   #1, COUNTER
00003E94  4E75                    4653              RTS           
00003E96                          4654  CLEAR_STACK
00003E96  0C39 0000 0000474C      4655              CMP.B     #0,COUNTER
00003E9E  6700 0006               4656              BEQ       CLEAR_RETURN
00003EA2  618E                    4657              BSR       POP_STACK
00003EA4  60F0                    4658              BRA       CLEAR_STACK
00003EA6                          4659   
00003EA6                          4660  CLEAR_RETURN
00003EA6  4E75                    4661              RTS    
00003EA8                          4662  *---------------------------------------------------------------------------*
00003EA8                          4663  * TERMINATE
00003EA8                          4664  *---------------------------------------------------------------------------*
00003EA8                          4665  TERMINATE   
00003EA8  43F9 00004258           4666              LEA     FINMSG,A1
00003EAE  103C 000E               4667              MOVE.B  #14,D0
00003EB2  4E4F                    4668              TRAP    #15
00003EB4                          4669  
00003EB4  103C 0009               4670              MOVE.B  #9,D0
00003EB8  4E4F                    4671              TRAP    #15
00003EBA                          4672  
00003EBA                          4673  *---------------------------------------------------------------------------*
00003EBA                          4674  * Data storage                                                 
00003EBA                          4675  *---------------------------------------------------------------------------*  
00003EBA                          4676  WELCOME
00003EBA= 20 20 20 20 20 20 ...   4677              DC.B '                         ___     ___ ___        ___   ___ ___                 ',CR,LF
00003F0A= 3D 3D 3D 3D 3D 20 ...   4678              DC.B '=====           \  /\  /|___|   |   |   ||\  /||___    | |   |           =====',CR,LF
00003F5A= 3D 3D 3D 3D 3D 20 ...   4679              DC.B '=====            \/  \/ |___|___|___|___|| \/ ||___    | |___|           =====',CR,LF
00003FAA                          4680      
00003FAA= 20 20 20 20 20 20 ...   4681              DC.B '                        ___ ___ ___  ___      ___                             ',CR,LF
00003FFA= 20 20 20 20 20 20 ...   4682              DC.B '                       |     | |___)|    |   |___                             ',CR,LF 
0000404A= 20 20 20 20 20 20 ...   4683              DC.B '                       |___ _|_|\___|___ |___|___                             ',CR,LF
0000409A                          4684      
0000409A= 20 20 20 20 20 20 ...   4685              DC.B '           __  ___ ___   _   ___  ___  ___        ___      ___ ___            ',CR,LF
000040EA= 3D 3D 3D 3D 3D 20 ...   4686              DC.B '=====     |  \  | |___  /_\ |___ |___ |___ |\  /||___||   |___|___)      =====',CR,LF 
0000413A= 3D 3D 3D 3D 3D 20 ...   4687              DC.B '=====     |__/ _|_ ___|/   \ ___| ___||___ | \/ ||___||___|___|\___      =====',CR,LF,CR,LF,CR,LF,0
0000418F                          4688  
0000418F                          4689  PROMPT_START
0000418F= 50 6C 65 61 73 65 ...   4690              DC.B    'Please enter a hexadecimal starting address.',CR,LF,0
000041BE                          4691      
000041BE                          4692  PROMPT_END
000041BE= 50 6C 65 61 73 65 ...   4693              DC.B    'Please enter a hexadecimal ending address.',CR,LF,0
000041EB= 0D 0A 48 69 74 20 ...   4694  DISP_NEXT   DC.B    CR,LF,'Hit Enter to print the next 30 lines.',CR,LF,0            
00004215= 57 6F 75 6C 64 20 ...   4695  REPEATMSG   DC.B    'Would you like to run again? Press Y to continue or N to finish.',CR,LF,0
00004258= 54 68 61 6E 6B 20 ...   4696  FINMSG      DC.B    'Thank you for using Circle Disassembler.',CR,LF,0
00004283= 45 72 72 6F 72 3A ...   4697  ERRMSG_1    DC.B    'Error: Invalid Input Address',CR,LF,0
000042A2= 45 72 72 6F 72 3A ...   4698  ERRMSG_3    DC.B    'Error: Invalid Input Address (Odd)',CR,LF,0
000042C7= 45 72 72 6F 72 3A ...   4699  ERRMSG_5    DC.B    'Error: Invalid Input Address (start > end)',CR,LF,0
000042F4                          4700  
000042F4                          4701  VR_S_ADDR   DS.B    80                      * allocate storage space for the starting address
00004344                          4702  VR_E_ADDR   DS.B    80                      * allocate storage space for the ending address
00004394                          4703  S_ADDR_HX   DS.L    1                       * allocate storage space for the starting address in hex
00004398                          4704  E_ADDR_HX   DS.L    1                       * allocate storage space for the ending address in hex
0000439C= 0D 0A 00                4705  ENDLINE_M   DC.B    CR,LF,0
0000439F                          4706  TMPINPUT    DS.B    80                      * temp store user input
000043EF                          4707  TMPOUTPUT   DS.B    80                      * temp store prog output
0000443F= 20 20 20 4F 52 49 ...   4708  DISP_ORI_B  DC.B    '   ORI.B',0
00004448= 20 20 20 4F 52 49 ...   4709  DISP_ORI_W  DC.B    '   ORI.W',0
00004451= 20 20 20 4F 52 49 ...   4710  DISP_ORI_L  DC.B    '   ORI.L',0
0000445A= 20 20 20 45 4F 52 ...   4711  DISP_EORI_B  DC.B    '   EORI.B',0
00004464= 20 20 20 45 4F 52 ...   4712  DISP_EORI_W  DC.B    '   EORI.W',0
0000446E= 20 20 20 45 4F 52 ...   4713  DISP_EORI_L  DC.B    '   EORI.L',0
00004478= 20 20 20 42 54 53 ...   4714  DISP_BTST   DC.B    '   BTST',0
00004480= 20 20 20 43 4D 50 ...   4715  DISP_CMPI_B  DC.B    '   CMPI.B',0
0000448A= 20 20 20 43 4D 50 ...   4716  DISP_CMPI_W  DC.B    '   CMPI.W',0
00004494= 20 20 20 43 4D 50 ...   4717  DISP_CMPI_L  DC.B    '   CMPI.L',0
0000449E= 20 20 20 44 41 54 ...   4718  DISP_DATA   DC.B    '   DATA',0
000044A6= 20 20 20 4D 4F 56 ...   4719  DISP_MOVE_B DC.B    '   MOVE.B',0
000044B0= 20 20 20 4D 4F 56 ...   4720  DISP_MOVE_W DC.B    '   MOVE.W',0
000044BA= 20 20 20 4D 4F 56 ...   4721  DISP_MOVE_L DC.B    '   MOVE.L',0
000044C4= 20 20 20 52 54 53 00    4722  DISP_RTS    DC.B    '   RTS',0
000044CB= 20 20 20 4A 53 52 00    4723  DISP_JSR    DC.B    '   JSR',0
000044D2= 20 20 20 4E 45 47 ...   4724  DISP_NEG_B    DC.B    '   NEG.B',0
000044DB= 20 20 20 4E 45 47 ...   4725  DISP_NEG_W    DC.B    '   NEG.W',0
000044E4= 20 20 20 4E 45 47 ...   4726  DISP_NEG_L    DC.B    '   NEG.L',0
000044ED= 20 20 20 4E 4F 54 ...   4727  DISP_NOT_B  DC.B    '   NOT.B',0
000044F6= 20 20 20 4E 4F 54 ...   4728  DISP_NOT_W  DC.B    '   NOT.W',0
000044FF= 20 20 20 4E 4F 54 ...   4729  DISP_NOT_L  DC.B    '   NOT.L',0
00004508= 20 20 20 4C 45 41 00    4730  DISP_LEA    DC.B    '   LEA',0
0000450F= 20 20 20 4D 4F 56 ...   4731  DISP_MOVEM_W    DC.B    '   MOVEM.W',0
0000451A= 20 20 20 4D 4F 56 ...   4732  DISP_MOVEM_L    DC.B    '   MOVEM.L',0
00004525= 20 20 20 41 44 44 ...   4733  DISP_ADDQ_B DC.B    '   ADDQ.B',0
0000452F= 20 20 20 41 44 44 ...   4734  DISP_ADDQ_W DC.B    '   ADDQ.W',0
00004539= 20 20 20 41 44 44 ...   4735  DISP_ADDQ_L DC.B    '   ADDQ.L',0
00004543= 20 20 20 44 49 56 ...   4736  DISP_DIVS   DC.B    '   DIVS',0
0000454B= 20 20 20 53 55 42 ...   4737  DISP_SUB_B  DC.B    '   SUB.B',0
00004554= 20 20 20 53 55 42 ...   4738  DISP_SUB_W  DC.B    '   SUB.W',0
0000455D= 20 20 20 53 55 42 ...   4739  DISP_SUB_L  DC.B    '   SUB.L',0
00004566= 20 20 20 53 55 42 ...   4740  DISP_SUBI_B  DC.B    '   SUBI.B',0
00004570= 20 20 20 53 55 42 ...   4741  DISP_SUBI_W  DC.B    '   SUBI.W',0
0000457A= 20 20 20 53 55 42 ...   4742  DISP_SUBI_L  DC.B    '   SUBI.L',0
00004584= 20 20 20 53 55 42 ...   4743  DISP_SUBA_W  DC.B    '   SUBA.W',0
0000458E= 20 20 20 53 55 42 ...   4744  DISP_SUBA_L  DC.B    '   SUBA.L',0
00004598= 20 20 20 45 4F 52 ...   4745  DISP_EOR_B  DC.B    '   EOR.B',0
000045A1= 20 20 20 45 4F 52 ...   4746  DISP_EOR_W  DC.B    '   EOR.W',0
000045AA= 20 20 20 45 4F 52 ...   4747  DISP_EOR_L  DC.B    '   EOR.L',0
000045B3= 20 20 20 43 4D 50 ...   4748  DISP_CMP_B  DC.B    '   CMP.B',0
000045BC= 20 20 20 43 4D 50 ...   4749  DISP_CMP_W  DC.B    '   CMP.W',0
000045C5= 20 20 20 43 4D 50 ...   4750  DISP_CMP_L  DC.B    '   CMP.L',0
000045CE= 20 20 20 43 4D 50 ...   4751  DISP_CMPA_W  DC.B    '   CMPA.W',0
000045D8= 20 20 20 43 4D 50 ...   4752  DISP_CMPA_L  DC.B    '   CMPA.L',0
000045E2= 20 20 20 4D 55 4C ...   4753  DISP_MULS_W DC.B    '   MULS.W',0
000045EC= 20 20 20 41 4E 44 ...   4754  DISP_AND_B  DC.B    '   AND.B',0
000045F5= 20 20 20 41 4E 44 ...   4755  DISP_AND_W  DC.B    '   AND.W',0
000045FE= 20 20 20 41 4E 44 ...   4756  DISP_AND_L  DC.B    '   AND.L',0
00004607= 20 20 20 41 44 44 ...   4757  DISP_ADD_B  DC.B    '   ADD.B',0
00004610= 20 20 20 41 44 44 ...   4758  DISP_ADD_W  DC.B    '   ADD.W',0
00004619= 20 20 20 41 44 44 ...   4759  DISP_ADD_L  DC.B    '   ADD.L',0
00004622= 20 20 20 41 44 44 ...   4760  DISP_ADDA_W DC.B    '   ADDA.W',0
0000462C= 20 20 20 41 44 44 ...   4761  DISP_ADDA_L DC.B    '   ADDA.L',0
00004636= 20 20 20 4C 53 52 ...   4762  DISP_LSR_B  DC.B    '   LSR.B',0
0000463F= 20 20 20 4C 53 4C ...   4763  DISP_LSL_B  DC.B    '   LSL.B',0
00004648= 20 20 20 4C 53 52 ...   4764  DISP_LSR_W  DC.B    '   LSR.W',0
00004651= 20 20 20 4C 53 4C ...   4765  DISP_LSL_W  DC.B    '   LSL.W',0
0000465A= 20 20 20 4C 53 52 ...   4766  DISP_LSR_L  DC.B    '   LSR.L',0
00004663= 20 20 20 4C 53 4C ...   4767  DISP_LSL_L  DC.B    '   LSL.L',0
0000466C= 20 20 20 41 53 52 ...   4768  DISP_ASR_B  DC.B    '   ASR.B',0
00004675= 20 20 20 41 53 4C ...   4769  DISP_ASL_B  DC.B    '   ASL.B',0
0000467E= 20 20 20 41 53 52 ...   4770  DISP_ASR_W  DC.B    '   ASR.W',0
00004687= 20 20 20 41 53 4C ...   4771  DISP_ASL_W  DC.B    '   ASL.W',0
00004690= 20 20 20 41 53 52 ...   4772  DISP_ASR_L  DC.B    '   ASR.L',0
00004699= 20 20 20 41 53 4C ...   4773  DISP_ASL_L  DC.B    '   ASL.L',0
000046A2= 20 20 20 52 4F 52 ...   4774  DISP_ROR_B  DC.B    '   ROR.B',0
000046AB= 20 20 20 52 4F 4C ...   4775  DISP_ROL_B  DC.B    '   ROL.B',0
000046B4= 20 20 20 52 4F 52 ...   4776  DISP_ROR_W  DC.B    '   ROR.W',0
000046BD= 20 20 20 52 4F 4C ...   4777  DISP_ROL_W  DC.B    '   ROL.W',0
000046C6= 20 20 20 52 4F 52 ...   4778  DISP_ROR_L  DC.B    '   ROR.L',0
000046CF= 20 20 20 52 4F 4C ...   4779  DISP_ROL_L  DC.B    '   ROL.L',0
000046D8= 20 20 20 42 52 41 00    4780  DISP_BRA    DC.B    '   BRA',0
000046DF= 20 20 20 42 4C 54 00    4781  DISP_BLT    DC.B    '   BLT',0
000046E6= 20 20 20 42 45 51 00    4782  DISP_BEQ    DC.B    '   BEQ',0
000046ED= 20 20 20 42 4E 45 00    4783  DISP_BNE    DC.B    '   BNE',0
000046F4= 20 20 20 42 48 49 00    4784  DISP_BHI    DC.B    '   BHI',0
000046FB= 20 20 20 4D 4F 56 ...   4785  DISP_MOVEA_W    DC.B    '   MOVEA.W',0
00004706= 20 20 20 4D 4F 56 ...   4786  DISP_MOVEA_L    DC.B    '   MOVEA.L',0
00004711                          4787  
00004711= 20 20 20 24 00          4788  DISP_HEX     DC.B    '   $',0
00004716= 20 20 20 44 00          4789  DISP_D  DC.B    '   D',0
0000471B= 20 20 20 41 00          4790  DISP_A  DC.B    '   A',0
00004720= 20 20 20 28 00          4791  DISP_OP  DC.B    '   (',0
00004725= 29 00                   4792  DISP_CP  DC.B   ')',0
00004727= 20 20 20 28 41 00       4793  DISP_AOP  DC.B    '   (A',0
0000472D                          4794  
0000472D= 20 20 20 2D 28 41 00    4795  DISP_PRE    DC.B    '   -(A',0
00004734= 29 2B 00                4796  DISP_POST   DC.B    ')+',0
00004737= 20 20 20 23 00          4797  DISP_LB DC.B    '   #',0
0000473C= 30 00                   4798  DISP_0  DC.B    '0',0
0000473E= 31 00                   4799  DISP_1  DC.B    '1',0
00004740= 32 00                   4800  DISP_2  DC.B    '2',0
00004742= 33 00                   4801  DISP_3  DC.B    '3',0
00004744= 34 00                   4802  DISP_4  DC.B    '4',0
00004746= 35 00                   4803  DISP_5  DC.B    '5',0
00004748= 36 00                   4804  DISP_6  DC.B    '6',0
0000474A= 37 00                   4805  DISP_7  DC.B    '7',0
0000474C                          4806  
0000474C                          4807  *STACK INTERFACE VARIABLES*
0000474C                          4808  COUNTER         DS.W    1
0000474E                          4809  QUEUE_COUNTER   DS.W    1
00004750                          4810  
00004750                          4811  *EA DECODING INTERFACE VARIABLES* 
00004750                          4812  DEST_REGISTER_FORMAT    DS.B    1           *all address modes acceptable standard
00004751                          4813  SRC_REGISTER_FORMAT  DS.B    1           *all address modes acceptable standard
00004752                          4814  TEMP_REGISTER_FORMAT    DS.B    1           *place holder for masking other register formats
00004753                          4815  
00004753                          4816  *FORMAT OF WHERE TO GET THE EA BY THE ENDING BIT AND STARTING BIT
00004753                          4817  * WORD + WORD = LONG
00004753                          4818  * (STARTING BIT) + (ENDING BIT) = 2 HEX CHAR
00004753                          4819  * A              + F            = AF         <= EXAMPLE
00004753                          4820  *(10TH BIT)      + (15TH BIT)   = CHECK BITS 15 THROUGH 10
00004753                          4821  GET_DST_START_END    DS.B    1
00004754                          4822  GET_SRC_START_END    DS.B    1
00004755                          4823  
00004755                          4824  *STORES THE START + END BITS HERE (FROM ABOVE)
00004756                          4825  VAR_BYTE_START      DS.L    1
0000475A                          4826  VAR_BYTE_END        DS.L    1
0000475E                          4827  VAR_TEMP_CLEANCOPY  DS.L    1
00004762                          4828  
00004762                          4829  VAR_LONG_ADDRESS_MODE_CHECK        DS.L    1       *holds the bits 0-2 in long form
00004766                          4830  
00004766                          4831  *MORE FOR STACK USAGE*
00004766= 2C 00                   4832  DISP_COMMA  DC.B    ',',0
00004768= 20 20 20 00             4833  DISP_INDENT  DC.B    '   ',0
0000476C                          4834  
0000476C                          4835  *NEXT WORD POINTER: FOR IDENTIFING (xxx).W or (xxx).L*
0000476C                          4836  POINTER_WORD    DS.W       1
0000476E                          4837  
0000476E                          4838  
0000476E                          4839  
0000476E                          4840  *---------------------------------------------------------------------------*
0000476E                          4841  * Ends program
0000476E                          4842  *---------------------------------------------------------------------------*
0000476E                          4843              END    START                    * last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASC2HXLP            115E
ASCII2HEX           1158
ASC_ERR             11BA
ASC_LOW             119C
ASC_NUM             11AC
ASC_SFT             11B4
ASC_UPP             11A4
CHECK0              359E
CHECK1              3628
CHECK2              36B2
CHECK3              374C
CHECK4              37EE
CHECK7              3890
CHECK_IMMEDIATE     3970
CHECK_LONG          3922
CHECK_WORD          38DC
CLEAR_RETURN        3EA6
CLEAR_STACK         3E96
COUNTER             474C
CR                  D
DECREMENT           3E8E
DEST_CHECK0         39CE
DEST_CHECK1         3A58
DEST_CHECK2         3AE2
DEST_CHECK3         3B7C
DEST_CHECK4         3C1E
DEST_CHECK7         3CC0
DEST_CHECK_IMMEDIATE  3DA0
DEST_CHECK_LONG     3D52
DEST_CHECK_WORD     3D0C
DEST_LOOP_SHIFTING  3A38
DEST_LOOP_SHIFTING1  3AC2
DEST_LOOP_SHIFTING2  3B54
DEST_LOOP_SHIFTING3  3BEE
DEST_LOOP_SHIFTING4  3C98
DEST_LOOP_SHIFTING7  3CF8
DEST_MASKING_NEXT   3A46
DEST_MASKING_NEXT1  3AD0
DEST_MASKING_NEXT2  3B62
DEST_MASKING_NEXT3  3BFC
DEST_MASKING_NEXT4  3CA6
DEST_MASKING_NEXT7  3D06
DEST_MODE           3156
DEST_REGISTER       3426
DEST_REGISTER_FORMAT  4750
DISPLAY_30_LINES    1306
DISP_0              473C
DISP_1              473E
DISP_2              4740
DISP_3              4742
DISP_4              4744
DISP_5              4746
DISP_6              4748
DISP_7              474A
DISP_A              471B
DISP_ADDA_L         462C
DISP_ADDA_W         4622
DISP_ADDQ_B         4525
DISP_ADDQ_L         4539
DISP_ADDQ_W         452F
DISP_ADD_B          4607
DISP_ADD_L          4619
DISP_ADD_W          4610
DISP_AND_B          45EC
DISP_AND_L          45FE
DISP_AND_W          45F5
DISP_AOP            4727
DISP_ASL_B          4675
DISP_ASL_L          4699
DISP_ASL_W          4687
DISP_ASR_B          466C
DISP_ASR_L          4690
DISP_ASR_W          467E
DISP_BEQ            46E6
DISP_BHI            46F4
DISP_BLT            46DF
DISP_BNE            46ED
DISP_BRA            46D8
DISP_BTST           4478
DISP_CMPA_L         45D8
DISP_CMPA_W         45CE
DISP_CMPI_B         4480
DISP_CMPI_L         4494
DISP_CMPI_W         448A
DISP_CMP_B          45B3
DISP_CMP_L          45C5
DISP_CMP_W          45BC
DISP_COMMA          4766
DISP_CP             4725
DISP_D              4716
DISP_DATA           449E
DISP_DIVS           4543
DISP_EORI_B         445A
DISP_EORI_L         446E
DISP_EORI_W         4464
DISP_EOR_B          4598
DISP_EOR_L          45AA
DISP_EOR_W          45A1
DISP_HEX            4711
DISP_INDENT         4768
DISP_JSR            44CB
DISP_LB             4737
DISP_LEA            4508
DISP_LSL_B          463F
DISP_LSL_L          4663
DISP_LSL_W          4651
DISP_LSR_B          4636
DISP_LSR_L          465A
DISP_LSR_W          4648
DISP_MOVEA_L        4706
DISP_MOVEA_W        46FB
DISP_MOVEM_L        451A
DISP_MOVEM_W        450F
DISP_MOVE_B         44A6
DISP_MOVE_L         44BA
DISP_MOVE_W         44B0
DISP_MULS_W         45E2
DISP_NEG_B          44D2
DISP_NEG_L          44E4
DISP_NEG_W          44DB
DISP_NEXT           41EB
DISP_NOT_B          44ED
DISP_NOT_L          44FF
DISP_NOT_W          44F6
DISP_OP             4720
DISP_ORI_B          443F
DISP_ORI_L          4451
DISP_ORI_W          4448
DISP_POST           4734
DISP_PRE            472D
DISP_ROL_B          46AB
DISP_ROL_L          46CF
DISP_ROL_W          46BD
DISP_ROR_B          46A2
DISP_ROR_L          46C6
DISP_ROR_W          46B4
DISP_RTS            44C4
DISP_SUBA_L         458E
DISP_SUBA_W         4584
DISP_SUBI_B         4566
DISP_SUBI_L         457A
DISP_SUBI_W         4570
DISP_SUB_B          454B
DISP_SUB_L          455D
DISP_SUB_W          4554
D_MODE000           31F8
D_MODE010           3240
D_MODE011           32A0
D_MODE100           32C0
D_MODE111           3312
EA_ARITH            30F0
EA_DATA             1648
EA_GEN              313C
EA_MOVEA            3116
EA_NOSRC            30DC
ENDLINE_M           439C
END_ADDR            10A4
ERRMSG_1            4283
ERRMSG_3            42A2
ERRMSG_5            42C7
ERROR_1             1108
ERROR_2             1118
ERROR_3             1128
ERROR_4             1138
ERROR_5             1148
E_ADDR_HX           4398
FINMSG              4258
GET_DST_FAILED      3DE6
GET_DST_START_END   4753
GET_DST_SUCCESS     3DEA
GET_EA_EA_DEST      39BC
GET_EA_EA_SRC       358C
GET_SRC_FAILED      39B6
GET_SRC_START_END   4754
GET_SRC_SUCCESS     39BA
HEX2ASCII           11C0
HEX2ASCII2STACK     1202
HEX_CHAR            11EE
HEX_CONT            11F2
HEX_LOOP            11D4
IMMD_B              33C6
IMMD_L              3406
IMMD_W              33E6
IMMEDIATE           3396
INCREMENT           3E86
INTRO               1028
IS_ODD              1246
IS_ODD_ERR          125C
JMPTABLE            1332
LF                  A
LONGMODE            336A
LOOP_SHIFTING       3608
LOOP_SHIFTING1      3692
LOOP_SHIFTING2      3724
LOOP_SHIFTING3      37BE
LOOP_SHIFTING4      3868
MAIN                1262
MASKING_NEXT        3616
MASKING_NEXT1       36A0
MASKING_NEXT2       3732
MASKING_NEXT3       37CC
MASKING_NEXT4       3876
MODE000             31E4
MODE001             320C
MODE010             3220
MODE011             3260
MODE100             3280
MODE111             32E0
NEXTLINES           1314
OP0000              1392
OP0000_BTST_B       1502
OP0000_BTST_L       1552
OP0000_BTST_W       152A
OP0000_CMPI         1670
OP0000_CMPI_B       16E6
OP0000_CMPI_L       1736
OP0000_CMPI_W       170E
OP0000_ORI_B        17CA
OP0000_ORI_L        181A
OP0000_ORI_W        17F2
OP0000_RETURN_BTST  1576
OP0000_RETURN_CMPI  175A
OP0000_RETURN_ORI   183E
OP0001              1840
OP0010              18AE
OP0011              19AC
OP0100              1AA8
OP0101              1CFE
OP0101_ADDQ_B       1D7A
OP0101_ADDQ_B_0     1DF6
OP0101_ADDQ_B_1     1E02
OP0101_ADDQ_B_2     1E0E
OP0101_ADDQ_B_3     1E1A
OP0101_ADDQ_B_4     1E26
OP0101_ADDQ_B_5     1E32
OP0101_ADDQ_B_6     1E3E
OP0101_ADDQ_B_7     1E4A
OP0101_ADDQ_B_8     1E56
OP0101_ADDQ_L       1D92
OP0101_ADDQ_W       1D86
OP0101_RETURN       1D9A
OP0101_RETURN2      1E5E
OP0110              1EA2
OP0111              1F30
OP1000              1F34
OP1000_DIVS_DN_EA_OR_EA_DN  1F42
OP1000_DIVS_RETURN  2026
OP1000_EA_DN_DIVS   1F70
OP1000_PRINT_L_DIVS  1FDE
OP1000_PRINT_W_DIVS  1F96
OP1001              203C
OP1001_ADD_RETURN   238A
OP1001_DETERMINE_DN_EA_OR_EA_DN  2152
OP1001_DN_EA        218A
OP1001_EA_DN        228A
OP1001_PRINT_B      22B2
OP1001_PRINT_B2     21B2
OP1001_PRINT_L      2342
OP1001_PRINT_L2     2242
OP1001_PRINT_W      22FA
OP1001_PRINT_W2     21FA
OP1001_SUBA_L       206E
OP1001_SUBA_W       20E0
OP1010              23F8
OP1011              23FC
OP1011_CMP          2456
OP1011_CMPA         2508
OP1011_CMPA_L       2582
OP1011_CMPA_W       2576
OP1011_CMP_B        24CA
OP1011_CMP_L        24E2
OP1011_CMP_W        24D6
OP1011_EOR          25A8
OP1011_EOR_B        261C
OP1011_EOR_L        2634
OP1011_EOR_W        2628
OP1011_RETURN       263C
OP1011_RETURN_CMP   24EA
OP1011_RETURN_CMPA  258A
OP1100              26FC
OP1100_AND_RETURN   2A4C
OP1100_DETERMINE_DN_EA_OR_EA_DN  2812
OP1100_DN_EA        284C
OP1100_EA_DN        294C
OP1100_EA_DN_MULS   275A
OP1100_MULS_DN_EA_OR_EA_DN  272C
OP1100_MULS_RETURN  2810
OP1100_PRINT_B      2974
OP1100_PRINT_B2     2874
OP1100_PRINT_L      2A04
OP1100_PRINT_L2     2904
OP1100_PRINT_L_MULS  27C8
OP1100_PRINT_W      29BC
OP1100_PRINT_W2     28BC
OP1100_PRINT_W_MULS  2780
OP1101              2A4E
OP1101_ADDA_L       2A80
OP1101_ADDA_W       2AF2
OP1101_ADD_RETURN   2D9C
OP1101_DETERMINE_DN_EA_OR_EA_DN  2B64
OP1101_DN_EA        2B9C
OP1101_EA_DN        2C9C
OP1101_PRINT_B      2CC4
OP1101_PRINT_B2     2BC4
OP1101_PRINT_L      2D54
OP1101_PRINT_L2     2C54
OP1101_PRINT_W      2D0C
OP1101_PRINT_W2     2C0C
OP1110              2E2A
OP1111              30D8
OP_ADDA_L           2E12
OP_ADDA_W           2DFA
OP_ADDQ_B           1E6C
OP_ADDQ_L           1E90
OP_ADDQ_W           1E7E
OP_ADD_B            2DB2
OP_ADD_L            2DE2
OP_ADD_W            2DCA
OP_ASL              2FCA
OP_ASL_B            2FEE
OP_ASL_L            3000
OP_ASL_W            3012
OP_ASR              2F70
OP_ASR_B            2F94
OP_ASR_L            2FA6
OP_ASR_W            2FB8
OP_ASX              2E8C
OP_BEQ              1F06
OP_BHI              1EEA
OP_BLT              1F22
OP_BNE              1EF8
OP_BRA              1F14
OP_BTST             1406
OP_BTST_IMMEDIATE   1484
OP_CMPA_L           266C
OP_CMPA_W           265A
OP_CMP_B            267E
OP_CMP_L            26AE
OP_CMP_W            2696
OP_DATA             1624
OP_DIVS             2028
OP_EORI             1578
OP_EORI_B           1598
OP_EORI_L           15BC
OP_EORI_W           15AA
OP_EOR_B            26C6
OP_EOR_L            26EA
OP_EOR_W            26D8
OP_JSR              1CD0
OP_LEA              1B56
OP_LEA_DN_EA_OR_EA_DN  1B64
OP_LEA_RETURN       1BC2
OP_LSL              2F16
OP_LSL_B            2F3A
OP_LSL_L            2F4C
OP_LSL_W            2F5E
OP_LSR              2EBC
OP_LSR_B            2EE0
OP_LSR_L            2EF2
OP_LSR_W            2F04
OP_LSX              2E74
OP_MOVEA_L          193C
OP_MOVEA_W          1A38
OP_MOVEM_L          1B44
OP_MOVEM_W          1B32
OP_MOVE_B           1846
OP_MOVE_L           18D4
OP_MOVE_W           19D0
OP_MULS             271E
OP_NEG              1BC4
OP_NEG_B            1C10
OP_NEG_L            1C28
OP_NEG_PRINT_EA     1C34
OP_NEG_W            1C1C
OP_NOT              1C4A
OP_NOT_B            1C96
OP_NOT_L            1CAE
OP_NOT_PRINT_EA     1CBA
OP_NOT_W            1CA2
OP_ORI              175C
OP_PRINT_L_LEA      1B82
OP_ROL              307E
OP_ROL_B            30A2
OP_ROL_L            30B4
OP_ROL_W            30C6
OP_ROR              3024
OP_ROR_B            3048
OP_ROR_L            305A
OP_ROR_W            306C
OP_ROX              2EA4
OP_RTS              1CE4
OP_SUBA_L           23E6
OP_SUBA_W           23D4
OP_SUBI             15CE
OP_SUBI_B           15EE
OP_SUBI_L           1612
OP_SUBI_W           1600
OP_SUB_B            238C
OP_SUB_L            23BC
OP_SUB_W            23A4
OUTPUT_PROCESSED_DATA  12E6
POINTER_WORD        476C
POP_FRONT           3E40
POP_FRONT_RETURN    3E7A
POP_RETURN          3E3E
POP_SHIFT_LOOP      3E5C
POP_STACK           3E32
PRINT_QUEUE         3E06
PRINT_QUEUE_HELPER  3E12
PRINT_QUEUE_RETURN  3E28
PRINT_STACK         3DEC
PRINT_STACK_HELPER  3DF8
PRINT_STACK_RETURN  3E04
PROGLP              100A
PROMPT_END          41BE
PROMPT_START        418F
PUSH_STACK          3E2A
QUEUE_COUNTER       474E
REG_0               34DA
REG_1               34E8
REG_2               34F6
REG_3               3504
REG_4               3512
REG_5               3520
REG_6               352E
REG_7               353C
REPEAT              354A
REPEATMSG           4215
RETURN              11BE
SRC_LOOP_SHIFTING   38C8
SRC_MASKING_NEXT    38D6
SRC_MODE            319A
SRC_REGISTER        3482
SRC_REGISTER_FORMAT  4751
STACK               7000
STACK_HEX_CHAR      1230
STACK_HEX_CONT      1234
STACK_HEX_LOOP      1216
START               1004
START_ADDR          1052
S_ADDR_HX           4394
TEMP_REGISTER_FORMAT  4752
TERMINATE           3EA8
TESTING             1036
TMPINPUT            439F
TMPOUTPUT           43EF
VAR_BYTE_END        475A
VAR_BYTE_START      4756
VAR_LONG_ADDRESS_MODE_CHECK  4762
VAR_TEMP_CLEANCOPY  475E
VR_E_ADDR           4344
VR_S_ADDR           42F4
WELCOME             3EBA
WORDMODE            333E

00001004 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/9/2014 11:33:55 AM

00000000                             1  *---------------------------------------------------------------------------*
00000000                             2  * Title      : 68K Disassembler
00000000                             3  * Written by : Team Circle
00000000                             4  * Date       : 12/05/14
00000000                             5  * Description: Scans a section of memory and converts its
00000000                             6  *              contents to a listing of valid assembly 
00000000                             7  *              language instructions
00000000                             8  *---------------------------------------------------------------------------*
00000000                             9  
00000000                            10  *---------------------------------------------------------------------------*
00000000                            11  * System Equates                                                 
00000000                            12  *---------------------------------------------------------------------------*
00000000  =0000000D                 13  CR          EQU     $0D                     * ASCII for Carriage Return
00000000  =0000000A                 14  LF          EQU     $0A                     * ASCII for Line Feed 
00000000  =00007000                 15  STACK       EQU     $7000                   * Initial Stack Pointer                         
00000000                            16              
00000000                            17  *---------------------------------------------------------------------------*
00000000                            18  * Reserved Registers
00000000                            19  *---------------------------------------------------------------------------*  
00000000                            20  * D0 - I/O
00000000                            21  * D1 - Temporary storage of processing data
00000000                            22  * D3 - [PUSH_STACK]
00000000                            23  * D4 - Opcode size (0 - byte; 1- word; 2-long)
00000000                            24  * D5 - Processing data
00000000                            25  * D6 - Loop counter to print 30 lines
00000000                            26  * D7 - Error flag
00000000                            27  * A2 - [STACK POINTER]
00000000                            28  * A5 - Processing address in hex
00000000                            29  
00000000                            30  *---------------------------------------------------------------------------*
00000000                            31  * Start and loop program
00000000                            32  *---------------------------------------------------------------------------*  
00001000                            33              ORG     $1000
00001000  4FF8 7000                 34              LEA     STACK,SP
00001004                            35  START:            
00001004  4EB9 00001028             36              JSR     INTRO                 
0000100A  4EB9 0000105C             37  PROGLP      JSR     START_ADDR
00001010  4EB9 000010AE             38              JSR     END_ADDR
00001016  43F9 000039B4             39              LEA     ENDLINE_M,A1           * Add a new line
0000101C  103C 000E                 40              MOVE.B  #14, D0                  * Display A1
00001020  4E4F                      41              TRAP    #15
00001022                            42              
00001022  4EF9 0000126C             43              JMP     MAIN
00001028                            44              
00001028                            45  *---------------------------------------------------------------------------*
00001028                            46  * INTRO: Display the introduction of the program
00001028                            47  *---------------------------------------------------------------------------*
00001028  43F9 000034D2             48  INTRO       LEA     WELCOME,A1              * Load PROMPT_START
0000102E  103C 000E                 49              MOVE.B  #14,D0                  * Display A1
00001032  4E4F                      50              TRAP    #15
00001034  4E75                      51              RTS
00001036                            52  TESTING     
00001036  948A                      53              SUB.L   A2,D2
00001038  9693                      54              SUB.L  (A3),D3
0000103A  989C                      55              SUB.L  (A4)+,D4
0000103C  9AA5                      56              SUB.L  -(A5),D5
0000103E  9CB8 3331                 57              SUB.L  $3331,D6
00001042  9EB9 44444441             58              SUB.L  $44444441,D7
00001048                            59              
00001048  95C2                      60              SUB.L  D2,A2
0000104A  9793                      61              SUB.L  D3,(A3)
0000104C  999C                      62              SUB.L  D4,(A4)+
0000104E  9BA5                      63              SUB.L  D5,-(A5)
00001050  9DB8 3331                 64              SUB.L  D6,$3331
00001054  9FB9 44444441             65              SUB.L  D7,$44444441
0000105A                            66  
0000105A                            67  
0000105A                            68              
0000105A  4E75                      69              RTS
0000105C                            70  *---------------------------------------------------------------------------*
0000105C                            71  * START_ADDR: Compute the starting address
0000105C                            72  *---------------------------------------------------------------------------*
0000105C                            73  START_ADDR
0000105C                            74              * Output
0000105C  43F9 000037A7             75              LEA     PROMPT_START,A1         * Load PROMPT_START 
00001062  103C 000E                 76              MOVE.B  #14,D0                  * Display PROMPT_START
00001066  4E4F                      77              TRAP    #15
00001068                            78      
00001068                            79              * Input
00001068  43F9 0000390C             80              LEA     VR_S_ADDR,A1            * Load VR_S_ADDR
0000106E  103C 0002                 81              MOVE.B  #2,D0                   * Ask user for input
00001072  4E4F                      82              TRAP    #15
00001074                            83              
00001074                            84              * Error Checking (length)
00001074  0C01 0000                 85              CMPI.B  #0, D1                  * Check if input length <= 0
00001078  6F00 0098                 86              BLE     ERROR_1
0000107C  0C01 0008                 87              CMPI.B  #8, D1                  * Check if input length > 8
00001080  6E00 0090                 88              BGT     ERROR_1
00001084                            89              
00001084                            90              * Conversion & Storage
00001084  4EB9 00001162             91              JSR     ASCII2HEX               * Jump to ASCII2HEX
0000108A  0C07 0001                 92              CMPI.B  #1, D7                  * Check for error
0000108E  6700 0082                 93              BEQ     ERROR_1                 
00001092  23C1 000039AC             94              MOVE.L  D1, S_ADDR_HX           * Move the result to S_ADDR_HX 
00001098                            95              
00001098                            96              * Error Checking (Odd)
00001098  43F9 000039AC             97              LEA     S_ADDR_HX, A1           * Load 'S_ADDR_HX' for odd error
0000109E  4EB9 00001250             98              JSR     IS_ODD                  * Check if the input address is odd
000010A4  0C07 0001                 99              CMPI.B  #1, D7                  * Check for error
000010A8  6700 0088                100              BEQ     ERROR_3
000010AC                           101              
000010AC                           102              * Return
000010AC  4E75                     103              RTS     
000010AE                           104  *---------------------------------------------------------------------------*
000010AE                           105  * END_ADDR: Compute the ending address
000010AE                           106  *---------------------------------------------------------------------------*
000010AE                           107  END_ADDR
000010AE                           108              * Output
000010AE  43F9 000037D6            109              LEA     PROMPT_END,A1           * Load PROMPT_END
000010B4  103C 000E                110              MOVE.B  #14,D0                  * Display PROMPT_END
000010B8  4E4F                     111              TRAP    #15
000010BA                           112  
000010BA                           113              * Input
000010BA  43F9 0000395C            114              LEA     VR_E_ADDR,A1            * Load VR_E_ADDR
000010C0  103C 0002                115              MOVE.B  #2,D0                   * Ask user for input
000010C4  4E4F                     116              TRAP    #15
000010C6                           117              
000010C6                           118              * Error Checking (length)
000010C6  0C01 0000                119              CMPI.B  #0, D1                  * Check if input length <= 0
000010CA  6F00 0056                120              BLE     ERROR_2
000010CE  0C01 0008                121              CMPI.B  #8, D1                  * Check if input length > 8
000010D2  6E00 004E                122              BGT     ERROR_2
000010D6                           123              
000010D6                           124              * Conversion & Storage
000010D6  4EB9 00001162            125              JSR     ASCII2HEX               * Jump to ASCII2HEX
000010DC  0C07 0001                126              CMPI.B  #1, D7                  * Check for error
000010E0  6700 0040                127              BEQ     ERROR_2
000010E4  23C1 000039B0            128              MOVE.L  D1, E_ADDR_HX           * Move the result to E_ADDR_HX
000010EA                           129              
000010EA                           130              * Error Checking (start > end case)
000010EA  2439 000039AC            131              MOVE.L  S_ADDR_HX, D2           * Move the starting address to D2
000010F0  B282                     132              CMP.L   D2, D1                  * Compare starting and ending address
000010F2  6300 005E                133              BLS     ERROR_5                 * Go to ERROR_5 if ending < starting
000010F6                           134              
000010F6                           135              * Error Checking (Odd case)
000010F6  43F9 000039B0            136              LEA     E_ADDR_HX, A1           * Move the ending address
000010FC  4EB9 00001250            137              JSR     IS_ODD                  * Go to IS_ODD for odd address checking
00001102  0C07 0001                138              CMPI.B  #1, D7                  * Check for an error flag
00001106  6700 003A                139              BEQ     ERROR_4
0000110A                           140              
0000110A                           141              * Inputs are valid
0000110A  2A79 000039AC            142              MOVE.L  S_ADDR_HX, A5           * Store the valid input in A5
00001110                           143              
00001110  4E75                     144              RTS
00001112                           145              
00001112                           146  *---------------------------------------------------------------------------*
00001112                           147  * ERROR_1: Address error (Invalid starting address)
00001112                           148  *---------------------------------------------------------------------------*
00001112                           149  ERROR_1
00001112  43F9 0000389B            150              LEA     ERRMSG_1, A1            * Load ERRMSG_1
00001118  103C 000E                151              MOVE.B  #14, D0                 * Display ERRMSG_1
0000111C  4E4F                     152              TRAP    #15
0000111E  4EF8 105C                153              JMP     START_ADDR              * Jump to START_ADDR
00001122                           154      
00001122                           155  *---------------------------------------------------------------------------*
00001122                           156  * ERROR_2: Address error (Invalid ending address)
00001122                           157  *---------------------------------------------------------------------------*
00001122                           158  ERROR_2
00001122  43F9 0000389B            159              LEA     ERRMSG_1, A1            * Load ERRMSG_1
00001128  103C 000E                160              MOVE.B  #14, D0                 * Display ERRMSG_1
0000112C  4E4F                     161              TRAP    #15
0000112E  4EF8 10AE                162              JMP     END_ADDR                * Jump to END_ADDR
00001132                           163  
00001132                           164  *---------------------------------------------------------------------------*
00001132                           165  * ERROR_3: Address error (Odd starting address)
00001132                           166  *---------------------------------------------------------------------------*
00001132                           167  ERROR_3
00001132  43F9 000038BA            168              LEA     ERRMSG_3, A1
00001138  103C 000E                169              MOVE.B  #14, D0
0000113C  4E4F                     170              TRAP    #15
0000113E  4EF8 105C                171              JMP     START_ADDR
00001142                           172     
00001142                           173  *---------------------------------------------------------------------------*
00001142                           174  * ERROR_4: Address error (Odd ending address)
00001142                           175  *---------------------------------------------------------------------------*         
00001142                           176  ERROR_4
00001142  43F9 000038BA            177              LEA     ERRMSG_3, A1
00001148  103C 000E                178              MOVE.B  #14, D0
0000114C  4E4F                     179              TRAP    #15
0000114E  4EF8 10AE                180              JMP     END_ADDR
00001152                           181            
00001152                           182  *---------------------------------------------------------------------------*
00001152                           183  * ERROR_3: Address error (Ending address is less than starting address)
00001152                           184  *---------------------------------------------------------------------------*
00001152                           185  ERROR_5
00001152  43F9 000038DF            186              LEA     ERRMSG_5, A1
00001158  103C 000E                187              MOVE.B  #14, D0
0000115C  4E4F                     188              TRAP    #15
0000115E  4EF8 10AE                189              JMP     END_ADDR
00001162                           190    
00001162                           191  *---------------------------------------------------------------------------*
00001162                           192  * ASCII2HEX: Convert ASCii to Hexadecimal
00001162                           193  * Reserved registers: A1 = Source, D1 = Destination, D2 = Byte, D7 = Error
00001162                           194  *---------------------------------------------------------------------------*
00001162  4281                     195  ASCII2HEX   CLR.L   D1                      * Clear the destination 
00001164  4287                     196              CLR.L   D7                      * Set the error flag to 0
00001166  4282                     197              CLR.L   D2                      * Clear D2 for temp storage
00001168                           198              
00001168  1419                     199  ASC2HXLP    MOVE.B  (A1)+, D2               * Read a byte to D2
0000116A  0C02 0000                200              CMPI.B  #0, D2                  * Check for NULL (indicates the end of source)
0000116E  6700 0058                201              BEQ     RETURN                  * If it's NULL, go to return
00001172  0C02 0066                202              CMPI.B  #102, D2                * Decimal ASCII value of f is 102
00001176  6E00 004C                203              BGT     ASC_ERR                 * ASCII > f (invalid input) 
0000117A  0C02 0061                204              CMPI.B  #97, D2                 * Decimal ASCII value of a is 97
0000117E  6C00 0026                205              BGE     ASC_LOW                 * ASCII >= a (valid input)
00001182  0C02 0046                206              CMPI.B  #70, D2                 * Decimal ASCII value of F is 70
00001186  6E00 003C                207              BGT     ASC_ERR                 * ASCII > F (invalid input)
0000118A  0C02 0041                208              CMPI.B  #65, D2                 * Decimal ASCII value of A is 65
0000118E  6C00 001E                209              BGE     ASC_UPP                 * ASCII >= A (valid input)
00001192  0C02 0039                210              CMPI.B  #57, D2                 * Decimal value of 9 is 57
00001196  6E00 002C                211              BGT     ASC_ERR                 * ASCII > 9 (invalid input)
0000119A  0C02 0030                212              CMPI.B  #48, D2                 * Decimal ASCII value of 0 is 48
0000119E  6C00 0016                213              BGE     ASC_NUM                 * ASCII >= 0 (valid input)
000011A2  6000 0020                214              BRA     ASC_ERR                 * Invalid input
000011A6                           215  
000011A6  0442 0057                216  ASC_LOW     SUBI    #87, D2                 * Convert the ASCII input to Hex
000011AA  6000 0012                217              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011AE                           218              
000011AE  0442 0037                219  ASC_UPP     SUBI    #55, D2                 * Convert the ASCII input to Hex
000011B2  6000 000A                220              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011B6                           221              
000011B6  0442 0030                222  ASC_NUM     SUBI    #48, D2                 * Convert the ASCII input to Hex
000011BA  6000 0002                223              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011BE                           224              
000011BE  E981                     225  ASC_SFT     ASL.L   #4, D1                  * Shift the dest to left by 4 bits
000011C0  D202                     226              ADD.B   D2, D1                  * Add the converted input to D1
000011C2  60A4                     227              BRA     ASC2HXLP                * Loop
000011C4                           228  
000011C4  1E3C 0001                229  ASC_ERR     MOVE.B  #1, D7                  * Set the error flag to 1            
000011C8  4E75                     230  RETURN      RTS     
000011CA                           231  
000011CA                           232  *---------------------------------------------------------------------------*
000011CA                           233  * HEX2ASCII: Convert Hexadecimal to ASCii 
000011CA                           234  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
000011CA                           235  *---------------------------------------------------------------------------*
000011CA  0C02 0008                236  HEX2ASCII   CMPI.B  #8, D2                  * Check to see if the size is long
000011CE  6700 000E                237              BEQ     HEX_LOOP
000011D2  4841                     238              SWAP    D1
000011D4  0C02 0002                239              CMPI.B  #2,D2
000011D8  6600 0004                240              BNE     HEX_LOOP
000011DC  E189                     241              LSL.L   #8,D1
000011DE                           242             
000011DE  E999                     243  HEX_LOOP    ROL.L   #4, D1                  * Roll D1 to left
000011E0  2601                     244              MOVE.L  D1, D3                  * Move D1 to D3
000011E2  0283 0000000F            245              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
000011E8  0C03 0009                246              CMPI.B  #9, D3                  * Compare te digit
000011EC  6E00 000A                247              BGT     HEX_CHAR              
000011F0  0603 0030                248              ADDI.B  #48,D3                  * Add 48 for numerical output
000011F4  6000 0006                249              BRA     HEX_CONT
000011F8                           250              
000011F8  0603 0037                251  HEX_CHAR    ADDI.B  #55,D3                  * Add 55 for character output
000011FC                           252  
000011FC  12C3                     253  HEX_CONT    MOVE.B  D3, (A1)+               * Place into A1
000011FE  5342                     254              SUBI    #1, D2                  * Decrement the size
00001200  0C02 0000                255              CMPI.B  #0, D2                  * Check if D2 is 0
00001204  66D8                     256              BNE     HEX_LOOP                * Loop
00001206  12BC 0000                257              MOVE.B  #$0,(A1)                * Null terminator
0000120A  4E75                     258              RTS
0000120C                           259  *---------------------------------------------------------------------------*
0000120C                           260  * HEX2ASCII2STACK: Convert Hexadecimal to ASCii 
0000120C                           261  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
0000120C                           262  *---------------------------------------------------------------------------*
0000120C                           263  HEX2ASCII2STACK
0000120C  0C02 0008                264              CMPI.B  #8, D2                  * Check to see if the size is long
00001210  6700 000E                265              BEQ     STACK_HEX_LOOP
00001214  4841                     266              SWAP    D1
00001216  0C02 0002                267              CMPI.B  #2,D2
0000121A  6600 0004                268              BNE     STACK_HEX_LOOP
0000121E  E189                     269              LSL.L   #8,D1
00001220                           270             
00001220                           271  STACK_HEX_LOOP    
00001220  E999                     272              ROL.L   #4, D1                  * Roll D1 to left
00001222  2601                     273              MOVE.L  D1, D3                  * Move D1 to D3
00001224  0283 0000000F            274              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
0000122A  0C03 0009                275              CMPI.B  #9, D3                  * Compare te digit
0000122E  6E00 000A                276              BGT     STACK_HEX_CHAR              
00001232  0603 0030                277              ADDI.B  #48,D3                  * Add 48 for numerical output
00001236  6000 0006                278              BRA     STACK_HEX_CONT
0000123A                           279              
0000123A                           280  STACK_HEX_CHAR    
0000123A  0603 0037                281              ADDI.B  #55,D3                  * Add 55 for character output
0000123E                           282  
0000123E                           283  STACK_HEX_CONT    
0000123E  6100 2202                284              BSR     PUSH_STACK              *PLACE INTO STACK
00001242  5342                     285              SUBI    #1, D2                  * Decrement the size
00001244  0C02 0000                286              CMPI.B  #0, D2                  * Check if D2 is 0
00001248  66D6                     287              BNE     STACK_HEX_LOOP                * Loop
0000124A  12BC 0000                288              MOVE.B  #$0,(A1)                * Null terminator
0000124E  4E75                     289              RTS
00001250                           290  
00001250                           291  
00001250                           292  *---------------------------------------------------------------------------*
00001250                           293  * IS_ODD: Check whether the source address is odd
00001250                           294  * Reserved registers: A1 = Source, D1 = Result, D7 = error flag
00001250                           295  *---------------------------------------------------------------------------*
00001250  4281                     296  IS_ODD      CLR.L   D1                      * Clear the result
00001252  4287                     297              CLR.L   D7                      * Set the error flag to 0
00001254  2211                     298              MOVE.L  (A1),D1                * Temp store the checking address to D1
00001256  82FC 0002                299              DIVU    #2, D1                  * Divide the result by 2
0000125A  4841                     300              SWAP    D1                      * Swap remainder with quotient
0000125C  0C01 0001                301              CMPI.B  #1, D1                  * Check for error
00001260  6700 0004                302              BEQ     IS_ODD_ERR
00001264  4E75                     303              RTS
00001266                           304              
00001266  1E3C 0001                305  IS_ODD_ERR  MOVE.B  #1, D7
0000126A  4E75                     306              RTS
0000126C                           307  
0000126C                           308  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*
0000126C                           309  * MAIN                    
0000126C                           310  * A2: STACK POINTER                                                      MAIN                                                                        MAIN
0000126C                           311  * A5: Processing address
0000126C                           312  *
0000126C                           313  * D3: USED FOR PUSHING INTO STACK
0000126C                           314  *     To push into stack => MOVE.W #DATA,D3 
0000126C                           315  *                           BSR    PUSH_STACK
0000126C                           316  *     To print stack     => BSR    PRINT_STACK 
0000126C                           317  *     To clear stack     => BSR    CLEAR_STACK
0000126C                           318  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*  
0000126C                           319  MAIN        
0000126C                           320              *initialize stack pointer
0000126C  33FC 0000 00003D64       321              MOVE.W  #0,COUNTER
00001274  347C 7000                322              MOVEA.W #STACK,A2
00001278  163C 0020                323              MOVE.B  #' ',D3
0000127C  6100 21C4                324              BSR     PUSH_STACK
00001280  6100 21C0                325              BSR     PUSH_STACK
00001284  6100 21BC                326              BSR     PUSH_STACK
00001288                           327              
00001288                           328              * clear registers for temp storage
00001288  4280                     329              CLR.L   D0                   
0000128A  4281                     330              CLR.L   D1                   
0000128C  227C 00000000            331              MOVEA.L #0, A1                
00001292                           332              
00001292  220D                     333              MOVE.L  A5,D1                   * check to see if the address is fully read
00001294  23CD 000039AC            334              MOVE.L  A5,S_ADDR_HX
0000129A  B2B9 000039B0            335              CMP.L   E_ADDR_HX,D1
000012A0  6C00 18C0                336              BGE     REPEAT                  * go to repeat for user action
000012A4                           337  
000012A4  43F9 00003A07            338              LEA     TMPOUTPUT,A1            * allocate storage to hold output
000012AA  143C 0008                339              MOVE.B  #8,D2                   * set the output size
000012AE  4EB8 11CA                340              JSR     HEX2ASCII               
000012B2  43F9 00003A07            341              LEA     TMPOUTPUT,A1
000012B8  103C 000E                342              MOVE.B  #14,D0
000012BC  4E4F                     343              TRAP    #15
000012BE                           344              
000012BE  4285                     345              CLR.L    D5                      * clear the processing data
000012C0  3A1D                     346              MOVE.W  (A5)+,D5                 * copy the currently processing data in A5 over to D5
000012C2                           347                                               * advance the current instruction pointer to the next
000012C2                           348                                               * instruction in memory
000012C2                           349  *----------------------------------------*
000012C2                           350  * Registers          
000012C2                           351  * [D1] - COPY OF D5
000012C2                           352  * [D5] - DATA TO BE PROCESSED
000012C2                           353  * [D6] - COUNTER FOR LINES PROCESSED
000012C2                           354  *
000012C2                           355  * [D4]      - ERROR FLAG BEFORE PRINTING
000012C2                           356  * [STACK]   - PRINTS PROCESS DATA
000012C2                           357  * [COUNTER] - KEEPS TRACK OF STACK INCREMENT
000012C2                           358  *
000012C2                           359  * [A1] - USED FOR JUMPING/PRINTING
000012C2                           360  *
000012C2                           361  *----------------------------------------*
000012C2                           362  
000012C2                           363              
000012C2                           364              *Processing the first 4 most significant bits 
000012C2  2205                     365              MOVE.L  D5,D1                    * copy the current processing data to D1
000012C4  143C 000C                366              MOVE.B  #12,D2                   * shift to right by 12 bits
000012C8  E469                     367              LSR.W   D2,D1                    * [D2] Temporarily used D2 for shifting bits
000012CA  C2FC 0006                368              MULU    #6,D1                    * form offset
000012CE  43F9 0000133C            369              LEA     JMPTABLE,A1              * index into table
000012D4  4EB1 1000                370              JSR     0(A1,D1)                 * jump indirect with index
000012D8                           371              
000012D8                           372              *SECURED EA*
000012D8  B83C 0001                373              CMP.B   #1,D4                    * ERROR FLAG CHECK [ERROR WHEN D4 == 1]
000012DC  6600 0012                374              BNE     OUTPUT_PROCESSED_DATA    * PRINTS PROCESSED OP-CODE & EA
000012E0  6100 01E8                375              BSR     OP_DATA                  * PRINT ERROR MESSAGE "DATA"
000012E4  6100 21C8                376              BSR     CLEAR_STACK              * CLEARS THE STACK 
000012E8  183C 0000                377              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
000012EC  6000 0022                378              BRA     DISPLAY_30_LINES         * GO TO LAST STEP
000012F0                           379             
000012F0                           380  OUTPUT_PROCESSED_DATA       
000012F0  163C 000D                381              MOVE.B  #$D,D3                  *carriage return
000012F4  6100 214C                382              BSR     PUSH_STACK
000012F8  163C 000A                383              MOVE.B  #$A,D3                  *new line feed
000012FC  6100 2144                384              BSR     PUSH_STACK
00001300  163C 0000                385              MOVE.B  #$0,D3                  *null
00001304  6100 213C                386              BSR     PUSH_STACK
00001308                           387       
00001308  6100 2114                388              BSR     PRINT_QUEUE
0000130C  183C 0000                389              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
00001310                           390  DISPLAY_30_LINES
00001310                           391              * display 30 lines per page
00001310  5206                     392              ADDI.B  #1,D6
00001312  0C06 001E                393              CMPI.B  #30,D6
00001316  6C00 0006                394              BGE     NEXTLINES
0000131A  6000 FF50                395              BRA     MAIN
0000131E                           396            
0000131E                           397  *---------------------------------------------------------------------------*
0000131E                           398  * NEXTLINES: receive input from user to print the next 30 lines
0000131E                           399  *---------------------------------------------------------------------------*  
0000131E  4206                     400  NEXTLINES   CLR.B   D6
00001320  43F9 00003803            401              LEA     DISP_NEXT,A1
00001326  103C 000E                402              MOVE.B  #14,D0
0000132A  4E4F                     403              TRAP    #15
0000132C  43F9 000039B7            404              LEA     TMPINPUT,A1
00001332  103C 0002                405              MOVE.B  #2,D0
00001336  4E4F                     406              TRAP    #15
00001338  4EF8 126C                407              JMP     MAIN
0000133C                           408    
0000133C                           409  *---------------------------------------------------------------------------*
0000133C                           410  * JMPTABLE: OP code jump/branch table used to decode and display opcodes
0000133C                           411  *---------------------------------------------------------------------------*  
0000133C  4EF9 0000139C            412  JMPTABLE    JMP     OP0000  * CMPI/ORI/BTST/EORI/SUBI/BTST
00001342  4EF9 000015C2            413              JMP     OP0001  * MOVE.B                                        *FINISHED - JOSEPH
00001348  4EF9 00001630            414              JMP     OP0010  * MOVE.L/MOVEA.L                                *FINISHED - JOSEPH
0000134E  4EF9 0000172E            415              JMP     OP0011  * MOVE.W/MOVEA.W
00001354  4EF9 0000182A            416              JMP     OP0100  * MOVEM/LEA/NEG/NOT/JSR/RTS
0000135A  4EF9 000019C4            417              JMP     OP0101  * ADDQ  
00001360  4EF9 00001A40            418              JMP     OP0110  * BRA/Bcc (BEQ/BNE/BLT/BHI)
00001366  4EF9 00001ACE            419              JMP     OP0111  * MOVEQ (unassigned)
0000136C  4EF9 00001AD2            420              JMP     OP1000  * DIVS
00001372  4EF9 00001B0E            421              JMP     OP1001  * SUB/SUBA                                      *Working on - JOSEPH
00001378  4EF9 00001ECA            422              JMP     OP1010  * Unassigned 
0000137E  4EF9 00001ECE            423              JMP     OP1011  * CMP/EOR/CMPA
00001384  4EF9 00001FCA            424              JMP     OP1100  * MULS/AND
0000138A  4EF9 00002066            425              JMP     OP1101  * ADD/ADDA                                      *FINISHED - JOSEPH
00001390  4EF9 00002442            426              JMP     OP1110  * LSR/LSL/ASR/ASL/ROL/ROR
00001396  4EF9 000026F0            427              JMP     OP1111  * Special/Reserved
0000139C                           428              
0000139C                           429  *---------------------------------------------------------------------------*
0000139C                           430  * OP0000: decode CMPI/ORI/BTST/SUBI/EORI
0000139C                           431  *---------------------------------------------------------------------------*           
0000139C                           432  OP0000                                                                                  
0000139C  4281                     433              CLR.L   D1          * to temporarily store the address to process
0000139E  4280                     434              CLR.L   D0  
000013A0  4284                     435              CLR.L   D4                 
000013A2  227C 00000000            436              MOVEA.L #0, A1                
000013A8                           437              * Check for ORI (0000 0000 xx (size) xxx (EA mode) xxx(EA reg)
000013A8                           438              * Check if bit 11,10,9,8 are 0000)
000013A8  2205                     439              MOVE.L  D5,D1
000013AA  0281 00000F00            440              ANDI.L  #$0F00,D1
000013B0  0C81 00000000            441              CMPI.L  #$0000,D1   * if they are 0000, it is ORI
000013B6  6700 01B4                442              BEQ     OP_ORI
000013BA                           443  
000013BA                           444              * check for CMPI (0000 1100 xx (size) xxx (EA mode) xxx (EA reg)
000013BA                           445              * check if bit 11,10,9,8 are 1100
000013BA  4281                     446              CLR.L   D1
000013BC  2205                     447              MOVE.L  D5,D1
000013BE  0281 00000F00            448              ANDI.L  #$0F00,D1
000013C4  0C81 00000C00            449              CMPI.L  #$0C00,D1
000013CA  6700 014A                450              BEQ     OP_CMPI
000013CE                           451              
000013CE                           452              * check for SUBI
000013CE  4281                     453              CLR.L   D1
000013D0  2205                     454              MOVE.L  D5,D1
000013D2  0281 00000F00            455              ANDI.L  #$0F00,D1
000013D8  0C81 00000400            456              CMPI.L  #$0400,D1
000013DE  6700 0094                457              BEQ     OP_SUBI
000013E2                           458              
000013E2                           459              * check for EORI
000013E2  4281                     460              CLR.L   D1
000013E4  2205                     461              MOVE.L  D5,D1
000013E6  0281 00000F00            462              ANDI.L  #$0F00,D1
000013EC  0C81 00000A00            463              CMPI.L  #$0A00,D1
000013F2  6700 002A                464              BEQ     OP_EORI
000013F6                           465              
000013F6                           466              * check for BTST
000013F6  4281                     467              CLR.L   D1
000013F8  2205                     468              MOVE.L  D5,D1
000013FA  EA99                     469              ROR.L   #5,D1
000013FC  0281 00000008            470              ANDI.L  #$8,D1
00001402  0C01 0008                471              CMPI.B  #8,D1
00001406  6700 0008                472              BEQ     OP_BTST
0000140A                           473  
0000140A                           474              * OP0000 series other than ORI/CMPI/BTST/EORI
0000140A  4EF9 000014CA            475              JMP     OP_DATA
00001410                           476              
00001410                           477  *---------------------------------------------------------------------------*
00001410                           478  * OP_BTST: display BTST
00001410                           479  *---------------------------------------------------------------------------* 
00001410  43F9 00003A90            480  OP_BTST     LEA     DISP_BTST,A1
00001416  103C 000E                481              MOVE.B  #14,D0
0000141A  4E4F                     482              TRAP    #15
0000141C  4E75                     483              RTS
0000141E                           484  
0000141E                           485  *---------------------------------------------------------------------------*
0000141E                           486  * OP_EORI: decode and display EORI
0000141E                           487  *---------------------------------------------------------------------------* 
0000141E                           488  OP_EORI
0000141E  4281                     489              CLR.L   D1
00001420  4284                     490              CLR.L   D4
00001422  2205                     491              MOVE.L  D5,D1
00001424  EC99                     492              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001426  0C01 0000                493              CMPI.B  #0,D1
0000142A  6700 0012                494              BEQ     OP_EORI_B    * size is byte
0000142E  0C01 0001                495              CMPI.B  #1,D1
00001432  6700 001C                496              BEQ     OP_EORI_W    * size is word
00001436  0C01 0002                497              CMPI.B  #2,D1
0000143A  6700 0026                498              BEQ     OP_EORI_L    * size is long
0000143E                           499  
0000143E                           500  OP_EORI_B    * size is byte    
0000143E  183C 0000                501              MOVE.B  #0,D4
00001442  43F9 00003A72            502              LEA     DISP_EORI_B,A1
00001448  103C 000E                503              MOVE.B  #14,D0
0000144C  4E4F                     504              TRAP    #15
0000144E  4E75                     505              RTS
00001450                           506              
00001450                           507  OP_EORI_W    * size is word
00001450  183C 0001                508              MOVE.B  #1,D4
00001454  43F9 00003A7C            509              LEA     DISP_EORI_W,A1
0000145A  103C 000E                510              MOVE.B  #14,D0
0000145E  4E4F                     511              TRAP    #15
00001460  4E75                     512              RTS
00001462                           513              
00001462                           514  OP_EORI_L    * size is long
00001462  183C 0002                515              MOVE.B  #2,D4
00001466  43F9 00003A86            516              LEA     DISP_EORI_L,A1
0000146C  103C 000E                517              MOVE.B  #14,D0
00001470  4E4F                     518              TRAP    #15
00001472  4E75                     519              RTS
00001474                           520              
00001474                           521  *---------------------------------------------------------------------------*
00001474                           522  * OP_SUBI: decode SUBI.B/.W/.L
00001474                           523  *---------------------------------------------------------------------------* 
00001474                           524  OP_SUBI
00001474  4281                     525              CLR.L   D1
00001476  4284                     526              CLR.L   D4
00001478  2205                     527              MOVE.L  D5,D1
0000147A  EC99                     528              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
0000147C  0C01 0000                529              CMPI.B  #0,D1
00001480  6700 0012                530              BEQ     OP_SUBI_B    * size is byte
00001484  0C01 0001                531              CMPI.B  #1,D1
00001488  6700 001C                532              BEQ     OP_SUBI_W    * size is word
0000148C  0C01 0002                533              CMPI.B  #2,D1
00001490  6700 0026                534              BEQ     OP_SUBI_L    * size is long
00001494                           535  
00001494                           536  OP_SUBI_B    * size is byte    
00001494  183C 0000                537              MOVE.B  #0,D4
00001498  43F9 00003B7E            538              LEA     DISP_SUBI_B,A1
0000149E  103C 000E                539              MOVE.B  #14,D0
000014A2  4E4F                     540              TRAP    #15
000014A4  4E75                     541              RTS
000014A6                           542              
000014A6                           543  OP_SUBI_W    * size is word
000014A6  183C 0001                544              MOVE.B  #1,D4
000014AA  43F9 00003B88            545              LEA     DISP_SUBI_W,A1
000014B0  103C 000E                546              MOVE.B  #14,D0
000014B4  4E4F                     547              TRAP    #15
000014B6  4E75                     548              RTS
000014B8                           549              
000014B8                           550  OP_SUBI_L    * size is long
000014B8  183C 0002                551              MOVE.B  #2,D4
000014BC  43F9 00003B92            552              LEA     DISP_SUBI_L,A1
000014C2  103C 000E                553              MOVE.B  #14,D0
000014C6  4E4F                     554              TRAP    #15
000014C8  4E75                     555              RTS
000014CA                           556              
000014CA                           557  *---------------------------------------------------------------------------*
000014CA                           558  * OP_DATA : unidentified opcode
000014CA                           559  *---------------------------------------------------------------------------* 
000014CA                           560  OP_DATA
000014CA  4280                     561              CLR.L   D0                   
000014CC  4281                     562              CLR.L   D1     
000014CE  4284                     563              CLR.L   D4                    
000014D0  227C 00000000            564              MOVEA.L #0, A1             
000014D6  4287                     565              CLR.L   D7
000014D8  1E3C 0001                566              MOVE.B  #1,D7                   * error flag is true
000014DC                           567              
000014DC  43F9 00003AB6            568              LEA     DISP_DATA,A1
000014E2  103C 000E                569              MOVE.B  #14,D0
000014E6  4E4F                     570              TRAP    #15
000014E8                           571              
000014E8  4EF9 000014EE            572              JMP     EA_DATA
000014EE                           573             
000014EE                           574             
000014EE                           575  *---------------------------------------------------------------------------*
000014EE                           576  * EA_DATA
000014EE                           577  *---------------------------------------------------------------------------*       
000014EE  43F9 00003A07            578  EA_DATA     LEA     TMPOUTPUT,A1    * load the temporarily stored output address
000014F4  2205                     579              MOVE.L  D5,D1           * transfer the processing data to D1
000014F6  7404                     580              MOVE.L  #4,D2           * set to word size
000014F8  4EB8 11CA                581              JSR     HEX2ASCII       * prepare output in ascii
000014FC  43F9 00003D29            582              LEA     DISP_HEX,A1     * display $ symbol
00001502  103C 000E                583              MOVE.B  #14,D0      
00001506  4E4F                     584              TRAP    #15
00001508  43F9 00003A07            585              LEA     TMPOUTPUT,A1    * display with a new line
0000150E  103C 000D                586              MOVE.B  #13,D0
00001512  4E4F                     587              TRAP    #15
00001514                           588  
00001514  4E75                     589              RTS
00001516                           590              
00001516                           591  *---------------------------------------------------------------------------*
00001516                           592  * OP_CMPI : decode CMPI and its size
00001516                           593  *---------------------------------------------------------------------------*          
00001516                           594  OP_CMPI
00001516  4281                     595              CLR.L   D1
00001518  4284                     596              CLR.L   D4
0000151A  2205                     597              MOVE.L  D5,D1
0000151C  EC99                     598              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
0000151E  0C01 0000                599              CMPI.B  #0,D1
00001522  6700 0012                600              BEQ     OP_CMPI_B    * size is byte
00001526  0C01 0001                601              CMPI.B  #1,D1
0000152A  6700 001C                602              BEQ     OP_CMPI_W    * size is word
0000152E  0C01 0002                603              CMPI.B  #2,D1
00001532  6700 0026                604              BEQ     OP_CMPI_L    * size is long
00001536                           605  
00001536                           606  OP_CMPI_B    * size is byte    
00001536  183C 0000                607              MOVE.B  #0,D4
0000153A  43F9 00003A98            608              LEA     DISP_CMPI_B,A1
00001540  103C 000E                609              MOVE.B  #14,D0
00001544  4E4F                     610              TRAP    #15
00001546  4E75                     611              RTS
00001548                           612              
00001548                           613  OP_CMPI_W    * size is word
00001548  183C 0001                614              MOVE.B  #1,D4
0000154C  43F9 00003AA2            615              LEA     DISP_CMPI_W,A1
00001552  103C 000E                616              MOVE.B  #14,D0
00001556  4E4F                     617              TRAP    #15
00001558  4E75                     618              RTS
0000155A                           619              
0000155A                           620  OP_CMPI_L    * size is long
0000155A  183C 0002                621              MOVE.B  #2,D4
0000155E  43F9 00003AAC            622              LEA     DISP_CMPI_L,A1
00001564  103C 000E                623              MOVE.B  #14,D0
00001568  4E4F                     624              TRAP    #15
0000156A  4E75                     625              RTS
0000156C                           626   
0000156C                           627  *---------------------------------------------------------------------------*
0000156C                           628  * OP_ORI : decode ORI and its size
0000156C                           629  *---------------------------------------------------------------------------* 
0000156C                           630  OP_ORI      
0000156C  4281                     631              CLR.L   D1
0000156E  4284                     632              CLR.L   D4
00001570  2205                     633              MOVE.L  D5,D1
00001572  EC99                     634              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001574  0C01 0000                635              CMPI.B  #0,D1
00001578  6700 0012                636              BEQ     OP_ORI_B    * size is byte
0000157C  0C01 0001                637              CMPI.B  #1,D1
00001580  6700 001C                638              BEQ     OP_ORI_W    * size is word
00001584  0C01 0002                639              CMPI.B  #2,D1
00001588  6700 0026                640              BEQ     OP_ORI_L    * size is long
0000158C                           641  
0000158C                           642  OP_ORI_B    * size is byte    
0000158C  183C 0000                643              MOVE.B  #0,D4
00001590  43F9 00003A57            644              LEA     DISP_ORI_B,A1
00001596  103C 000E                645              MOVE.B  #14,D0
0000159A  4E4F                     646              TRAP    #15
0000159C  4E75                     647              RTS
0000159E                           648              
0000159E                           649  OP_ORI_W    * size is word
0000159E  183C 0001                650              MOVE.B  #1,D4
000015A2  43F9 00003A60            651              LEA     DISP_ORI_W,A1
000015A8  103C 000E                652              MOVE.B  #14,D0
000015AC  4E4F                     653              TRAP    #15
000015AE  4E75                     654              RTS
000015B0                           655              
000015B0                           656  OP_ORI_L    * size is long
000015B0  183C 0002                657              MOVE.B  #2,D4
000015B4  43F9 00003A69            658              LEA     DISP_ORI_L,A1
000015BA  103C 000E                659              MOVE.B  #14,D0
000015BE  4E4F                     660              TRAP    #15
000015C0  4E75                     661              RTS
000015C2                           662          
000015C2                           663  *---------------------------------------------------------------------------*
000015C2                           664  * OP0001: MOVE.B
000015C2                           665  *---------------------------------------------------------------------------*
000015C2                           666  OP0001      
000015C2  4EF9 000015C8            667              JMP     OP_MOVE_B   * display MOVE.B
000015C8                           668              
000015C8                           669  *---------------------------------------------------------------------------*
000015C8                           670  * OP_MOVE_B: display MOVE_B and proceed to EA
000015C8                           671  *---------------------------------------------------------------------------*
000015C8                           672  OP_MOVE_B                                                                       
000015C8                           673             
000015C8                           674             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000015C8  13FC 0082 00003D68       675             MOVE.B   #$82,DEST_REGISTER_FORMAT
000015D0  13FC 0000 00003D69       676             MOVE.B   #$00,SRC_REGISTER_FORMAT
000015D8                           677             
000015D8                           678             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000015D8  13FC 00B9 00003D6B       679             MOVE.B   #$B9,GET_DST_START_END
000015E0  13FC 0020 00003D6C       680             MOVE.B   #$20,GET_SRC_START_END
000015E8                           681             
000015E8                           682              *CLEAR D3
000015E8  4283                     683              CLR.L   D3
000015EA                           684              *LOAD STACK WITH THIS OPMODE
000015EA  6100 1E56                685              BSR     PUSH_STACK
000015EE  163C 004D                686              MOVE.B  #'M',D3
000015F2  6100 1E4E                687              BSR     PUSH_STACK
000015F6  163C 004F                688              MOVE.B  #'O',D3
000015FA  6100 1E46                689              BSR     PUSH_STACK
000015FE  163C 0056                690              MOVE.B  #'V',D3
00001602  6100 1E3E                691              BSR     PUSH_STACK
00001606  163C 0045                692              MOVE.B  #'E',D3
0000160A  6100 1E36                693              BSR     PUSH_STACK
0000160E  163C 002E                694              MOVE.B  #'.',D3
00001612  6100 1E2E                695              BSR     PUSH_STACK
00001616  163C 0042                696              MOVE.B  #'B',D3
0000161A  6100 1E26                697              BSR     PUSH_STACK
0000161E                           698              
0000161E  6100 1584                699              BSR     GET_EA_EA_SRC
00001622  163C 002C                700              MOVE.B  #',',D3
00001626  6100 1E1A                701              BSR     PUSH_STACK
0000162A  6100 19A8                702              BSR     GET_EA_EA_DEST
0000162E                           703              
0000162E  4E75                     704              RTS
00001630                           705              
00001630                           706             
00001630                           707  *---------------------------------------------------------------------------*
00001630                           708  * OP0010: decode MOVE.L/MOVEA.L
00001630                           709  *---------------------------------------------------------------------------*
00001630                           710  OP0010      
00001630  183C 0002                711              MOVE.B  #2,D4
00001634  4280                     712              CLR.L   D0                     
00001636  4281                     713              CLR.L   D1                      
00001638  227C 00000000            714              MOVEA.L #0, A1                 
0000163E                           715              
0000163E  2205                     716              MOVE.L  D5,D1
00001640  EA99                     717              ROR.L   #5,D1
00001642  0281 0000000E            718              ANDI.L  #$E,D1
00001648  0C01 0002                719              CMPI.B  #2,D1
0000164C  6700 0070                720              BEQ     OP_MOVEA_L
00001650                           721  
00001650  4EF9 00001656            722              JMP     OP_MOVE_L
00001656                           723             
00001656                           724  
00001656                           725  *---------------------------------------------------------------------------*
00001656                           726  * OP_MOVE_L: display MOVE_L and proceed to EA
00001656                           727  *---------------------------------------------------------------------------*
00001656                           728  OP_MOVE_L   
00001656                           729             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001656  13FC 0082 00003D68       730             MOVE.B   #$82,DEST_REGISTER_FORMAT
0000165E  13FC 0000 00003D69       731             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001666                           732             
00001666                           733             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001666  13FC 00B9 00003D6B       734             MOVE.B   #$B9,GET_DST_START_END
0000166E  13FC 0020 00003D6C       735             MOVE.B   #$20,GET_SRC_START_END
00001676                           736             
00001676                           737              *CLEAR D3
00001676  4283                     738              CLR.L   D3
00001678                           739              *LOAD STACK WITH THIS OPMODE
00001678  6100 1DC8                740              BSR     PUSH_STACK
0000167C  163C 004D                741              MOVE.B  #'M',D3
00001680  6100 1DC0                742              BSR     PUSH_STACK
00001684  163C 004F                743              MOVE.B  #'O',D3
00001688  6100 1DB8                744              BSR     PUSH_STACK
0000168C  163C 0056                745              MOVE.B  #'V',D3
00001690  6100 1DB0                746              BSR     PUSH_STACK
00001694  163C 0045                747              MOVE.B  #'E',D3
00001698  6100 1DA8                748              BSR     PUSH_STACK
0000169C  163C 002E                749              MOVE.B  #'.',D3
000016A0  6100 1DA0                750              BSR     PUSH_STACK
000016A4  163C 004C                751              MOVE.B  #'L',D3
000016A8  6100 1D98                752              BSR     PUSH_STACK
000016AC                           753              
000016AC  6100 14F6                754              BSR     GET_EA_EA_SRC
000016B0  163C 002C                755              MOVE.B  #',',D3
000016B4  6100 1D8C                756              BSR     PUSH_STACK
000016B8  6100 191A                757              BSR     GET_EA_EA_DEST
000016BC                           758              
000016BC  4E75                     759              RTS
000016BE                           760  
000016BE                           761  
000016BE                           762  *---------------------------------------------------------------------------*
000016BE                           763  * OP_MOVEA_L: display MOVEA_L and proceed to EA
000016BE                           764  *---------------------------------------------------------------------------*
000016BE                           765  OP_MOVEA_L 
000016BE                           766             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000016BE  13FC 00FD 00003D68       767             MOVE.B   #$FD,DEST_REGISTER_FORMAT
000016C6  13FC 0000 00003D69       768             MOVE.B   #$00,SRC_REGISTER_FORMAT
000016CE                           769             
000016CE                           770             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000016CE  13FC 00B9 00003D6B       771             MOVE.B   #$B9,GET_DST_START_END
000016D6  13FC 0020 00003D6C       772             MOVE.B   #$20,GET_SRC_START_END
000016DE                           773             
000016DE                           774              *CLEAR D3
000016DE  4283                     775              CLR.L   D3
000016E0                           776              *LOAD STACK WITH THIS OPMODE
000016E0  6100 1D60                777              BSR     PUSH_STACK
000016E4  163C 004D                778              MOVE.B  #'M',D3
000016E8  6100 1D58                779              BSR     PUSH_STACK
000016EC  163C 004F                780              MOVE.B  #'O',D3
000016F0  6100 1D50                781              BSR     PUSH_STACK
000016F4  163C 0056                782              MOVE.B  #'V',D3
000016F8  6100 1D48                783              BSR     PUSH_STACK
000016FC  163C 0045                784              MOVE.B  #'E',D3
00001700  6100 1D40                785              BSR     PUSH_STACK           
00001704  163C 0041                786              MOVE.B  #'A',D3
00001708  6100 1D38                787              BSR     PUSH_STACK
0000170C  163C 002E                788              MOVE.B  #'.',D3
00001710  6100 1D30                789              BSR     PUSH_STACK
00001714  163C 004C                790              MOVE.B  #'L',D3
00001718  6100 1D28                791              BSR     PUSH_STACK
0000171C                           792              
0000171C  6100 1486                793              BSR     GET_EA_EA_SRC
00001720  163C 002C                794              MOVE.B  #',',D3
00001724  6100 1D1C                795              BSR     PUSH_STACK
00001728  6100 18AA                796              BSR     GET_EA_EA_DEST
0000172C                           797              
0000172C  4E75                     798              RTS
0000172E                           799  
0000172E                           800              
0000172E                           801  *---------------------------------------------------------------------------*
0000172E                           802  * OP0011: decode MOVE.W/MOVEA.W
0000172E                           803  *---------------------------------------------------------------------------*
0000172E                           804  OP0011      
0000172E  4280                     805              CLR.L   D0                      
00001730  4281                     806              CLR.L   D1  
00001732  4284                     807              CLR.L   D4                   
00001734  227C 00000000            808              MOVEA.L #0, A1 
0000173A                           809                
0000173A  2205                     810              MOVE.L  D5,D1
0000173C  EC99                     811              ROR.L   #6,D1
0000173E  0281 00000007            812              ANDI.L  #$07,D1
00001744  0C01 0001                813              CMPI.B  #1,D1
00001748  6700 0070                814              BEQ     OP_MOVEA_W
0000174C                           815              
0000174C  4EF9 00001752            816              JMP     OP_MOVE_W
00001752                           817            
00001752                           818  *---------------------------------------------------------------------------*
00001752                           819  * OP_MOVE_W: display MOVE_W and proceed to EA
00001752                           820  *---------------------------------------------------------------------------*
00001752                           821  OP_MOVE_W   
00001752                           822             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001752  13FC 0082 00003D68       823             MOVE.B   #$82,DEST_REGISTER_FORMAT
0000175A  13FC 0000 00003D69       824             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001762                           825             
00001762                           826             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001762  13FC 00B9 00003D6B       827             MOVE.B   #$B9,GET_DST_START_END
0000176A  13FC 0020 00003D6C       828             MOVE.B   #$20,GET_SRC_START_END
00001772                           829             
00001772                           830              *CLEAR D3
00001772  4283                     831              CLR.L   D3
00001774                           832              *LOAD STACK WITH THIS OPMODE
00001774  6100 1CCC                833              BSR     PUSH_STACK
00001778  163C 004D                834              MOVE.B  #'M',D3
0000177C  6100 1CC4                835              BSR     PUSH_STACK
00001780  163C 004F                836              MOVE.B  #'O',D3
00001784  6100 1CBC                837              BSR     PUSH_STACK
00001788  163C 0056                838              MOVE.B  #'V',D3
0000178C  6100 1CB4                839              BSR     PUSH_STACK
00001790  163C 0045                840              MOVE.B  #'E',D3
00001794  6100 1CAC                841              BSR     PUSH_STACK
00001798  163C 002E                842              MOVE.B  #'.',D3
0000179C  6100 1CA4                843              BSR     PUSH_STACK
000017A0  163C 0057                844              MOVE.B  #'W',D3
000017A4  6100 1C9C                845              BSR     PUSH_STACK
000017A8                           846              
000017A8  6100 13FA                847              BSR     GET_EA_EA_SRC
000017AC  163C 002C                848              MOVE.B  #',',D3
000017B0  6100 1C90                849              BSR     PUSH_STACK
000017B4  6100 181E                850              BSR     GET_EA_EA_DEST
000017B8                           851              
000017B8  4E75                     852              RTS
000017BA                           853  
000017BA                           854  *---------------------------------------------------------------------------*
000017BA                           855  * OP_MOVEA_W: display MOVEA and proceed to EA
000017BA                           856  *---------------------------------------------------------------------------*
000017BA                           857  OP_MOVEA_W 
000017BA                           858             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000017BA  13FC 00FD 00003D68       859             MOVE.B   #$FD,DEST_REGISTER_FORMAT
000017C2  13FC 0000 00003D69       860             MOVE.B   #$00,SRC_REGISTER_FORMAT
000017CA                           861             
000017CA                           862             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000017CA  13FC 00B9 00003D6B       863             MOVE.B   #$B9,GET_DST_START_END
000017D2  13FC 0020 00003D6C       864             MOVE.B   #$20,GET_SRC_START_END
000017DA                           865             
000017DA                           866              *CLEAR D3
000017DA  4283                     867              CLR.L   D3
000017DC                           868              *LOAD STACK WITH THIS OPMODE
000017DC  6100 1C64                869              BSR     PUSH_STACK
000017E0  163C 004D                870              MOVE.B  #'M',D3
000017E4  6100 1C5C                871              BSR     PUSH_STACK
000017E8  163C 004F                872              MOVE.B  #'O',D3
000017EC  6100 1C54                873              BSR     PUSH_STACK
000017F0  163C 0056                874              MOVE.B  #'V',D3
000017F4  6100 1C4C                875              BSR     PUSH_STACK
000017F8  163C 0045                876              MOVE.B  #'E',D3
000017FC  6100 1C44                877              BSR     PUSH_STACK           
00001800  163C 0041                878              MOVE.B  #'A',D3
00001804  6100 1C3C                879              BSR     PUSH_STACK
00001808  163C 002E                880              MOVE.B  #'.',D3
0000180C  6100 1C34                881              BSR     PUSH_STACK
00001810  163C 0057                882              MOVE.B  #'W',D3
00001814  6100 1C2C                883              BSR     PUSH_STACK
00001818                           884              
00001818  6100 138A                885              BSR     GET_EA_EA_SRC
0000181C  163C 002C                886              MOVE.B  #',',D3
00001820  6100 1C20                887              BSR     PUSH_STACK
00001824  6100 17AE                888              BSR     GET_EA_EA_DEST
00001828                           889            
00001828  4E75                     890              RTS
0000182A                           891  *---------------------------------------------------------------------------*
0000182A                           892  * OP0100: decode MOVEM/LEA/NEG/JSR/RTS/NOT
0000182A                           893  *---------------------------------------------------------------------------*
0000182A                           894  OP0100
0000182A  4280                     895              CLR.L   D0                      
0000182C  4281                     896              CLR.L   D1  
0000182E  4284                     897              CLR.L   D4                      
00001830  227C 00000000            898              MOVEA.L #0, A1                  
00001836  2205                     899              MOVE.L  D5,D1  
00001838                           900              
00001838                           901              * check for RTS
00001838  0C41 4E75                902              CMPI.W  #$4E75,D1   * 0100 1110 0111 0101
0000183C  6700 0178                903              BEQ     OP_RTS
00001840                           904              
00001840                           905              * check for JSR     * 0100 1110 10 xxx (ea mode) xxx (ea reg)
00001840  4281                     906              CLR.L   D1 
00001842  2205                     907              MOVE.L  D5,D1  
00001844  0241 0F00                908              ANDI.W  #$0F00,D1
00001848  0C41 0E00                909              CMPI.W  #$0E00,D1
0000184C  6700 0154                910              BEQ     OP_JSR
00001850                           911  
00001850                           912              * check for NEG     * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
00001850  4281                     913              CLR.L   D1 
00001852  2205                     914              MOVE.L  D5,D1  
00001854  0241 0F00                915              ANDI.W  #$0F00,D1
00001858  0C41 0400                916              CMPI.W  #$0400,D1
0000185C  6700 0086                917              BEQ     OP_NEG
00001860                           918              
00001860                           919              * check for NOT     * 0100 0110 xx (size) xxx (ea mode) xxx (ea reg)
00001860  4281                     920              CLR.L   D1 
00001862  2205                     921              MOVE.L  D5,D1  
00001864  0241 0F00                922              ANDI.W  #$0F00,D1
00001868  0C41 0600                923              CMPI.W  #$0600,D1
0000186C  6700 00DE                924              BEQ     OP_NOT
00001870                           925              
00001870                           926              * check for LEA     * 0100 xxx (reg) 111 xxx (ea mode) xxx (ea reg)
00001870  4281                     927              CLR.L   D1 
00001872  2205                     928              MOVE.L  D5,D1  
00001874  E099                     929              ROR.L   #8,D1
00001876  0C01 0001                930              CMPI.B  #1,D1
0000187A  6700 0054                931              BEQ     OP_LEA
0000187E                           932              
0000187E                           933              * check for MOVEM   * 0100 1 x 001 x (size) xxx (ea mode) xxx (ea reg)
0000187E  4281                     934              CLR.L   D1 
00001880  2205                     935              MOVE.L  D5,D1  
00001882  EB59                     936              ROL.W   #5,D1
00001884  0C01 0001                937              CMPI.B  #1,D1
00001888  6600 FC40                938              BNE     OP_DATA
0000188C  E959                     939              ROL.W   #4,D1
0000188E  0C01 0001                940              CMPI.B  #1,D1
00001892  6600 FC36                941              BNE     OP_DATA
00001896  E359                     942              ROL.W   #1,D1
00001898  0C01 0000                943              CMPI.B  #0,D1
0000189C  6700 000E                944              BEQ     OP_MOVEM_W
000018A0  0C01 0001                945              CMPI.B  #1,D1
000018A4  6700 0018                946              BEQ     OP_MOVEM_L
000018A8  4EF8 14CA                947              JMP     OP_DATA
000018AC                           948  
000018AC                           949  *---------------------------------------------------------------------------*
000018AC                           950  * OP_MOVEM_W: display MOVEM_W
000018AC                           951  *---------------------------------------------------------------------------*    
000018AC                           952  OP_MOVEM_W  
000018AC  183C 0001                953              MOVE.B  #1,D4
000018B0  43F9 00003B27            954              LEA     DISP_MOVEM_W,A1
000018B6  103C 000E                955              MOVE.B  #14,D0
000018BA  4E4F                     956              TRAP    #15
000018BC  4E75                     957              RTS
000018BE                           958  
000018BE                           959  *---------------------------------------------------------------------------*
000018BE                           960  * OP_MOVEM_L: display MOVEM_L
000018BE                           961  *---------------------------------------------------------------------------*
000018BE                           962  OP_MOVEM_L  
000018BE  183C 0002                963              MOVE.B  #2,D4
000018C2  43F9 00003B32            964              LEA     DISP_MOVEM_L,A1
000018C8  103C 000E                965              MOVE.B  #14,D0
000018CC  4E4F                     966              TRAP    #15
000018CE  4E75                     967              RTS
000018D0                           968     
000018D0                           969  *---------------------------------------------------------------------------*
000018D0                           970  * OP_LEA: decode and display LEA
000018D0                           971  *---------------------------------------------------------------------------*
000018D0                           972  OP_LEA      
000018D0  43F9 00003B20            973              LEA     DISP_LEA,A1
000018D6  103C 000E                974              MOVE.B  #14,D0
000018DA  4E4F                     975              TRAP    #15
000018DC  4EF9 0000272E            976              JMP     EA_MOVEA
000018E2                           977  
000018E2  4E75                     978              RTS
000018E4                           979  
000018E4                           980  *---------------------------------------------------------------------------*
000018E4                           981  * OP_NEG: decode and display NEG 
000018E4                           982  *---------------------------------------------------------------------------*
000018E4                           983  OP_NEG      * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
000018E4  4281                     984              CLR.L   D1
000018E6  4284                     985              CLR.L   D4
000018E8  2205                     986              MOVE.L  D5,D1
000018EA  EC99                     987              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000018EC  0C01 0000                988              CMPI.B  #0,D1
000018F0  6700 0012                989              BEQ     OP_NEG_B    * size is byte
000018F4  0C01 0001                990              CMPI.B  #1,D1
000018F8  6700 0022                991              BEQ     OP_NEG_W    * size is word
000018FC  0C01 0002                992              CMPI.B  #2,D1
00001900  6700 0032                993              BEQ     OP_NEG_L    * size is long
00001904                           994                         
00001904                           995  OP_NEG_B    * size is byte   
00001904  183C 0000                996              MOVE.B  #0,D4 
00001908  43F9 00003AEA            997              LEA     DISP_NEG_B,A1
0000190E  103C 000E                998              MOVE.B  #14,D0
00001912  4E4F                     999              TRAP    #15
00001914                          1000              
00001914  4EB9 000026F4           1001              JSR     EA_NOSRC
0000191A  4E75                    1002              RTS
0000191C                          1003              
0000191C                          1004  OP_NEG_W    * size is word
0000191C  183C 0001               1005              MOVE.B  #1,D4
00001920  43F9 00003AF3           1006              LEA     DISP_NEG_W,A1
00001926  103C 000E               1007              MOVE.B  #14,D0
0000192A  4E4F                    1008              TRAP    #15
0000192C  4EB9 000026F4           1009              JSR     EA_NOSRC
00001932  4E75                    1010              RTS
00001934                          1011              
00001934                          1012  OP_NEG_L    * size is long
00001934  183C 0002               1013              MOVE.B  #2,D4
00001938  43F9 00003AFC           1014              LEA     DISP_NEG_L,A1
0000193E  103C 000E               1015              MOVE.B  #14,D0
00001942  4E4F                    1016              TRAP    #15
00001944  4EB9 000026F4           1017              JSR     EA_NOSRC
0000194A                          1018              
0000194A  4E75                    1019              RTS
0000194C                          1020  
0000194C                          1021  *---------------------------------------------------------------------------*
0000194C                          1022  * OP_NOT: decode and display NOT 
0000194C                          1023  *---------------------------------------------------------------------------*
0000194C                          1024  OP_NOT
0000194C  4281                    1025              CLR.L   D1
0000194E  4284                    1026              CLR.L   D4
00001950  2205                    1027              MOVE.L  D5,D1
00001952  EC99                    1028              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001954  0C01 0000               1029              CMPI.B  #0,D1
00001958  6700 0012               1030              BEQ     OP_NOT_B    * size is byte
0000195C  0C01 0001               1031              CMPI.B  #1,D1
00001960  6700 001C               1032              BEQ     OP_NOT_W    * size is word
00001964  0C01 0002               1033              CMPI.B  #2,D1
00001968  6700 0026               1034              BEQ     OP_NOT_L    * size is long
0000196C                          1035                         
0000196C                          1036  OP_NOT_B    * size is byte   
0000196C  183C 0000               1037              MOVE.B  #0,D4 
00001970  43F9 00003B05           1038              LEA     DISP_NOT_B,A1
00001976  103C 000E               1039              MOVE.B  #14,D0
0000197A  4E4F                    1040              TRAP    #15
0000197C  4E75                    1041              RTS
0000197E                          1042              
0000197E                          1043  OP_NOT_W    * size is word
0000197E  183C 0001               1044              MOVE.B  #1,D4
00001982  43F9 00003B0E           1045              LEA     DISP_NOT_W,A1
00001988  103C 000E               1046              MOVE.B  #14,D0
0000198C  4E4F                    1047              TRAP    #15
0000198E  4E75                    1048              RTS
00001990                          1049              
00001990                          1050  OP_NOT_L    * size is long
00001990  183C 0002               1051              MOVE.B  #2,D4
00001994  43F9 00003B17           1052              LEA     DISP_NOT_L,A1
0000199A  103C 000E               1053              MOVE.B  #14,D0
0000199E  4E4F                    1054              TRAP    #15
000019A0  4E75                    1055              RTS
000019A2                          1056  
000019A2                          1057  *---------------------------------------------------------------------------*
000019A2                          1058  * OP_JSR: display JSR     
000019A2                          1059  *---------------------------------------------------------------------------*
000019A2  43F9 00003AE3           1060  OP_JSR      LEA     DISP_JSR,A1
000019A8  103C 000E               1061              MOVE.B  #14,D0
000019AC  4E4F                    1062              TRAP    #15
000019AE  4EB9 000026F4           1063              JSR     EA_NOSRC
000019B4                          1064  
000019B4  4E75                    1065              RTS
000019B6                          1066  
000019B6                          1067  *---------------------------------------------------------------------------*
000019B6                          1068  * OP_RTS: display RTS     
000019B6                          1069  *---------------------------------------------------------------------------* 
000019B6  43F9 00003ADC           1070  OP_RTS      LEA     DISP_RTS,A1
000019BC  103C 000E               1071              MOVE.B  #14,D0
000019C0  4E4F                    1072              TRAP    #15
000019C2  4E75                    1073              RTS
000019C4                          1074  
000019C4                          1075  *---------------------------------------------------------------------------*
000019C4                          1076  * OP0101: decode ADDQ
000019C4                          1077  *---------------------------------------------------------------------------* 
000019C4  4280                    1078  OP0101      CLR.L   D0               * clear registers for temp storage       
000019C6  4281                    1079              CLR.L   D1
000019C8  4284                    1080              CLR.L   D4                  
000019CA  227C 00000000           1081              MOVEA.L #0, A1  
000019D0                          1082              
000019D0  2205                    1083              MOVE.L  D5,D1           * copy the processing data 
000019D2  E089                    1084              LSR.L   #8,D1           * shift to right by 8 bits to check the value of bit 8
000019D4  0201 0001               1085              ANDI.B  #$1,D1          * mask all bits except the last 2 bits
000019D8  0C01 0000               1086              CMPI.B  #0,D1           * if the value is 0, it's ADDQ
000019DC  6700 0006               1087              BEQ     OP_ADDQ
000019E0                          1088              
000019E0  4EF8 14CA               1089              JMP     OP_DATA
000019E4                          1090       
000019E4  4281                    1091  OP_ADDQ     CLR.L   D1
000019E6  2205                    1092              MOVE.L  D5,D1
000019E8  EC99                    1093              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000019EA  0281 00000003           1094              ANDI.L  #$3,D1
000019F0  0C01 0000               1095              CMPI.B  #0,D1
000019F4  6700 0014               1096              BEQ     OP_ADDQ_B    * size is byte
000019F8  0C41 0001               1097              CMPI.W  #1,D1
000019FC  6700 001E               1098              BEQ     OP_ADDQ_W    * size is word
00001A00  0C81 00000002           1099              CMPI.L  #2,D1
00001A06  6700 0026               1100              BEQ     OP_ADDQ_L    * size is long
00001A0A                          1101              
00001A0A                          1102  *---------------------------------------------------------------------------*
00001A0A                          1103  * OP_ADDQ: display ADDQ
00001A0A                          1104  *---------------------------------------------------------------------------*              
00001A0A                          1105  OP_ADDQ_B    * size is byte   
00001A0A  183C 0000               1106              MOVE.B  #0,D4 
00001A0E  43F9 00003B3D           1107              LEA     DISP_ADDQ_B,A1
00001A14  103C 000E               1108              MOVE.B  #14,D0
00001A18  4E4F                    1109              TRAP    #15
00001A1A  4E75                    1110              RTS
00001A1C                          1111              
00001A1C                          1112  OP_ADDQ_W    * size is word
00001A1C  183C 0001               1113              MOVE.B  #1,D4
00001A20  43F9 00003B47           1114              LEA     DISP_ADDQ_W,A1
00001A26  103C 000E               1115              MOVE.B  #14,D0
00001A2A  4E4F                    1116              TRAP    #15
00001A2C  4E75                    1117              RTS
00001A2E                          1118              
00001A2E                          1119  OP_ADDQ_L    * size is long
00001A2E  183C 0002               1120              MOVE.B  #2,D4
00001A32  43F9 00003B51           1121              LEA     DISP_ADDQ_L,A1
00001A38  103C 000E               1122              MOVE.B  #14,D0
00001A3C  4E4F                    1123              TRAP    #15
00001A3E  4E75                    1124              RTS
00001A40                          1125  
00001A40                          1126  *---------------------------------------------------------------------------*
00001A40                          1127  * OP0110: decode BRA/BEQ/BNE/BLT/BHI
00001A40                          1128  *---------------------------------------------------------------------------*              
00001A40  4280                    1129  OP0110      CLR.L   D0                  
00001A42  4281                    1130              CLR.L   D1   
00001A44  4284                    1131              CLR.L   D4                 
00001A46  227C 00000000           1132              MOVEA.L #0,A1
00001A4C  2205                    1133              MOVE.L  D5, D1                
00001A4E  0281 000000FF           1134              ANDI.L  #$00FF, D1              * Get 8-bit displacement 
00001A54  2205                    1135              MOVE.L  D5,D1                  
00001A56  0281 00000F00           1136              ANDI.L  #$0F00,D1
00001A5C                          1137                 
00001A5C  0C41 0000               1138              CMPI.W  #$0000,D1               * Check for BRA
00001A60  6700 0050               1139              BEQ     OP_BRA                  
00001A64                          1140                          
00001A64  0C41 0D00               1141              CMPI.W  #$0D00,D1               * Check for BLT
00001A68  6700 0056               1142              BEQ     OP_BLT      
00001A6C                          1143  
00001A6C  0C41 0700               1144              CMPI.W  #$0700,D1               * Check for BEQ
00001A70  6700 0032               1145              BEQ     OP_BEQ      
00001A74                          1146  
00001A74  0C41 0600               1147              CMPI.W  #$0600,D1               * Check for BNE
00001A78  6700 001C               1148              BEQ     OP_BNE  
00001A7C                          1149              
00001A7C  0C41 0200               1150              CMPI.W  #$0200,D1               * Check for BHI
00001A80  6700 0006               1151              BEQ     OP_BHI
00001A84                          1152  
00001A84  4EF8 14CA               1153              JMP     OP_DATA
00001A88                          1154              
00001A88  43F9 00003D0C           1155  OP_BHI      LEA     DISP_BHI,A1             
00001A8E  103C 000E               1156              MOVE.B  #14,D0
00001A92  4E4F                    1157              TRAP    #15
00001A94  4E75                    1158              RTS
00001A96                          1159  
00001A96  43F9 00003D05           1160  OP_BNE      LEA     DISP_BNE,A1             
00001A9C  103C 000E               1161              MOVE.B  #14,D0
00001AA0  4E4F                    1162              TRAP    #15
00001AA2  4E75                    1163              RTS
00001AA4                          1164  
00001AA4  43F9 00003CFE           1165  OP_BEQ      LEA     DISP_BEQ,A1             
00001AAA  103C 000E               1166              MOVE.B  #14,D0
00001AAE  4E4F                    1167              TRAP    #15
00001AB0  4E75                    1168              RTS          
00001AB2                          1169                          
00001AB2  43F9 00003CF0           1170  OP_BRA      LEA     DISP_BRA,A1             
00001AB8  103C 000E               1171              MOVE.B  #14,D0
00001ABC  4E4F                    1172              TRAP    #15
00001ABE  4E75                    1173              RTS
00001AC0                          1174              
00001AC0  43F9 00003CF7           1175  OP_BLT      LEA     DISP_BLT,A1          
00001AC6  103C 000E               1176              MOVE.B  #14,D0
00001ACA  4E4F                    1177              TRAP    #15
00001ACC  4E75                    1178              RTS
00001ACE                          1179     
00001ACE                          1180  *---------------------------------------------------------------------------*
00001ACE                          1181  * OP0111 : MOVEQ not required
00001ACE                          1182  *---------------------------------------------------------------------------*           
00001ACE  4EF8 14CA               1183  OP0111      JMP     OP_DATA
00001AD2                          1184             
00001AD2                          1185  *---------------------------------------------------------------------------*
00001AD2                          1186  * OP1000 : decode DIVS
00001AD2                          1187  *---------------------------------------------------------------------------*           
00001AD2                          1188  OP1000      
00001AD2  4280                    1189              CLR.L   D0                
00001AD4  4281                    1190              CLR.L   D1   
00001AD6  4284                    1191              CLR.L   D4                
00001AD8  207C 00000000           1192              MOVEA.L #0, A0               
00001ADE  227C 00000000           1193              MOVEA.L #0, A1               
00001AE4                          1194              
00001AE4  2205                    1195              MOVE.L  D5,D1
00001AE6  EA89                    1196              LSR.L   #5,D1
00001AE8  0281 0000000E           1197              ANDI.L  #$E,D1
00001AEE                          1198    
00001AEE  0C01 000E               1199              CMPI.B  #$E,D1
00001AF2  6700 0006               1200              BEQ     OP_DIVS
00001AF6                          1201              
00001AF6  4EF8 14CA               1202              JMP     OP_DATA
00001AFA                          1203  
00001AFA                          1204  *---------------------------------------------------------------------------*
00001AFA                          1205  * OP_DIVS: display DIVS and proceed to EA
00001AFA                          1206  *---------------------------------------------------------------------------*  
00001AFA  43F9 00003B5B           1207  OP_DIVS     LEA     DISP_DIVS,A1
00001B00  103C 000E               1208              MOVE.B  #14,D0
00001B04  4E4F                    1209              TRAP    #15
00001B06  4EF9 00002708           1210              JMP     EA_ARITH
00001B0C                          1211  
00001B0C  4E75                    1212              RTS
00001B0E                          1213              
00001B0E                          1214  *---------------------------------------------------------------------------*
00001B0E                          1215  * OP1001: decode SUB/SUBA
00001B0E                          1216  *---------------------------------------------------------------------------*      
00001B0E                          1217  OP1001      
00001B0E  4280                    1218              CLR.L   D0                  
00001B10  4281                    1219              CLR.L   D1       
00001B12  4284                    1220              CLR.L   D4                   
00001B14  227C 00000000           1221              MOVEA.L #0, A1              
00001B1A  2205                    1222              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
00001B1C                          1223              
00001B1C                          1224              *CLEAR D3
00001B1C  4283                    1225              CLR.L   D3
00001B1E                          1226              
00001B1E                          1227              
00001B1E                          1228              
00001B1E                          1229              **INTEGRATING ADDA.W/.L INTO THIS CODE**
00001B1E  2205                    1230              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00001B20                          1231              *BITS (INDEX 8) 
00001B20                          1232              *0 = ADD.B/W/L <EA>,Dn
00001B20                          1233              *1 = ADD.B/W/L Dn,<EA> 
00001B20  EC99                    1234              ROR.L   #6,D1
00001B22  0281 00000007           1235              ANDI.L  #$07,D1                 *MASKS WITH 00000111
00001B28  0C81 00000007           1236              CMPI.L  #$07,D1                 *IF EQUALS <ea>,Dn
00001B2E  6700 0010               1237              BEQ     OP1001_SUBA_L            *BRANCHES TO ADDA.L
00001B32  0C81 00000003           1238              CMPI.L  #$03,D1                 *IF EQUALS <ea>,Dn
00001B38  6700 0078               1239              BEQ     OP1001_SUBA_W           *BRANCHES TO ADDA.W
00001B3C  6000 00E6               1240              BRA     OP1001_DETERMINE_DN_EA_OR_EA_DN         *ELSE CHECK ADD.B/.W/.L
00001B40                          1241              
00001B40                          1242  OP1001_SUBA_L
00001B40                          1243              *LOAD STACK WITH THIS OPMODE
00001B40  6100 1900               1244              BSR     PUSH_STACK
00001B44  163C 0053               1245              MOVE.B  #'S',D3
00001B48  6100 18F8               1246              BSR     PUSH_STACK
00001B4C  163C 0055               1247              MOVE.B  #'U',D3
00001B50  6100 18F0               1248              BSR     PUSH_STACK
00001B54  163C 0042               1249              MOVE.B  #'B',D3
00001B58  6100 18E8               1250              BSR     PUSH_STACK
00001B5C  163C 0041               1251              MOVE.B  #'A',D3
00001B60  6100 18E0               1252              BSR     PUSH_STACK
00001B64  163C 002E               1253              MOVE.B  #'.',D3
00001B68  6100 18D8               1254              BSR     PUSH_STACK
00001B6C  163C 004C               1255              MOVE.B  #'L',D3
00001B70  6100 18D0               1256              BSR     PUSH_STACK
00001B74                          1257              
00001B74                          1258             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001B74  13FC 0000 00003D68      1259             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001B7C  13FC 0000 00003D69      1260             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001B84                          1261             
00001B84                          1262             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001B84  13FC 00B9 00003D6B      1263             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001B8C  13FC 0020 00003D6C      1264             MOVE.B   #$20,GET_SRC_START_END
00001B94                          1265  
00001B94                          1266              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001B94  0285 0000FE3F           1267              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001B9A  0685 00000040           1268              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00001BA0                          1269       
00001BA0                          1270              *PRINT <EA>,AN
00001BA0  6100 1002               1271              BSR     GET_EA_EA_SRC       *GETS <ea>
00001BA4  163C 002C               1272              MOVE.B  #',',D3
00001BA8  6100 1898               1273              BSR     PUSH_STACK                     
00001BAC  6100 1426               1274              BSR     GET_EA_EA_DEST      *GETS Dn
00001BB0                          1275  
00001BB0                          1276              
00001BB0                          1277              
00001BB0  4E75                    1278              RTS
00001BB2                          1279  OP1001_SUBA_W
00001BB2                          1280              *LOAD STACK WITH THIS OPMODE
00001BB2  6100 188E               1281              BSR     PUSH_STACK
00001BB6  163C 0053               1282              MOVE.B  #'S',D3
00001BBA  6100 1886               1283              BSR     PUSH_STACK
00001BBE  163C 0055               1284              MOVE.B  #'U',D3
00001BC2  6100 187E               1285              BSR     PUSH_STACK
00001BC6  163C 0042               1286              MOVE.B  #'B',D3
00001BCA  6100 1876               1287              BSR     PUSH_STACK
00001BCE  163C 0041               1288              MOVE.B  #'A',D3
00001BD2  6100 186E               1289              BSR     PUSH_STACK
00001BD6  163C 002E               1290              MOVE.B  #'.',D3
00001BDA  6100 1866               1291              BSR     PUSH_STACK
00001BDE  163C 0057               1292              MOVE.B  #'W',D3
00001BE2  6100 185E               1293              BSR     PUSH_STACK
00001BE6                          1294              
00001BE6                          1295             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001BE6  13FC 0000 00003D68      1296             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001BEE  13FC 0000 00003D69      1297             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001BF6                          1298             
00001BF6                          1299             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001BF6  13FC 00B9 00003D6B      1300             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001BFE  13FC 0020 00003D6C      1301             MOVE.B   #$20,GET_SRC_START_END
00001C06                          1302  
00001C06                          1303              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001C06  0285 0000FE3F           1304              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001C0C  0685 00000040           1305              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00001C12                          1306       
00001C12                          1307              *PRINT <EA>,AN
00001C12  6100 0F90               1308              BSR     GET_EA_EA_SRC       *GETS <ea>
00001C16  163C 002C               1309              MOVE.B  #',',D3
00001C1A  6100 1826               1310              BSR     PUSH_STACK                     
00001C1E  6100 13B4               1311              BSR     GET_EA_EA_DEST      *GETS Dn
00001C22                          1312  
00001C22  4E75                    1313              RTS
00001C24                          1314  
00001C24                          1315  OP1001_DETERMINE_DN_EA_OR_EA_DN 
00001C24                          1316              *LOAD STACK WITH THIS OPMODE
00001C24  6100 181C               1317              BSR     PUSH_STACK
00001C28  163C 0053               1318              MOVE.B  #'S',D3
00001C2C  6100 1814               1319              BSR     PUSH_STACK
00001C30  163C 0055               1320              MOVE.B  #'U',D3
00001C34  6100 180C               1321              BSR     PUSH_STACK
00001C38  163C 0042               1322              MOVE.B  #'B',D3
00001C3C  6100 1804               1323              BSR     PUSH_STACK
00001C40  163C 002E               1324              MOVE.B  #'.',D3
00001C44  6100 17FC               1325              BSR     PUSH_STACK
00001C48                          1326              
00001C48  2205                    1327              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00001C4A                          1328              
00001C4A                          1329              *BITS (INDEX 8) 
00001C4A                          1330              *0 = ADD.B/W/L <EA>,Dn
00001C4A                          1331              *1 = ADD.B/W/L Dn,<EA> 
00001C4A  E099                    1332              ROR.L   #8,D1
00001C4C  0281 00000001           1333              ANDI.L  #$01,D1     *MASKS WITH 00000001
00001C52  0C81 00000000           1334              CMPI.L  #$00,D1     *IF EQUALS <ea>,Dn
00001C58  6700 0102               1335              BEQ     OP1001_EA_DN
00001C5C                          1336              *else procede to Dn_EA
00001C5C                          1337              
00001C5C                          1338  OP1001_DN_EA
00001C5C                          1339              *BITS (7 TO 6) 
00001C5C                          1340              *00 = .B
00001C5C                          1341              *01 = .W
00001C5C                          1342              *10 = .L 
00001C5C  2205                    1343              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00001C5E  EC99                    1344              ROR.L   #6,D1
00001C60  0281 00000003           1345              ANDI.L  #$03,D1
00001C66  0C81 00000000           1346              CMPI.L  #$00,D1 *EQUALS .B
00001C6C  6700 0016               1347              BEQ     OP1001_PRINT_B2
00001C70  0C81 00000001           1348              CMPI.L  #$01,D1 *EQUALS .W
00001C76  6700 0054               1349              BEQ     OP1001_PRINT_W2
00001C7A  0C81 00000002           1350              CMPI.L  #$02,D1 *EQUALS .L
00001C80  6700 0092               1351              BEQ     OP1001_PRINT_L2
00001C84                          1352  OP1001_PRINT_B2
00001C84                          1353              *PUSH 'B'
00001C84  163C 0042               1354              MOVE.B  #'B',D3
00001C88  6100 17B8               1355              BSR     PUSH_STACK
00001C8C                          1356             
00001C8C                          1357              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001C8C  13FC 0000 00003D68      1358             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001C94  13FC 0083 00003D69      1359             MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001C9C                          1360             
00001C9C                          1361             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001C9C  13FC 00B9 00003D6B      1362             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001CA4  13FC 0020 00003D6C      1363             MOVE.B   #$20,GET_SRC_START_END
00001CAC                          1364  
00001CAC                          1365              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001CAC  0285 0000FE3F           1366              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001CB2  0685 00000040           1367              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00001CB8                          1368       
00001CB8  6100 131A               1369              BSR     GET_EA_EA_DEST      *GETS Dn
00001CBC  163C 002C               1370              MOVE.B  #',',D3
00001CC0  6100 1780               1371              BSR     PUSH_STACK                     
00001CC4  6100 0EDE               1372              BSR     GET_EA_EA_SRC       *GETS <ea>
00001CC8                          1373  
00001CC8                          1374              
00001CC8  6000 06EA               1375              BRA     OP1101_ADD_RETURN
00001CCC                          1376  OP1001_PRINT_W2
00001CCC  163C 0057               1377              MOVE.B  #'W',D3
00001CD0  6100 1770               1378              BSR     PUSH_STACK
00001CD4                          1379  
00001CD4                          1380              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001CD4  13FC 0000 00003D68      1381              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001CDC  13FC 0083 00003D69      1382              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001CE4                          1383             
00001CE4                          1384              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001CE4  13FC 00B9 00003D6B      1385              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001CEC  13FC 0020 00003D6C      1386              MOVE.B   #$20,GET_SRC_START_END
00001CF4                          1387  
00001CF4                          1388              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001CF4  0285 0000FE3F           1389              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001CFA  0685 00000040           1390              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A An Register (001) 
00001D00                          1391  
00001D00                          1392        
00001D00  6100 12D2               1393              BSR     GET_EA_EA_DEST      *GETS Dn
00001D04  163C 002C               1394              MOVE.B  #',',D3
00001D08  6100 1738               1395              BSR     PUSH_STACK               
00001D0C  6100 0E96               1396              BSR     GET_EA_EA_SRC       *GETS <ea>       
00001D10                          1397  
00001D10                          1398  
00001D10                          1399  
00001D10  6000 06A2               1400              BRA     OP1101_ADD_RETURN
00001D14                          1401  OP1001_PRINT_L2 
00001D14  163C 004C               1402              MOVE.B  #'L',D3
00001D18  6100 1728               1403              BSR     PUSH_STACK
00001D1C                          1404              
00001D1C                          1405              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001D1C  13FC 0000 00003D68      1406              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001D24  13FC 0083 00003D69      1407              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001D2C                          1408             
00001D2C                          1409              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001D2C  13FC 00B9 00003D6B      1410              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001D34  13FC 0020 00003D6C      1411              MOVE.B   #$20,GET_SRC_START_END
00001D3C                          1412  
00001D3C                          1413             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001D3C  0285 0000FE3F           1414              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001D42  0685 00000040           1415              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00001D48                          1416  
00001D48                          1417               
00001D48  6100 128A               1418              BSR     GET_EA_EA_DEST       *GETS Dn
00001D4C  163C 002C               1419              MOVE.B  #',',D3
00001D50  6100 16F0               1420              BSR     PUSH_STACK          
00001D54  6100 0E4E               1421              BSR     GET_EA_EA_SRC        *GETS <ea>
00001D58                          1422  
00001D58  6000 065A               1423              BRA     OP1101_ADD_RETURN
00001D5C                          1424              
00001D5C                          1425  OP1001_EA_DN           
00001D5C                          1426              *BITS (7 TO 6) 
00001D5C                          1427              *00 = .B
00001D5C                          1428              *01 = .W
00001D5C                          1429              *10 = .L 
00001D5C  2205                    1430              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00001D5E  EC99                    1431              ROR.L   #6,D1
00001D60  0281 00000003           1432              ANDI.L  #$03,D1
00001D66  0C81 00000000           1433              CMPI.L  #$00,D1 *EQUALS .B
00001D6C  6700 0016               1434              BEQ     OP1001_PRINT_B
00001D70  0C81 00000001           1435              CMPI.L  #$01,D1 *EQUALS .W
00001D76  6700 0054               1436              BEQ     OP1001_PRINT_W
00001D7A  0C81 00000002           1437              CMPI.L  #$02,D1 *EQUALS .L
00001D80  6700 0092               1438              BEQ     OP1001_PRINT_L
00001D84                          1439  OP1001_PRINT_B
00001D84  163C 0042               1440              MOVE.B  #'B',D3
00001D88  6100 16B8               1441              BSR     PUSH_STACK
00001D8C                          1442                
00001D8C                          1443              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001D8C  13FC 0000 00003D68      1444              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001D94  13FC 0002 00003D69      1445              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001D9C                          1446             
00001D9C                          1447              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001D9C  13FC 00B9 00003D6B      1448              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001DA4  13FC 0020 00003D6C      1449              MOVE.B   #$20,GET_SRC_START_END
00001DAC                          1450  
00001DAC                          1451             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001DAC  0285 0000FE3F           1452              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001DB2  0685 00000040           1453              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "AN" Register (001) 
00001DB8                          1454  
00001DB8                          1455              
00001DB8  6100 0DEA               1456              BSR     GET_EA_EA_SRC      *GETS <ea>
00001DBC  163C 002C               1457              MOVE.B  #',',D3
00001DC0  6100 1680               1458              BSR     PUSH_STACK          
00001DC4  6100 120E               1459              BSR     GET_EA_EA_DEST       *GETS Dn
00001DC8                          1460              
00001DC8  6000 05EA               1461              BRA     OP1101_ADD_RETURN
00001DCC                          1462  OP1001_PRINT_W
00001DCC  163C 0057               1463              MOVE.B  #'W',D3
00001DD0  6100 1670               1464              BSR     PUSH_STACK
00001DD4                          1465  
00001DD4                          1466              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001DD4  13FC 0000 00003D68      1467              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001DDC  13FC 0000 00003D69      1468              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001DE4                          1469             
00001DE4                          1470              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001DE4  13FC 00B9 00003D6B      1471              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001DEC  13FC 0020 00003D6C      1472              MOVE.B   #$20,GET_SRC_START_END
00001DF4                          1473  
00001DF4                          1474             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001DF4  0285 0000FE3F           1475              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001DFA  0685 00000040           1476              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00001E00                          1477  
00001E00                          1478              
00001E00  6100 0DA2               1479              BSR     GET_EA_EA_SRC      *GETS <ea>
00001E04  163C 002C               1480              MOVE.B  #',',D3
00001E08  6100 1638               1481              BSR     PUSH_STACK
00001E0C  6100 11C6               1482              BSR     GET_EA_EA_DEST       *GETS Dn    
00001E10                          1483              
00001E10  6000 004A               1484              BRA     OP1001_ADD_RETURN
00001E14                          1485  OP1001_PRINT_L 
00001E14  163C 004C               1486              MOVE.B  #'L',D3
00001E18  6100 1628               1487              BSR     PUSH_STACK
00001E1C                          1488              
00001E1C                          1489              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001E1C  13FC 0000 00003D68      1490              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001E24  13FC 0000 00003D69      1491              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001E2C                          1492             
00001E2C                          1493              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001E2C  13FC 00B9 00003D6B      1494              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001E34  13FC 0020 00003D6C      1495              MOVE.B   #$20,GET_SRC_START_END
00001E3C                          1496  
00001E3C                          1497              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001E3C  0285 0000FE3F           1498              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00001E42  0685 00000040           1499              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
00001E48                          1500  
00001E48                          1501                     
00001E48  6100 0D5A               1502              BSR     GET_EA_EA_SRC      *GETS <ea>
00001E4C  163C 002C               1503              MOVE.B  #',',D3
00001E50  6100 15F0               1504              BSR     PUSH_STACK                  
00001E54  6100 117E               1505              BSR     GET_EA_EA_DEST       *GETS Dn    
00001E58                          1506  
00001E58                          1507              
00001E58  6000 0002               1508              BRA     OP1001_ADD_RETURN
00001E5C                          1509              
00001E5C                          1510  OP1001_ADD_RETURN
00001E5C  4E75                    1511              RTS
00001E5E                          1512  
00001E5E                          1513    
00001E5E                          1514  *---------------------------------------------------------------------------*
00001E5E                          1515  * OP_SUB: display SUB and proceed to EA
00001E5E                          1516  *---------------------------------------------------------------------------*            
00001E5E  43F9 00003B63           1517  OP_SUB_B    LEA     DISP_SUB_B,A1
00001E64  103C 000E               1518              MOVE.B  #14,D0
00001E68  4E4F                    1519              TRAP    #15
00001E6A  183C 0000               1520              MOVE.B  #0,D4
00001E6E  4EF9 00002754           1521              JMP     EA_GEN
00001E74                          1522  
00001E74  4E75                    1523              RTS
00001E76                          1524  
00001E76  43F9 00003B6C           1525  OP_SUB_W    LEA     DISP_SUB_W,A1
00001E7C  103C 000E               1526              MOVE.B  #14,D0
00001E80  4E4F                    1527              TRAP    #15
00001E82  183C 0001               1528              MOVE.B  #1,D4
00001E86  4EF9 00002754           1529              JMP     EA_GEN
00001E8C                          1530  
00001E8C  4E75                    1531              RTS
00001E8E                          1532  
00001E8E  43F9 00003B75           1533  OP_SUB_L    LEA     DISP_SUB_L,A1
00001E94  103C 000E               1534              MOVE.B  #14,D0
00001E98  4E4F                    1535              TRAP    #15
00001E9A  183C 0002               1536              MOVE.B  #2,D4
00001E9E  4EF9 00002754           1537              JMP     EA_GEN
00001EA4                          1538  
00001EA4  4E75                    1539              RTS
00001EA6                          1540  
00001EA6                          1541  *---------------------------------------------------------------------------*
00001EA6                          1542  * OP_SUBA: display SUBA
00001EA6                          1543  *---------------------------------------------------------------------------*  
00001EA6  43F9 00003B9C           1544  OP_SUBA_W   LEA     DISP_SUBA_W,A1
00001EAC  103C 000E               1545              MOVE.B  #14,D0
00001EB0  4E4F                    1546              TRAP    #15
00001EB2  183C 0001               1547              MOVE.B  #1,D4
00001EB6  4E75                    1548              RTS
00001EB8                          1549  
00001EB8  43F9 00003BA6           1550  OP_SUBA_L   LEA     DISP_SUBA_L,A1
00001EBE  103C 000E               1551              MOVE.B  #14,D0
00001EC2  4E4F                    1552              TRAP    #15
00001EC4  183C 0002               1553              MOVE.B  #2,D4
00001EC8  4E75                    1554              RTS         
00001ECA                          1555  *---------------------------------------------------------------------------*
00001ECA                          1556  * OP1010 : unassigned
00001ECA                          1557  *---------------------------------------------------------------------------*           
00001ECA  4EF8 14CA               1558  OP1010      JMP     OP_DATA
00001ECE                          1559              
00001ECE                          1560  *---------------------------------------------------------------------------*
00001ECE                          1561  * OP1011 : decode CMP/EOR/CMPA
00001ECE                          1562  *---------------------------------------------------------------------------*           
00001ECE  4280                    1563  OP1011      CLR.L   D0                
00001ED0  4281                    1564              CLR.L   D1            
00001ED2  4284                    1565              CLR.L   D4                   
00001ED4  227C 00000000           1566              MOVEA.L #0, A1               
00001EDA  2205                    1567              MOVE.L  D5,D1
00001EDC  EA99                    1568              ROR.L   #5,D1
00001EDE  0281 0000000E           1569              ANDI.L  #$E,D1
00001EE4  0C01 0000               1570              CMPI.B  #$0,D1
00001EE8  6700 0062               1571              BEQ     OP_CMP_B
00001EEC  0C01 0002               1572              CMPI.B  #$2,D1
00001EF0  6700 0072               1573              BEQ     OP_CMP_W
00001EF4  0C01 0004               1574              CMPI.B  #$4,D1
00001EF8  6700 0082               1575              BEQ     OP_CMP_L
00001EFC  0C01 0008               1576              CMPI.B  #$8,D1
00001F00  6700 0092               1577              BEQ     OP_EOR_B
00001F04  0C01 000A               1578              CMPI.B  #$A,D1
00001F08  6700 009C               1579              BEQ     OP_EOR_W
00001F0C  0C01 000C               1580              CMPI.B  #$C,D1
00001F10  6700 00A6               1581              BEQ     OP_EOR_L  
00001F14  0C01 0006               1582              CMPI.B  #$6,D1
00001F18  6700 000E               1583              BEQ     OP_CMPA_W
00001F1C  0C01 000E               1584              CMPI.B  #$E,D1
00001F20  6700 0018               1585              BEQ     OP_CMPA_L 
00001F24                          1586  
00001F24  4EF8 14CA               1587              JMP     OP_DATA          
00001F28                          1588  
00001F28                          1589  *---------------------------------------------------------------------------*
00001F28                          1590  * OP_CMPA: display CMPA 
00001F28                          1591  *---------------------------------------------------------------------------
00001F28  43F9 00003BE6           1592  OP_CMPA_W   LEA     DISP_CMPA_W,A1
00001F2E  103C 000E               1593              MOVE.B  #14,D0
00001F32  4E4F                    1594              TRAP    #15
00001F34  183C 0001               1595              MOVE.B  #1,D4
00001F38  4E75                    1596              RTS
00001F3A                          1597  
00001F3A  43F9 00003BF0           1598  OP_CMPA_L   LEA     DISP_CMPA_L,A1
00001F40  103C 000E               1599              MOVE.B  #14,D0
00001F44  4E4F                    1600              TRAP    #15
00001F46  183C 0002               1601              MOVE.B  #2,D4
00001F4A  4E75                    1602              RTS
00001F4C                          1603  
00001F4C                          1604  *---------------------------------------------------------------------------*
00001F4C                          1605  * OP_CMP: display CMP and proceed to EA
00001F4C                          1606  *---------------------------------------------------------------------------*  
00001F4C  43F9 00003BCB           1607  OP_CMP_B    LEA     DISP_CMP_B,A1
00001F52  103C 000E               1608              MOVE.B  #14,D0
00001F56  4E4F                    1609              TRAP    #15
00001F58  183C 0000               1610              MOVE.B  #0,D4
00001F5C  4EF9 00002754           1611              JMP     EA_GEN
00001F62                          1612  
00001F62  4E75                    1613              RTS
00001F64                          1614              
00001F64  43F9 00003BD4           1615  OP_CMP_W    LEA     DISP_CMP_W,A1
00001F6A  103C 000E               1616              MOVE.B  #14,D0
00001F6E  4E4F                    1617              TRAP    #15
00001F70  183C 0001               1618              MOVE.B  #1,D4
00001F74  4EF9 00002754           1619              JMP     EA_GEN
00001F7A                          1620  
00001F7A  4E75                    1621              RTS
00001F7C                          1622              
00001F7C  43F9 00003BDD           1623  OP_CMP_L    LEA     DISP_CMP_L,A1
00001F82  103C 000E               1624              MOVE.B  #14,D0
00001F86  4E4F                    1625              TRAP    #15
00001F88  183C 0002               1626              MOVE.B  #2,D4
00001F8C  4EF9 00002754           1627              JMP     EA_GEN
00001F92                          1628  
00001F92  4E75                    1629              RTS
00001F94                          1630              
00001F94                          1631  *---------------------------------------------------------------------------*
00001F94                          1632  * OP_EOR: display EOR
00001F94                          1633  *---------------------------------------------------------------------------*  
00001F94  43F9 00003BB0           1634  OP_EOR_B    LEA     DISP_EOR_B,A1
00001F9A  103C 000E               1635              MOVE.B  #14,D0
00001F9E  4E4F                    1636              TRAP    #15
00001FA0  183C 0000               1637              MOVE.B  #0,D4
00001FA4  4E75                    1638              RTS
00001FA6                          1639              
00001FA6  43F9 00003BB9           1640  OP_EOR_W    LEA     DISP_EOR_W,A1
00001FAC  103C 000E               1641              MOVE.B  #14,D0
00001FB0  4E4F                    1642              TRAP    #15
00001FB2  183C 0001               1643              MOVE.B  #1,D4
00001FB6  4E75                    1644              RTS
00001FB8                          1645              
00001FB8  43F9 00003BC2           1646  OP_EOR_L    LEA     DISP_EOR_L,A1
00001FBE  103C 000E               1647              MOVE.B  #14,D0
00001FC2  4E4F                    1648              TRAP    #15
00001FC4  183C 0002               1649              MOVE.B  #2,D4
00001FC8  4E75                    1650              RTS    
00001FCA                          1651  
00001FCA                          1652  *---------------------------------------------------------------------------*
00001FCA                          1653  * OP1100: Decode and display MULS/AND and proceed to EA
00001FCA                          1654  *---------------------------------------------------------------------------* 
00001FCA  4280                    1655  OP1100      CLR.L   D0                 
00001FCC  4281                    1656              CLR.L   D1    
00001FCE  4284                    1657              CLR.L   D4                
00001FD0  227C 00000000           1658              MOVEA.L #0, A1             
00001FD6                          1659              
00001FD6  2205                    1660              MOVE.L  D5,D1
00001FD8  EA89                    1661              LSR.L   #5,D1
00001FDA  0281 0000000E           1662              ANDI.L  #$E,D1
00001FE0  0C41 000E               1663              CMPI.W  #$E,D1
00001FE4  6700 0036               1664              BEQ     OP_MULS
00001FE8  0C41 0000               1665              CMPI.W  #$0,D1
00001FEC  6700 0042               1666              BEQ     OP_AND_B
00001FF0  0C41 0002               1667              CMPI.W  #$2,D1
00001FF4  6700 004C               1668              BEQ     OP_AND_W
00001FF8  0C41 0004               1669              CMPI.W  #$4,D1
00001FFC  6700 0056               1670              BEQ     OP_AND_L
00002000  0C41 0008               1671              CMPI.W  #$8,D1
00002004  6700 002A               1672              BEQ     OP_AND_B
00002008  0C41 000A               1673              CMPI.W  #$A,D1
0000200C  6700 0034               1674              BEQ     OP_AND_W
00002010  0C41 000C               1675              CMPI.W  #$C,D1
00002014  6700 003E               1676              BEQ     OP_AND_L
00002018                          1677  
00002018  4EF8 14CA               1678              JMP     OP_DATA
0000201C                          1679  
0000201C  43F9 00003BFA           1680  OP_MULS     LEA     DISP_MULS_W,A1
00002022  103C 000E               1681              MOVE.B  #14,D0
00002026  4E4F                    1682              TRAP    #15
00002028  4EF9 00002708           1683              JMP     EA_ARITH
0000202E  4E75                    1684              RTS
00002030                          1685              
00002030                          1686  OP_AND_B    
00002030  43F9 00003C04           1687              LEA     DISP_AND_B,A1
00002036  103C 000E               1688              MOVE.B  #14,D0
0000203A  4E4F                    1689              TRAP    #15
0000203C  183C 0000               1690              MOVE.B  #0,D4
00002040  4E75                    1691              RTS
00002042                          1692  
00002042                          1693  OP_AND_W
00002042  43F9 00003C0D           1694              LEA     DISP_AND_W,A1
00002048  103C 000E               1695              MOVE.B  #14,D0
0000204C  4E4F                    1696              TRAP    #15
0000204E  183C 0001               1697              MOVE.B  #1,D4
00002052  4E75                    1698              RTS
00002054                          1699  
00002054                          1700  OP_AND_L
00002054  43F9 00003C16           1701              LEA     DISP_AND_L,A1
0000205A  103C 000E               1702              MOVE.B  #14,D0
0000205E  4E4F                    1703              TRAP    #15
00002060  183C 0002               1704              MOVE.B  #2,D4
00002064  4E75                    1705              RTS
00002066                          1706  
00002066                          1707  *---------------------------------------------------------------------------*
00002066                          1708  * OP1101: Decode ADD/ADDA
00002066                          1709  *---------------------------------------------------------------------------* 
00002066  4280                    1710  OP1101      CLR.L   D0                  
00002068  4281                    1711              CLR.L   D1       
0000206A  4284                    1712              CLR.L   D4                   
0000206C  227C 00000000           1713              MOVEA.L #0, A1              
00002072  2205                    1714              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
00002074                          1715              
00002074                          1716              *CLEAR D3
00002074  4283                    1717              CLR.L   D3
00002076                          1718              
00002076                          1719              
00002076                          1720              
00002076                          1721              **INTEGRATING ADDA.W/.L INTO THIS CODE**
00002076  2205                    1722              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00002078                          1723              *BITS (INDEX 8) 
00002078                          1724              *0 = ADD.B/W/L <EA>,Dn
00002078                          1725              *1 = ADD.B/W/L Dn,<EA> 
00002078  EC99                    1726              ROR.L   #6,D1
0000207A  0281 00000007           1727              ANDI.L  #$07,D1                 *MASKS WITH 00000111
00002080  0C81 00000007           1728              CMPI.L  #$07,D1                 *IF EQUALS <ea>,Dn
00002086  6700 0010               1729              BEQ     OP1101_ADDA_L            *BRANCHES TO ADDA.L
0000208A  0C81 00000003           1730              CMPI.L  #$03,D1                 *IF EQUALS <ea>,Dn
00002090  6700 0078               1731              BEQ     OP1101_ADDA_W           *BRANCHES TO ADDA.W
00002094  6000 00E6               1732              BRA     OP1101_DETERMINE_DN_EA_OR_EA_DN         *ELSE CHECK ADD.B/.W/.L
00002098                          1733              
00002098                          1734  OP1101_ADDA_L
00002098                          1735              *LOAD STACK WITH THIS OPMODE
00002098  6100 13A8               1736              BSR     PUSH_STACK
0000209C  163C 0041               1737              MOVE.B  #'A',D3
000020A0  6100 13A0               1738              BSR     PUSH_STACK
000020A4  163C 0044               1739              MOVE.B  #'D',D3
000020A8  6100 1398               1740              BSR     PUSH_STACK
000020AC  163C 0044               1741              MOVE.B  #'D',D3
000020B0  6100 1390               1742              BSR     PUSH_STACK
000020B4  163C 0041               1743              MOVE.B  #'A',D3
000020B8  6100 1388               1744              BSR     PUSH_STACK
000020BC  163C 002E               1745              MOVE.B  #'.',D3
000020C0  6100 1380               1746              BSR     PUSH_STACK
000020C4  163C 004C               1747              MOVE.B  #'L',D3
000020C8  6100 1378               1748              BSR     PUSH_STACK
000020CC                          1749              
000020CC                          1750             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000020CC  13FC 0000 00003D68      1751             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000020D4  13FC 0000 00003D69      1752             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000020DC                          1753             
000020DC                          1754             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000020DC  13FC 00B9 00003D6B      1755             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000020E4  13FC 0020 00003D6C      1756             MOVE.B   #$20,GET_SRC_START_END
000020EC                          1757  
000020EC                          1758              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
000020EC  0285 0000FE3F           1759              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
000020F2  0685 00000040           1760              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
000020F8                          1761       
000020F8                          1762              *PRINT <EA>,AN
000020F8  6100 0AAA               1763              BSR     GET_EA_EA_SRC       *GETS <ea>
000020FC  163C 002C               1764              MOVE.B  #',',D3
00002100  6100 1340               1765              BSR     PUSH_STACK                     
00002104  6100 0ECE               1766              BSR     GET_EA_EA_DEST      *GETS Dn
00002108                          1767  
00002108                          1768              
00002108                          1769              
00002108  4E75                    1770              RTS
0000210A                          1771  OP1101_ADDA_W
0000210A                          1772              *LOAD STACK WITH THIS OPMODE
0000210A  6100 1336               1773              BSR     PUSH_STACK
0000210E  163C 0041               1774              MOVE.B  #'A',D3
00002112  6100 132E               1775              BSR     PUSH_STACK
00002116  163C 0044               1776              MOVE.B  #'D',D3
0000211A  6100 1326               1777              BSR     PUSH_STACK
0000211E  163C 0044               1778              MOVE.B  #'D',D3
00002122  6100 131E               1779              BSR     PUSH_STACK
00002126  163C 0041               1780              MOVE.B  #'A',D3
0000212A  6100 1316               1781              BSR     PUSH_STACK
0000212E  163C 002E               1782              MOVE.B  #'.',D3
00002132  6100 130E               1783              BSR     PUSH_STACK
00002136  163C 0057               1784              MOVE.B  #'W',D3
0000213A  6100 1306               1785              BSR     PUSH_STACK
0000213E                          1786              
0000213E                          1787             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000213E  13FC 0000 00003D68      1788             MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002146  13FC 0000 00003D69      1789             MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000214E                          1790             
0000214E                          1791             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000214E  13FC 00B9 00003D6B      1792             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002156  13FC 0020 00003D6C      1793             MOVE.B   #$20,GET_SRC_START_END
0000215E                          1794  
0000215E                          1795              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000215E  0285 0000FE3F           1796              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002164  0685 00000040           1797              ADDI.L  #%0000000001000000,D5   *Add.B  BITS 8-6 TO INDICATE A "An" Register (001) 
0000216A                          1798       
0000216A                          1799              *PRINT <EA>,AN
0000216A  6100 0A38               1800              BSR     GET_EA_EA_SRC       *GETS <ea>
0000216E  163C 002C               1801              MOVE.B  #',',D3
00002172  6100 12CE               1802              BSR     PUSH_STACK                     
00002176  6100 0E5C               1803              BSR     GET_EA_EA_DEST      *GETS Dn
0000217A                          1804  
0000217A  4E75                    1805              RTS
0000217C                          1806  
0000217C                          1807  OP1101_DETERMINE_DN_EA_OR_EA_DN 
0000217C                          1808              *LOAD STACK WITH THIS OPMODE
0000217C  6100 12C4               1809              BSR     PUSH_STACK
00002180  163C 0041               1810              MOVE.B  #'A',D3
00002184  6100 12BC               1811              BSR     PUSH_STACK
00002188  163C 0044               1812              MOVE.B  #'D',D3
0000218C  6100 12B4               1813              BSR     PUSH_STACK
00002190  163C 0044               1814              MOVE.B  #'D',D3
00002194  6100 12AC               1815              BSR     PUSH_STACK
00002198  163C 002E               1816              MOVE.B  #'.',D3
0000219C  6100 12A4               1817              BSR     PUSH_STACK
000021A0                          1818              
000021A0  2205                    1819              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
000021A2                          1820              
000021A2                          1821              *BITS (INDEX 8) 
000021A2                          1822              *0 = ADD.B/W/L <EA>,Dn
000021A2                          1823              *1 = ADD.B/W/L Dn,<EA> 
000021A2  E099                    1824              ROR.L   #8,D1
000021A4  0281 00000001           1825              ANDI.L  #$01,D1     *MASKS WITH 00000001
000021AA  0C81 00000000           1826              CMPI.L  #$00,D1     *IF EQUALS <ea>,Dn
000021B0  6700 0102               1827              BEQ     OP1101_EA_DN
000021B4                          1828              *else procede to Dn_EA
000021B4                          1829              
000021B4                          1830  OP1101_DN_EA
000021B4                          1831              *BITS (7 TO 6) 
000021B4                          1832              *00 = .B
000021B4                          1833              *01 = .W
000021B4                          1834              *10 = .L 
000021B4  2205                    1835              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
000021B6  EC99                    1836              ROR.L   #6,D1
000021B8  0281 00000003           1837              ANDI.L  #$03,D1
000021BE  0C81 00000000           1838              CMPI.L  #$00,D1 *EQUALS .B
000021C4  6700 0016               1839              BEQ     OP1101_PRINT_B2
000021C8  0C81 00000001           1840              CMPI.L  #$01,D1 *EQUALS .W
000021CE  6700 0054               1841              BEQ     OP1101_PRINT_W2
000021D2  0C81 00000002           1842              CMPI.L  #$02,D1 *EQUALS .L
000021D8  6700 0092               1843              BEQ     OP1101_PRINT_L2
000021DC                          1844  OP1101_PRINT_B2
000021DC                          1845              *PUSH 'B'
000021DC  163C 0042               1846              MOVE.B  #'B',D3
000021E0  6100 1260               1847              BSR     PUSH_STACK
000021E4                          1848             
000021E4                          1849              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000021E4  13FC 0002 00003D68      1850             MOVE.B   #$02,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000021EC  13FC 0083 00003D69      1851             MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000021F4                          1852             
000021F4                          1853             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000021F4  13FC 00B9 00003D6B      1854             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000021FC  13FC 0020 00003D6C      1855             MOVE.B   #$20,GET_SRC_START_END
00002204                          1856  
00002204                          1857              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002204  0285 0000FE3F           1858              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000220A  0685 00000000           1859              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002210                          1860       
00002210  6100 0DC2               1861              BSR     GET_EA_EA_DEST      *GETS Dn
00002214  163C 002C               1862              MOVE.B  #',',D3
00002218  6100 1228               1863              BSR     PUSH_STACK                     
0000221C  6100 0986               1864              BSR     GET_EA_EA_SRC       *GETS <ea>
00002220                          1865  
00002220                          1866              
00002220  6000 0192               1867              BRA     OP1101_ADD_RETURN
00002224                          1868  OP1101_PRINT_W2
00002224  163C 0057               1869              MOVE.B  #'W',D3
00002228  6100 1218               1870              BSR     PUSH_STACK
0000222C                          1871  
0000222C                          1872              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000222C  13FC 0000 00003D68      1873              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002234  13FC 0083 00003D69      1874              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000223C                          1875             
0000223C                          1876              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000223C  13FC 00B9 00003D6B      1877              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002244  13FC 0020 00003D6C      1878              MOVE.B   #$20,GET_SRC_START_END
0000224C                          1879  
0000224C                          1880              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000224C  0285 0000FE3F           1881              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002252  0685 00000000           1882              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002258                          1883  
00002258                          1884        
00002258  6100 0D7A               1885              BSR     GET_EA_EA_DEST      *GETS Dn
0000225C  163C 002C               1886              MOVE.B  #',',D3
00002260  6100 11E0               1887              BSR     PUSH_STACK               
00002264  6100 093E               1888              BSR     GET_EA_EA_SRC       *GETS <ea>       
00002268                          1889  
00002268                          1890  
00002268                          1891  
00002268  6000 014A               1892              BRA     OP1101_ADD_RETURN
0000226C                          1893  OP1101_PRINT_L2 
0000226C  163C 004C               1894              MOVE.B  #'L',D3
00002270  6100 11D0               1895              BSR     PUSH_STACK
00002274                          1896              
00002274                          1897              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002274  13FC 0000 00003D68      1898              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000227C  13FC 0083 00003D69      1899              MOVE.B   #$83,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002284                          1900             
00002284                          1901              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002284  13FC 00B9 00003D6B      1902              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000228C  13FC 0020 00003D6C      1903              MOVE.B   #$20,GET_SRC_START_END
00002294                          1904  
00002294                          1905             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002294  0285 0000FE3F           1906              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000229A  0685 00000000           1907              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
000022A0                          1908  
000022A0                          1909               
000022A0  6100 0D32               1910              BSR     GET_EA_EA_DEST       *GETS Dn
000022A4  163C 002C               1911              MOVE.B  #',',D3
000022A8  6100 1198               1912              BSR     PUSH_STACK          
000022AC  6100 08F6               1913              BSR     GET_EA_EA_SRC        *GETS <ea>
000022B0                          1914  
000022B0  6000 0102               1915              BRA     OP1101_ADD_RETURN
000022B4                          1916              
000022B4                          1917  OP1101_EA_DN           
000022B4                          1918              *BITS (7 TO 6) 
000022B4                          1919              *00 = .B
000022B4                          1920              *01 = .W
000022B4                          1921              *10 = .L 
000022B4  2205                    1922              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
000022B6  EC99                    1923              ROR.L   #6,D1
000022B8  0281 00000003           1924              ANDI.L  #$03,D1
000022BE  0C81 00000000           1925              CMPI.L  #$00,D1 *EQUALS .B
000022C4  6700 0016               1926              BEQ     OP1101_PRINT_B
000022C8  0C81 00000001           1927              CMPI.L  #$01,D1 *EQUALS .W
000022CE  6700 0054               1928              BEQ     OP1101_PRINT_W
000022D2  0C81 00000002           1929              CMPI.L  #$02,D1 *EQUALS .L
000022D8  6700 0092               1930              BEQ     OP1101_PRINT_L
000022DC                          1931  OP1101_PRINT_B
000022DC  163C 0042               1932              MOVE.B  #'B',D3
000022E0  6100 1160               1933              BSR     PUSH_STACK
000022E4                          1934                
000022E4                          1935              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000022E4  13FC 0002 00003D68      1936              MOVE.B   #$02,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
000022EC  13FC 0002 00003D69      1937              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
000022F4                          1938             
000022F4                          1939              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000022F4  13FC 00B9 00003D6B      1940              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
000022FC  13FC 0020 00003D6C      1941              MOVE.B   #$20,GET_SRC_START_END
00002304                          1942  
00002304                          1943             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002304  0285 0000FE3F           1944              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000230A  0685 00000000           1945              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002310                          1946  
00002310                          1947              
00002310  6100 0892               1948              BSR     GET_EA_EA_SRC      *GETS <ea>
00002314  163C 002C               1949              MOVE.B  #',',D3
00002318  6100 1128               1950              BSR     PUSH_STACK          
0000231C  6100 0CB6               1951              BSR     GET_EA_EA_DEST       *GETS Dn
00002320                          1952              
00002320  6000 0092               1953              BRA     OP1101_ADD_RETURN
00002324                          1954  OP1101_PRINT_W
00002324  163C 0057               1955              MOVE.B  #'W',D3
00002328  6100 1118               1956              BSR     PUSH_STACK
0000232C                          1957  
0000232C                          1958              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000232C  13FC 0000 00003D68      1959              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00002334  13FC 0000 00003D69      1960              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
0000233C                          1961             
0000233C                          1962              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000233C  13FC 00B9 00003D6B      1963              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00002344  13FC 0020 00003D6C      1964              MOVE.B   #$20,GET_SRC_START_END
0000234C                          1965  
0000234C                          1966             *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
0000234C  0285 0000FE3F           1967              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
00002352  0685 00000000           1968              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
00002358                          1969  
00002358                          1970              
00002358  6100 084A               1971              BSR     GET_EA_EA_SRC      *GETS <ea>
0000235C  163C 002C               1972              MOVE.B  #',',D3
00002360  6100 10E0               1973              BSR     PUSH_STACK
00002364  6100 0C6E               1974              BSR     GET_EA_EA_DEST       *GETS Dn    
00002368                          1975              
00002368  6000 004A               1976              BRA     OP1101_ADD_RETURN
0000236C                          1977  OP1101_PRINT_L 
0000236C  163C 004C               1978              MOVE.B  #'L',D3
00002370  6100 10D0               1979              BSR     PUSH_STACK
00002374                          1980              
00002374                          1981              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00002374  13FC 0000 00003D68      1982              MOVE.B   #$00,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
0000237C  13FC 0000 00003D69      1983              MOVE.B   #$00,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00002384                          1984             
00002384                          1985              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00002384  13FC 00B9 00003D6B      1986              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
0000238C  13FC 0020 00003D6C      1987              MOVE.B   #$20,GET_SRC_START_END
00002394                          1988  
00002394                          1989              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00002394  0285 0000FE3F           1990              ANDI.L  #$FE3F,D5   *inverse mask bits 8-6 with 1111(F[15]) 1110(E[14]) 0011(3) 1111(F[15]), TO REPLACE OPMODE WITH DN-MODE
0000239A  0685 00000000           1991              ADDI.L  #$0000,D5   *Add.B  BITS 8-6 TO INDICATE A Dn Register (000) 
000023A0                          1992  
000023A0                          1993                     
000023A0  6100 0802               1994              BSR     GET_EA_EA_SRC      *GETS <ea>
000023A4  163C 002C               1995              MOVE.B  #',',D3
000023A8  6100 1098               1996              BSR     PUSH_STACK                  
000023AC  6100 0C26               1997              BSR     GET_EA_EA_DEST       *GETS Dn    
000023B0                          1998  
000023B0                          1999              
000023B0  6000 0002               2000              BRA     OP1101_ADD_RETURN
000023B4                          2001              
000023B4                          2002  OP1101_ADD_RETURN
000023B4  4E75                    2003              RTS
000023B6                          2004              
000023B6                          2005              *ADDW
000023B6  0C01 0006               2006              CMPI.B  #$6,D1
000023BA  6700 0056               2007              BEQ     OP_ADDA_W
000023BE  0C01 000E               2008              CMPI.B  #$E,D1
000023C2  6700 0066               2009              BEQ     OP_ADDA_L 
000023C6                          2010  
000023C6  4EF8 14CA               2011              JMP     OP_DATA  
000023CA                          2012            
000023CA                          2013  *---------------------------------------------------------------------------*
000023CA                          2014  * OP_ADD: display ADD and proceed to EA
000023CA                          2015  *---------------------------------------------------------------------------*  
000023CA  43F9 00003C1F           2016  OP_ADD_B    LEA     DISP_ADD_B,A1
000023D0  103C 000E               2017              MOVE.B  #14,D0
000023D4  4E4F                    2018              TRAP    #15
000023D6  183C 0000               2019              MOVE.B  #0,D4
000023DA  4EF9 00002754           2020              JMP     EA_GEN
000023E0                          2021  
000023E0  4E75                    2022              RTS
000023E2                          2023  
000023E2  43F9 00003C28           2024  OP_ADD_W    LEA     DISP_ADD_W,A1
000023E8  103C 000E               2025              MOVE.B  #14,D0
000023EC  4E4F                    2026              TRAP    #15
000023EE  183C 0001               2027              MOVE.B  #1,D4
000023F2  4EF9 00002754           2028              JMP     EA_GEN
000023F8                          2029  
000023F8  4E75                    2030              RTS
000023FA                          2031  
000023FA  43F9 00003C31           2032  OP_ADD_L    LEA     DISP_ADD_L,A1
00002400  103C 000E               2033              MOVE.B  #14,D0
00002404  4E4F                    2034              TRAP    #15
00002406  183C 0002               2035              MOVE.B  #2,D4
0000240A  4EF9 00002754           2036              JMP     EA_GEN
00002410                          2037  
00002410  4E75                    2038              RTS
00002412                          2039  
00002412                          2040  *---------------------------------------------------------------------------*
00002412                          2041  * OP_ADDA: display ADDA and proceed to EA
00002412                          2042  *---------------------------------------------------------------------------*  
00002412  43F9 00003C3A           2043  OP_ADDA_W   LEA     DISP_ADDA_W,A1
00002418  103C 000E               2044              MOVE.B  #14,D0
0000241C  4E4F                    2045              TRAP    #15
0000241E  183C 0001               2046              MOVE.B  #1,D4
00002422  4EF9 00002754           2047              JMP     EA_GEN
00002428                          2048  
00002428  4E75                    2049              RTS
0000242A                          2050  
0000242A  43F9 00003C44           2051  OP_ADDA_L   LEA     DISP_ADDA_L,A1
00002430  103C 000E               2052              MOVE.B  #14,D0
00002434  4E4F                    2053              TRAP    #15
00002436  183C 0002               2054              MOVE.B  #2,D4
0000243A  4EF9 00002754           2055              JMP     EA_GEN
00002440                          2056  
00002440  4E75                    2057              RTS
00002442                          2058              
00002442                          2059  *---------------------------------------------------------------------------*
00002442                          2060  * OP1110: LSR/LSL/ASR/ASL/ROL/ROR
00002442                          2061  *---------------------------------------------------------------------------* 
00002442  4280                    2062  OP1110      CLR.L   D0                  
00002444  4281                    2063              CLR.L   D1   
00002446  4284                    2064              CLR.L   D4                   
00002448  227C 00000000           2065              MOVEA.L #0, A1                 
0000244E  2205                    2066              MOVE.L  D5,D1
00002450                          2067              
00002450                          2068              * check for LSX
00002450  E699                    2069              ROR.L   #3,D1
00002452  0281 00000001           2070              ANDI.L  #$1,D1
00002458  0C01 0001               2071              CMPI.B  #1,D1
0000245C  6700 002E               2072              BEQ     OP_LSX
00002460                          2073              
00002460                          2074              * reset D1 and check for ASX
00002460  4281                    2075              CLR.L   D1
00002462  2205                    2076              MOVE.L  D5,D1
00002464  E699                    2077              ROR.L   #3,D1
00002466  0281 00000001           2078              ANDI.L  #$1,D1
0000246C  0C01 0000               2079              CMPI.B  #0,D1
00002470  6700 0032               2080              BEQ     OP_ASX
00002474                          2081  
00002474                          2082              * reset D1 and check for ROX
00002474  4281                    2083              CLR.L   D1
00002476  2205                    2084              MOVE.L  D5,D1
00002478  E699                    2085              ROR.L   #3,D1
0000247A  0281 00000001           2086              ANDI.L  #$1,D1
00002480  0C01 0003               2087              CMPI.B  #3,D1
00002484  6700 0036               2088              BEQ     OP_ROX
00002488                          2089              
00002488  4EF8 14CA               2090              JMP     OP_DATA
0000248C                          2091  
0000248C                          2092  *---------------------------------------------------------------------------*
0000248C                          2093  * OP_LSX: process LSR/LSL
0000248C                          2094  *---------------------------------------------------------------------------*            
0000248C  EA99                    2095  OP_LSX      ROR.L   #5,D1
0000248E  0281 00000001           2096              ANDI.L  #$1,D1
00002494  0C01 0000               2097              CMPI.B  #0,D1
00002498  6700 003A               2098              BEQ     OP_LSR
0000249C  0C01 0001               2099              CMPI.B  #1,D1
000024A0  6700 008C               2100              BEQ     OP_LSL
000024A4                          2101              
000024A4                          2102  *---------------------------------------------------------------------------*
000024A4                          2103  * OP_ASX: process ASR/ASL
000024A4                          2104  *---------------------------------------------------------------------------*  
000024A4  EA99                    2105  OP_ASX      ROR.L   #5,D1
000024A6  0281 00000001           2106              ANDI.L  #$1,D1
000024AC  0C01 0000               2107              CMPI.B  #0,D1
000024B0  6700 00D6               2108              BEQ     OP_ASR
000024B4  0C01 0001               2109              CMPI.B  #1,D1
000024B8  6700 0128               2110              BEQ     OP_ASL
000024BC                          2111              
000024BC                          2112  *---------------------------------------------------------------------------*
000024BC                          2113  * OP_ROX: process ROR/ROL
000024BC                          2114  *---------------------------------------------------------------------------*  
000024BC  EA99                    2115  OP_ROX      ROR.L   #5,D1
000024BE  0281 00000001           2116              ANDI.L  #$1,D1
000024C4  0C01 0000               2117              CMPI.B  #0,D1
000024C8  6700 0172               2118              BEQ     OP_ROR
000024CC  0C01 0001               2119              CMPI.B  #1,D1
000024D0  6700 01C4               2120              BEQ     OP_ROL
000024D4                          2121  
000024D4                          2122  *---------------------------------------------------------------------------*
000024D4                          2123  * OP_LSR: decode and display LSR
000024D4                          2124  *---------------------------------------------------------------------------*        
000024D4  E599                    2125  OP_LSR      ROL.L   #2,D1
000024D6  0281 00000003           2126              ANDI.L  #$3,D1
000024DC  0C01 0000               2127              CMPI.B  #0,D1
000024E0  6700 0016               2128              BEQ     OP_LSR_B
000024E4  0C01 0001               2129              CMPI.B  #$1,D1
000024E8  6700 0032               2130              BEQ     OP_LSR_W
000024EC  0C01 0002               2131              CMPI.B  #$2,D1
000024F0  6700 0018               2132              BEQ     OP_LSR_L
000024F4                          2133              
000024F4  4EF8 14CA               2134              JMP     OP_DATA
000024F8                          2135  
000024F8  43F9 00003C4E           2136  OP_LSR_B    LEA     DISP_LSR_B,A1
000024FE  103C 000E               2137              MOVE.B  #14,D0
00002502  4E4F                    2138              TRAP    #15
00002504  183C 0000               2139              MOVE.B  #0,D4
00002508  4E75                    2140              RTS
0000250A                          2141  
0000250A  43F9 00003C72           2142  OP_LSR_L    LEA     DISP_LSR_L,A1
00002510  103C 000E               2143              MOVE.B  #14,D0
00002514  4E4F                    2144              TRAP    #15
00002516  183C 0002               2145              MOVE.B  #2,D4
0000251A  4E75                    2146              RTS
0000251C                          2147  
0000251C  43F9 00003C60           2148  OP_LSR_W    LEA     DISP_LSR_W,A1
00002522  103C 000E               2149              MOVE.B  #14,D0
00002526  4E4F                    2150              TRAP    #15
00002528  183C 0001               2151              MOVE.B  #1,D4
0000252C  4E75                    2152              RTS
0000252E                          2153   
0000252E                          2154  *---------------------------------------------------------------------------*
0000252E                          2155  * OP_LSL: decode and display LSL
0000252E                          2156  *---------------------------------------------------------------------------*             
0000252E  E599                    2157  OP_LSL      ROL.L   #2,D1
00002530  0281 00000003           2158              ANDI.L  #$3,D1
00002536  0C01 0000               2159              CMPI.B  #0,D1
0000253A  6700 0016               2160              BEQ     OP_LSL_B
0000253E  0C01 0001               2161              CMPI.B  #$1,D1
00002542  6700 0032               2162              BEQ     OP_LSL_W
00002546  0C01 0002               2163              CMPI.B  #$2,D1
0000254A  6700 0018               2164              BEQ     OP_LSL_L
0000254E                          2165              
0000254E  4EF8 14CA               2166              JMP OP_DATA
00002552                          2167  
00002552  43F9 00003C57           2168  OP_LSL_B    LEA     DISP_LSL_B,A1
00002558  103C 000E               2169              MOVE.B  #14,D0
0000255C  4E4F                    2170              TRAP    #15
0000255E  183C 0000               2171              MOVE.B  #0,D4
00002562  4E75                    2172              RTS
00002564                          2173  
00002564  43F9 00003C7B           2174  OP_LSL_L    LEA     DISP_LSL_L,A1
0000256A  103C 000E               2175              MOVE.B  #14,D0
0000256E  4E4F                    2176              TRAP    #15
00002570  183C 0002               2177              MOVE.B  #2,D4
00002574  4E75                    2178              RTS
00002576                          2179  
00002576  43F9 00003C69           2180  OP_LSL_W    LEA     DISP_LSL_W,A1
0000257C  103C 000E               2181              MOVE.B  #14,D0
00002580  4E4F                    2182              TRAP    #15
00002582  183C 0001               2183              MOVE.B  #1,D4
00002586  4E75                    2184              RTS
00002588                          2185   
00002588                          2186  *---------------------------------------------------------------------------*
00002588                          2187  * OP_ASR: decode and display ASR
00002588                          2188  *---------------------------------------------------------------------------*             
00002588  E599                    2189  OP_ASR      ROL.L   #2,D1
0000258A  0281 00000003           2190              ANDI.L  #$3,D1
00002590  0C01 0000               2191              CMPI.B  #0,D1
00002594  6700 0016               2192              BEQ     OP_ASR_B
00002598  0C01 0001               2193              CMPI.B  #$1,D1
0000259C  6700 0032               2194              BEQ     OP_ASR_W
000025A0  0C01 0002               2195              CMPI.B  #$2,D1
000025A4  6700 0018               2196              BEQ     OP_ASR_L
000025A8                          2197              
000025A8  4EF8 14CA               2198              JMP OP_DATA
000025AC                          2199  
000025AC  43F9 00003C84           2200  OP_ASR_B    LEA     DISP_ASR_B,A1
000025B2  103C 000E               2201              MOVE.B  #14,D0
000025B6  4E4F                    2202              TRAP    #15
000025B8  183C 0000               2203              MOVE.B  #0,D4
000025BC  4E75                    2204              RTS
000025BE                          2205  
000025BE  43F9 00003CA8           2206  OP_ASR_L    LEA     DISP_ASR_L,A1
000025C4  103C 000E               2207              MOVE.B  #14,D0
000025C8  4E4F                    2208              TRAP    #15
000025CA  183C 0002               2209              MOVE.B  #2,D4
000025CE  4E75                    2210              RTS
000025D0                          2211  
000025D0  43F9 00003C96           2212  OP_ASR_W    LEA     DISP_ASR_W,A1
000025D6  103C 000E               2213              MOVE.B  #14,D0
000025DA  4E4F                    2214              TRAP    #15
000025DC  183C 0001               2215              MOVE.B  #1,D4
000025E0  4E75                    2216              RTS
000025E2                          2217       
000025E2                          2218  *---------------------------------------------------------------------------*
000025E2                          2219  * OP_ASL: decode and display ASL
000025E2                          2220  *---------------------------------------------------------------------------*         
000025E2  E599                    2221  OP_ASL      ROL.L   #2,D1
000025E4  0281 00000003           2222              ANDI.L  #$3,D1
000025EA  0C01 0000               2223              CMPI.B  #0,D1
000025EE  6700 0016               2224              BEQ     OP_ASL_B
000025F2  0C01 0001               2225              CMPI.B  #$1,D1
000025F6  6700 0032               2226              BEQ     OP_ASL_W
000025FA  0C01 0002               2227              CMPI.B  #$2,D1
000025FE  6700 0018               2228              BEQ     OP_ASL_L
00002602                          2229              
00002602  4EF8 14CA               2230              JMP OP_DATA
00002606                          2231  
00002606  43F9 00003C8D           2232  OP_ASL_B    LEA     DISP_ASL_B,A1
0000260C  103C 000E               2233              MOVE.B  #14,D0
00002610  4E4F                    2234              TRAP    #15
00002612  183C 0000               2235              MOVE.B  #0,D4
00002616  4E75                    2236              RTS
00002618                          2237  
00002618  43F9 00003CB1           2238  OP_ASL_L    LEA     DISP_ASL_L,A1
0000261E  103C 000E               2239              MOVE.B  #14,D0
00002622  4E4F                    2240              TRAP    #15
00002624  183C 0002               2241              MOVE.B  #2,D4
00002628  4E75                    2242              RTS
0000262A                          2243  
0000262A  43F9 00003C9F           2244  OP_ASL_W    LEA     DISP_ASL_W,A1
00002630  103C 000E               2245              MOVE.B  #14,D0
00002634  4E4F                    2246              TRAP    #15
00002636  183C 0001               2247              MOVE.B  #1,D4
0000263A  4E75                    2248              RTS
0000263C                          2249   
0000263C                          2250  *---------------------------------------------------------------------------*
0000263C                          2251  * OP_ROR: decode and display ROR
0000263C                          2252  *---------------------------------------------------------------------------*             
0000263C  E599                    2253  OP_ROR      ROL.L   #2,D1
0000263E  0281 00000003           2254              ANDI.L  #$3,D1
00002644  0C01 0000               2255              CMPI.B  #0,D1
00002648  6700 0016               2256              BEQ     OP_ROR_B
0000264C  0C01 0001               2257              CMPI.B  #$1,D1
00002650  6700 0032               2258              BEQ     OP_ROR_W
00002654  0C01 0002               2259              CMPI.B  #$2,D1
00002658  6700 0018               2260              BEQ     OP_ROR_L
0000265C                          2261              
0000265C  4EF8 14CA               2262              JMP OP_DATA
00002660                          2263  
00002660  43F9 00003CBA           2264  OP_ROR_B    LEA     DISP_ROR_B,A1
00002666  103C 000E               2265              MOVE.B  #14,D0
0000266A  4E4F                    2266              TRAP    #15
0000266C  183C 0000               2267              MOVE.B  #0,D4
00002670  4E75                    2268              RTS
00002672                          2269  
00002672  43F9 00003CDE           2270  OP_ROR_L    LEA     DISP_ROR_L,A1
00002678  103C 000E               2271              MOVE.B  #14,D0
0000267C  4E4F                    2272              TRAP    #15
0000267E  183C 0002               2273              MOVE.B  #2,D4
00002682  4E75                    2274              RTS
00002684                          2275  
00002684  43F9 00003CCC           2276  OP_ROR_W    LEA     DISP_ROR_W,A1
0000268A  103C 000E               2277              MOVE.B  #14,D0
0000268E  4E4F                    2278              TRAP    #15
00002690  183C 0001               2279              MOVE.B  #1,D4
00002694  4E75                    2280              RTS
00002696                          2281  
00002696                          2282  *---------------------------------------------------------------------------*
00002696                          2283  * OP_ROL: decode and display ROL
00002696                          2284  *---------------------------------------------------------------------------*             
00002696  E599                    2285  OP_ROL      ROL.L   #2,D1
00002698  0281 00000003           2286              ANDI.L  #$3,D1
0000269E  0C01 0000               2287              CMPI.B  #0,D1
000026A2  6700 0016               2288              BEQ     OP_ROL_B
000026A6  0C01 0001               2289              CMPI.B  #$1,D1
000026AA  6700 0032               2290              BEQ     OP_ROL_W
000026AE  0C01 0002               2291              CMPI.B  #$2,D1
000026B2  6700 0018               2292              BEQ     OP_ROL_L
000026B6                          2293              
000026B6  4EF8 14CA               2294              JMP OP_DATA
000026BA                          2295  
000026BA                          2296  
000026BA  43F9 00003CC3           2297  OP_ROL_B    LEA     DISP_ROL_B,A1
000026C0  103C 000E               2298              MOVE.B  #14,D0
000026C4  4E4F                    2299              TRAP    #15
000026C6  183C 0000               2300              MOVE.B  #0,D4
000026CA  4E75                    2301              RTS
000026CC                          2302  
000026CC  43F9 00003CE7           2303  OP_ROL_L    LEA     DISP_ROL_L,A1
000026D2  103C 000E               2304              MOVE.B  #14,D0
000026D6  4E4F                    2305              TRAP    #15
000026D8  183C 0002               2306              MOVE.B  #2,D4
000026DC  4E75                    2307              RTS
000026DE                          2308  
000026DE  43F9 00003CD5           2309  OP_ROL_W    LEA     DISP_ROL_W,A1
000026E4  103C 000E               2310              MOVE.B  #14,D0
000026E8  4E4F                    2311              TRAP    #15
000026EA  183C 0001               2312              MOVE.B  #1,D4
000026EE  4E75                    2313              RTS
000026F0                          2314              
000026F0                          2315  *---------------------------------------------------------------------------*
000026F0                          2316  * OP1111 : Special reserved
000026F0                          2317  *---------------------------------------------------------------------------*           
000026F0  4EF8 14CA               2318  OP1111      JMP     OP_DATA
000026F4                          2319  
000026F4                          2320  *---------------------------------------------------------------------------*
000026F4                          2321  * EA_NOSRC: decode and display effective addresses for NEG/JSR
000026F4                          2322  *---------------------------------------------------------------------------*
000026F4                          2323  EA_NOSRC    
000026F4  4EB9 000027B2           2324              JSR     SRC_MODE
000026FA  43F9 000039B4           2325              LEA     ENDLINE_M,A1
00002700  103C 000E               2326              MOVE.B  #14,D0
00002704  4E4F                    2327              TRAP    #15
00002706  4E75                    2328              RTS
00002708                          2329              
00002708                          2330  *---------------------------------------------------------------------------*
00002708                          2331  * EA_ARITH: decode and display effective addresses for DIVS/MULS
00002708                          2332  *---------------------------------------------------------------------------*
00002708                          2333  EA_ARITH
00002708  4EB9 000027B2           2334              JSR     SRC_MODE
0000270E  43F9 00003D2E           2335              LEA     DISP_D,A1
00002714  103C 000E               2336              MOVE.B  #14,D0
00002718  4E4F                    2337              TRAP    #15
0000271A  4EB9 00002A3E           2338              JSR     DEST_REGISTER
00002720  43F9 000039B4           2339              LEA     ENDLINE_M,A1
00002726  103C 000E               2340              MOVE.B  #14,D0
0000272A  4E4F                    2341              TRAP    #15
0000272C  4E75                    2342              RTS
0000272E                          2343              
0000272E                          2344  *---------------------------------------------------------------------------*
0000272E                          2345  * EA_MOVEA: decode and display effective addresses for MOVEA/LEA
0000272E                          2346  *---------------------------------------------------------------------------*
0000272E                          2347  EA_MOVEA
0000272E  4EB9 000027B2           2348              JSR     SRC_MODE
00002734  43F9 00003D3F           2349              LEA     DISP_AOP,A1
0000273A  103C 000E               2350              MOVE.B  #14,D0
0000273E  4E4F                    2351              TRAP    #15
00002740  4EB9 00002A3E           2352              JSR     DEST_REGISTER
00002746  43F9 00003D3D           2353              LEA     DISP_CP,A1
0000274C  103C 000D               2354              MOVE.B  #13,D0
00002750  4E4F                    2355              TRAP    #15
00002752  4E75                    2356              RTS
00002754                          2357              
00002754                          2358  *---------------------------------------------------------------------------*
00002754                          2359  * EA_GEN: decode and display effective addresses for MOVE
00002754                          2360  *---------------------------------------------------------------------------*
00002754                          2361  EA_GEN          
00002754                          2362              * retrieve/display source mode/register
00002754  4EB9 000027B2           2363              JSR     SRC_MODE
0000275A                          2364              
0000275A                          2365              * retrieve/display destination mode/register
0000275A  4EB9 0000276E           2366              JSR     DEST_MODE
00002760                          2367              
00002760  43F9 000039B4           2368              LEA     ENDLINE_M,A1
00002766  103C 000E               2369              MOVE.B  #14,D0
0000276A  4E4F                    2370              TRAP    #15
0000276C                          2371              
0000276C  4E75                    2372              RTS
0000276E                          2373  
0000276E                          2374  *---------------------------------------------------------------------------*
0000276E                          2375  * DEST_MODE: decode and display destination mode (bit 8 - 6)
0000276E                          2376  *---------------------------------------------------------------------------*           
0000276E                          2377  DEST_MODE   
0000276E                          2378              * clear registers to store temp data
0000276E  4280                    2379              CLR.L   D0                      
00002770  4281                    2380              CLR.L   D1                      
00002772  207C 00000000           2381              MOVEA.L #0, A0                  
00002778  227C 00000000           2382              MOVEA.L #0, A1                  
0000277E  2205                    2383              MOVE.L  D5,D1
00002780  EC89                    2384              LSR.L   #6,D1
00002782  0281 00000007           2385              ANDI.L  #$7,D1
00002788  0C01 0000               2386              CMPI.B  #0,D1   * Dn
0000278C  6700 0082               2387              BEQ     D_MODE000
00002790  0C01 0002               2388              CMPI.B  #2,D1   * (An)
00002794  6700 00C2               2389              BEQ     D_MODE010
00002798  0C01 0003               2390              CMPI.B  #3,D1   * (An)+
0000279C  6700 011A               2391              BEQ     D_MODE011
000027A0  0C01 0004               2392              CMPI.B  #4,D1   * -(An)
000027A4  6700 0132               2393              BEQ     D_MODE100
000027A8  0C01 0007               2394              CMPI.B  #7,D1  * abs
000027AC  6700 017C               2395              BEQ     D_MODE111 
000027B0  4E75                    2396              RTS
000027B2                          2397  
000027B2                          2398  *---------------------------------------------------------------------------*
000027B2                          2399  * SRC_MODE: decode and display source mode (bit 5 - 3)
000027B2                          2400  *---------------------------------------------------------------------------*  
000027B2                          2401  SRC_MODE    
000027B2                          2402              * clear registers to store temp data
000027B2  4280                    2403              CLR.L   D0                      
000027B4  4281                    2404              CLR.L   D1                      
000027B6  207C 00000000           2405              MOVEA.L #0, A0                  
000027BC  227C 00000000           2406              MOVEA.L #0, A1                  
000027C2  2205                    2407              MOVE.L  D5,D1
000027C4  E489                    2408              LSR.L   #2,D1
000027C6  0281 0000000E           2409              ANDI.L  #$E,D1
000027CC                          2410              
000027CC  0C01 0000               2411              CMPI.B  #0,D1   * Dn
000027D0  6700 002A               2412              BEQ     MODE000
000027D4  0C01 0002               2413              CMPI.B  #2,D1   * An 
000027D8  6700 004A               2414              BEQ     MODE001
000027DC  0C01 0004               2415              CMPI.B  #4,D1   * (An)
000027E0  6700 0056               2416              BEQ     MODE010
000027E4  0C01 0006               2417              CMPI.B  #6,D1   * (An)+
000027E8  6700 008E               2418              BEQ     MODE011
000027EC  0C01 0008               2419              CMPI.B  #8,D1   * -(An)
000027F0  6700 00A6               2420              BEQ     MODE100
000027F4  0C01 000F               2421              CMPI.B  #15,D1  * abs/immediate
000027F8  6700 00FE               2422              BEQ     MODE111 
000027FC                          2423        
000027FC                          2424  *---------------------------------------------------------------------------*
000027FC                          2425  * MODE000: decode and display source mode Dn
000027FC                          2426  *---------------------------------------------------------------------------*           
000027FC                          2427  MODE000     *Dn
000027FC  43F9 00003D2E           2428              LEA     DISP_D,A1
00002802  103C 000E               2429              MOVE.B  #14,D0
00002806  4E4F                    2430              TRAP    #15
00002808  4EB9 00002A9A           2431              JSR     SRC_REGISTER
0000280E  4E75                    2432              RTS
00002810                          2433  
00002810                          2434  *---------------------------------------------------------------------------*
00002810                          2435  * D_MODE000: decode and display dest mode Dn
00002810                          2436  *---------------------------------------------------------------------------*
00002810                          2437  D_MODE000     *Dn
00002810  43F9 00003D2E           2438              LEA     DISP_D,A1
00002816  103C 000E               2439              MOVE.B  #14,D0
0000281A  4E4F                    2440              TRAP    #15
0000281C  4EB9 00002A3E           2441              JSR     DEST_REGISTER
00002822  4E75                    2442              RTS
00002824                          2443  
00002824                          2444  *---------------------------------------------------------------------------*
00002824                          2445  * MODE001: decode and display source mode An
00002824                          2446  *---------------------------------------------------------------------------* 
00002824                          2447  MODE001 *An
00002824  43F9 00003D33           2448              LEA     DISP_A,A1
0000282A  103C 000E               2449              MOVE.B  #14,D0
0000282E  4E4F                    2450              TRAP    #15
00002830  4EB9 00002A9A           2451              JSR     SRC_REGISTER
00002836                          2452          
00002836  4E75                    2453              RTS
00002838                          2454  
00002838                          2455  *---------------------------------------------------------------------------*
00002838                          2456  * MODE010: decode and display source mode (An)
00002838                          2457  *---------------------------------------------------------------------------*    
00002838                          2458  MODE010 *(An)
00002838  43F9 00003D3F           2459              LEA     DISP_AOP,A1  *display (A
0000283E  103C 000E               2460              MOVE.B  #14,D0
00002842  4E4F                    2461              TRAP    #15
00002844                          2462  
00002844  4EB9 00002A9A           2463              JSR     SRC_REGISTER * display register
0000284A                          2464  
0000284A  43F9 00003D3D           2465              LEA     DISP_CP,A1   *display )
00002850  103C 000E               2466              MOVE.B  #14,D0
00002854  4E4F                    2467              TRAP    #15
00002856                          2468              
00002856  4E75                    2469              RTS
00002858                          2470  
00002858                          2471  *---------------------------------------------------------------------------*
00002858                          2472  * D_MODE010: decode and display dest mode (An)
00002858                          2473  *---------------------------------------------------------------------------*
00002858                          2474  D_MODE010 *(An)
00002858  43F9 00003D3F           2475              LEA     DISP_AOP,A1  *display (A
0000285E  103C 000E               2476              MOVE.B  #14,D0
00002862  4E4F                    2477              TRAP    #15
00002864                          2478     
00002864  4EB9 00002A3E           2479              JSR     DEST_REGISTER * display register
0000286A                          2480  
0000286A  43F9 00003D3D           2481              LEA     DISP_CP,A1   *display )
00002870  103C 000E               2482              MOVE.B  #14,D0
00002874  4E4F                    2483              TRAP    #15
00002876                          2484              
00002876  4E75                    2485              RTS
00002878                          2486  
00002878                          2487  *---------------------------------------------------------------------------*
00002878                          2488  * MODE011: decode and display source mode (An)+
00002878                          2489  *---------------------------------------------------------------------------*
00002878                          2490  MODE011 *(An)+
00002878  43F9 00003D3F           2491              LEA     DISP_AOP,A1      *display (A
0000287E  103C 000E               2492              MOVE.B  #14,D0
00002882  4E4F                    2493              TRAP    #15
00002884                          2494              
00002884  4EB9 00002A9A           2495              JSR     SRC_REGISTER    * display register
0000288A                          2496  
0000288A  43F9 00003D4C           2497              LEA     DISP_POST,A1    *display )+
00002890  103C 000E               2498              MOVE.B  #14,D0
00002894  4E4F                    2499              TRAP    #15
00002896                          2500              
00002896  4E75                    2501              RTS
00002898                          2502              
00002898                          2503  *---------------------------------------------------------------------------*
00002898                          2504  * MODE100: decode and display source mode -(An)
00002898                          2505  *---------------------------------------------------------------------------*
00002898                          2506  MODE100 *-(An)
00002898  43F9 00003D45           2507              LEA     DISP_PRE,A1    *display -(A
0000289E  103C 000E               2508              MOVE.B  #14,D0
000028A2  4E4F                    2509              TRAP    #15
000028A4                          2510  
000028A4  4EB9 00002A9A           2511              JSR     SRC_REGISTER    *display register
000028AA                          2512  
000028AA  43F9 00003D3D           2513              LEA     DISP_CP,A1   *display )
000028B0  103C 000E               2514              MOVE.B  #14,D0
000028B4  4E4F                    2515              TRAP    #15
000028B6                          2516              
000028B6  4E75                    2517              RTS
000028B8                          2518  
000028B8                          2519  *---------------------------------------------------------------------------*
000028B8                          2520  * D_MODE011: decode and display dest mode (An)+
000028B8                          2521  *---------------------------------------------------------------------------*
000028B8                          2522  D_MODE011 *(An)+
000028B8  43F9 00003D3F           2523              LEA     DISP_AOP,A1      *display (A
000028BE  103C 000E               2524              MOVE.B  #14,D0
000028C2  4E4F                    2525              TRAP    #15
000028C4                          2526  
000028C4  4EB9 00002A3E           2527              JSR     DEST_REGISTER    * display register
000028CA                          2528  
000028CA  43F9 00003D4C           2529              LEA     DISP_POST,A1    *display )+
000028D0  103C 000E               2530              MOVE.B  #14,D0
000028D4  4E4F                    2531              TRAP    #15
000028D6                          2532              
000028D6  4E75                    2533              RTS
000028D8                          2534              
000028D8                          2535  *---------------------------------------------------------------------------*
000028D8                          2536  * D_MODE100: decode and display dest mode -(An)
000028D8                          2537  *---------------------------------------------------------------------------*            
000028D8                          2538  D_MODE100 *-(An)
000028D8  43F9 00003D45           2539              LEA     DISP_PRE,A1    *display -(A
000028DE  103C 000E               2540              MOVE.B  #14,D0
000028E2  4E4F                    2541              TRAP    #15
000028E4                          2542              
000028E4  4EB9 00002A3E           2543              JSR     DEST_REGISTER    *display register
000028EA                          2544  
000028EA  43F9 00003D3D           2545              LEA     DISP_CP,A1   *display )
000028F0  103C 000E               2546              MOVE.B  #14,D0
000028F4  4E4F                    2547              TRAP    #15
000028F6                          2548              
000028F6  4E75                    2549              RTS
000028F8                          2550  
000028F8                          2551  *---------------------------------------------------------------------------*
000028F8                          2552  * MODE111: decode and display source mode absolute/immediate
000028F8                          2553  *---------------------------------------------------------------------------*
000028F8                          2554  MODE111     * abs/immediate
000028F8                          2555              * clear registers to store temp data
000028F8  4280                    2556              CLR.L   D0                      
000028FA  4281                    2557              CLR.L   D1                      
000028FC  207C 00000000           2558              MOVEA.L #0, A0                  
00002902  227C 00000000           2559              MOVEA.L #0, A1                  
00002908  2205                    2560              MOVE.L  D5,D1
0000290A                          2561              
0000290A                          2562              * retrieve source register for MODE 111
0000290A  E389                    2563              LSL.L   #1,D1   * shift the bits to left by 1
0000290C  0281 0000000E           2564              ANDI.L  #$E,D1  * mask the first 4 bits 
00002912  0C01 0000               2565              CMPI.B  #0, D1  * if it's 0000, absolute word address
00002916  6700 003E               2566              BEQ     WORDMODE
0000291A  0C01 0002               2567              CMPI.B  #2, D1  * if it's 0010, absolute long address
0000291E  6700 0062               2568              BEQ     LONGMODE
00002922  0C01 0008               2569              CMPI.B  #8, D1  * if it's 1000, immediate data
00002926  6700 0086               2570              BEQ     IMMEDIATE
0000292A                          2571       
0000292A                          2572  *---------------------------------------------------------------------------*
0000292A                          2573  * D_MODE111: decode and display dest mode absolute/immediate
0000292A                          2574  *---------------------------------------------------------------------------*           
0000292A                          2575  D_MODE111   * abs
0000292A                          2576              * clear registers to store temp data
0000292A  4280                    2577              CLR.L   D0                      
0000292C  4281                    2578              CLR.L   D1                      
0000292E  207C 00000000           2579              MOVEA.L #0, A0                  
00002934  227C 00000000           2580              MOVEA.L #0, A1                  
0000293A  2205                    2581              MOVE.L  D5,D1
0000293C                          2582              
0000293C                          2583              * retrieve dest register for MODE 111
0000293C  EC89                    2584              LSR.L   #6,D1   * shift the bits to right by 6
0000293E  E689                    2585              LSR.L   #3,D1   * shift the bits to right by extra 3
00002940  0201 0001               2586              ANDI.B  #1,D1   * mask the first 2 bits 
00002944  0C01 0000               2587              CMPI.B  #0, D1  * if it's 000, absolute word address
00002948  6700 000C               2588              BEQ     WORDMODE
0000294C  0C01 0001               2589              CMPI.B  #1, D1  * if it's 001, absolute long address
00002950  6700 0030               2590              BEQ     LONGMODE
00002954                          2591              *JSR     OP_DATA *not sure..
00002954  4E75                    2592              RTS
00002956                          2593  
00002956                          2594  
00002956                          2595  *---------------------------------------------------------------------------*
00002956                          2596  * WORDMODE: absolute word address
00002956                          2597  *---------------------------------------------------------------------------*
00002956  43F9 00003D29           2598  WORDMODE    LEA     DISP_HEX,A1
0000295C  103C 000E               2599              MOVE.B  #14,D0
00002960  4E4F                    2600              TRAP    #15
00002962                          2601              
00002962  4285                    2602              CLR.L   D5
00002964  3A1D                    2603              MOVE.W  (A5)+,D5
00002966                          2604              
00002966  43F9 00003A07           2605              LEA     TMPOUTPUT,A1
0000296C  2205                    2606              MOVE.L  D5,D1
0000296E  7404                    2607              MOVE.L  #4,D2       *move word size 4
00002970  4EB8 11CA               2608              JSR     HEX2ASCII
00002974  43F9 00003A07           2609              LEA     TMPOUTPUT,A1
0000297A  103C 000E               2610              MOVE.B  #14,D0
0000297E  4E4F                    2611              TRAP    #15
00002980                          2612              
00002980  4E75                    2613              RTS
00002982                          2614  
00002982                          2615  *---------------------------------------------------------------------------*
00002982                          2616  * LONGMODE: absolute long address
00002982                          2617  *---------------------------------------------------------------------------*
00002982  43F9 00003D29           2618  LONGMODE    LEA     DISP_HEX,A1
00002988  103C 000E               2619              MOVE.B  #14,D0
0000298C  4E4F                    2620              TRAP    #15
0000298E                          2621              
0000298E  4285                    2622              CLR.L   D5
00002990  2A1D                    2623              MOVE.L  (A5)+,D5
00002992                          2624              
00002992  43F9 00003A07           2625              LEA     TMPOUTPUT,A1
00002998  2205                    2626              MOVE.L  D5,D1
0000299A  7408                    2627              MOVE.L  #8,D2           *move longword size 8
0000299C  4EB8 11CA               2628              JSR     HEX2ASCII
000029A0  43F9 00003A07           2629              LEA     TMPOUTPUT,A1
000029A6  103C 000E               2630              MOVE.B  #14,D0
000029AA  4E4F                    2631              TRAP    #15
000029AC                          2632              
000029AC  4E75                    2633              RTS
000029AE                          2634  
000029AE                          2635  
000029AE                          2636  *---------------------------------------------------------------------------*
000029AE                          2637  * IMMEDIATE: immediate address
000029AE                          2638  *---------------------------------------------------------------------------*
000029AE  43F9 00003D4F           2639  IMMEDIATE   LEA     DISP_LB,A1
000029B4  103C 000E               2640              MOVE.B  #14,D0
000029B8  4E4F                    2641              TRAP    #15
000029BA  43F9 00003D29           2642              LEA     DISP_HEX,A1
000029C0  103C 000E               2643              MOVE.B  #14,D0
000029C4  4E4F                    2644              TRAP    #15
000029C6                          2645              
000029C6                          2646              * check for size
000029C6  0C04 0000               2647              CMPI.B  #0,D4
000029CA  6700 0012               2648              BEQ     IMMD_B
000029CE  0C04 0001               2649              CMPI.B  #1,D4
000029D2  6700 002A               2650              BEQ     IMMD_W
000029D6  0C04 0002               2651              CMPI.B  #2,D4
000029DA  6700 0042               2652              BEQ     IMMD_L
000029DE                          2653  
000029DE                          2654  IMMD_B
000029DE  4285                    2655              CLR.L   D5
000029E0  3A1D                    2656              MOVE.W  (A5)+,D5
000029E2                          2657              
000029E2  43F9 00003A07           2658              LEA     TMPOUTPUT,A1
000029E8  2205                    2659              MOVE.L  D5,D1
000029EA  7402                    2660              MOVE.L  #2,D2
000029EC  4EB8 11CA               2661              JSR     HEX2ASCII
000029F0  43F9 00003A07           2662              LEA     TMPOUTPUT,A1
000029F6  103C 000E               2663              MOVE.B  #14,D0
000029FA  4E4F                    2664              TRAP    #15
000029FC  4E75                    2665              RTS
000029FE                          2666              
000029FE                          2667  IMMD_W
000029FE  4285                    2668              CLR.L   D5
00002A00  3A1D                    2669              MOVE.W  (A5)+,D5
00002A02                          2670              
00002A02  43F9 00003A07           2671              LEA     TMPOUTPUT,A1
00002A08  2205                    2672              MOVE.L  D5,D1
00002A0A  7404                    2673              MOVE.L  #4,D2
00002A0C  4EB8 11CA               2674              JSR     HEX2ASCII
00002A10  43F9 00003A07           2675              LEA     TMPOUTPUT,A1
00002A16  103C 000E               2676              MOVE.B  #14,D0
00002A1A  4E4F                    2677              TRAP    #15
00002A1C  4E75                    2678              RTS
00002A1E                          2679              
00002A1E                          2680  
00002A1E                          2681  IMMD_L
00002A1E  4285                    2682              CLR.L   D5
00002A20  3A1D                    2683              MOVE.W  (A5)+,D5
00002A22                          2684              
00002A22  43F9 00003A07           2685              LEA     TMPOUTPUT,A1
00002A28  2205                    2686              MOVE.L  D5,D1
00002A2A  7408                    2687              MOVE.L  #8,D2
00002A2C  4EB8 11CA               2688              JSR     HEX2ASCII
00002A30  43F9 00003A07           2689              LEA     TMPOUTPUT,A1
00002A36  103C 000E               2690              MOVE.B  #14,D0
00002A3A  4E4F                    2691              TRAP    #15
00002A3C  4E75                    2692              RTS
00002A3E                          2693  
00002A3E                          2694  
00002A3E                          2695  *---------------------------------------------------------------------------*
00002A3E                          2696  * DEST_REGISTER: decode and display destination register (bit 11 - 9)
00002A3E                          2697  *---------------------------------------------------------------------------*
00002A3E                          2698  DEST_REGISTER
00002A3E                          2699              * clear registers to store temp data
00002A3E  4280                    2700              CLR.L   D0                      
00002A40  4281                    2701              CLR.L   D1                      
00002A42  207C 00000000           2702              MOVEA.L #0, A0                  
00002A48  227C 00000000           2703              MOVEA.L #0, A1 
00002A4E                          2704              
00002A4E  2205                    2705              MOVE.L  D5,D1
00002A50  EC89                    2706              LSR.L   #6,D1
00002A52  E689                    2707              LSR.L   #3,D1
00002A54  0281 00000007           2708              ANDI.L  #7,D1
00002A5A                          2709              
00002A5A  0C01 0000               2710              CMPI.B  #0,D1
00002A5E  6700 0092               2711              BEQ     REG_0
00002A62  0C01 0001               2712              CMPI.B  #1,D1
00002A66  6700 0098               2713              BEQ     REG_1
00002A6A  0C01 0002               2714              CMPI.B  #2,D1
00002A6E  6700 009E               2715              BEQ     REG_2
00002A72  0C01 0003               2716              CMPI.B  #3,D1
00002A76  6700 00A4               2717              BEQ     REG_3
00002A7A  0C01 0004               2718              CMPI.B  #4,D1
00002A7E  6700 00AA               2719              BEQ     REG_4
00002A82  0C01 0005               2720              CMPI.B  #5,D1
00002A86  6700 00B0               2721              BEQ     REG_5
00002A8A  0C01 0006               2722              CMPI.B  #6,D1
00002A8E  6700 00B6               2723              BEQ     REG_6
00002A92  0C01 0007               2724              CMPI.B  #7,D1
00002A96  6700 00BC               2725              BEQ     REG_7
00002A9A                          2726  
00002A9A                          2727  *---------------------------------------------------------------------------*
00002A9A                          2728  * SRC_REGISTER: decode and display source register (bit 2 - 0)
00002A9A                          2729  *---------------------------------------------------------------------------*           
00002A9A                          2730  SRC_REGISTER 
00002A9A                          2731              * clear registers to store temp data
00002A9A  4280                    2732              CLR.L   D0                      
00002A9C  4281                    2733              CLR.L   D1                      
00002A9E  207C 00000000           2734              MOVEA.L #0, A0                  
00002AA4  227C 00000000           2735              MOVEA.L #0, A1                  
00002AAA                          2736              
00002AAA  2205                    2737              MOVE.L  D5,D1   * temp store the processing data
00002AAC  0281 00000007           2738              ANDI.L  #7,D1   * mask the first 4 bits with 0111
00002AB2                          2739              
00002AB2  0C01 0000               2740              CMPI.B  #0,D1
00002AB6  6700 003A               2741              BEQ     REG_0
00002ABA  0C01 0001               2742              CMPI.B  #1,D1
00002ABE  6700 0040               2743              BEQ     REG_1
00002AC2  0C01 0002               2744              CMPI.B  #2,D1
00002AC6  6700 0046               2745              BEQ     REG_2
00002ACA  0C01 0003               2746              CMPI.B  #3,D1
00002ACE  6700 004C               2747              BEQ     REG_3
00002AD2  0C01 0004               2748              CMPI.B  #4,D1
00002AD6  6700 0052               2749              BEQ     REG_4
00002ADA  0C01 0005               2750              CMPI.B  #5,D1
00002ADE  6700 0058               2751              BEQ     REG_5
00002AE2  0C01 0006               2752              CMPI.B  #6,D1
00002AE6  6700 005E               2753              BEQ     REG_6
00002AEA  0C01 0007               2754              CMPI.B  #7,D1
00002AEE  6700 0064               2755              BEQ     REG_7
00002AF2                          2756  
00002AF2                          2757  *---------------------------------------------------------------------------*
00002AF2                          2758  * REG_0 ~ REG_7: display register 0 to 7
00002AF2                          2759  *---------------------------------------------------------------------------*
00002AF2  43F9 00003D54           2760  REG_0       LEA     DISP_0,A1
00002AF8  103C 000E               2761              MOVE.B  #14,D0
00002AFC  4E4F                    2762              TRAP    #15
00002AFE  4E75                    2763              RTS
00002B00                          2764              
00002B00  43F9 00003D56           2765  REG_1       LEA     DISP_1,A1
00002B06  103C 000E               2766              MOVE.B  #14,D0
00002B0A  4E4F                    2767              TRAP    #15
00002B0C  4E75                    2768              RTS
00002B0E                          2769              
00002B0E                          2770  
00002B0E  43F9 00003D58           2771  REG_2       LEA     DISP_2,A1
00002B14  103C 000E               2772              MOVE.B  #14,D0
00002B18  4E4F                    2773              TRAP    #15
00002B1A  4E75                    2774              RTS
00002B1C                          2775            
00002B1C  43F9 00003D5A           2776  REG_3       LEA     DISP_3,A1
00002B22  103C 000E               2777              MOVE.B  #14,D0
00002B26  4E4F                    2778              TRAP    #15
00002B28  4E75                    2779              RTS
00002B2A                          2780              
00002B2A  43F9 00003D5C           2781  REG_4       LEA     DISP_4,A1
00002B30  103C 000E               2782              MOVE.B  #14,D0
00002B34  4E4F                    2783              TRAP    #15
00002B36  4E75                    2784              RTS
00002B38                          2785              
00002B38  43F9 00003D5E           2786  REG_5       LEA     DISP_5,A1
00002B3E  103C 000E               2787              MOVE.B  #14,D0
00002B42  4E4F                    2788              TRAP    #15
00002B44  4E75                    2789              RTS
00002B46                          2790              
00002B46  43F9 00003D60           2791  REG_6       LEA     DISP_6,A1
00002B4C  103C 000E               2792              MOVE.B  #14,D0
00002B50  4E4F                    2793              TRAP    #15
00002B52  4E75                    2794              RTS
00002B54                          2795              
00002B54  43F9 00003D62           2796  REG_7       LEA     DISP_7,A1
00002B5A  103C 000E               2797              MOVE.B  #14,D0
00002B5E  4E4F                    2798              TRAP    #15
00002B60  4E75                    2799              RTS
00002B62                          2800              
00002B62                          2801  *---------------------------------------------------------------------------*
00002B62                          2802  * REPEAT : Ask user whether they wish to run the program again
00002B62                          2803  *---------------------------------------------------------------------------*           
00002B62  4246                    2804  REPEAT      CLR.W   D6                      * Reset D6 (Loop Count)
00002B64  43F9 0000382D           2805              LEA     REPEATMSG,A1
00002B6A  103C 000E               2806              MOVE.B  #14,D0
00002B6E  4E4F                    2807              TRAP    #15
00002B70                          2808              
00002B70  43F9 000039B7           2809              LEA     TMPINPUT,A1             * allocate space to temp store user input
00002B76  103C 0002               2810              MOVE.B  #2,D0
00002B7A  4E4F                    2811              TRAP    #15
00002B7C                          2812  
00002B7C  0C01 0001               2813              CMPI.B  #1,D1                   * check for length of user input
00002B80  66E0                    2814              BNE     REPEAT                  * return to the beginning of the function if unequal
00002B82                          2815              
00002B82  0C11 0059               2816              CMPI.B  #$59,(A1)               * compare the input with Y    
00002B86  6700 E482               2817              BEQ     PROGLP                  * repeat the program
00002B8A                          2818              
00002B8A  0C11 0079               2819              CMPI.B  #$79,(A1)               * compare the input with y    
00002B8E  6700 E47A               2820              BEQ     PROGLP                  * repeat the program
00002B92                          2821              
00002B92  0C11 004E               2822              CMPI.B  #$4E,(A1)               * compare the input with N    
00002B96  6700 0928               2823              BEQ     TERMINATE               * finish program
00002B9A                          2824              
00002B9A  0C11 006E               2825              CMPI.B  #$6E,(A1)               * compare the input with n    
00002B9E  6700 0920               2826              BEQ     TERMINATE               * finish program
00002BA2                          2827              
00002BA2  60BE                    2828              BRA     REPEAT                  * invalid input/repeat the function
00002BA4                          2829  
00002BA4                          2830  *---------------------------------------------------------------------------*
00002BA4                          2831  * EA DECODING INTERFACE
00002BA4                          2832  * [A0] - RESERVED FOR USE
00002BA4                          2833  * [D2] - RESERVED FOR USE
00002BA4                          2834  * RETURNS - ERROR FLAG IF FAILED TO PUSH SRC EA INTO STACK
00002BA4                          2835  *---------------------------------------------------------------------------*
00002BA4                          2836  GET_EA_EA_SRC
00002BA4                          2837      *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
00002BA4                          2838      
00002BA4                          2839      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
00002BA4  2405                    2840      MOVE.L  D5,D2                           * CLEAN COPY TO D2
00002BA6  E68A                    2841      LSR.L   #3,D2                           * [D2] Temporarily used D2 for shifting bits            *TODO: DYNAMIC FOR ANY LOCATION OF SOURCE
00002BA8  23C2 00003D7A           2842      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
00002BAE  7407                    2843      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
00002BB0  C5B9 00003D7A           2844      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
00002BB6                          2845                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
00002BB6                          2846      
00002BB6                          2847      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
00002BB6                          2848      *DESTINATION REGISTER FORMAT STANDARD         *
00002BB6                          2849      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
00002BB6                          2850      *WHEN BIT = 0(VALID ADDRESS MODE)             *
00002BB6                          2851      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
00002BB6                          2852      *0 - Dn                                       *
00002BB6                          2853      *1 - An                                       *
00002BB6                          2854      *2 - (An)                                     *
00002BB6                          2855      *3 - (An)+                                    *
00002BB6                          2856      *4 - -(An)                                    *
00002BB6                          2857      *5 - (XXX).W                                  *
00002BB6                          2858      *6 - (XXX).L                                  *
00002BB6                          2859      *7 - #<data>                                  *
00002BB6                          2860      ***********************************************
00002BB6                          2861      
00002BB6                          2862      *** Check if source ...  <ea> = Dn
00002BB6                          2863  CHECK0    
00002BB6  41F9 00003D6A           2864            LEA     TEMP_REGISTER_FORMAT,A0
00002BBC  1439 00003D69           2865            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002BC2  1082                    2866            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002BC4  0239 0001 00003D6A      2867            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
00002BCC  0C39 0001 00003D6A      2868            CMPI.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
00002BD4  6700 006A               2869            BEQ     CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00002BD8  0CB9 00000000 00003D7A  2870            CMPI.L     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn) - COMPARE MODES TO SEE IF IT IS THIS MODE
00002BE2  6600 005C               2871            BNE     CHECK1
00002BE6                          2872            
00002BE6                          2873            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002BE6  163C 0020               2874            MOVE.B    #' ',D3
00002BEA  6100 0856               2875            BSR       PUSH_STACK
00002BEE  163C 0044               2876            MOVE.B    #'D',D3
00002BF2  6100 084E               2877            BSR       PUSH_STACK
00002BF6                          2878  
00002BF6                          2879            *FIND REGISTER NUMBER END LOCATION*  
00002BF6  13F9 00003D6C 00003D72  2880            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002C00  0239 000F 00003D72      2881            AND.B   #$0F,VAR_BYTE_END
00002C08                          2882            
00002C08                          2883            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002C08  23C5 00003D76           2884            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002C0E  1439 00003D72           2885            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002C14                          2886            
00002C14                          2887            *INTITIALIZE FOR BIT SHIFTING
00002C14  41F9 00003D76           2888            LEA     VAR_TEMP_CLEANCOPY,A0
00002C1A  2639 00003D76           2889            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002C20                          2890  LOOP_SHIFTING
00002C20  0C02 0000               2891            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002C24  6700 0008               2892            BEQ     MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00002C28  E24B                    2893            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002C2A  5302                    2894            SUB.B   #1,D2                     *DECREMENT COUNTER
00002C2C  60F2                    2895            BRA     LOOP_SHIFTING             *CONTINUE SHIFTING
00002C2E                          2896  MASKING_NEXT
00002C2E  C6BC 00000007           2897            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002C34  0603 0030               2898            ADD.B   #$30,D3                   *CONVERT TO CHAR
00002C38  6100 0808               2899            BSR     PUSH_STACK                *PUSH TO STACK
00002C3C                          2900            
00002C3C  6000 0394               2901            BRA     GET_SRC_SUCCESS           *RETURN          
00002C40                          2902            
00002C40                          2903            
00002C40                          2904            *** Check if source ...  <ea> = An
00002C40  41F9 00003D6A           2905  CHECK1    LEA     TEMP_REGISTER_FORMAT,A0
00002C46  1439 00003D69           2906            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002C4C  1082                    2907            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002C4E  0239 0002 00003D6A      2908            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
00002C56  0C39 0002 00003D6A      2909            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
00002C5E  6700 006A               2910            BEQ     CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00002C62  0CB9 00000001 00003D7A  2911            CMPI.L  #1,VAR_LONG_ADDRESS_MODE_CHECK                      * An - COMPARE MODES TO SEE IF IT IS THIS MODE
00002C6C  6600 005C               2912            BNE     CHECK2
00002C70                          2913            
00002C70                          2914            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002C70  163C 0020               2915            MOVE.B    #' ',D3
00002C74  6100 07CC               2916            BSR       PUSH_STACK
00002C78  163C 0041               2917            MOVE.B    #'A',D3
00002C7C  6100 07C4               2918            BSR       PUSH_STACK
00002C80                          2919  
00002C80                          2920            
00002C80                          2921            *FIND REGISTER NUMBER END LOCATION*  
00002C80  13F9 00003D6C 00003D72  2922            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002C8A  0239 000F 00003D72      2923            AND.B   #$0F,VAR_BYTE_END
00002C92                          2924            
00002C92                          2925            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002C92  23C5 00003D76           2926            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002C98  1439 00003D72           2927            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
00002C9E                          2928            
00002C9E                          2929            *INTITIALIZE FOR BIT SHIFTING
00002C9E  41F9 00003D76           2930            LEA     VAR_TEMP_CLEANCOPY,A0
00002CA4  2639 00003D76           2931            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002CAA                          2932  LOOP_SHIFTING1
00002CAA  0C02 0000               2933            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002CAE  6700 0008               2934            BEQ     MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00002CB2  E24B                    2935            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002CB4  5302                    2936            SUB.B   #1,D2                     *DECREMENT COUNTER
00002CB6  60F2                    2937            BRA     LOOP_SHIFTING1             *CONTINUE SHIFTING
00002CB8                          2938  MASKING_NEXT1
00002CB8  C6BC 00000007           2939            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002CBE  0603 0030               2940            ADD.B   #$30,D3                   *CONVERT TO CHAR
00002CC2  6100 077E               2941            BSR     PUSH_STACK                *PUSH TO STACK
00002CC6                          2942            
00002CC6  6000 030A               2943            BRA     GET_SRC_SUCCESS                   *RETURN 
00002CCA                          2944            
00002CCA                          2945            
00002CCA                          2946            
00002CCA                          2947            
00002CCA                          2948            *** Check if source ...  <ea> = (An)       
00002CCA  41F9 00003D6A           2949  CHECK2    LEA     TEMP_REGISTER_FORMAT,A0
00002CD0  1439 00003D69           2950            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002CD6  1082                    2951            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002CD8  0239 0004 00003D6A      2952            ANDI.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
00002CE0  0C39 0004 00003D6A      2953            CMPI.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
00002CE8  6700 007A               2954            BEQ     CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002CEC  0CB9 00000002 00003D7A  2955            CMPI.L   #2,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)  COMPARE MODES TO SEE IF IT IS THIS MODE                                                                *change: checkx++*
00002CF6  6600 006C               2956            BNE     CHECK3
00002CFA                          2957            
00002CFA                          2958            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002CFA  163C 0020               2959            MOVE.B    #' ',D3
00002CFE  6100 0742               2960            BSR       PUSH_STACK
00002D02  163C 0028               2961            MOVE.B    #'(',D3
00002D06  6100 073A               2962            BSR       PUSH_STACK
00002D0A  163C 0041               2963            MOVE.B    #'A',D3
00002D0E  6100 0732               2964            BSR       PUSH_STACK
00002D12                          2965  
00002D12                          2966            
00002D12                          2967            *FIND REGISTER NUMBER END LOCATION*  
00002D12  13F9 00003D6C 00003D72  2968            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002D1C  0239 000F 00003D72      2969            AND.B   #$0F,VAR_BYTE_END
00002D24                          2970            
00002D24                          2971            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002D24  23C5 00003D76           2972            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002D2A  1439 00003D72           2973            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002D30                          2974            
00002D30                          2975            *INTITIALIZE FOR BIT SHIFTING
00002D30  41F9 00003D76           2976            LEA     VAR_TEMP_CLEANCOPY,A0
00002D36  2639 00003D76           2977            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002D3C                          2978  LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
00002D3C  0C02 0000               2979            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002D40  6700 0008               2980            BEQ     MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002D44  E24B                    2981            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002D46  5302                    2982            SUB.B   #1,D2                     *DECREMENT COUNTER
00002D48  60F2                    2983            BRA     LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
00002D4A                          2984  MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
00002D4A  0283 00000007           2985            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002D50  0603 0030               2986            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002D54  6100 06EC               2987            BSR     PUSH_STACK                *PUSH TO STACK
00002D58                          2988            
00002D58  163C 0029               2989            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002D5C  6100 06E4               2990            BSR       PUSH_STACK
00002D60                          2991            
00002D60  6000 0270               2992            BRA     GET_SRC_SUCCESS                   *RETURN 
00002D64                          2993  
00002D64                          2994            
00002D64                          2995            
00002D64                          2996                      
00002D64                          2997  *** Check if source ...  <ea> = (An)+       
00002D64  41F9 00003D6A           2998  CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
00002D6A  1439 00003D69           2999            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002D70  1082                    3000            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002D72  0239 0008 00003D6A      3001            ANDI.B  #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
00002D7A  0C39 0008 00003D6A      3002            CMPI.B  #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
00002D82  6700 0082               3003            BEQ     CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002D86  0CB9 00000003 00003D7A  3004            CMPI.L  #3,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)+ - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00002D90  6600 0074               3005            BNE     CHECK4
00002D94                          3006            
00002D94                          3007            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002D94  163C 0020               3008            MOVE.B    #' ',D3
00002D98  6100 06A8               3009            BSR       PUSH_STACK
00002D9C  163C 0028               3010            MOVE.B    #'(',D3
00002DA0  6100 06A0               3011            BSR       PUSH_STACK
00002DA4  163C 0041               3012            MOVE.B    #'A',D3
00002DA8  6100 0698               3013            BSR       PUSH_STACK
00002DAC                          3014  
00002DAC                          3015            
00002DAC                          3016            *FIND REGISTER NUMBER END LOCATION*  
00002DAC  13F9 00003D6C 00003D72  3017            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002DB6  0239 000F 00003D72      3018            ANDI.B   #$0F,VAR_BYTE_END
00002DBE                          3019            
00002DBE                          3020            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002DBE  23C5 00003D76           3021            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002DC4  1439 00003D72           3022            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002DCA                          3023            
00002DCA                          3024            *INTITIALIZE FOR BIT SHIFTING
00002DCA  41F9 00003D76           3025            LEA     VAR_TEMP_CLEANCOPY,A0
00002DD0  2639 00003D76           3026            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002DD6                          3027            
00002DD6                          3028  LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
00002DD6  0C02 0000               3029            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002DDA  6700 0008               3030            BEQ     MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002DDE  E24B                    3031            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002DE0  5302                    3032            SUBI.B   #1,D2                     *DECREMENT COUNTER
00002DE2  60F2                    3033            BRA     LOOP_SHIFTING3            *CONTINUE SHIFTING 
00002DE4                          3034                                               *change: NAME OF LABEL*
00002DE4                          3035  MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
00002DE4  0283 00000007           3036            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002DEA  0603 0030               3037            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002DEE  6100 0652               3038            BSR     PUSH_STACK                *PUSH TO STACK
00002DF2                          3039            
00002DF2  163C 0029               3040            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002DF6  6100 064A               3041            BSR       PUSH_STACK
00002DFA  163C 002B               3042            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002DFE  6100 0642               3043            BSR       PUSH_STACK
00002E02                          3044            
00002E02  6000 01CE               3045            BRA       GET_SRC_SUCCESS                   *RETURN 
00002E06                          3046  
00002E06                          3047            
00002E06                          3048            
00002E06                          3049                      
00002E06                          3050            *** Check if source ...  <ea> = -(An)       
00002E06  41F9 00003D6A           3051  CHECK4    LEA     TEMP_REGISTER_FORMAT,A0
00002E0C  1439 00003D69           3052            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002E12  1082                    3053            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002E14  0239 0010 00003D6A      3054            ANDI.B  #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
00002E1C  0C39 0010 00003D6A      3055            CMPI.B  #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002E24  6700 0082               3056            BEQ     CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002E28  0CB9 00000004 00003D7A  3057            CMPI.L  #4,VAR_LONG_ADDRESS_MODE_CHECK                      * -(An) - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00002E32  6600 0074               3058            BNE     CHECK7
00002E36                          3059            
00002E36                          3060            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002E36  163C 0020               3061            MOVE.B    #' ',D3
00002E3A  6100 0606               3062            BSR       PUSH_STACK
00002E3E  163C 002D               3063            MOVE.B    #'-',D3
00002E42  6100 05FE               3064            BSR       PUSH_STACK
00002E46  163C 0028               3065            MOVE.B    #'(',D3
00002E4A  6100 05F6               3066            BSR       PUSH_STACK
00002E4E  163C 0041               3067            MOVE.B    #'A',D3
00002E52  6100 05EE               3068            BSR       PUSH_STACK
00002E56                          3069  
00002E56                          3070            
00002E56                          3071            *FIND REGISTER NUMBER END LOCATION*  
00002E56  13F9 00003D6C 00003D72  3072            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002E60  0239 000F 00003D72      3073            AND.B   #$0F,VAR_BYTE_END
00002E68                          3074            
00002E68                          3075            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002E68  23C5 00003D76           3076            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002E6E  1439 00003D72           3077            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002E74                          3078            
00002E74                          3079            *INTITIALIZE FOR BIT SHIFTING
00002E74  41F9 00003D76           3080            LEA     VAR_TEMP_CLEANCOPY,A0
00002E7A  2639 00003D76           3081            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002E80                          3082            
00002E80                          3083  LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
00002E80  0C02 0000               3084            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002E84  6700 0008               3085            BEQ     MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002E88  E24B                    3086            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002E8A  5302                    3087            SUBI.B   #1,D2                     *DECREMENT COUNTER
00002E8C  60F2                    3088            BRA     LOOP_SHIFTING4            *CONTINUE SHIFTING 
00002E8E                          3089                                               *change: NAME OF LABEL*
00002E8E                          3090  MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
00002E8E  0283 00000007           3091            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002E94  0603 0030               3092            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002E98  6100 05A8               3093            BSR     PUSH_STACK                *PUSH TO STACK
00002E9C                          3094            
00002E9C  163C 0029               3095            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002EA0  6100 05A0               3096            BSR       PUSH_STACK
00002EA4                          3097            
00002EA4  6000 012C               3098            BRA     GET_SRC_SUCCESS                   *RETURN
00002EA8                          3099            
00002EA8                          3100                      
00002EA8                          3101            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
00002EA8  0CB9 00000007 00003D7A  3102  CHECK7    CMPI.L  #7,VAR_LONG_ADDRESS_MODE_CHECK                      *IF (MODE != 111)
00002EB2  6600 011A               3103            BNE     GET_SRC_FAILED                                      *THAN BRANCH TO UNCESSFULL SRC MODE READ
00002EB6                          3104                   
00002EB6                          3105            *NEXT: (MODE == 111) 
00002EB6                          3106            *NOW: CHECK FOR SRC REGISTER 
00002EB6                          3107                  *(000 = (xxx).W)
00002EB6                          3108                  *(001 = (xxx).L)
00002EB6                          3109                  *(010 = #<data>)
00002EB6                          3110                  
00002EB6                          3111            *FIND REGISTER NUMBER END LOCATION*  
00002EB6  13F9 00003D6C 00003D72  3112            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002EC0  0239 000F 00003D72      3113            AND.B   #$0F,VAR_BYTE_END
00002EC8                          3114            
00002EC8                          3115            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002EC8  23C5 00003D76           3116            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002ECE  1439 00003D72           3117            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002ED4                          3118            
00002ED4                          3119            *INTITIALIZE FOR BIT SHIFTING
00002ED4  41F9 00003D76           3120            LEA     VAR_TEMP_CLEANCOPY,A0
00002EDA  2C39 00003D76           3121            MOVE.L  VAR_TEMP_CLEANCOPY,D6
00002EE0                          3122  SRC_LOOP_SHIFTING
00002EE0  0C02 0000               3123            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002EE4  6700 0008               3124            BEQ     SRC_MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00002EE8  E24E                    3125            LSR     #1,D6                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002EEA  5302                    3126            SUB.B   #1,D2                     *DECREMENT COUNTER
00002EEC  60F2                    3127            BRA     SRC_LOOP_SHIFTING             *CONTINUE SHIFTING
00002EEE                          3128  SRC_MASKING_NEXT
00002EEE  CCBC 00000007           3129            AND.L   #7,D6                     *MASK, ONLY NEED 0-2 BIT INDEXES 
00002EF4                          3130           *D3 - REGISTER NUMBER NEEDED TO CHECK WHICH W/L/#<DATA>*
00002EF4                          3131           
00002EF4                          3132  CHECK_WORD  
00002EF4  41F9 00003D6A           3133            LEA     TEMP_REGISTER_FORMAT,A0
00002EFA  1439 00003D69           3134            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002F00  1082                    3135            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002F02  0239 0020 00003D6A      3136            ANDI.B  #$20,TEMP_REGISTER_FORMAT                           * MASKS 0010 0000                                                     *change <SRC>*
00002F0A  0C39 0020 00003D6A      3137            CMPI.B  #$20,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0010 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002F12  6700 0026               3138            BEQ     CHECK_LONG                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00002F16  0C06 0000               3139            CMPI.B  #0,D6                          
00002F1A  6600 001E               3140            BNE     CHECK_LONG 
00002F1E                          3141            
00002F1E                          3142            *IT IS A WORD AT THIS POINT*
00002F1E                          3143            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002F1E  163C 0020               3144            MOVE.B    #' ',D3
00002F22  6100 051E               3145            BSR       PUSH_STACK
00002F26  163C 0024               3146            MOVE.B    #'$',D3
00002F2A  6100 0516               3147            BSR       PUSH_STACK
00002F2E  321D                    3148            MOVE.W    (A5)+,D1
00002F30  7404                    3149            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00002F32  6100 E2D8               3150            BSR       HEX2ASCII2STACK
00002F36  6000 009A               3151            BRA     GET_SRC_SUCCESS
00002F3A                          3152  
00002F3A                          3153  CHECK_LONG
00002F3A  41F9 00003D6A           3154            LEA     TEMP_REGISTER_FORMAT,A0
00002F40  1439 00003D69           3155            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002F46  1082                    3156            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002F48  0239 0040 00003D6A      3157            ANDI.B  #$40,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00002F50  0C39 0040 00003D6A      3158            CMPI.B  #$40,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002F58  6700 002E               3159            BEQ     CHECK_IMMEDIATE                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00002F5C  0C06 0001               3160            CMPI.B  #1,D6                          
00002F60  6600 0026               3161            BNE     CHECK_IMMEDIATE  
00002F64                          3162  
00002F64                          3163            *IT IS A WORD AT THIS POINT*
00002F64                          3164            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002F64  163C 0020               3165            MOVE.B    #' ',D3
00002F68  6100 04D8               3166            BSR       PUSH_STACK
00002F6C  163C 0024               3167            MOVE.B    #'$',D3
00002F70  6100 04D0               3168            BSR       PUSH_STACK
00002F74  321D                    3169            MOVE.W    (A5)+,D1
00002F76  7404                    3170            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00002F78  6100 E292               3171            BSR       HEX2ASCII2STACK
00002F7C  321D                    3172            MOVE.W    (A5)+,D1
00002F7E  7404                    3173            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00002F80  6100 E28A               3174            BSR       HEX2ASCII2STACK
00002F84  6000 004C               3175            BRA     GET_SRC_SUCCESS
00002F88                          3176            
00002F88                          3177  CHECK_IMMEDIATE
00002F88  41F9 00003D6A           3178            LEA     TEMP_REGISTER_FORMAT,A0
00002F8E  1439 00003D69           3179            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002F94  1082                    3180            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002F96  0239 0080 00003D6A      3181            ANDI.B  #$80,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00002F9E  0C39 0080 00003D6A      3182            CMPI.B  #$80,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002FA6  6700 0026               3183            BEQ     GET_SRC_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00002FAA  0C06 0004               3184            CMPI.B  #4,D6                          
00002FAE  6600 001E               3185            BNE     GET_SRC_FAILED 
00002FB2                          3186  
00002FB2                          3187            *IT IS A WORD AT THIS POINT*
00002FB2                          3188            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002FB2  163C 0020               3189            MOVE.B    #' ',D3
00002FB6  6100 048A               3190            BSR       PUSH_STACK
00002FBA  163C 0023               3191            MOVE.B    #'#',D3
00002FBE  6100 0482               3192            BSR       PUSH_STACK
00002FC2  321D                    3193            MOVE.W    (A5)+,D1
00002FC4  7404                    3194            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00002FC6  6100 E244               3195            BSR       HEX2ASCII2STACK
00002FCA  6000 0006               3196            BRA     GET_SRC_SUCCESS
00002FCE                          3197            
00002FCE                          3198  GET_SRC_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
00002FCE  7801                    3199            MOVE.L #1,D4
00002FD0  4E75                    3200            RTS
00002FD2                          3201  GET_SRC_SUCCESS 
00002FD2  4E75                    3202            RTS
00002FD4                          3203                                 
00002FD4                          3204      
00002FD4                          3205  
00002FD4                          3206  
00002FD4                          3207  
00002FD4                          3208  
00002FD4                          3209  
00002FD4                          3210  
00002FD4                          3211  GET_EA_EA_DEST
00002FD4                          3212  *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
00002FD4                          3213      
00002FD4                          3214      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
00002FD4  2405                    3215      MOVE.L  D5,D2                           * CLEAN COPY TO D2
00002FD6  EC8A                    3216      LSR.L   #6,D2                           * [D2] Temporarily used D2 for shifting bits                *TODO: DYNAMIC MODE LOCATION
00002FD8  23C2 00003D7A           3217      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
00002FDE  7407                    3218      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
00002FE0  C5B9 00003D7A           3219      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
00002FE6                          3220                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
00002FE6                          3221      
00002FE6                          3222      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
00002FE6                          3223      *DESTINATION REGISTER FORMAT STANDARD         *
00002FE6                          3224      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
00002FE6                          3225      *WHEN BIT = 0(VALID ADDRESS MODE)             *
00002FE6                          3226      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
00002FE6                          3227      *0 - Dn                                       *
00002FE6                          3228      *1 - An                                       *
00002FE6                          3229      *2 - (An)                                     *
00002FE6                          3230      *3 - (An)+                                    *
00002FE6                          3231      *4 - -(An)                                    *
00002FE6                          3232      *5 - (XXX).W                                  *
00002FE6                          3233      *6 - (XXX).L                                  *
00002FE6                          3234      *7 - #<data>                                  *
00002FE6                          3235      ***********************************************
00002FE6                          3236      
00002FE6                          3237      *** Check if source ...  <ea> = Dn
00002FE6                          3238  DEST_CHECK0    
00002FE6  41F9 00003D6A           3239            LEA     TEMP_REGISTER_FORMAT,A0
00002FEC  1439 00003D68           3240            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002FF2  1082                    3241            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002FF4  0239 0001 00003D6A      3242            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
00002FFC  0C39 0001 00003D6A      3243            CMPI.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
00003004  6700 006A               3244            BEQ     DEST_CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00003008  0CB9 00000000 00003D7A  3245            CMPI.L     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn) - COMPARE MODES TO SEE IF IT IS THIS MODE
00003012  6600 005C               3246            BNE     DEST_CHECK1
00003016                          3247            
00003016                          3248            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003016  163C 0020               3249            MOVE.B    #' ',D3
0000301A  6100 0426               3250            BSR       PUSH_STACK
0000301E  163C 0044               3251            MOVE.B    #'D',D3
00003022  6100 041E               3252            BSR       PUSH_STACK
00003026                          3253  
00003026                          3254            *FIND REGISTER NUMBER END LOCATION*  
00003026  13F9 00003D6B 00003D72  3255            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00003030  0239 000F 00003D72      3256            AND.B   #$0F,VAR_BYTE_END
00003038                          3257            
00003038                          3258            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003038  23C5 00003D76           3259            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
0000303E  1439 00003D72           3260            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003044                          3261            
00003044                          3262            *INTITIALIZE FOR BIT SHIFTING
00003044  41F9 00003D76           3263            LEA     VAR_TEMP_CLEANCOPY,A0
0000304A  2639 00003D76           3264            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003050                          3265  DEST_LOOP_SHIFTING
00003050  0C02 0000               3266            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003054  6700 0008               3267            BEQ     DEST_MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00003058  E24B                    3268            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
0000305A  5302                    3269            SUB.B   #1,D2                     *DECREMENT COUNTER
0000305C  60F2                    3270            BRA     DEST_LOOP_SHIFTING             *CONTINUE SHIFTING
0000305E                          3271  DEST_MASKING_NEXT
0000305E  C6BC 00000007           3272            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003064  0603 0030               3273            ADD.B   #$30,D3                   *CONVERT TO CHAR
00003068  6100 03D8               3274            BSR     PUSH_STACK                *PUSH TO STACK
0000306C                          3275            
0000306C  6000 0394               3276            BRA     GET_DST_SUCCESS           *RETURN          
00003070                          3277            
00003070                          3278            
00003070                          3279            *** Check if source ...  <ea> = An
00003070                          3280  DEST_CHECK1    
00003070  41F9 00003D6A           3281            LEA     TEMP_REGISTER_FORMAT,A0
00003076  1439 00003D68           3282            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000307C  1082                    3283            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000307E  0239 0002 00003D6A      3284            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
00003086  0C39 0002 00003D6A      3285            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
0000308E  6700 006A               3286            BEQ     DEST_CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00003092  0CB9 00000001 00003D7A  3287            CMPI.L  #1,VAR_LONG_ADDRESS_MODE_CHECK                      * An - COMPARE MODES TO SEE IF IT IS THIS MODE
0000309C  6600 005C               3288            BNE     DEST_CHECK2
000030A0                          3289            
000030A0                          3290            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000030A0  163C 0020               3291            MOVE.B    #' ',D3
000030A4  6100 039C               3292            BSR       PUSH_STACK
000030A8  163C 0041               3293            MOVE.B    #'A',D3
000030AC  6100 0394               3294            BSR       PUSH_STACK
000030B0                          3295  
000030B0                          3296            
000030B0                          3297            *FIND REGISTER NUMBER END LOCATION*  
000030B0  13F9 00003D6B 00003D72  3298            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
000030BA  0239 000F 00003D72      3299            AND.B   #$0F,VAR_BYTE_END
000030C2                          3300            
000030C2                          3301            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000030C2  23C5 00003D76           3302            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000030C8  1439 00003D72           3303            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
000030CE                          3304            
000030CE                          3305            *INTITIALIZE FOR BIT SHIFTING
000030CE  41F9 00003D76           3306            LEA     VAR_TEMP_CLEANCOPY,A0
000030D4  2639 00003D76           3307            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000030DA                          3308  DEST_LOOP_SHIFTING1
000030DA  0C02 0000               3309            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000030DE  6700 0008               3310            BEQ     DEST_MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
000030E2  E24B                    3311            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000030E4  5302                    3312            SUB.B   #1,D2                     *DECREMENT COUNTER
000030E6  60F2                    3313            BRA     DEST_LOOP_SHIFTING1             *CONTINUE SHIFTING
000030E8                          3314  DEST_MASKING_NEXT1
000030E8  C6BC 00000007           3315            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000030EE  0603 0030               3316            ADD.B   #$30,D3                   *CONVERT TO CHAR
000030F2  6100 034E               3317            BSR     PUSH_STACK                *PUSH TO STACK
000030F6                          3318            
000030F6  6000 030A               3319            BRA     GET_DST_SUCCESS                   *RETURN 
000030FA                          3320            
000030FA                          3321            
000030FA                          3322            
000030FA                          3323            
000030FA                          3324            *** Check if source ...  <ea> = (An)       
000030FA                          3325  DEST_CHECK2    
000030FA  41F9 00003D6A           3326            LEA     TEMP_REGISTER_FORMAT,A0
00003100  1439 00003D68           3327            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003106  1082                    3328            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003108  0239 0004 00003D6A      3329            ANDI.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
00003110  0C39 0004 00003D6A      3330            CMPI.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
00003118  6700 007A               3331            BEQ     DEST_CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
0000311C  0CB9 00000002 00003D7A  3332            CMPI.L   #2,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)  COMPARE MODES TO SEE IF IT IS THIS MODE                                                                *change: checkx++*
00003126  6600 006C               3333            BNE     DEST_CHECK3
0000312A                          3334            
0000312A                          3335            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
0000312A  163C 0020               3336            MOVE.B    #' ',D3
0000312E  6100 0312               3337            BSR       PUSH_STACK
00003132  163C 0028               3338            MOVE.B    #'(',D3
00003136  6100 030A               3339            BSR       PUSH_STACK
0000313A  163C 0041               3340            MOVE.B    #'A',D3
0000313E  6100 0302               3341            BSR       PUSH_STACK
00003142                          3342  
00003142                          3343            
00003142                          3344            *FIND REGISTER NUMBER END LOCATION*  
00003142  13F9 00003D6B 00003D72  3345            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
0000314C  0239 000F 00003D72      3346            AND.B   #$0F,VAR_BYTE_END
00003154                          3347            
00003154                          3348            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003154  23C5 00003D76           3349            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
0000315A  1439 00003D72           3350            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003160                          3351            
00003160                          3352            *INTITIALIZE FOR BIT SHIFTING
00003160  41F9 00003D76           3353            LEA     VAR_TEMP_CLEANCOPY,A0
00003166  2639 00003D76           3354            MOVE.L  VAR_TEMP_CLEANCOPY,D3
0000316C                          3355  DEST_LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
0000316C  0C02 0000               3356            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003170  6700 0008               3357            BEQ     DEST_MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00003174  E24B                    3358            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003176  5302                    3359            SUB.B   #1,D2                     *DECREMENT COUNTER
00003178  60F2                    3360            BRA     DEST_LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
0000317A                          3361  DEST_MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
0000317A  0283 00000007           3362            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00003180  0603 0030               3363            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00003184  6100 02BC               3364            BSR     PUSH_STACK                *PUSH TO STACK
00003188                          3365            
00003188  163C 0029               3366            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
0000318C  6100 02B4               3367            BSR       PUSH_STACK
00003190                          3368            
00003190  6000 0270               3369            BRA     GET_DST_SUCCESS                   *RETURN 
00003194                          3370  
00003194                          3371            
00003194                          3372            
00003194                          3373                      
00003194                          3374  *** Check if source ...  <ea> = (An)+       
00003194  41F9 00003D6A           3375  DEST_CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
0000319A  1439 00003D68           3376            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000031A0  1082                    3377            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000031A2  0239 0008 00003D6A      3378            ANDI.B  #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
000031AA  0C39 0008 00003D6A      3379            CMPI.B  #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
000031B2  6700 0082               3380            BEQ     DEST_CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
000031B6  0CB9 00000003 00003D7A  3381            CMPI.L  #3,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)+ - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
000031C0  6600 0074               3382            BNE     DEST_CHECK4
000031C4                          3383            
000031C4                          3384            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
000031C4  163C 0020               3385            MOVE.B    #' ',D3
000031C8  6100 0278               3386            BSR       PUSH_STACK
000031CC  163C 0028               3387            MOVE.B    #'(',D3
000031D0  6100 0270               3388            BSR       PUSH_STACK
000031D4  163C 0041               3389            MOVE.B    #'A',D3
000031D8  6100 0268               3390            BSR       PUSH_STACK
000031DC                          3391  
000031DC                          3392            
000031DC                          3393            *FIND REGISTER NUMBER END LOCATION*  
000031DC  13F9 00003D6B 00003D72  3394            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
000031E6  0239 000F 00003D72      3395            ANDI.B   #$0F,VAR_BYTE_END
000031EE                          3396            
000031EE                          3397            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000031EE  23C5 00003D76           3398            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000031F4  1439 00003D72           3399            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000031FA                          3400            
000031FA                          3401            *INTITIALIZE FOR BIT SHIFTING
000031FA  41F9 00003D76           3402            LEA     VAR_TEMP_CLEANCOPY,A0
00003200  2639 00003D76           3403            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00003206                          3404            
00003206                          3405  DEST_LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
00003206  0C02 0000               3406            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000320A  6700 0008               3407            BEQ     DEST_MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
0000320E  E24B                    3408            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00003210  5302                    3409            SUBI.B   #1,D2                     *DECREMENT COUNTER
00003212  60F2                    3410            BRA     DEST_LOOP_SHIFTING3            *CONTINUE SHIFTING 
00003214                          3411                                               *change: NAME OF LABEL*
00003214                          3412  DEST_MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
00003214  0283 00000007           3413            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
0000321A  0603 0030               3414            ADDI.B   #$30,D3                   *CONVERT TO CHAR
0000321E  6100 0222               3415            BSR     PUSH_STACK                *PUSH TO STACK
00003222                          3416            
00003222  163C 0029               3417            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00003226  6100 021A               3418            BSR       PUSH_STACK
0000322A  163C 002B               3419            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
0000322E  6100 0212               3420            BSR       PUSH_STACK
00003232                          3421            
00003232  6000 01CE               3422            BRA       GET_DST_SUCCESS                   *RETURN 
00003236                          3423  
00003236                          3424            
00003236                          3425            
00003236                          3426                      
00003236                          3427            *** Check if source ...  <ea> = -(An)       
00003236                          3428  DEST_CHECK4    
00003236  41F9 00003D6A           3429            LEA     TEMP_REGISTER_FORMAT,A0
0000323C  1439 00003D68           3430            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003242  1082                    3431            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003244  0239 0010 00003D6A      3432            ANDI.B  #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
0000324C  0C39 0010 00003D6A      3433            CMPI.B  #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003254  6700 0082               3434            BEQ     DEST_CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00003258  0CB9 00000004 00003D7A  3435            CMPI.L  #4,VAR_LONG_ADDRESS_MODE_CHECK                      * -(An) - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00003262  6600 0074               3436            BNE     DEST_CHECK7
00003266                          3437            
00003266                          3438            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00003266  163C 0020               3439            MOVE.B    #' ',D3
0000326A  6100 01D6               3440            BSR       PUSH_STACK
0000326E  163C 002D               3441            MOVE.B    #'-',D3
00003272  6100 01CE               3442            BSR       PUSH_STACK
00003276  163C 0028               3443            MOVE.B    #'(',D3
0000327A  6100 01C6               3444            BSR       PUSH_STACK
0000327E  163C 0041               3445            MOVE.B    #'A',D3
00003282  6100 01BE               3446            BSR       PUSH_STACK
00003286                          3447  
00003286                          3448            
00003286                          3449            *FIND REGISTER NUMBER END LOCATION*  
00003286  13F9 00003D6B 00003D72  3450            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00003290  0239 000F 00003D72      3451            AND.B   #$0F,VAR_BYTE_END
00003298                          3452            
00003298                          3453            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00003298  23C5 00003D76           3454            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
0000329E  1439 00003D72           3455            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000032A4                          3456            
000032A4                          3457            *INTITIALIZE FOR BIT SHIFTING
000032A4  41F9 00003D76           3458            LEA     VAR_TEMP_CLEANCOPY,A0
000032AA  2639 00003D76           3459            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000032B0                          3460            
000032B0                          3461  DEST_LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
000032B0  0C02 0000               3462            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000032B4  6700 0008               3463            BEQ     DEST_MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
000032B8  E24B                    3464            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000032BA  5302                    3465            SUBI.B   #1,D2                     *DECREMENT COUNTER
000032BC  60F2                    3466            BRA     DEST_LOOP_SHIFTING4            *CONTINUE SHIFTING 
000032BE                          3467                                               *change: NAME OF LABEL*
000032BE                          3468  DEST_MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
000032BE  0283 00000007           3469            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000032C4  0603 0030               3470            ADDI.B   #$30,D3                   *CONVERT TO CHAR
000032C8  6100 0178               3471            BSR     PUSH_STACK                *PUSH TO STACK
000032CC                          3472            
000032CC  163C 0029               3473            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
000032D0  6100 0170               3474            BSR       PUSH_STACK
000032D4                          3475            
000032D4  6000 012C               3476            BRA     GET_DST_SUCCESS                   *RETURN
000032D8                          3477            
000032D8                          3478                      
000032D8                          3479            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
000032D8                          3480  DEST_CHECK7    
000032D8  0CB9 00000007 00003D7A  3481            CMPI.L  #7,VAR_LONG_ADDRESS_MODE_CHECK                      *IF (MODE != 111)
000032E2  6600 011A               3482            BNE     GET_DST_FAILED                                      *THAN BRANCH TO UNCESSFULL SRC MODE READ
000032E6                          3483                   
000032E6                          3484            *NEXT: (MODE == 111) 
000032E6                          3485            *NOW: CHECK FOR SRC REGISTER 
000032E6                          3486                  *(000 = (xxx).W)
000032E6                          3487                  *(001 = (xxx).L)
000032E6                          3488                  *(010 = #<data>)
000032E6                          3489                  
000032E6                          3490            *FIND REGISTER NUMBER END LOCATION*  
000032E6  13F9 00003D6B 00003D72  3491            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
000032F0  0239 000F 00003D72      3492            AND.B   #$0F,VAR_BYTE_END
000032F8                          3493            
000032F8                          3494            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000032F8  23C5 00003D76           3495            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000032FE  1439 00003D72           3496            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00003304                          3497            
00003304                          3498            *INTITIALIZE FOR BIT SHIFTING
00003304  41F9 00003D76           3499            LEA     VAR_TEMP_CLEANCOPY,A0
0000330A  2C39 00003D76           3500            MOVE.L  VAR_TEMP_CLEANCOPY,D6
00003310                          3501  DEST_LOOP_SHIFTING7
00003310  0C02 0000               3502            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00003314  6700 0008               3503            BEQ     DEST_MASKING_NEXT7              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00003318  E24E                    3504            LSR     #1,D6                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
0000331A  5302                    3505            SUB.B   #1,D2                     *DECREMENT COUNTER
0000331C  60F2                    3506            BRA     DEST_LOOP_SHIFTING7             *CONTINUE SHIFTING
0000331E                          3507  DEST_MASKING_NEXT7
0000331E  CCBC 00000007           3508            AND.L   #7,D6                     *MASK, ONLY NEED 0-2 BIT INDEXES 
00003324                          3509           *D3 - REGISTER NUMBER NEEDED TO CHECK WHICH W/L/#<DATA>*
00003324                          3510            
00003324                          3511  DEST_CHECK_WORD  
00003324  41F9 00003D6A           3512            LEA     TEMP_REGISTER_FORMAT,A0
0000332A  1439 00003D68           3513            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003330  1082                    3514            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003332  0239 0020 00003D6A      3515            ANDI.B  #$20,TEMP_REGISTER_FORMAT                           * MASKS 0010 0000                                                     *change <SRC>*
0000333A  0C39 0020 00003D6A      3516            CMPI.B  #$20,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0010 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003342  6700 0026               3517            BEQ     DEST_CHECK_LONG                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00003346  0C06 0000               3518            CMPI.B  #0,D6                                                   *COMPARE REGISTER NUMBER WITH (000 == 000) FOR WORD
0000334A  6600 001E               3519            BNE     DEST_CHECK_LONG                                      * THE REGISTER NUMBER DOESN'T MATCH "(XXX).W" -> SO MOVE ON       
0000334E                          3520            *IT IS A WORD AT THIS POINT*
0000334E                          3521            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
0000334E  163C 0020               3522            MOVE.B    #' ',D3
00003352  6100 00EE               3523            BSR       PUSH_STACK
00003356  163C 0024               3524            MOVE.B    #'$',D3
0000335A  6100 00E6               3525            BSR       PUSH_STACK
0000335E  321D                    3526            MOVE.W    (A5)+,D1
00003360  7404                    3527            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003362  6100 DEA8               3528            BSR       HEX2ASCII2STACK
00003366  6000 009A               3529            BRA       GET_DST_SUCCESS
0000336A                          3530  
0000336A                          3531  DEST_CHECK_LONG
0000336A  41F9 00003D6A           3532            LEA     TEMP_REGISTER_FORMAT,A0
00003370  1439 00003D68           3533            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00003376  1082                    3534            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00003378  0239 0040 00003D6A      3535            ANDI.B  #$40,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00003380  0C39 0040 00003D6A      3536            CMPI.B  #$40,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00003388  6700 002E               3537            BEQ     DEST_CHECK_IMMEDIATE                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
0000338C  0C06 0001               3538            CMPI.B  #1,D6                                                   *COMPARE REGISTER NUMBER WITH (001 == 001) FOR WORD
00003390  6600 0026               3539            BNE     DEST_CHECK_IMMEDIATE                                      * THE REGISTER NUMBER DOESN'T MATCH "(XXX).L" -> SO MOVE ON 
00003394                          3540            *IT IS A WORD AT THIS POINT*
00003394                          3541            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00003394  163C 0020               3542            MOVE.B    #' ',D3
00003398  6100 00A8               3543            BSR       PUSH_STACK
0000339C  163C 0024               3544            MOVE.B    #'$',D3
000033A0  6100 00A0               3545            BSR       PUSH_STACK
000033A4  321D                    3546            MOVE.W    (A5)+,D1        * GET NEXT WORD INTO STACK
000033A6  7404                    3547            MOVE.L    #4,D2           * SETS SIZE = 4 FOR CONVERSION TO ASCII
000033A8  6100 DE62               3548            BSR       HEX2ASCII2STACK
000033AC  321D                    3549            MOVE.W    (A5)+,D1        * GET NEXT WORD INTO STACK
000033AE  7404                    3550            MOVE.L    #4,D2          
000033B0  6100 DE5A               3551            BSR       HEX2ASCII2STACK
000033B4  6000 004C               3552            BRA     GET_DST_SUCCESS
000033B8                          3553            
000033B8                          3554  DEST_CHECK_IMMEDIATE
000033B8  41F9 00003D6A           3555            LEA     TEMP_REGISTER_FORMAT,A0
000033BE  1439 00003D68           3556            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000033C4  1082                    3557            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000033C6  0239 0080 00003D6A      3558            ANDI.B  #$80,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
000033CE  0C39 0080 00003D6A      3559            CMPI.B  #$80,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
000033D6  6700 0026               3560            BEQ     GET_DST_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
000033DA  0C06 0004               3561            CMPI.B  #4,D6                                               * COMPARE REGISTER NUMBER WITH (010 == 010) FOR WORD
000033DE  6600 001E               3562            BNE     GET_DST_FAILED                                      * THE REGISTER NUMBER DOESN'T MATCH "#<DATA>" -> SO MOVE ON 
000033E2                          3563            
000033E2                          3564            *IT IS A WORD AT THIS POINT*
000033E2                          3565            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000033E2  163C 0020               3566            MOVE.B    #' ',D3
000033E6  6100 005A               3567            BSR       PUSH_STACK
000033EA  163C 0023               3568            MOVE.B    #'#',D3
000033EE  6100 0052               3569            BSR       PUSH_STACK
000033F2  321D                    3570            MOVE.W    (A5)+,D1
000033F4  7404                    3571            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
000033F6  6100 DE14               3572            BSR       HEX2ASCII2STACK
000033FA  6000 0006               3573            BRA       GET_DST_SUCCESS
000033FE                          3574            
000033FE                          3575  GET_DST_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
000033FE  7801                    3576            MOVE.L #1,D4
00003400  4E75                    3577            RTS
00003402                          3578  GET_DST_SUCCESS 
00003402  4E75                    3579            RTS
00003404                          3580  
00003404                          3581  
00003404                          3582  *---------------------------------------------------------------------------*
00003404                          3583  * STACK/QUEUE INTERFACE
00003404                          3584  *---------------------------------------------------------------------------*
00003404                          3585  PRINT_STACK
00003404  0C39 0000 00003D64      3586            CMP.B     #0,COUNTER
0000340C  6700 000E               3587            BEQ       PRINT_STACK_RETURN             *CHECK IF LOOP IS FINISHED
00003410                          3588            
00003410                          3589  PRINT_STACK_HELPER
00003410  6100 0038               3590            BSR      POP_STACK          *PRINTS ADDRESS
00003414  103C 0006               3591            MOVE.B   #6,D0              *Display single character in D1.B. 
00003418  4E4F                    3592            TRAP     #15             *ACTIVATES PRINT
0000341A                          3593  
0000341A  60E8                    3594            BRA       PRINT_STACK
0000341C                          3595  PRINT_STACK_RETURN
0000341C  4E75                    3596            RTS
0000341E                          3597            
0000341E                          3598            
0000341E                          3599  PRINT_QUEUE
0000341E  0C39 0000 00003D64      3600            CMP.B     #0,COUNTER
00003426  6700 0018               3601            BEQ       PRINT_QUEUE_RETURN             *CHECK IF LOOP IS FINISHED
0000342A                          3602            
0000342A                          3603  PRINT_QUEUE_HELPER
0000342A  33F9 00003D64 00003D66  3604            MOVE.W   COUNTER,QUEUE_COUNTER
00003434  6100 0022               3605            BSR      POP_FRONT          *PRINTS ADDRESS
00003438  103C 0006               3606            MOVE.B   #6,D0              *Display single character in D1.B. 
0000343C  4E4F                    3607            TRAP     #15             *ACTIVATES PRINT
0000343E                          3608  
0000343E  60DE                    3609            BRA       PRINT_QUEUE
00003440                          3610  PRINT_QUEUE_RETURN
00003440  4E75                    3611            RTS
00003442                          3612            
00003442                          3613  *PUSHES.W CONTENTS OF [D3] INTO STACK          
00003442                          3614  PUSH_STACK
00003442  1503                    3615              MOVE.B  D3,-(A2)
00003444  6100 0058               3616              BSR     INCREMENT
00003448  4E75                    3617              RTS
0000344A                          3618  *POPS.W TOP OF STACK INTO [D1], SO ITS READY TO PRINT WITH TRAP 15
0000344A                          3619  *         MOVE.W   (A2)+,D1           *PRINTS ADDRESS
0000344A                          3620  *         MOVE.B   #15,D0             *PRINTS ACCORDING TO D2 BASE VALUE
0000344A                          3621  *         MOVE.B   #16,D2             *PRINTS BASED 16 NUMBER
0000344A                          3622  *         TRAP        #15             *ACTIVATES PRINT
0000344A                          3623  POP_STACK
0000344A  BECA                    3624              CMPA.W   A2,SP            *CHECKS IF THERE IS ANYTHING TO PUSH
0000344C  6700 0008               3625              BEQ     POP_RETURN        *IF NOTHING TO PUSH THAN JUST RETURN
00003450  121A                    3626              MOVE.B  (A2)+,D1 
00003452  6100 0052               3627              BSR     DECREMENT
00003456                          3628  POP_RETURN
00003456  4E75                    3629              RTS 
00003458                          3630        
00003458                          3631  *USE [A4] AS SECOND POINTER IN SHIFTING      
00003458  0C39 0000 00003D66      3632  POP_FRONT   CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
00003460  6700 0030               3633              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
00003464                          3634              
00003464                          3635              
00003464                          3636              *POSITION THE POINTERS A[4] RIGHT BEHIND A[2] WHICH IS RIGHT BEHIND STACK
00003464  347C 7000               3637              MOVEA.W #STACK,A2   *START A2 AT STACK
00003468  0622 0000               3638              ADD.B   #0,-(A2)    *SHIFT A2 TO THE BOTTOM OF THE STACK
0000346C  384A                    3639              MOVEA.W A2,A4     *START A4 RIGHT ABOVE A2
0000346E  0624 0000               3640              ADD.B   #0,-(A4)  *leash one more higher in stack (a4)
00003472  1212                    3641              MOVE.B  (A2),D1     *POP CONTENTS INTO D1
00003474                          3642  POP_SHIFT_LOOP
00003474  0C39 0000 00003D66      3643              CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
0000347C  6700 0014               3644              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
00003480  1494                    3645              MOVE.B  (A4),(A2)   *SHIFT CONTENT DOWN THE STACK
00003482  0624 0000               3646              ADD.B   #0,-(A4)
00003486  0622 0000               3647              ADD.B   #0,-(A2) *SHIFT POINTERS DOWN THE STACK
0000348A  5339 00003D66           3648              SUB.B   #1,QUEUE_COUNTER *DECREMENT INTERNAL QUEUE COUNTER
00003490                          3649              
00003490  60E2                    3650              BRA     POP_SHIFT_LOOP
00003492                          3651                          
00003492                          3652  POP_FRONT_RETURN 
00003492                          3653              *RESET A2 BACK TO SP
00003492  347C 7000               3654              MOVEA.W #STACK,A2    
00003496  5339 00003D64           3655              SUB.B   #1,COUNTER *DECREMENT STACK COUNTER       
0000349C  4E75                    3656              RTS   
0000349E                          3657  
0000349E                          3658  INCREMENT
0000349E  5239 00003D64           3659              ADD.B   #1, COUNTER
000034A4  4E75                    3660              RTS           
000034A6                          3661  DECREMENT
000034A6  5339 00003D64           3662              SUB.B   #1, COUNTER
000034AC  4E75                    3663              RTS           
000034AE                          3664  CLEAR_STACK
000034AE  0C39 0000 00003D64      3665              CMP.B     #0,COUNTER
000034B6  6700 0006               3666              BEQ       CLEAR_RETURN
000034BA  618E                    3667              BSR       POP_STACK
000034BC  60F0                    3668              BRA       CLEAR_STACK
000034BE                          3669   
000034BE                          3670  CLEAR_RETURN
000034BE  4E75                    3671              RTS    
000034C0                          3672  *---------------------------------------------------------------------------*
000034C0                          3673  * TERMINATE
000034C0                          3674  *---------------------------------------------------------------------------*
000034C0                          3675  TERMINATE   
000034C0  43F9 00003870           3676              LEA     FINMSG,A1
000034C6  103C 000E               3677              MOVE.B  #14,D0
000034CA  4E4F                    3678              TRAP    #15
000034CC                          3679  
000034CC  103C 0009               3680              MOVE.B  #9,D0
000034D0  4E4F                    3681              TRAP    #15
000034D2                          3682  
000034D2                          3683  *---------------------------------------------------------------------------*
000034D2                          3684  * Data storage                                                 
000034D2                          3685  *---------------------------------------------------------------------------*  
000034D2                          3686  WELCOME
000034D2= 20 20 20 20 20 20 ...   3687              DC.B '                         ___     ___ ___        ___   ___ ___                 ',CR,LF
00003522= 3D 3D 3D 3D 3D 20 ...   3688              DC.B '=====           \  /\  /|___|   |   |   ||\  /||___    | |   |           =====',CR,LF
00003572= 3D 3D 3D 3D 3D 20 ...   3689              DC.B '=====            \/  \/ |___|___|___|___|| \/ ||___    | |___|           =====',CR,LF
000035C2                          3690      
000035C2= 20 20 20 20 20 20 ...   3691              DC.B '                        ___ ___ ___  ___      ___                             ',CR,LF
00003612= 20 20 20 20 20 20 ...   3692              DC.B '                       |     | |___)|    |   |___                             ',CR,LF 
00003662= 20 20 20 20 20 20 ...   3693              DC.B '                       |___ _|_|\___|___ |___|___                             ',CR,LF
000036B2                          3694      
000036B2= 20 20 20 20 20 20 ...   3695              DC.B '           __  ___ ___   _   ___  ___  ___        ___      ___ ___            ',CR,LF
00003702= 3D 3D 3D 3D 3D 20 ...   3696              DC.B '=====     |  \  | |___  /_\ |___ |___ |___ |\  /||___||   |___|___)      =====',CR,LF 
00003752= 3D 3D 3D 3D 3D 20 ...   3697              DC.B '=====     |__/ _|_ ___|/   \ ___| ___||___ | \/ ||___||___|___|\___      =====',CR,LF,CR,LF,CR,LF,0
000037A7                          3698  
000037A7                          3699  PROMPT_START
000037A7= 50 6C 65 61 73 65 ...   3700              DC.B    'Please enter a hexadecimal starting address.',CR,LF,0
000037D6                          3701      
000037D6                          3702  PROMPT_END
000037D6= 50 6C 65 61 73 65 ...   3703              DC.B    'Please enter a hexadecimal ending address.',CR,LF,0
00003803= 0D 0A 48 69 74 20 ...   3704  DISP_NEXT   DC.B    CR,LF,'Hit Enter to print the next 30 lines.',CR,LF,0            
0000382D= 57 6F 75 6C 64 20 ...   3705  REPEATMSG   DC.B    'Would you like to run again? Press Y to continue or N to finish.',CR,LF,0
00003870= 54 68 61 6E 6B 20 ...   3706  FINMSG      DC.B    'Thank you for using Circle Disassembler.',CR,LF,0
0000389B= 45 72 72 6F 72 3A ...   3707  ERRMSG_1    DC.B    'Error: Invalid Input Address',CR,LF,0
000038BA= 45 72 72 6F 72 3A ...   3708  ERRMSG_3    DC.B    'Error: Invalid Input Address (Odd)',CR,LF,0
000038DF= 45 72 72 6F 72 3A ...   3709  ERRMSG_5    DC.B    'Error: Invalid Input Address (start > end)',CR,LF,0
0000390C                          3710  
0000390C                          3711  VR_S_ADDR   DS.B    80                      * allocate storage space for the starting address
0000395C                          3712  VR_E_ADDR   DS.B    80                      * allocate storage space for the ending address
000039AC                          3713  S_ADDR_HX   DS.L    1                       * allocate storage space for the starting address in hex
000039B0                          3714  E_ADDR_HX   DS.L    1                       * allocate storage space for the ending address in hex
000039B4= 0D 0A 00                3715  ENDLINE_M   DC.B    CR,LF,0
000039B7                          3716  TMPINPUT    DS.B    80                      * temp store user input
00003A07                          3717  TMPOUTPUT   DS.B    80                      * temp store prog output
00003A57= 20 20 20 4F 52 49 ...   3718  DISP_ORI_B  DC.B    '   ORI.B',0
00003A60= 20 20 20 4F 52 49 ...   3719  DISP_ORI_W  DC.B    '   ORI.W',0
00003A69= 20 20 20 4F 52 49 ...   3720  DISP_ORI_L  DC.B    '   ORI.L',0
00003A72= 20 20 20 45 4F 52 ...   3721  DISP_EORI_B  DC.B    '   EORI.B',0
00003A7C= 20 20 20 45 4F 52 ...   3722  DISP_EORI_W  DC.B    '   EORI.W',0
00003A86= 20 20 20 45 4F 52 ...   3723  DISP_EORI_L  DC.B    '   EORI.L',0
00003A90= 20 20 20 42 54 53 ...   3724  DISP_BTST   DC.B    '   BTST',0
00003A98= 20 20 20 43 4D 50 ...   3725  DISP_CMPI_B  DC.B    '   CMPI.B',0
00003AA2= 20 20 20 43 4D 50 ...   3726  DISP_CMPI_W  DC.B    '   CMPI.W',0
00003AAC= 20 20 20 43 4D 50 ...   3727  DISP_CMPI_L  DC.B    '   CMPI.L',0
00003AB6= 20 20 20 44 41 54 ...   3728  DISP_DATA   DC.B    '   DATA',0
00003ABE= 20 20 20 4D 4F 56 ...   3729  DISP_MOVE_B DC.B    '   MOVE.B',0
00003AC8= 20 20 20 4D 4F 56 ...   3730  DISP_MOVE_W DC.B    '   MOVE.W',0
00003AD2= 20 20 20 4D 4F 56 ...   3731  DISP_MOVE_L DC.B    '   MOVE.L',0
00003ADC= 20 20 20 52 54 53 00    3732  DISP_RTS    DC.B    '   RTS',0
00003AE3= 20 20 20 4A 53 52 00    3733  DISP_JSR    DC.B    '   JSR',0
00003AEA= 20 20 20 4E 45 47 ...   3734  DISP_NEG_B    DC.B    '   NEG.B',0
00003AF3= 20 20 20 4E 45 47 ...   3735  DISP_NEG_W    DC.B    '   NEG.W',0
00003AFC= 20 20 20 4E 45 47 ...   3736  DISP_NEG_L    DC.B    '   NEG.L',0
00003B05= 20 20 20 4E 4F 54 ...   3737  DISP_NOT_B  DC.B    '   NOT.B',0
00003B0E= 20 20 20 4E 4F 54 ...   3738  DISP_NOT_W  DC.B    '   NOT.W',0
00003B17= 20 20 20 4E 4F 54 ...   3739  DISP_NOT_L  DC.B    '   NOT.L',0
00003B20= 20 20 20 4C 45 41 00    3740  DISP_LEA    DC.B    '   LEA',0
00003B27= 20 20 20 4D 4F 56 ...   3741  DISP_MOVEM_W    DC.B    '   MOVEM.W',0
00003B32= 20 20 20 4D 4F 56 ...   3742  DISP_MOVEM_L    DC.B    '   MOVEM.L',0
00003B3D= 20 20 20 41 44 44 ...   3743  DISP_ADDQ_B DC.B    '   ADDQ.B',0
00003B47= 20 20 20 41 44 44 ...   3744  DISP_ADDQ_W DC.B    '   ADDQ.W',0
00003B51= 20 20 20 41 44 44 ...   3745  DISP_ADDQ_L DC.B    '   ADDQ.L',0
00003B5B= 20 20 20 44 49 56 ...   3746  DISP_DIVS   DC.B    '   DIVS',0
00003B63= 20 20 20 53 55 42 ...   3747  DISP_SUB_B  DC.B    '   SUB.B',0
00003B6C= 20 20 20 53 55 42 ...   3748  DISP_SUB_W  DC.B    '   SUB.W',0
00003B75= 20 20 20 53 55 42 ...   3749  DISP_SUB_L  DC.B    '   SUB.L',0
00003B7E= 20 20 20 53 55 42 ...   3750  DISP_SUBI_B  DC.B    '   SUBI.B',0
00003B88= 20 20 20 53 55 42 ...   3751  DISP_SUBI_W  DC.B    '   SUBI.W',0
00003B92= 20 20 20 53 55 42 ...   3752  DISP_SUBI_L  DC.B    '   SUBI.L',0
00003B9C= 20 20 20 53 55 42 ...   3753  DISP_SUBA_W  DC.B    '   SUBA.W',0
00003BA6= 20 20 20 53 55 42 ...   3754  DISP_SUBA_L  DC.B    '   SUBA.L',0
00003BB0= 20 20 20 45 4F 52 ...   3755  DISP_EOR_B  DC.B    '   EOR.B',0
00003BB9= 20 20 20 45 4F 52 ...   3756  DISP_EOR_W  DC.B    '   EOR.W',0
00003BC2= 20 20 20 45 4F 52 ...   3757  DISP_EOR_L  DC.B    '   EOR.L',0
00003BCB= 20 20 20 43 4D 50 ...   3758  DISP_CMP_B  DC.B    '   CMP.B',0
00003BD4= 20 20 20 43 4D 50 ...   3759  DISP_CMP_W  DC.B    '   CMP.W',0
00003BDD= 20 20 20 43 4D 50 ...   3760  DISP_CMP_L  DC.B    '   CMP.L',0
00003BE6= 20 20 20 43 4D 50 ...   3761  DISP_CMPA_W  DC.B    '   CMPA.W',0
00003BF0= 20 20 20 43 4D 50 ...   3762  DISP_CMPA_L  DC.B    '   CMPA.L',0
00003BFA= 20 20 20 4D 55 4C ...   3763  DISP_MULS_W DC.B    '   MULS.W',0
00003C04= 20 20 20 41 4E 44 ...   3764  DISP_AND_B  DC.B    '   AND.B',0
00003C0D= 20 20 20 41 4E 44 ...   3765  DISP_AND_W  DC.B    '   AND.W',0
00003C16= 20 20 20 41 4E 44 ...   3766  DISP_AND_L  DC.B    '   AND.L',0
00003C1F= 20 20 20 41 44 44 ...   3767  DISP_ADD_B  DC.B    '   ADD.B',0
00003C28= 20 20 20 41 44 44 ...   3768  DISP_ADD_W  DC.B    '   ADD.W',0
00003C31= 20 20 20 41 44 44 ...   3769  DISP_ADD_L  DC.B    '   ADD.L',0
00003C3A= 20 20 20 41 44 44 ...   3770  DISP_ADDA_W DC.B    '   ADDA.W',0
00003C44= 20 20 20 41 44 44 ...   3771  DISP_ADDA_L DC.B    '   ADDA.L',0
00003C4E= 20 20 20 4C 53 52 ...   3772  DISP_LSR_B  DC.B    '   LSR.B',0
00003C57= 20 20 20 4C 53 4C ...   3773  DISP_LSL_B  DC.B    '   LSL.B',0
00003C60= 20 20 20 4C 53 52 ...   3774  DISP_LSR_W  DC.B    '   LSR.W',0
00003C69= 20 20 20 4C 53 4C ...   3775  DISP_LSL_W  DC.B    '   LSL.W',0
00003C72= 20 20 20 4C 53 52 ...   3776  DISP_LSR_L  DC.B    '   LSR.L',0
00003C7B= 20 20 20 4C 53 4C ...   3777  DISP_LSL_L  DC.B    '   LSL.L',0
00003C84= 20 20 20 41 53 52 ...   3778  DISP_ASR_B  DC.B    '   ASR.B',0
00003C8D= 20 20 20 41 53 4C ...   3779  DISP_ASL_B  DC.B    '   ASL.B',0
00003C96= 20 20 20 41 53 52 ...   3780  DISP_ASR_W  DC.B    '   ASR.W',0
00003C9F= 20 20 20 41 53 4C ...   3781  DISP_ASL_W  DC.B    '   ASL.W',0
00003CA8= 20 20 20 41 53 52 ...   3782  DISP_ASR_L  DC.B    '   ASR.L',0
00003CB1= 20 20 20 41 53 4C ...   3783  DISP_ASL_L  DC.B    '   ASL.L',0
00003CBA= 20 20 20 52 4F 52 ...   3784  DISP_ROR_B  DC.B    '   ROR.B',0
00003CC3= 20 20 20 52 4F 4C ...   3785  DISP_ROL_B  DC.B    '   ROL.B',0
00003CCC= 20 20 20 52 4F 52 ...   3786  DISP_ROR_W  DC.B    '   ROR.W',0
00003CD5= 20 20 20 52 4F 4C ...   3787  DISP_ROL_W  DC.B    '   ROL.W',0
00003CDE= 20 20 20 52 4F 52 ...   3788  DISP_ROR_L  DC.B    '   ROR.L',0
00003CE7= 20 20 20 52 4F 4C ...   3789  DISP_ROL_L  DC.B    '   ROL.L',0
00003CF0= 20 20 20 42 52 41 00    3790  DISP_BRA    DC.B    '   BRA',0
00003CF7= 20 20 20 42 4C 54 00    3791  DISP_BLT    DC.B    '   BLT',0
00003CFE= 20 20 20 42 45 51 00    3792  DISP_BEQ    DC.B    '   BEQ',0
00003D05= 20 20 20 42 4E 45 00    3793  DISP_BNE    DC.B    '   BNE',0
00003D0C= 20 20 20 42 48 49 00    3794  DISP_BHI    DC.B    '   BHI',0
00003D13= 20 20 20 4D 4F 56 ...   3795  DISP_MOVEA_W    DC.B    '   MOVEA.W',0
00003D1E= 20 20 20 4D 4F 56 ...   3796  DISP_MOVEA_L    DC.B    '   MOVEA.L',0
00003D29                          3797  
00003D29= 20 20 20 24 00          3798  DISP_HEX     DC.B    '   $',0
00003D2E= 20 20 20 44 00          3799  DISP_D  DC.B    '   D',0
00003D33= 20 20 20 41 00          3800  DISP_A  DC.B    '   A',0
00003D38= 20 20 20 28 00          3801  DISP_OP  DC.B    '   (',0
00003D3D= 29 00                   3802  DISP_CP  DC.B   ')',0
00003D3F= 20 20 20 28 41 00       3803  DISP_AOP  DC.B    '   (A',0
00003D45                          3804  
00003D45= 20 20 20 2D 28 41 00    3805  DISP_PRE    DC.B    '   -(A',0
00003D4C= 29 2B 00                3806  DISP_POST   DC.B    ')+',0
00003D4F= 20 20 20 23 00          3807  DISP_LB DC.B    '   #',0
00003D54= 30 00                   3808  DISP_0  DC.B    '0',0
00003D56= 31 00                   3809  DISP_1  DC.B    '1',0
00003D58= 32 00                   3810  DISP_2  DC.B    '2',0
00003D5A= 33 00                   3811  DISP_3  DC.B    '3',0
00003D5C= 34 00                   3812  DISP_4  DC.B    '4',0
00003D5E= 35 00                   3813  DISP_5  DC.B    '5',0
00003D60= 36 00                   3814  DISP_6  DC.B    '6',0
00003D62= 37 00                   3815  DISP_7  DC.B    '7',0
00003D64                          3816  
00003D64                          3817  *STACK INTERFACE VARIABLES*
00003D64                          3818  COUNTER         DS.W    1
00003D66                          3819  QUEUE_COUNTER   DS.W    1
00003D68                          3820  
00003D68                          3821  *EA DECODING INTERFACE VARIABLES* 
00003D68                          3822  DEST_REGISTER_FORMAT    DS.B    1           *all address modes acceptable standard
00003D69                          3823  SRC_REGISTER_FORMAT  DS.B    1           *all address modes acceptable standard
00003D6A                          3824  TEMP_REGISTER_FORMAT    DS.B    1           *place holder for masking other register formats
00003D6B                          3825  
00003D6B                          3826  *FORMAT OF WHERE TO GET THE EA BY THE ENDING BIT AND STARTING BIT
00003D6B                          3827  * WORD + WORD = LONG
00003D6B                          3828  * (STARTING BIT) + (ENDING BIT) = 2 HEX CHAR
00003D6B                          3829  * A              + F            = AF         <= EXAMPLE
00003D6B                          3830  *(10TH BIT)      + (15TH BIT)   = CHECK BITS 15 THROUGH 10
00003D6B                          3831  GET_DST_START_END    DS.B    1
00003D6C                          3832  GET_SRC_START_END    DS.B    1
00003D6D                          3833  
00003D6D                          3834  *STORES THE START + END BITS HERE (FROM ABOVE)
00003D6E                          3835  VAR_BYTE_START      DS.L    1
00003D72                          3836  VAR_BYTE_END        DS.L    1
00003D76                          3837  VAR_TEMP_CLEANCOPY  DS.L    1
00003D7A                          3838  
00003D7A                          3839  VAR_LONG_ADDRESS_MODE_CHECK        DS.L    1       *holds the bits 0-2 in long form
00003D7E                          3840  
00003D7E                          3841  *MORE FOR STACK USAGE*
00003D7E= 2C 00                   3842  DISP_COMMA  DC.B    ',',0
00003D80= 20 20 20 00             3843  DISP_INDENT  DC.B    '   ',0
00003D84                          3844  
00003D84                          3845  *NEXT WORD POINTER: FOR IDENTIFING (xxx).W or (xxx).L*
00003D84                          3846  POINTER_WORD    DS.W       1
00003D86                          3847  
00003D86                          3848  
00003D86                          3849  
00003D86                          3850  *---------------------------------------------------------------------------*
00003D86                          3851  * Ends program
00003D86                          3852  *---------------------------------------------------------------------------*
00003D86                          3853              END    START                    * last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASC2HXLP            1168
ASCII2HEX           1162
ASC_ERR             11C4
ASC_LOW             11A6
ASC_NUM             11B6
ASC_SFT             11BE
ASC_UPP             11AE
CHECK0              2BB6
CHECK1              2C40
CHECK2              2CCA
CHECK3              2D64
CHECK4              2E06
CHECK7              2EA8
CHECK_IMMEDIATE     2F88
CHECK_LONG          2F3A
CHECK_WORD          2EF4
CLEAR_RETURN        34BE
CLEAR_STACK         34AE
COUNTER             3D64
CR                  D
DECREMENT           34A6
DEST_CHECK0         2FE6
DEST_CHECK1         3070
DEST_CHECK2         30FA
DEST_CHECK3         3194
DEST_CHECK4         3236
DEST_CHECK7         32D8
DEST_CHECK_IMMEDIATE  33B8
DEST_CHECK_LONG     336A
DEST_CHECK_WORD     3324
DEST_LOOP_SHIFTING  3050
DEST_LOOP_SHIFTING1  30DA
DEST_LOOP_SHIFTING2  316C
DEST_LOOP_SHIFTING3  3206
DEST_LOOP_SHIFTING4  32B0
DEST_LOOP_SHIFTING7  3310
DEST_MASKING_NEXT   305E
DEST_MASKING_NEXT1  30E8
DEST_MASKING_NEXT2  317A
DEST_MASKING_NEXT3  3214
DEST_MASKING_NEXT4  32BE
DEST_MASKING_NEXT7  331E
DEST_MODE           276E
DEST_REGISTER       2A3E
DEST_REGISTER_FORMAT  3D68
DISPLAY_30_LINES    1310
DISP_0              3D54
DISP_1              3D56
DISP_2              3D58
DISP_3              3D5A
DISP_4              3D5C
DISP_5              3D5E
DISP_6              3D60
DISP_7              3D62
DISP_A              3D33
DISP_ADDA_L         3C44
DISP_ADDA_W         3C3A
DISP_ADDQ_B         3B3D
DISP_ADDQ_L         3B51
DISP_ADDQ_W         3B47
DISP_ADD_B          3C1F
DISP_ADD_L          3C31
DISP_ADD_W          3C28
DISP_AND_B          3C04
DISP_AND_L          3C16
DISP_AND_W          3C0D
DISP_AOP            3D3F
DISP_ASL_B          3C8D
DISP_ASL_L          3CB1
DISP_ASL_W          3C9F
DISP_ASR_B          3C84
DISP_ASR_L          3CA8
DISP_ASR_W          3C96
DISP_BEQ            3CFE
DISP_BHI            3D0C
DISP_BLT            3CF7
DISP_BNE            3D05
DISP_BRA            3CF0
DISP_BTST           3A90
DISP_CMPA_L         3BF0
DISP_CMPA_W         3BE6
DISP_CMPI_B         3A98
DISP_CMPI_L         3AAC
DISP_CMPI_W         3AA2
DISP_CMP_B          3BCB
DISP_CMP_L          3BDD
DISP_CMP_W          3BD4
DISP_COMMA          3D7E
DISP_CP             3D3D
DISP_D              3D2E
DISP_DATA           3AB6
DISP_DIVS           3B5B
DISP_EORI_B         3A72
DISP_EORI_L         3A86
DISP_EORI_W         3A7C
DISP_EOR_B          3BB0
DISP_EOR_L          3BC2
DISP_EOR_W          3BB9
DISP_HEX            3D29
DISP_INDENT         3D80
DISP_JSR            3AE3
DISP_LB             3D4F
DISP_LEA            3B20
DISP_LSL_B          3C57
DISP_LSL_L          3C7B
DISP_LSL_W          3C69
DISP_LSR_B          3C4E
DISP_LSR_L          3C72
DISP_LSR_W          3C60
DISP_MOVEA_L        3D1E
DISP_MOVEA_W        3D13
DISP_MOVEM_L        3B32
DISP_MOVEM_W        3B27
DISP_MOVE_B         3ABE
DISP_MOVE_L         3AD2
DISP_MOVE_W         3AC8
DISP_MULS_W         3BFA
DISP_NEG_B          3AEA
DISP_NEG_L          3AFC
DISP_NEG_W          3AF3
DISP_NEXT           3803
DISP_NOT_B          3B05
DISP_NOT_L          3B17
DISP_NOT_W          3B0E
DISP_OP             3D38
DISP_ORI_B          3A57
DISP_ORI_L          3A69
DISP_ORI_W          3A60
DISP_POST           3D4C
DISP_PRE            3D45
DISP_ROL_B          3CC3
DISP_ROL_L          3CE7
DISP_ROL_W          3CD5
DISP_ROR_B          3CBA
DISP_ROR_L          3CDE
DISP_ROR_W          3CCC
DISP_RTS            3ADC
DISP_SUBA_L         3BA6
DISP_SUBA_W         3B9C
DISP_SUBI_B         3B7E
DISP_SUBI_L         3B92
DISP_SUBI_W         3B88
DISP_SUB_B          3B63
DISP_SUB_L          3B75
DISP_SUB_W          3B6C
D_MODE000           2810
D_MODE010           2858
D_MODE011           28B8
D_MODE100           28D8
D_MODE111           292A
EA_ARITH            2708
EA_DATA             14EE
EA_GEN              2754
EA_MOVEA            272E
EA_NOSRC            26F4
ENDLINE_M           39B4
END_ADDR            10AE
ERRMSG_1            389B
ERRMSG_3            38BA
ERRMSG_5            38DF
ERROR_1             1112
ERROR_2             1122
ERROR_3             1132
ERROR_4             1142
ERROR_5             1152
E_ADDR_HX           39B0
FINMSG              3870
GET_DST_FAILED      33FE
GET_DST_START_END   3D6B
GET_DST_SUCCESS     3402
GET_EA_EA_DEST      2FD4
GET_EA_EA_SRC       2BA4
GET_SRC_FAILED      2FCE
GET_SRC_START_END   3D6C
GET_SRC_SUCCESS     2FD2
HEX2ASCII           11CA
HEX2ASCII2STACK     120C
HEX_CHAR            11F8
HEX_CONT            11FC
HEX_LOOP            11DE
IMMD_B              29DE
IMMD_L              2A1E
IMMD_W              29FE
IMMEDIATE           29AE
INCREMENT           349E
INTRO               1028
IS_ODD              1250
IS_ODD_ERR          1266
JMPTABLE            133C
LF                  A
LONGMODE            2982
LOOP_SHIFTING       2C20
LOOP_SHIFTING1      2CAA
LOOP_SHIFTING2      2D3C
LOOP_SHIFTING3      2DD6
LOOP_SHIFTING4      2E80
MAIN                126C
MASKING_NEXT        2C2E
MASKING_NEXT1       2CB8
MASKING_NEXT2       2D4A
MASKING_NEXT3       2DE4
MASKING_NEXT4       2E8E
MODE000             27FC
MODE001             2824
MODE010             2838
MODE011             2878
MODE100             2898
MODE111             28F8
NEXTLINES           131E
OP0000              139C
OP0001              15C2
OP0010              1630
OP0011              172E
OP0100              182A
OP0101              19C4
OP0110              1A40
OP0111              1ACE
OP1000              1AD2
OP1001              1B0E
OP1001_ADD_RETURN   1E5C
OP1001_DETERMINE_DN_EA_OR_EA_DN  1C24
OP1001_DN_EA        1C5C
OP1001_EA_DN        1D5C
OP1001_PRINT_B      1D84
OP1001_PRINT_B2     1C84
OP1001_PRINT_L      1E14
OP1001_PRINT_L2     1D14
OP1001_PRINT_W      1DCC
OP1001_PRINT_W2     1CCC
OP1001_SUBA_L       1B40
OP1001_SUBA_W       1BB2
OP1010              1ECA
OP1011              1ECE
OP1100              1FCA
OP1101              2066
OP1101_ADDA_L       2098
OP1101_ADDA_W       210A
OP1101_ADD_RETURN   23B4
OP1101_DETERMINE_DN_EA_OR_EA_DN  217C
OP1101_DN_EA        21B4
OP1101_EA_DN        22B4
OP1101_PRINT_B      22DC
OP1101_PRINT_B2     21DC
OP1101_PRINT_L      236C
OP1101_PRINT_L2     226C
OP1101_PRINT_W      2324
OP1101_PRINT_W2     2224
OP1110              2442
OP1111              26F0
OP_ADDA_L           242A
OP_ADDA_W           2412
OP_ADDQ             19E4
OP_ADDQ_B           1A0A
OP_ADDQ_L           1A2E
OP_ADDQ_W           1A1C
OP_ADD_B            23CA
OP_ADD_L            23FA
OP_ADD_W            23E2
OP_AND_B            2030
OP_AND_L            2054
OP_AND_W            2042
OP_ASL              25E2
OP_ASL_B            2606
OP_ASL_L            2618
OP_ASL_W            262A
OP_ASR              2588
OP_ASR_B            25AC
OP_ASR_L            25BE
OP_ASR_W            25D0
OP_ASX              24A4
OP_BEQ              1AA4
OP_BHI              1A88
OP_BLT              1AC0
OP_BNE              1A96
OP_BRA              1AB2
OP_BTST             1410
OP_CMPA_L           1F3A
OP_CMPA_W           1F28
OP_CMPI             1516
OP_CMPI_B           1536
OP_CMPI_L           155A
OP_CMPI_W           1548
OP_CMP_B            1F4C
OP_CMP_L            1F7C
OP_CMP_W            1F64
OP_DATA             14CA
OP_DIVS             1AFA
OP_EORI             141E
OP_EORI_B           143E
OP_EORI_L           1462
OP_EORI_W           1450
OP_EOR_B            1F94
OP_EOR_L            1FB8
OP_EOR_W            1FA6
OP_JSR              19A2
OP_LEA              18D0
OP_LSL              252E
OP_LSL_B            2552
OP_LSL_L            2564
OP_LSL_W            2576
OP_LSR              24D4
OP_LSR_B            24F8
OP_LSR_L            250A
OP_LSR_W            251C
OP_LSX              248C
OP_MOVEA_L          16BE
OP_MOVEA_W          17BA
OP_MOVEM_L          18BE
OP_MOVEM_W          18AC
OP_MOVE_B           15C8
OP_MOVE_L           1656
OP_MOVE_W           1752
OP_MULS             201C
OP_NEG              18E4
OP_NEG_B            1904
OP_NEG_L            1934
OP_NEG_W            191C
OP_NOT              194C
OP_NOT_B            196C
OP_NOT_L            1990
OP_NOT_W            197E
OP_ORI              156C
OP_ORI_B            158C
OP_ORI_L            15B0
OP_ORI_W            159E
OP_ROL              2696
OP_ROL_B            26BA
OP_ROL_L            26CC
OP_ROL_W            26DE
OP_ROR              263C
OP_ROR_B            2660
OP_ROR_L            2672
OP_ROR_W            2684
OP_ROX              24BC
OP_RTS              19B6
OP_SUBA_L           1EB8
OP_SUBA_W           1EA6
OP_SUBI             1474
OP_SUBI_B           1494
OP_SUBI_L           14B8
OP_SUBI_W           14A6
OP_SUB_B            1E5E
OP_SUB_L            1E8E
OP_SUB_W            1E76
OUTPUT_PROCESSED_DATA  12F0
POINTER_WORD        3D84
POP_FRONT           3458
POP_FRONT_RETURN    3492
POP_RETURN          3456
POP_SHIFT_LOOP      3474
POP_STACK           344A
PRINT_QUEUE         341E
PRINT_QUEUE_HELPER  342A
PRINT_QUEUE_RETURN  3440
PRINT_STACK         3404
PRINT_STACK_HELPER  3410
PRINT_STACK_RETURN  341C
PROGLP              100A
PROMPT_END          37D6
PROMPT_START        37A7
PUSH_STACK          3442
QUEUE_COUNTER       3D66
REG_0               2AF2
REG_1               2B00
REG_2               2B0E
REG_3               2B1C
REG_4               2B2A
REG_5               2B38
REG_6               2B46
REG_7               2B54
REPEAT              2B62
REPEATMSG           382D
RETURN              11C8
SRC_LOOP_SHIFTING   2EE0
SRC_MASKING_NEXT    2EEE
SRC_MODE            27B2
SRC_REGISTER        2A9A
SRC_REGISTER_FORMAT  3D69
STACK               7000
STACK_HEX_CHAR      123A
STACK_HEX_CONT      123E
STACK_HEX_LOOP      1220
START               1004
START_ADDR          105C
S_ADDR_HX           39AC
TEMP_REGISTER_FORMAT  3D6A
TERMINATE           34C0
TESTING             1036
TMPINPUT            39B7
TMPOUTPUT           3A07
VAR_BYTE_END        3D72
VAR_BYTE_START      3D6E
VAR_LONG_ADDRESS_MODE_CHECK  3D7A
VAR_TEMP_CLEANCOPY  3D76
VR_E_ADDR           395C
VR_S_ADDR           390C
WELCOME             34D2
WORDMODE            2956

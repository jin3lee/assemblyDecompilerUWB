00001004 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/8/2014 9:55:32 AM

00000000                             1  *---------------------------------------------------------------------------*
00000000                             2  * Title      : 68K Disassembler
00000000                             3  * Written by : Team Circle
00000000                             4  * Date       : 12/05/14
00000000                             5  * Description: Scans a section of memory and converts its
00000000                             6  *              contents to a listing of valid assembly 
00000000                             7  *              language instructions
00000000                             8  *---------------------------------------------------------------------------*
00000000                             9  
00000000                            10  *---------------------------------------------------------------------------*
00000000                            11  * System Equates                                                 
00000000                            12  *---------------------------------------------------------------------------*
00000000  =0000000D                 13  CR          EQU     $0D                     * ASCII for Carriage Return
00000000  =0000000A                 14  LF          EQU     $0A                     * ASCII for Line Feed 
00000000  =00007000                 15  STACK       EQU     $7000                   * Initial Stack Pointer                         
00000000                            16              
00000000                            17  *---------------------------------------------------------------------------*
00000000                            18  * Reserved Registers
00000000                            19  *---------------------------------------------------------------------------*  
00000000                            20  * D0 - I/O
00000000                            21  * D1 - Temporary storage of processing data
00000000                            22  * D3 - [PUSH_STACK]
00000000                            23  * D4 - Opcode size (0 - byte; 1- word; 2-long)
00000000                            24  * D5 - Processing data
00000000                            25  * D6 - Loop counter to print 30 lines
00000000                            26  * D7 - Error flag
00000000                            27  * A2 - [STACK POINTER]
00000000                            28  * A5 - Processing address in hex
00000000                            29  
00000000                            30  *---------------------------------------------------------------------------*
00000000                            31  * Start and loop program
00000000                            32  *---------------------------------------------------------------------------*  
00001000                            33              ORG     $1000
00001000  4FF8 7000                 34              LEA     STACK,SP
00001004                            35  START:            
00001004  4EB9 00001028             36              JSR     INTRO                 
0000100A  4EB9 00001058             37  PROGLP      JSR     START_ADDR
00001010  4EB9 000010AA             38              JSR     END_ADDR
00001016  43F9 000035CE             39              LEA     ENDLINE_M,A1           * Add a new line
0000101C  103C 000E                 40              MOVE.B  #14, D0                  * Display A1
00001020  4E4F                      41              TRAP    #15
00001022                            42              
00001022  4EF9 00001268             43              JMP     MAIN
00001028                            44              
00001028                            45  *---------------------------------------------------------------------------*
00001028                            46  * INTRO: Display the introduction of the program
00001028                            47  *---------------------------------------------------------------------------*
00001028  43F9 000030EC             48  INTRO       LEA     WELCOME,A1              * Load PROMPT_START
0000102E  103C 000E                 49              MOVE.B  #14,D0                  * Display A1
00001032  4E4F                      50              TRAP    #15
00001034  4E75                      51              RTS
00001036                            52  TESTING
00001036                            53              *ADD.B  D1,A1           *DOESN'T WORK WITH ADD.B, BUT WITH ADD.W/ADD.L IT DOES
00001036                            54              *ADD.B  A2,D2           *DOESN'T WORK WITH ADD.B
00001036  D613                      55              ADD.B  (A3),D3
00001038  D81C                      56              ADD.B  (A4)+,D4
0000103A  DA25                      57              ADD.B  -(A5),D5
0000103C  DC38 3331                 58              ADD.B  $3331,D6
00001040  DE39 44444441             59              ADD.B  $44444441,D7
00001046                            60  
00001046                            61              *ADD.B  A1,D1
00001046                            62              *ADD.B  D2,A2   
00001046  D713                      63              ADD.B  D3,(A3)
00001048  D91C                      64              ADD.B  D4,(A4)+
0000104A  DB25                      65              ADD.B  D5,-(A5)
0000104C  DD38 3331                 66              ADD.B  D6,$3331
00001050  DF39 44444441             67              ADD.B  D7,$44444441
00001056                            68              
00001056  4E75                      69              RTS
00001058                            70  *---------------------------------------------------------------------------*
00001058                            71  * START_ADDR: Compute the starting address
00001058                            72  *---------------------------------------------------------------------------*
00001058                            73  START_ADDR
00001058                            74              * Output
00001058  43F9 000033C1             75              LEA     PROMPT_START,A1         * Load PROMPT_START 
0000105E  103C 000E                 76              MOVE.B  #14,D0                  * Display PROMPT_START
00001062  4E4F                      77              TRAP    #15
00001064                            78      
00001064                            79              * Input
00001064  43F9 00003526             80              LEA     VR_S_ADDR,A1            * Load VR_S_ADDR
0000106A  103C 0002                 81              MOVE.B  #2,D0                   * Ask user for input
0000106E  4E4F                      82              TRAP    #15
00001070                            83              
00001070                            84              * Error Checking (length)
00001070  0C01 0000                 85              CMPI.B  #0, D1                  * Check if input length <= 0
00001074  6F00 0098                 86              BLE     ERROR_1
00001078  0C01 0008                 87              CMPI.B  #8, D1                  * Check if input length > 8
0000107C  6E00 0090                 88              BGT     ERROR_1
00001080                            89              
00001080                            90              * Conversion & Storage
00001080  4EB9 0000115E             91              JSR     ASCII2HEX               * Jump to ASCII2HEX
00001086  0C07 0001                 92              CMPI.B  #1, D7                  * Check for error
0000108A  6700 0082                 93              BEQ     ERROR_1                 
0000108E  23C1 000035C6             94              MOVE.L  D1, S_ADDR_HX           * Move the result to S_ADDR_HX 
00001094                            95              
00001094                            96              * Error Checking (Odd)
00001094  43F9 000035C6             97              LEA     S_ADDR_HX, A1           * Load 'S_ADDR_HX' for odd error
0000109A  4EB9 0000124C             98              JSR     IS_ODD                  * Check if the input address is odd
000010A0  0C07 0001                 99              CMPI.B  #1, D7                  * Check for error
000010A4  6700 0088                100              BEQ     ERROR_3
000010A8                           101              
000010A8                           102              * Return
000010A8  4E75                     103              RTS     
000010AA                           104  *---------------------------------------------------------------------------*
000010AA                           105  * END_ADDR: Compute the ending address
000010AA                           106  *---------------------------------------------------------------------------*
000010AA                           107  END_ADDR
000010AA                           108              * Output
000010AA  43F9 000033F0            109              LEA     PROMPT_END,A1           * Load PROMPT_END
000010B0  103C 000E                110              MOVE.B  #14,D0                  * Display PROMPT_END
000010B4  4E4F                     111              TRAP    #15
000010B6                           112  
000010B6                           113              * Input
000010B6  43F9 00003576            114              LEA     VR_E_ADDR,A1            * Load VR_E_ADDR
000010BC  103C 0002                115              MOVE.B  #2,D0                   * Ask user for input
000010C0  4E4F                     116              TRAP    #15
000010C2                           117              
000010C2                           118              * Error Checking (length)
000010C2  0C01 0000                119              CMPI.B  #0, D1                  * Check if input length <= 0
000010C6  6F00 0056                120              BLE     ERROR_2
000010CA  0C01 0008                121              CMPI.B  #8, D1                  * Check if input length > 8
000010CE  6E00 004E                122              BGT     ERROR_2
000010D2                           123              
000010D2                           124              * Conversion & Storage
000010D2  4EB9 0000115E            125              JSR     ASCII2HEX               * Jump to ASCII2HEX
000010D8  0C07 0001                126              CMPI.B  #1, D7                  * Check for error
000010DC  6700 0040                127              BEQ     ERROR_2
000010E0  23C1 000035CA            128              MOVE.L  D1, E_ADDR_HX           * Move the result to E_ADDR_HX
000010E6                           129              
000010E6                           130              * Error Checking (start > end case)
000010E6  2439 000035C6            131              MOVE.L  S_ADDR_HX, D2           * Move the starting address to D2
000010EC  B282                     132              CMP.L   D2, D1                  * Compare starting and ending address
000010EE  6300 005E                133              BLS     ERROR_5                 * Go to ERROR_5 if ending < starting
000010F2                           134              
000010F2                           135              * Error Checking (Odd case)
000010F2  43F9 000035CA            136              LEA     E_ADDR_HX, A1           * Move the ending address
000010F8  4EB9 0000124C            137              JSR     IS_ODD                  * Go to IS_ODD for odd address checking
000010FE  0C07 0001                138              CMPI.B  #1, D7                  * Check for an error flag
00001102  6700 003A                139              BEQ     ERROR_4
00001106                           140              
00001106                           141              * Inputs are valid
00001106  2A79 000035C6            142              MOVE.L  S_ADDR_HX, A5           * Store the valid input in A5
0000110C                           143              
0000110C  4E75                     144              RTS
0000110E                           145              
0000110E                           146  *---------------------------------------------------------------------------*
0000110E                           147  * ERROR_1: Address error (Invalid starting address)
0000110E                           148  *---------------------------------------------------------------------------*
0000110E                           149  ERROR_1
0000110E  43F9 000034B5            150              LEA     ERRMSG_1, A1            * Load ERRMSG_1
00001114  103C 000E                151              MOVE.B  #14, D0                 * Display ERRMSG_1
00001118  4E4F                     152              TRAP    #15
0000111A  4EF8 1058                153              JMP     START_ADDR              * Jump to START_ADDR
0000111E                           154      
0000111E                           155  *---------------------------------------------------------------------------*
0000111E                           156  * ERROR_2: Address error (Invalid ending address)
0000111E                           157  *---------------------------------------------------------------------------*
0000111E                           158  ERROR_2
0000111E  43F9 000034B5            159              LEA     ERRMSG_1, A1            * Load ERRMSG_1
00001124  103C 000E                160              MOVE.B  #14, D0                 * Display ERRMSG_1
00001128  4E4F                     161              TRAP    #15
0000112A  4EF8 10AA                162              JMP     END_ADDR                * Jump to END_ADDR
0000112E                           163  
0000112E                           164  *---------------------------------------------------------------------------*
0000112E                           165  * ERROR_3: Address error (Odd starting address)
0000112E                           166  *---------------------------------------------------------------------------*
0000112E                           167  ERROR_3
0000112E  43F9 000034D4            168              LEA     ERRMSG_3, A1
00001134  103C 000E                169              MOVE.B  #14, D0
00001138  4E4F                     170              TRAP    #15
0000113A  4EF8 1058                171              JMP     START_ADDR
0000113E                           172     
0000113E                           173  *---------------------------------------------------------------------------*
0000113E                           174  * ERROR_4: Address error (Odd ending address)
0000113E                           175  *---------------------------------------------------------------------------*         
0000113E                           176  ERROR_4
0000113E  43F9 000034D4            177              LEA     ERRMSG_3, A1
00001144  103C 000E                178              MOVE.B  #14, D0
00001148  4E4F                     179              TRAP    #15
0000114A  4EF8 10AA                180              JMP     END_ADDR
0000114E                           181            
0000114E                           182  *---------------------------------------------------------------------------*
0000114E                           183  * ERROR_3: Address error (Ending address is less than starting address)
0000114E                           184  *---------------------------------------------------------------------------*
0000114E                           185  ERROR_5
0000114E  43F9 000034F9            186              LEA     ERRMSG_5, A1
00001154  103C 000E                187              MOVE.B  #14, D0
00001158  4E4F                     188              TRAP    #15
0000115A  4EF8 10AA                189              JMP     END_ADDR
0000115E                           190    
0000115E                           191  *---------------------------------------------------------------------------*
0000115E                           192  * ASCII2HEX: Convert ASCii to Hexadecimal
0000115E                           193  * Reserved registers: A1 = Source, D1 = Destination, D2 = Byte, D7 = Error
0000115E                           194  *---------------------------------------------------------------------------*
0000115E  4281                     195  ASCII2HEX   CLR.L   D1                      * Clear the destination 
00001160  4287                     196              CLR.L   D7                      * Set the error flag to 0
00001162  4282                     197              CLR.L   D2                      * Clear D2 for temp storage
00001164                           198              
00001164  1419                     199  ASC2HXLP    MOVE.B  (A1)+, D2               * Read a byte to D2
00001166  0C02 0000                200              CMPI.B  #0, D2                  * Check for NULL (indicates the end of source)
0000116A  6700 0058                201              BEQ     RETURN                  * If it's NULL, go to return
0000116E  0C02 0066                202              CMPI.B  #102, D2                * Decimal ASCII value of f is 102
00001172  6E00 004C                203              BGT     ASC_ERR                 * ASCII > f (invalid input) 
00001176  0C02 0061                204              CMPI.B  #97, D2                 * Decimal ASCII value of a is 97
0000117A  6C00 0026                205              BGE     ASC_LOW                 * ASCII >= a (valid input)
0000117E  0C02 0046                206              CMPI.B  #70, D2                 * Decimal ASCII value of F is 70
00001182  6E00 003C                207              BGT     ASC_ERR                 * ASCII > F (invalid input)
00001186  0C02 0041                208              CMPI.B  #65, D2                 * Decimal ASCII value of A is 65
0000118A  6C00 001E                209              BGE     ASC_UPP                 * ASCII >= A (valid input)
0000118E  0C02 0039                210              CMPI.B  #57, D2                 * Decimal value of 9 is 57
00001192  6E00 002C                211              BGT     ASC_ERR                 * ASCII > 9 (invalid input)
00001196  0C02 0030                212              CMPI.B  #48, D2                 * Decimal ASCII value of 0 is 48
0000119A  6C00 0016                213              BGE     ASC_NUM                 * ASCII >= 0 (valid input)
0000119E  6000 0020                214              BRA     ASC_ERR                 * Invalid input
000011A2                           215  
000011A2  0442 0057                216  ASC_LOW     SUBI    #87, D2                 * Convert the ASCII input to Hex
000011A6  6000 0012                217              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011AA                           218              
000011AA  0442 0037                219  ASC_UPP     SUBI    #55, D2                 * Convert the ASCII input to Hex
000011AE  6000 000A                220              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011B2                           221              
000011B2  0442 0030                222  ASC_NUM     SUBI    #48, D2                 * Convert the ASCII input to Hex
000011B6  6000 0002                223              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011BA                           224              
000011BA  E981                     225  ASC_SFT     ASL.L   #4, D1                  * Shift the dest to left by 4 bits
000011BC  D202                     226              ADD.B   D2, D1                  * Add the converted input to D1
000011BE  60A4                     227              BRA     ASC2HXLP                * Loop
000011C0                           228  
000011C0  1E3C 0001                229  ASC_ERR     MOVE.B  #1, D7                  * Set the error flag to 1            
000011C4  4E75                     230  RETURN      RTS     
000011C6                           231  
000011C6                           232  *---------------------------------------------------------------------------*
000011C6                           233  * HEX2ASCII: Convert Hexadecimal to ASCii 
000011C6                           234  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
000011C6                           235  *---------------------------------------------------------------------------*
000011C6  0C02 0008                236  HEX2ASCII   CMPI.B  #8, D2                  * Check to see if the size is long
000011CA  6700 000E                237              BEQ     HEX_LOOP
000011CE  4841                     238              SWAP    D1
000011D0  0C02 0002                239              CMPI.B  #2,D2
000011D4  6600 0004                240              BNE     HEX_LOOP
000011D8  E189                     241              LSL.L   #8,D1
000011DA                           242             
000011DA  E999                     243  HEX_LOOP    ROL.L   #4, D1                  * Roll D1 to left
000011DC  2601                     244              MOVE.L  D1, D3                  * Move D1 to D3
000011DE  0283 0000000F            245              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
000011E4  0C03 0009                246              CMPI.B  #9, D3                  * Compare te digit
000011E8  6E00 000A                247              BGT     HEX_CHAR              
000011EC  0603 0030                248              ADDI.B  #48,D3                  * Add 48 for numerical output
000011F0  6000 0006                249              BRA     HEX_CONT
000011F4                           250              
000011F4  0603 0037                251  HEX_CHAR    ADDI.B  #55,D3                  * Add 55 for character output
000011F8                           252  
000011F8  12C3                     253  HEX_CONT    MOVE.B  D3, (A1)+               * Place into A1
000011FA  5342                     254              SUBI    #1, D2                  * Decrement the size
000011FC  0C02 0000                255              CMPI.B  #0, D2                  * Check if D2 is 0
00001200  66D8                     256              BNE     HEX_LOOP                * Loop
00001202  12BC 0000                257              MOVE.B  #$0,(A1)                * Null terminator
00001206  4E75                     258              RTS
00001208                           259  *---------------------------------------------------------------------------*
00001208                           260  * HEX2ASCII2STACK: Convert Hexadecimal to ASCii 
00001208                           261  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
00001208                           262  *---------------------------------------------------------------------------*
00001208                           263  HEX2ASCII2STACK
00001208  0C02 0008                264              CMPI.B  #8, D2                  * Check to see if the size is long
0000120C  6700 000E                265              BEQ     STACK_HEX_LOOP
00001210  4841                     266              SWAP    D1
00001212  0C02 0002                267              CMPI.B  #2,D2
00001216  6600 0004                268              BNE     STACK_HEX_LOOP
0000121A  E189                     269              LSL.L   #8,D1
0000121C                           270             
0000121C                           271  STACK_HEX_LOOP    
0000121C  E999                     272              ROL.L   #4, D1                  * Roll D1 to left
0000121E  2601                     273              MOVE.L  D1, D3                  * Move D1 to D3
00001220  0283 0000000F            274              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
00001226  0C03 0009                275              CMPI.B  #9, D3                  * Compare te digit
0000122A  6E00 000A                276              BGT     STACK_HEX_CHAR              
0000122E  0603 0030                277              ADDI.B  #48,D3                  * Add 48 for numerical output
00001232  6000 0006                278              BRA     STACK_HEX_CONT
00001236                           279              
00001236                           280  STACK_HEX_CHAR    
00001236  0603 0037                281              ADDI.B  #55,D3                  * Add 55 for character output
0000123A                           282  
0000123A                           283  STACK_HEX_CONT    
0000123A  6100 1E20                284              BSR     PUSH_STACK              *PLACE INTO STACK
0000123E  5342                     285              SUBI    #1, D2                  * Decrement the size
00001240  0C02 0000                286              CMPI.B  #0, D2                  * Check if D2 is 0
00001244  66D6                     287              BNE     STACK_HEX_LOOP                * Loop
00001246  12BC 0000                288              MOVE.B  #$0,(A1)                * Null terminator
0000124A  4E75                     289              RTS
0000124C                           290  
0000124C                           291  
0000124C                           292  *---------------------------------------------------------------------------*
0000124C                           293  * IS_ODD: Check whether the source address is odd
0000124C                           294  * Reserved registers: A1 = Source, D1 = Result, D7 = error flag
0000124C                           295  *---------------------------------------------------------------------------*
0000124C  4281                     296  IS_ODD      CLR.L   D1                      * Clear the result
0000124E  4287                     297              CLR.L   D7                      * Set the error flag to 0
00001250  2211                     298              MOVE.L  (A1),D1                * Temp store the checking address to D1
00001252  82FC 0002                299              DIVU    #2, D1                  * Divide the result by 2
00001256  4841                     300              SWAP    D1                      * Swap remainder with quotient
00001258  0C01 0001                301              CMPI.B  #1, D1                  * Check for error
0000125C  6700 0004                302              BEQ     IS_ODD_ERR
00001260  4E75                     303              RTS
00001262                           304              
00001262  1E3C 0001                305  IS_ODD_ERR  MOVE.B  #1, D7
00001266  4E75                     306              RTS
00001268                           307  
00001268                           308  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*
00001268                           309  * MAIN                    
00001268                           310  * A2: STACK POINTER                                                      MAIN                                                                        MAIN
00001268                           311  * A5: Processing address
00001268                           312  *
00001268                           313  * D3: USED FOR PUSHING INTO STACK
00001268                           314  *     To push into stack => MOVE.W #DATA,D3 
00001268                           315  *                           BSR    PUSH_STACK
00001268                           316  *     To print stack     => BSR    PRINT_STACK 
00001268                           317  *     To clear stack     => BSR    CLEAR_STACK
00001268                           318  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*  
00001268                           319  MAIN        
00001268                           320              *initialize stack pointer
00001268  33FC 0000 0000397E       321              MOVE.W  #0,COUNTER
00001270  347C 7000                322              MOVEA.W #STACK,A2
00001274  163C 0020                323              MOVE.B  #' ',D3
00001278  6100 1DE2                324              BSR     PUSH_STACK
0000127C  6100 1DDE                325              BSR     PUSH_STACK
00001280  6100 1DDA                326              BSR     PUSH_STACK
00001284                           327              
00001284                           328              * clear registers for temp storage
00001284  4280                     329              CLR.L   D0                   
00001286  4281                     330              CLR.L   D1                   
00001288  227C 00000000            331              MOVEA.L #0, A1                
0000128E                           332              
0000128E  220D                     333              MOVE.L  A5,D1                   * check to see if the address is fully read
00001290  23CD 000035C6            334              MOVE.L  A5,S_ADDR_HX
00001296  B2B9 000035CA            335              CMP.L   E_ADDR_HX,D1
0000129C  6C00 14DE                336              BGE     REPEAT                  * go to repeat for user action
000012A0                           337  
000012A0  43F9 00003621            338              LEA     TMPOUTPUT,A1            * allocate storage to hold output
000012A6  143C 0008                339              MOVE.B  #8,D2                   * set the output size
000012AA  4EB8 11C6                340              JSR     HEX2ASCII               
000012AE  43F9 00003621            341              LEA     TMPOUTPUT,A1
000012B4  103C 000E                342              MOVE.B  #14,D0
000012B8  4E4F                     343              TRAP    #15
000012BA                           344              
000012BA  4285                     345              CLR.L    D5                      * clear the processing data
000012BC  3A1D                     346              MOVE.W  (A5)+,D5                 * copy the currently processing data in A5 over to D5
000012BE                           347                                               * advance the current instruction pointer to the next
000012BE                           348                                               * instruction in memory
000012BE                           349  *----------------------------------------*
000012BE                           350  * Registers          
000012BE                           351  * [D1] - COPY OF D5
000012BE                           352  * [D5] - DATA TO BE PROCESSED
000012BE                           353  * [D6] - COUNTER FOR LINES PROCESSED
000012BE                           354  *
000012BE                           355  * [D4]      - ERROR FLAG BEFORE PRINTING
000012BE                           356  * [STACK]   - PRINTS PROCESS DATA
000012BE                           357  * [COUNTER] - KEEPS TRACK OF STACK INCREMENT
000012BE                           358  *
000012BE                           359  * [A1] - USED FOR JUMPING/PRINTING
000012BE                           360  *
000012BE                           361  *----------------------------------------*
000012BE                           362  
000012BE                           363              
000012BE                           364              *Processing the first 4 most significant bits 
000012BE  2205                     365              MOVE.L  D5,D1                    * copy the current processing data to D1
000012C0  143C 000C                366              MOVE.B  #12,D2                   * shift to right by 12 bits
000012C4  E469                     367              LSR.W   D2,D1                    * [D2] Temporarily used D2 for shifting bits
000012C6  C2FC 0006                368              MULU    #6,D1                    * form offset
000012CA  43F9 00001338            369              LEA     JMPTABLE,A1              * index into table
000012D0  4EB1 1000                370              JSR     0(A1,D1)                 * jump indirect with index
000012D4                           371              
000012D4                           372              *SECURED EA*
000012D4  B83C 0001                373              CMP.B   #1,D4                    * ERROR FLAG CHECK [ERROR WHEN D4 == 1]
000012D8  6600 0012                374              BNE     OUTPUT_PROCESSED_DATA    * PRINTS PROCESSED OP-CODE & EA
000012DC  6100 01E8                375              BSR     OP_DATA                  * PRINT ERROR MESSAGE "DATA"
000012E0  6100 1DE6                376              BSR     CLEAR_STACK              * CLEARS THE STACK 
000012E4  183C 0000                377              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
000012E8  6000 0022                378              BRA     DISPLAY_30_LINES         * GO TO LAST STEP
000012EC                           379             
000012EC                           380  OUTPUT_PROCESSED_DATA       
000012EC  163C 000D                381              MOVE.B  #$D,D3                  *carriage return
000012F0  6100 1D6A                382              BSR     PUSH_STACK
000012F4  163C 000A                383              MOVE.B  #$A,D3                  *new line feed
000012F8  6100 1D62                384              BSR     PUSH_STACK
000012FC  163C 0000                385              MOVE.B  #$0,D3                  *null
00001300  6100 1D5A                386              BSR     PUSH_STACK
00001304                           387       
00001304  6100 1D32                388              BSR     PRINT_QUEUE
00001308  183C 0000                389              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
0000130C                           390  DISPLAY_30_LINES
0000130C                           391              * display 30 lines per page
0000130C  5206                     392              ADDI.B  #1,D6
0000130E  0C06 001E                393              CMPI.B  #30,D6
00001312  6C00 0006                394              BGE     NEXTLINES
00001316  6000 FF50                395              BRA     MAIN
0000131A                           396            
0000131A                           397  *---------------------------------------------------------------------------*
0000131A                           398  * NEXTLINES: receive input from user to print the next 30 lines
0000131A                           399  *---------------------------------------------------------------------------*  
0000131A  4206                     400  NEXTLINES   CLR.B   D6
0000131C  43F9 0000341D            401              LEA     DISP_NEXT,A1
00001322  103C 000E                402              MOVE.B  #14,D0
00001326  4E4F                     403              TRAP    #15
00001328  43F9 000035D1            404              LEA     TMPINPUT,A1
0000132E  103C 0002                405              MOVE.B  #2,D0
00001332  4E4F                     406              TRAP    #15
00001334  4EF8 1268                407              JMP     MAIN
00001338                           408    
00001338                           409  *---------------------------------------------------------------------------*
00001338                           410  * JMPTABLE: OP code jump/branch table used to decode and display opcodes
00001338                           411  *---------------------------------------------------------------------------*  
00001338  4EF9 00001398            412  JMPTABLE    JMP     OP0000  * CMPI/ORI/BTST/EORI/SUBI/BTST
0000133E  4EF9 000015BE            413              JMP     OP0001  * MOVE.B                                        *WORKING ON - JOSEPH
00001344  4EF9 0000162C            414              JMP     OP0010  * MOVE.L/MOVEA.L
0000134A  4EF9 0000172A            415              JMP     OP0011  * MOVE.W/MOVEA.W
00001350  4EF9 00001826            416              JMP     OP0100  * MOVEM/LEA/NEG/NOT/JSR/RTS
00001356  4EF9 000019C0            417              JMP     OP0101  * ADDQ
0000135C  4EF9 00001A3C            418              JMP     OP0110  * BRA/Bcc (BEQ/BNE/BLT/BHI)
00001362  4EF9 00001ACA            419              JMP     OP0111  * MOVEQ (unassigned)
00001368  4EF9 00001ACE            420              JMP     OP1000  * DIVS
0000136E  4EF9 00001B0A            421              JMP     OP1001  * SUB/SUBA
00001374  4EF9 00001BE2            422              JMP     OP1010  * Unassigned 
0000137A  4EF9 00001BE6            423              JMP     OP1011  * CMP/EOR/CMPA
00001380  4EF9 00001CE2            424              JMP     OP1100  * MULS/AND
00001386  4EF9 00001D7E            425              JMP     OP1101  * ADD/ADDA
0000138C  4EF9 0000205C            426              JMP     OP1110  * LSR/LSL/ASR/ASL/ROL/ROR
00001392  4EF9 0000230A            427              JMP     OP1111  * Special/Reserved
00001398                           428              
00001398                           429  *---------------------------------------------------------------------------*
00001398                           430  * OP0000: decode CMPI/ORI/BTST/SUBI/EORI
00001398                           431  *---------------------------------------------------------------------------*           
00001398                           432  OP0000                                                                                  
00001398  4281                     433              CLR.L   D1          * to temporarily store the address to process
0000139A  4280                     434              CLR.L   D0  
0000139C  4284                     435              CLR.L   D4                 
0000139E  227C 00000000            436              MOVEA.L #0, A1                
000013A4                           437              * Check for ORI (0000 0000 xx (size) xxx (EA mode) xxx(EA reg)
000013A4                           438              * Check if bit 11,10,9,8 are 0000)
000013A4  2205                     439              MOVE.L  D5,D1
000013A6  0281 00000F00            440              ANDI.L  #$0F00,D1
000013AC  0C81 00000000            441              CMPI.L  #$0000,D1   * if they are 0000, it is ORI
000013B2  6700 01B4                442              BEQ     OP_ORI
000013B6                           443  
000013B6                           444              * check for CMPI (0000 1100 xx (size) xxx (EA mode) xxx (EA reg)
000013B6                           445              * check if bit 11,10,9,8 are 1100
000013B6  4281                     446              CLR.L   D1
000013B8  2205                     447              MOVE.L  D5,D1
000013BA  0281 00000F00            448              ANDI.L  #$0F00,D1
000013C0  0C81 00000C00            449              CMPI.L  #$0C00,D1
000013C6  6700 014A                450              BEQ     OP_CMPI
000013CA                           451              
000013CA                           452              * check for SUBI
000013CA  4281                     453              CLR.L   D1
000013CC  2205                     454              MOVE.L  D5,D1
000013CE  0281 00000F00            455              ANDI.L  #$0F00,D1
000013D4  0C81 00000400            456              CMPI.L  #$0400,D1
000013DA  6700 0094                457              BEQ     OP_SUBI
000013DE                           458              
000013DE                           459              * check for EORI
000013DE  4281                     460              CLR.L   D1
000013E0  2205                     461              MOVE.L  D5,D1
000013E2  0281 00000F00            462              ANDI.L  #$0F00,D1
000013E8  0C81 00000A00            463              CMPI.L  #$0A00,D1
000013EE  6700 002A                464              BEQ     OP_EORI
000013F2                           465              
000013F2                           466              * check for BTST
000013F2  4281                     467              CLR.L   D1
000013F4  2205                     468              MOVE.L  D5,D1
000013F6  EA99                     469              ROR.L   #5,D1
000013F8  0281 00000008            470              ANDI.L  #$8,D1
000013FE  0C01 0008                471              CMPI.B  #8,D1
00001402  6700 0008                472              BEQ     OP_BTST
00001406                           473  
00001406                           474              * OP0000 series other than ORI/CMPI/BTST/EORI
00001406  4EF9 000014C6            475              JMP     OP_DATA
0000140C                           476              
0000140C                           477  *---------------------------------------------------------------------------*
0000140C                           478  * OP_BTST: display BTST
0000140C                           479  *---------------------------------------------------------------------------* 
0000140C  43F9 000036AA            480  OP_BTST     LEA     DISP_BTST,A1
00001412  103C 000E                481              MOVE.B  #14,D0
00001416  4E4F                     482              TRAP    #15
00001418  4E75                     483              RTS
0000141A                           484  
0000141A                           485  *---------------------------------------------------------------------------*
0000141A                           486  * OP_EORI: decode and display EORI
0000141A                           487  *---------------------------------------------------------------------------* 
0000141A                           488  OP_EORI
0000141A  4281                     489              CLR.L   D1
0000141C  4284                     490              CLR.L   D4
0000141E  2205                     491              MOVE.L  D5,D1
00001420  EC99                     492              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001422  0C01 0000                493              CMPI.B  #0,D1
00001426  6700 0012                494              BEQ     OP_EORI_B    * size is byte
0000142A  0C01 0001                495              CMPI.B  #1,D1
0000142E  6700 001C                496              BEQ     OP_EORI_W    * size is word
00001432  0C01 0002                497              CMPI.B  #2,D1
00001436  6700 0026                498              BEQ     OP_EORI_L    * size is long
0000143A                           499  
0000143A                           500  OP_EORI_B    * size is byte    
0000143A  183C 0000                501              MOVE.B  #0,D4
0000143E  43F9 0000368C            502              LEA     DISP_EORI_B,A1
00001444  103C 000E                503              MOVE.B  #14,D0
00001448  4E4F                     504              TRAP    #15
0000144A  4E75                     505              RTS
0000144C                           506              
0000144C                           507  OP_EORI_W    * size is word
0000144C  183C 0001                508              MOVE.B  #1,D4
00001450  43F9 00003696            509              LEA     DISP_EORI_W,A1
00001456  103C 000E                510              MOVE.B  #14,D0
0000145A  4E4F                     511              TRAP    #15
0000145C  4E75                     512              RTS
0000145E                           513              
0000145E                           514  OP_EORI_L    * size is long
0000145E  183C 0002                515              MOVE.B  #2,D4
00001462  43F9 000036A0            516              LEA     DISP_EORI_L,A1
00001468  103C 000E                517              MOVE.B  #14,D0
0000146C  4E4F                     518              TRAP    #15
0000146E  4E75                     519              RTS
00001470                           520              
00001470                           521  *---------------------------------------------------------------------------*
00001470                           522  * OP_SUBI: decode SUBI.B/.W/.L
00001470                           523  *---------------------------------------------------------------------------* 
00001470                           524  OP_SUBI
00001470  4281                     525              CLR.L   D1
00001472  4284                     526              CLR.L   D4
00001474  2205                     527              MOVE.L  D5,D1
00001476  EC99                     528              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001478  0C01 0000                529              CMPI.B  #0,D1
0000147C  6700 0012                530              BEQ     OP_SUBI_B    * size is byte
00001480  0C01 0001                531              CMPI.B  #1,D1
00001484  6700 001C                532              BEQ     OP_SUBI_W    * size is word
00001488  0C01 0002                533              CMPI.B  #2,D1
0000148C  6700 0026                534              BEQ     OP_SUBI_L    * size is long
00001490                           535  
00001490                           536  OP_SUBI_B    * size is byte    
00001490  183C 0000                537              MOVE.B  #0,D4
00001494  43F9 00003798            538              LEA     DISP_SUBI_B,A1
0000149A  103C 000E                539              MOVE.B  #14,D0
0000149E  4E4F                     540              TRAP    #15
000014A0  4E75                     541              RTS
000014A2                           542              
000014A2                           543  OP_SUBI_W    * size is word
000014A2  183C 0001                544              MOVE.B  #1,D4
000014A6  43F9 000037A2            545              LEA     DISP_SUBI_W,A1
000014AC  103C 000E                546              MOVE.B  #14,D0
000014B0  4E4F                     547              TRAP    #15
000014B2  4E75                     548              RTS
000014B4                           549              
000014B4                           550  OP_SUBI_L    * size is long
000014B4  183C 0002                551              MOVE.B  #2,D4
000014B8  43F9 000037AC            552              LEA     DISP_SUBI_L,A1
000014BE  103C 000E                553              MOVE.B  #14,D0
000014C2  4E4F                     554              TRAP    #15
000014C4  4E75                     555              RTS
000014C6                           556              
000014C6                           557  *---------------------------------------------------------------------------*
000014C6                           558  * OP_DATA : unidentified opcode
000014C6                           559  *---------------------------------------------------------------------------* 
000014C6                           560  OP_DATA
000014C6  4280                     561              CLR.L   D0                   
000014C8  4281                     562              CLR.L   D1     
000014CA  4284                     563              CLR.L   D4                    
000014CC  227C 00000000            564              MOVEA.L #0, A1             
000014D2  4287                     565              CLR.L   D7
000014D4  1E3C 0001                566              MOVE.B  #1,D7                   * error flag is true
000014D8                           567              
000014D8  43F9 000036D0            568              LEA     DISP_DATA,A1
000014DE  103C 000E                569              MOVE.B  #14,D0
000014E2  4E4F                     570              TRAP    #15
000014E4                           571              
000014E4  4EF9 000014EA            572              JMP     EA_DATA
000014EA                           573             
000014EA                           574             
000014EA                           575  *---------------------------------------------------------------------------*
000014EA                           576  * EA_DATA
000014EA                           577  *---------------------------------------------------------------------------*       
000014EA  43F9 00003621            578  EA_DATA     LEA     TMPOUTPUT,A1    * load the temporarily stored output address
000014F0  2205                     579              MOVE.L  D5,D1           * transfer the processing data to D1
000014F2  7404                     580              MOVE.L  #4,D2           * set to word size
000014F4  4EB8 11C6                581              JSR     HEX2ASCII       * prepare output in ascii
000014F8  43F9 00003943            582              LEA     DISP_HEX,A1     * display $ symbol
000014FE  103C 000E                583              MOVE.B  #14,D0      
00001502  4E4F                     584              TRAP    #15
00001504  43F9 00003621            585              LEA     TMPOUTPUT,A1    * display with a new line
0000150A  103C 000D                586              MOVE.B  #13,D0
0000150E  4E4F                     587              TRAP    #15
00001510                           588  
00001510  4E75                     589              RTS
00001512                           590              
00001512                           591  *---------------------------------------------------------------------------*
00001512                           592  * OP_CMPI : decode CMPI and its size
00001512                           593  *---------------------------------------------------------------------------*          
00001512                           594  OP_CMPI
00001512  4281                     595              CLR.L   D1
00001514  4284                     596              CLR.L   D4
00001516  2205                     597              MOVE.L  D5,D1
00001518  EC99                     598              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
0000151A  0C01 0000                599              CMPI.B  #0,D1
0000151E  6700 0012                600              BEQ     OP_CMPI_B    * size is byte
00001522  0C01 0001                601              CMPI.B  #1,D1
00001526  6700 001C                602              BEQ     OP_CMPI_W    * size is word
0000152A  0C01 0002                603              CMPI.B  #2,D1
0000152E  6700 0026                604              BEQ     OP_CMPI_L    * size is long
00001532                           605  
00001532                           606  OP_CMPI_B    * size is byte    
00001532  183C 0000                607              MOVE.B  #0,D4
00001536  43F9 000036B2            608              LEA     DISP_CMPI_B,A1
0000153C  103C 000E                609              MOVE.B  #14,D0
00001540  4E4F                     610              TRAP    #15
00001542  4E75                     611              RTS
00001544                           612              
00001544                           613  OP_CMPI_W    * size is word
00001544  183C 0001                614              MOVE.B  #1,D4
00001548  43F9 000036BC            615              LEA     DISP_CMPI_W,A1
0000154E  103C 000E                616              MOVE.B  #14,D0
00001552  4E4F                     617              TRAP    #15
00001554  4E75                     618              RTS
00001556                           619              
00001556                           620  OP_CMPI_L    * size is long
00001556  183C 0002                621              MOVE.B  #2,D4
0000155A  43F9 000036C6            622              LEA     DISP_CMPI_L,A1
00001560  103C 000E                623              MOVE.B  #14,D0
00001564  4E4F                     624              TRAP    #15
00001566  4E75                     625              RTS
00001568                           626   
00001568                           627  *---------------------------------------------------------------------------*
00001568                           628  * OP_ORI : decode ORI and its size
00001568                           629  *---------------------------------------------------------------------------* 
00001568                           630  OP_ORI      
00001568  4281                     631              CLR.L   D1
0000156A  4284                     632              CLR.L   D4
0000156C  2205                     633              MOVE.L  D5,D1
0000156E  EC99                     634              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001570  0C01 0000                635              CMPI.B  #0,D1
00001574  6700 0012                636              BEQ     OP_ORI_B    * size is byte
00001578  0C01 0001                637              CMPI.B  #1,D1
0000157C  6700 001C                638              BEQ     OP_ORI_W    * size is word
00001580  0C01 0002                639              CMPI.B  #2,D1
00001584  6700 0026                640              BEQ     OP_ORI_L    * size is long
00001588                           641  
00001588                           642  OP_ORI_B    * size is byte    
00001588  183C 0000                643              MOVE.B  #0,D4
0000158C  43F9 00003671            644              LEA     DISP_ORI_B,A1
00001592  103C 000E                645              MOVE.B  #14,D0
00001596  4E4F                     646              TRAP    #15
00001598  4E75                     647              RTS
0000159A                           648              
0000159A                           649  OP_ORI_W    * size is word
0000159A  183C 0001                650              MOVE.B  #1,D4
0000159E  43F9 0000367A            651              LEA     DISP_ORI_W,A1
000015A4  103C 000E                652              MOVE.B  #14,D0
000015A8  4E4F                     653              TRAP    #15
000015AA  4E75                     654              RTS
000015AC                           655              
000015AC                           656  OP_ORI_L    * size is long
000015AC  183C 0002                657              MOVE.B  #2,D4
000015B0  43F9 00003683            658              LEA     DISP_ORI_L,A1
000015B6  103C 000E                659              MOVE.B  #14,D0
000015BA  4E4F                     660              TRAP    #15
000015BC  4E75                     661              RTS
000015BE                           662          
000015BE                           663  *---------------------------------------------------------------------------*
000015BE                           664  * OP0001: MOVE.B
000015BE                           665  *---------------------------------------------------------------------------*
000015BE                           666  OP0001      
000015BE  4EF9 000015C4            667              JMP     OP_MOVE_B   * display MOVE.B
000015C4                           668              
000015C4                           669  *---------------------------------------------------------------------------*
000015C4                           670  * OP_MOVE_B: display MOVE_B and proceed to EA
000015C4                           671  *---------------------------------------------------------------------------*
000015C4                           672  OP_MOVE_B                                                                       
000015C4                           673             
000015C4                           674             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000015C4  13FC 0082 00003982       675             MOVE.B   #$82,DEST_REGISTER_FORMAT
000015CC  13FC 0000 00003983       676             MOVE.B   #$00,SRC_REGISTER_FORMAT
000015D4                           677             
000015D4                           678             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000015D4  13FC 00B9 00003985       679             MOVE.B   #$B9,GET_DST_START_END
000015DC  13FC 0020 00003986       680             MOVE.B   #$20,GET_SRC_START_END
000015E4                           681             
000015E4                           682              *CLEAR D3
000015E4  4283                     683              CLR.L   D3
000015E6                           684              *LOAD STACK WITH THIS OPMODE
000015E6  6100 1A74                685              BSR     PUSH_STACK
000015EA  163C 004D                686              MOVE.B  #'M',D3
000015EE  6100 1A6C                687              BSR     PUSH_STACK
000015F2  163C 004F                688              MOVE.B  #'O',D3
000015F6  6100 1A64                689              BSR     PUSH_STACK
000015FA  163C 0056                690              MOVE.B  #'V',D3
000015FE  6100 1A5C                691              BSR     PUSH_STACK
00001602  163C 0045                692              MOVE.B  #'E',D3
00001606  6100 1A54                693              BSR     PUSH_STACK
0000160A  163C 002E                694              MOVE.B  #'.',D3
0000160E  6100 1A4C                695              BSR     PUSH_STACK
00001612  163C 0042                696              MOVE.B  #'B',D3
00001616  6100 1A44                697              BSR     PUSH_STACK
0000161A                           698              
0000161A  6100 11A2                699              BSR     GET_EA_EA_SRC
0000161E  163C 002C                700              MOVE.B  #',',D3
00001622  6100 1A38                701              BSR     PUSH_STACK
00001626  6100 15C6                702              BSR     GET_EA_EA_DEST
0000162A                           703              
0000162A  4E75                     704              RTS
0000162C                           705              
0000162C                           706             
0000162C                           707  *---------------------------------------------------------------------------*
0000162C                           708  * OP0010: decode MOVE.L/MOVEA.L
0000162C                           709  *---------------------------------------------------------------------------*
0000162C                           710  OP0010      
0000162C  183C 0002                711              MOVE.B  #2,D4
00001630  4280                     712              CLR.L   D0                     
00001632  4281                     713              CLR.L   D1                      
00001634  227C 00000000            714              MOVEA.L #0, A1                 
0000163A                           715              
0000163A  2205                     716              MOVE.L  D5,D1
0000163C  EA99                     717              ROR.L   #5,D1
0000163E  0281 0000000E            718              ANDI.L  #$E,D1
00001644  0C01 0002                719              CMPI.B  #2,D1
00001648  6700 0070                720              BEQ     OP_MOVEA_L
0000164C                           721  
0000164C  4EF9 00001652            722              JMP     OP_MOVE_L
00001652                           723             
00001652                           724  
00001652                           725  *---------------------------------------------------------------------------*
00001652                           726  * OP_MOVE_L: display MOVE_L and proceed to EA
00001652                           727  *---------------------------------------------------------------------------*
00001652                           728  OP_MOVE_L   
00001652                           729             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001652  13FC 0082 00003982       730             MOVE.B   #$82,DEST_REGISTER_FORMAT
0000165A  13FC 0000 00003983       731             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001662                           732             
00001662                           733             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001662  13FC 00B9 00003985       734             MOVE.B   #$B9,GET_DST_START_END
0000166A  13FC 0020 00003986       735             MOVE.B   #$20,GET_SRC_START_END
00001672                           736             
00001672                           737              *CLEAR D3
00001672  4283                     738              CLR.L   D3
00001674                           739              *LOAD STACK WITH THIS OPMODE
00001674  6100 19E6                740              BSR     PUSH_STACK
00001678  163C 004D                741              MOVE.B  #'M',D3
0000167C  6100 19DE                742              BSR     PUSH_STACK
00001680  163C 004F                743              MOVE.B  #'O',D3
00001684  6100 19D6                744              BSR     PUSH_STACK
00001688  163C 0056                745              MOVE.B  #'V',D3
0000168C  6100 19CE                746              BSR     PUSH_STACK
00001690  163C 0045                747              MOVE.B  #'E',D3
00001694  6100 19C6                748              BSR     PUSH_STACK
00001698  163C 002E                749              MOVE.B  #'.',D3
0000169C  6100 19BE                750              BSR     PUSH_STACK
000016A0  163C 004C                751              MOVE.B  #'L',D3
000016A4  6100 19B6                752              BSR     PUSH_STACK
000016A8                           753              
000016A8  6100 1114                754              BSR     GET_EA_EA_SRC
000016AC  163C 002C                755              MOVE.B  #',',D3
000016B0  6100 19AA                756              BSR     PUSH_STACK
000016B4  6100 1538                757              BSR     GET_EA_EA_DEST
000016B8                           758              
000016B8  4E75                     759              RTS
000016BA                           760  
000016BA                           761  
000016BA                           762  *---------------------------------------------------------------------------*
000016BA                           763  * OP_MOVEA_L: display MOVEA_L and proceed to EA
000016BA                           764  *---------------------------------------------------------------------------*
000016BA                           765  OP_MOVEA_L 
000016BA                           766             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000016BA  13FC 00FD 00003982       767             MOVE.B   #$FD,DEST_REGISTER_FORMAT
000016C2  13FC 0000 00003983       768             MOVE.B   #$00,SRC_REGISTER_FORMAT
000016CA                           769             
000016CA                           770             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000016CA  13FC 00B9 00003985       771             MOVE.B   #$B9,GET_DST_START_END
000016D2  13FC 0020 00003986       772             MOVE.B   #$20,GET_SRC_START_END
000016DA                           773             
000016DA                           774              *CLEAR D3
000016DA  4283                     775              CLR.L   D3
000016DC                           776              *LOAD STACK WITH THIS OPMODE
000016DC  6100 197E                777              BSR     PUSH_STACK
000016E0  163C 004D                778              MOVE.B  #'M',D3
000016E4  6100 1976                779              BSR     PUSH_STACK
000016E8  163C 004F                780              MOVE.B  #'O',D3
000016EC  6100 196E                781              BSR     PUSH_STACK
000016F0  163C 0056                782              MOVE.B  #'V',D3
000016F4  6100 1966                783              BSR     PUSH_STACK
000016F8  163C 0045                784              MOVE.B  #'E',D3
000016FC  6100 195E                785              BSR     PUSH_STACK           
00001700  163C 0041                786              MOVE.B  #'A',D3
00001704  6100 1956                787              BSR     PUSH_STACK
00001708  163C 002E                788              MOVE.B  #'.',D3
0000170C  6100 194E                789              BSR     PUSH_STACK
00001710  163C 004C                790              MOVE.B  #'L',D3
00001714  6100 1946                791              BSR     PUSH_STACK
00001718                           792              
00001718  6100 10A4                793              BSR     GET_EA_EA_SRC
0000171C  163C 002C                794              MOVE.B  #',',D3
00001720  6100 193A                795              BSR     PUSH_STACK
00001724  6100 14C8                796              BSR     GET_EA_EA_DEST
00001728                           797              
00001728  4E75                     798              RTS
0000172A                           799  
0000172A                           800              
0000172A                           801  *---------------------------------------------------------------------------*
0000172A                           802  * OP0011: decode MOVE.W/MOVEA.W
0000172A                           803  *---------------------------------------------------------------------------*
0000172A                           804  OP0011      
0000172A  4280                     805              CLR.L   D0                      
0000172C  4281                     806              CLR.L   D1  
0000172E  4284                     807              CLR.L   D4                   
00001730  227C 00000000            808              MOVEA.L #0, A1 
00001736                           809                
00001736  2205                     810              MOVE.L  D5,D1
00001738  EC99                     811              ROR.L   #6,D1
0000173A  0281 00000007            812              ANDI.L  #$07,D1
00001740  0C01 0001                813              CMPI.B  #1,D1
00001744  6700 0070                814              BEQ     OP_MOVEA_W
00001748                           815              
00001748  4EF9 0000174E            816              JMP     OP_MOVE_W
0000174E                           817            
0000174E                           818  *---------------------------------------------------------------------------*
0000174E                           819  * OP_MOVE_W: display MOVE_W and proceed to EA
0000174E                           820  *---------------------------------------------------------------------------*
0000174E                           821  OP_MOVE_W   
0000174E                           822             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
0000174E  13FC 0082 00003982       823             MOVE.B   #$82,DEST_REGISTER_FORMAT
00001756  13FC 0000 00003983       824             MOVE.B   #$00,SRC_REGISTER_FORMAT
0000175E                           825             
0000175E                           826             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
0000175E  13FC 00B9 00003985       827             MOVE.B   #$B9,GET_DST_START_END
00001766  13FC 0020 00003986       828             MOVE.B   #$20,GET_SRC_START_END
0000176E                           829             
0000176E                           830              *CLEAR D3
0000176E  4283                     831              CLR.L   D3
00001770                           832              *LOAD STACK WITH THIS OPMODE
00001770  6100 18EA                833              BSR     PUSH_STACK
00001774  163C 004D                834              MOVE.B  #'M',D3
00001778  6100 18E2                835              BSR     PUSH_STACK
0000177C  163C 004F                836              MOVE.B  #'O',D3
00001780  6100 18DA                837              BSR     PUSH_STACK
00001784  163C 0056                838              MOVE.B  #'V',D3
00001788  6100 18D2                839              BSR     PUSH_STACK
0000178C  163C 0045                840              MOVE.B  #'E',D3
00001790  6100 18CA                841              BSR     PUSH_STACK
00001794  163C 002E                842              MOVE.B  #'.',D3
00001798  6100 18C2                843              BSR     PUSH_STACK
0000179C  163C 0057                844              MOVE.B  #'W',D3
000017A0  6100 18BA                845              BSR     PUSH_STACK
000017A4                           846              
000017A4  6100 1018                847              BSR     GET_EA_EA_SRC
000017A8  163C 002C                848              MOVE.B  #',',D3
000017AC  6100 18AE                849              BSR     PUSH_STACK
000017B0  6100 143C                850              BSR     GET_EA_EA_DEST
000017B4                           851              
000017B4  4E75                     852              RTS
000017B6                           853  
000017B6                           854  *---------------------------------------------------------------------------*
000017B6                           855  * OP_MOVEA_W: display MOVEA and proceed to EA
000017B6                           856  *---------------------------------------------------------------------------*
000017B6                           857  OP_MOVEA_W 
000017B6                           858             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000017B6  13FC 00FD 00003982       859             MOVE.B   #$FD,DEST_REGISTER_FORMAT
000017BE  13FC 0000 00003983       860             MOVE.B   #$00,SRC_REGISTER_FORMAT
000017C6                           861             
000017C6                           862             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000017C6  13FC 00B9 00003985       863             MOVE.B   #$B9,GET_DST_START_END
000017CE  13FC 0020 00003986       864             MOVE.B   #$20,GET_SRC_START_END
000017D6                           865             
000017D6                           866              *CLEAR D3
000017D6  4283                     867              CLR.L   D3
000017D8                           868              *LOAD STACK WITH THIS OPMODE
000017D8  6100 1882                869              BSR     PUSH_STACK
000017DC  163C 004D                870              MOVE.B  #'M',D3
000017E0  6100 187A                871              BSR     PUSH_STACK
000017E4  163C 004F                872              MOVE.B  #'O',D3
000017E8  6100 1872                873              BSR     PUSH_STACK
000017EC  163C 0056                874              MOVE.B  #'V',D3
000017F0  6100 186A                875              BSR     PUSH_STACK
000017F4  163C 0045                876              MOVE.B  #'E',D3
000017F8  6100 1862                877              BSR     PUSH_STACK           
000017FC  163C 0041                878              MOVE.B  #'A',D3
00001800  6100 185A                879              BSR     PUSH_STACK
00001804  163C 002E                880              MOVE.B  #'.',D3
00001808  6100 1852                881              BSR     PUSH_STACK
0000180C  163C 0057                882              MOVE.B  #'W',D3
00001810  6100 184A                883              BSR     PUSH_STACK
00001814                           884              
00001814  6100 0FA8                885              BSR     GET_EA_EA_SRC
00001818  163C 002C                886              MOVE.B  #',',D3
0000181C  6100 183E                887              BSR     PUSH_STACK
00001820  6100 13CC                888              BSR     GET_EA_EA_DEST
00001824                           889            
00001824  4E75                     890              RTS
00001826                           891  *---------------------------------------------------------------------------*
00001826                           892  * OP0100: decode MOVEM/LEA/NEG/JSR/RTS/NOT
00001826                           893  *---------------------------------------------------------------------------*
00001826                           894  OP0100
00001826  4280                     895              CLR.L   D0                      
00001828  4281                     896              CLR.L   D1  
0000182A  4284                     897              CLR.L   D4                      
0000182C  227C 00000000            898              MOVEA.L #0, A1                  
00001832  2205                     899              MOVE.L  D5,D1  
00001834                           900              
00001834                           901              * check for RTS
00001834  0C41 4E75                902              CMPI.W  #$4E75,D1   * 0100 1110 0111 0101
00001838  6700 0178                903              BEQ     OP_RTS
0000183C                           904              
0000183C                           905              * check for JSR     * 0100 1110 10 xxx (ea mode) xxx (ea reg)
0000183C  4281                     906              CLR.L   D1 
0000183E  2205                     907              MOVE.L  D5,D1  
00001840  0241 0F00                908              ANDI.W  #$0F00,D1
00001844  0C41 0E00                909              CMPI.W  #$0E00,D1
00001848  6700 0154                910              BEQ     OP_JSR
0000184C                           911  
0000184C                           912              * check for NEG     * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
0000184C  4281                     913              CLR.L   D1 
0000184E  2205                     914              MOVE.L  D5,D1  
00001850  0241 0F00                915              ANDI.W  #$0F00,D1
00001854  0C41 0400                916              CMPI.W  #$0400,D1
00001858  6700 0086                917              BEQ     OP_NEG
0000185C                           918              
0000185C                           919              * check for NOT     * 0100 0110 xx (size) xxx (ea mode) xxx (ea reg)
0000185C  4281                     920              CLR.L   D1 
0000185E  2205                     921              MOVE.L  D5,D1  
00001860  0241 0F00                922              ANDI.W  #$0F00,D1
00001864  0C41 0600                923              CMPI.W  #$0600,D1
00001868  6700 00DE                924              BEQ     OP_NOT
0000186C                           925              
0000186C                           926              * check for LEA     * 0100 xxx (reg) 111 xxx (ea mode) xxx (ea reg)
0000186C  4281                     927              CLR.L   D1 
0000186E  2205                     928              MOVE.L  D5,D1  
00001870  E099                     929              ROR.L   #8,D1
00001872  0C01 0001                930              CMPI.B  #1,D1
00001876  6700 0054                931              BEQ     OP_LEA
0000187A                           932              
0000187A                           933              * check for MOVEM   * 0100 1 x 001 x (size) xxx (ea mode) xxx (ea reg)
0000187A  4281                     934              CLR.L   D1 
0000187C  2205                     935              MOVE.L  D5,D1  
0000187E  EB59                     936              ROL.W   #5,D1
00001880  0C01 0001                937              CMPI.B  #1,D1
00001884  6600 FC40                938              BNE     OP_DATA
00001888  E959                     939              ROL.W   #4,D1
0000188A  0C01 0001                940              CMPI.B  #1,D1
0000188E  6600 FC36                941              BNE     OP_DATA
00001892  E359                     942              ROL.W   #1,D1
00001894  0C01 0000                943              CMPI.B  #0,D1
00001898  6700 000E                944              BEQ     OP_MOVEM_W
0000189C  0C01 0001                945              CMPI.B  #1,D1
000018A0  6700 0018                946              BEQ     OP_MOVEM_L
000018A4  4EF8 14C6                947              JMP     OP_DATA
000018A8                           948  
000018A8                           949  *---------------------------------------------------------------------------*
000018A8                           950  * OP_MOVEM_W: display MOVEM_W
000018A8                           951  *---------------------------------------------------------------------------*    
000018A8                           952  OP_MOVEM_W  
000018A8  183C 0001                953              MOVE.B  #1,D4
000018AC  43F9 00003741            954              LEA     DISP_MOVEM_W,A1
000018B2  103C 000E                955              MOVE.B  #14,D0
000018B6  4E4F                     956              TRAP    #15
000018B8  4E75                     957              RTS
000018BA                           958  
000018BA                           959  *---------------------------------------------------------------------------*
000018BA                           960  * OP_MOVEM_L: display MOVEM_L
000018BA                           961  *---------------------------------------------------------------------------*
000018BA                           962  OP_MOVEM_L  
000018BA  183C 0002                963              MOVE.B  #2,D4
000018BE  43F9 0000374C            964              LEA     DISP_MOVEM_L,A1
000018C4  103C 000E                965              MOVE.B  #14,D0
000018C8  4E4F                     966              TRAP    #15
000018CA  4E75                     967              RTS
000018CC                           968     
000018CC                           969  *---------------------------------------------------------------------------*
000018CC                           970  * OP_LEA: decode and display LEA
000018CC                           971  *---------------------------------------------------------------------------*
000018CC                           972  OP_LEA      
000018CC  43F9 0000373A            973              LEA     DISP_LEA,A1
000018D2  103C 000E                974              MOVE.B  #14,D0
000018D6  4E4F                     975              TRAP    #15
000018D8  4EF9 00002348            976              JMP     EA_MOVEA
000018DE                           977  
000018DE  4E75                     978              RTS
000018E0                           979  
000018E0                           980  *---------------------------------------------------------------------------*
000018E0                           981  * OP_NEG: decode and display NEG 
000018E0                           982  *---------------------------------------------------------------------------*
000018E0                           983  OP_NEG      * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
000018E0  4281                     984              CLR.L   D1
000018E2  4284                     985              CLR.L   D4
000018E4  2205                     986              MOVE.L  D5,D1
000018E6  EC99                     987              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000018E8  0C01 0000                988              CMPI.B  #0,D1
000018EC  6700 0012                989              BEQ     OP_NEG_B    * size is byte
000018F0  0C01 0001                990              CMPI.B  #1,D1
000018F4  6700 0022                991              BEQ     OP_NEG_W    * size is word
000018F8  0C01 0002                992              CMPI.B  #2,D1
000018FC  6700 0032                993              BEQ     OP_NEG_L    * size is long
00001900                           994                         
00001900                           995  OP_NEG_B    * size is byte   
00001900  183C 0000                996              MOVE.B  #0,D4 
00001904  43F9 00003704            997              LEA     DISP_NEG_B,A1
0000190A  103C 000E                998              MOVE.B  #14,D0
0000190E  4E4F                     999              TRAP    #15
00001910                          1000              
00001910  4EB9 0000230E           1001              JSR     EA_NOSRC
00001916  4E75                    1002              RTS
00001918                          1003              
00001918                          1004  OP_NEG_W    * size is word
00001918  183C 0001               1005              MOVE.B  #1,D4
0000191C  43F9 0000370D           1006              LEA     DISP_NEG_W,A1
00001922  103C 000E               1007              MOVE.B  #14,D0
00001926  4E4F                    1008              TRAP    #15
00001928  4EB9 0000230E           1009              JSR     EA_NOSRC
0000192E  4E75                    1010              RTS
00001930                          1011              
00001930                          1012  OP_NEG_L    * size is long
00001930  183C 0002               1013              MOVE.B  #2,D4
00001934  43F9 00003716           1014              LEA     DISP_NEG_L,A1
0000193A  103C 000E               1015              MOVE.B  #14,D0
0000193E  4E4F                    1016              TRAP    #15
00001940  4EB9 0000230E           1017              JSR     EA_NOSRC
00001946                          1018              
00001946  4E75                    1019              RTS
00001948                          1020  
00001948                          1021  *---------------------------------------------------------------------------*
00001948                          1022  * OP_NOT: decode and display NOT 
00001948                          1023  *---------------------------------------------------------------------------*
00001948                          1024  OP_NOT
00001948  4281                    1025              CLR.L   D1
0000194A  4284                    1026              CLR.L   D4
0000194C  2205                    1027              MOVE.L  D5,D1
0000194E  EC99                    1028              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001950  0C01 0000               1029              CMPI.B  #0,D1
00001954  6700 0012               1030              BEQ     OP_NOT_B    * size is byte
00001958  0C01 0001               1031              CMPI.B  #1,D1
0000195C  6700 001C               1032              BEQ     OP_NOT_W    * size is word
00001960  0C01 0002               1033              CMPI.B  #2,D1
00001964  6700 0026               1034              BEQ     OP_NOT_L    * size is long
00001968                          1035                         
00001968                          1036  OP_NOT_B    * size is byte   
00001968  183C 0000               1037              MOVE.B  #0,D4 
0000196C  43F9 0000371F           1038              LEA     DISP_NOT_B,A1
00001972  103C 000E               1039              MOVE.B  #14,D0
00001976  4E4F                    1040              TRAP    #15
00001978  4E75                    1041              RTS
0000197A                          1042              
0000197A                          1043  OP_NOT_W    * size is word
0000197A  183C 0001               1044              MOVE.B  #1,D4
0000197E  43F9 00003728           1045              LEA     DISP_NOT_W,A1
00001984  103C 000E               1046              MOVE.B  #14,D0
00001988  4E4F                    1047              TRAP    #15
0000198A  4E75                    1048              RTS
0000198C                          1049              
0000198C                          1050  OP_NOT_L    * size is long
0000198C  183C 0002               1051              MOVE.B  #2,D4
00001990  43F9 00003731           1052              LEA     DISP_NOT_L,A1
00001996  103C 000E               1053              MOVE.B  #14,D0
0000199A  4E4F                    1054              TRAP    #15
0000199C  4E75                    1055              RTS
0000199E                          1056  
0000199E                          1057  *---------------------------------------------------------------------------*
0000199E                          1058  * OP_JSR: display JSR     
0000199E                          1059  *---------------------------------------------------------------------------*
0000199E  43F9 000036FD           1060  OP_JSR      LEA     DISP_JSR,A1
000019A4  103C 000E               1061              MOVE.B  #14,D0
000019A8  4E4F                    1062              TRAP    #15
000019AA  4EB9 0000230E           1063              JSR     EA_NOSRC
000019B0                          1064  
000019B0  4E75                    1065              RTS
000019B2                          1066  
000019B2                          1067  *---------------------------------------------------------------------------*
000019B2                          1068  * OP_RTS: display RTS     
000019B2                          1069  *---------------------------------------------------------------------------* 
000019B2  43F9 000036F6           1070  OP_RTS      LEA     DISP_RTS,A1
000019B8  103C 000E               1071              MOVE.B  #14,D0
000019BC  4E4F                    1072              TRAP    #15
000019BE  4E75                    1073              RTS
000019C0                          1074  
000019C0                          1075  *---------------------------------------------------------------------------*
000019C0                          1076  * OP0101: decode ADDQ
000019C0                          1077  *---------------------------------------------------------------------------* 
000019C0  4280                    1078  OP0101      CLR.L   D0               * clear registers for temp storage       
000019C2  4281                    1079              CLR.L   D1
000019C4  4284                    1080              CLR.L   D4                  
000019C6  227C 00000000           1081              MOVEA.L #0, A1  
000019CC                          1082              
000019CC  2205                    1083              MOVE.L  D5,D1           * copy the processing data 
000019CE  E089                    1084              LSR.L   #8,D1           * shift to right by 8 bits to check the value of bit 8
000019D0  0201 0001               1085              ANDI.B  #$1,D1          * mask all bits except the last 2 bits
000019D4  0C01 0000               1086              CMPI.B  #0,D1           * if the value is 0, it's ADDQ
000019D8  6700 0006               1087              BEQ     OP_ADDQ
000019DC                          1088              
000019DC  4EF8 14C6               1089              JMP     OP_DATA
000019E0                          1090       
000019E0  4281                    1091  OP_ADDQ     CLR.L   D1
000019E2  2205                    1092              MOVE.L  D5,D1
000019E4  EC99                    1093              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000019E6  0281 00000003           1094              ANDI.L  #$3,D1
000019EC  0C01 0000               1095              CMPI.B  #0,D1
000019F0  6700 0014               1096              BEQ     OP_ADDQ_B    * size is byte
000019F4  0C41 0001               1097              CMPI.W  #1,D1
000019F8  6700 001E               1098              BEQ     OP_ADDQ_W    * size is word
000019FC  0C81 00000002           1099              CMPI.L  #2,D1
00001A02  6700 0026               1100              BEQ     OP_ADDQ_L    * size is long
00001A06                          1101              
00001A06                          1102  *---------------------------------------------------------------------------*
00001A06                          1103  * OP_ADDQ: display ADDQ
00001A06                          1104  *---------------------------------------------------------------------------*              
00001A06                          1105  OP_ADDQ_B    * size is byte   
00001A06  183C 0000               1106              MOVE.B  #0,D4 
00001A0A  43F9 00003757           1107              LEA     DISP_ADDQ_B,A1
00001A10  103C 000E               1108              MOVE.B  #14,D0
00001A14  4E4F                    1109              TRAP    #15
00001A16  4E75                    1110              RTS
00001A18                          1111              
00001A18                          1112  OP_ADDQ_W    * size is word
00001A18  183C 0001               1113              MOVE.B  #1,D4
00001A1C  43F9 00003761           1114              LEA     DISP_ADDQ_W,A1
00001A22  103C 000E               1115              MOVE.B  #14,D0
00001A26  4E4F                    1116              TRAP    #15
00001A28  4E75                    1117              RTS
00001A2A                          1118              
00001A2A                          1119  OP_ADDQ_L    * size is long
00001A2A  183C 0002               1120              MOVE.B  #2,D4
00001A2E  43F9 0000376B           1121              LEA     DISP_ADDQ_L,A1
00001A34  103C 000E               1122              MOVE.B  #14,D0
00001A38  4E4F                    1123              TRAP    #15
00001A3A  4E75                    1124              RTS
00001A3C                          1125  
00001A3C                          1126  *---------------------------------------------------------------------------*
00001A3C                          1127  * OP0110: decode BRA/BEQ/BNE/BLT/BHI
00001A3C                          1128  *---------------------------------------------------------------------------*              
00001A3C  4280                    1129  OP0110      CLR.L   D0                  
00001A3E  4281                    1130              CLR.L   D1   
00001A40  4284                    1131              CLR.L   D4                 
00001A42  227C 00000000           1132              MOVEA.L #0,A1
00001A48  2205                    1133              MOVE.L  D5, D1                
00001A4A  0281 000000FF           1134              ANDI.L  #$00FF, D1              * Get 8-bit displacement 
00001A50  2205                    1135              MOVE.L  D5,D1                  
00001A52  0281 00000F00           1136              ANDI.L  #$0F00,D1
00001A58                          1137                 
00001A58  0C41 0000               1138              CMPI.W  #$0000,D1               * Check for BRA
00001A5C  6700 0050               1139              BEQ     OP_BRA                  
00001A60                          1140                          
00001A60  0C41 0D00               1141              CMPI.W  #$0D00,D1               * Check for BLT
00001A64  6700 0056               1142              BEQ     OP_BLT      
00001A68                          1143  
00001A68  0C41 0700               1144              CMPI.W  #$0700,D1               * Check for BEQ
00001A6C  6700 0032               1145              BEQ     OP_BEQ      
00001A70                          1146  
00001A70  0C41 0600               1147              CMPI.W  #$0600,D1               * Check for BNE
00001A74  6700 001C               1148              BEQ     OP_BNE  
00001A78                          1149              
00001A78  0C41 0200               1150              CMPI.W  #$0200,D1               * Check for BHI
00001A7C  6700 0006               1151              BEQ     OP_BHI
00001A80                          1152  
00001A80  4EF8 14C6               1153              JMP     OP_DATA
00001A84                          1154              
00001A84  43F9 00003926           1155  OP_BHI      LEA     DISP_BHI,A1             
00001A8A  103C 000E               1156              MOVE.B  #14,D0
00001A8E  4E4F                    1157              TRAP    #15
00001A90  4E75                    1158              RTS
00001A92                          1159  
00001A92  43F9 0000391F           1160  OP_BNE      LEA     DISP_BNE,A1             
00001A98  103C 000E               1161              MOVE.B  #14,D0
00001A9C  4E4F                    1162              TRAP    #15
00001A9E  4E75                    1163              RTS
00001AA0                          1164  
00001AA0  43F9 00003918           1165  OP_BEQ      LEA     DISP_BEQ,A1             
00001AA6  103C 000E               1166              MOVE.B  #14,D0
00001AAA  4E4F                    1167              TRAP    #15
00001AAC  4E75                    1168              RTS          
00001AAE                          1169                          
00001AAE  43F9 0000390A           1170  OP_BRA      LEA     DISP_BRA,A1             
00001AB4  103C 000E               1171              MOVE.B  #14,D0
00001AB8  4E4F                    1172              TRAP    #15
00001ABA  4E75                    1173              RTS
00001ABC                          1174              
00001ABC  43F9 00003911           1175  OP_BLT      LEA     DISP_BLT,A1          
00001AC2  103C 000E               1176              MOVE.B  #14,D0
00001AC6  4E4F                    1177              TRAP    #15
00001AC8  4E75                    1178              RTS
00001ACA                          1179     
00001ACA                          1180  *---------------------------------------------------------------------------*
00001ACA                          1181  * OP0111 : MOVEQ not required
00001ACA                          1182  *---------------------------------------------------------------------------*           
00001ACA  4EF8 14C6               1183  OP0111      JMP     OP_DATA
00001ACE                          1184             
00001ACE                          1185  *---------------------------------------------------------------------------*
00001ACE                          1186  * OP1000 : decode DIVS
00001ACE                          1187  *---------------------------------------------------------------------------*           
00001ACE                          1188  OP1000      
00001ACE  4280                    1189              CLR.L   D0                
00001AD0  4281                    1190              CLR.L   D1   
00001AD2  4284                    1191              CLR.L   D4                
00001AD4  207C 00000000           1192              MOVEA.L #0, A0               
00001ADA  227C 00000000           1193              MOVEA.L #0, A1               
00001AE0                          1194              
00001AE0  2205                    1195              MOVE.L  D5,D1
00001AE2  EA89                    1196              LSR.L   #5,D1
00001AE4  0281 0000000E           1197              ANDI.L  #$E,D1
00001AEA                          1198    
00001AEA  0C01 000E               1199              CMPI.B  #$E,D1
00001AEE  6700 0006               1200              BEQ     OP_DIVS
00001AF2                          1201              
00001AF2  4EF8 14C6               1202              JMP     OP_DATA
00001AF6                          1203  
00001AF6                          1204  *---------------------------------------------------------------------------*
00001AF6                          1205  * OP_DIVS: display DIVS and proceed to EA
00001AF6                          1206  *---------------------------------------------------------------------------*  
00001AF6  43F9 00003775           1207  OP_DIVS     LEA     DISP_DIVS,A1
00001AFC  103C 000E               1208              MOVE.B  #14,D0
00001B00  4E4F                    1209              TRAP    #15
00001B02  4EF9 00002322           1210              JMP     EA_ARITH
00001B08                          1211  
00001B08  4E75                    1212              RTS
00001B0A                          1213              
00001B0A                          1214  *---------------------------------------------------------------------------*
00001B0A                          1215  * OP1001: decode SUB/SUBA
00001B0A                          1216  *---------------------------------------------------------------------------*      
00001B0A  4280                    1217  OP1001      CLR.L   D0                
00001B0C  4281                    1218              CLR.L   D1   
00001B0E  4284                    1219              CLR.L   D4                 
00001B10  207C 00000000           1220              MOVEA.L #0, A0                 
00001B16  227C 00000000           1221              MOVEA.L #0, A1               
00001B1C                          1222              
00001B1C  2205                    1223              MOVE.L  D5,D1
00001B1E  EA89                    1224              LSR.L   #5,D1
00001B20  0281 0000000E           1225              ANDI.L  #$E,D1
00001B26                          1226    
00001B26  0C01 0000               1227              CMPI.B  #$0,D1
00001B2A  6700 004A               1228              BEQ     OP_SUB_B
00001B2E  0C01 0002               1229              CMPI.B  #$2,D1
00001B32  6700 005A               1230              BEQ     OP_SUB_W
00001B36  0C01 0004               1231              CMPI.B  #$4,D1
00001B3A  6700 006A               1232              BEQ     OP_SUB_L
00001B3E  0C01 0008               1233              CMPI.B  #$8,D1
00001B42  6700 0032               1234              BEQ     OP_SUB_B
00001B46  0C01 000A               1235              CMPI.B  #$A,D1
00001B4A  6700 0042               1236              BEQ     OP_SUB_W
00001B4E  0C01 000C               1237              CMPI.B  #$C,D1
00001B52  6700 0052               1238              BEQ     OP_SUB_L
00001B56                          1239              
00001B56  4241                    1240              CLR     D1
00001B58  2205                    1241              MOVE.L  D5,D1
00001B5A  EC89                    1242              LSR.L   #6,D1
00001B5C  0281 0000000F           1243              ANDI.L  #$F,D1
00001B62  0C01 0003               1244              CMPI.B  #3,D1
00001B66  6700 0056               1245              BEQ     OP_SUBA_W
00001B6A  0C01 0007               1246              CMPI.B  #7,D1
00001B6E  6700 0060               1247              BEQ     OP_SUBA_L
00001B72                          1248              
00001B72  4EF8 14C6               1249              JMP     OP_DATA
00001B76                          1250    
00001B76                          1251  *---------------------------------------------------------------------------*
00001B76                          1252  * OP_SUB: display SUB and proceed to EA
00001B76                          1253  *---------------------------------------------------------------------------*            
00001B76  43F9 0000377D           1254  OP_SUB_B    LEA     DISP_SUB_B,A1
00001B7C  103C 000E               1255              MOVE.B  #14,D0
00001B80  4E4F                    1256              TRAP    #15
00001B82  183C 0000               1257              MOVE.B  #0,D4
00001B86  4EF9 0000236E           1258              JMP     EA_GEN
00001B8C                          1259  
00001B8C  4E75                    1260              RTS
00001B8E                          1261  
00001B8E  43F9 00003786           1262  OP_SUB_W    LEA     DISP_SUB_W,A1
00001B94  103C 000E               1263              MOVE.B  #14,D0
00001B98  4E4F                    1264              TRAP    #15
00001B9A  183C 0001               1265              MOVE.B  #1,D4
00001B9E  4EF9 0000236E           1266              JMP     EA_GEN
00001BA4                          1267  
00001BA4  4E75                    1268              RTS
00001BA6                          1269  
00001BA6  43F9 0000378F           1270  OP_SUB_L    LEA     DISP_SUB_L,A1
00001BAC  103C 000E               1271              MOVE.B  #14,D0
00001BB0  4E4F                    1272              TRAP    #15
00001BB2  183C 0002               1273              MOVE.B  #2,D4
00001BB6  4EF9 0000236E           1274              JMP     EA_GEN
00001BBC                          1275  
00001BBC  4E75                    1276              RTS
00001BBE                          1277  
00001BBE                          1278  *---------------------------------------------------------------------------*
00001BBE                          1279  * OP_SUBA: display SUBA
00001BBE                          1280  *---------------------------------------------------------------------------*  
00001BBE  43F9 000037B6           1281  OP_SUBA_W   LEA     DISP_SUBA_W,A1
00001BC4  103C 000E               1282              MOVE.B  #14,D0
00001BC8  4E4F                    1283              TRAP    #15
00001BCA  183C 0001               1284              MOVE.B  #1,D4
00001BCE  4E75                    1285              RTS
00001BD0                          1286  
00001BD0  43F9 000037C0           1287  OP_SUBA_L   LEA     DISP_SUBA_L,A1
00001BD6  103C 000E               1288              MOVE.B  #14,D0
00001BDA  4E4F                    1289              TRAP    #15
00001BDC  183C 0002               1290              MOVE.B  #2,D4
00001BE0  4E75                    1291              RTS         
00001BE2                          1292  *---------------------------------------------------------------------------*
00001BE2                          1293  * OP1010 : unassigned
00001BE2                          1294  *---------------------------------------------------------------------------*           
00001BE2  4EF8 14C6               1295  OP1010      JMP     OP_DATA
00001BE6                          1296              
00001BE6                          1297  *---------------------------------------------------------------------------*
00001BE6                          1298  * OP1011 : decode CMP/EOR/CMPA
00001BE6                          1299  *---------------------------------------------------------------------------*           
00001BE6  4280                    1300  OP1011      CLR.L   D0                
00001BE8  4281                    1301              CLR.L   D1            
00001BEA  4284                    1302              CLR.L   D4                   
00001BEC  227C 00000000           1303              MOVEA.L #0, A1               
00001BF2  2205                    1304              MOVE.L  D5,D1
00001BF4  EA99                    1305              ROR.L   #5,D1
00001BF6  0281 0000000E           1306              ANDI.L  #$E,D1
00001BFC  0C01 0000               1307              CMPI.B  #$0,D1
00001C00  6700 0062               1308              BEQ     OP_CMP_B
00001C04  0C01 0002               1309              CMPI.B  #$2,D1
00001C08  6700 0072               1310              BEQ     OP_CMP_W
00001C0C  0C01 0004               1311              CMPI.B  #$4,D1
00001C10  6700 0082               1312              BEQ     OP_CMP_L
00001C14  0C01 0008               1313              CMPI.B  #$8,D1
00001C18  6700 0092               1314              BEQ     OP_EOR_B
00001C1C  0C01 000A               1315              CMPI.B  #$A,D1
00001C20  6700 009C               1316              BEQ     OP_EOR_W
00001C24  0C01 000C               1317              CMPI.B  #$C,D1
00001C28  6700 00A6               1318              BEQ     OP_EOR_L  
00001C2C  0C01 0006               1319              CMPI.B  #$6,D1
00001C30  6700 000E               1320              BEQ     OP_CMPA_W
00001C34  0C01 000E               1321              CMPI.B  #$E,D1
00001C38  6700 0018               1322              BEQ     OP_CMPA_L 
00001C3C                          1323  
00001C3C  4EF8 14C6               1324              JMP     OP_DATA          
00001C40                          1325  
00001C40                          1326  *---------------------------------------------------------------------------*
00001C40                          1327  * OP_CMPA: display CMPA 
00001C40                          1328  *---------------------------------------------------------------------------
00001C40  43F9 00003800           1329  OP_CMPA_W   LEA     DISP_CMPA_W,A1
00001C46  103C 000E               1330              MOVE.B  #14,D0
00001C4A  4E4F                    1331              TRAP    #15
00001C4C  183C 0001               1332              MOVE.B  #1,D4
00001C50  4E75                    1333              RTS
00001C52                          1334  
00001C52  43F9 0000380A           1335  OP_CMPA_L   LEA     DISP_CMPA_L,A1
00001C58  103C 000E               1336              MOVE.B  #14,D0
00001C5C  4E4F                    1337              TRAP    #15
00001C5E  183C 0002               1338              MOVE.B  #2,D4
00001C62  4E75                    1339              RTS
00001C64                          1340  
00001C64                          1341  *---------------------------------------------------------------------------*
00001C64                          1342  * OP_CMP: display CMP and proceed to EA
00001C64                          1343  *---------------------------------------------------------------------------*  
00001C64  43F9 000037E5           1344  OP_CMP_B    LEA     DISP_CMP_B,A1
00001C6A  103C 000E               1345              MOVE.B  #14,D0
00001C6E  4E4F                    1346              TRAP    #15
00001C70  183C 0000               1347              MOVE.B  #0,D4
00001C74  4EF9 0000236E           1348              JMP     EA_GEN
00001C7A                          1349  
00001C7A  4E75                    1350              RTS
00001C7C                          1351              
00001C7C  43F9 000037EE           1352  OP_CMP_W    LEA     DISP_CMP_W,A1
00001C82  103C 000E               1353              MOVE.B  #14,D0
00001C86  4E4F                    1354              TRAP    #15
00001C88  183C 0001               1355              MOVE.B  #1,D4
00001C8C  4EF9 0000236E           1356              JMP     EA_GEN
00001C92                          1357  
00001C92  4E75                    1358              RTS
00001C94                          1359              
00001C94  43F9 000037F7           1360  OP_CMP_L    LEA     DISP_CMP_L,A1
00001C9A  103C 000E               1361              MOVE.B  #14,D0
00001C9E  4E4F                    1362              TRAP    #15
00001CA0  183C 0002               1363              MOVE.B  #2,D4
00001CA4  4EF9 0000236E           1364              JMP     EA_GEN
00001CAA                          1365  
00001CAA  4E75                    1366              RTS
00001CAC                          1367              
00001CAC                          1368  *---------------------------------------------------------------------------*
00001CAC                          1369  * OP_EOR: display EOR
00001CAC                          1370  *---------------------------------------------------------------------------*  
00001CAC  43F9 000037CA           1371  OP_EOR_B    LEA     DISP_EOR_B,A1
00001CB2  103C 000E               1372              MOVE.B  #14,D0
00001CB6  4E4F                    1373              TRAP    #15
00001CB8  183C 0000               1374              MOVE.B  #0,D4
00001CBC  4E75                    1375              RTS
00001CBE                          1376              
00001CBE  43F9 000037D3           1377  OP_EOR_W    LEA     DISP_EOR_W,A1
00001CC4  103C 000E               1378              MOVE.B  #14,D0
00001CC8  4E4F                    1379              TRAP    #15
00001CCA  183C 0001               1380              MOVE.B  #1,D4
00001CCE  4E75                    1381              RTS
00001CD0                          1382              
00001CD0  43F9 000037DC           1383  OP_EOR_L    LEA     DISP_EOR_L,A1
00001CD6  103C 000E               1384              MOVE.B  #14,D0
00001CDA  4E4F                    1385              TRAP    #15
00001CDC  183C 0002               1386              MOVE.B  #2,D4
00001CE0  4E75                    1387              RTS    
00001CE2                          1388  
00001CE2                          1389  *---------------------------------------------------------------------------*
00001CE2                          1390  * OP1100: Decode and display MULS/AND and proceed to EA
00001CE2                          1391  *---------------------------------------------------------------------------* 
00001CE2  4280                    1392  OP1100      CLR.L   D0                 
00001CE4  4281                    1393              CLR.L   D1    
00001CE6  4284                    1394              CLR.L   D4                
00001CE8  227C 00000000           1395              MOVEA.L #0, A1             
00001CEE                          1396              
00001CEE  2205                    1397              MOVE.L  D5,D1
00001CF0  EA89                    1398              LSR.L   #5,D1
00001CF2  0281 0000000E           1399              ANDI.L  #$E,D1
00001CF8  0C41 000E               1400              CMPI.W  #$E,D1
00001CFC  6700 0036               1401              BEQ     OP_MULS
00001D00  0C41 0000               1402              CMPI.W  #$0,D1
00001D04  6700 0042               1403              BEQ     OP_AND_B
00001D08  0C41 0002               1404              CMPI.W  #$2,D1
00001D0C  6700 004C               1405              BEQ     OP_AND_W
00001D10  0C41 0004               1406              CMPI.W  #$4,D1
00001D14  6700 0056               1407              BEQ     OP_AND_L
00001D18  0C41 0008               1408              CMPI.W  #$8,D1
00001D1C  6700 002A               1409              BEQ     OP_AND_B
00001D20  0C41 000A               1410              CMPI.W  #$A,D1
00001D24  6700 0034               1411              BEQ     OP_AND_W
00001D28  0C41 000C               1412              CMPI.W  #$C,D1
00001D2C  6700 003E               1413              BEQ     OP_AND_L
00001D30                          1414  
00001D30  4EF8 14C6               1415              JMP     OP_DATA
00001D34                          1416  
00001D34  43F9 00003814           1417  OP_MULS     LEA     DISP_MULS_W,A1
00001D3A  103C 000E               1418              MOVE.B  #14,D0
00001D3E  4E4F                    1419              TRAP    #15
00001D40  4EF9 00002322           1420              JMP     EA_ARITH
00001D46  4E75                    1421              RTS
00001D48                          1422              
00001D48                          1423  OP_AND_B    
00001D48  43F9 0000381E           1424              LEA     DISP_AND_B,A1
00001D4E  103C 000E               1425              MOVE.B  #14,D0
00001D52  4E4F                    1426              TRAP    #15
00001D54  183C 0000               1427              MOVE.B  #0,D4
00001D58  4E75                    1428              RTS
00001D5A                          1429  
00001D5A                          1430  OP_AND_W
00001D5A  43F9 00003827           1431              LEA     DISP_AND_W,A1
00001D60  103C 000E               1432              MOVE.B  #14,D0
00001D64  4E4F                    1433              TRAP    #15
00001D66  183C 0001               1434              MOVE.B  #1,D4
00001D6A  4E75                    1435              RTS
00001D6C                          1436  
00001D6C                          1437  OP_AND_L
00001D6C  43F9 00003830           1438              LEA     DISP_AND_L,A1
00001D72  103C 000E               1439              MOVE.B  #14,D0
00001D76  4E4F                    1440              TRAP    #15
00001D78  183C 0002               1441              MOVE.B  #2,D4
00001D7C  4E75                    1442              RTS
00001D7E                          1443  
00001D7E                          1444  *---------------------------------------------------------------------------*
00001D7E                          1445  * OP1101: Decode ADD/ADDA
00001D7E                          1446  *---------------------------------------------------------------------------* 
00001D7E  4280                    1447  OP1101      CLR.L   D0                  
00001D80  4281                    1448              CLR.L   D1       
00001D82  4284                    1449              CLR.L   D4                   
00001D84  227C 00000000           1450              MOVEA.L #0, A1              
00001D8A  2205                    1451              MOVE.L  D5,D1       *DATA TO BE PROCESS IN [D1], TRY TO GET OPMODE AND DETERMINE .B/.W/.L
00001D8C                          1452              
00001D8C                          1453              *CLEAR D3
00001D8C  4283                    1454              CLR.L   D3
00001D8E                          1455              *LOAD STACK WITH THIS OPMODE
00001D8E  6100 12CC               1456              BSR     PUSH_STACK
00001D92  163C 004D               1457              MOVE.B  #'M',D3
00001D96  6100 12C4               1458              BSR     PUSH_STACK
00001D9A  163C 004F               1459              MOVE.B  #'O',D3
00001D9E  6100 12BC               1460              BSR     PUSH_STACK
00001DA2  163C 0056               1461              MOVE.B  #'V',D3
00001DA6  6100 12B4               1462              BSR     PUSH_STACK
00001DAA  163C 0045               1463              MOVE.B  #'E',D3                 *CHANGE PRINT
00001DAE  6100 12AC               1464              BSR     PUSH_STACK
00001DB2  163C 002E               1465              MOVE.B  #'.',D3
00001DB6  6100 12A4               1466              BSR     PUSH_STACK
00001DBA                          1467  
00001DBA                          1468            
00001DBA                          1469  OP1101_DETERMINE_DN_EA_OR_EA_DN 
00001DBA  2205                    1470              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]      
00001DBC                          1471              
00001DBC                          1472              *BITS (INDEX 8) 
00001DBC                          1473              *0 = ADD.B/W/L <EA>,Dn
00001DBC                          1474              *1 = ADD.B/W/L Dn,<EA> 
00001DBC  E099                    1475              ROR.L   #8,D1
00001DBE  0281 00000001           1476              ANDI.L  #$01,D1     *MASKS WITH 00000001
00001DC4  0C81 00000000           1477              CMPI.L  #$00,D1     *IF EQUALS <ea>,Dn
00001DCA  6000 0102               1478              BRA     OP1101_EA_DN
00001DCE                          1479              *else procede to Dn_EA
00001DCE                          1480              
00001DCE                          1481  OP1101_DN_EA
00001DCE                          1482              *BITS (7 TO 6) 
00001DCE                          1483              *00 = .B
00001DCE                          1484              *01 = .W
00001DCE                          1485              *10 = .L 
00001DCE  2205                    1486              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00001DD0  EC99                    1487              ROR.L   #6,D1
00001DD2  0281 00000003           1488              ANDI.L  #$03,D1
00001DD8  0C81 00000000           1489              CMPI.L  #$00,D1 *EQUALS .B
00001DDE  6700 0016               1490              BEQ     OP1101_PRINT_B2
00001DE2  0C81 00000001           1491              CMPI.L  #$01,D1 *EQUALS .W
00001DE8  6700 0054               1492              BEQ     OP1101_PRINT_W2
00001DEC  0C81 00000002           1493              CMPI.L  #$02,D1 *EQUALS .L
00001DF2  6700 0092               1494              BEQ     OP1101_PRINT_L2
00001DF6                          1495  OP1101_PRINT_B2
00001DF6  163C 0042               1496              MOVE.B  #'B',D3
00001DFA  6100 1260               1497              BSR     PUSH_STACK
00001DFE                          1498             
00001DFE                          1499              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001DFE  13FC 0002 00003982      1500             MOVE.B   #$02,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001E06  13FC 0002 00003983      1501             MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001E0E                          1502             
00001E0E                          1503             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001E0E  13FC 00B9 00003985      1504             MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001E16  13FC 0020 00003986      1505             MOVE.B   #$20,GET_SRC_START_END
00001E1E                          1506  
00001E1E                          1507              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001E1E  0285 0000FFC7           1508              ANDI.L  #$FFC7,D5   *inverse mask bits 5-3 with 1111(F[15]) 1111(F[15]) 1100(C[12]) 0111(7)
00001E24  0685 00000000           1509              ADDI.L  #$0000,D5   *Add.B  BITS 5-3 TO INDICATE A Dn Register (000) 
00001E2A                          1510       
00001E2A                          1511              
00001E2A  6100 0992               1512              BSR     GET_EA_EA_SRC       *GETS Dn
00001E2E  163C 002C               1513              MOVE.B  #',',D3
00001E32  6100 1228               1514              BSR     PUSH_STACK          
00001E36  6100 0DB6               1515              BSR     GET_EA_EA_DEST      *GETS <ea>
00001E3A                          1516              
00001E3A  6000 0192               1517              BRA     OP1101_ADD_RETURN
00001E3E                          1518  OP1101_PRINT_W2
00001E3E  163C 0057               1519              MOVE.B  #'W',D3
00001E42  6100 1218               1520              BSR     PUSH_STACK
00001E46                          1521  
00001E46                          1522              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001E46  13FC 0002 00003982      1523              MOVE.B   #$02,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001E4E  13FC 0002 00003983      1524              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001E56                          1525             
00001E56                          1526              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001E56  13FC 00B9 00003985      1527              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001E5E  13FC 0020 00003986      1528              MOVE.B   #$20,GET_SRC_START_END
00001E66                          1529  
00001E66                          1530              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001E66  0285 0000FFC7           1531              ANDI.L  #$FFC7,D5   *inverse mask bits 5-3 with 1111(F[15]) 1111(F[15]) 1100(C[12]) 0111(7)
00001E6C  0685 00000000           1532              ADDI.L  #$0000,D5   *Add.B  BITS 5-3 TO INDICATE A Dn Register (000) 
00001E72                          1533        
00001E72                          1534              
00001E72  6100 094A               1535              BSR     GET_EA_EA_SRC       *GETS Dn
00001E76  163C 002C               1536              MOVE.B  #',',D3
00001E7A  6100 11E0               1537              BSR     PUSH_STACK          
00001E7E  6100 0D6E               1538              BSR     GET_EA_EA_DEST      *GETS <ea>
00001E82                          1539  
00001E82                          1540  
00001E82  6000 014A               1541              BRA     OP1101_ADD_RETURN
00001E86                          1542  OP1101_PRINT_L2 
00001E86  163C 004C               1543              MOVE.B  #'L',D3
00001E8A  6100 11D0               1544              BSR     PUSH_STACK
00001E8E                          1545              
00001E8E                          1546              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001E8E  13FC 0002 00003982      1547              MOVE.B   #$02,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001E96  13FC 0002 00003983      1548              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001E9E                          1549             
00001E9E                          1550              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001E9E  13FC 00B9 00003985      1551              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001EA6  13FC 0020 00003986      1552              MOVE.B   #$20,GET_SRC_START_END
00001EAE                          1553  
00001EAE                          1554              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001EAE  0285 0000FFC7           1555              ANDI.L  #$FFC7,D5   *inverse mask bits 5-3 with 1111(F[15]) 1111(F[15]) 1100(C[12]) 0111(7)
00001EB4  0685 00000000           1556              ADDI.L  #$0000,D5   *Add.B  BITS 5-3 TO INDICATE A Dn Register (000) 
00001EBA                          1557              
00001EBA  6100 0902               1558              BSR     GET_EA_EA_SRC       *GETS Dn
00001EBE  163C 002C               1559              MOVE.B  #',',D3
00001EC2  6100 1198               1560              BSR     PUSH_STACK          
00001EC6  6100 0D26               1561              BSR     GET_EA_EA_DEST      *GETS <ea>
00001ECA                          1562  
00001ECA  6000 0102               1563              BRA     OP1101_ADD_RETURN
00001ECE                          1564              
00001ECE                          1565  OP1101_EA_DN           
00001ECE                          1566              *BITS (7 TO 6) 
00001ECE                          1567              *00 = .B
00001ECE                          1568              *01 = .W
00001ECE                          1569              *10 = .L 
00001ECE  2205                    1570              MOVE.L  D5,D1       *GET CLEAN COPY OF DATA INTO [D1]  
00001ED0  EC99                    1571              ROR.L   #6,D1
00001ED2  0281 00000003           1572              ANDI.L  #$03,D1
00001ED8  0C81 00000000           1573              CMPI.L  #$00,D1 *EQUALS .B
00001EDE  6700 0016               1574              BEQ     OP1101_PRINT_B
00001EE2  0C81 00000001           1575              CMPI.L  #$01,D1 *EQUALS .W
00001EE8  6700 0054               1576              BEQ     OP1101_PRINT_W
00001EEC  0C81 00000002           1577              CMPI.L  #$02,D1 *EQUALS .L
00001EF2  6700 0092               1578              BEQ     OP1101_PRINT_L
00001EF6                          1579  OP1101_PRINT_B
00001EF6  163C 0042               1580              MOVE.B  #'B',D3
00001EFA  6100 1160               1581              BSR     PUSH_STACK
00001EFE                          1582                
00001EFE                          1583              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001EFE  13FC 0002 00003982      1584              MOVE.B   #$02,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001F06  13FC 0002 00003983      1585              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001F0E                          1586             
00001F0E                          1587              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001F0E  13FC 00B9 00003985      1588              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001F16  13FC 0020 00003986      1589              MOVE.B   #$20,GET_SRC_START_END
00001F1E                          1590  
00001F1E                          1591              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001F1E  0285 0000FFC7           1592              ANDI.L  #$FFC7,D5   *inverse mask bits 5-3 with 1111(F[15]) 1111(F[15]) 1100(C[12]) 0111(7)
00001F24  0685 00000000           1593              ADDI.L  #$0000,D5   *Add.B  BITS 5-3 TO INDICATE A Dn Register (000) 
00001F2A                          1594              
00001F2A  6100 0CC2               1595              BSR     GET_EA_EA_DEST       *GETS Dn
00001F2E  163C 002C               1596              MOVE.B  #',',D3
00001F32  6100 1128               1597              BSR     PUSH_STACK          
00001F36  6100 0886               1598              BSR     GET_EA_EA_SRC      *GETS <ea>
00001F3A                          1599              
00001F3A  6000 0092               1600              BRA     OP1101_ADD_RETURN
00001F3E                          1601  OP1101_PRINT_W
00001F3E  163C 0057               1602              MOVE.B  #'W',D3
00001F42  6100 1118               1603              BSR     PUSH_STACK
00001F46                          1604  
00001F46                          1605              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001F46  13FC 0002 00003982      1606              MOVE.B   #$02,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001F4E  13FC 0002 00003983      1607              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001F56                          1608             
00001F56                          1609              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001F56  13FC 00B9 00003985      1610              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001F5E  13FC 0020 00003986      1611              MOVE.B   #$20,GET_SRC_START_END
00001F66                          1612  
00001F66                          1613              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001F66  0285 0000FFC7           1614              ANDI.L  #$FFC7,D5   *inverse mask bits 5-3 with 1111(F[15]) 1111(F[15]) 1100(C[12]) 0111(7)
00001F6C  0685 00000000           1615              ADDI.L  #$0000,D5   *Add.B  BITS 5-3 TO INDICATE A Dn Register (000) 
00001F72                          1616              
00001F72                          1617              
00001F72  6100 0C7A               1618              BSR     GET_EA_EA_DEST       *GETS Dn
00001F76  163C 002C               1619              MOVE.B  #',',D3
00001F7A  6100 10E0               1620              BSR     PUSH_STACK          
00001F7E  6100 083E               1621              BSR     GET_EA_EA_SRC      *GETS <ea>
00001F82                          1622              
00001F82  6000 004A               1623              BRA     OP1101_ADD_RETURN
00001F86                          1624  OP1101_PRINT_L 
00001F86  163C 004C               1625              MOVE.B  #'L',D3
00001F8A  6100 10D0               1626              BSR     PUSH_STACK
00001F8E                          1627              
00001F8E                          1628              *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001F8E  13FC 0002 00003982      1629              MOVE.B   #$02,DEST_REGISTER_FORMAT               *doesn't allow An in either dest or src formats
00001F96  13FC 0002 00003983      1630              MOVE.B   #$02,SRC_REGISTER_FORMAT                *THIS IS WHAT ARE THE POSSIBLE EA,EA
00001F9E                          1631             
00001F9E                          1632              *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001F9E  13FC 00B9 00003985      1633              MOVE.B   #$B9,GET_DST_START_END                  *THIS IS THE WHERE WE CAN FIND REGISTER NUMBERS
00001FA6  13FC 0020 00003986      1634              MOVE.B   #$20,GET_SRC_START_END
00001FAE                          1635  
00001FAE                          1636              *CHANGE D5 SO THAT BITS 5-3(source mode) REFLECT  <Dn mode> for get_ea_ea format
00001FAE  0285 0000FFC7           1637              ANDI.L  #$FFC7,D5   *inverse mask bits 5-3 with 1111(F[15]) 1111(F[15]) 1100(C[12]) 0111(7)
00001FB4  0685 00000000           1638              ADDI.L  #$0000,D5   *Add.B  BITS 5-3 TO INDICATE A Dn Register (000) 
00001FBA                          1639                     
00001FBA  6100 0C32               1640              BSR     GET_EA_EA_DEST       *GETS Dn
00001FBE  163C 002C               1641              MOVE.B  #',',D3
00001FC2  6100 1098               1642              BSR     PUSH_STACK          
00001FC6  6100 07F6               1643              BSR     GET_EA_EA_SRC      *GETS <ea>
00001FCA                          1644              
00001FCA  6000 0002               1645              BRA     OP1101_ADD_RETURN
00001FCE                          1646              
00001FCE                          1647  OP1101_ADD_RETURN
00001FCE  4E75                    1648              RTS
00001FD0                          1649              
00001FD0                          1650              *ADDW
00001FD0  0C01 0006               1651              CMPI.B  #$6,D1
00001FD4  6700 0056               1652              BEQ     OP_ADDA_W
00001FD8  0C01 000E               1653              CMPI.B  #$E,D1
00001FDC  6700 0066               1654              BEQ     OP_ADDA_L 
00001FE0                          1655  
00001FE0  4EF8 14C6               1656              JMP     OP_DATA  
00001FE4                          1657            
00001FE4                          1658  *---------------------------------------------------------------------------*
00001FE4                          1659  * OP_ADD: display ADD and proceed to EA
00001FE4                          1660  *---------------------------------------------------------------------------*  
00001FE4  43F9 00003839           1661  OP_ADD_B    LEA     DISP_ADD_B,A1
00001FEA  103C 000E               1662              MOVE.B  #14,D0
00001FEE  4E4F                    1663              TRAP    #15
00001FF0  183C 0000               1664              MOVE.B  #0,D4
00001FF4  4EF9 0000236E           1665              JMP     EA_GEN
00001FFA                          1666  
00001FFA  4E75                    1667              RTS
00001FFC                          1668  
00001FFC  43F9 00003842           1669  OP_ADD_W    LEA     DISP_ADD_W,A1
00002002  103C 000E               1670              MOVE.B  #14,D0
00002006  4E4F                    1671              TRAP    #15
00002008  183C 0001               1672              MOVE.B  #1,D4
0000200C  4EF9 0000236E           1673              JMP     EA_GEN
00002012                          1674  
00002012  4E75                    1675              RTS
00002014                          1676  
00002014  43F9 0000384B           1677  OP_ADD_L    LEA     DISP_ADD_L,A1
0000201A  103C 000E               1678              MOVE.B  #14,D0
0000201E  4E4F                    1679              TRAP    #15
00002020  183C 0002               1680              MOVE.B  #2,D4
00002024  4EF9 0000236E           1681              JMP     EA_GEN
0000202A                          1682  
0000202A  4E75                    1683              RTS
0000202C                          1684  
0000202C                          1685  *---------------------------------------------------------------------------*
0000202C                          1686  * OP_ADDA: display ADDA and proceed to EA
0000202C                          1687  *---------------------------------------------------------------------------*  
0000202C  43F9 00003854           1688  OP_ADDA_W   LEA     DISP_ADDA_W,A1
00002032  103C 000E               1689              MOVE.B  #14,D0
00002036  4E4F                    1690              TRAP    #15
00002038  183C 0001               1691              MOVE.B  #1,D4
0000203C  4EF9 0000236E           1692              JMP     EA_GEN
00002042                          1693  
00002042  4E75                    1694              RTS
00002044                          1695  
00002044  43F9 0000385E           1696  OP_ADDA_L   LEA     DISP_ADDA_L,A1
0000204A  103C 000E               1697              MOVE.B  #14,D0
0000204E  4E4F                    1698              TRAP    #15
00002050  183C 0002               1699              MOVE.B  #2,D4
00002054  4EF9 0000236E           1700              JMP     EA_GEN
0000205A                          1701  
0000205A  4E75                    1702              RTS
0000205C                          1703              
0000205C                          1704  *---------------------------------------------------------------------------*
0000205C                          1705  * OP1110: LSR/LSL/ASR/ASL/ROL/ROR
0000205C                          1706  *---------------------------------------------------------------------------* 
0000205C  4280                    1707  OP1110      CLR.L   D0                  
0000205E  4281                    1708              CLR.L   D1   
00002060  4284                    1709              CLR.L   D4                   
00002062  227C 00000000           1710              MOVEA.L #0, A1                 
00002068  2205                    1711              MOVE.L  D5,D1
0000206A                          1712              
0000206A                          1713              * check for LSX
0000206A  E699                    1714              ROR.L   #3,D1
0000206C  0281 00000001           1715              ANDI.L  #$1,D1
00002072  0C01 0001               1716              CMPI.B  #1,D1
00002076  6700 002E               1717              BEQ     OP_LSX
0000207A                          1718              
0000207A                          1719              * reset D1 and check for ASX
0000207A  4281                    1720              CLR.L   D1
0000207C  2205                    1721              MOVE.L  D5,D1
0000207E  E699                    1722              ROR.L   #3,D1
00002080  0281 00000001           1723              ANDI.L  #$1,D1
00002086  0C01 0000               1724              CMPI.B  #0,D1
0000208A  6700 0032               1725              BEQ     OP_ASX
0000208E                          1726  
0000208E                          1727              * reset D1 and check for ROX
0000208E  4281                    1728              CLR.L   D1
00002090  2205                    1729              MOVE.L  D5,D1
00002092  E699                    1730              ROR.L   #3,D1
00002094  0281 00000001           1731              ANDI.L  #$1,D1
0000209A  0C01 0003               1732              CMPI.B  #3,D1
0000209E  6700 0036               1733              BEQ     OP_ROX
000020A2                          1734              
000020A2  4EF8 14C6               1735              JMP     OP_DATA
000020A6                          1736  
000020A6                          1737  *---------------------------------------------------------------------------*
000020A6                          1738  * OP_LSX: process LSR/LSL
000020A6                          1739  *---------------------------------------------------------------------------*            
000020A6  EA99                    1740  OP_LSX      ROR.L   #5,D1
000020A8  0281 00000001           1741              ANDI.L  #$1,D1
000020AE  0C01 0000               1742              CMPI.B  #0,D1
000020B2  6700 003A               1743              BEQ     OP_LSR
000020B6  0C01 0001               1744              CMPI.B  #1,D1
000020BA  6700 008C               1745              BEQ     OP_LSL
000020BE                          1746              
000020BE                          1747  *---------------------------------------------------------------------------*
000020BE                          1748  * OP_ASX: process ASR/ASL
000020BE                          1749  *---------------------------------------------------------------------------*  
000020BE  EA99                    1750  OP_ASX      ROR.L   #5,D1
000020C0  0281 00000001           1751              ANDI.L  #$1,D1
000020C6  0C01 0000               1752              CMPI.B  #0,D1
000020CA  6700 00D6               1753              BEQ     OP_ASR
000020CE  0C01 0001               1754              CMPI.B  #1,D1
000020D2  6700 0128               1755              BEQ     OP_ASL
000020D6                          1756              
000020D6                          1757  *---------------------------------------------------------------------------*
000020D6                          1758  * OP_ROX: process ROR/ROL
000020D6                          1759  *---------------------------------------------------------------------------*  
000020D6  EA99                    1760  OP_ROX      ROR.L   #5,D1
000020D8  0281 00000001           1761              ANDI.L  #$1,D1
000020DE  0C01 0000               1762              CMPI.B  #0,D1
000020E2  6700 0172               1763              BEQ     OP_ROR
000020E6  0C01 0001               1764              CMPI.B  #1,D1
000020EA  6700 01C4               1765              BEQ     OP_ROL
000020EE                          1766  
000020EE                          1767  *---------------------------------------------------------------------------*
000020EE                          1768  * OP_LSR: decode and display LSR
000020EE                          1769  *---------------------------------------------------------------------------*        
000020EE  E599                    1770  OP_LSR      ROL.L   #2,D1
000020F0  0281 00000003           1771              ANDI.L  #$3,D1
000020F6  0C01 0000               1772              CMPI.B  #0,D1
000020FA  6700 0016               1773              BEQ     OP_LSR_B
000020FE  0C01 0001               1774              CMPI.B  #$1,D1
00002102  6700 0032               1775              BEQ     OP_LSR_W
00002106  0C01 0002               1776              CMPI.B  #$2,D1
0000210A  6700 0018               1777              BEQ     OP_LSR_L
0000210E                          1778              
0000210E  4EF8 14C6               1779              JMP     OP_DATA
00002112                          1780  
00002112  43F9 00003868           1781  OP_LSR_B    LEA     DISP_LSR_B,A1
00002118  103C 000E               1782              MOVE.B  #14,D0
0000211C  4E4F                    1783              TRAP    #15
0000211E  183C 0000               1784              MOVE.B  #0,D4
00002122  4E75                    1785              RTS
00002124                          1786  
00002124  43F9 0000388C           1787  OP_LSR_L    LEA     DISP_LSR_L,A1
0000212A  103C 000E               1788              MOVE.B  #14,D0
0000212E  4E4F                    1789              TRAP    #15
00002130  183C 0002               1790              MOVE.B  #2,D4
00002134  4E75                    1791              RTS
00002136                          1792  
00002136  43F9 0000387A           1793  OP_LSR_W    LEA     DISP_LSR_W,A1
0000213C  103C 000E               1794              MOVE.B  #14,D0
00002140  4E4F                    1795              TRAP    #15
00002142  183C 0001               1796              MOVE.B  #1,D4
00002146  4E75                    1797              RTS
00002148                          1798   
00002148                          1799  *---------------------------------------------------------------------------*
00002148                          1800  * OP_LSL: decode and display LSL
00002148                          1801  *---------------------------------------------------------------------------*             
00002148  E599                    1802  OP_LSL      ROL.L   #2,D1
0000214A  0281 00000003           1803              ANDI.L  #$3,D1
00002150  0C01 0000               1804              CMPI.B  #0,D1
00002154  6700 0016               1805              BEQ     OP_LSL_B
00002158  0C01 0001               1806              CMPI.B  #$1,D1
0000215C  6700 0032               1807              BEQ     OP_LSL_W
00002160  0C01 0002               1808              CMPI.B  #$2,D1
00002164  6700 0018               1809              BEQ     OP_LSL_L
00002168                          1810              
00002168  4EF8 14C6               1811              JMP OP_DATA
0000216C                          1812  
0000216C  43F9 00003871           1813  OP_LSL_B    LEA     DISP_LSL_B,A1
00002172  103C 000E               1814              MOVE.B  #14,D0
00002176  4E4F                    1815              TRAP    #15
00002178  183C 0000               1816              MOVE.B  #0,D4
0000217C  4E75                    1817              RTS
0000217E                          1818  
0000217E  43F9 00003895           1819  OP_LSL_L    LEA     DISP_LSL_L,A1
00002184  103C 000E               1820              MOVE.B  #14,D0
00002188  4E4F                    1821              TRAP    #15
0000218A  183C 0002               1822              MOVE.B  #2,D4
0000218E  4E75                    1823              RTS
00002190                          1824  
00002190  43F9 00003883           1825  OP_LSL_W    LEA     DISP_LSL_W,A1
00002196  103C 000E               1826              MOVE.B  #14,D0
0000219A  4E4F                    1827              TRAP    #15
0000219C  183C 0001               1828              MOVE.B  #1,D4
000021A0  4E75                    1829              RTS
000021A2                          1830   
000021A2                          1831  *---------------------------------------------------------------------------*
000021A2                          1832  * OP_ASR: decode and display ASR
000021A2                          1833  *---------------------------------------------------------------------------*             
000021A2  E599                    1834  OP_ASR      ROL.L   #2,D1
000021A4  0281 00000003           1835              ANDI.L  #$3,D1
000021AA  0C01 0000               1836              CMPI.B  #0,D1
000021AE  6700 0016               1837              BEQ     OP_ASR_B
000021B2  0C01 0001               1838              CMPI.B  #$1,D1
000021B6  6700 0032               1839              BEQ     OP_ASR_W
000021BA  0C01 0002               1840              CMPI.B  #$2,D1
000021BE  6700 0018               1841              BEQ     OP_ASR_L
000021C2                          1842              
000021C2  4EF8 14C6               1843              JMP OP_DATA
000021C6                          1844  
000021C6  43F9 0000389E           1845  OP_ASR_B    LEA     DISP_ASR_B,A1
000021CC  103C 000E               1846              MOVE.B  #14,D0
000021D0  4E4F                    1847              TRAP    #15
000021D2  183C 0000               1848              MOVE.B  #0,D4
000021D6  4E75                    1849              RTS
000021D8                          1850  
000021D8  43F9 000038C2           1851  OP_ASR_L    LEA     DISP_ASR_L,A1
000021DE  103C 000E               1852              MOVE.B  #14,D0
000021E2  4E4F                    1853              TRAP    #15
000021E4  183C 0002               1854              MOVE.B  #2,D4
000021E8  4E75                    1855              RTS
000021EA                          1856  
000021EA  43F9 000038B0           1857  OP_ASR_W    LEA     DISP_ASR_W,A1
000021F0  103C 000E               1858              MOVE.B  #14,D0
000021F4  4E4F                    1859              TRAP    #15
000021F6  183C 0001               1860              MOVE.B  #1,D4
000021FA  4E75                    1861              RTS
000021FC                          1862       
000021FC                          1863  *---------------------------------------------------------------------------*
000021FC                          1864  * OP_ASL: decode and display ASL
000021FC                          1865  *---------------------------------------------------------------------------*         
000021FC  E599                    1866  OP_ASL      ROL.L   #2,D1
000021FE  0281 00000003           1867              ANDI.L  #$3,D1
00002204  0C01 0000               1868              CMPI.B  #0,D1
00002208  6700 0016               1869              BEQ     OP_ASL_B
0000220C  0C01 0001               1870              CMPI.B  #$1,D1
00002210  6700 0032               1871              BEQ     OP_ASL_W
00002214  0C01 0002               1872              CMPI.B  #$2,D1
00002218  6700 0018               1873              BEQ     OP_ASL_L
0000221C                          1874              
0000221C  4EF8 14C6               1875              JMP OP_DATA
00002220                          1876  
00002220  43F9 000038A7           1877  OP_ASL_B    LEA     DISP_ASL_B,A1
00002226  103C 000E               1878              MOVE.B  #14,D0
0000222A  4E4F                    1879              TRAP    #15
0000222C  183C 0000               1880              MOVE.B  #0,D4
00002230  4E75                    1881              RTS
00002232                          1882  
00002232  43F9 000038CB           1883  OP_ASL_L    LEA     DISP_ASL_L,A1
00002238  103C 000E               1884              MOVE.B  #14,D0
0000223C  4E4F                    1885              TRAP    #15
0000223E  183C 0002               1886              MOVE.B  #2,D4
00002242  4E75                    1887              RTS
00002244                          1888  
00002244  43F9 000038B9           1889  OP_ASL_W    LEA     DISP_ASL_W,A1
0000224A  103C 000E               1890              MOVE.B  #14,D0
0000224E  4E4F                    1891              TRAP    #15
00002250  183C 0001               1892              MOVE.B  #1,D4
00002254  4E75                    1893              RTS
00002256                          1894   
00002256                          1895  *---------------------------------------------------------------------------*
00002256                          1896  * OP_ROR: decode and display ROR
00002256                          1897  *---------------------------------------------------------------------------*             
00002256  E599                    1898  OP_ROR      ROL.L   #2,D1
00002258  0281 00000003           1899              ANDI.L  #$3,D1
0000225E  0C01 0000               1900              CMPI.B  #0,D1
00002262  6700 0016               1901              BEQ     OP_ROR_B
00002266  0C01 0001               1902              CMPI.B  #$1,D1
0000226A  6700 0032               1903              BEQ     OP_ROR_W
0000226E  0C01 0002               1904              CMPI.B  #$2,D1
00002272  6700 0018               1905              BEQ     OP_ROR_L
00002276                          1906              
00002276  4EF8 14C6               1907              JMP OP_DATA
0000227A                          1908  
0000227A  43F9 000038D4           1909  OP_ROR_B    LEA     DISP_ROR_B,A1
00002280  103C 000E               1910              MOVE.B  #14,D0
00002284  4E4F                    1911              TRAP    #15
00002286  183C 0000               1912              MOVE.B  #0,D4
0000228A  4E75                    1913              RTS
0000228C                          1914  
0000228C  43F9 000038F8           1915  OP_ROR_L    LEA     DISP_ROR_L,A1
00002292  103C 000E               1916              MOVE.B  #14,D0
00002296  4E4F                    1917              TRAP    #15
00002298  183C 0002               1918              MOVE.B  #2,D4
0000229C  4E75                    1919              RTS
0000229E                          1920  
0000229E  43F9 000038E6           1921  OP_ROR_W    LEA     DISP_ROR_W,A1
000022A4  103C 000E               1922              MOVE.B  #14,D0
000022A8  4E4F                    1923              TRAP    #15
000022AA  183C 0001               1924              MOVE.B  #1,D4
000022AE  4E75                    1925              RTS
000022B0                          1926  
000022B0                          1927  *---------------------------------------------------------------------------*
000022B0                          1928  * OP_ROL: decode and display ROL
000022B0                          1929  *---------------------------------------------------------------------------*             
000022B0  E599                    1930  OP_ROL      ROL.L   #2,D1
000022B2  0281 00000003           1931              ANDI.L  #$3,D1
000022B8  0C01 0000               1932              CMPI.B  #0,D1
000022BC  6700 0016               1933              BEQ     OP_ROL_B
000022C0  0C01 0001               1934              CMPI.B  #$1,D1
000022C4  6700 0032               1935              BEQ     OP_ROL_W
000022C8  0C01 0002               1936              CMPI.B  #$2,D1
000022CC  6700 0018               1937              BEQ     OP_ROL_L
000022D0                          1938              
000022D0  4EF8 14C6               1939              JMP OP_DATA
000022D4                          1940  
000022D4                          1941  
000022D4  43F9 000038DD           1942  OP_ROL_B    LEA     DISP_ROL_B,A1
000022DA  103C 000E               1943              MOVE.B  #14,D0
000022DE  4E4F                    1944              TRAP    #15
000022E0  183C 0000               1945              MOVE.B  #0,D4
000022E4  4E75                    1946              RTS
000022E6                          1947  
000022E6  43F9 00003901           1948  OP_ROL_L    LEA     DISP_ROL_L,A1
000022EC  103C 000E               1949              MOVE.B  #14,D0
000022F0  4E4F                    1950              TRAP    #15
000022F2  183C 0002               1951              MOVE.B  #2,D4
000022F6  4E75                    1952              RTS
000022F8                          1953  
000022F8  43F9 000038EF           1954  OP_ROL_W    LEA     DISP_ROL_W,A1
000022FE  103C 000E               1955              MOVE.B  #14,D0
00002302  4E4F                    1956              TRAP    #15
00002304  183C 0001               1957              MOVE.B  #1,D4
00002308  4E75                    1958              RTS
0000230A                          1959              
0000230A                          1960  *---------------------------------------------------------------------------*
0000230A                          1961  * OP1111 : Special reserved
0000230A                          1962  *---------------------------------------------------------------------------*           
0000230A  4EF8 14C6               1963  OP1111      JMP     OP_DATA
0000230E                          1964  
0000230E                          1965  *---------------------------------------------------------------------------*
0000230E                          1966  * EA_NOSRC: decode and display effective addresses for NEG/JSR
0000230E                          1967  *---------------------------------------------------------------------------*
0000230E                          1968  EA_NOSRC    
0000230E  4EB9 000023CC           1969              JSR     SRC_MODE
00002314  43F9 000035CE           1970              LEA     ENDLINE_M,A1
0000231A  103C 000E               1971              MOVE.B  #14,D0
0000231E  4E4F                    1972              TRAP    #15
00002320  4E75                    1973              RTS
00002322                          1974              
00002322                          1975  *---------------------------------------------------------------------------*
00002322                          1976  * EA_ARITH: decode and display effective addresses for DIVS/MULS
00002322                          1977  *---------------------------------------------------------------------------*
00002322                          1978  EA_ARITH
00002322  4EB9 000023CC           1979              JSR     SRC_MODE
00002328  43F9 00003948           1980              LEA     DISP_D,A1
0000232E  103C 000E               1981              MOVE.B  #14,D0
00002332  4E4F                    1982              TRAP    #15
00002334  4EB9 00002658           1983              JSR     DEST_REGISTER
0000233A  43F9 000035CE           1984              LEA     ENDLINE_M,A1
00002340  103C 000E               1985              MOVE.B  #14,D0
00002344  4E4F                    1986              TRAP    #15
00002346  4E75                    1987              RTS
00002348                          1988              
00002348                          1989  *---------------------------------------------------------------------------*
00002348                          1990  * EA_MOVEA: decode and display effective addresses for MOVEA/LEA
00002348                          1991  *---------------------------------------------------------------------------*
00002348                          1992  EA_MOVEA
00002348  4EB9 000023CC           1993              JSR     SRC_MODE
0000234E  43F9 00003959           1994              LEA     DISP_AOP,A1
00002354  103C 000E               1995              MOVE.B  #14,D0
00002358  4E4F                    1996              TRAP    #15
0000235A  4EB9 00002658           1997              JSR     DEST_REGISTER
00002360  43F9 00003957           1998              LEA     DISP_CP,A1
00002366  103C 000D               1999              MOVE.B  #13,D0
0000236A  4E4F                    2000              TRAP    #15
0000236C  4E75                    2001              RTS
0000236E                          2002              
0000236E                          2003  *---------------------------------------------------------------------------*
0000236E                          2004  * EA_GEN: decode and display effective addresses for MOVE
0000236E                          2005  *---------------------------------------------------------------------------*
0000236E                          2006  EA_GEN          
0000236E                          2007              * retrieve/display source mode/register
0000236E  4EB9 000023CC           2008              JSR     SRC_MODE
00002374                          2009              
00002374                          2010              * retrieve/display destination mode/register
00002374  4EB9 00002388           2011              JSR     DEST_MODE
0000237A                          2012              
0000237A  43F9 000035CE           2013              LEA     ENDLINE_M,A1
00002380  103C 000E               2014              MOVE.B  #14,D0
00002384  4E4F                    2015              TRAP    #15
00002386                          2016              
00002386  4E75                    2017              RTS
00002388                          2018  
00002388                          2019  *---------------------------------------------------------------------------*
00002388                          2020  * DEST_MODE: decode and display destination mode (bit 8 - 6)
00002388                          2021  *---------------------------------------------------------------------------*           
00002388                          2022  DEST_MODE   
00002388                          2023              * clear registers to store temp data
00002388  4280                    2024              CLR.L   D0                      
0000238A  4281                    2025              CLR.L   D1                      
0000238C  207C 00000000           2026              MOVEA.L #0, A0                  
00002392  227C 00000000           2027              MOVEA.L #0, A1                  
00002398  2205                    2028              MOVE.L  D5,D1
0000239A  EC89                    2029              LSR.L   #6,D1
0000239C  0281 00000007           2030              ANDI.L  #$7,D1
000023A2  0C01 0000               2031              CMPI.B  #0,D1   * Dn
000023A6  6700 0082               2032              BEQ     D_MODE000
000023AA  0C01 0002               2033              CMPI.B  #2,D1   * (An)
000023AE  6700 00C2               2034              BEQ     D_MODE010
000023B2  0C01 0003               2035              CMPI.B  #3,D1   * (An)+
000023B6  6700 011A               2036              BEQ     D_MODE011
000023BA  0C01 0004               2037              CMPI.B  #4,D1   * -(An)
000023BE  6700 0132               2038              BEQ     D_MODE100
000023C2  0C01 0007               2039              CMPI.B  #7,D1  * abs
000023C6  6700 017C               2040              BEQ     D_MODE111 
000023CA  4E75                    2041              RTS
000023CC                          2042  
000023CC                          2043  *---------------------------------------------------------------------------*
000023CC                          2044  * SRC_MODE: decode and display source mode (bit 5 - 3)
000023CC                          2045  *---------------------------------------------------------------------------*  
000023CC                          2046  SRC_MODE    
000023CC                          2047              * clear registers to store temp data
000023CC  4280                    2048              CLR.L   D0                      
000023CE  4281                    2049              CLR.L   D1                      
000023D0  207C 00000000           2050              MOVEA.L #0, A0                  
000023D6  227C 00000000           2051              MOVEA.L #0, A1                  
000023DC  2205                    2052              MOVE.L  D5,D1
000023DE  E489                    2053              LSR.L   #2,D1
000023E0  0281 0000000E           2054              ANDI.L  #$E,D1
000023E6                          2055              
000023E6  0C01 0000               2056              CMPI.B  #0,D1   * Dn
000023EA  6700 002A               2057              BEQ     MODE000
000023EE  0C01 0002               2058              CMPI.B  #2,D1   * An 
000023F2  6700 004A               2059              BEQ     MODE001
000023F6  0C01 0004               2060              CMPI.B  #4,D1   * (An)
000023FA  6700 0056               2061              BEQ     MODE010
000023FE  0C01 0006               2062              CMPI.B  #6,D1   * (An)+
00002402  6700 008E               2063              BEQ     MODE011
00002406  0C01 0008               2064              CMPI.B  #8,D1   * -(An)
0000240A  6700 00A6               2065              BEQ     MODE100
0000240E  0C01 000F               2066              CMPI.B  #15,D1  * abs/immediate
00002412  6700 00FE               2067              BEQ     MODE111 
00002416                          2068        
00002416                          2069  *---------------------------------------------------------------------------*
00002416                          2070  * MODE000: decode and display source mode Dn
00002416                          2071  *---------------------------------------------------------------------------*           
00002416                          2072  MODE000     *Dn
00002416  43F9 00003948           2073              LEA     DISP_D,A1
0000241C  103C 000E               2074              MOVE.B  #14,D0
00002420  4E4F                    2075              TRAP    #15
00002422  4EB9 000026B4           2076              JSR     SRC_REGISTER
00002428  4E75                    2077              RTS
0000242A                          2078  
0000242A                          2079  *---------------------------------------------------------------------------*
0000242A                          2080  * D_MODE000: decode and display dest mode Dn
0000242A                          2081  *---------------------------------------------------------------------------*
0000242A                          2082  D_MODE000     *Dn
0000242A  43F9 00003948           2083              LEA     DISP_D,A1
00002430  103C 000E               2084              MOVE.B  #14,D0
00002434  4E4F                    2085              TRAP    #15
00002436  4EB9 00002658           2086              JSR     DEST_REGISTER
0000243C  4E75                    2087              RTS
0000243E                          2088  
0000243E                          2089  *---------------------------------------------------------------------------*
0000243E                          2090  * MODE001: decode and display source mode An
0000243E                          2091  *---------------------------------------------------------------------------* 
0000243E                          2092  MODE001 *An
0000243E  43F9 0000394D           2093              LEA     DISP_A,A1
00002444  103C 000E               2094              MOVE.B  #14,D0
00002448  4E4F                    2095              TRAP    #15
0000244A  4EB9 000026B4           2096              JSR     SRC_REGISTER
00002450                          2097          
00002450  4E75                    2098              RTS
00002452                          2099  
00002452                          2100  *---------------------------------------------------------------------------*
00002452                          2101  * MODE010: decode and display source mode (An)
00002452                          2102  *---------------------------------------------------------------------------*    
00002452                          2103  MODE010 *(An)
00002452  43F9 00003959           2104              LEA     DISP_AOP,A1  *display (A
00002458  103C 000E               2105              MOVE.B  #14,D0
0000245C  4E4F                    2106              TRAP    #15
0000245E                          2107  
0000245E  4EB9 000026B4           2108              JSR     SRC_REGISTER * display register
00002464                          2109  
00002464  43F9 00003957           2110              LEA     DISP_CP,A1   *display )
0000246A  103C 000E               2111              MOVE.B  #14,D0
0000246E  4E4F                    2112              TRAP    #15
00002470                          2113              
00002470  4E75                    2114              RTS
00002472                          2115  
00002472                          2116  *---------------------------------------------------------------------------*
00002472                          2117  * D_MODE010: decode and display dest mode (An)
00002472                          2118  *---------------------------------------------------------------------------*
00002472                          2119  D_MODE010 *(An)
00002472  43F9 00003959           2120              LEA     DISP_AOP,A1  *display (A
00002478  103C 000E               2121              MOVE.B  #14,D0
0000247C  4E4F                    2122              TRAP    #15
0000247E                          2123     
0000247E  4EB9 00002658           2124              JSR     DEST_REGISTER * display register
00002484                          2125  
00002484  43F9 00003957           2126              LEA     DISP_CP,A1   *display )
0000248A  103C 000E               2127              MOVE.B  #14,D0
0000248E  4E4F                    2128              TRAP    #15
00002490                          2129              
00002490  4E75                    2130              RTS
00002492                          2131  
00002492                          2132  *---------------------------------------------------------------------------*
00002492                          2133  * MODE011: decode and display source mode (An)+
00002492                          2134  *---------------------------------------------------------------------------*
00002492                          2135  MODE011 *(An)+
00002492  43F9 00003959           2136              LEA     DISP_AOP,A1      *display (A
00002498  103C 000E               2137              MOVE.B  #14,D0
0000249C  4E4F                    2138              TRAP    #15
0000249E                          2139              
0000249E  4EB9 000026B4           2140              JSR     SRC_REGISTER    * display register
000024A4                          2141  
000024A4  43F9 00003966           2142              LEA     DISP_POST,A1    *display )+
000024AA  103C 000E               2143              MOVE.B  #14,D0
000024AE  4E4F                    2144              TRAP    #15
000024B0                          2145              
000024B0  4E75                    2146              RTS
000024B2                          2147              
000024B2                          2148  *---------------------------------------------------------------------------*
000024B2                          2149  * MODE100: decode and display source mode -(An)
000024B2                          2150  *---------------------------------------------------------------------------*
000024B2                          2151  MODE100 *-(An)
000024B2  43F9 0000395F           2152              LEA     DISP_PRE,A1    *display -(A
000024B8  103C 000E               2153              MOVE.B  #14,D0
000024BC  4E4F                    2154              TRAP    #15
000024BE                          2155  
000024BE  4EB9 000026B4           2156              JSR     SRC_REGISTER    *display register
000024C4                          2157  
000024C4  43F9 00003957           2158              LEA     DISP_CP,A1   *display )
000024CA  103C 000E               2159              MOVE.B  #14,D0
000024CE  4E4F                    2160              TRAP    #15
000024D0                          2161              
000024D0  4E75                    2162              RTS
000024D2                          2163  
000024D2                          2164  *---------------------------------------------------------------------------*
000024D2                          2165  * D_MODE011: decode and display dest mode (An)+
000024D2                          2166  *---------------------------------------------------------------------------*
000024D2                          2167  D_MODE011 *(An)+
000024D2  43F9 00003959           2168              LEA     DISP_AOP,A1      *display (A
000024D8  103C 000E               2169              MOVE.B  #14,D0
000024DC  4E4F                    2170              TRAP    #15
000024DE                          2171  
000024DE  4EB9 00002658           2172              JSR     DEST_REGISTER    * display register
000024E4                          2173  
000024E4  43F9 00003966           2174              LEA     DISP_POST,A1    *display )+
000024EA  103C 000E               2175              MOVE.B  #14,D0
000024EE  4E4F                    2176              TRAP    #15
000024F0                          2177              
000024F0  4E75                    2178              RTS
000024F2                          2179              
000024F2                          2180  *---------------------------------------------------------------------------*
000024F2                          2181  * D_MODE100: decode and display dest mode -(An)
000024F2                          2182  *---------------------------------------------------------------------------*            
000024F2                          2183  D_MODE100 *-(An)
000024F2  43F9 0000395F           2184              LEA     DISP_PRE,A1    *display -(A
000024F8  103C 000E               2185              MOVE.B  #14,D0
000024FC  4E4F                    2186              TRAP    #15
000024FE                          2187              
000024FE  4EB9 00002658           2188              JSR     DEST_REGISTER    *display register
00002504                          2189  
00002504  43F9 00003957           2190              LEA     DISP_CP,A1   *display )
0000250A  103C 000E               2191              MOVE.B  #14,D0
0000250E  4E4F                    2192              TRAP    #15
00002510                          2193              
00002510  4E75                    2194              RTS
00002512                          2195  
00002512                          2196  *---------------------------------------------------------------------------*
00002512                          2197  * MODE111: decode and display source mode absolute/immediate
00002512                          2198  *---------------------------------------------------------------------------*
00002512                          2199  MODE111     * abs/immediate
00002512                          2200              * clear registers to store temp data
00002512  4280                    2201              CLR.L   D0                      
00002514  4281                    2202              CLR.L   D1                      
00002516  207C 00000000           2203              MOVEA.L #0, A0                  
0000251C  227C 00000000           2204              MOVEA.L #0, A1                  
00002522  2205                    2205              MOVE.L  D5,D1
00002524                          2206              
00002524                          2207              * retrieve source register for MODE 111
00002524  E389                    2208              LSL.L   #1,D1   * shift the bits to left by 1
00002526  0281 0000000E           2209              ANDI.L  #$E,D1  * mask the first 4 bits 
0000252C  0C01 0000               2210              CMPI.B  #0, D1  * if it's 0000, absolute word address
00002530  6700 003E               2211              BEQ     WORDMODE
00002534  0C01 0002               2212              CMPI.B  #2, D1  * if it's 0010, absolute long address
00002538  6700 0062               2213              BEQ     LONGMODE
0000253C  0C01 0008               2214              CMPI.B  #8, D1  * if it's 1000, immediate data
00002540  6700 0086               2215              BEQ     IMMEDIATE
00002544                          2216       
00002544                          2217  *---------------------------------------------------------------------------*
00002544                          2218  * D_MODE111: decode and display dest mode absolute/immediate
00002544                          2219  *---------------------------------------------------------------------------*           
00002544                          2220  D_MODE111   * abs
00002544                          2221              * clear registers to store temp data
00002544  4280                    2222              CLR.L   D0                      
00002546  4281                    2223              CLR.L   D1                      
00002548  207C 00000000           2224              MOVEA.L #0, A0                  
0000254E  227C 00000000           2225              MOVEA.L #0, A1                  
00002554  2205                    2226              MOVE.L  D5,D1
00002556                          2227              
00002556                          2228              * retrieve dest register for MODE 111
00002556  EC89                    2229              LSR.L   #6,D1   * shift the bits to right by 6
00002558  E689                    2230              LSR.L   #3,D1   * shift the bits to right by extra 3
0000255A  0201 0001               2231              ANDI.B  #1,D1   * mask the first 2 bits 
0000255E  0C01 0000               2232              CMPI.B  #0, D1  * if it's 000, absolute word address
00002562  6700 000C               2233              BEQ     WORDMODE
00002566  0C01 0001               2234              CMPI.B  #1, D1  * if it's 001, absolute long address
0000256A  6700 0030               2235              BEQ     LONGMODE
0000256E                          2236              *JSR     OP_DATA *not sure..
0000256E  4E75                    2237              RTS
00002570                          2238  
00002570                          2239  
00002570                          2240  *---------------------------------------------------------------------------*
00002570                          2241  * WORDMODE: absolute word address
00002570                          2242  *---------------------------------------------------------------------------*
00002570  43F9 00003943           2243  WORDMODE    LEA     DISP_HEX,A1
00002576  103C 000E               2244              MOVE.B  #14,D0
0000257A  4E4F                    2245              TRAP    #15
0000257C                          2246              
0000257C  4285                    2247              CLR.L   D5
0000257E  3A1D                    2248              MOVE.W  (A5)+,D5
00002580                          2249              
00002580  43F9 00003621           2250              LEA     TMPOUTPUT,A1
00002586  2205                    2251              MOVE.L  D5,D1
00002588  7404                    2252              MOVE.L  #4,D2       *move word size 4
0000258A  4EB8 11C6               2253              JSR     HEX2ASCII
0000258E  43F9 00003621           2254              LEA     TMPOUTPUT,A1
00002594  103C 000E               2255              MOVE.B  #14,D0
00002598  4E4F                    2256              TRAP    #15
0000259A                          2257              
0000259A  4E75                    2258              RTS
0000259C                          2259  
0000259C                          2260  *---------------------------------------------------------------------------*
0000259C                          2261  * LONGMODE: absolute long address
0000259C                          2262  *---------------------------------------------------------------------------*
0000259C  43F9 00003943           2263  LONGMODE    LEA     DISP_HEX,A1
000025A2  103C 000E               2264              MOVE.B  #14,D0
000025A6  4E4F                    2265              TRAP    #15
000025A8                          2266              
000025A8  4285                    2267              CLR.L   D5
000025AA  2A1D                    2268              MOVE.L  (A5)+,D5
000025AC                          2269              
000025AC  43F9 00003621           2270              LEA     TMPOUTPUT,A1
000025B2  2205                    2271              MOVE.L  D5,D1
000025B4  7408                    2272              MOVE.L  #8,D2           *move longword size 8
000025B6  4EB8 11C6               2273              JSR     HEX2ASCII
000025BA  43F9 00003621           2274              LEA     TMPOUTPUT,A1
000025C0  103C 000E               2275              MOVE.B  #14,D0
000025C4  4E4F                    2276              TRAP    #15
000025C6                          2277              
000025C6  4E75                    2278              RTS
000025C8                          2279  
000025C8                          2280  
000025C8                          2281  *---------------------------------------------------------------------------*
000025C8                          2282  * IMMEDIATE: immediate address
000025C8                          2283  *---------------------------------------------------------------------------*
000025C8  43F9 00003969           2284  IMMEDIATE   LEA     DISP_LB,A1
000025CE  103C 000E               2285              MOVE.B  #14,D0
000025D2  4E4F                    2286              TRAP    #15
000025D4  43F9 00003943           2287              LEA     DISP_HEX,A1
000025DA  103C 000E               2288              MOVE.B  #14,D0
000025DE  4E4F                    2289              TRAP    #15
000025E0                          2290              
000025E0                          2291              * check for size
000025E0  0C04 0000               2292              CMPI.B  #0,D4
000025E4  6700 0012               2293              BEQ     IMMD_B
000025E8  0C04 0001               2294              CMPI.B  #1,D4
000025EC  6700 002A               2295              BEQ     IMMD_W
000025F0  0C04 0002               2296              CMPI.B  #2,D4
000025F4  6700 0042               2297              BEQ     IMMD_L
000025F8                          2298  
000025F8                          2299  IMMD_B
000025F8  4285                    2300              CLR.L   D5
000025FA  3A1D                    2301              MOVE.W  (A5)+,D5
000025FC                          2302              
000025FC  43F9 00003621           2303              LEA     TMPOUTPUT,A1
00002602  2205                    2304              MOVE.L  D5,D1
00002604  7402                    2305              MOVE.L  #2,D2
00002606  4EB8 11C6               2306              JSR     HEX2ASCII
0000260A  43F9 00003621           2307              LEA     TMPOUTPUT,A1
00002610  103C 000E               2308              MOVE.B  #14,D0
00002614  4E4F                    2309              TRAP    #15
00002616  4E75                    2310              RTS
00002618                          2311              
00002618                          2312  IMMD_W
00002618  4285                    2313              CLR.L   D5
0000261A  3A1D                    2314              MOVE.W  (A5)+,D5
0000261C                          2315              
0000261C  43F9 00003621           2316              LEA     TMPOUTPUT,A1
00002622  2205                    2317              MOVE.L  D5,D1
00002624  7404                    2318              MOVE.L  #4,D2
00002626  4EB8 11C6               2319              JSR     HEX2ASCII
0000262A  43F9 00003621           2320              LEA     TMPOUTPUT,A1
00002630  103C 000E               2321              MOVE.B  #14,D0
00002634  4E4F                    2322              TRAP    #15
00002636  4E75                    2323              RTS
00002638                          2324              
00002638                          2325  
00002638                          2326  IMMD_L
00002638  4285                    2327              CLR.L   D5
0000263A  3A1D                    2328              MOVE.W  (A5)+,D5
0000263C                          2329              
0000263C  43F9 00003621           2330              LEA     TMPOUTPUT,A1
00002642  2205                    2331              MOVE.L  D5,D1
00002644  7408                    2332              MOVE.L  #8,D2
00002646  4EB8 11C6               2333              JSR     HEX2ASCII
0000264A  43F9 00003621           2334              LEA     TMPOUTPUT,A1
00002650  103C 000E               2335              MOVE.B  #14,D0
00002654  4E4F                    2336              TRAP    #15
00002656  4E75                    2337              RTS
00002658                          2338  
00002658                          2339  
00002658                          2340  *---------------------------------------------------------------------------*
00002658                          2341  * DEST_REGISTER: decode and display destination register (bit 11 - 9)
00002658                          2342  *---------------------------------------------------------------------------*
00002658                          2343  DEST_REGISTER
00002658                          2344              * clear registers to store temp data
00002658  4280                    2345              CLR.L   D0                      
0000265A  4281                    2346              CLR.L   D1                      
0000265C  207C 00000000           2347              MOVEA.L #0, A0                  
00002662  227C 00000000           2348              MOVEA.L #0, A1 
00002668                          2349              
00002668  2205                    2350              MOVE.L  D5,D1
0000266A  EC89                    2351              LSR.L   #6,D1
0000266C  E689                    2352              LSR.L   #3,D1
0000266E  0281 00000007           2353              ANDI.L  #7,D1
00002674                          2354              
00002674  0C01 0000               2355              CMPI.B  #0,D1
00002678  6700 0092               2356              BEQ     REG_0
0000267C  0C01 0001               2357              CMPI.B  #1,D1
00002680  6700 0098               2358              BEQ     REG_1
00002684  0C01 0002               2359              CMPI.B  #2,D1
00002688  6700 009E               2360              BEQ     REG_2
0000268C  0C01 0003               2361              CMPI.B  #3,D1
00002690  6700 00A4               2362              BEQ     REG_3
00002694  0C01 0004               2363              CMPI.B  #4,D1
00002698  6700 00AA               2364              BEQ     REG_4
0000269C  0C01 0005               2365              CMPI.B  #5,D1
000026A0  6700 00B0               2366              BEQ     REG_5
000026A4  0C01 0006               2367              CMPI.B  #6,D1
000026A8  6700 00B6               2368              BEQ     REG_6
000026AC  0C01 0007               2369              CMPI.B  #7,D1
000026B0  6700 00BC               2370              BEQ     REG_7
000026B4                          2371  
000026B4                          2372  *---------------------------------------------------------------------------*
000026B4                          2373  * SRC_REGISTER: decode and display source register (bit 2 - 0)
000026B4                          2374  *---------------------------------------------------------------------------*           
000026B4                          2375  SRC_REGISTER 
000026B4                          2376              * clear registers to store temp data
000026B4  4280                    2377              CLR.L   D0                      
000026B6  4281                    2378              CLR.L   D1                      
000026B8  207C 00000000           2379              MOVEA.L #0, A0                  
000026BE  227C 00000000           2380              MOVEA.L #0, A1                  
000026C4                          2381              
000026C4  2205                    2382              MOVE.L  D5,D1   * temp store the processing data
000026C6  0281 00000007           2383              ANDI.L  #7,D1   * mask the first 4 bits with 0111
000026CC                          2384              
000026CC  0C01 0000               2385              CMPI.B  #0,D1
000026D0  6700 003A               2386              BEQ     REG_0
000026D4  0C01 0001               2387              CMPI.B  #1,D1
000026D8  6700 0040               2388              BEQ     REG_1
000026DC  0C01 0002               2389              CMPI.B  #2,D1
000026E0  6700 0046               2390              BEQ     REG_2
000026E4  0C01 0003               2391              CMPI.B  #3,D1
000026E8  6700 004C               2392              BEQ     REG_3
000026EC  0C01 0004               2393              CMPI.B  #4,D1
000026F0  6700 0052               2394              BEQ     REG_4
000026F4  0C01 0005               2395              CMPI.B  #5,D1
000026F8  6700 0058               2396              BEQ     REG_5
000026FC  0C01 0006               2397              CMPI.B  #6,D1
00002700  6700 005E               2398              BEQ     REG_6
00002704  0C01 0007               2399              CMPI.B  #7,D1
00002708  6700 0064               2400              BEQ     REG_7
0000270C                          2401  
0000270C                          2402  *---------------------------------------------------------------------------*
0000270C                          2403  * REG_0 ~ REG_7: display register 0 to 7
0000270C                          2404  *---------------------------------------------------------------------------*
0000270C  43F9 0000396E           2405  REG_0       LEA     DISP_0,A1
00002712  103C 000E               2406              MOVE.B  #14,D0
00002716  4E4F                    2407              TRAP    #15
00002718  4E75                    2408              RTS
0000271A                          2409              
0000271A  43F9 00003970           2410  REG_1       LEA     DISP_1,A1
00002720  103C 000E               2411              MOVE.B  #14,D0
00002724  4E4F                    2412              TRAP    #15
00002726  4E75                    2413              RTS
00002728                          2414              
00002728                          2415  
00002728  43F9 00003972           2416  REG_2       LEA     DISP_2,A1
0000272E  103C 000E               2417              MOVE.B  #14,D0
00002732  4E4F                    2418              TRAP    #15
00002734  4E75                    2419              RTS
00002736                          2420            
00002736  43F9 00003974           2421  REG_3       LEA     DISP_3,A1
0000273C  103C 000E               2422              MOVE.B  #14,D0
00002740  4E4F                    2423              TRAP    #15
00002742  4E75                    2424              RTS
00002744                          2425              
00002744  43F9 00003976           2426  REG_4       LEA     DISP_4,A1
0000274A  103C 000E               2427              MOVE.B  #14,D0
0000274E  4E4F                    2428              TRAP    #15
00002750  4E75                    2429              RTS
00002752                          2430              
00002752  43F9 00003978           2431  REG_5       LEA     DISP_5,A1
00002758  103C 000E               2432              MOVE.B  #14,D0
0000275C  4E4F                    2433              TRAP    #15
0000275E  4E75                    2434              RTS
00002760                          2435              
00002760  43F9 0000397A           2436  REG_6       LEA     DISP_6,A1
00002766  103C 000E               2437              MOVE.B  #14,D0
0000276A  4E4F                    2438              TRAP    #15
0000276C  4E75                    2439              RTS
0000276E                          2440              
0000276E  43F9 0000397C           2441  REG_7       LEA     DISP_7,A1
00002774  103C 000E               2442              MOVE.B  #14,D0
00002778  4E4F                    2443              TRAP    #15
0000277A  4E75                    2444              RTS
0000277C                          2445              
0000277C                          2446  *---------------------------------------------------------------------------*
0000277C                          2447  * REPEAT : Ask user whether they wish to run the program again
0000277C                          2448  *---------------------------------------------------------------------------*           
0000277C  4246                    2449  REPEAT      CLR.W   D6                      * Reset D6 (Loop Count)
0000277E  43F9 00003447           2450              LEA     REPEATMSG,A1
00002784  103C 000E               2451              MOVE.B  #14,D0
00002788  4E4F                    2452              TRAP    #15
0000278A                          2453              
0000278A  43F9 000035D1           2454              LEA     TMPINPUT,A1             * allocate space to temp store user input
00002790  103C 0002               2455              MOVE.B  #2,D0
00002794  4E4F                    2456              TRAP    #15
00002796                          2457  
00002796  0C01 0001               2458              CMPI.B  #1,D1                   * check for length of user input
0000279A  66E0                    2459              BNE     REPEAT                  * return to the beginning of the function if unequal
0000279C                          2460              
0000279C  0C11 0059               2461              CMPI.B  #$59,(A1)               * compare the input with Y    
000027A0  6700 E868               2462              BEQ     PROGLP                  * repeat the program
000027A4                          2463              
000027A4  0C11 0079               2464              CMPI.B  #$79,(A1)               * compare the input with y    
000027A8  6700 E860               2465              BEQ     PROGLP                  * repeat the program
000027AC                          2466              
000027AC  0C11 004E               2467              CMPI.B  #$4E,(A1)               * compare the input with N    
000027B0  6700 0928               2468              BEQ     TERMINATE               * finish program
000027B4                          2469              
000027B4  0C11 006E               2470              CMPI.B  #$6E,(A1)               * compare the input with n    
000027B8  6700 0920               2471              BEQ     TERMINATE               * finish program
000027BC                          2472              
000027BC  60BE                    2473              BRA     REPEAT                  * invalid input/repeat the function
000027BE                          2474  
000027BE                          2475  *---------------------------------------------------------------------------*
000027BE                          2476  * EA DECODING INTERFACE
000027BE                          2477  * [A0] - RESERVED FOR USE
000027BE                          2478  * [D2] - RESERVED FOR USE
000027BE                          2479  * RETURNS - ERROR FLAG IF FAILED TO PUSH SRC EA INTO STACK
000027BE                          2480  *---------------------------------------------------------------------------*
000027BE                          2481  GET_EA_EA_SRC
000027BE                          2482      *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
000027BE                          2483      
000027BE                          2484      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
000027BE  2405                    2485      MOVE.L  D5,D2                           * CLEAN COPY TO D2
000027C0  E68A                    2486      LSR.L   #3,D2                           * [D2] Temporarily used D2 for shifting bits            *TODO: DYNAMIC FOR ANY LOCATION OF SOURCE
000027C2  23C2 00003994           2487      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
000027C8  7407                    2488      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
000027CA  C5B9 00003994           2489      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
000027D0                          2490                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
000027D0                          2491      
000027D0                          2492      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
000027D0                          2493      *DESTINATION REGISTER FORMAT STANDARD         *
000027D0                          2494      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
000027D0                          2495      *WHEN BIT = 0(VALID ADDRESS MODE)             *
000027D0                          2496      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
000027D0                          2497      *0 - Dn                                       *
000027D0                          2498      *1 - An                                       *
000027D0                          2499      *2 - (An)                                     *
000027D0                          2500      *3 - (An)+                                    *
000027D0                          2501      *4 - -(An)                                    *
000027D0                          2502      *5 - (XXX).W                                  *
000027D0                          2503      *6 - (XXX).L                                  *
000027D0                          2504      *7 - #<data>                                  *
000027D0                          2505      ***********************************************
000027D0                          2506      
000027D0                          2507      *** Check if source ...  <ea> = Dn
000027D0                          2508  CHECK0    
000027D0  41F9 00003984           2509            LEA     TEMP_REGISTER_FORMAT,A0
000027D6  1439 00003983           2510            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000027DC  1082                    2511            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000027DE  0239 0001 00003984      2512            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
000027E6  0C39 0001 00003984      2513            CMPI.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
000027EE  6700 006A               2514            BEQ     CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
000027F2  0CB9 00000000 00003994  2515            CMPI.L     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn) - COMPARE MODES TO SEE IF IT IS THIS MODE
000027FC  6600 005C               2516            BNE     CHECK1
00002800                          2517            
00002800                          2518            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002800  163C 0020               2519            MOVE.B    #' ',D3
00002804  6100 0856               2520            BSR       PUSH_STACK
00002808  163C 0044               2521            MOVE.B    #'D',D3
0000280C  6100 084E               2522            BSR       PUSH_STACK
00002810                          2523  
00002810                          2524            *FIND REGISTER NUMBER END LOCATION*  
00002810  13F9 00003986 0000398C  2525            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
0000281A  0239 000F 0000398C      2526            AND.B   #$0F,VAR_BYTE_END
00002822                          2527            
00002822                          2528            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002822  23C5 00003990           2529            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002828  1439 0000398C           2530            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
0000282E                          2531            
0000282E                          2532            *INTITIALIZE FOR BIT SHIFTING
0000282E  41F9 00003990           2533            LEA     VAR_TEMP_CLEANCOPY,A0
00002834  2639 00003990           2534            MOVE.L  VAR_TEMP_CLEANCOPY,D3
0000283A                          2535  LOOP_SHIFTING
0000283A  0C02 0000               2536            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000283E  6700 0008               2537            BEQ     MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00002842  E24B                    2538            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002844  5302                    2539            SUB.B   #1,D2                     *DECREMENT COUNTER
00002846  60F2                    2540            BRA     LOOP_SHIFTING             *CONTINUE SHIFTING
00002848                          2541  MASKING_NEXT
00002848  C6BC 00000007           2542            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
0000284E  0603 0030               2543            ADD.B   #$30,D3                   *CONVERT TO CHAR
00002852  6100 0808               2544            BSR     PUSH_STACK                *PUSH TO STACK
00002856                          2545            
00002856  6000 0394               2546            BRA     GET_SRC_SUCCESS           *RETURN          
0000285A                          2547            
0000285A                          2548            
0000285A                          2549            *** Check if source ...  <ea> = An
0000285A  41F9 00003984           2550  CHECK1    LEA     TEMP_REGISTER_FORMAT,A0
00002860  1439 00003983           2551            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002866  1082                    2552            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002868  0239 0002 00003984      2553            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
00002870  0C39 0002 00003984      2554            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
00002878  6700 006A               2555            BEQ     CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
0000287C  0CB9 00000001 00003994  2556            CMPI.L  #1,VAR_LONG_ADDRESS_MODE_CHECK                      * An - COMPARE MODES TO SEE IF IT IS THIS MODE
00002886  6600 005C               2557            BNE     CHECK2
0000288A                          2558            
0000288A                          2559            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
0000288A  163C 0020               2560            MOVE.B    #' ',D3
0000288E  6100 07CC               2561            BSR       PUSH_STACK
00002892  163C 0041               2562            MOVE.B    #'A',D3
00002896  6100 07C4               2563            BSR       PUSH_STACK
0000289A                          2564  
0000289A                          2565            
0000289A                          2566            *FIND REGISTER NUMBER END LOCATION*  
0000289A  13F9 00003986 0000398C  2567            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
000028A4  0239 000F 0000398C      2568            AND.B   #$0F,VAR_BYTE_END
000028AC                          2569            
000028AC                          2570            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000028AC  23C5 00003990           2571            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000028B2  1439 0000398C           2572            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
000028B8                          2573            
000028B8                          2574            *INTITIALIZE FOR BIT SHIFTING
000028B8  41F9 00003990           2575            LEA     VAR_TEMP_CLEANCOPY,A0
000028BE  2639 00003990           2576            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000028C4                          2577  LOOP_SHIFTING1
000028C4  0C02 0000               2578            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000028C8  6700 0008               2579            BEQ     MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
000028CC  E24B                    2580            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000028CE  5302                    2581            SUB.B   #1,D2                     *DECREMENT COUNTER
000028D0  60F2                    2582            BRA     LOOP_SHIFTING1             *CONTINUE SHIFTING
000028D2                          2583  MASKING_NEXT1
000028D2  C6BC 00000007           2584            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000028D8  0603 0030               2585            ADD.B   #$30,D3                   *CONVERT TO CHAR
000028DC  6100 077E               2586            BSR     PUSH_STACK                *PUSH TO STACK
000028E0                          2587            
000028E0  6000 030A               2588            BRA     GET_SRC_SUCCESS                   *RETURN 
000028E4                          2589            
000028E4                          2590            
000028E4                          2591            
000028E4                          2592            
000028E4                          2593            *** Check if source ...  <ea> = (An)       
000028E4  41F9 00003984           2594  CHECK2    LEA     TEMP_REGISTER_FORMAT,A0
000028EA  1439 00003983           2595            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000028F0  1082                    2596            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000028F2  0239 0004 00003984      2597            ANDI.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
000028FA  0C39 0004 00003984      2598            CMPI.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
00002902  6700 007A               2599            BEQ     CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002906  0CB9 00000002 00003994  2600            CMPI.L   #2,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)  COMPARE MODES TO SEE IF IT IS THIS MODE                                                                *change: checkx++*
00002910  6600 006C               2601            BNE     CHECK3
00002914                          2602            
00002914                          2603            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002914  163C 0020               2604            MOVE.B    #' ',D3
00002918  6100 0742               2605            BSR       PUSH_STACK
0000291C  163C 0028               2606            MOVE.B    #'(',D3
00002920  6100 073A               2607            BSR       PUSH_STACK
00002924  163C 0041               2608            MOVE.B    #'A',D3
00002928  6100 0732               2609            BSR       PUSH_STACK
0000292C                          2610  
0000292C                          2611            
0000292C                          2612            *FIND REGISTER NUMBER END LOCATION*  
0000292C  13F9 00003986 0000398C  2613            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002936  0239 000F 0000398C      2614            AND.B   #$0F,VAR_BYTE_END
0000293E                          2615            
0000293E                          2616            *GET INDEX OF THE END OF SRC REGISTER NUMBER
0000293E  23C5 00003990           2617            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002944  1439 0000398C           2618            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
0000294A                          2619            
0000294A                          2620            *INTITIALIZE FOR BIT SHIFTING
0000294A  41F9 00003990           2621            LEA     VAR_TEMP_CLEANCOPY,A0
00002950  2639 00003990           2622            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002956                          2623  LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
00002956  0C02 0000               2624            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000295A  6700 0008               2625            BEQ     MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
0000295E  E24B                    2626            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002960  5302                    2627            SUB.B   #1,D2                     *DECREMENT COUNTER
00002962  60F2                    2628            BRA     LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
00002964                          2629  MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
00002964  0283 00000007           2630            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
0000296A  0603 0030               2631            ADDI.B   #$30,D3                   *CONVERT TO CHAR
0000296E  6100 06EC               2632            BSR     PUSH_STACK                *PUSH TO STACK
00002972                          2633            
00002972  163C 0029               2634            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002976  6100 06E4               2635            BSR       PUSH_STACK
0000297A                          2636            
0000297A  6000 0270               2637            BRA     GET_SRC_SUCCESS                   *RETURN 
0000297E                          2638  
0000297E                          2639            
0000297E                          2640            
0000297E                          2641                      
0000297E                          2642  *** Check if source ...  <ea> = (An)+       
0000297E  41F9 00003984           2643  CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
00002984  1439 00003983           2644            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000298A  1082                    2645            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000298C  0239 0008 00003984      2646            ANDI.B  #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
00002994  0C39 0008 00003984      2647            CMPI.B  #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
0000299C  6700 0082               2648            BEQ     CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
000029A0  0CB9 00000003 00003994  2649            CMPI.L  #3,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)+ - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
000029AA  6600 0074               2650            BNE     CHECK4
000029AE                          2651            
000029AE                          2652            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
000029AE  163C 0020               2653            MOVE.B    #' ',D3
000029B2  6100 06A8               2654            BSR       PUSH_STACK
000029B6  163C 0028               2655            MOVE.B    #'(',D3
000029BA  6100 06A0               2656            BSR       PUSH_STACK
000029BE  163C 0041               2657            MOVE.B    #'A',D3
000029C2  6100 0698               2658            BSR       PUSH_STACK
000029C6                          2659  
000029C6                          2660            
000029C6                          2661            *FIND REGISTER NUMBER END LOCATION*  
000029C6  13F9 00003986 0000398C  2662            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
000029D0  0239 000F 0000398C      2663            ANDI.B   #$0F,VAR_BYTE_END
000029D8                          2664            
000029D8                          2665            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000029D8  23C5 00003990           2666            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000029DE  1439 0000398C           2667            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000029E4                          2668            
000029E4                          2669            *INTITIALIZE FOR BIT SHIFTING
000029E4  41F9 00003990           2670            LEA     VAR_TEMP_CLEANCOPY,A0
000029EA  2639 00003990           2671            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000029F0                          2672            
000029F0                          2673  LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
000029F0  0C02 0000               2674            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000029F4  6700 0008               2675            BEQ     MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
000029F8  E24B                    2676            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000029FA  5302                    2677            SUBI.B   #1,D2                     *DECREMENT COUNTER
000029FC  60F2                    2678            BRA     LOOP_SHIFTING3            *CONTINUE SHIFTING 
000029FE                          2679                                               *change: NAME OF LABEL*
000029FE                          2680  MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
000029FE  0283 00000007           2681            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002A04  0603 0030               2682            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002A08  6100 0652               2683            BSR     PUSH_STACK                *PUSH TO STACK
00002A0C                          2684            
00002A0C  163C 0029               2685            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002A10  6100 064A               2686            BSR       PUSH_STACK
00002A14  163C 002B               2687            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002A18  6100 0642               2688            BSR       PUSH_STACK
00002A1C                          2689            
00002A1C  6000 01CE               2690            BRA       GET_SRC_SUCCESS                   *RETURN 
00002A20                          2691  
00002A20                          2692            
00002A20                          2693            
00002A20                          2694                      
00002A20                          2695            *** Check if source ...  <ea> = -(An)       
00002A20  41F9 00003984           2696  CHECK4    LEA     TEMP_REGISTER_FORMAT,A0
00002A26  1439 00003983           2697            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002A2C  1082                    2698            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002A2E  0239 0010 00003984      2699            ANDI.B  #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
00002A36  0C39 0010 00003984      2700            CMPI.B  #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002A3E  6700 0082               2701            BEQ     CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002A42  0CB9 00000004 00003994  2702            CMPI.L  #4,VAR_LONG_ADDRESS_MODE_CHECK                      * -(An) - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00002A4C  6600 0074               2703            BNE     CHECK7
00002A50                          2704            
00002A50                          2705            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002A50  163C 0020               2706            MOVE.B    #' ',D3
00002A54  6100 0606               2707            BSR       PUSH_STACK
00002A58  163C 002D               2708            MOVE.B    #'-',D3
00002A5C  6100 05FE               2709            BSR       PUSH_STACK
00002A60  163C 0028               2710            MOVE.B    #'(',D3
00002A64  6100 05F6               2711            BSR       PUSH_STACK
00002A68  163C 0041               2712            MOVE.B    #'A',D3
00002A6C  6100 05EE               2713            BSR       PUSH_STACK
00002A70                          2714  
00002A70                          2715            
00002A70                          2716            *FIND REGISTER NUMBER END LOCATION*  
00002A70  13F9 00003986 0000398C  2717            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002A7A  0239 000F 0000398C      2718            AND.B   #$0F,VAR_BYTE_END
00002A82                          2719            
00002A82                          2720            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002A82  23C5 00003990           2721            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002A88  1439 0000398C           2722            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002A8E                          2723            
00002A8E                          2724            *INTITIALIZE FOR BIT SHIFTING
00002A8E  41F9 00003990           2725            LEA     VAR_TEMP_CLEANCOPY,A0
00002A94  2639 00003990           2726            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002A9A                          2727            
00002A9A                          2728  LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
00002A9A  0C02 0000               2729            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002A9E  6700 0008               2730            BEQ     MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002AA2  E24B                    2731            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002AA4  5302                    2732            SUBI.B   #1,D2                     *DECREMENT COUNTER
00002AA6  60F2                    2733            BRA     LOOP_SHIFTING4            *CONTINUE SHIFTING 
00002AA8                          2734                                               *change: NAME OF LABEL*
00002AA8                          2735  MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
00002AA8  0283 00000007           2736            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002AAE  0603 0030               2737            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002AB2  6100 05A8               2738            BSR     PUSH_STACK                *PUSH TO STACK
00002AB6                          2739            
00002AB6  163C 0029               2740            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002ABA  6100 05A0               2741            BSR       PUSH_STACK
00002ABE                          2742            
00002ABE  6000 012C               2743            BRA     GET_SRC_SUCCESS                   *RETURN
00002AC2                          2744            
00002AC2                          2745                      
00002AC2                          2746            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
00002AC2  0CB9 00000007 00003994  2747  CHECK7    CMPI.L  #7,VAR_LONG_ADDRESS_MODE_CHECK                      *IF (MODE != 111)
00002ACC  6600 011A               2748            BNE     GET_SRC_FAILED                                      *THAN BRANCH TO UNCESSFULL SRC MODE READ
00002AD0                          2749                   
00002AD0                          2750            *NEXT: (MODE == 111) 
00002AD0                          2751            *NOW: CHECK FOR SRC REGISTER 
00002AD0                          2752                  *(000 = (xxx).W)
00002AD0                          2753                  *(001 = (xxx).L)
00002AD0                          2754                  *(010 = #<data>)
00002AD0                          2755                  
00002AD0                          2756            *FIND REGISTER NUMBER END LOCATION*  
00002AD0  13F9 00003986 0000398C  2757            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002ADA  0239 000F 0000398C      2758            AND.B   #$0F,VAR_BYTE_END
00002AE2                          2759            
00002AE2                          2760            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002AE2  23C5 00003990           2761            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002AE8  1439 0000398C           2762            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002AEE                          2763            
00002AEE                          2764            *INTITIALIZE FOR BIT SHIFTING
00002AEE  41F9 00003990           2765            LEA     VAR_TEMP_CLEANCOPY,A0
00002AF4  2C39 00003990           2766            MOVE.L  VAR_TEMP_CLEANCOPY,D6
00002AFA                          2767  SRC_LOOP_SHIFTING
00002AFA  0C02 0000               2768            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002AFE  6700 0008               2769            BEQ     SRC_MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00002B02  E24E                    2770            LSR     #1,D6                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002B04  5302                    2771            SUB.B   #1,D2                     *DECREMENT COUNTER
00002B06  60F2                    2772            BRA     SRC_LOOP_SHIFTING             *CONTINUE SHIFTING
00002B08                          2773  SRC_MASKING_NEXT
00002B08  CCBC 00000007           2774            AND.L   #7,D6                     *MASK, ONLY NEED 0-2 BIT INDEXES 
00002B0E                          2775           *D3 - REGISTER NUMBER NEEDED TO CHECK WHICH W/L/#<DATA>*
00002B0E                          2776           
00002B0E                          2777  CHECK_WORD  
00002B0E  41F9 00003984           2778            LEA     TEMP_REGISTER_FORMAT,A0
00002B14  1439 00003983           2779            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002B1A  1082                    2780            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002B1C  0239 0020 00003984      2781            ANDI.B  #$20,TEMP_REGISTER_FORMAT                           * MASKS 0010 0000                                                     *change <SRC>*
00002B24  0C39 0020 00003984      2782            CMPI.B  #$20,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0010 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002B2C  6700 0026               2783            BEQ     CHECK_LONG                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00002B30  0C06 0000               2784            CMPI.B  #0,D6                          
00002B34  6600 001E               2785            BNE     CHECK_LONG 
00002B38                          2786            
00002B38                          2787            *IT IS A WORD AT THIS POINT*
00002B38                          2788            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002B38  163C 0020               2789            MOVE.B    #' ',D3
00002B3C  6100 051E               2790            BSR       PUSH_STACK
00002B40  163C 0024               2791            MOVE.B    #'$',D3
00002B44  6100 0516               2792            BSR       PUSH_STACK
00002B48  321D                    2793            MOVE.W    (A5)+,D1
00002B4A  7404                    2794            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00002B4C  6100 E6BA               2795            BSR       HEX2ASCII2STACK
00002B50  6000 009A               2796            BRA     GET_SRC_SUCCESS
00002B54                          2797  
00002B54                          2798  CHECK_LONG
00002B54  41F9 00003984           2799            LEA     TEMP_REGISTER_FORMAT,A0
00002B5A  1439 00003983           2800            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002B60  1082                    2801            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002B62  0239 0040 00003984      2802            ANDI.B  #$40,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00002B6A  0C39 0040 00003984      2803            CMPI.B  #$40,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002B72  6700 002E               2804            BEQ     CHECK_IMMEDIATE                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00002B76  0C06 0001               2805            CMPI.B  #1,D6                          
00002B7A  6600 0026               2806            BNE     CHECK_IMMEDIATE  
00002B7E                          2807  
00002B7E                          2808            *IT IS A WORD AT THIS POINT*
00002B7E                          2809            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002B7E  163C 0020               2810            MOVE.B    #' ',D3
00002B82  6100 04D8               2811            BSR       PUSH_STACK
00002B86  163C 0024               2812            MOVE.B    #'$',D3
00002B8A  6100 04D0               2813            BSR       PUSH_STACK
00002B8E  321D                    2814            MOVE.W    (A5)+,D1
00002B90  7404                    2815            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00002B92  6100 E674               2816            BSR       HEX2ASCII2STACK
00002B96  321D                    2817            MOVE.W    (A5)+,D1
00002B98  7404                    2818            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00002B9A  6100 E66C               2819            BSR       HEX2ASCII2STACK
00002B9E  6000 004C               2820            BRA     GET_SRC_SUCCESS
00002BA2                          2821            
00002BA2                          2822  CHECK_IMMEDIATE
00002BA2  41F9 00003984           2823            LEA     TEMP_REGISTER_FORMAT,A0
00002BA8  1439 00003983           2824            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002BAE  1082                    2825            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002BB0  0239 0080 00003984      2826            ANDI.B  #$80,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00002BB8  0C39 0080 00003984      2827            CMPI.B  #$80,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002BC0  6700 0026               2828            BEQ     GET_SRC_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00002BC4  0C06 0004               2829            CMPI.B  #4,D6                          
00002BC8  6600 001E               2830            BNE     GET_SRC_FAILED 
00002BCC                          2831  
00002BCC                          2832            *IT IS A WORD AT THIS POINT*
00002BCC                          2833            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002BCC  163C 0020               2834            MOVE.B    #' ',D3
00002BD0  6100 048A               2835            BSR       PUSH_STACK
00002BD4  163C 0023               2836            MOVE.B    #'#',D3
00002BD8  6100 0482               2837            BSR       PUSH_STACK
00002BDC  321D                    2838            MOVE.W    (A5)+,D1
00002BDE  7404                    2839            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00002BE0  6100 E626               2840            BSR       HEX2ASCII2STACK
00002BE4  6000 0006               2841            BRA     GET_SRC_SUCCESS
00002BE8                          2842            
00002BE8                          2843  GET_SRC_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
00002BE8  7801                    2844            MOVE.L #1,D4
00002BEA  4E75                    2845            RTS
00002BEC                          2846  GET_SRC_SUCCESS 
00002BEC  4E75                    2847            RTS
00002BEE                          2848                                 
00002BEE                          2849      
00002BEE                          2850  
00002BEE                          2851  
00002BEE                          2852  
00002BEE                          2853  
00002BEE                          2854  
00002BEE                          2855  
00002BEE                          2856  GET_EA_EA_DEST
00002BEE                          2857  *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
00002BEE                          2858      
00002BEE                          2859      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
00002BEE  2405                    2860      MOVE.L  D5,D2                           * CLEAN COPY TO D2
00002BF0  EC8A                    2861      LSR.L   #6,D2                           * [D2] Temporarily used D2 for shifting bits                *TODO: DYNAMIC MODE LOCATION
00002BF2  23C2 00003994           2862      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
00002BF8  7407                    2863      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
00002BFA  C5B9 00003994           2864      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
00002C00                          2865                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
00002C00                          2866      
00002C00                          2867      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
00002C00                          2868      *DESTINATION REGISTER FORMAT STANDARD         *
00002C00                          2869      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
00002C00                          2870      *WHEN BIT = 0(VALID ADDRESS MODE)             *
00002C00                          2871      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
00002C00                          2872      *0 - Dn                                       *
00002C00                          2873      *1 - An                                       *
00002C00                          2874      *2 - (An)                                     *
00002C00                          2875      *3 - (An)+                                    *
00002C00                          2876      *4 - -(An)                                    *
00002C00                          2877      *5 - (XXX).W                                  *
00002C00                          2878      *6 - (XXX).L                                  *
00002C00                          2879      *7 - #<data>                                  *
00002C00                          2880      ***********************************************
00002C00                          2881      
00002C00                          2882      *** Check if source ...  <ea> = Dn
00002C00                          2883  DEST_CHECK0    
00002C00  41F9 00003984           2884            LEA     TEMP_REGISTER_FORMAT,A0
00002C06  1439 00003982           2885            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002C0C  1082                    2886            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002C0E  0239 0001 00003984      2887            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
00002C16  0C39 0001 00003984      2888            CMPI.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
00002C1E  6700 006A               2889            BEQ     DEST_CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00002C22  0CB9 00000000 00003994  2890            CMPI.L     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn) - COMPARE MODES TO SEE IF IT IS THIS MODE
00002C2C  6600 005C               2891            BNE     DEST_CHECK1
00002C30                          2892            
00002C30                          2893            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002C30  163C 0020               2894            MOVE.B    #' ',D3
00002C34  6100 0426               2895            BSR       PUSH_STACK
00002C38  163C 0044               2896            MOVE.B    #'D',D3
00002C3C  6100 041E               2897            BSR       PUSH_STACK
00002C40                          2898  
00002C40                          2899            *FIND REGISTER NUMBER END LOCATION*  
00002C40  13F9 00003985 0000398C  2900            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002C4A  0239 000F 0000398C      2901            AND.B   #$0F,VAR_BYTE_END
00002C52                          2902            
00002C52                          2903            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002C52  23C5 00003990           2904            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002C58  1439 0000398C           2905            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002C5E                          2906            
00002C5E                          2907            *INTITIALIZE FOR BIT SHIFTING
00002C5E  41F9 00003990           2908            LEA     VAR_TEMP_CLEANCOPY,A0
00002C64  2639 00003990           2909            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002C6A                          2910  DEST_LOOP_SHIFTING
00002C6A  0C02 0000               2911            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002C6E  6700 0008               2912            BEQ     DEST_MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00002C72  E24B                    2913            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002C74  5302                    2914            SUB.B   #1,D2                     *DECREMENT COUNTER
00002C76  60F2                    2915            BRA     DEST_LOOP_SHIFTING             *CONTINUE SHIFTING
00002C78                          2916  DEST_MASKING_NEXT
00002C78  C6BC 00000007           2917            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002C7E  0603 0030               2918            ADD.B   #$30,D3                   *CONVERT TO CHAR
00002C82  6100 03D8               2919            BSR     PUSH_STACK                *PUSH TO STACK
00002C86                          2920            
00002C86  6000 0394               2921            BRA     GET_DST_SUCCESS           *RETURN          
00002C8A                          2922            
00002C8A                          2923            
00002C8A                          2924            *** Check if source ...  <ea> = An
00002C8A                          2925  DEST_CHECK1    
00002C8A  41F9 00003984           2926            LEA     TEMP_REGISTER_FORMAT,A0
00002C90  1439 00003982           2927            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002C96  1082                    2928            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002C98  0239 0002 00003984      2929            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
00002CA0  0C39 0002 00003984      2930            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
00002CA8  6700 006A               2931            BEQ     DEST_CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00002CAC  0CB9 00000001 00003994  2932            CMPI.L  #1,VAR_LONG_ADDRESS_MODE_CHECK                      * An - COMPARE MODES TO SEE IF IT IS THIS MODE
00002CB6  6600 005C               2933            BNE     DEST_CHECK2
00002CBA                          2934            
00002CBA                          2935            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002CBA  163C 0020               2936            MOVE.B    #' ',D3
00002CBE  6100 039C               2937            BSR       PUSH_STACK
00002CC2  163C 0041               2938            MOVE.B    #'A',D3
00002CC6  6100 0394               2939            BSR       PUSH_STACK
00002CCA                          2940  
00002CCA                          2941            
00002CCA                          2942            *FIND REGISTER NUMBER END LOCATION*  
00002CCA  13F9 00003985 0000398C  2943            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002CD4  0239 000F 0000398C      2944            AND.B   #$0F,VAR_BYTE_END
00002CDC                          2945            
00002CDC                          2946            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002CDC  23C5 00003990           2947            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002CE2  1439 0000398C           2948            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
00002CE8                          2949            
00002CE8                          2950            *INTITIALIZE FOR BIT SHIFTING
00002CE8  41F9 00003990           2951            LEA     VAR_TEMP_CLEANCOPY,A0
00002CEE  2639 00003990           2952            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002CF4                          2953  DEST_LOOP_SHIFTING1
00002CF4  0C02 0000               2954            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002CF8  6700 0008               2955            BEQ     DEST_MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00002CFC  E24B                    2956            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002CFE  5302                    2957            SUB.B   #1,D2                     *DECREMENT COUNTER
00002D00  60F2                    2958            BRA     DEST_LOOP_SHIFTING1             *CONTINUE SHIFTING
00002D02                          2959  DEST_MASKING_NEXT1
00002D02  C6BC 00000007           2960            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002D08  0603 0030               2961            ADD.B   #$30,D3                   *CONVERT TO CHAR
00002D0C  6100 034E               2962            BSR     PUSH_STACK                *PUSH TO STACK
00002D10                          2963            
00002D10  6000 030A               2964            BRA     GET_DST_SUCCESS                   *RETURN 
00002D14                          2965            
00002D14                          2966            
00002D14                          2967            
00002D14                          2968            
00002D14                          2969            *** Check if source ...  <ea> = (An)       
00002D14                          2970  DEST_CHECK2    
00002D14  41F9 00003984           2971            LEA     TEMP_REGISTER_FORMAT,A0
00002D1A  1439 00003982           2972            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002D20  1082                    2973            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002D22  0239 0004 00003984      2974            ANDI.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
00002D2A  0C39 0004 00003984      2975            CMPI.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
00002D32  6700 007A               2976            BEQ     DEST_CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002D36  0CB9 00000002 00003994  2977            CMPI.L   #2,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)  COMPARE MODES TO SEE IF IT IS THIS MODE                                                                *change: checkx++*
00002D40  6600 006C               2978            BNE     DEST_CHECK3
00002D44                          2979            
00002D44                          2980            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002D44  163C 0020               2981            MOVE.B    #' ',D3
00002D48  6100 0312               2982            BSR       PUSH_STACK
00002D4C  163C 0028               2983            MOVE.B    #'(',D3
00002D50  6100 030A               2984            BSR       PUSH_STACK
00002D54  163C 0041               2985            MOVE.B    #'A',D3
00002D58  6100 0302               2986            BSR       PUSH_STACK
00002D5C                          2987  
00002D5C                          2988            
00002D5C                          2989            *FIND REGISTER NUMBER END LOCATION*  
00002D5C  13F9 00003985 0000398C  2990            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002D66  0239 000F 0000398C      2991            AND.B   #$0F,VAR_BYTE_END
00002D6E                          2992            
00002D6E                          2993            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002D6E  23C5 00003990           2994            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002D74  1439 0000398C           2995            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002D7A                          2996            
00002D7A                          2997            *INTITIALIZE FOR BIT SHIFTING
00002D7A  41F9 00003990           2998            LEA     VAR_TEMP_CLEANCOPY,A0
00002D80  2639 00003990           2999            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002D86                          3000  DEST_LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
00002D86  0C02 0000               3001            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002D8A  6700 0008               3002            BEQ     DEST_MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002D8E  E24B                    3003            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002D90  5302                    3004            SUB.B   #1,D2                     *DECREMENT COUNTER
00002D92  60F2                    3005            BRA     DEST_LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
00002D94                          3006  DEST_MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
00002D94  0283 00000007           3007            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002D9A  0603 0030               3008            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002D9E  6100 02BC               3009            BSR     PUSH_STACK                *PUSH TO STACK
00002DA2                          3010            
00002DA2  163C 0029               3011            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002DA6  6100 02B4               3012            BSR       PUSH_STACK
00002DAA                          3013            
00002DAA  6000 0270               3014            BRA     GET_DST_SUCCESS                   *RETURN 
00002DAE                          3015  
00002DAE                          3016            
00002DAE                          3017            
00002DAE                          3018                      
00002DAE                          3019  *** Check if source ...  <ea> = (An)+       
00002DAE  41F9 00003984           3020  DEST_CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
00002DB4  1439 00003982           3021            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002DBA  1082                    3022            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002DBC  0239 0008 00003984      3023            ANDI.B  #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
00002DC4  0C39 0008 00003984      3024            CMPI.B  #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
00002DCC  6700 0082               3025            BEQ     DEST_CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002DD0  0CB9 00000003 00003994  3026            CMPI.L  #3,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)+ - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00002DDA  6600 0074               3027            BNE     DEST_CHECK4
00002DDE                          3028            
00002DDE                          3029            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002DDE  163C 0020               3030            MOVE.B    #' ',D3
00002DE2  6100 0278               3031            BSR       PUSH_STACK
00002DE6  163C 0028               3032            MOVE.B    #'(',D3
00002DEA  6100 0270               3033            BSR       PUSH_STACK
00002DEE  163C 0041               3034            MOVE.B    #'A',D3
00002DF2  6100 0268               3035            BSR       PUSH_STACK
00002DF6                          3036  
00002DF6                          3037            
00002DF6                          3038            *FIND REGISTER NUMBER END LOCATION*  
00002DF6  13F9 00003985 0000398C  3039            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002E00  0239 000F 0000398C      3040            ANDI.B   #$0F,VAR_BYTE_END
00002E08                          3041            
00002E08                          3042            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002E08  23C5 00003990           3043            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002E0E  1439 0000398C           3044            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002E14                          3045            
00002E14                          3046            *INTITIALIZE FOR BIT SHIFTING
00002E14  41F9 00003990           3047            LEA     VAR_TEMP_CLEANCOPY,A0
00002E1A  2639 00003990           3048            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002E20                          3049            
00002E20                          3050  DEST_LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
00002E20  0C02 0000               3051            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002E24  6700 0008               3052            BEQ     DEST_MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002E28  E24B                    3053            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002E2A  5302                    3054            SUBI.B   #1,D2                     *DECREMENT COUNTER
00002E2C  60F2                    3055            BRA     DEST_LOOP_SHIFTING3            *CONTINUE SHIFTING 
00002E2E                          3056                                               *change: NAME OF LABEL*
00002E2E                          3057  DEST_MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
00002E2E  0283 00000007           3058            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002E34  0603 0030               3059            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002E38  6100 0222               3060            BSR     PUSH_STACK                *PUSH TO STACK
00002E3C                          3061            
00002E3C  163C 0029               3062            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002E40  6100 021A               3063            BSR       PUSH_STACK
00002E44  163C 002B               3064            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002E48  6100 0212               3065            BSR       PUSH_STACK
00002E4C                          3066            
00002E4C  6000 01CE               3067            BRA       GET_DST_SUCCESS                   *RETURN 
00002E50                          3068  
00002E50                          3069            
00002E50                          3070            
00002E50                          3071                      
00002E50                          3072            *** Check if source ...  <ea> = -(An)       
00002E50                          3073  DEST_CHECK4    
00002E50  41F9 00003984           3074            LEA     TEMP_REGISTER_FORMAT,A0
00002E56  1439 00003982           3075            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002E5C  1082                    3076            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002E5E  0239 0010 00003984      3077            ANDI.B  #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
00002E66  0C39 0010 00003984      3078            CMPI.B  #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002E6E  6700 0082               3079            BEQ     DEST_CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002E72  0CB9 00000004 00003994  3080            CMPI.L  #4,VAR_LONG_ADDRESS_MODE_CHECK                      * -(An) - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00002E7C  6600 0074               3081            BNE     DEST_CHECK7
00002E80                          3082            
00002E80                          3083            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002E80  163C 0020               3084            MOVE.B    #' ',D3
00002E84  6100 01D6               3085            BSR       PUSH_STACK
00002E88  163C 002D               3086            MOVE.B    #'-',D3
00002E8C  6100 01CE               3087            BSR       PUSH_STACK
00002E90  163C 0028               3088            MOVE.B    #'(',D3
00002E94  6100 01C6               3089            BSR       PUSH_STACK
00002E98  163C 0041               3090            MOVE.B    #'A',D3
00002E9C  6100 01BE               3091            BSR       PUSH_STACK
00002EA0                          3092  
00002EA0                          3093            
00002EA0                          3094            *FIND REGISTER NUMBER END LOCATION*  
00002EA0  13F9 00003985 0000398C  3095            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002EAA  0239 000F 0000398C      3096            AND.B   #$0F,VAR_BYTE_END
00002EB2                          3097            
00002EB2                          3098            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002EB2  23C5 00003990           3099            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002EB8  1439 0000398C           3100            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002EBE                          3101            
00002EBE                          3102            *INTITIALIZE FOR BIT SHIFTING
00002EBE  41F9 00003990           3103            LEA     VAR_TEMP_CLEANCOPY,A0
00002EC4  2639 00003990           3104            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002ECA                          3105            
00002ECA                          3106  DEST_LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
00002ECA  0C02 0000               3107            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002ECE  6700 0008               3108            BEQ     DEST_MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002ED2  E24B                    3109            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002ED4  5302                    3110            SUBI.B   #1,D2                     *DECREMENT COUNTER
00002ED6  60F2                    3111            BRA     DEST_LOOP_SHIFTING4            *CONTINUE SHIFTING 
00002ED8                          3112                                               *change: NAME OF LABEL*
00002ED8                          3113  DEST_MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
00002ED8  0283 00000007           3114            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002EDE  0603 0030               3115            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002EE2  6100 0178               3116            BSR     PUSH_STACK                *PUSH TO STACK
00002EE6                          3117            
00002EE6  163C 0029               3118            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002EEA  6100 0170               3119            BSR       PUSH_STACK
00002EEE                          3120            
00002EEE  6000 012C               3121            BRA     GET_DST_SUCCESS                   *RETURN
00002EF2                          3122            
00002EF2                          3123                      
00002EF2                          3124            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
00002EF2                          3125  DEST_CHECK7    
00002EF2  0CB9 00000007 00003994  3126            CMPI.L  #7,VAR_LONG_ADDRESS_MODE_CHECK                      *IF (MODE != 111)
00002EFC  6600 011A               3127            BNE     GET_DST_FAILED                                      *THAN BRANCH TO UNCESSFULL SRC MODE READ
00002F00                          3128                   
00002F00                          3129            *NEXT: (MODE == 111) 
00002F00                          3130            *NOW: CHECK FOR SRC REGISTER 
00002F00                          3131                  *(000 = (xxx).W)
00002F00                          3132                  *(001 = (xxx).L)
00002F00                          3133                  *(010 = #<data>)
00002F00                          3134                  
00002F00                          3135            *FIND REGISTER NUMBER END LOCATION*  
00002F00  13F9 00003985 0000398C  3136            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002F0A  0239 000F 0000398C      3137            AND.B   #$0F,VAR_BYTE_END
00002F12                          3138            
00002F12                          3139            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002F12  23C5 00003990           3140            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002F18  1439 0000398C           3141            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002F1E                          3142            
00002F1E                          3143            *INTITIALIZE FOR BIT SHIFTING
00002F1E  41F9 00003990           3144            LEA     VAR_TEMP_CLEANCOPY,A0
00002F24  2C39 00003990           3145            MOVE.L  VAR_TEMP_CLEANCOPY,D6
00002F2A                          3146  DEST_LOOP_SHIFTING7
00002F2A  0C02 0000               3147            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002F2E  6700 0008               3148            BEQ     DEST_MASKING_NEXT7              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00002F32  E24E                    3149            LSR     #1,D6                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002F34  5302                    3150            SUB.B   #1,D2                     *DECREMENT COUNTER
00002F36  60F2                    3151            BRA     DEST_LOOP_SHIFTING7             *CONTINUE SHIFTING
00002F38                          3152  DEST_MASKING_NEXT7
00002F38  CCBC 00000007           3153            AND.L   #7,D6                     *MASK, ONLY NEED 0-2 BIT INDEXES 
00002F3E                          3154           *D3 - REGISTER NUMBER NEEDED TO CHECK WHICH W/L/#<DATA>*
00002F3E                          3155            
00002F3E                          3156  DEST_CHECK_WORD  
00002F3E  41F9 00003984           3157            LEA     TEMP_REGISTER_FORMAT,A0
00002F44  1439 00003982           3158            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002F4A  1082                    3159            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002F4C  0239 0020 00003984      3160            ANDI.B  #$20,TEMP_REGISTER_FORMAT                           * MASKS 0010 0000                                                     *change <SRC>*
00002F54  0C39 0020 00003984      3161            CMPI.B  #$20,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0010 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002F5C  6700 0026               3162            BEQ     DEST_CHECK_LONG                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00002F60  0C06 0000               3163            CMPI.B  #0,D6                                                   *COMPARE REGISTER NUMBER WITH (000 == 000) FOR WORD
00002F64  6600 001E               3164            BNE     DEST_CHECK_LONG                                      * THE REGISTER NUMBER DOESN'T MATCH "(XXX).W" -> SO MOVE ON       
00002F68                          3165            *IT IS A WORD AT THIS POINT*
00002F68                          3166            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002F68  163C 0020               3167            MOVE.B    #' ',D3
00002F6C  6100 00EE               3168            BSR       PUSH_STACK
00002F70  163C 0024               3169            MOVE.B    #'$',D3
00002F74  6100 00E6               3170            BSR       PUSH_STACK
00002F78  321D                    3171            MOVE.W    (A5)+,D1
00002F7A  7404                    3172            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00002F7C  6100 E28A               3173            BSR       HEX2ASCII2STACK
00002F80  6000 009A               3174            BRA       GET_DST_SUCCESS
00002F84                          3175  
00002F84                          3176  DEST_CHECK_LONG
00002F84  41F9 00003984           3177            LEA     TEMP_REGISTER_FORMAT,A0
00002F8A  1439 00003982           3178            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002F90  1082                    3179            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002F92  0239 0040 00003984      3180            ANDI.B  #$40,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00002F9A  0C39 0040 00003984      3181            CMPI.B  #$40,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002FA2  6700 002E               3182            BEQ     DEST_CHECK_IMMEDIATE                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00002FA6  0C06 0001               3183            CMPI.B  #1,D6                                                   *COMPARE REGISTER NUMBER WITH (001 == 001) FOR WORD
00002FAA  6600 0026               3184            BNE     DEST_CHECK_IMMEDIATE                                      * THE REGISTER NUMBER DOESN'T MATCH "(XXX).L" -> SO MOVE ON 
00002FAE                          3185            *IT IS A WORD AT THIS POINT*
00002FAE                          3186            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002FAE  163C 0020               3187            MOVE.B    #' ',D3
00002FB2  6100 00A8               3188            BSR       PUSH_STACK
00002FB6  163C 0024               3189            MOVE.B    #'$',D3
00002FBA  6100 00A0               3190            BSR       PUSH_STACK
00002FBE  321D                    3191            MOVE.W    (A5)+,D1        * GET NEXT WORD INTO STACK
00002FC0  7404                    3192            MOVE.L    #4,D2           * SETS SIZE = 4 FOR CONVERSION TO ASCII
00002FC2  6100 E244               3193            BSR       HEX2ASCII2STACK
00002FC6  321D                    3194            MOVE.W    (A5)+,D1        * GET NEXT WORD INTO STACK
00002FC8  7404                    3195            MOVE.L    #4,D2          
00002FCA  6100 E23C               3196            BSR       HEX2ASCII2STACK
00002FCE  6000 004C               3197            BRA     GET_DST_SUCCESS
00002FD2                          3198            
00002FD2                          3199  DEST_CHECK_IMMEDIATE
00002FD2  41F9 00003984           3200            LEA     TEMP_REGISTER_FORMAT,A0
00002FD8  1439 00003982           3201            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002FDE  1082                    3202            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002FE0  0239 0080 00003984      3203            ANDI.B  #$80,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00002FE8  0C39 0080 00003984      3204            CMPI.B  #$80,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002FF0  6700 0026               3205            BEQ     GET_DST_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00002FF4  0C06 0004               3206            CMPI.B  #4,D6                                               * COMPARE REGISTER NUMBER WITH (010 == 010) FOR WORD
00002FF8  6600 001E               3207            BNE     GET_DST_FAILED                                      * THE REGISTER NUMBER DOESN'T MATCH "#<DATA>" -> SO MOVE ON 
00002FFC                          3208            
00002FFC                          3209            *IT IS A WORD AT THIS POINT*
00002FFC                          3210            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002FFC  163C 0020               3211            MOVE.B    #' ',D3
00003000  6100 005A               3212            BSR       PUSH_STACK
00003004  163C 0023               3213            MOVE.B    #'#',D3
00003008  6100 0052               3214            BSR       PUSH_STACK
0000300C  321D                    3215            MOVE.W    (A5)+,D1
0000300E  7404                    3216            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00003010  6100 E1F6               3217            BSR       HEX2ASCII2STACK
00003014  6000 0006               3218            BRA       GET_DST_SUCCESS
00003018                          3219            
00003018                          3220  GET_DST_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
00003018  7801                    3221            MOVE.L #1,D4
0000301A  4E75                    3222            RTS
0000301C                          3223  GET_DST_SUCCESS 
0000301C  4E75                    3224            RTS
0000301E                          3225  
0000301E                          3226  
0000301E                          3227  *---------------------------------------------------------------------------*
0000301E                          3228  * STACK/QUEUE INTERFACE
0000301E                          3229  *---------------------------------------------------------------------------*
0000301E                          3230  PRINT_STACK
0000301E  0C39 0000 0000397E      3231            CMP.B     #0,COUNTER
00003026  6700 000E               3232            BEQ       PRINT_STACK_RETURN             *CHECK IF LOOP IS FINISHED
0000302A                          3233            
0000302A                          3234  PRINT_STACK_HELPER
0000302A  6100 0038               3235            BSR      POP_STACK          *PRINTS ADDRESS
0000302E  103C 0006               3236            MOVE.B   #6,D0              *Display single character in D1.B. 
00003032  4E4F                    3237            TRAP     #15             *ACTIVATES PRINT
00003034                          3238  
00003034  60E8                    3239            BRA       PRINT_STACK
00003036                          3240  PRINT_STACK_RETURN
00003036  4E75                    3241            RTS
00003038                          3242            
00003038                          3243            
00003038                          3244  PRINT_QUEUE
00003038  0C39 0000 0000397E      3245            CMP.B     #0,COUNTER
00003040  6700 0018               3246            BEQ       PRINT_QUEUE_RETURN             *CHECK IF LOOP IS FINISHED
00003044                          3247            
00003044                          3248  PRINT_QUEUE_HELPER
00003044  33F9 0000397E 00003980  3249            MOVE.W   COUNTER,QUEUE_COUNTER
0000304E  6100 0022               3250            BSR      POP_FRONT          *PRINTS ADDRESS
00003052  103C 0006               3251            MOVE.B   #6,D0              *Display single character in D1.B. 
00003056  4E4F                    3252            TRAP     #15             *ACTIVATES PRINT
00003058                          3253  
00003058  60DE                    3254            BRA       PRINT_QUEUE
0000305A                          3255  PRINT_QUEUE_RETURN
0000305A  4E75                    3256            RTS
0000305C                          3257            
0000305C                          3258  *PUSHES.W CONTENTS OF [D3] INTO STACK          
0000305C                          3259  PUSH_STACK
0000305C  1503                    3260              MOVE.B  D3,-(A2)
0000305E  6100 0058               3261              BSR     INCREMENT
00003062  4E75                    3262              RTS
00003064                          3263  *POPS.W TOP OF STACK INTO [D1], SO ITS READY TO PRINT WITH TRAP 15
00003064                          3264  *         MOVE.W   (A2)+,D1           *PRINTS ADDRESS
00003064                          3265  *         MOVE.B   #15,D0             *PRINTS ACCORDING TO D2 BASE VALUE
00003064                          3266  *         MOVE.B   #16,D2             *PRINTS BASED 16 NUMBER
00003064                          3267  *         TRAP        #15             *ACTIVATES PRINT
00003064                          3268  POP_STACK
00003064  BECA                    3269              CMPA.W   A2,SP            *CHECKS IF THERE IS ANYTHING TO PUSH
00003066  6700 0008               3270              BEQ     POP_RETURN        *IF NOTHING TO PUSH THAN JUST RETURN
0000306A  121A                    3271              MOVE.B  (A2)+,D1 
0000306C  6100 0052               3272              BSR     DECREMENT
00003070                          3273  POP_RETURN
00003070  4E75                    3274              RTS 
00003072                          3275        
00003072                          3276  *USE [A4] AS SECOND POINTER IN SHIFTING      
00003072  0C39 0000 00003980      3277  POP_FRONT   CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
0000307A  6700 0030               3278              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
0000307E                          3279              
0000307E                          3280              
0000307E                          3281              *POSITION THE POINTERS A[4] RIGHT BEHIND A[2] WHICH IS RIGHT BEHIND STACK
0000307E  347C 7000               3282              MOVEA.W #STACK,A2   *START A2 AT STACK
00003082  0622 0000               3283              ADD.B   #0,-(A2)    *SHIFT A2 TO THE BOTTOM OF THE STACK
00003086  384A                    3284              MOVEA.W A2,A4     *START A4 RIGHT ABOVE A2
00003088  0624 0000               3285              ADD.B   #0,-(A4)  *leash one more higher in stack (a4)
0000308C  1212                    3286              MOVE.B  (A2),D1     *POP CONTENTS INTO D1
0000308E                          3287  POP_SHIFT_LOOP
0000308E  0C39 0000 00003980      3288              CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
00003096  6700 0014               3289              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
0000309A  1494                    3290              MOVE.B  (A4),(A2)   *SHIFT CONTENT DOWN THE STACK
0000309C  0624 0000               3291              ADD.B   #0,-(A4)
000030A0  0622 0000               3292              ADD.B   #0,-(A2) *SHIFT POINTERS DOWN THE STACK
000030A4  5339 00003980           3293              SUB.B   #1,QUEUE_COUNTER *DECREMENT INTERNAL QUEUE COUNTER
000030AA                          3294              
000030AA  60E2                    3295              BRA     POP_SHIFT_LOOP
000030AC                          3296                          
000030AC                          3297  POP_FRONT_RETURN 
000030AC                          3298              *RESET A2 BACK TO SP
000030AC  347C 7000               3299              MOVEA.W #STACK,A2    
000030B0  5339 0000397E           3300              SUB.B   #1,COUNTER *DECREMENT STACK COUNTER       
000030B6  4E75                    3301              RTS   
000030B8                          3302  
000030B8                          3303  INCREMENT
000030B8  5239 0000397E           3304              ADD.B   #1, COUNTER
000030BE  4E75                    3305              RTS           
000030C0                          3306  DECREMENT
000030C0  5339 0000397E           3307              SUB.B   #1, COUNTER
000030C6  4E75                    3308              RTS           
000030C8                          3309  CLEAR_STACK
000030C8  0C39 0000 0000397E      3310              CMP.B     #0,COUNTER
000030D0  6700 0006               3311              BEQ       CLEAR_RETURN
000030D4  618E                    3312              BSR       POP_STACK
000030D6  60F0                    3313              BRA       CLEAR_STACK
000030D8                          3314   
000030D8                          3315  CLEAR_RETURN
000030D8  4E75                    3316              RTS    
000030DA                          3317  *---------------------------------------------------------------------------*
000030DA                          3318  * TERMINATE
000030DA                          3319  *---------------------------------------------------------------------------*
000030DA                          3320  TERMINATE   
000030DA  43F9 0000348A           3321              LEA     FINMSG,A1
000030E0  103C 000E               3322              MOVE.B  #14,D0
000030E4  4E4F                    3323              TRAP    #15
000030E6                          3324  
000030E6  103C 0009               3325              MOVE.B  #9,D0
000030EA  4E4F                    3326              TRAP    #15
000030EC                          3327  
000030EC                          3328  *---------------------------------------------------------------------------*
000030EC                          3329  * Data storage                                                 
000030EC                          3330  *---------------------------------------------------------------------------*  
000030EC                          3331  WELCOME
000030EC= 20 20 20 20 20 20 ...   3332              DC.B '                         ___     ___ ___        ___   ___ ___                 ',CR,LF
0000313C= 3D 3D 3D 3D 3D 20 ...   3333              DC.B '=====           \  /\  /|___|   |   |   ||\  /||___    | |   |           =====',CR,LF
0000318C= 3D 3D 3D 3D 3D 20 ...   3334              DC.B '=====            \/  \/ |___|___|___|___|| \/ ||___    | |___|           =====',CR,LF
000031DC                          3335      
000031DC= 20 20 20 20 20 20 ...   3336              DC.B '                        ___ ___ ___  ___      ___                             ',CR,LF
0000322C= 20 20 20 20 20 20 ...   3337              DC.B '                       |     | |___)|    |   |___                             ',CR,LF 
0000327C= 20 20 20 20 20 20 ...   3338              DC.B '                       |___ _|_|\___|___ |___|___                             ',CR,LF
000032CC                          3339      
000032CC= 20 20 20 20 20 20 ...   3340              DC.B '           __  ___ ___   _   ___  ___  ___        ___      ___ ___            ',CR,LF
0000331C= 3D 3D 3D 3D 3D 20 ...   3341              DC.B '=====     |  \  | |___  /_\ |___ |___ |___ |\  /||___||   |___|___)      =====',CR,LF 
0000336C= 3D 3D 3D 3D 3D 20 ...   3342              DC.B '=====     |__/ _|_ ___|/   \ ___| ___||___ | \/ ||___||___|___|\___      =====',CR,LF,CR,LF,CR,LF,0
000033C1                          3343  
000033C1                          3344  PROMPT_START
000033C1= 50 6C 65 61 73 65 ...   3345              DC.B    'Please enter a hexadecimal starting address.',CR,LF,0
000033F0                          3346      
000033F0                          3347  PROMPT_END
000033F0= 50 6C 65 61 73 65 ...   3348              DC.B    'Please enter a hexadecimal ending address.',CR,LF,0
0000341D= 0D 0A 48 69 74 20 ...   3349  DISP_NEXT   DC.B    CR,LF,'Hit Enter to print the next 30 lines.',CR,LF,0            
00003447= 57 6F 75 6C 64 20 ...   3350  REPEATMSG   DC.B    'Would you like to run again? Press Y to continue or N to finish.',CR,LF,0
0000348A= 54 68 61 6E 6B 20 ...   3351  FINMSG      DC.B    'Thank you for using Circle Disassembler.',CR,LF,0
000034B5= 45 72 72 6F 72 3A ...   3352  ERRMSG_1    DC.B    'Error: Invalid Input Address',CR,LF,0
000034D4= 45 72 72 6F 72 3A ...   3353  ERRMSG_3    DC.B    'Error: Invalid Input Address (Odd)',CR,LF,0
000034F9= 45 72 72 6F 72 3A ...   3354  ERRMSG_5    DC.B    'Error: Invalid Input Address (start > end)',CR,LF,0
00003526                          3355  
00003526                          3356  VR_S_ADDR   DS.B    80                      * allocate storage space for the starting address
00003576                          3357  VR_E_ADDR   DS.B    80                      * allocate storage space for the ending address
000035C6                          3358  S_ADDR_HX   DS.L    1                       * allocate storage space for the starting address in hex
000035CA                          3359  E_ADDR_HX   DS.L    1                       * allocate storage space for the ending address in hex
000035CE= 0D 0A 00                3360  ENDLINE_M   DC.B    CR,LF,0
000035D1                          3361  TMPINPUT    DS.B    80                      * temp store user input
00003621                          3362  TMPOUTPUT   DS.B    80                      * temp store prog output
00003671= 20 20 20 4F 52 49 ...   3363  DISP_ORI_B  DC.B    '   ORI.B',0
0000367A= 20 20 20 4F 52 49 ...   3364  DISP_ORI_W  DC.B    '   ORI.W',0
00003683= 20 20 20 4F 52 49 ...   3365  DISP_ORI_L  DC.B    '   ORI.L',0
0000368C= 20 20 20 45 4F 52 ...   3366  DISP_EORI_B  DC.B    '   EORI.B',0
00003696= 20 20 20 45 4F 52 ...   3367  DISP_EORI_W  DC.B    '   EORI.W',0
000036A0= 20 20 20 45 4F 52 ...   3368  DISP_EORI_L  DC.B    '   EORI.L',0
000036AA= 20 20 20 42 54 53 ...   3369  DISP_BTST   DC.B    '   BTST',0
000036B2= 20 20 20 43 4D 50 ...   3370  DISP_CMPI_B  DC.B    '   CMPI.B',0
000036BC= 20 20 20 43 4D 50 ...   3371  DISP_CMPI_W  DC.B    '   CMPI.W',0
000036C6= 20 20 20 43 4D 50 ...   3372  DISP_CMPI_L  DC.B    '   CMPI.L',0
000036D0= 20 20 20 44 41 54 ...   3373  DISP_DATA   DC.B    '   DATA',0
000036D8= 20 20 20 4D 4F 56 ...   3374  DISP_MOVE_B DC.B    '   MOVE.B',0
000036E2= 20 20 20 4D 4F 56 ...   3375  DISP_MOVE_W DC.B    '   MOVE.W',0
000036EC= 20 20 20 4D 4F 56 ...   3376  DISP_MOVE_L DC.B    '   MOVE.L',0
000036F6= 20 20 20 52 54 53 00    3377  DISP_RTS    DC.B    '   RTS',0
000036FD= 20 20 20 4A 53 52 00    3378  DISP_JSR    DC.B    '   JSR',0
00003704= 20 20 20 4E 45 47 ...   3379  DISP_NEG_B    DC.B    '   NEG.B',0
0000370D= 20 20 20 4E 45 47 ...   3380  DISP_NEG_W    DC.B    '   NEG.W',0
00003716= 20 20 20 4E 45 47 ...   3381  DISP_NEG_L    DC.B    '   NEG.L',0
0000371F= 20 20 20 4E 4F 54 ...   3382  DISP_NOT_B  DC.B    '   NOT.B',0
00003728= 20 20 20 4E 4F 54 ...   3383  DISP_NOT_W  DC.B    '   NOT.W',0
00003731= 20 20 20 4E 4F 54 ...   3384  DISP_NOT_L  DC.B    '   NOT.L',0
0000373A= 20 20 20 4C 45 41 00    3385  DISP_LEA    DC.B    '   LEA',0
00003741= 20 20 20 4D 4F 56 ...   3386  DISP_MOVEM_W    DC.B    '   MOVEM.W',0
0000374C= 20 20 20 4D 4F 56 ...   3387  DISP_MOVEM_L    DC.B    '   MOVEM.L',0
00003757= 20 20 20 41 44 44 ...   3388  DISP_ADDQ_B DC.B    '   ADDQ.B',0
00003761= 20 20 20 41 44 44 ...   3389  DISP_ADDQ_W DC.B    '   ADDQ.W',0
0000376B= 20 20 20 41 44 44 ...   3390  DISP_ADDQ_L DC.B    '   ADDQ.L',0
00003775= 20 20 20 44 49 56 ...   3391  DISP_DIVS   DC.B    '   DIVS',0
0000377D= 20 20 20 53 55 42 ...   3392  DISP_SUB_B  DC.B    '   SUB.B',0
00003786= 20 20 20 53 55 42 ...   3393  DISP_SUB_W  DC.B    '   SUB.W',0
0000378F= 20 20 20 53 55 42 ...   3394  DISP_SUB_L  DC.B    '   SUB.L',0
00003798= 20 20 20 53 55 42 ...   3395  DISP_SUBI_B  DC.B    '   SUBI.B',0
000037A2= 20 20 20 53 55 42 ...   3396  DISP_SUBI_W  DC.B    '   SUBI.W',0
000037AC= 20 20 20 53 55 42 ...   3397  DISP_SUBI_L  DC.B    '   SUBI.L',0
000037B6= 20 20 20 53 55 42 ...   3398  DISP_SUBA_W  DC.B    '   SUBA.W',0
000037C0= 20 20 20 53 55 42 ...   3399  DISP_SUBA_L  DC.B    '   SUBA.L',0
000037CA= 20 20 20 45 4F 52 ...   3400  DISP_EOR_B  DC.B    '   EOR.B',0
000037D3= 20 20 20 45 4F 52 ...   3401  DISP_EOR_W  DC.B    '   EOR.W',0
000037DC= 20 20 20 45 4F 52 ...   3402  DISP_EOR_L  DC.B    '   EOR.L',0
000037E5= 20 20 20 43 4D 50 ...   3403  DISP_CMP_B  DC.B    '   CMP.B',0
000037EE= 20 20 20 43 4D 50 ...   3404  DISP_CMP_W  DC.B    '   CMP.W',0
000037F7= 20 20 20 43 4D 50 ...   3405  DISP_CMP_L  DC.B    '   CMP.L',0
00003800= 20 20 20 43 4D 50 ...   3406  DISP_CMPA_W  DC.B    '   CMPA.W',0
0000380A= 20 20 20 43 4D 50 ...   3407  DISP_CMPA_L  DC.B    '   CMPA.L',0
00003814= 20 20 20 4D 55 4C ...   3408  DISP_MULS_W DC.B    '   MULS.W',0
0000381E= 20 20 20 41 4E 44 ...   3409  DISP_AND_B  DC.B    '   AND.B',0
00003827= 20 20 20 41 4E 44 ...   3410  DISP_AND_W  DC.B    '   AND.W',0
00003830= 20 20 20 41 4E 44 ...   3411  DISP_AND_L  DC.B    '   AND.L',0
00003839= 20 20 20 41 44 44 ...   3412  DISP_ADD_B  DC.B    '   ADD.B',0
00003842= 20 20 20 41 44 44 ...   3413  DISP_ADD_W  DC.B    '   ADD.W',0
0000384B= 20 20 20 41 44 44 ...   3414  DISP_ADD_L  DC.B    '   ADD.L',0
00003854= 20 20 20 41 44 44 ...   3415  DISP_ADDA_W DC.B    '   ADDA.W',0
0000385E= 20 20 20 41 44 44 ...   3416  DISP_ADDA_L DC.B    '   ADDA.L',0
00003868= 20 20 20 4C 53 52 ...   3417  DISP_LSR_B  DC.B    '   LSR.B',0
00003871= 20 20 20 4C 53 4C ...   3418  DISP_LSL_B  DC.B    '   LSL.B',0
0000387A= 20 20 20 4C 53 52 ...   3419  DISP_LSR_W  DC.B    '   LSR.W',0
00003883= 20 20 20 4C 53 4C ...   3420  DISP_LSL_W  DC.B    '   LSL.W',0
0000388C= 20 20 20 4C 53 52 ...   3421  DISP_LSR_L  DC.B    '   LSR.L',0
00003895= 20 20 20 4C 53 4C ...   3422  DISP_LSL_L  DC.B    '   LSL.L',0
0000389E= 20 20 20 41 53 52 ...   3423  DISP_ASR_B  DC.B    '   ASR.B',0
000038A7= 20 20 20 41 53 4C ...   3424  DISP_ASL_B  DC.B    '   ASL.B',0
000038B0= 20 20 20 41 53 52 ...   3425  DISP_ASR_W  DC.B    '   ASR.W',0
000038B9= 20 20 20 41 53 4C ...   3426  DISP_ASL_W  DC.B    '   ASL.W',0
000038C2= 20 20 20 41 53 52 ...   3427  DISP_ASR_L  DC.B    '   ASR.L',0
000038CB= 20 20 20 41 53 4C ...   3428  DISP_ASL_L  DC.B    '   ASL.L',0
000038D4= 20 20 20 52 4F 52 ...   3429  DISP_ROR_B  DC.B    '   ROR.B',0
000038DD= 20 20 20 52 4F 4C ...   3430  DISP_ROL_B  DC.B    '   ROL.B',0
000038E6= 20 20 20 52 4F 52 ...   3431  DISP_ROR_W  DC.B    '   ROR.W',0
000038EF= 20 20 20 52 4F 4C ...   3432  DISP_ROL_W  DC.B    '   ROL.W',0
000038F8= 20 20 20 52 4F 52 ...   3433  DISP_ROR_L  DC.B    '   ROR.L',0
00003901= 20 20 20 52 4F 4C ...   3434  DISP_ROL_L  DC.B    '   ROL.L',0
0000390A= 20 20 20 42 52 41 00    3435  DISP_BRA    DC.B    '   BRA',0
00003911= 20 20 20 42 4C 54 00    3436  DISP_BLT    DC.B    '   BLT',0
00003918= 20 20 20 42 45 51 00    3437  DISP_BEQ    DC.B    '   BEQ',0
0000391F= 20 20 20 42 4E 45 00    3438  DISP_BNE    DC.B    '   BNE',0
00003926= 20 20 20 42 48 49 00    3439  DISP_BHI    DC.B    '   BHI',0
0000392D= 20 20 20 4D 4F 56 ...   3440  DISP_MOVEA_W    DC.B    '   MOVEA.W',0
00003938= 20 20 20 4D 4F 56 ...   3441  DISP_MOVEA_L    DC.B    '   MOVEA.L',0
00003943                          3442  
00003943= 20 20 20 24 00          3443  DISP_HEX     DC.B    '   $',0
00003948= 20 20 20 44 00          3444  DISP_D  DC.B    '   D',0
0000394D= 20 20 20 41 00          3445  DISP_A  DC.B    '   A',0
00003952= 20 20 20 28 00          3446  DISP_OP  DC.B    '   (',0
00003957= 29 00                   3447  DISP_CP  DC.B   ')',0
00003959= 20 20 20 28 41 00       3448  DISP_AOP  DC.B    '   (A',0
0000395F                          3449  
0000395F= 20 20 20 2D 28 41 00    3450  DISP_PRE    DC.B    '   -(A',0
00003966= 29 2B 00                3451  DISP_POST   DC.B    ')+',0
00003969= 20 20 20 23 00          3452  DISP_LB DC.B    '   #',0
0000396E= 30 00                   3453  DISP_0  DC.B    '0',0
00003970= 31 00                   3454  DISP_1  DC.B    '1',0
00003972= 32 00                   3455  DISP_2  DC.B    '2',0
00003974= 33 00                   3456  DISP_3  DC.B    '3',0
00003976= 34 00                   3457  DISP_4  DC.B    '4',0
00003978= 35 00                   3458  DISP_5  DC.B    '5',0
0000397A= 36 00                   3459  DISP_6  DC.B    '6',0
0000397C= 37 00                   3460  DISP_7  DC.B    '7',0
0000397E                          3461  
0000397E                          3462  *STACK INTERFACE VARIABLES*
0000397E                          3463  COUNTER         DS.W    1
00003980                          3464  QUEUE_COUNTER   DS.W    1
00003982                          3465  
00003982                          3466  *EA DECODING INTERFACE VARIABLES* 
00003982                          3467  DEST_REGISTER_FORMAT    DS.B    1           *all address modes acceptable standard
00003983                          3468  SRC_REGISTER_FORMAT  DS.B    1           *all address modes acceptable standard
00003984                          3469  TEMP_REGISTER_FORMAT    DS.B    1           *place holder for masking other register formats
00003985                          3470  
00003985                          3471  *FORMAT OF WHERE TO GET THE EA BY THE ENDING BIT AND STARTING BIT
00003985                          3472  * WORD + WORD = LONG
00003985                          3473  * (STARTING BIT) + (ENDING BIT) = 2 HEX CHAR
00003985                          3474  * A              + F            = AF         <= EXAMPLE
00003985                          3475  *(10TH BIT)      + (15TH BIT)   = CHECK BITS 15 THROUGH 10
00003985                          3476  GET_DST_START_END    DS.B    1
00003986                          3477  GET_SRC_START_END    DS.B    1
00003987                          3478  
00003987                          3479  *STORES THE START + END BITS HERE (FROM ABOVE)
00003988                          3480  VAR_BYTE_START      DS.L    1
0000398C                          3481  VAR_BYTE_END        DS.L    1
00003990                          3482  VAR_TEMP_CLEANCOPY  DS.L    1
00003994                          3483  
00003994                          3484  VAR_LONG_ADDRESS_MODE_CHECK        DS.L    1       *holds the bits 0-2 in long form
00003998                          3485  
00003998                          3486  *MORE FOR STACK USAGE*
00003998= 2C 00                   3487  DISP_COMMA  DC.B    ',',0
0000399A= 20 20 20 00             3488  DISP_INDENT  DC.B    '   ',0
0000399E                          3489  
0000399E                          3490  *NEXT WORD POINTER: FOR IDENTIFING (xxx).W or (xxx).L*
0000399E                          3491  POINTER_WORD    DS.W       1
000039A0                          3492  
000039A0                          3493  
000039A0                          3494  
000039A0                          3495  *---------------------------------------------------------------------------*
000039A0                          3496  * Ends program
000039A0                          3497  *---------------------------------------------------------------------------*
000039A0                          3498              END    START                    * last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASC2HXLP            1164
ASCII2HEX           115E
ASC_ERR             11C0
ASC_LOW             11A2
ASC_NUM             11B2
ASC_SFT             11BA
ASC_UPP             11AA
CHECK0              27D0
CHECK1              285A
CHECK2              28E4
CHECK3              297E
CHECK4              2A20
CHECK7              2AC2
CHECK_IMMEDIATE     2BA2
CHECK_LONG          2B54
CHECK_WORD          2B0E
CLEAR_RETURN        30D8
CLEAR_STACK         30C8
COUNTER             397E
CR                  D
DECREMENT           30C0
DEST_CHECK0         2C00
DEST_CHECK1         2C8A
DEST_CHECK2         2D14
DEST_CHECK3         2DAE
DEST_CHECK4         2E50
DEST_CHECK7         2EF2
DEST_CHECK_IMMEDIATE  2FD2
DEST_CHECK_LONG     2F84
DEST_CHECK_WORD     2F3E
DEST_LOOP_SHIFTING  2C6A
DEST_LOOP_SHIFTING1  2CF4
DEST_LOOP_SHIFTING2  2D86
DEST_LOOP_SHIFTING3  2E20
DEST_LOOP_SHIFTING4  2ECA
DEST_LOOP_SHIFTING7  2F2A
DEST_MASKING_NEXT   2C78
DEST_MASKING_NEXT1  2D02
DEST_MASKING_NEXT2  2D94
DEST_MASKING_NEXT3  2E2E
DEST_MASKING_NEXT4  2ED8
DEST_MASKING_NEXT7  2F38
DEST_MODE           2388
DEST_REGISTER       2658
DEST_REGISTER_FORMAT  3982
DISPLAY_30_LINES    130C
DISP_0              396E
DISP_1              3970
DISP_2              3972
DISP_3              3974
DISP_4              3976
DISP_5              3978
DISP_6              397A
DISP_7              397C
DISP_A              394D
DISP_ADDA_L         385E
DISP_ADDA_W         3854
DISP_ADDQ_B         3757
DISP_ADDQ_L         376B
DISP_ADDQ_W         3761
DISP_ADD_B          3839
DISP_ADD_L          384B
DISP_ADD_W          3842
DISP_AND_B          381E
DISP_AND_L          3830
DISP_AND_W          3827
DISP_AOP            3959
DISP_ASL_B          38A7
DISP_ASL_L          38CB
DISP_ASL_W          38B9
DISP_ASR_B          389E
DISP_ASR_L          38C2
DISP_ASR_W          38B0
DISP_BEQ            3918
DISP_BHI            3926
DISP_BLT            3911
DISP_BNE            391F
DISP_BRA            390A
DISP_BTST           36AA
DISP_CMPA_L         380A
DISP_CMPA_W         3800
DISP_CMPI_B         36B2
DISP_CMPI_L         36C6
DISP_CMPI_W         36BC
DISP_CMP_B          37E5
DISP_CMP_L          37F7
DISP_CMP_W          37EE
DISP_COMMA          3998
DISP_CP             3957
DISP_D              3948
DISP_DATA           36D0
DISP_DIVS           3775
DISP_EORI_B         368C
DISP_EORI_L         36A0
DISP_EORI_W         3696
DISP_EOR_B          37CA
DISP_EOR_L          37DC
DISP_EOR_W          37D3
DISP_HEX            3943
DISP_INDENT         399A
DISP_JSR            36FD
DISP_LB             3969
DISP_LEA            373A
DISP_LSL_B          3871
DISP_LSL_L          3895
DISP_LSL_W          3883
DISP_LSR_B          3868
DISP_LSR_L          388C
DISP_LSR_W          387A
DISP_MOVEA_L        3938
DISP_MOVEA_W        392D
DISP_MOVEM_L        374C
DISP_MOVEM_W        3741
DISP_MOVE_B         36D8
DISP_MOVE_L         36EC
DISP_MOVE_W         36E2
DISP_MULS_W         3814
DISP_NEG_B          3704
DISP_NEG_L          3716
DISP_NEG_W          370D
DISP_NEXT           341D
DISP_NOT_B          371F
DISP_NOT_L          3731
DISP_NOT_W          3728
DISP_OP             3952
DISP_ORI_B          3671
DISP_ORI_L          3683
DISP_ORI_W          367A
DISP_POST           3966
DISP_PRE            395F
DISP_ROL_B          38DD
DISP_ROL_L          3901
DISP_ROL_W          38EF
DISP_ROR_B          38D4
DISP_ROR_L          38F8
DISP_ROR_W          38E6
DISP_RTS            36F6
DISP_SUBA_L         37C0
DISP_SUBA_W         37B6
DISP_SUBI_B         3798
DISP_SUBI_L         37AC
DISP_SUBI_W         37A2
DISP_SUB_B          377D
DISP_SUB_L          378F
DISP_SUB_W          3786
D_MODE000           242A
D_MODE010           2472
D_MODE011           24D2
D_MODE100           24F2
D_MODE111           2544
EA_ARITH            2322
EA_DATA             14EA
EA_GEN              236E
EA_MOVEA            2348
EA_NOSRC            230E
ENDLINE_M           35CE
END_ADDR            10AA
ERRMSG_1            34B5
ERRMSG_3            34D4
ERRMSG_5            34F9
ERROR_1             110E
ERROR_2             111E
ERROR_3             112E
ERROR_4             113E
ERROR_5             114E
E_ADDR_HX           35CA
FINMSG              348A
GET_DST_FAILED      3018
GET_DST_START_END   3985
GET_DST_SUCCESS     301C
GET_EA_EA_DEST      2BEE
GET_EA_EA_SRC       27BE
GET_SRC_FAILED      2BE8
GET_SRC_START_END   3986
GET_SRC_SUCCESS     2BEC
HEX2ASCII           11C6
HEX2ASCII2STACK     1208
HEX_CHAR            11F4
HEX_CONT            11F8
HEX_LOOP            11DA
IMMD_B              25F8
IMMD_L              2638
IMMD_W              2618
IMMEDIATE           25C8
INCREMENT           30B8
INTRO               1028
IS_ODD              124C
IS_ODD_ERR          1262
JMPTABLE            1338
LF                  A
LONGMODE            259C
LOOP_SHIFTING       283A
LOOP_SHIFTING1      28C4
LOOP_SHIFTING2      2956
LOOP_SHIFTING3      29F0
LOOP_SHIFTING4      2A9A
MAIN                1268
MASKING_NEXT        2848
MASKING_NEXT1       28D2
MASKING_NEXT2       2964
MASKING_NEXT3       29FE
MASKING_NEXT4       2AA8
MODE000             2416
MODE001             243E
MODE010             2452
MODE011             2492
MODE100             24B2
MODE111             2512
NEXTLINES           131A
OP0000              1398
OP0001              15BE
OP0010              162C
OP0011              172A
OP0100              1826
OP0101              19C0
OP0110              1A3C
OP0111              1ACA
OP1000              1ACE
OP1001              1B0A
OP1010              1BE2
OP1011              1BE6
OP1100              1CE2
OP1101              1D7E
OP1101_ADD_RETURN   1FCE
OP1101_DETERMINE_DN_EA_OR_EA_DN  1DBA
OP1101_DN_EA        1DCE
OP1101_EA_DN        1ECE
OP1101_PRINT_B      1EF6
OP1101_PRINT_B2     1DF6
OP1101_PRINT_L      1F86
OP1101_PRINT_L2     1E86
OP1101_PRINT_W      1F3E
OP1101_PRINT_W2     1E3E
OP1110              205C
OP1111              230A
OP_ADDA_L           2044
OP_ADDA_W           202C
OP_ADDQ             19E0
OP_ADDQ_B           1A06
OP_ADDQ_L           1A2A
OP_ADDQ_W           1A18
OP_ADD_B            1FE4
OP_ADD_L            2014
OP_ADD_W            1FFC
OP_AND_B            1D48
OP_AND_L            1D6C
OP_AND_W            1D5A
OP_ASL              21FC
OP_ASL_B            2220
OP_ASL_L            2232
OP_ASL_W            2244
OP_ASR              21A2
OP_ASR_B            21C6
OP_ASR_L            21D8
OP_ASR_W            21EA
OP_ASX              20BE
OP_BEQ              1AA0
OP_BHI              1A84
OP_BLT              1ABC
OP_BNE              1A92
OP_BRA              1AAE
OP_BTST             140C
OP_CMPA_L           1C52
OP_CMPA_W           1C40
OP_CMPI             1512
OP_CMPI_B           1532
OP_CMPI_L           1556
OP_CMPI_W           1544
OP_CMP_B            1C64
OP_CMP_L            1C94
OP_CMP_W            1C7C
OP_DATA             14C6
OP_DIVS             1AF6
OP_EORI             141A
OP_EORI_B           143A
OP_EORI_L           145E
OP_EORI_W           144C
OP_EOR_B            1CAC
OP_EOR_L            1CD0
OP_EOR_W            1CBE
OP_JSR              199E
OP_LEA              18CC
OP_LSL              2148
OP_LSL_B            216C
OP_LSL_L            217E
OP_LSL_W            2190
OP_LSR              20EE
OP_LSR_B            2112
OP_LSR_L            2124
OP_LSR_W            2136
OP_LSX              20A6
OP_MOVEA_L          16BA
OP_MOVEA_W          17B6
OP_MOVEM_L          18BA
OP_MOVEM_W          18A8
OP_MOVE_B           15C4
OP_MOVE_L           1652
OP_MOVE_W           174E
OP_MULS             1D34
OP_NEG              18E0
OP_NEG_B            1900
OP_NEG_L            1930
OP_NEG_W            1918
OP_NOT              1948
OP_NOT_B            1968
OP_NOT_L            198C
OP_NOT_W            197A
OP_ORI              1568
OP_ORI_B            1588
OP_ORI_L            15AC
OP_ORI_W            159A
OP_ROL              22B0
OP_ROL_B            22D4
OP_ROL_L            22E6
OP_ROL_W            22F8
OP_ROR              2256
OP_ROR_B            227A
OP_ROR_L            228C
OP_ROR_W            229E
OP_ROX              20D6
OP_RTS              19B2
OP_SUBA_L           1BD0
OP_SUBA_W           1BBE
OP_SUBI             1470
OP_SUBI_B           1490
OP_SUBI_L           14B4
OP_SUBI_W           14A2
OP_SUB_B            1B76
OP_SUB_L            1BA6
OP_SUB_W            1B8E
OUTPUT_PROCESSED_DATA  12EC
POINTER_WORD        399E
POP_FRONT           3072
POP_FRONT_RETURN    30AC
POP_RETURN          3070
POP_SHIFT_LOOP      308E
POP_STACK           3064
PRINT_QUEUE         3038
PRINT_QUEUE_HELPER  3044
PRINT_QUEUE_RETURN  305A
PRINT_STACK         301E
PRINT_STACK_HELPER  302A
PRINT_STACK_RETURN  3036
PROGLP              100A
PROMPT_END          33F0
PROMPT_START        33C1
PUSH_STACK          305C
QUEUE_COUNTER       3980
REG_0               270C
REG_1               271A
REG_2               2728
REG_3               2736
REG_4               2744
REG_5               2752
REG_6               2760
REG_7               276E
REPEAT              277C
REPEATMSG           3447
RETURN              11C4
SRC_LOOP_SHIFTING   2AFA
SRC_MASKING_NEXT    2B08
SRC_MODE            23CC
SRC_REGISTER        26B4
SRC_REGISTER_FORMAT  3983
STACK               7000
STACK_HEX_CHAR      1236
STACK_HEX_CONT      123A
STACK_HEX_LOOP      121C
START               1004
START_ADDR          1058
S_ADDR_HX           35C6
TEMP_REGISTER_FORMAT  3984
TERMINATE           30DA
TESTING             1036
TMPINPUT            35D1
TMPOUTPUT           3621
VAR_BYTE_END        398C
VAR_BYTE_START      3988
VAR_LONG_ADDRESS_MODE_CHECK  3994
VAR_TEMP_CLEANCOPY  3990
VR_E_ADDR           3576
VR_S_ADDR           3526
WELCOME             30EC
WORDMODE            2570

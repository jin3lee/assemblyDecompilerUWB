00001004 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/7/2014 1:36:55 AM

00000000                             1  *---------------------------------------------------------------------------*
00000000                             2  * Title      : 68K Disassembler
00000000                             3  * Written by : Team Circle
00000000                             4  * Date       : 12/05/14
00000000                             5  * Description: Scans a section of memory and converts its
00000000                             6  *              contents to a listing of valid assembly 
00000000                             7  *              language instructions
00000000                             8  *---------------------------------------------------------------------------*
00000000                             9  
00000000                            10  *---------------------------------------------------------------------------*
00000000                            11  * System Equates                                                 
00000000                            12  *---------------------------------------------------------------------------*
00000000  =0000000D                 13  CR          EQU     $0D                     * ASCII for Carriage Return
00000000  =0000000A                 14  LF          EQU     $0A                     * ASCII for Line Feed 
00000000  =00007000                 15  STACK       EQU     $7000                   * Initial Stack Pointer                         
00000000                            16              
00000000                            17  *---------------------------------------------------------------------------*
00000000                            18  * Reserved Registers
00000000                            19  *---------------------------------------------------------------------------*  
00000000                            20  * D0 - I/O
00000000                            21  * D1 - Temporary storage of processing data
00000000                            22  * D3 - [PUSH_STACK]
00000000                            23  * D4 - Opcode size (0 - byte; 1- word; 2-long)
00000000                            24  * D5 - Processing data
00000000                            25  * D6 - Loop counter to print 30 lines
00000000                            26  * D7 - Error flag
00000000                            27  * A2 - [STACK POINTER]
00000000                            28  * A5 - Processing address in hex
00000000                            29  
00000000                            30  *---------------------------------------------------------------------------*
00000000                            31  * Start and loop program
00000000                            32  *---------------------------------------------------------------------------*  
00001000                            33              ORG     $1000
00001000  4FF8 7000                 34              LEA     STACK,SP
00001004                            35  START:            
00001004  4EB9 00001028             36              JSR     INTRO                 
0000100A  4EB9 00001048             37  PROGLP      JSR     START_ADDR
00001010  4EB9 0000109A             38              JSR     END_ADDR
00001016  43F9 00002FEC             39              LEA     ENDLINE_M,A1           * Add a new line
0000101C  103C 000E                 40              MOVE.B  #14, D0                  * Display A1
00001020  4E4F                      41              TRAP    #15
00001022                            42              
00001022  4EF9 00001214             43              JMP     MAIN
00001028                            44              
00001028                            45  *---------------------------------------------------------------------------*
00001028                            46  * INTRO: Display the introduction of the program
00001028                            47  *---------------------------------------------------------------------------*
00001028  43F9 00002B0A             48  INTRO       LEA     WELCOME,A1              * Load PROMPT_START
0000102E  103C 000E                 49              MOVE.B  #14,D0                  * Display A1
00001032  4E4F                      50              TRAP    #15
00001034  4E75                      51              RTS
00001036                            52  TESTING
00001036  1001                      53              MOVE.B  D1,D0 
00001038  1210                      54              MOVE.B  (A0),D1
0000103A  1218                      55              MOVE.B  (A0)+,D1
0000103C  1220                      56              MOVE.B  -(A0),D1
0000103E  1238 7000                 57              MOVE.B  $7000,D1
00001042  1238 7000                 58              MOVE.B  $00007000,D1
00001046                            59              
00001046  4E75                      60              RTS
00001048                            61  *---------------------------------------------------------------------------*
00001048                            62  * START_ADDR: Compute the starting address
00001048                            63  *---------------------------------------------------------------------------*
00001048                            64  START_ADDR
00001048                            65              * Output
00001048  43F9 00002DDF             66              LEA     PROMPT_START,A1         * Load PROMPT_START 
0000104E  103C 000E                 67              MOVE.B  #14,D0                  * Display PROMPT_START
00001052  4E4F                      68              TRAP    #15
00001054                            69      
00001054                            70              * Input
00001054  43F9 00002F44             71              LEA     VR_S_ADDR,A1            * Load VR_S_ADDR
0000105A  103C 0002                 72              MOVE.B  #2,D0                   * Ask user for input
0000105E  4E4F                      73              TRAP    #15
00001060                            74              
00001060                            75              * Error Checking (length)
00001060  0C01 0000                 76              CMPI.B  #0, D1                  * Check if input length <= 0
00001064  6F00 0098                 77              BLE     ERROR_1
00001068  0C01 0008                 78              CMPI.B  #8, D1                  * Check if input length > 8
0000106C  6E00 0090                 79              BGT     ERROR_1
00001070                            80              
00001070                            81              * Conversion & Storage
00001070  4EB9 0000114E             82              JSR     ASCII2HEX               * Jump to ASCII2HEX
00001076  0C07 0001                 83              CMPI.B  #1, D7                  * Check for error
0000107A  6700 0082                 84              BEQ     ERROR_1                 
0000107E  23C1 00002FE4             85              MOVE.L  D1, S_ADDR_HX           * Move the result to S_ADDR_HX 
00001084                            86              
00001084                            87              * Error Checking (Odd)
00001084  43F9 00002FE4             88              LEA     S_ADDR_HX, A1           * Load 'S_ADDR_HX' for odd error
0000108A  4EB9 000011F8             89              JSR     IS_ODD                  * Check if the input address is odd
00001090  0C07 0001                 90              CMPI.B  #1, D7                  * Check for error
00001094  6700 0088                 91              BEQ     ERROR_3
00001098                            92              
00001098                            93              * Return
00001098  4E75                      94              RTS     
0000109A                            95  *---------------------------------------------------------------------------*
0000109A                            96  * END_ADDR: Compute the ending address
0000109A                            97  *---------------------------------------------------------------------------*
0000109A                            98  END_ADDR
0000109A                            99              * Output
0000109A  43F9 00002E0E            100              LEA     PROMPT_END,A1           * Load PROMPT_END
000010A0  103C 000E                101              MOVE.B  #14,D0                  * Display PROMPT_END
000010A4  4E4F                     102              TRAP    #15
000010A6                           103  
000010A6                           104              * Input
000010A6  43F9 00002F94            105              LEA     VR_E_ADDR,A1            * Load VR_E_ADDR
000010AC  103C 0002                106              MOVE.B  #2,D0                   * Ask user for input
000010B0  4E4F                     107              TRAP    #15
000010B2                           108              
000010B2                           109              * Error Checking (length)
000010B2  0C01 0000                110              CMPI.B  #0, D1                  * Check if input length <= 0
000010B6  6F00 0056                111              BLE     ERROR_2
000010BA  0C01 0008                112              CMPI.B  #8, D1                  * Check if input length > 8
000010BE  6E00 004E                113              BGT     ERROR_2
000010C2                           114              
000010C2                           115              * Conversion & Storage
000010C2  4EB9 0000114E            116              JSR     ASCII2HEX               * Jump to ASCII2HEX
000010C8  0C07 0001                117              CMPI.B  #1, D7                  * Check for error
000010CC  6700 0040                118              BEQ     ERROR_2
000010D0  23C1 00002FE8            119              MOVE.L  D1, E_ADDR_HX           * Move the result to E_ADDR_HX
000010D6                           120              
000010D6                           121              * Error Checking (start > end case)
000010D6  2439 00002FE4            122              MOVE.L  S_ADDR_HX, D2           * Move the starting address to D2
000010DC  B282                     123              CMP.L   D2, D1                  * Compare starting and ending address
000010DE  6300 005E                124              BLS     ERROR_5                 * Go to ERROR_5 if ending < starting
000010E2                           125              
000010E2                           126              * Error Checking (Odd case)
000010E2  43F9 00002FE8            127              LEA     E_ADDR_HX, A1           * Move the ending address
000010E8  4EB9 000011F8            128              JSR     IS_ODD                  * Go to IS_ODD for odd address checking
000010EE  0C07 0001                129              CMPI.B  #1, D7                  * Check for an error flag
000010F2  6700 003A                130              BEQ     ERROR_4
000010F6                           131              
000010F6                           132              * Inputs are valid
000010F6  2A79 00002FE4            133              MOVE.L  S_ADDR_HX, A5           * Store the valid input in A5
000010FC                           134              
000010FC  4E75                     135              RTS
000010FE                           136              
000010FE                           137  *---------------------------------------------------------------------------*
000010FE                           138  * ERROR_1: Address error (Invalid starting address)
000010FE                           139  *---------------------------------------------------------------------------*
000010FE                           140  ERROR_1
000010FE  43F9 00002ED3            141              LEA     ERRMSG_1, A1            * Load ERRMSG_1
00001104  103C 000E                142              MOVE.B  #14, D0                 * Display ERRMSG_1
00001108  4E4F                     143              TRAP    #15
0000110A  4EF8 1048                144              JMP     START_ADDR              * Jump to START_ADDR
0000110E                           145      
0000110E                           146  *---------------------------------------------------------------------------*
0000110E                           147  * ERROR_2: Address error (Invalid ending address)
0000110E                           148  *---------------------------------------------------------------------------*
0000110E                           149  ERROR_2
0000110E  43F9 00002ED3            150              LEA     ERRMSG_1, A1            * Load ERRMSG_1
00001114  103C 000E                151              MOVE.B  #14, D0                 * Display ERRMSG_1
00001118  4E4F                     152              TRAP    #15
0000111A  4EF8 109A                153              JMP     END_ADDR                * Jump to END_ADDR
0000111E                           154  
0000111E                           155  *---------------------------------------------------------------------------*
0000111E                           156  * ERROR_3: Address error (Odd starting address)
0000111E                           157  *---------------------------------------------------------------------------*
0000111E                           158  ERROR_3
0000111E  43F9 00002EF2            159              LEA     ERRMSG_3, A1
00001124  103C 000E                160              MOVE.B  #14, D0
00001128  4E4F                     161              TRAP    #15
0000112A  4EF8 1048                162              JMP     START_ADDR
0000112E                           163     
0000112E                           164  *---------------------------------------------------------------------------*
0000112E                           165  * ERROR_4: Address error (Odd ending address)
0000112E                           166  *---------------------------------------------------------------------------*         
0000112E                           167  ERROR_4
0000112E  43F9 00002EF2            168              LEA     ERRMSG_3, A1
00001134  103C 000E                169              MOVE.B  #14, D0
00001138  4E4F                     170              TRAP    #15
0000113A  4EF8 109A                171              JMP     END_ADDR
0000113E                           172            
0000113E                           173  *---------------------------------------------------------------------------*
0000113E                           174  * ERROR_3: Address error (Ending address is less than starting address)
0000113E                           175  *---------------------------------------------------------------------------*
0000113E                           176  ERROR_5
0000113E  43F9 00002F17            177              LEA     ERRMSG_5, A1
00001144  103C 000E                178              MOVE.B  #14, D0
00001148  4E4F                     179              TRAP    #15
0000114A  4EF8 109A                180              JMP     END_ADDR
0000114E                           181    
0000114E                           182  *---------------------------------------------------------------------------*
0000114E                           183  * ASCII2HEX: Convert ASCii to Hexadecimal
0000114E                           184  * Reserved registers: A1 = Source, D1 = Destination, D2 = Byte, D7 = Error
0000114E                           185  *---------------------------------------------------------------------------*
0000114E  4281                     186  ASCII2HEX   CLR.L   D1                      * Clear the destination 
00001150  4287                     187              CLR.L   D7                      * Set the error flag to 0
00001152  4282                     188              CLR.L   D2                      * Clear D2 for temp storage
00001154                           189              
00001154  1419                     190  ASC2HXLP    MOVE.B  (A1)+, D2               * Read a byte to D2
00001156  0C02 0000                191              CMPI.B  #0, D2                  * Check for NULL (indicates the end of source)
0000115A  6700 0058                192              BEQ     RETURN                  * If it's NULL, go to return
0000115E  0C02 0066                193              CMPI.B  #102, D2                * Decimal ASCII value of f is 102
00001162  6E00 004C                194              BGT     ASC_ERR                 * ASCII > f (invalid input) 
00001166  0C02 0061                195              CMPI.B  #97, D2                 * Decimal ASCII value of a is 97
0000116A  6C00 0026                196              BGE     ASC_LOW                 * ASCII >= a (valid input)
0000116E  0C02 0046                197              CMPI.B  #70, D2                 * Decimal ASCII value of F is 70
00001172  6E00 003C                198              BGT     ASC_ERR                 * ASCII > F (invalid input)
00001176  0C02 0041                199              CMPI.B  #65, D2                 * Decimal ASCII value of A is 65
0000117A  6C00 001E                200              BGE     ASC_UPP                 * ASCII >= A (valid input)
0000117E  0C02 0039                201              CMPI.B  #57, D2                 * Decimal value of 9 is 57
00001182  6E00 002C                202              BGT     ASC_ERR                 * ASCII > 9 (invalid input)
00001186  0C02 0030                203              CMPI.B  #48, D2                 * Decimal ASCII value of 0 is 48
0000118A  6C00 0016                204              BGE     ASC_NUM                 * ASCII >= 0 (valid input)
0000118E  6000 0020                205              BRA     ASC_ERR                 * Invalid input
00001192                           206  
00001192  0442 0057                207  ASC_LOW     SUBI    #87, D2                 * Convert the ASCII input to Hex
00001196  6000 0012                208              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
0000119A                           209              
0000119A  0442 0037                210  ASC_UPP     SUBI    #55, D2                 * Convert the ASCII input to Hex
0000119E  6000 000A                211              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011A2                           212              
000011A2  0442 0030                213  ASC_NUM     SUBI    #48, D2                 * Convert the ASCII input to Hex
000011A6  6000 0002                214              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011AA                           215              
000011AA  E981                     216  ASC_SFT     ASL.L   #4, D1                  * Shift the dest to left by 4 bits
000011AC  D202                     217              ADD.B   D2, D1                  * Add the converted input to D1
000011AE  60A4                     218              BRA     ASC2HXLP                * Loop
000011B0                           219  
000011B0  1E3C 0001                220  ASC_ERR     MOVE.B  #1, D7                  * Set the error flag to 1            
000011B4  4E75                     221  RETURN      RTS     
000011B6                           222  
000011B6                           223  *---------------------------------------------------------------------------*
000011B6                           224  * HEX2ASCII: Convert Hexadecimal to ASCii 
000011B6                           225  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
000011B6                           226  *---------------------------------------------------------------------------*
000011B6  0C02 0008                227  HEX2ASCII   CMPI.B  #8, D2                  * Check to see if the size is long
000011BA  6700 000E                228              BEQ     HEX_LOOP
000011BE  4841                     229              SWAP    D1
000011C0  0C02 0002                230              CMPI.B  #2,D2
000011C4  6600 0004                231              BNE     HEX_LOOP
000011C8  E189                     232              LSL.L   #8,D1
000011CA                           233             
000011CA  E999                     234  HEX_LOOP    ROL.L   #4, D1                  * Roll D1 to left
000011CC  2601                     235              MOVE.L  D1, D3                  * Move D1 to D3
000011CE  0283 0000000F            236              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
000011D4  0C03 0009                237              CMPI.B  #9, D3                  * Compare te digit
000011D8  6E00 000A                238              BGT     HEX_CHAR              
000011DC  0603 0030                239              ADDI.B  #48,D3                  * Add 48 for numerical output
000011E0  6000 0006                240              BRA     HEX_CONT
000011E4                           241              
000011E4  0603 0037                242  HEX_CHAR    ADDI.B  #55,D3                  * Add 55 for character output
000011E8                           243  
000011E8  12C3                     244  HEX_CONT    MOVE.B  D3, (A1)+               * Place into A1
000011EA  5342                     245              SUBI    #1, D2                  * Decrement the size
000011EC  0C02 0000                246              CMPI.B  #0, D2                  * Check if D2 is 0
000011F0  66D8                     247              BNE     HEX_LOOP                * Loop
000011F2  12BC 0000                248              MOVE.B  #$0,(A1)                * Null terminator
000011F6  4E75                     249              RTS
000011F8                           250  
000011F8                           251  *---------------------------------------------------------------------------*
000011F8                           252  * IS_ODD: Check whether the source address is odd
000011F8                           253  * Reserved registers: A1 = Source, D1 = Result, D7 = error flag
000011F8                           254  *---------------------------------------------------------------------------*
000011F8  4281                     255  IS_ODD      CLR.L   D1                      * Clear the result
000011FA  4287                     256              CLR.L   D7                      * Set the error flag to 0
000011FC  2211                     257              MOVE.L  (A1),D1                * Temp store the checking address to D1
000011FE  82FC 0002                258              DIVU    #2, D1                  * Divide the result by 2
00001202  4841                     259              SWAP    D1                      * Swap remainder with quotient
00001204  0C01 0001                260              CMPI.B  #1, D1                  * Check for error
00001208  6700 0004                261              BEQ     IS_ODD_ERR
0000120C  4E75                     262              RTS
0000120E                           263              
0000120E  1E3C 0001                264  IS_ODD_ERR  MOVE.B  #1, D7
00001212  4E75                     265              RTS
00001214                           266  
00001214                           267  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*
00001214                           268  * MAIN                    
00001214                           269  * A2: STACK POINTER                                                      MAIN                                                                        MAIN
00001214                           270  * A5: Processing address
00001214                           271  *
00001214                           272  * D3: USED FOR PUSHING INTO STACK
00001214                           273  *     To push into stack => MOVE.W #DATA,D3 
00001214                           274  *                           BSR    PUSH_STACK
00001214                           275  *     To print stack     => BSR    PRINT_STACK 
00001214                           276  *     To clear stack     => BSR    CLEAR_STACK
00001214                           277  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*  
00001214                           278  MAIN        
00001214                           279              *initialize stack pointer
00001214  33FC 0000 0000339C       280              MOVE.W  #0,COUNTER
0000121C  347C 7000                281              MOVEA.W #STACK,A2
00001220  163C 0020                282              MOVE.B  #' ',D3
00001224  6100 1854                283              BSR     PUSH_STACK
00001228  6100 1850                284              BSR     PUSH_STACK
0000122C  6100 184C                285              BSR     PUSH_STACK
00001230                           286              
00001230                           287              * clear registers for temp storage
00001230  4280                     288              CLR.L   D0                   
00001232  4281                     289              CLR.L   D1                   
00001234  227C 00000000            290              MOVEA.L #0, A1                
0000123A                           291              
0000123A  220D                     292              MOVE.L  A5,D1                   * check to see if the address is fully read
0000123C  23CD 00002FE4            293              MOVE.L  A5,S_ADDR_HX
00001242  B2B9 00002FE8            294              CMP.L   E_ADDR_HX,D1
00001248  6C00 1182                295              BGE     REPEAT                  * go to repeat for user action
0000124C                           296  
0000124C  43F9 0000303F            297              LEA     TMPOUTPUT,A1            * allocate storage to hold output
00001252  143C 0008                298              MOVE.B  #8,D2                   * set the output size
00001256  4EB8 11B6                299              JSR     HEX2ASCII               
0000125A  43F9 0000303F            300              LEA     TMPOUTPUT,A1
00001260  103C 000E                301              MOVE.B  #14,D0
00001264  4E4F                     302              TRAP    #15
00001266                           303              
00001266  4285                     304              CLR.L    D5                      * clear the processing data
00001268  3A1D                     305              MOVE.W  (A5)+,D5                 * copy the currently processing data in A5 over to D5
0000126A                           306                                               * advance the current instruction pointer to the next
0000126A                           307                                               * instruction in memory
0000126A                           308  *----------------------------------------*
0000126A                           309  * Registers          
0000126A                           310  * [D1] - COPY OF D5
0000126A                           311  * [D5] - DATA TO BE PROCESSED
0000126A                           312  * [D6] - COUNTER FOR LINES PROCESSED
0000126A                           313  *
0000126A                           314  * [D4]      - ERROR FLAG BEFORE PRINTING
0000126A                           315  * [STACK]   - PRINTS PROCESS DATA
0000126A                           316  * [COUNTER] - KEEPS TRACK OF STACK INCREMENT
0000126A                           317  *
0000126A                           318  * [A1] - USED FOR JUMPING/PRINTING
0000126A                           319  *
0000126A                           320  *----------------------------------------*
0000126A                           321  
0000126A                           322              
0000126A                           323              *Processing the first 4 most significant bits 
0000126A  2205                     324              MOVE.L  D5,D1                    * copy the current processing data to D1
0000126C  143C 000C                325              MOVE.B  #12,D2                   * shift to right by 12 bits
00001270  E469                     326              LSR.W   D2,D1                    * [D2] Temporarily used D2 for shifting bits
00001272  C2FC 0006                327              MULU    #6,D1                    * form offset
00001276  43F9 000012CC            328              LEA     JMPTABLE,A1              * index into table
0000127C  4EB1 1000                329              JSR     0(A1,D1)                 * jump indirect with index
00001280                           330              
00001280                           331              *SECURED EA*
00001280  B83C 0001                332              CMP.B   #1,D4                    * ERROR FLAG CHECK [ERROR WHEN D4 == 1]
00001284  6600 0012                333              BNE     OUTPUT_PROCESSED_DATA    * PRINTS PROCESSED OP-CODE & EA
00001288  6100 01D0                334              BSR     OP_DATA                  * PRINT ERROR MESSAGE "DATA"
0000128C  6100 1858                335              BSR     CLEAR_STACK              * CLEARS THE STACK 
00001290  183C 0000                336              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
00001294  6000 000A                337              BRA     DISPLAY_30_LINES         * GO TO LAST STEP
00001298                           338             
00001298                           339  OUTPUT_PROCESSED_DATA
00001298  6100 17BC                340              BSR     PRINT_QUEUE
0000129C  183C 0000                341              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
000012A0                           342  DISPLAY_30_LINES
000012A0                           343              * display 30 lines per page
000012A0  5206                     344              ADDI.B  #1,D6
000012A2  0C06 001E                345              CMPI.B  #30,D6
000012A6  6C00 0006                346              BGE     NEXTLINES
000012AA  6000 FF68                347              BRA     MAIN
000012AE                           348            
000012AE                           349  *---------------------------------------------------------------------------*
000012AE                           350  * NEXTLINES: receive input from user to print the next 30 lines
000012AE                           351  *---------------------------------------------------------------------------*  
000012AE  4206                     352  NEXTLINES   CLR.B   D6
000012B0  43F9 00002E3B            353              LEA     DISP_NEXT,A1
000012B6  103C 000E                354              MOVE.B  #14,D0
000012BA  4E4F                     355              TRAP    #15
000012BC  43F9 00002FEF            356              LEA     TMPINPUT,A1
000012C2  103C 0002                357              MOVE.B  #2,D0
000012C6  4E4F                     358              TRAP    #15
000012C8  4EF8 1214                359              JMP     MAIN
000012CC                           360    
000012CC                           361  *---------------------------------------------------------------------------*
000012CC                           362  * JMPTABLE: OP code jump/branch table used to decode and display opcodes
000012CC                           363  *---------------------------------------------------------------------------*  
000012CC  4EF9 0000132C            364  JMPTABLE    JMP     OP0000  * CMPI/ORI/BTST/EORI/SUBI/BTST
000012D2  4EF9 00001552            365              JMP     OP0001  * MOVE.B                                        *WORKING ON - JOSEPH
000012D8  4EF9 000015C0            366              JMP     OP0010  * MOVE.L/MOVEA.L
000012DE  4EF9 00001622            367              JMP     OP0011  * MOVE.W/MOVEA.W
000012E4  4EF9 00001682            368              JMP     OP0100  * MOVEM/LEA/NEG/NOT/JSR/RTS
000012EA  4EF9 0000181C            369              JMP     OP0101  * ADDQ
000012F0  4EF9 00001898            370              JMP     OP0110  * BRA/Bcc (BEQ/BNE/BLT/BHI)
000012F6  4EF9 00001926            371              JMP     OP0111  * MOVEQ (unassigned)
000012FC  4EF9 0000192A            372              JMP     OP1000  * DIVS
00001302  4EF9 00001966            373              JMP     OP1001  * SUB/SUBA
00001308  4EF9 00001A3E            374              JMP     OP1010  * Unassigned 
0000130E  4EF9 00001A42            375              JMP     OP1011  * CMP/EOR/CMPA
00001314  4EF9 00001B3E            376              JMP     OP1100  * MULS/AND
0000131A  4EF9 00001BDA            377              JMP     OP1101  * ADD/ADDA
00001320  4EF9 00001CAC            378              JMP     OP1110  * LSR/LSL/ASR/ASL/ROL/ROR
00001326  4EF9 00001F5A            379              JMP     OP1111  * Special/Reserved
0000132C                           380              
0000132C                           381  *---------------------------------------------------------------------------*
0000132C                           382  * OP0000: decode CMPI/ORI/BTST/SUBI/EORI
0000132C                           383  *---------------------------------------------------------------------------*           
0000132C                           384  OP0000                                                                                  
0000132C  4281                     385              CLR.L   D1          * to temporarily store the address to process
0000132E  4280                     386              CLR.L   D0  
00001330  4284                     387              CLR.L   D4                 
00001332  227C 00000000            388              MOVEA.L #0, A1                
00001338                           389              * Check for ORI (0000 0000 xx (size) xxx (EA mode) xxx(EA reg)
00001338                           390              * Check if bit 11,10,9,8 are 0000)
00001338  2205                     391              MOVE.L  D5,D1
0000133A  0281 00000F00            392              ANDI.L  #$0F00,D1
00001340  0C81 00000000            393              CMPI.L  #$0000,D1   * if they are 0000, it is ORI
00001346  6700 01B4                394              BEQ     OP_ORI
0000134A                           395  
0000134A                           396              * check for CMPI (0000 1100 xx (size) xxx (EA mode) xxx (EA reg)
0000134A                           397              * check if bit 11,10,9,8 are 1100
0000134A  4281                     398              CLR.L   D1
0000134C  2205                     399              MOVE.L  D5,D1
0000134E  0281 00000F00            400              ANDI.L  #$0F00,D1
00001354  0C81 00000C00            401              CMPI.L  #$0C00,D1
0000135A  6700 014A                402              BEQ     OP_CMPI
0000135E                           403              
0000135E                           404              * check for SUBI
0000135E  4281                     405              CLR.L   D1
00001360  2205                     406              MOVE.L  D5,D1
00001362  0281 00000F00            407              ANDI.L  #$0F00,D1
00001368  0C81 00000400            408              CMPI.L  #$0400,D1
0000136E  6700 0094                409              BEQ     OP_SUBI
00001372                           410              
00001372                           411              * check for EORI
00001372  4281                     412              CLR.L   D1
00001374  2205                     413              MOVE.L  D5,D1
00001376  0281 00000F00            414              ANDI.L  #$0F00,D1
0000137C  0C81 00000A00            415              CMPI.L  #$0A00,D1
00001382  6700 002A                416              BEQ     OP_EORI
00001386                           417              
00001386                           418              * check for BTST
00001386  4281                     419              CLR.L   D1
00001388  2205                     420              MOVE.L  D5,D1
0000138A  EA99                     421              ROR.L   #5,D1
0000138C  0281 00000008            422              ANDI.L  #$8,D1
00001392  0C01 0008                423              CMPI.B  #8,D1
00001396  6700 0008                424              BEQ     OP_BTST
0000139A                           425  
0000139A                           426              * OP0000 series other than ORI/CMPI/BTST/EORI
0000139A  4EF9 0000145A            427              JMP     OP_DATA
000013A0                           428              
000013A0                           429  *---------------------------------------------------------------------------*
000013A0                           430  * OP_BTST: display BTST
000013A0                           431  *---------------------------------------------------------------------------* 
000013A0  43F9 000030C8            432  OP_BTST     LEA     DISP_BTST,A1
000013A6  103C 000E                433              MOVE.B  #14,D0
000013AA  4E4F                     434              TRAP    #15
000013AC  4E75                     435              RTS
000013AE                           436  
000013AE                           437  *---------------------------------------------------------------------------*
000013AE                           438  * OP_EORI: decode and display EORI
000013AE                           439  *---------------------------------------------------------------------------* 
000013AE                           440  OP_EORI
000013AE  4281                     441              CLR.L   D1
000013B0  4284                     442              CLR.L   D4
000013B2  2205                     443              MOVE.L  D5,D1
000013B4  EC99                     444              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000013B6  0C01 0000                445              CMPI.B  #0,D1
000013BA  6700 0012                446              BEQ     OP_EORI_B    * size is byte
000013BE  0C01 0001                447              CMPI.B  #1,D1
000013C2  6700 001C                448              BEQ     OP_EORI_W    * size is word
000013C6  0C01 0002                449              CMPI.B  #2,D1
000013CA  6700 0026                450              BEQ     OP_EORI_L    * size is long
000013CE                           451  
000013CE                           452  OP_EORI_B    * size is byte    
000013CE  183C 0000                453              MOVE.B  #0,D4
000013D2  43F9 000030AA            454              LEA     DISP_EORI_B,A1
000013D8  103C 000E                455              MOVE.B  #14,D0
000013DC  4E4F                     456              TRAP    #15
000013DE  4E75                     457              RTS
000013E0                           458              
000013E0                           459  OP_EORI_W    * size is word
000013E0  183C 0001                460              MOVE.B  #1,D4
000013E4  43F9 000030B4            461              LEA     DISP_EORI_W,A1
000013EA  103C 000E                462              MOVE.B  #14,D0
000013EE  4E4F                     463              TRAP    #15
000013F0  4E75                     464              RTS
000013F2                           465              
000013F2                           466  OP_EORI_L    * size is long
000013F2  183C 0002                467              MOVE.B  #2,D4
000013F6  43F9 000030BE            468              LEA     DISP_EORI_L,A1
000013FC  103C 000E                469              MOVE.B  #14,D0
00001400  4E4F                     470              TRAP    #15
00001402  4E75                     471              RTS
00001404                           472              
00001404                           473  *---------------------------------------------------------------------------*
00001404                           474  * OP_SUBI: decode SUBI.B/.W/.L
00001404                           475  *---------------------------------------------------------------------------* 
00001404                           476  OP_SUBI
00001404  4281                     477              CLR.L   D1
00001406  4284                     478              CLR.L   D4
00001408  2205                     479              MOVE.L  D5,D1
0000140A  EC99                     480              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
0000140C  0C01 0000                481              CMPI.B  #0,D1
00001410  6700 0012                482              BEQ     OP_SUBI_B    * size is byte
00001414  0C01 0001                483              CMPI.B  #1,D1
00001418  6700 001C                484              BEQ     OP_SUBI_W    * size is word
0000141C  0C01 0002                485              CMPI.B  #2,D1
00001420  6700 0026                486              BEQ     OP_SUBI_L    * size is long
00001424                           487  
00001424                           488  OP_SUBI_B    * size is byte    
00001424  183C 0000                489              MOVE.B  #0,D4
00001428  43F9 000031B6            490              LEA     DISP_SUBI_B,A1
0000142E  103C 000E                491              MOVE.B  #14,D0
00001432  4E4F                     492              TRAP    #15
00001434  4E75                     493              RTS
00001436                           494              
00001436                           495  OP_SUBI_W    * size is word
00001436  183C 0001                496              MOVE.B  #1,D4
0000143A  43F9 000031C0            497              LEA     DISP_SUBI_W,A1
00001440  103C 000E                498              MOVE.B  #14,D0
00001444  4E4F                     499              TRAP    #15
00001446  4E75                     500              RTS
00001448                           501              
00001448                           502  OP_SUBI_L    * size is long
00001448  183C 0002                503              MOVE.B  #2,D4
0000144C  43F9 000031CA            504              LEA     DISP_SUBI_L,A1
00001452  103C 000E                505              MOVE.B  #14,D0
00001456  4E4F                     506              TRAP    #15
00001458  4E75                     507              RTS
0000145A                           508              
0000145A                           509  *---------------------------------------------------------------------------*
0000145A                           510  * OP_DATA : unidentified opcode
0000145A                           511  *---------------------------------------------------------------------------* 
0000145A                           512  OP_DATA
0000145A  4280                     513              CLR.L   D0                   
0000145C  4281                     514              CLR.L   D1     
0000145E  4284                     515              CLR.L   D4                    
00001460  227C 00000000            516              MOVEA.L #0, A1             
00001466  4287                     517              CLR.L   D7
00001468  1E3C 0001                518              MOVE.B  #1,D7                   * error flag is true
0000146C                           519              
0000146C  43F9 000030EE            520              LEA     DISP_DATA,A1
00001472  103C 000E                521              MOVE.B  #14,D0
00001476  4E4F                     522              TRAP    #15
00001478                           523              
00001478  4EF9 0000147E            524              JMP     EA_DATA
0000147E                           525             
0000147E                           526             
0000147E                           527  *---------------------------------------------------------------------------*
0000147E                           528  * EA_DATA
0000147E                           529  *---------------------------------------------------------------------------*       
0000147E  43F9 0000303F            530  EA_DATA     LEA     TMPOUTPUT,A1    * load the temporarily stored output address
00001484  2205                     531              MOVE.L  D5,D1           * transfer the processing data to D1
00001486  7404                     532              MOVE.L  #4,D2           * set to word size
00001488  4EB8 11B6                533              JSR     HEX2ASCII       * prepare output in ascii
0000148C  43F9 00003361            534              LEA     DISP_HEX,A1     * display $ symbol
00001492  103C 000E                535              MOVE.B  #14,D0      
00001496  4E4F                     536              TRAP    #15
00001498  43F9 0000303F            537              LEA     TMPOUTPUT,A1    * display with a new line
0000149E  103C 000D                538              MOVE.B  #13,D0
000014A2  4E4F                     539              TRAP    #15
000014A4                           540  
000014A4  4E75                     541              RTS
000014A6                           542              
000014A6                           543  *---------------------------------------------------------------------------*
000014A6                           544  * OP_CMPI : decode CMPI and its size
000014A6                           545  *---------------------------------------------------------------------------*          
000014A6                           546  OP_CMPI
000014A6  4281                     547              CLR.L   D1
000014A8  4284                     548              CLR.L   D4
000014AA  2205                     549              MOVE.L  D5,D1
000014AC  EC99                     550              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000014AE  0C01 0000                551              CMPI.B  #0,D1
000014B2  6700 0012                552              BEQ     OP_CMPI_B    * size is byte
000014B6  0C01 0001                553              CMPI.B  #1,D1
000014BA  6700 001C                554              BEQ     OP_CMPI_W    * size is word
000014BE  0C01 0002                555              CMPI.B  #2,D1
000014C2  6700 0026                556              BEQ     OP_CMPI_L    * size is long
000014C6                           557  
000014C6                           558  OP_CMPI_B    * size is byte    
000014C6  183C 0000                559              MOVE.B  #0,D4
000014CA  43F9 000030D0            560              LEA     DISP_CMPI_B,A1
000014D0  103C 000E                561              MOVE.B  #14,D0
000014D4  4E4F                     562              TRAP    #15
000014D6  4E75                     563              RTS
000014D8                           564              
000014D8                           565  OP_CMPI_W    * size is word
000014D8  183C 0001                566              MOVE.B  #1,D4
000014DC  43F9 000030DA            567              LEA     DISP_CMPI_W,A1
000014E2  103C 000E                568              MOVE.B  #14,D0
000014E6  4E4F                     569              TRAP    #15
000014E8  4E75                     570              RTS
000014EA                           571              
000014EA                           572  OP_CMPI_L    * size is long
000014EA  183C 0002                573              MOVE.B  #2,D4
000014EE  43F9 000030E4            574              LEA     DISP_CMPI_L,A1
000014F4  103C 000E                575              MOVE.B  #14,D0
000014F8  4E4F                     576              TRAP    #15
000014FA  4E75                     577              RTS
000014FC                           578   
000014FC                           579  *---------------------------------------------------------------------------*
000014FC                           580  * OP_ORI : decode ORI and its size
000014FC                           581  *---------------------------------------------------------------------------* 
000014FC                           582  OP_ORI      
000014FC  4281                     583              CLR.L   D1
000014FE  4284                     584              CLR.L   D4
00001500  2205                     585              MOVE.L  D5,D1
00001502  EC99                     586              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001504  0C01 0000                587              CMPI.B  #0,D1
00001508  6700 0012                588              BEQ     OP_ORI_B    * size is byte
0000150C  0C01 0001                589              CMPI.B  #1,D1
00001510  6700 001C                590              BEQ     OP_ORI_W    * size is word
00001514  0C01 0002                591              CMPI.B  #2,D1
00001518  6700 0026                592              BEQ     OP_ORI_L    * size is long
0000151C                           593  
0000151C                           594  OP_ORI_B    * size is byte    
0000151C  183C 0000                595              MOVE.B  #0,D4
00001520  43F9 0000308F            596              LEA     DISP_ORI_B,A1
00001526  103C 000E                597              MOVE.B  #14,D0
0000152A  4E4F                     598              TRAP    #15
0000152C  4E75                     599              RTS
0000152E                           600              
0000152E                           601  OP_ORI_W    * size is word
0000152E  183C 0001                602              MOVE.B  #1,D4
00001532  43F9 00003098            603              LEA     DISP_ORI_W,A1
00001538  103C 000E                604              MOVE.B  #14,D0
0000153C  4E4F                     605              TRAP    #15
0000153E  4E75                     606              RTS
00001540                           607              
00001540                           608  OP_ORI_L    * size is long
00001540  183C 0002                609              MOVE.B  #2,D4
00001544  43F9 000030A1            610              LEA     DISP_ORI_L,A1
0000154A  103C 000E                611              MOVE.B  #14,D0
0000154E  4E4F                     612              TRAP    #15
00001550  4E75                     613              RTS
00001552                           614          
00001552                           615  *---------------------------------------------------------------------------*
00001552                           616  * OP0001: MOVE.B
00001552                           617  *---------------------------------------------------------------------------*
00001552                           618  OP0001      
00001552  4EF9 00001558            619              JMP     OP_MOVE_B   * display MOVE.B
00001558                           620              
00001558                           621  *---------------------------------------------------------------------------*
00001558                           622  * OP_MOVE_B: display MOVE_B and proceed to EA
00001558                           623  *---------------------------------------------------------------------------*
00001558                           624  OP_MOVE_B                                                                       
00001558                           625             
00001558                           626             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001558  13FC 0081 000033A0       627             MOVE.B   #$81,DEST_REGISTER_FORMAT
00001560  13FC 0000 000033A1       628             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001568                           629             
00001568                           630             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001568  13FC 00B9 000033A3       631             MOVE.B   #$B9,GET_DST_START_END
00001570  13FC 0020 000033A4       632             MOVE.B   #$20,GET_SRC_START_END
00001578                           633             
00001578                           634              *CLEAR D3
00001578  4283                     635              CLR.L   D3
0000157A                           636              *LOAD STACK WITH THIS OPMODE
0000157A  6100 14FE                637              BSR     PUSH_STACK
0000157E  163C 004D                638              MOVE.B  #'M',D3
00001582  6100 14F6                639              BSR     PUSH_STACK
00001586  163C 004F                640              MOVE.B  #'O',D3
0000158A  6100 14EE                641              BSR     PUSH_STACK
0000158E  163C 0056                642              MOVE.B  #'V',D3
00001592  6100 14E6                643              BSR     PUSH_STACK
00001596  163C 0045                644              MOVE.B  #'E',D3
0000159A  6100 14DE                645              BSR     PUSH_STACK
0000159E  163C 002E                646              MOVE.B  #'.',D3
000015A2  6100 14D6                647              BSR     PUSH_STACK
000015A6  163C 0042                648              MOVE.B  #'B',D3
000015AA  6100 14CE                649              BSR     PUSH_STACK
000015AE                           650              
000015AE  6100 0E5E                651              BSR     GET_EA_EA_SRC
000015B2  163C 002C                652              MOVE.B  #',',D3
000015B6  6100 14C2                653              BSR     PUSH_STACK
000015BA  6100 1168                654              BSR     GET_EA_EA_DEST
000015BE                           655              
000015BE                           656              *TODO: NEEDS DEST EA TOO
000015BE                           657              
000015BE  4E75                     658              RTS
000015C0                           659              
000015C0                           660             
000015C0                           661  *---------------------------------------------------------------------------*
000015C0                           662  * OP0010: decode MOVE.L/MOVEA.L
000015C0                           663  *---------------------------------------------------------------------------*
000015C0                           664  OP0010      
000015C0  183C 0002                665              MOVE.B  #2,D4
000015C4  4280                     666              CLR.L   D0                     
000015C6  4281                     667              CLR.L   D1                      
000015C8  227C 00000000            668              MOVEA.L #0, A1                 
000015CE                           669              
000015CE  2205                     670              MOVE.L  D5,D1
000015D0  EA99                     671              ROR.L   #5,D1
000015D2  0281 0000000E            672              ANDI.L  #$E,D1
000015D8  0C01 0002                673              CMPI.B  #2,D1
000015DC  6700 0026                674              BEQ     OP_MOVEA_L
000015E0                           675  
000015E0  4EF9 000015E6            676              JMP     OP_MOVE_L
000015E6                           677             
000015E6                           678  
000015E6                           679  *---------------------------------------------------------------------------*
000015E6                           680  * OP_MOVE_L: display MOVE_L and proceed to EA
000015E6                           681  *---------------------------------------------------------------------------*
000015E6                           682  OP_MOVE_L   
000015E6  183C 0002                683              MOVE.B  #2,D4
000015EA  227C 00000000            684              MOVEA.L #0, A1
000015F0  43F9 0000310A            685              LEA     DISP_MOVE_L,A1
000015F6  103C 000E                686              MOVE.B  #14,D0
000015FA  4E4F                     687              TRAP    #15
000015FC                           688              
000015FC  4EB9 00001FBE            689              JSR     EA_GEN
00001602  4E75                     690              RTS
00001604                           691  
00001604                           692  *---------------------------------------------------------------------------*
00001604                           693  * OP_MOVEA_L: display MOVEA_L and proceed to EA
00001604                           694  *---------------------------------------------------------------------------*
00001604                           695  OP_MOVEA_L 
00001604  183C 0002                696              MOVE.B  #2,D4
00001608  227C 00000000            697              MOVEA.L #0, A1
0000160E  43F9 00003356            698              LEA     DISP_MOVEA_L,A1
00001614  103C 000E                699              MOVE.B  #14,D0
00001618  4E4F                     700              TRAP    #15
0000161A  4EF9 00001F98            701              JMP     EA_MOVEA
00001620                           702  
00001620  4E75                     703              RTS
00001622                           704              
00001622                           705  *---------------------------------------------------------------------------*
00001622                           706  * OP0011: decode MOVE.W/MOVEA.W
00001622                           707  *---------------------------------------------------------------------------*
00001622                           708  OP0011      
00001622  4280                     709              CLR.L   D0                      
00001624  4281                     710              CLR.L   D1  
00001626  4284                     711              CLR.L   D4                   
00001628  227C 00000000            712              MOVEA.L #0, A1               
0000162E  2205                     713              MOVE.L  D5,D1
00001630  EA99                     714              ROR.L   #5,D1
00001632  0281 0000000E            715              ANDI.L  #$E,D1
00001638  0C01 0002                716              CMPI.B  #2,D1
0000163C  6700 0026                717              BEQ     OP_MOVEA_W
00001640                           718              
00001640  4EF9 00001646            719              JMP     OP_MOVE_W
00001646                           720            
00001646                           721  *---------------------------------------------------------------------------*
00001646                           722  * OP_MOVE_W: display MOVE_W and proceed to EA
00001646                           723  *---------------------------------------------------------------------------*
00001646                           724  OP_MOVE_W   
00001646  183C 0001                725              MOVE.B  #1,D4
0000164A  227C 00000000            726              MOVEA.L #0, A1
00001650  43F9 00003100            727              LEA     DISP_MOVE_W,A1
00001656  103C 000E                728              MOVE.B  #14,D0
0000165A  4E4F                     729              TRAP    #15
0000165C  4EF9 00001FBE            730              JMP     EA_GEN
00001662                           731  
00001662  4E75                     732              RTS
00001664                           733  
00001664                           734  *---------------------------------------------------------------------------*
00001664                           735  * OP_MOVEA_W: display MOVEA and proceed to EA
00001664                           736  *---------------------------------------------------------------------------*
00001664                           737  OP_MOVEA_W 
00001664  183C 0001                738              MOVE.B  #1,D4
00001668  227C 00000000            739              MOVEA.L #0, A1
0000166E  43F9 0000334B            740              LEA     DISP_MOVEA_W,A1
00001674  103C 000E                741              MOVE.B  #14,D0
00001678  4E4F                     742              TRAP    #15
0000167A  4EF9 00001F98            743              JMP     EA_MOVEA
00001680                           744  
00001680  4E75                     745              RTS
00001682                           746            
00001682                           747  *---------------------------------------------------------------------------*
00001682                           748  * OP0100: decode MOVEM/LEA/NEG/JSR/RTS/NOT
00001682                           749  *---------------------------------------------------------------------------*
00001682                           750  OP0100
00001682  4280                     751              CLR.L   D0                      
00001684  4281                     752              CLR.L   D1  
00001686  4284                     753              CLR.L   D4                      
00001688  227C 00000000            754              MOVEA.L #0, A1                  
0000168E  2205                     755              MOVE.L  D5,D1  
00001690                           756              
00001690                           757              * check for RTS
00001690  0C41 4E75                758              CMPI.W  #$4E75,D1   * 0100 1110 0111 0101
00001694  6700 0178                759              BEQ     OP_RTS
00001698                           760              
00001698                           761              * check for JSR     * 0100 1110 10 xxx (ea mode) xxx (ea reg)
00001698  4281                     762              CLR.L   D1 
0000169A  2205                     763              MOVE.L  D5,D1  
0000169C  0241 0F00                764              ANDI.W  #$0F00,D1
000016A0  0C41 0E00                765              CMPI.W  #$0E00,D1
000016A4  6700 0154                766              BEQ     OP_JSR
000016A8                           767  
000016A8                           768              * check for NEG     * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
000016A8  4281                     769              CLR.L   D1 
000016AA  2205                     770              MOVE.L  D5,D1  
000016AC  0241 0F00                771              ANDI.W  #$0F00,D1
000016B0  0C41 0400                772              CMPI.W  #$0400,D1
000016B4  6700 0086                773              BEQ     OP_NEG
000016B8                           774              
000016B8                           775              * check for NOT     * 0100 0110 xx (size) xxx (ea mode) xxx (ea reg)
000016B8  4281                     776              CLR.L   D1 
000016BA  2205                     777              MOVE.L  D5,D1  
000016BC  0241 0F00                778              ANDI.W  #$0F00,D1
000016C0  0C41 0600                779              CMPI.W  #$0600,D1
000016C4  6700 00DE                780              BEQ     OP_NOT
000016C8                           781              
000016C8                           782              * check for LEA     * 0100 xxx (reg) 111 xxx (ea mode) xxx (ea reg)
000016C8  4281                     783              CLR.L   D1 
000016CA  2205                     784              MOVE.L  D5,D1  
000016CC  E099                     785              ROR.L   #8,D1
000016CE  0C01 0001                786              CMPI.B  #1,D1
000016D2  6700 0054                787              BEQ     OP_LEA
000016D6                           788              
000016D6                           789              * check for MOVEM   * 0100 1 x 001 x (size) xxx (ea mode) xxx (ea reg)
000016D6  4281                     790              CLR.L   D1 
000016D8  2205                     791              MOVE.L  D5,D1  
000016DA  EB59                     792              ROL.W   #5,D1
000016DC  0C01 0001                793              CMPI.B  #1,D1
000016E0  6600 FD78                794              BNE     OP_DATA
000016E4  E959                     795              ROL.W   #4,D1
000016E6  0C01 0001                796              CMPI.B  #1,D1
000016EA  6600 FD6E                797              BNE     OP_DATA
000016EE  E359                     798              ROL.W   #1,D1
000016F0  0C01 0000                799              CMPI.B  #0,D1
000016F4  6700 000E                800              BEQ     OP_MOVEM_W
000016F8  0C01 0001                801              CMPI.B  #1,D1
000016FC  6700 0018                802              BEQ     OP_MOVEM_L
00001700  4EF8 145A                803              JMP     OP_DATA
00001704                           804  
00001704                           805  *---------------------------------------------------------------------------*
00001704                           806  * OP_MOVEM_W: display MOVEM_W
00001704                           807  *---------------------------------------------------------------------------*    
00001704                           808  OP_MOVEM_W  
00001704  183C 0001                809              MOVE.B  #1,D4
00001708  43F9 0000315F            810              LEA     DISP_MOVEM_W,A1
0000170E  103C 000E                811              MOVE.B  #14,D0
00001712  4E4F                     812              TRAP    #15
00001714  4E75                     813              RTS
00001716                           814  
00001716                           815  *---------------------------------------------------------------------------*
00001716                           816  * OP_MOVEM_L: display MOVEM_L
00001716                           817  *---------------------------------------------------------------------------*
00001716                           818  OP_MOVEM_L  
00001716  183C 0002                819              MOVE.B  #2,D4
0000171A  43F9 0000316A            820              LEA     DISP_MOVEM_L,A1
00001720  103C 000E                821              MOVE.B  #14,D0
00001724  4E4F                     822              TRAP    #15
00001726  4E75                     823              RTS
00001728                           824     
00001728                           825  *---------------------------------------------------------------------------*
00001728                           826  * OP_LEA: decode and display LEA
00001728                           827  *---------------------------------------------------------------------------*
00001728                           828  OP_LEA      
00001728  43F9 00003158            829              LEA     DISP_LEA,A1
0000172E  103C 000E                830              MOVE.B  #14,D0
00001732  4E4F                     831              TRAP    #15
00001734  4EF9 00001F98            832              JMP     EA_MOVEA
0000173A                           833  
0000173A  4E75                     834              RTS
0000173C                           835  
0000173C                           836  *---------------------------------------------------------------------------*
0000173C                           837  * OP_NEG: decode and display NEG 
0000173C                           838  *---------------------------------------------------------------------------*
0000173C                           839  OP_NEG      * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
0000173C  4281                     840              CLR.L   D1
0000173E  4284                     841              CLR.L   D4
00001740  2205                     842              MOVE.L  D5,D1
00001742  EC99                     843              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001744  0C01 0000                844              CMPI.B  #0,D1
00001748  6700 0012                845              BEQ     OP_NEG_B    * size is byte
0000174C  0C01 0001                846              CMPI.B  #1,D1
00001750  6700 0022                847              BEQ     OP_NEG_W    * size is word
00001754  0C01 0002                848              CMPI.B  #2,D1
00001758  6700 0032                849              BEQ     OP_NEG_L    * size is long
0000175C                           850                         
0000175C                           851  OP_NEG_B    * size is byte   
0000175C  183C 0000                852              MOVE.B  #0,D4 
00001760  43F9 00003122            853              LEA     DISP_NEG_B,A1
00001766  103C 000E                854              MOVE.B  #14,D0
0000176A  4E4F                     855              TRAP    #15
0000176C                           856              
0000176C  4EB9 00001F5E            857              JSR     EA_NOSRC
00001772  4E75                     858              RTS
00001774                           859              
00001774                           860  OP_NEG_W    * size is word
00001774  183C 0001                861              MOVE.B  #1,D4
00001778  43F9 0000312B            862              LEA     DISP_NEG_W,A1
0000177E  103C 000E                863              MOVE.B  #14,D0
00001782  4E4F                     864              TRAP    #15
00001784  4EB9 00001F5E            865              JSR     EA_NOSRC
0000178A  4E75                     866              RTS
0000178C                           867              
0000178C                           868  OP_NEG_L    * size is long
0000178C  183C 0002                869              MOVE.B  #2,D4
00001790  43F9 00003134            870              LEA     DISP_NEG_L,A1
00001796  103C 000E                871              MOVE.B  #14,D0
0000179A  4E4F                     872              TRAP    #15
0000179C  4EB9 00001F5E            873              JSR     EA_NOSRC
000017A2                           874              
000017A2  4E75                     875              RTS
000017A4                           876  
000017A4                           877  *---------------------------------------------------------------------------*
000017A4                           878  * OP_NOT: decode and display NOT 
000017A4                           879  *---------------------------------------------------------------------------*
000017A4                           880  OP_NOT
000017A4  4281                     881              CLR.L   D1
000017A6  4284                     882              CLR.L   D4
000017A8  2205                     883              MOVE.L  D5,D1
000017AA  EC99                     884              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000017AC  0C01 0000                885              CMPI.B  #0,D1
000017B0  6700 0012                886              BEQ     OP_NOT_B    * size is byte
000017B4  0C01 0001                887              CMPI.B  #1,D1
000017B8  6700 001C                888              BEQ     OP_NOT_W    * size is word
000017BC  0C01 0002                889              CMPI.B  #2,D1
000017C0  6700 0026                890              BEQ     OP_NOT_L    * size is long
000017C4                           891                         
000017C4                           892  OP_NOT_B    * size is byte   
000017C4  183C 0000                893              MOVE.B  #0,D4 
000017C8  43F9 0000313D            894              LEA     DISP_NOT_B,A1
000017CE  103C 000E                895              MOVE.B  #14,D0
000017D2  4E4F                     896              TRAP    #15
000017D4  4E75                     897              RTS
000017D6                           898              
000017D6                           899  OP_NOT_W    * size is word
000017D6  183C 0001                900              MOVE.B  #1,D4
000017DA  43F9 00003146            901              LEA     DISP_NOT_W,A1
000017E0  103C 000E                902              MOVE.B  #14,D0
000017E4  4E4F                     903              TRAP    #15
000017E6  4E75                     904              RTS
000017E8                           905              
000017E8                           906  OP_NOT_L    * size is long
000017E8  183C 0002                907              MOVE.B  #2,D4
000017EC  43F9 0000314F            908              LEA     DISP_NOT_L,A1
000017F2  103C 000E                909              MOVE.B  #14,D0
000017F6  4E4F                     910              TRAP    #15
000017F8  4E75                     911              RTS
000017FA                           912  
000017FA                           913  *---------------------------------------------------------------------------*
000017FA                           914  * OP_JSR: display JSR     
000017FA                           915  *---------------------------------------------------------------------------*
000017FA  43F9 0000311B            916  OP_JSR      LEA     DISP_JSR,A1
00001800  103C 000E                917              MOVE.B  #14,D0
00001804  4E4F                     918              TRAP    #15
00001806  4EB9 00001F5E            919              JSR     EA_NOSRC
0000180C                           920  
0000180C  4E75                     921              RTS
0000180E                           922  
0000180E                           923  *---------------------------------------------------------------------------*
0000180E                           924  * OP_RTS: display RTS     
0000180E                           925  *---------------------------------------------------------------------------* 
0000180E  43F9 00003114            926  OP_RTS      LEA     DISP_RTS,A1
00001814  103C 000E                927              MOVE.B  #14,D0
00001818  4E4F                     928              TRAP    #15
0000181A  4E75                     929              RTS
0000181C                           930  
0000181C                           931  *---------------------------------------------------------------------------*
0000181C                           932  * OP0101: decode ADDQ
0000181C                           933  *---------------------------------------------------------------------------* 
0000181C  4280                     934  OP0101      CLR.L   D0               * clear registers for temp storage       
0000181E  4281                     935              CLR.L   D1
00001820  4284                     936              CLR.L   D4                  
00001822  227C 00000000            937              MOVEA.L #0, A1  
00001828                           938              
00001828  2205                     939              MOVE.L  D5,D1           * copy the processing data 
0000182A  E089                     940              LSR.L   #8,D1           * shift to right by 8 bits to check the value of bit 8
0000182C  0201 0001                941              ANDI.B  #$1,D1          * mask all bits except the last 2 bits
00001830  0C01 0000                942              CMPI.B  #0,D1           * if the value is 0, it's ADDQ
00001834  6700 0006                943              BEQ     OP_ADDQ
00001838                           944              
00001838  4EF8 145A                945              JMP     OP_DATA
0000183C                           946       
0000183C  4281                     947  OP_ADDQ     CLR.L   D1
0000183E  2205                     948              MOVE.L  D5,D1
00001840  EC99                     949              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001842  0281 00000003            950              ANDI.L  #$3,D1
00001848  0C01 0000                951              CMPI.B  #0,D1
0000184C  6700 0014                952              BEQ     OP_ADDQ_B    * size is byte
00001850  0C41 0001                953              CMPI.W  #1,D1
00001854  6700 001E                954              BEQ     OP_ADDQ_W    * size is word
00001858  0C81 00000002            955              CMPI.L  #2,D1
0000185E  6700 0026                956              BEQ     OP_ADDQ_L    * size is long
00001862                           957              
00001862                           958  *---------------------------------------------------------------------------*
00001862                           959  * OP_ADDQ: display ADDQ
00001862                           960  *---------------------------------------------------------------------------*              
00001862                           961  OP_ADDQ_B    * size is byte   
00001862  183C 0000                962              MOVE.B  #0,D4 
00001866  43F9 00003175            963              LEA     DISP_ADDQ_B,A1
0000186C  103C 000E                964              MOVE.B  #14,D0
00001870  4E4F                     965              TRAP    #15
00001872  4E75                     966              RTS
00001874                           967              
00001874                           968  OP_ADDQ_W    * size is word
00001874  183C 0001                969              MOVE.B  #1,D4
00001878  43F9 0000317F            970              LEA     DISP_ADDQ_W,A1
0000187E  103C 000E                971              MOVE.B  #14,D0
00001882  4E4F                     972              TRAP    #15
00001884  4E75                     973              RTS
00001886                           974              
00001886                           975  OP_ADDQ_L    * size is long
00001886  183C 0002                976              MOVE.B  #2,D4
0000188A  43F9 00003189            977              LEA     DISP_ADDQ_L,A1
00001890  103C 000E                978              MOVE.B  #14,D0
00001894  4E4F                     979              TRAP    #15
00001896  4E75                     980              RTS
00001898                           981  
00001898                           982  *---------------------------------------------------------------------------*
00001898                           983  * OP0110: decode BRA/BEQ/BNE/BLT/BHI
00001898                           984  *---------------------------------------------------------------------------*              
00001898  4280                     985  OP0110      CLR.L   D0                  
0000189A  4281                     986              CLR.L   D1   
0000189C  4284                     987              CLR.L   D4                 
0000189E  227C 00000000            988              MOVEA.L #0,A1
000018A4  2205                     989              MOVE.L  D5, D1                
000018A6  0281 000000FF            990              ANDI.L  #$00FF, D1              * Get 8-bit displacement 
000018AC  2205                     991              MOVE.L  D5,D1                  
000018AE  0281 00000F00            992              ANDI.L  #$0F00,D1
000018B4                           993                 
000018B4  0C41 0000                994              CMPI.W  #$0000,D1               * Check for BRA
000018B8  6700 0050                995              BEQ     OP_BRA                  
000018BC                           996                          
000018BC  0C41 0D00                997              CMPI.W  #$0D00,D1               * Check for BLT
000018C0  6700 0056                998              BEQ     OP_BLT      
000018C4                           999  
000018C4  0C41 0700               1000              CMPI.W  #$0700,D1               * Check for BEQ
000018C8  6700 0032               1001              BEQ     OP_BEQ      
000018CC                          1002  
000018CC  0C41 0600               1003              CMPI.W  #$0600,D1               * Check for BNE
000018D0  6700 001C               1004              BEQ     OP_BNE  
000018D4                          1005              
000018D4  0C41 0200               1006              CMPI.W  #$0200,D1               * Check for BHI
000018D8  6700 0006               1007              BEQ     OP_BHI
000018DC                          1008  
000018DC  4EF8 145A               1009              JMP     OP_DATA
000018E0                          1010              
000018E0  43F9 00003344           1011  OP_BHI      LEA     DISP_BHI,A1             
000018E6  103C 000E               1012              MOVE.B  #14,D0
000018EA  4E4F                    1013              TRAP    #15
000018EC  4E75                    1014              RTS
000018EE                          1015  
000018EE  43F9 0000333D           1016  OP_BNE      LEA     DISP_BNE,A1             
000018F4  103C 000E               1017              MOVE.B  #14,D0
000018F8  4E4F                    1018              TRAP    #15
000018FA  4E75                    1019              RTS
000018FC                          1020  
000018FC  43F9 00003336           1021  OP_BEQ      LEA     DISP_BEQ,A1             
00001902  103C 000E               1022              MOVE.B  #14,D0
00001906  4E4F                    1023              TRAP    #15
00001908  4E75                    1024              RTS          
0000190A                          1025                          
0000190A  43F9 00003328           1026  OP_BRA      LEA     DISP_BRA,A1             
00001910  103C 000E               1027              MOVE.B  #14,D0
00001914  4E4F                    1028              TRAP    #15
00001916  4E75                    1029              RTS
00001918                          1030              
00001918  43F9 0000332F           1031  OP_BLT      LEA     DISP_BLT,A1          
0000191E  103C 000E               1032              MOVE.B  #14,D0
00001922  4E4F                    1033              TRAP    #15
00001924  4E75                    1034              RTS
00001926                          1035     
00001926                          1036  *---------------------------------------------------------------------------*
00001926                          1037  * OP0111 : MOVEQ not required
00001926                          1038  *---------------------------------------------------------------------------*           
00001926  4EF8 145A               1039  OP0111      JMP     OP_DATA
0000192A                          1040             
0000192A                          1041  *---------------------------------------------------------------------------*
0000192A                          1042  * OP1000 : decode DIVS
0000192A                          1043  *---------------------------------------------------------------------------*           
0000192A                          1044  OP1000      
0000192A  4280                    1045              CLR.L   D0                
0000192C  4281                    1046              CLR.L   D1   
0000192E  4284                    1047              CLR.L   D4                
00001930  207C 00000000           1048              MOVEA.L #0, A0               
00001936  227C 00000000           1049              MOVEA.L #0, A1               
0000193C                          1050              
0000193C  2205                    1051              MOVE.L  D5,D1
0000193E  EA89                    1052              LSR.L   #5,D1
00001940  0281 0000000E           1053              ANDI.L  #$E,D1
00001946                          1054    
00001946  0C01 000E               1055              CMPI.B  #$E,D1
0000194A  6700 0006               1056              BEQ     OP_DIVS
0000194E                          1057              
0000194E  4EF8 145A               1058              JMP     OP_DATA
00001952                          1059  
00001952                          1060  *---------------------------------------------------------------------------*
00001952                          1061  * OP_DIVS: display DIVS and proceed to EA
00001952                          1062  *---------------------------------------------------------------------------*  
00001952  43F9 00003193           1063  OP_DIVS     LEA     DISP_DIVS,A1
00001958  103C 000E               1064              MOVE.B  #14,D0
0000195C  4E4F                    1065              TRAP    #15
0000195E  4EF9 00001F72           1066              JMP     EA_ARITH
00001964                          1067  
00001964  4E75                    1068              RTS
00001966                          1069              
00001966                          1070  *---------------------------------------------------------------------------*
00001966                          1071  * OP1001: decode SUB/SUBA
00001966                          1072  *---------------------------------------------------------------------------*      
00001966  4280                    1073  OP1001      CLR.L   D0                
00001968  4281                    1074              CLR.L   D1   
0000196A  4284                    1075              CLR.L   D4                 
0000196C  207C 00000000           1076              MOVEA.L #0, A0                 
00001972  227C 00000000           1077              MOVEA.L #0, A1               
00001978                          1078              
00001978  2205                    1079              MOVE.L  D5,D1
0000197A  EA89                    1080              LSR.L   #5,D1
0000197C  0281 0000000E           1081              ANDI.L  #$E,D1
00001982                          1082    
00001982  0C01 0000               1083              CMPI.B  #$0,D1
00001986  6700 004A               1084              BEQ     OP_SUB_B
0000198A  0C01 0002               1085              CMPI.B  #$2,D1
0000198E  6700 005A               1086              BEQ     OP_SUB_W
00001992  0C01 0004               1087              CMPI.B  #$4,D1
00001996  6700 006A               1088              BEQ     OP_SUB_L
0000199A  0C01 0008               1089              CMPI.B  #$8,D1
0000199E  6700 0032               1090              BEQ     OP_SUB_B
000019A2  0C01 000A               1091              CMPI.B  #$A,D1
000019A6  6700 0042               1092              BEQ     OP_SUB_W
000019AA  0C01 000C               1093              CMPI.B  #$C,D1
000019AE  6700 0052               1094              BEQ     OP_SUB_L
000019B2                          1095              
000019B2  4241                    1096              CLR     D1
000019B4  2205                    1097              MOVE.L  D5,D1
000019B6  EC89                    1098              LSR.L   #6,D1
000019B8  0281 0000000F           1099              ANDI.L  #$F,D1
000019BE  0C01 0003               1100              CMPI.B  #3,D1
000019C2  6700 0056               1101              BEQ     OP_SUBA_W
000019C6  0C01 0007               1102              CMPI.B  #7,D1
000019CA  6700 0060               1103              BEQ     OP_SUBA_L
000019CE                          1104              
000019CE  4EF8 145A               1105              JMP     OP_DATA
000019D2                          1106    
000019D2                          1107  *---------------------------------------------------------------------------*
000019D2                          1108  * OP_SUB: display SUB and proceed to EA
000019D2                          1109  *---------------------------------------------------------------------------*            
000019D2  43F9 0000319B           1110  OP_SUB_B    LEA     DISP_SUB_B,A1
000019D8  103C 000E               1111              MOVE.B  #14,D0
000019DC  4E4F                    1112              TRAP    #15
000019DE  183C 0000               1113              MOVE.B  #0,D4
000019E2  4EF9 00001FBE           1114              JMP     EA_GEN
000019E8                          1115  
000019E8  4E75                    1116              RTS
000019EA                          1117  
000019EA  43F9 000031A4           1118  OP_SUB_W    LEA     DISP_SUB_W,A1
000019F0  103C 000E               1119              MOVE.B  #14,D0
000019F4  4E4F                    1120              TRAP    #15
000019F6  183C 0001               1121              MOVE.B  #1,D4
000019FA  4EF9 00001FBE           1122              JMP     EA_GEN
00001A00                          1123  
00001A00  4E75                    1124              RTS
00001A02                          1125  
00001A02  43F9 000031AD           1126  OP_SUB_L    LEA     DISP_SUB_L,A1
00001A08  103C 000E               1127              MOVE.B  #14,D0
00001A0C  4E4F                    1128              TRAP    #15
00001A0E  183C 0002               1129              MOVE.B  #2,D4
00001A12  4EF9 00001FBE           1130              JMP     EA_GEN
00001A18                          1131  
00001A18  4E75                    1132              RTS
00001A1A                          1133  
00001A1A                          1134  *---------------------------------------------------------------------------*
00001A1A                          1135  * OP_SUBA: display SUBA
00001A1A                          1136  *---------------------------------------------------------------------------*  
00001A1A  43F9 000031D4           1137  OP_SUBA_W   LEA     DISP_SUBA_W,A1
00001A20  103C 000E               1138              MOVE.B  #14,D0
00001A24  4E4F                    1139              TRAP    #15
00001A26  183C 0001               1140              MOVE.B  #1,D4
00001A2A  4E75                    1141              RTS
00001A2C                          1142  
00001A2C  43F9 000031DE           1143  OP_SUBA_L   LEA     DISP_SUBA_L,A1
00001A32  103C 000E               1144              MOVE.B  #14,D0
00001A36  4E4F                    1145              TRAP    #15
00001A38  183C 0002               1146              MOVE.B  #2,D4
00001A3C  4E75                    1147              RTS         
00001A3E                          1148  *---------------------------------------------------------------------------*
00001A3E                          1149  * OP1010 : unassigned
00001A3E                          1150  *---------------------------------------------------------------------------*           
00001A3E  4EF8 145A               1151  OP1010      JMP     OP_DATA
00001A42                          1152              
00001A42                          1153  *---------------------------------------------------------------------------*
00001A42                          1154  * OP1011 : decode CMP/EOR/CMPA
00001A42                          1155  *---------------------------------------------------------------------------*           
00001A42  4280                    1156  OP1011      CLR.L   D0                
00001A44  4281                    1157              CLR.L   D1            
00001A46  4284                    1158              CLR.L   D4                   
00001A48  227C 00000000           1159              MOVEA.L #0, A1               
00001A4E  2205                    1160              MOVE.L  D5,D1
00001A50  EA99                    1161              ROR.L   #5,D1
00001A52  0281 0000000E           1162              ANDI.L  #$E,D1
00001A58  0C01 0000               1163              CMPI.B  #$0,D1
00001A5C  6700 0062               1164              BEQ     OP_CMP_B
00001A60  0C01 0002               1165              CMPI.B  #$2,D1
00001A64  6700 0072               1166              BEQ     OP_CMP_W
00001A68  0C01 0004               1167              CMPI.B  #$4,D1
00001A6C  6700 0082               1168              BEQ     OP_CMP_L
00001A70  0C01 0008               1169              CMPI.B  #$8,D1
00001A74  6700 0092               1170              BEQ     OP_EOR_B
00001A78  0C01 000A               1171              CMPI.B  #$A,D1
00001A7C  6700 009C               1172              BEQ     OP_EOR_W
00001A80  0C01 000C               1173              CMPI.B  #$C,D1
00001A84  6700 00A6               1174              BEQ     OP_EOR_L  
00001A88  0C01 0006               1175              CMPI.B  #$6,D1
00001A8C  6700 000E               1176              BEQ     OP_CMPA_W
00001A90  0C01 000E               1177              CMPI.B  #$E,D1
00001A94  6700 0018               1178              BEQ     OP_CMPA_L 
00001A98                          1179  
00001A98  4EF8 145A               1180              JMP     OP_DATA          
00001A9C                          1181  
00001A9C                          1182  *---------------------------------------------------------------------------*
00001A9C                          1183  * OP_CMPA: display CMPA 
00001A9C                          1184  *---------------------------------------------------------------------------
00001A9C  43F9 0000321E           1185  OP_CMPA_W   LEA     DISP_CMPA_W,A1
00001AA2  103C 000E               1186              MOVE.B  #14,D0
00001AA6  4E4F                    1187              TRAP    #15
00001AA8  183C 0001               1188              MOVE.B  #1,D4
00001AAC  4E75                    1189              RTS
00001AAE                          1190  
00001AAE  43F9 00003228           1191  OP_CMPA_L   LEA     DISP_CMPA_L,A1
00001AB4  103C 000E               1192              MOVE.B  #14,D0
00001AB8  4E4F                    1193              TRAP    #15
00001ABA  183C 0002               1194              MOVE.B  #2,D4
00001ABE  4E75                    1195              RTS
00001AC0                          1196  
00001AC0                          1197  *---------------------------------------------------------------------------*
00001AC0                          1198  * OP_CMP: display CMP and proceed to EA
00001AC0                          1199  *---------------------------------------------------------------------------*  
00001AC0  43F9 00003203           1200  OP_CMP_B    LEA     DISP_CMP_B,A1
00001AC6  103C 000E               1201              MOVE.B  #14,D0
00001ACA  4E4F                    1202              TRAP    #15
00001ACC  183C 0000               1203              MOVE.B  #0,D4
00001AD0  4EF9 00001FBE           1204              JMP     EA_GEN
00001AD6                          1205  
00001AD6  4E75                    1206              RTS
00001AD8                          1207              
00001AD8  43F9 0000320C           1208  OP_CMP_W    LEA     DISP_CMP_W,A1
00001ADE  103C 000E               1209              MOVE.B  #14,D0
00001AE2  4E4F                    1210              TRAP    #15
00001AE4  183C 0001               1211              MOVE.B  #1,D4
00001AE8  4EF9 00001FBE           1212              JMP     EA_GEN
00001AEE                          1213  
00001AEE  4E75                    1214              RTS
00001AF0                          1215              
00001AF0  43F9 00003215           1216  OP_CMP_L    LEA     DISP_CMP_L,A1
00001AF6  103C 000E               1217              MOVE.B  #14,D0
00001AFA  4E4F                    1218              TRAP    #15
00001AFC  183C 0002               1219              MOVE.B  #2,D4
00001B00  4EF9 00001FBE           1220              JMP     EA_GEN
00001B06                          1221  
00001B06  4E75                    1222              RTS
00001B08                          1223              
00001B08                          1224  *---------------------------------------------------------------------------*
00001B08                          1225  * OP_EOR: display EOR
00001B08                          1226  *---------------------------------------------------------------------------*  
00001B08  43F9 000031E8           1227  OP_EOR_B    LEA     DISP_EOR_B,A1
00001B0E  103C 000E               1228              MOVE.B  #14,D0
00001B12  4E4F                    1229              TRAP    #15
00001B14  183C 0000               1230              MOVE.B  #0,D4
00001B18  4E75                    1231              RTS
00001B1A                          1232              
00001B1A  43F9 000031F1           1233  OP_EOR_W    LEA     DISP_EOR_W,A1
00001B20  103C 000E               1234              MOVE.B  #14,D0
00001B24  4E4F                    1235              TRAP    #15
00001B26  183C 0001               1236              MOVE.B  #1,D4
00001B2A  4E75                    1237              RTS
00001B2C                          1238              
00001B2C  43F9 000031FA           1239  OP_EOR_L    LEA     DISP_EOR_L,A1
00001B32  103C 000E               1240              MOVE.B  #14,D0
00001B36  4E4F                    1241              TRAP    #15
00001B38  183C 0002               1242              MOVE.B  #2,D4
00001B3C  4E75                    1243              RTS    
00001B3E                          1244  
00001B3E                          1245  *---------------------------------------------------------------------------*
00001B3E                          1246  * OP1100: Decode and display MULS/AND and proceed to EA
00001B3E                          1247  *---------------------------------------------------------------------------* 
00001B3E  4280                    1248  OP1100      CLR.L   D0                 
00001B40  4281                    1249              CLR.L   D1    
00001B42  4284                    1250              CLR.L   D4                
00001B44  227C 00000000           1251              MOVEA.L #0, A1             
00001B4A                          1252              
00001B4A  2205                    1253              MOVE.L  D5,D1
00001B4C  EA89                    1254              LSR.L   #5,D1
00001B4E  0281 0000000E           1255              ANDI.L  #$E,D1
00001B54  0C41 000E               1256              CMPI.W  #$E,D1
00001B58  6700 0036               1257              BEQ     OP_MULS
00001B5C  0C41 0000               1258              CMPI.W  #$0,D1
00001B60  6700 0042               1259              BEQ     OP_AND_B
00001B64  0C41 0002               1260              CMPI.W  #$2,D1
00001B68  6700 004C               1261              BEQ     OP_AND_W
00001B6C  0C41 0004               1262              CMPI.W  #$4,D1
00001B70  6700 0056               1263              BEQ     OP_AND_L
00001B74  0C41 0008               1264              CMPI.W  #$8,D1
00001B78  6700 002A               1265              BEQ     OP_AND_B
00001B7C  0C41 000A               1266              CMPI.W  #$A,D1
00001B80  6700 0034               1267              BEQ     OP_AND_W
00001B84  0C41 000C               1268              CMPI.W  #$C,D1
00001B88  6700 003E               1269              BEQ     OP_AND_L
00001B8C                          1270  
00001B8C  4EF8 145A               1271              JMP     OP_DATA
00001B90                          1272  
00001B90  43F9 00003232           1273  OP_MULS     LEA     DISP_MULS_W,A1
00001B96  103C 000E               1274              MOVE.B  #14,D0
00001B9A  4E4F                    1275              TRAP    #15
00001B9C  4EF9 00001F72           1276              JMP     EA_ARITH
00001BA2  4E75                    1277              RTS
00001BA4                          1278              
00001BA4                          1279  OP_AND_B    
00001BA4  43F9 0000323C           1280              LEA     DISP_AND_B,A1
00001BAA  103C 000E               1281              MOVE.B  #14,D0
00001BAE  4E4F                    1282              TRAP    #15
00001BB0  183C 0000               1283              MOVE.B  #0,D4
00001BB4  4E75                    1284              RTS
00001BB6                          1285  
00001BB6                          1286  OP_AND_W
00001BB6  43F9 00003245           1287              LEA     DISP_AND_W,A1
00001BBC  103C 000E               1288              MOVE.B  #14,D0
00001BC0  4E4F                    1289              TRAP    #15
00001BC2  183C 0001               1290              MOVE.B  #1,D4
00001BC6  4E75                    1291              RTS
00001BC8                          1292  
00001BC8                          1293  OP_AND_L
00001BC8  43F9 0000324E           1294              LEA     DISP_AND_L,A1
00001BCE  103C 000E               1295              MOVE.B  #14,D0
00001BD2  4E4F                    1296              TRAP    #15
00001BD4  183C 0002               1297              MOVE.B  #2,D4
00001BD8  4E75                    1298              RTS
00001BDA                          1299  
00001BDA                          1300  *---------------------------------------------------------------------------*
00001BDA                          1301  * OP1101: Decode ADD/ADDA
00001BDA                          1302  *---------------------------------------------------------------------------* 
00001BDA  4280                    1303  OP1101      CLR.L   D0                  
00001BDC  4281                    1304              CLR.L   D1       
00001BDE  4284                    1305              CLR.L   D4                   
00001BE0  227C 00000000           1306              MOVEA.L #0, A1              
00001BE6  2205                    1307              MOVE.L  D5,D1
00001BE8  EA99                    1308              ROR.L   #5,D1
00001BEA  0281 0000000E           1309              ANDI.L  #$E,D1
00001BF0  0C01 0000               1310              CMPI.B  #$0,D1
00001BF4  6700 003E               1311              BEQ     OP_ADD_B
00001BF8  0C01 0002               1312              CMPI.B  #$2,D1
00001BFC  6700 004E               1313              BEQ     OP_ADD_W
00001C00  0C01 0004               1314              CMPI.B  #$4,D1
00001C04  6700 005E               1315              BEQ     OP_ADD_L
00001C08  0C01 0008               1316              CMPI.B  #$8,D1
00001C0C  6700 0026               1317              BEQ     OP_ADD_B
00001C10  0C01 000A               1318              CMPI.B  #$A,D1
00001C14  6700 0036               1319              BEQ     OP_ADD_W
00001C18  0C01 000C               1320              CMPI.B  #$C,D1
00001C1C  6700 0046               1321              BEQ     OP_ADD_L  
00001C20                          1322              
00001C20  0C01 0006               1323              CMPI.B  #$6,D1
00001C24  6700 0056               1324              BEQ     OP_ADDA_W
00001C28  0C01 000E               1325              CMPI.B  #$E,D1
00001C2C  6700 0066               1326              BEQ     OP_ADDA_L 
00001C30                          1327  
00001C30  4EF8 145A               1328              JMP     OP_DATA  
00001C34                          1329            
00001C34                          1330  *---------------------------------------------------------------------------*
00001C34                          1331  * OP_ADD: display ADD and proceed to EA
00001C34                          1332  *---------------------------------------------------------------------------*  
00001C34  43F9 00003257           1333  OP_ADD_B    LEA     DISP_ADD_B,A1
00001C3A  103C 000E               1334              MOVE.B  #14,D0
00001C3E  4E4F                    1335              TRAP    #15
00001C40  183C 0000               1336              MOVE.B  #0,D4
00001C44  4EF9 00001FBE           1337              JMP     EA_GEN
00001C4A                          1338  
00001C4A  4E75                    1339              RTS
00001C4C                          1340  
00001C4C  43F9 00003260           1341  OP_ADD_W    LEA     DISP_ADD_W,A1
00001C52  103C 000E               1342              MOVE.B  #14,D0
00001C56  4E4F                    1343              TRAP    #15
00001C58  183C 0001               1344              MOVE.B  #1,D4
00001C5C  4EF9 00001FBE           1345              JMP     EA_GEN
00001C62                          1346  
00001C62  4E75                    1347              RTS
00001C64                          1348  
00001C64  43F9 00003269           1349  OP_ADD_L    LEA     DISP_ADD_L,A1
00001C6A  103C 000E               1350              MOVE.B  #14,D0
00001C6E  4E4F                    1351              TRAP    #15
00001C70  183C 0002               1352              MOVE.B  #2,D4
00001C74  4EF9 00001FBE           1353              JMP     EA_GEN
00001C7A                          1354  
00001C7A  4E75                    1355              RTS
00001C7C                          1356  
00001C7C                          1357  *---------------------------------------------------------------------------*
00001C7C                          1358  * OP_ADDA: display ADDA and proceed to EA
00001C7C                          1359  *---------------------------------------------------------------------------*  
00001C7C  43F9 00003272           1360  OP_ADDA_W   LEA     DISP_ADDA_W,A1
00001C82  103C 000E               1361              MOVE.B  #14,D0
00001C86  4E4F                    1362              TRAP    #15
00001C88  183C 0001               1363              MOVE.B  #1,D4
00001C8C  4EF9 00001FBE           1364              JMP     EA_GEN
00001C92                          1365  
00001C92  4E75                    1366              RTS
00001C94                          1367  
00001C94  43F9 0000327C           1368  OP_ADDA_L   LEA     DISP_ADDA_L,A1
00001C9A  103C 000E               1369              MOVE.B  #14,D0
00001C9E  4E4F                    1370              TRAP    #15
00001CA0  183C 0002               1371              MOVE.B  #2,D4
00001CA4  4EF9 00001FBE           1372              JMP     EA_GEN
00001CAA                          1373  
00001CAA  4E75                    1374              RTS
00001CAC                          1375              
00001CAC                          1376  *---------------------------------------------------------------------------*
00001CAC                          1377  * OP1110: LSR/LSL/ASR/ASL/ROL/ROR
00001CAC                          1378  *---------------------------------------------------------------------------* 
00001CAC  4280                    1379  OP1110      CLR.L   D0                  
00001CAE  4281                    1380              CLR.L   D1   
00001CB0  4284                    1381              CLR.L   D4                   
00001CB2  227C 00000000           1382              MOVEA.L #0, A1                 
00001CB8  2205                    1383              MOVE.L  D5,D1
00001CBA                          1384              
00001CBA                          1385              * check for LSX
00001CBA  E699                    1386              ROR.L   #3,D1
00001CBC  0281 00000001           1387              ANDI.L  #$1,D1
00001CC2  0C01 0001               1388              CMPI.B  #1,D1
00001CC6  6700 002E               1389              BEQ     OP_LSX
00001CCA                          1390              
00001CCA                          1391              * reset D1 and check for ASX
00001CCA  4281                    1392              CLR.L   D1
00001CCC  2205                    1393              MOVE.L  D5,D1
00001CCE  E699                    1394              ROR.L   #3,D1
00001CD0  0281 00000001           1395              ANDI.L  #$1,D1
00001CD6  0C01 0000               1396              CMPI.B  #0,D1
00001CDA  6700 0032               1397              BEQ     OP_ASX
00001CDE                          1398  
00001CDE                          1399              * reset D1 and check for ROX
00001CDE  4281                    1400              CLR.L   D1
00001CE0  2205                    1401              MOVE.L  D5,D1
00001CE2  E699                    1402              ROR.L   #3,D1
00001CE4  0281 00000001           1403              ANDI.L  #$1,D1
00001CEA  0C01 0003               1404              CMPI.B  #3,D1
00001CEE  6700 0036               1405              BEQ     OP_ROX
00001CF2                          1406              
00001CF2  4EF8 145A               1407              JMP     OP_DATA
00001CF6                          1408  
00001CF6                          1409  *---------------------------------------------------------------------------*
00001CF6                          1410  * OP_LSX: process LSR/LSL
00001CF6                          1411  *---------------------------------------------------------------------------*            
00001CF6  EA99                    1412  OP_LSX      ROR.L   #5,D1
00001CF8  0281 00000001           1413              ANDI.L  #$1,D1
00001CFE  0C01 0000               1414              CMPI.B  #0,D1
00001D02  6700 003A               1415              BEQ     OP_LSR
00001D06  0C01 0001               1416              CMPI.B  #1,D1
00001D0A  6700 008C               1417              BEQ     OP_LSL
00001D0E                          1418              
00001D0E                          1419  *---------------------------------------------------------------------------*
00001D0E                          1420  * OP_ASX: process ASR/ASL
00001D0E                          1421  *---------------------------------------------------------------------------*  
00001D0E  EA99                    1422  OP_ASX      ROR.L   #5,D1
00001D10  0281 00000001           1423              ANDI.L  #$1,D1
00001D16  0C01 0000               1424              CMPI.B  #0,D1
00001D1A  6700 00D6               1425              BEQ     OP_ASR
00001D1E  0C01 0001               1426              CMPI.B  #1,D1
00001D22  6700 0128               1427              BEQ     OP_ASL
00001D26                          1428              
00001D26                          1429  *---------------------------------------------------------------------------*
00001D26                          1430  * OP_ROX: process ROR/ROL
00001D26                          1431  *---------------------------------------------------------------------------*  
00001D26  EA99                    1432  OP_ROX      ROR.L   #5,D1
00001D28  0281 00000001           1433              ANDI.L  #$1,D1
00001D2E  0C01 0000               1434              CMPI.B  #0,D1
00001D32  6700 0172               1435              BEQ     OP_ROR
00001D36  0C01 0001               1436              CMPI.B  #1,D1
00001D3A  6700 01C4               1437              BEQ     OP_ROL
00001D3E                          1438  
00001D3E                          1439  *---------------------------------------------------------------------------*
00001D3E                          1440  * OP_LSR: decode and display LSR
00001D3E                          1441  *---------------------------------------------------------------------------*        
00001D3E  E599                    1442  OP_LSR      ROL.L   #2,D1
00001D40  0281 00000003           1443              ANDI.L  #$3,D1
00001D46  0C01 0000               1444              CMPI.B  #0,D1
00001D4A  6700 0016               1445              BEQ     OP_LSR_B
00001D4E  0C01 0001               1446              CMPI.B  #$1,D1
00001D52  6700 0032               1447              BEQ     OP_LSR_W
00001D56  0C01 0002               1448              CMPI.B  #$2,D1
00001D5A  6700 0018               1449              BEQ     OP_LSR_L
00001D5E                          1450              
00001D5E  4EF8 145A               1451              JMP     OP_DATA
00001D62                          1452  
00001D62  43F9 00003286           1453  OP_LSR_B    LEA     DISP_LSR_B,A1
00001D68  103C 000E               1454              MOVE.B  #14,D0
00001D6C  4E4F                    1455              TRAP    #15
00001D6E  183C 0000               1456              MOVE.B  #0,D4
00001D72  4E75                    1457              RTS
00001D74                          1458  
00001D74  43F9 000032AA           1459  OP_LSR_L    LEA     DISP_LSR_L,A1
00001D7A  103C 000E               1460              MOVE.B  #14,D0
00001D7E  4E4F                    1461              TRAP    #15
00001D80  183C 0002               1462              MOVE.B  #2,D4
00001D84  4E75                    1463              RTS
00001D86                          1464  
00001D86  43F9 00003298           1465  OP_LSR_W    LEA     DISP_LSR_W,A1
00001D8C  103C 000E               1466              MOVE.B  #14,D0
00001D90  4E4F                    1467              TRAP    #15
00001D92  183C 0001               1468              MOVE.B  #1,D4
00001D96  4E75                    1469              RTS
00001D98                          1470   
00001D98                          1471  *---------------------------------------------------------------------------*
00001D98                          1472  * OP_LSL: decode and display LSL
00001D98                          1473  *---------------------------------------------------------------------------*             
00001D98  E599                    1474  OP_LSL      ROL.L   #2,D1
00001D9A  0281 00000003           1475              ANDI.L  #$3,D1
00001DA0  0C01 0000               1476              CMPI.B  #0,D1
00001DA4  6700 0016               1477              BEQ     OP_LSL_B
00001DA8  0C01 0001               1478              CMPI.B  #$1,D1
00001DAC  6700 0032               1479              BEQ     OP_LSL_W
00001DB0  0C01 0002               1480              CMPI.B  #$2,D1
00001DB4  6700 0018               1481              BEQ     OP_LSL_L
00001DB8                          1482              
00001DB8  4EF8 145A               1483              JMP OP_DATA
00001DBC                          1484  
00001DBC  43F9 0000328F           1485  OP_LSL_B    LEA     DISP_LSL_B,A1
00001DC2  103C 000E               1486              MOVE.B  #14,D0
00001DC6  4E4F                    1487              TRAP    #15
00001DC8  183C 0000               1488              MOVE.B  #0,D4
00001DCC  4E75                    1489              RTS
00001DCE                          1490  
00001DCE  43F9 000032B3           1491  OP_LSL_L    LEA     DISP_LSL_L,A1
00001DD4  103C 000E               1492              MOVE.B  #14,D0
00001DD8  4E4F                    1493              TRAP    #15
00001DDA  183C 0002               1494              MOVE.B  #2,D4
00001DDE  4E75                    1495              RTS
00001DE0                          1496  
00001DE0  43F9 000032A1           1497  OP_LSL_W    LEA     DISP_LSL_W,A1
00001DE6  103C 000E               1498              MOVE.B  #14,D0
00001DEA  4E4F                    1499              TRAP    #15
00001DEC  183C 0001               1500              MOVE.B  #1,D4
00001DF0  4E75                    1501              RTS
00001DF2                          1502   
00001DF2                          1503  *---------------------------------------------------------------------------*
00001DF2                          1504  * OP_ASR: decode and display ASR
00001DF2                          1505  *---------------------------------------------------------------------------*             
00001DF2  E599                    1506  OP_ASR      ROL.L   #2,D1
00001DF4  0281 00000003           1507              ANDI.L  #$3,D1
00001DFA  0C01 0000               1508              CMPI.B  #0,D1
00001DFE  6700 0016               1509              BEQ     OP_ASR_B
00001E02  0C01 0001               1510              CMPI.B  #$1,D1
00001E06  6700 0032               1511              BEQ     OP_ASR_W
00001E0A  0C01 0002               1512              CMPI.B  #$2,D1
00001E0E  6700 0018               1513              BEQ     OP_ASR_L
00001E12                          1514              
00001E12  4EF8 145A               1515              JMP OP_DATA
00001E16                          1516  
00001E16  43F9 000032BC           1517  OP_ASR_B    LEA     DISP_ASR_B,A1
00001E1C  103C 000E               1518              MOVE.B  #14,D0
00001E20  4E4F                    1519              TRAP    #15
00001E22  183C 0000               1520              MOVE.B  #0,D4
00001E26  4E75                    1521              RTS
00001E28                          1522  
00001E28  43F9 000032E0           1523  OP_ASR_L    LEA     DISP_ASR_L,A1
00001E2E  103C 000E               1524              MOVE.B  #14,D0
00001E32  4E4F                    1525              TRAP    #15
00001E34  183C 0002               1526              MOVE.B  #2,D4
00001E38  4E75                    1527              RTS
00001E3A                          1528  
00001E3A  43F9 000032CE           1529  OP_ASR_W    LEA     DISP_ASR_W,A1
00001E40  103C 000E               1530              MOVE.B  #14,D0
00001E44  4E4F                    1531              TRAP    #15
00001E46  183C 0001               1532              MOVE.B  #1,D4
00001E4A  4E75                    1533              RTS
00001E4C                          1534       
00001E4C                          1535  *---------------------------------------------------------------------------*
00001E4C                          1536  * OP_ASL: decode and display ASL
00001E4C                          1537  *---------------------------------------------------------------------------*         
00001E4C  E599                    1538  OP_ASL      ROL.L   #2,D1
00001E4E  0281 00000003           1539              ANDI.L  #$3,D1
00001E54  0C01 0000               1540              CMPI.B  #0,D1
00001E58  6700 0016               1541              BEQ     OP_ASL_B
00001E5C  0C01 0001               1542              CMPI.B  #$1,D1
00001E60  6700 0032               1543              BEQ     OP_ASL_W
00001E64  0C01 0002               1544              CMPI.B  #$2,D1
00001E68  6700 0018               1545              BEQ     OP_ASL_L
00001E6C                          1546              
00001E6C  4EF8 145A               1547              JMP OP_DATA
00001E70                          1548  
00001E70  43F9 000032C5           1549  OP_ASL_B    LEA     DISP_ASL_B,A1
00001E76  103C 000E               1550              MOVE.B  #14,D0
00001E7A  4E4F                    1551              TRAP    #15
00001E7C  183C 0000               1552              MOVE.B  #0,D4
00001E80  4E75                    1553              RTS
00001E82                          1554  
00001E82  43F9 000032E9           1555  OP_ASL_L    LEA     DISP_ASL_L,A1
00001E88  103C 000E               1556              MOVE.B  #14,D0
00001E8C  4E4F                    1557              TRAP    #15
00001E8E  183C 0002               1558              MOVE.B  #2,D4
00001E92  4E75                    1559              RTS
00001E94                          1560  
00001E94  43F9 000032D7           1561  OP_ASL_W    LEA     DISP_ASL_W,A1
00001E9A  103C 000E               1562              MOVE.B  #14,D0
00001E9E  4E4F                    1563              TRAP    #15
00001EA0  183C 0001               1564              MOVE.B  #1,D4
00001EA4  4E75                    1565              RTS
00001EA6                          1566   
00001EA6                          1567  *---------------------------------------------------------------------------*
00001EA6                          1568  * OP_ROR: decode and display ROR
00001EA6                          1569  *---------------------------------------------------------------------------*             
00001EA6  E599                    1570  OP_ROR      ROL.L   #2,D1
00001EA8  0281 00000003           1571              ANDI.L  #$3,D1
00001EAE  0C01 0000               1572              CMPI.B  #0,D1
00001EB2  6700 0016               1573              BEQ     OP_ROR_B
00001EB6  0C01 0001               1574              CMPI.B  #$1,D1
00001EBA  6700 0032               1575              BEQ     OP_ROR_W
00001EBE  0C01 0002               1576              CMPI.B  #$2,D1
00001EC2  6700 0018               1577              BEQ     OP_ROR_L
00001EC6                          1578              
00001EC6  4EF8 145A               1579              JMP OP_DATA
00001ECA                          1580  
00001ECA  43F9 000032F2           1581  OP_ROR_B    LEA     DISP_ROR_B,A1
00001ED0  103C 000E               1582              MOVE.B  #14,D0
00001ED4  4E4F                    1583              TRAP    #15
00001ED6  183C 0000               1584              MOVE.B  #0,D4
00001EDA  4E75                    1585              RTS
00001EDC                          1586  
00001EDC  43F9 00003316           1587  OP_ROR_L    LEA     DISP_ROR_L,A1
00001EE2  103C 000E               1588              MOVE.B  #14,D0
00001EE6  4E4F                    1589              TRAP    #15
00001EE8  183C 0002               1590              MOVE.B  #2,D4
00001EEC  4E75                    1591              RTS
00001EEE                          1592  
00001EEE  43F9 00003304           1593  OP_ROR_W    LEA     DISP_ROR_W,A1
00001EF4  103C 000E               1594              MOVE.B  #14,D0
00001EF8  4E4F                    1595              TRAP    #15
00001EFA  183C 0001               1596              MOVE.B  #1,D4
00001EFE  4E75                    1597              RTS
00001F00                          1598  
00001F00                          1599  *---------------------------------------------------------------------------*
00001F00                          1600  * OP_ROL: decode and display ROL
00001F00                          1601  *---------------------------------------------------------------------------*             
00001F00  E599                    1602  OP_ROL      ROL.L   #2,D1
00001F02  0281 00000003           1603              ANDI.L  #$3,D1
00001F08  0C01 0000               1604              CMPI.B  #0,D1
00001F0C  6700 0016               1605              BEQ     OP_ROL_B
00001F10  0C01 0001               1606              CMPI.B  #$1,D1
00001F14  6700 0032               1607              BEQ     OP_ROL_W
00001F18  0C01 0002               1608              CMPI.B  #$2,D1
00001F1C  6700 0018               1609              BEQ     OP_ROL_L
00001F20                          1610              
00001F20  4EF8 145A               1611              JMP OP_DATA
00001F24                          1612  
00001F24                          1613  
00001F24  43F9 000032FB           1614  OP_ROL_B    LEA     DISP_ROL_B,A1
00001F2A  103C 000E               1615              MOVE.B  #14,D0
00001F2E  4E4F                    1616              TRAP    #15
00001F30  183C 0000               1617              MOVE.B  #0,D4
00001F34  4E75                    1618              RTS
00001F36                          1619  
00001F36  43F9 0000331F           1620  OP_ROL_L    LEA     DISP_ROL_L,A1
00001F3C  103C 000E               1621              MOVE.B  #14,D0
00001F40  4E4F                    1622              TRAP    #15
00001F42  183C 0002               1623              MOVE.B  #2,D4
00001F46  4E75                    1624              RTS
00001F48                          1625  
00001F48  43F9 0000330D           1626  OP_ROL_W    LEA     DISP_ROL_W,A1
00001F4E  103C 000E               1627              MOVE.B  #14,D0
00001F52  4E4F                    1628              TRAP    #15
00001F54  183C 0001               1629              MOVE.B  #1,D4
00001F58  4E75                    1630              RTS
00001F5A                          1631              
00001F5A                          1632  *---------------------------------------------------------------------------*
00001F5A                          1633  * OP1111 : Special reserved
00001F5A                          1634  *---------------------------------------------------------------------------*           
00001F5A  4EF8 145A               1635  OP1111      JMP     OP_DATA
00001F5E                          1636  
00001F5E                          1637  *---------------------------------------------------------------------------*
00001F5E                          1638  * EA_NOSRC: decode and display effective addresses for NEG/JSR
00001F5E                          1639  *---------------------------------------------------------------------------*
00001F5E                          1640  EA_NOSRC    
00001F5E  4EB9 0000201C           1641              JSR     SRC_MODE
00001F64  43F9 00002FEC           1642              LEA     ENDLINE_M,A1
00001F6A  103C 000E               1643              MOVE.B  #14,D0
00001F6E  4E4F                    1644              TRAP    #15
00001F70  4E75                    1645              RTS
00001F72                          1646              
00001F72                          1647  *---------------------------------------------------------------------------*
00001F72                          1648  * EA_ARITH: decode and display effective addresses for DIVS/MULS
00001F72                          1649  *---------------------------------------------------------------------------*
00001F72                          1650  EA_ARITH
00001F72  4EB9 0000201C           1651              JSR     SRC_MODE
00001F78  43F9 00003366           1652              LEA     DISP_D,A1
00001F7E  103C 000E               1653              MOVE.B  #14,D0
00001F82  4E4F                    1654              TRAP    #15
00001F84  4EB9 000022A8           1655              JSR     DEST_REGISTER
00001F8A  43F9 00002FEC           1656              LEA     ENDLINE_M,A1
00001F90  103C 000E               1657              MOVE.B  #14,D0
00001F94  4E4F                    1658              TRAP    #15
00001F96  4E75                    1659              RTS
00001F98                          1660              
00001F98                          1661  *---------------------------------------------------------------------------*
00001F98                          1662  * EA_MOVEA: decode and display effective addresses for MOVEA/LEA
00001F98                          1663  *---------------------------------------------------------------------------*
00001F98                          1664  EA_MOVEA
00001F98  4EB9 0000201C           1665              JSR     SRC_MODE
00001F9E  43F9 00003377           1666              LEA     DISP_AOP,A1
00001FA4  103C 000E               1667              MOVE.B  #14,D0
00001FA8  4E4F                    1668              TRAP    #15
00001FAA  4EB9 000022A8           1669              JSR     DEST_REGISTER
00001FB0  43F9 00003375           1670              LEA     DISP_CP,A1
00001FB6  103C 000D               1671              MOVE.B  #13,D0
00001FBA  4E4F                    1672              TRAP    #15
00001FBC  4E75                    1673              RTS
00001FBE                          1674              
00001FBE                          1675  *---------------------------------------------------------------------------*
00001FBE                          1676  * EA_GEN: decode and display effective addresses for MOVE
00001FBE                          1677  *---------------------------------------------------------------------------*
00001FBE                          1678  EA_GEN          
00001FBE                          1679              * retrieve/display source mode/register
00001FBE  4EB9 0000201C           1680              JSR     SRC_MODE
00001FC4                          1681              
00001FC4                          1682              * retrieve/display destination mode/register
00001FC4  4EB9 00001FD8           1683              JSR     DEST_MODE
00001FCA                          1684              
00001FCA  43F9 00002FEC           1685              LEA     ENDLINE_M,A1
00001FD0  103C 000E               1686              MOVE.B  #14,D0
00001FD4  4E4F                    1687              TRAP    #15
00001FD6                          1688              
00001FD6  4E75                    1689              RTS
00001FD8                          1690  
00001FD8                          1691  *---------------------------------------------------------------------------*
00001FD8                          1692  * DEST_MODE: decode and display destination mode (bit 8 - 6)
00001FD8                          1693  *---------------------------------------------------------------------------*           
00001FD8                          1694  DEST_MODE   
00001FD8                          1695              * clear registers to store temp data
00001FD8  4280                    1696              CLR.L   D0                      
00001FDA  4281                    1697              CLR.L   D1                      
00001FDC  207C 00000000           1698              MOVEA.L #0, A0                  
00001FE2  227C 00000000           1699              MOVEA.L #0, A1                  
00001FE8  2205                    1700              MOVE.L  D5,D1
00001FEA  EC89                    1701              LSR.L   #6,D1
00001FEC  0281 00000007           1702              ANDI.L  #$7,D1
00001FF2  0C01 0000               1703              CMPI.B  #0,D1   * Dn
00001FF6  6700 0082               1704              BEQ     D_MODE000
00001FFA  0C01 0002               1705              CMPI.B  #2,D1   * (An)
00001FFE  6700 00C2               1706              BEQ     D_MODE010
00002002  0C01 0003               1707              CMPI.B  #3,D1   * (An)+
00002006  6700 011A               1708              BEQ     D_MODE011
0000200A  0C01 0004               1709              CMPI.B  #4,D1   * -(An)
0000200E  6700 0132               1710              BEQ     D_MODE100
00002012  0C01 0007               1711              CMPI.B  #7,D1  * abs
00002016  6700 017C               1712              BEQ     D_MODE111 
0000201A  4E75                    1713              RTS
0000201C                          1714  
0000201C                          1715  *---------------------------------------------------------------------------*
0000201C                          1716  * SRC_MODE: decode and display source mode (bit 5 - 3)
0000201C                          1717  *---------------------------------------------------------------------------*  
0000201C                          1718  SRC_MODE    
0000201C                          1719              * clear registers to store temp data
0000201C  4280                    1720              CLR.L   D0                      
0000201E  4281                    1721              CLR.L   D1                      
00002020  207C 00000000           1722              MOVEA.L #0, A0                  
00002026  227C 00000000           1723              MOVEA.L #0, A1                  
0000202C  2205                    1724              MOVE.L  D5,D1
0000202E  E489                    1725              LSR.L   #2,D1
00002030  0281 0000000E           1726              ANDI.L  #$E,D1
00002036                          1727              
00002036  0C01 0000               1728              CMPI.B  #0,D1   * Dn
0000203A  6700 002A               1729              BEQ     MODE000
0000203E  0C01 0002               1730              CMPI.B  #2,D1   * An 
00002042  6700 004A               1731              BEQ     MODE001
00002046  0C01 0004               1732              CMPI.B  #4,D1   * (An)
0000204A  6700 0056               1733              BEQ     MODE010
0000204E  0C01 0006               1734              CMPI.B  #6,D1   * (An)+
00002052  6700 008E               1735              BEQ     MODE011
00002056  0C01 0008               1736              CMPI.B  #8,D1   * -(An)
0000205A  6700 00A6               1737              BEQ     MODE100
0000205E  0C01 000F               1738              CMPI.B  #15,D1  * abs/immediate
00002062  6700 00FE               1739              BEQ     MODE111 
00002066                          1740        
00002066                          1741  *---------------------------------------------------------------------------*
00002066                          1742  * MODE000: decode and display source mode Dn
00002066                          1743  *---------------------------------------------------------------------------*           
00002066                          1744  MODE000     *Dn
00002066  43F9 00003366           1745              LEA     DISP_D,A1
0000206C  103C 000E               1746              MOVE.B  #14,D0
00002070  4E4F                    1747              TRAP    #15
00002072  4EB9 00002304           1748              JSR     SRC_REGISTER
00002078  4E75                    1749              RTS
0000207A                          1750  
0000207A                          1751  *---------------------------------------------------------------------------*
0000207A                          1752  * D_MODE000: decode and display dest mode Dn
0000207A                          1753  *---------------------------------------------------------------------------*
0000207A                          1754  D_MODE000     *Dn
0000207A  43F9 00003366           1755              LEA     DISP_D,A1
00002080  103C 000E               1756              MOVE.B  #14,D0
00002084  4E4F                    1757              TRAP    #15
00002086  4EB9 000022A8           1758              JSR     DEST_REGISTER
0000208C  4E75                    1759              RTS
0000208E                          1760  
0000208E                          1761  *---------------------------------------------------------------------------*
0000208E                          1762  * MODE001: decode and display source mode An
0000208E                          1763  *---------------------------------------------------------------------------* 
0000208E                          1764  MODE001 *An
0000208E  43F9 0000336B           1765              LEA     DISP_A,A1
00002094  103C 000E               1766              MOVE.B  #14,D0
00002098  4E4F                    1767              TRAP    #15
0000209A  4EB9 00002304           1768              JSR     SRC_REGISTER
000020A0                          1769          
000020A0  4E75                    1770              RTS
000020A2                          1771  
000020A2                          1772  *---------------------------------------------------------------------------*
000020A2                          1773  * MODE010: decode and display source mode (An)
000020A2                          1774  *---------------------------------------------------------------------------*    
000020A2                          1775  MODE010 *(An)
000020A2  43F9 00003377           1776              LEA     DISP_AOP,A1  *display (A
000020A8  103C 000E               1777              MOVE.B  #14,D0
000020AC  4E4F                    1778              TRAP    #15
000020AE                          1779  
000020AE  4EB9 00002304           1780              JSR     SRC_REGISTER * display register
000020B4                          1781  
000020B4  43F9 00003375           1782              LEA     DISP_CP,A1   *display )
000020BA  103C 000E               1783              MOVE.B  #14,D0
000020BE  4E4F                    1784              TRAP    #15
000020C0                          1785              
000020C0  4E75                    1786              RTS
000020C2                          1787  
000020C2                          1788  *---------------------------------------------------------------------------*
000020C2                          1789  * D_MODE010: decode and display dest mode (An)
000020C2                          1790  *---------------------------------------------------------------------------*
000020C2                          1791  D_MODE010 *(An)
000020C2  43F9 00003377           1792              LEA     DISP_AOP,A1  *display (A
000020C8  103C 000E               1793              MOVE.B  #14,D0
000020CC  4E4F                    1794              TRAP    #15
000020CE                          1795     
000020CE  4EB9 000022A8           1796              JSR     DEST_REGISTER * display register
000020D4                          1797  
000020D4  43F9 00003375           1798              LEA     DISP_CP,A1   *display )
000020DA  103C 000E               1799              MOVE.B  #14,D0
000020DE  4E4F                    1800              TRAP    #15
000020E0                          1801              
000020E0  4E75                    1802              RTS
000020E2                          1803  
000020E2                          1804  *---------------------------------------------------------------------------*
000020E2                          1805  * MODE011: decode and display source mode (An)+
000020E2                          1806  *---------------------------------------------------------------------------*
000020E2                          1807  MODE011 *(An)+
000020E2  43F9 00003377           1808              LEA     DISP_AOP,A1      *display (A
000020E8  103C 000E               1809              MOVE.B  #14,D0
000020EC  4E4F                    1810              TRAP    #15
000020EE                          1811              
000020EE  4EB9 00002304           1812              JSR     SRC_REGISTER    * display register
000020F4                          1813  
000020F4  43F9 00003384           1814              LEA     DISP_POST,A1    *display )+
000020FA  103C 000E               1815              MOVE.B  #14,D0
000020FE  4E4F                    1816              TRAP    #15
00002100                          1817              
00002100  4E75                    1818              RTS
00002102                          1819              
00002102                          1820  *---------------------------------------------------------------------------*
00002102                          1821  * MODE100: decode and display source mode -(An)
00002102                          1822  *---------------------------------------------------------------------------*
00002102                          1823  MODE100 *-(An)
00002102  43F9 0000337D           1824              LEA     DISP_PRE,A1    *display -(A
00002108  103C 000E               1825              MOVE.B  #14,D0
0000210C  4E4F                    1826              TRAP    #15
0000210E                          1827  
0000210E  4EB9 00002304           1828              JSR     SRC_REGISTER    *display register
00002114                          1829  
00002114  43F9 00003375           1830              LEA     DISP_CP,A1   *display )
0000211A  103C 000E               1831              MOVE.B  #14,D0
0000211E  4E4F                    1832              TRAP    #15
00002120                          1833              
00002120  4E75                    1834              RTS
00002122                          1835  
00002122                          1836  *---------------------------------------------------------------------------*
00002122                          1837  * D_MODE011: decode and display dest mode (An)+
00002122                          1838  *---------------------------------------------------------------------------*
00002122                          1839  D_MODE011 *(An)+
00002122  43F9 00003377           1840              LEA     DISP_AOP,A1      *display (A
00002128  103C 000E               1841              MOVE.B  #14,D0
0000212C  4E4F                    1842              TRAP    #15
0000212E                          1843  
0000212E  4EB9 000022A8           1844              JSR     DEST_REGISTER    * display register
00002134                          1845  
00002134  43F9 00003384           1846              LEA     DISP_POST,A1    *display )+
0000213A  103C 000E               1847              MOVE.B  #14,D0
0000213E  4E4F                    1848              TRAP    #15
00002140                          1849              
00002140  4E75                    1850              RTS
00002142                          1851              
00002142                          1852  *---------------------------------------------------------------------------*
00002142                          1853  * D_MODE100: decode and display dest mode -(An)
00002142                          1854  *---------------------------------------------------------------------------*            
00002142                          1855  D_MODE100 *-(An)
00002142  43F9 0000337D           1856              LEA     DISP_PRE,A1    *display -(A
00002148  103C 000E               1857              MOVE.B  #14,D0
0000214C  4E4F                    1858              TRAP    #15
0000214E                          1859              
0000214E  4EB9 000022A8           1860              JSR     DEST_REGISTER    *display register
00002154                          1861  
00002154  43F9 00003375           1862              LEA     DISP_CP,A1   *display )
0000215A  103C 000E               1863              MOVE.B  #14,D0
0000215E  4E4F                    1864              TRAP    #15
00002160                          1865              
00002160  4E75                    1866              RTS
00002162                          1867  
00002162                          1868  *---------------------------------------------------------------------------*
00002162                          1869  * MODE111: decode and display source mode absolute/immediate
00002162                          1870  *---------------------------------------------------------------------------*
00002162                          1871  MODE111     * abs/immediate
00002162                          1872              * clear registers to store temp data
00002162  4280                    1873              CLR.L   D0                      
00002164  4281                    1874              CLR.L   D1                      
00002166  207C 00000000           1875              MOVEA.L #0, A0                  
0000216C  227C 00000000           1876              MOVEA.L #0, A1                  
00002172  2205                    1877              MOVE.L  D5,D1
00002174                          1878              
00002174                          1879              * retrieve source register for MODE 111
00002174  E389                    1880              LSL.L   #1,D1   * shift the bits to left by 1
00002176  0281 0000000E           1881              ANDI.L  #$E,D1  * mask the first 4 bits 
0000217C  0C01 0000               1882              CMPI.B  #0, D1  * if it's 0000, absolute word address
00002180  6700 003E               1883              BEQ     WORDMODE
00002184  0C01 0002               1884              CMPI.B  #2, D1  * if it's 0010, absolute long address
00002188  6700 0062               1885              BEQ     LONGMODE
0000218C  0C01 0008               1886              CMPI.B  #8, D1  * if it's 1000, immediate data
00002190  6700 0086               1887              BEQ     IMMEDIATE
00002194                          1888       
00002194                          1889  *---------------------------------------------------------------------------*
00002194                          1890  * D_MODE111: decode and display dest mode absolute/immediate
00002194                          1891  *---------------------------------------------------------------------------*           
00002194                          1892  D_MODE111   * abs
00002194                          1893              * clear registers to store temp data
00002194  4280                    1894              CLR.L   D0                      
00002196  4281                    1895              CLR.L   D1                      
00002198  207C 00000000           1896              MOVEA.L #0, A0                  
0000219E  227C 00000000           1897              MOVEA.L #0, A1                  
000021A4  2205                    1898              MOVE.L  D5,D1
000021A6                          1899              
000021A6                          1900              * retrieve dest register for MODE 111
000021A6  EC89                    1901              LSR.L   #6,D1   * shift the bits to right by 6
000021A8  E689                    1902              LSR.L   #3,D1   * shift the bits to right by extra 3
000021AA  0201 0001               1903              ANDI.B  #1,D1   * mask the first 2 bits 
000021AE  0C01 0000               1904              CMPI.B  #0, D1  * if it's 000, absolute word address
000021B2  6700 000C               1905              BEQ     WORDMODE
000021B6  0C01 0001               1906              CMPI.B  #1, D1  * if it's 001, absolute long address
000021BA  6700 0030               1907              BEQ     LONGMODE
000021BE                          1908              *JSR     OP_DATA *not sure..
000021BE  4E75                    1909              RTS
000021C0                          1910  
000021C0                          1911  
000021C0                          1912  *---------------------------------------------------------------------------*
000021C0                          1913  * WORDMODE: absolute word address
000021C0                          1914  *---------------------------------------------------------------------------*
000021C0  43F9 00003361           1915  WORDMODE    LEA     DISP_HEX,A1
000021C6  103C 000E               1916              MOVE.B  #14,D0
000021CA  4E4F                    1917              TRAP    #15
000021CC                          1918              
000021CC  4285                    1919              CLR.L   D5
000021CE  3A1D                    1920              MOVE.W  (A5)+,D5
000021D0                          1921              
000021D0  43F9 0000303F           1922              LEA     TMPOUTPUT,A1
000021D6  2205                    1923              MOVE.L  D5,D1
000021D8  7404                    1924              MOVE.L  #4,D2       *move word size 4
000021DA  4EB8 11B6               1925              JSR     HEX2ASCII
000021DE  43F9 0000303F           1926              LEA     TMPOUTPUT,A1
000021E4  103C 000E               1927              MOVE.B  #14,D0
000021E8  4E4F                    1928              TRAP    #15
000021EA                          1929              
000021EA  4E75                    1930              RTS
000021EC                          1931  
000021EC                          1932  *---------------------------------------------------------------------------*
000021EC                          1933  * LONGMODE: absolute long address
000021EC                          1934  *---------------------------------------------------------------------------*
000021EC  43F9 00003361           1935  LONGMODE    LEA     DISP_HEX,A1
000021F2  103C 000E               1936              MOVE.B  #14,D0
000021F6  4E4F                    1937              TRAP    #15
000021F8                          1938              
000021F8  4285                    1939              CLR.L   D5
000021FA  2A1D                    1940              MOVE.L  (A5)+,D5
000021FC                          1941              
000021FC  43F9 0000303F           1942              LEA     TMPOUTPUT,A1
00002202  2205                    1943              MOVE.L  D5,D1
00002204  7408                    1944              MOVE.L  #8,D2           *move longword size 8
00002206  4EB8 11B6               1945              JSR     HEX2ASCII
0000220A  43F9 0000303F           1946              LEA     TMPOUTPUT,A1
00002210  103C 000E               1947              MOVE.B  #14,D0
00002214  4E4F                    1948              TRAP    #15
00002216                          1949              
00002216  4E75                    1950              RTS
00002218                          1951  
00002218                          1952  
00002218                          1953  *---------------------------------------------------------------------------*
00002218                          1954  * IMMEDIATE: immediate address
00002218                          1955  *---------------------------------------------------------------------------*
00002218  43F9 00003387           1956  IMMEDIATE   LEA     DISP_LB,A1
0000221E  103C 000E               1957              MOVE.B  #14,D0
00002222  4E4F                    1958              TRAP    #15
00002224  43F9 00003361           1959              LEA     DISP_HEX,A1
0000222A  103C 000E               1960              MOVE.B  #14,D0
0000222E  4E4F                    1961              TRAP    #15
00002230                          1962              
00002230                          1963              * check for size
00002230  0C04 0000               1964              CMPI.B  #0,D4
00002234  6700 0012               1965              BEQ     IMMD_B
00002238  0C04 0001               1966              CMPI.B  #1,D4
0000223C  6700 002A               1967              BEQ     IMMD_W
00002240  0C04 0002               1968              CMPI.B  #2,D4
00002244  6700 0042               1969              BEQ     IMMD_L
00002248                          1970  
00002248                          1971  IMMD_B
00002248  4285                    1972              CLR.L   D5
0000224A  3A1D                    1973              MOVE.W  (A5)+,D5
0000224C                          1974              
0000224C  43F9 0000303F           1975              LEA     TMPOUTPUT,A1
00002252  2205                    1976              MOVE.L  D5,D1
00002254  7402                    1977              MOVE.L  #2,D2
00002256  4EB8 11B6               1978              JSR     HEX2ASCII
0000225A  43F9 0000303F           1979              LEA     TMPOUTPUT,A1
00002260  103C 000E               1980              MOVE.B  #14,D0
00002264  4E4F                    1981              TRAP    #15
00002266  4E75                    1982              RTS
00002268                          1983              
00002268                          1984  IMMD_W
00002268  4285                    1985              CLR.L   D5
0000226A  3A1D                    1986              MOVE.W  (A5)+,D5
0000226C                          1987              
0000226C  43F9 0000303F           1988              LEA     TMPOUTPUT,A1
00002272  2205                    1989              MOVE.L  D5,D1
00002274  7404                    1990              MOVE.L  #4,D2
00002276  4EB8 11B6               1991              JSR     HEX2ASCII
0000227A  43F9 0000303F           1992              LEA     TMPOUTPUT,A1
00002280  103C 000E               1993              MOVE.B  #14,D0
00002284  4E4F                    1994              TRAP    #15
00002286  4E75                    1995              RTS
00002288                          1996              
00002288                          1997  
00002288                          1998  IMMD_L
00002288  4285                    1999              CLR.L   D5
0000228A  3A1D                    2000              MOVE.W  (A5)+,D5
0000228C                          2001              
0000228C  43F9 0000303F           2002              LEA     TMPOUTPUT,A1
00002292  2205                    2003              MOVE.L  D5,D1
00002294  7408                    2004              MOVE.L  #8,D2
00002296  4EB8 11B6               2005              JSR     HEX2ASCII
0000229A  43F9 0000303F           2006              LEA     TMPOUTPUT,A1
000022A0  103C 000E               2007              MOVE.B  #14,D0
000022A4  4E4F                    2008              TRAP    #15
000022A6  4E75                    2009              RTS
000022A8                          2010  
000022A8                          2011  
000022A8                          2012  *---------------------------------------------------------------------------*
000022A8                          2013  * DEST_REGISTER: decode and display destination register (bit 11 - 9)
000022A8                          2014  *---------------------------------------------------------------------------*
000022A8                          2015  DEST_REGISTER
000022A8                          2016              * clear registers to store temp data
000022A8  4280                    2017              CLR.L   D0                      
000022AA  4281                    2018              CLR.L   D1                      
000022AC  207C 00000000           2019              MOVEA.L #0, A0                  
000022B2  227C 00000000           2020              MOVEA.L #0, A1 
000022B8                          2021              
000022B8  2205                    2022              MOVE.L  D5,D1
000022BA  EC89                    2023              LSR.L   #6,D1
000022BC  E689                    2024              LSR.L   #3,D1
000022BE  0281 00000007           2025              ANDI.L  #7,D1
000022C4                          2026              
000022C4  0C01 0000               2027              CMPI.B  #0,D1
000022C8  6700 0092               2028              BEQ     REG_0
000022CC  0C01 0001               2029              CMPI.B  #1,D1
000022D0  6700 0098               2030              BEQ     REG_1
000022D4  0C01 0002               2031              CMPI.B  #2,D1
000022D8  6700 009E               2032              BEQ     REG_2
000022DC  0C01 0003               2033              CMPI.B  #3,D1
000022E0  6700 00A4               2034              BEQ     REG_3
000022E4  0C01 0004               2035              CMPI.B  #4,D1
000022E8  6700 00AA               2036              BEQ     REG_4
000022EC  0C01 0005               2037              CMPI.B  #5,D1
000022F0  6700 00B0               2038              BEQ     REG_5
000022F4  0C01 0006               2039              CMPI.B  #6,D1
000022F8  6700 00B6               2040              BEQ     REG_6
000022FC  0C01 0007               2041              CMPI.B  #7,D1
00002300  6700 00BC               2042              BEQ     REG_7
00002304                          2043  
00002304                          2044  *---------------------------------------------------------------------------*
00002304                          2045  * SRC_REGISTER: decode and display source register (bit 2 - 0)
00002304                          2046  *---------------------------------------------------------------------------*           
00002304                          2047  SRC_REGISTER 
00002304                          2048              * clear registers to store temp data
00002304  4280                    2049              CLR.L   D0                      
00002306  4281                    2050              CLR.L   D1                      
00002308  207C 00000000           2051              MOVEA.L #0, A0                  
0000230E  227C 00000000           2052              MOVEA.L #0, A1                  
00002314                          2053              
00002314  2205                    2054              MOVE.L  D5,D1   * temp store the processing data
00002316  0281 00000007           2055              ANDI.L  #7,D1   * mask the first 4 bits with 0111
0000231C                          2056              
0000231C  0C01 0000               2057              CMPI.B  #0,D1
00002320  6700 003A               2058              BEQ     REG_0
00002324  0C01 0001               2059              CMPI.B  #1,D1
00002328  6700 0040               2060              BEQ     REG_1
0000232C  0C01 0002               2061              CMPI.B  #2,D1
00002330  6700 0046               2062              BEQ     REG_2
00002334  0C01 0003               2063              CMPI.B  #3,D1
00002338  6700 004C               2064              BEQ     REG_3
0000233C  0C01 0004               2065              CMPI.B  #4,D1
00002340  6700 0052               2066              BEQ     REG_4
00002344  0C01 0005               2067              CMPI.B  #5,D1
00002348  6700 0058               2068              BEQ     REG_5
0000234C  0C01 0006               2069              CMPI.B  #6,D1
00002350  6700 005E               2070              BEQ     REG_6
00002354  0C01 0007               2071              CMPI.B  #7,D1
00002358  6700 0064               2072              BEQ     REG_7
0000235C                          2073  
0000235C                          2074  *---------------------------------------------------------------------------*
0000235C                          2075  * REG_0 ~ REG_7: display register 0 to 7
0000235C                          2076  *---------------------------------------------------------------------------*
0000235C  43F9 0000338C           2077  REG_0       LEA     DISP_0,A1
00002362  103C 000E               2078              MOVE.B  #14,D0
00002366  4E4F                    2079              TRAP    #15
00002368  4E75                    2080              RTS
0000236A                          2081              
0000236A  43F9 0000338E           2082  REG_1       LEA     DISP_1,A1
00002370  103C 000E               2083              MOVE.B  #14,D0
00002374  4E4F                    2084              TRAP    #15
00002376  4E75                    2085              RTS
00002378                          2086              
00002378                          2087  
00002378  43F9 00003390           2088  REG_2       LEA     DISP_2,A1
0000237E  103C 000E               2089              MOVE.B  #14,D0
00002382  4E4F                    2090              TRAP    #15
00002384  4E75                    2091              RTS
00002386                          2092            
00002386  43F9 00003392           2093  REG_3       LEA     DISP_3,A1
0000238C  103C 000E               2094              MOVE.B  #14,D0
00002390  4E4F                    2095              TRAP    #15
00002392  4E75                    2096              RTS
00002394                          2097              
00002394  43F9 00003394           2098  REG_4       LEA     DISP_4,A1
0000239A  103C 000E               2099              MOVE.B  #14,D0
0000239E  4E4F                    2100              TRAP    #15
000023A0  4E75                    2101              RTS
000023A2                          2102              
000023A2  43F9 00003396           2103  REG_5       LEA     DISP_5,A1
000023A8  103C 000E               2104              MOVE.B  #14,D0
000023AC  4E4F                    2105              TRAP    #15
000023AE  4E75                    2106              RTS
000023B0                          2107              
000023B0  43F9 00003398           2108  REG_6       LEA     DISP_6,A1
000023B6  103C 000E               2109              MOVE.B  #14,D0
000023BA  4E4F                    2110              TRAP    #15
000023BC  4E75                    2111              RTS
000023BE                          2112              
000023BE  43F9 0000339A           2113  REG_7       LEA     DISP_7,A1
000023C4  103C 000E               2114              MOVE.B  #14,D0
000023C8  4E4F                    2115              TRAP    #15
000023CA  4E75                    2116              RTS
000023CC                          2117              
000023CC                          2118  *---------------------------------------------------------------------------*
000023CC                          2119  * REPEAT : Ask user whether they wish to run the program again
000023CC                          2120  *---------------------------------------------------------------------------*           
000023CC  4246                    2121  REPEAT      CLR.W   D6                      * Reset D6 (Loop Count)
000023CE  43F9 00002E65           2122              LEA     REPEATMSG,A1
000023D4  103C 000E               2123              MOVE.B  #14,D0
000023D8  4E4F                    2124              TRAP    #15
000023DA                          2125              
000023DA  43F9 00002FEF           2126              LEA     TMPINPUT,A1             * allocate space to temp store user input
000023E0  103C 0002               2127              MOVE.B  #2,D0
000023E4  4E4F                    2128              TRAP    #15
000023E6                          2129  
000023E6  0C01 0001               2130              CMPI.B  #1,D1                   * check for length of user input
000023EA  66E0                    2131              BNE     REPEAT                  * return to the beginning of the function if unequal
000023EC                          2132              
000023EC  0C11 0059               2133              CMPI.B  #$59,(A1)               * compare the input with Y    
000023F0  6700 EC18               2134              BEQ     PROGLP                  * repeat the program
000023F4                          2135              
000023F4  0C11 0079               2136              CMPI.B  #$79,(A1)               * compare the input with y    
000023F8  6700 EC10               2137              BEQ     PROGLP                  * repeat the program
000023FC                          2138              
000023FC  0C11 004E               2139              CMPI.B  #$4E,(A1)               * compare the input with N    
00002400  6700 06F6               2140              BEQ     TERMINATE               * finish program
00002404                          2141              
00002404  0C11 006E               2142              CMPI.B  #$6E,(A1)               * compare the input with n    
00002408  6700 06EE               2143              BEQ     TERMINATE               * finish program
0000240C                          2144              
0000240C  60BE                    2145              BRA     REPEAT                  * invalid input/repeat the function
0000240E                          2146  
0000240E                          2147  *---------------------------------------------------------------------------*
0000240E                          2148  * EA DECODING INTERFACE
0000240E                          2149  * [A0] - RESERVED FOR USE
0000240E                          2150  * [D2] - RESERVED FOR USE
0000240E                          2151  * RETURNS - ERROR FLAG IF FAILED TO PUSH SRC EA INTO STACK
0000240E                          2152  *---------------------------------------------------------------------------*
0000240E                          2153  GET_EA_EA_SRC
0000240E                          2154      *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
0000240E                          2155      
0000240E                          2156      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
0000240E  2405                    2157      MOVE.L  D5,D2                           * CLEAN COPY TO D2
00002410  E68A                    2158      LSR.L   #3,D2                           * [D2] Temporarily used D2 for shifting bits
00002412  23C2 000033B2           2159      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
00002418  7407                    2160      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
0000241A  C5B9 000033B2           2161      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
00002420                          2162                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
00002420                          2163      
00002420                          2164      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
00002420                          2165      *DESTINATION REGISTER FORMAT STANDARD         *
00002420                          2166      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
00002420                          2167      *WHEN BIT = 0(VALID ADDRESS MODE)             *
00002420                          2168      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
00002420                          2169      *0 - Dn                                       *
00002420                          2170      *1 - An                                       *
00002420                          2171      *2 - (An)                                     *
00002420                          2172      *3 - (An)+                                    *
00002420                          2173      *4 - -(An)                                    *
00002420                          2174      *5 - (XXX).W                                  *
00002420                          2175      *6 - (XXX).L                                  *
00002420                          2176      *7 - #<data>                                  *
00002420                          2177      ***********************************************
00002420                          2178      
00002420                          2179      *** Check if source ...  <ea> = Dn
00002420                          2180  CHECK0    
00002420  41F9 000033A2           2181            LEA     TEMP_REGISTER_FORMAT,A0
00002426  1439 000033A1           2182            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000242C  1082                    2183            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000242E  0239 0001 000033A2      2184            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
00002436  0C39 0001 000033A2      2185            CMP.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
0000243E  6700 0068               2186            BEQ     CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00002442  0C79 0000 000033B2      2187            CMP     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn)
0000244A  6600 005C               2188            BNE     CHECK1
0000244E                          2189            
0000244E                          2190            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
0000244E  163C 0020               2191            MOVE.B    #' ',D3
00002452  6100 0626               2192            BSR       PUSH_STACK
00002456  163C 0044               2193            MOVE.B    #'D',D3
0000245A  6100 061E               2194            BSR       PUSH_STACK
0000245E                          2195  
0000245E                          2196            *FIND REGISTER NUMBER END LOCATION*  
0000245E  13F9 000033A4 000033AA  2197            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002468  0239 000F 000033AA      2198            AND.B   #$0F,VAR_BYTE_END
00002470                          2199            
00002470                          2200            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002470  23C5 000033AE           2201            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002476  1439 000033AA           2202            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
0000247C                          2203            
0000247C                          2204            *INTITIALIZE FOR BIT SHIFTING
0000247C  41F9 000033AE           2205            LEA     VAR_TEMP_CLEANCOPY,A0
00002482  2639 000033AE           2206            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002488                          2207  LOOP_SHIFTING
00002488  B43C 0000               2208            CMP.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000248C  6700 0008               2209            BEQ     MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00002490  E24B                    2210            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002492  5302                    2211            SUB.B   #1,D2                     *DECREMENT COUNTER
00002494  60F2                    2212            BRA     LOOP_SHIFTING             *CONTINUE SHIFTING
00002496                          2213  MASKING_NEXT
00002496  C6BC 00000007           2214            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
0000249C  0603 0030               2215            ADD.B   #$30,D3                   *CONVERT TO CHAR
000024A0  6100 05D8               2216            BSR     PUSH_STACK                *PUSH TO STACK
000024A4                          2217            
000024A4  6000 027C               2218            BRA     GET_SRC_SUCCESS           *RETURN          
000024A8                          2219            
000024A8                          2220            
000024A8                          2221            *** Check if source ...  <ea> = An
000024A8  41F9 000033A2           2222  CHECK1    LEA     TEMP_REGISTER_FORMAT,A0
000024AE  1439 000033A1           2223            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000024B4  1082                    2224            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000024B6  0239 0002 000033A2      2225            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
000024BE  0C39 0002 000033A2      2226            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
000024C6  6700 0068               2227            BEQ     CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
000024CA  0C79 0000 000033B2      2228            CMP     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * An
000024D2  6600 005C               2229            BNE     CHECK2
000024D6                          2230            
000024D6                          2231            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000024D6  163C 0020               2232            MOVE.B    #' ',D3
000024DA  6100 059E               2233            BSR       PUSH_STACK
000024DE  163C 0041               2234            MOVE.B    #'A',D3
000024E2  6100 0596               2235            BSR       PUSH_STACK
000024E6                          2236  
000024E6                          2237            
000024E6                          2238            *FIND REGISTER NUMBER END LOCATION*  
000024E6  13F9 000033A4 000033AA  2239            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
000024F0  0239 000F 000033AA      2240            AND.B   #$0F,VAR_BYTE_END
000024F8                          2241            
000024F8                          2242            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000024F8  23C5 000033AE           2243            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000024FE  1439 000033AA           2244            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
00002504                          2245            
00002504                          2246            *INTITIALIZE FOR BIT SHIFTING
00002504  41F9 000033AE           2247            LEA     VAR_TEMP_CLEANCOPY,A0
0000250A  2639 000033AE           2248            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002510                          2249  LOOP_SHIFTING1
00002510  B43C 0000               2250            CMP.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002514  6700 0008               2251            BEQ     MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00002518  E24B                    2252            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
0000251A  5302                    2253            SUB.B   #1,D2                     *DECREMENT COUNTER
0000251C  60F2                    2254            BRA     LOOP_SHIFTING1             *CONTINUE SHIFTING
0000251E                          2255  MASKING_NEXT1
0000251E  C6BC 00000007           2256            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002524  0603 0030               2257            ADD.B   #$30,D3                   *CONVERT TO CHAR
00002528  6100 0550               2258            BSR     PUSH_STACK                *PUSH TO STACK
0000252C                          2259            
0000252C  6000 01F4               2260            BRA     GET_SRC_SUCCESS                   *RETURN 
00002530                          2261            
00002530                          2262            
00002530                          2263            
00002530                          2264            
00002530                          2265            *** Check if source ...  <ea> = (An)       
00002530  41F9 000033A2           2266  CHECK2    LEA     TEMP_REGISTER_FORMAT,A0
00002536  1439 000033A1           2267            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000253C  1082                    2268            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000253E  0239 0004 000033A2      2269            AND.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
00002546  0C39 0004 000033A2      2270            CMP.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
0000254E  6700 0078               2271            BEQ     CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002552  0C79 0000 000033B2      2272            CMP     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * An                                                                  *change: checkx++*
0000255A  6600 006C               2273            BNE     CHECK3
0000255E                          2274            
0000255E                          2275            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
0000255E  163C 0020               2276            MOVE.B    #' ',D3
00002562  6100 0516               2277            BSR       PUSH_STACK
00002566  163C 0028               2278            MOVE.B    #'(',D3
0000256A  6100 050E               2279            BSR       PUSH_STACK
0000256E  163C 0041               2280            MOVE.B    #'A',D3
00002572  6100 0506               2281            BSR       PUSH_STACK
00002576                          2282  
00002576                          2283            
00002576                          2284            *FIND REGISTER NUMBER END LOCATION*  
00002576  13F9 000033A4 000033AA  2285            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002580  0239 000F 000033AA      2286            AND.B   #$0F,VAR_BYTE_END
00002588                          2287            
00002588                          2288            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002588  23C5 000033AE           2289            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
0000258E  1439 000033AA           2290            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002594                          2291            
00002594                          2292            *INTITIALIZE FOR BIT SHIFTING
00002594  41F9 000033AE           2293            LEA     VAR_TEMP_CLEANCOPY,A0
0000259A  2639 000033AE           2294            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000025A0                          2295  LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
000025A0  B43C 0000               2296            CMP.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000025A4  6700 0008               2297            BEQ     MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
000025A8  E24B                    2298            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000025AA  5302                    2299            SUB.B   #1,D2                     *DECREMENT COUNTER
000025AC  60F2                    2300            BRA     LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
000025AE                          2301  MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
000025AE  C6BC 00000007           2302            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000025B4  0603 0030               2303            ADD.B   #$30,D3                   *CONVERT TO CHAR
000025B8  6100 04C0               2304            BSR     PUSH_STACK                *PUSH TO STACK
000025BC                          2305            
000025BC  163C 0029               2306            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
000025C0  6100 04B8               2307            BSR       PUSH_STACK
000025C4                          2308            
000025C4  6000 015C               2309            BRA     GET_SRC_SUCCESS                   *RETURN 
000025C8                          2310  
000025C8                          2311            
000025C8                          2312            
000025C8                          2313                      
000025C8                          2314  *** Check if source ...  <ea> = (An)+       
000025C8  41F9 000033A2           2315  CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
000025CE  1439 000033A1           2316            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000025D4  1082                    2317            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000025D6  0239 0008 000033A2      2318            AND.B   #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
000025DE  0C39 0008 000033A2      2319            CMP.B   #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
000025E6  6700 0080               2320            BEQ     CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
000025EA  0C79 0000 000033B2      2321            CMP     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * An                                                                  *change: checkx++*
000025F2  6600 0074               2322            BNE     CHECK4
000025F6                          2323            
000025F6                          2324            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
000025F6  163C 0020               2325            MOVE.B    #' ',D3
000025FA  6100 047E               2326            BSR       PUSH_STACK
000025FE  163C 0028               2327            MOVE.B    #'(',D3
00002602  6100 0476               2328            BSR       PUSH_STACK
00002606  163C 0041               2329            MOVE.B    #'A',D3
0000260A  6100 046E               2330            BSR       PUSH_STACK
0000260E                          2331  
0000260E                          2332            
0000260E                          2333            *FIND REGISTER NUMBER END LOCATION*  
0000260E  13F9 000033A4 000033AA  2334            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002618  0239 000F 000033AA      2335            AND.B   #$0F,VAR_BYTE_END
00002620                          2336            
00002620                          2337            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002620  23C5 000033AE           2338            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002626  1439 000033AA           2339            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
0000262C                          2340            
0000262C                          2341            *INTITIALIZE FOR BIT SHIFTING
0000262C  41F9 000033AE           2342            LEA     VAR_TEMP_CLEANCOPY,A0
00002632  2639 000033AE           2343            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002638                          2344            
00002638                          2345  LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
00002638  B43C 0000               2346            CMP.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000263C  6700 0008               2347            BEQ     MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002640  E24B                    2348            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002642  5302                    2349            SUB.B   #1,D2                     *DECREMENT COUNTER
00002644  60F2                    2350            BRA     LOOP_SHIFTING3            *CONTINUE SHIFTING 
00002646                          2351                                               *change: NAME OF LABEL*
00002646                          2352  MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
00002646  C6BC 00000007           2353            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
0000264C  0603 0030               2354            ADD.B   #$30,D3                   *CONVERT TO CHAR
00002650  6100 0428               2355            BSR     PUSH_STACK                *PUSH TO STACK
00002654                          2356            
00002654  163C 0029               2357            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002658  6100 0420               2358            BSR       PUSH_STACK
0000265C  163C 002B               2359            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002660  6100 0418               2360            BSR       PUSH_STACK
00002664                          2361            
00002664  6000 00BC               2362            BRA       GET_SRC_SUCCESS                   *RETURN 
00002668                          2363  
00002668                          2364            
00002668                          2365            
00002668                          2366                      
00002668                          2367            *** Check if source ...  <ea> = -(An)       
00002668  41F9 000033A2           2368  CHECK4    LEA     TEMP_REGISTER_FORMAT,A0
0000266E  1439 000033A1           2369            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002674  1082                    2370            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002676  0239 0010 000033A2      2371            AND.B   #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
0000267E  0C39 0010 000033A2      2372            CMP.B   #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002686  6700 0080               2373            BEQ     CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
0000268A  0C79 0000 000033B2      2374            CMP     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * An                                                                  *change: checkx++*
00002692  6600 0074               2375            BNE     CHECK7
00002696                          2376            
00002696                          2377            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002696  163C 0020               2378            MOVE.B    #' ',D3
0000269A  6100 03DE               2379            BSR       PUSH_STACK
0000269E  163C 002D               2380            MOVE.B    #'-',D3
000026A2  6100 03D6               2381            BSR       PUSH_STACK
000026A6  163C 0028               2382            MOVE.B    #'(',D3
000026AA  6100 03CE               2383            BSR       PUSH_STACK
000026AE  163C 0041               2384            MOVE.B    #'A',D3
000026B2  6100 03C6               2385            BSR       PUSH_STACK
000026B6                          2386  
000026B6                          2387            
000026B6                          2388            *FIND REGISTER NUMBER END LOCATION*  
000026B6  13F9 000033A4 000033AA  2389            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
000026C0  0239 000F 000033AA      2390            AND.B   #$0F,VAR_BYTE_END
000026C8                          2391            
000026C8                          2392            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000026C8  23C5 000033AE           2393            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000026CE  1439 000033AA           2394            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000026D4                          2395            
000026D4                          2396            *INTITIALIZE FOR BIT SHIFTING
000026D4  41F9 000033AE           2397            LEA     VAR_TEMP_CLEANCOPY,A0
000026DA  2639 000033AE           2398            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000026E0                          2399            
000026E0                          2400  LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
000026E0  B43C 0000               2401            CMP.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000026E4  6700 0008               2402            BEQ     MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
000026E8  E24B                    2403            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000026EA  5302                    2404            SUB.B   #1,D2                     *DECREMENT COUNTER
000026EC  60F2                    2405            BRA     LOOP_SHIFTING4            *CONTINUE SHIFTING 
000026EE                          2406                                               *change: NAME OF LABEL*
000026EE                          2407  MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
000026EE  C6BC 00000007           2408            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000026F4  0603 0030               2409            ADD.B   #$30,D3                   *CONVERT TO CHAR
000026F8  6100 0380               2410            BSR     PUSH_STACK                *PUSH TO STACK
000026FC                          2411            
000026FC  163C 0029               2412            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002700  6100 0378               2413            BSR       PUSH_STACK
00002704                          2414            
00002704  6000 001C               2415            BRA     GET_SRC_SUCCESS                   *RETURN
00002708                          2416            
00002708                          2417                      
00002708                          2418            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
00002708  0C79 0007 000033B2      2419  CHECK7    CMP     #7,VAR_LONG_ADDRESS_MODE_CHECK               * (Dn)
00002710  6600 000C               2420            BNE     GET_SRC_FAILED
00002714                          2421            
00002714                          2422            *JUST DISPLAYS ADDRESS MODE 111 FOR TESTING PURPOSE
00002714  7637                    2423            MOVE.L  #'7',D3
00002716  6100 0362               2424            BSR     PUSH_STACK          
0000271A                          2425        
0000271A                          2426         *   MOVE.B  DEST_REGISTER_FORMAT, TEMP_REGISTER_FORMAT * COPY FORMAT TO TEMP VARIABLE
0000271A                          2427         *   AND.B   #$E0,TEMP_REGISTER_FORMAT                           * MASKS 11100000
0000271A                          2428         *   CMP.B   #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT >= 11100000) THAN INVALID ADDRESSMODE 
0000271A                          2429         *   BEQ     FAILED                                            * THE REGISTER FORMAT DOES NOT ALLOW "-(An)" -> SO MOVE ON
0000271A                          2430            
0000271A                          2431         *   MOVE.B  DEST_REGISTER_FORMAT, TEMP_REGISTER_FORMAT * COPY FORMAT TO TEMP VARIABLE
0000271A                          2432         *   AND.B   #$E0,TEMP_REGISTER_FORMAT                           * MASKS 11100000
0000271A                          2433         *   CMP.B   #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT >= 11100000) THAN INVALID ADDRESSMODE 
0000271A                          2434          *  BEQ     FAILED                                            * THE REGISTER FORMAT DOES NOT ALLOW "-(An)" -> SO MOVE ON
0000271A                          2435            
0000271A                          2436            *MOVE.B  DEST_REGISTER_FORMAT, TEMP_REGISTER_FORMAT * COPY FORMAT TO TEMP VARIABLE
0000271A                          2437           * AND.B   #$E0,TEMP_REGISTER_FORMAT                           * MASKS 11100000
0000271A                          2438          *  CMP.B   #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT >= 11100000) THAN INVALID ADDRESSMODE 
0000271A                          2439           * BEQ     FAILED                                            * THE REGISTER FORMAT DOES NOT ALLOW "-(An)" -> SO MOVE ON
0000271A                          2440            
0000271A                          2441  CHECK_WORD
0000271A                          2442  CHECK_LONG
0000271A                          2443  CHECK_IMMEDIATE
0000271A                          2444            
0000271A                          2445            *EA_EA_GET_SRC INTO D3
0000271A  6000 0006               2446            BRA     GET_SRC_SUCCESS
0000271E                          2447            
0000271E                          2448  GET_SRC_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
0000271E  7801                    2449            MOVE.L #1,D4
00002720  4E75                    2450            RTS
00002722                          2451  GET_SRC_SUCCESS 
00002722  4E75                    2452            RTS
00002724                          2453                                 
00002724                          2454      
00002724                          2455  
00002724                          2456  
00002724                          2457  
00002724                          2458  
00002724                          2459  
00002724                          2460  
00002724                          2461  
00002724                          2462  
00002724                          2463              
00002724                          2464  GET_EA_EA_DEST                                                  *======================GET_EA_EA_DEST==========================*
00002724                          2465  *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
00002724                          2466      
00002724                          2467      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
00002724  2405                    2468      MOVE.L  D5,D2                           * CLEAN COPY TO D2
00002726  E68A                    2469      LSR.L   #3,D2                           * [D2] Temporarily used D2 for shifting bits
00002728  23C2 000033B2           2470      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
0000272E  7407                    2471      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
00002730  C5B9 000033B2           2472      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
00002736                          2473                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
00002736                          2474      
00002736                          2475      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
00002736                          2476      *DESTINATION REGISTER FORMAT STANDARD         *
00002736                          2477      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
00002736                          2478      *WHEN BIT = 0(VALID ADDRESS MODE)             *
00002736                          2479      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
00002736                          2480      *0 - Dn                                       *
00002736                          2481      *1 - An                                       *
00002736                          2482      *2 - (An)                                     *
00002736                          2483      *3 - (An)+                                    *
00002736                          2484      *4 - -(An)                                    *
00002736                          2485      *5 - (XXX).W                                  *
00002736                          2486      *6 - (XXX).L                                  *
00002736                          2487      *7 - #<data>                                  *
00002736                          2488      ***********************************************
00002736                          2489      
00002736                          2490      *** Check if source ...  <ea> = Dn
00002736                          2491  DEST_CHECK0    
00002736  41F9 000033A2           2492            LEA     TEMP_REGISTER_FORMAT,A0
0000273C  1439 000033A0           2493            MOVE.B  DEST_REGISTER_FORMAT, D2                            * COPY FORMAT TO TEMP VARIABLE
00002742  1082                    2494            MOVE.B  D2, (A0)                                            * COPY FORMAT TO TEMP VARIABLE
00002744  0239 0001 000033A2      2495            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
0000274C  0C39 0001 000033A2      2496            CMP.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
00002754  6700 006A               2497            BEQ     DEST_CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00002758  0C79 0000 000033B2      2498            CMP     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn)
00002760  6600 005E               2499            BNE     DEST_CHECK1
00002764                          2500            
00002764                          2501            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002764  163C 0020               2502            MOVE.B    #' ',D3
00002768  6100 0310               2503            BSR       PUSH_STACK
0000276C  163C 0044               2504            MOVE.B    #'D',D3
00002770  6100 0308               2505            BSR       PUSH_STACK
00002774                          2506  
00002774                          2507            *FIND REGISTER NUMBER END LOCATION*  
00002774  13F9 000033A3 000033AA  2508            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
0000277E  0239 000F 000033AA      2509            AND.B   #$0F,VAR_BYTE_END
00002786                          2510            
00002786                          2511            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002786  23C5 000033AE           2512            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
0000278C  1439 000033AA           2513            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002792                          2514            
00002792                          2515            *INTITIALIZE FOR BIT SHIFTING
00002792  41F9 000033AE           2516            LEA     VAR_TEMP_CLEANCOPY,A0
00002798  2639 000033AE           2517            MOVE.L  VAR_TEMP_CLEANCOPY,D3
0000279E                          2518  DEST_LOOP_SHIFTING
0000279E  B43C 0000               2519            CMP.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000027A2  6700 FCF2               2520            BEQ     MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
000027A6  E24B                    2521            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000027A8  5302                    2522            SUB.B   #1,D2                     *DECREMENT COUNTER
000027AA  6000 FCDC               2523            BRA     LOOP_SHIFTING             *CONTINUE SHIFTING
000027AE                          2524  DEST_MASKING_NEXT
000027AE  C6BC 00000007           2525            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000027B4  0603 0030               2526            ADD.B   #$30,D3                   *CONVERT TO CHAR
000027B8  6100 02C0               2527            BSR     PUSH_STACK                *PUSH TO STACK
000027BC                          2528            
000027BC  6000 027C               2529            BRA     GET_DEST_SUCCESS           *RETURN          
000027C0                          2530            
000027C0                          2531            
000027C0                          2532            *** Check if source ...  <ea> = An
000027C0                          2533  DEST_CHECK1    
000027C0  41F9 000033A2           2534            LEA     TEMP_REGISTER_FORMAT,A0
000027C6  1439 000033A0           2535            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000027CC  1082                    2536            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000027CE  0239 0002 000033A2      2537            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
000027D6  0C39 0002 000033A2      2538            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
000027DE  6700 0068               2539            BEQ     DEST_CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
000027E2  0C79 0000 000033B2      2540            CMP     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * An
000027EA  6600 005C               2541            BNE     DEST_CHECK2
000027EE                          2542            
000027EE                          2543            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000027EE  163C 0020               2544            MOVE.B    #' ',D3
000027F2  6100 0286               2545            BSR       PUSH_STACK
000027F6  163C 0041               2546            MOVE.B    #'A',D3
000027FA  6100 027E               2547            BSR       PUSH_STACK
000027FE                          2548  
000027FE                          2549            
000027FE                          2550            *FIND REGISTER NUMBER END LOCATION*  
000027FE  13F9 000033A3 000033AA  2551            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002808  0239 000F 000033AA      2552            AND.B   #$0F,VAR_BYTE_END
00002810                          2553            
00002810                          2554            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002810  23C5 000033AE           2555            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002816  1439 000033AA           2556            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
0000281C                          2557            
0000281C                          2558            *INTITIALIZE FOR BIT SHIFTING
0000281C  41F9 000033AE           2559            LEA     VAR_TEMP_CLEANCOPY,A0
00002822  2639 000033AE           2560            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002828                          2561  DEST_LOOP_SHIFTING1
00002828  B43C 0000               2562            CMP.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000282C  6700 0008               2563            BEQ     DEST_MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00002830  E24B                    2564            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002832  5302                    2565            SUB.B   #1,D2                     *DECREMENT COUNTER
00002834  60F2                    2566            BRA     DEST_LOOP_SHIFTING1             *CONTINUE SHIFTING
00002836                          2567  DEST_MASKING_NEXT1
00002836  C6BC 00000007           2568            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
0000283C  0603 0030               2569            ADD.B   #$30,D3                   *CONVERT TO CHAR
00002840  6100 0238               2570            BSR     PUSH_STACK                *PUSH TO STACK
00002844                          2571            
00002844  6000 01F4               2572            BRA     GET_DEST_SUCCESS                   *RETURN 
00002848                          2573            
00002848                          2574            
00002848                          2575            
00002848                          2576            
00002848                          2577            *** Check if source ...  <ea> = (An)       
00002848                          2578  DEST_CHECK2    
00002848  41F9 000033A2           2579            LEA     TEMP_REGISTER_FORMAT,A0
0000284E  1439 000033A0           2580            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002854  1082                    2581            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002856  0239 0004 000033A2      2582            AND.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       
0000285E  0C39 0004 000033A2      2583            CMP.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       
00002866  6700 0078               2584            BEQ     DEST_CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON            
0000286A  0C79 0000 000033B2      2585            CMP     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * An                                                                
00002872  6600 006C               2586            BNE     DEST_CHECK3
00002876                          2587            
00002876                          2588            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002876  163C 0020               2589            MOVE.B    #' ',D3
0000287A  6100 01FE               2590            BSR       PUSH_STACK
0000287E  163C 0028               2591            MOVE.B    #'(',D3
00002882  6100 01F6               2592            BSR       PUSH_STACK
00002886  163C 0041               2593            MOVE.B    #'A',D3
0000288A  6100 01EE               2594            BSR       PUSH_STACK
0000288E                          2595  
0000288E                          2596            
0000288E                          2597            *FIND REGISTER NUMBER END LOCATION*  
0000288E  13F9 000033A3 000033AA  2598            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002898  0239 000F 000033AA      2599            AND.B   #$0F,VAR_BYTE_END
000028A0                          2600            
000028A0                          2601            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000028A0  23C5 000033AE           2602            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000028A6  1439 000033AA           2603            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000028AC                          2604            
000028AC                          2605            *INTITIALIZE FOR BIT SHIFTING
000028AC  41F9 000033AE           2606            LEA     VAR_TEMP_CLEANCOPY,A0
000028B2  2639 000033AE           2607            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000028B8                          2608  DEST_LOOP_SHIFTING2                                                                                              
000028B8  B43C 0000               2609            CMP.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000028BC  6700 0008               2610            BEQ     DEST_MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        
000028C0  E24B                    2611            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000028C2  5302                    2612            SUB.B   #1,D2                     *DECREMENT COUNTER
000028C4  60F2                    2613            BRA     DEST_LOOP_SHIFTING2            *CONTINUE SHIFTING                                              
000028C6                          2614  DEST_MASKING_NEXT2                                                                                               
000028C6  C6BC 00000007           2615            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000028CC  0603 0030               2616            ADD.B   #$30,D3                   *CONVERT TO CHAR
000028D0  6100 01A8               2617            BSR     PUSH_STACK                *PUSH TO STACK
000028D4                          2618            
000028D4  163C 0029               2619            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
000028D8  6100 01A0               2620            BSR       PUSH_STACK
000028DC                          2621            
000028DC  6000 015C               2622            BRA     GET_DEST_SUCCESS                   *RETURN 
000028E0                          2623  
000028E0                          2624            
000028E0                          2625            
000028E0                          2626                      
000028E0                          2627  *** Check if source ...  <ea> = (An)+       
000028E0                          2628  DEST_CHECK3    
000028E0  41F9 000033A2           2629            LEA     TEMP_REGISTER_FORMAT,A0
000028E6  1439 000033A0           2630            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000028EC  1082                    2631            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000028EE  0239 0008 000033A2      2632            AND.B   #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
000028F6  0C39 0008 000033A2      2633            CMP.B   #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
000028FE  6700 0080               2634            BEQ     DEST_CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002902  0C79 0000 000033B2      2635            CMP     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * An                                                                  *change: checkx++*
0000290A  6600 0074               2636            BNE     DEST_CHECK4
0000290E                          2637            
0000290E                          2638            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
0000290E  163C 0020               2639            MOVE.B    #' ',D3
00002912  6100 0166               2640            BSR       PUSH_STACK
00002916  163C 0028               2641            MOVE.B    #'(',D3
0000291A  6100 015E               2642            BSR       PUSH_STACK
0000291E  163C 0041               2643            MOVE.B    #'A',D3
00002922  6100 0156               2644            BSR       PUSH_STACK
00002926                          2645  
00002926                          2646            
00002926                          2647            *FIND REGISTER NUMBER END LOCATION*  
00002926  13F9 000033A3 000033AA  2648            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002930  0239 000F 000033AA      2649            AND.B   #$0F,VAR_BYTE_END
00002938                          2650            
00002938                          2651            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002938  23C5 000033AE           2652            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
0000293E  1439 000033AA           2653            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002944                          2654            
00002944                          2655            *INTITIALIZE FOR BIT SHIFTING
00002944  41F9 000033AE           2656            LEA     VAR_TEMP_CLEANCOPY,A0
0000294A  2639 000033AE           2657            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002950                          2658            
00002950                          2659  DEST_LOOP_SHIFTING3                                                                                            
00002950  B43C 0000               2660            CMP.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002954  6700 0008               2661            BEQ     DEST_MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        
00002958  E24B                    2662            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
0000295A  5302                    2663            SUB.B   #1,D2                     *DECREMENT COUNTER
0000295C  60F2                    2664            BRA     DEST_LOOP_SHIFTING3            *CONTINUE SHIFTING 
0000295E                          2665                                               *change: NAME OF LABEL*
0000295E                          2666  DEST_MASKING_NEXT3                                                                                            
0000295E  C6BC 00000007           2667            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002964  0603 0030               2668            ADD.B   #$30,D3                   *CONVERT TO CHAR
00002968  6100 0110               2669            BSR     PUSH_STACK                *PUSH TO STACK
0000296C                          2670            
0000296C  163C 0029               2671            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002970  6100 0108               2672            BSR       PUSH_STACK
00002974  163C 002B               2673            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002978  6100 0100               2674            BSR       PUSH_STACK
0000297C                          2675            
0000297C  6000 00BC               2676            BRA       GET_DEST_SUCCESS                   *RETURN 
00002980                          2677  
00002980                          2678            
00002980                          2679            
00002980                          2680                      
00002980                          2681            *** Check if source ...  <ea> = -(An)       
00002980  41F9 000033A2           2682  DEST_CHECK4    LEA     TEMP_REGISTER_FORMAT,A0
00002986  1439 000033A0           2683            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000298C  1082                    2684            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000298E  0239 0010 000033A2      2685            AND.B   #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
00002996  0C39 0010 000033A2      2686            CMP.B   #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
0000299E  6700 FD68               2687            BEQ     CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
000029A2  0C79 0000 000033B2      2688            CMP     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * An                                                                  *change: checkx++*
000029AA  6600 FD5C               2689            BNE     CHECK7
000029AE                          2690            
000029AE                          2691            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            
000029AE  163C 0020               2692            MOVE.B    #' ',D3
000029B2  6100 00C6               2693            BSR       PUSH_STACK
000029B6  163C 002D               2694            MOVE.B    #'-',D3
000029BA  6100 00BE               2695            BSR       PUSH_STACK
000029BE  163C 0028               2696            MOVE.B    #'(',D3
000029C2  6100 00B6               2697            BSR       PUSH_STACK
000029C6  163C 0041               2698            MOVE.B    #'A',D3
000029CA  6100 00AE               2699            BSR       PUSH_STACK
000029CE                          2700  
000029CE                          2701            
000029CE                          2702            *FIND REGISTER NUMBER END LOCATION*  
000029CE  13F9 000033A3 000033AA  2703            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
000029D8  0239 000F 000033AA      2704            AND.B   #$0F,VAR_BYTE_END
000029E0                          2705            
000029E0                          2706            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000029E0  23C5 000033AE           2707            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000029E6  1439 000033AA           2708            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000029EC                          2709            
000029EC                          2710            *INTITIALIZE FOR BIT SHIFTING
000029EC  41F9 000033AE           2711            LEA     VAR_TEMP_CLEANCOPY,A0
000029F2  2639 000033AE           2712            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000029F8                          2713            
000029F8                          2714  DEST_LOOP_SHIFTING4                                                                                              
000029F8  B43C 0000               2715            CMP.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000029FC  6700 0008               2716            BEQ     DEST_MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        
00002A00  E24B                    2717            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002A02  5302                    2718            SUB.B   #1,D2                     *DECREMENT COUNTER
00002A04  60F2                    2719            BRA     DEST_LOOP_SHIFTING4            *CONTINUE SHIFTING 
00002A06                          2720                                               *change: NAME OF LABEL*
00002A06                          2721  DEST_MASKING_NEXT4                                                                                               
00002A06  C6BC 00000007           2722            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002A0C  0603 0030               2723            ADD.B   #$30,D3                   *CONVERT TO CHAR
00002A10  6100 0068               2724            BSR     PUSH_STACK                *PUSH TO STACK
00002A14                          2725            
00002A14  163C 0029               2726            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002A18  6100 0060               2727            BSR       PUSH_STACK
00002A1C                          2728            
00002A1C  6000 001C               2729            BRA     GET_DEST_SUCCESS                   *RETURN
00002A20                          2730            
00002A20                          2731                      
00002A20                          2732                  
00002A20                          2733  *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
00002A20                          2734  DEST_CHECK7    
00002A20  0C79 0007 000033B2      2735                 CMP     #7,VAR_LONG_ADDRESS_MODE_CHECK               * (Dn)
00002A28  6600 FCF4               2736                 BNE     GET_SRC_FAILED
00002A2C                          2737            
00002A2C                          2738            *JUST DISPLAYS ADDRESS MODE 111 FOR TESTING PURPOSE
00002A2C  7637                    2739            MOVE.L  #'7',D3
00002A2E  6100 004A               2740            BSR     PUSH_STACK          
00002A32                          2741        
00002A32                          2742         *   MOVE.B  DEST_REGISTER_FORMAT, TEMP_REGISTER_FORMAT * COPY FORMAT TO TEMP VARIABLE
00002A32                          2743         *   AND.B   #$E0,TEMP_REGISTER_FORMAT                           * MASKS 11100000
00002A32                          2744         *   CMP.B   #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT >= 11100000) THAN INVALID ADDRESSMODE 
00002A32                          2745         *   BEQ     FAILED                                            * THE REGISTER FORMAT DOES NOT ALLOW "-(An)" -> SO MOVE ON
00002A32                          2746            
00002A32                          2747         *   MOVE.B  DEST_REGISTER_FORMAT, TEMP_REGISTER_FORMAT * COPY FORMAT TO TEMP VARIABLE
00002A32                          2748         *   AND.B   #$E0,TEMP_REGISTER_FORMAT                           * MASKS 11100000
00002A32                          2749         *   CMP.B   #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT >= 11100000) THAN INVALID ADDRESSMODE 
00002A32                          2750          *  BEQ     FAILED                                            * THE REGISTER FORMAT DOES NOT ALLOW "-(An)" -> SO MOVE ON
00002A32                          2751     
00002A32                          2752  DEST_CHECK_WORD
00002A32                          2753  DEST_CHECK_LONG
00002A32                          2754  DEST_CHECK_IMMEDIATE
00002A32                          2755            
00002A32                          2756            *EA_EA_GET_SRC INTO D3
00002A32  6000 0006               2757            BRA     GET_DEST_SUCCESS
00002A36                          2758            
00002A36                          2759  GET_DEST_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
00002A36  7801                    2760            MOVE.L #1,D4
00002A38  4E75                    2761            RTS
00002A3A                          2762  GET_DEST_SUCCESS 
00002A3A  4E75                    2763            RTS
00002A3C                          2764            
00002A3C                          2765  *---------------------------------------------------------------------------*
00002A3C                          2766  * STACK/QUEUE INTERFACE
00002A3C                          2767  *---------------------------------------------------------------------------*
00002A3C                          2768  PRINT_STACK
00002A3C  0C39 0000 0000339C      2769            CMP.B     #0,COUNTER
00002A44  6700 000E               2770            BEQ       PRINT_STACK_RETURN             *CHECK IF LOOP IS FINISHED
00002A48                          2771            
00002A48                          2772  PRINT_STACK_HELPER
00002A48  6100 0038               2773            BSR      POP_STACK          *PRINTS ADDRESS
00002A4C  103C 0006               2774            MOVE.B   #6,D0              *Display single character in D1.B. 
00002A50  4E4F                    2775            TRAP     #15             *ACTIVATES PRINT
00002A52                          2776  
00002A52  60E8                    2777            BRA       PRINT_STACK
00002A54                          2778  PRINT_STACK_RETURN
00002A54  4E75                    2779            RTS
00002A56                          2780            
00002A56                          2781            
00002A56                          2782  PRINT_QUEUE
00002A56  0C39 0000 0000339C      2783            CMP.B     #0,COUNTER
00002A5E  6700 0018               2784            BEQ       PRINT_QUEUE_RETURN             *CHECK IF LOOP IS FINISHED
00002A62                          2785            
00002A62                          2786  PRINT_QUEUE_HELPER
00002A62  33F9 0000339C 0000339E  2787            MOVE.W   COUNTER,QUEUE_COUNTER
00002A6C  6100 0022               2788            BSR      POP_FRONT          *PRINTS ADDRESS
00002A70  103C 0006               2789            MOVE.B   #6,D0              *Display single character in D1.B. 
00002A74  4E4F                    2790            TRAP     #15             *ACTIVATES PRINT
00002A76                          2791  
00002A76  60DE                    2792            BRA       PRINT_QUEUE
00002A78                          2793  PRINT_QUEUE_RETURN
00002A78  4E75                    2794            RTS
00002A7A                          2795            
00002A7A                          2796  *PUSHES.W CONTENTS OF [D3] INTO STACK          
00002A7A                          2797  PUSH_STACK
00002A7A  1503                    2798              MOVE.B  D3,-(A2)
00002A7C  6100 0058               2799              BSR     INCREMENT
00002A80  4E75                    2800              RTS
00002A82                          2801  *POPS.W TOP OF STACK INTO [D1], SO ITS READY TO PRINT WITH TRAP 15
00002A82                          2802  *         MOVE.W   (A2)+,D1           *PRINTS ADDRESS
00002A82                          2803  *         MOVE.B   #15,D0             *PRINTS ACCORDING TO D2 BASE VALUE
00002A82                          2804  *         MOVE.B   #16,D2             *PRINTS BASED 16 NUMBER
00002A82                          2805  *         TRAP        #15             *ACTIVATES PRINT
00002A82                          2806  POP_STACK
00002A82  BECA                    2807              CMPA.W   A2,SP            *CHECKS IF THERE IS ANYTHING TO PUSH
00002A84  6700 0008               2808              BEQ     POP_RETURN        *IF NOTHING TO PUSH THAN JUST RETURN
00002A88  121A                    2809              MOVE.B  (A2)+,D1 
00002A8A  6100 0052               2810              BSR     DECREMENT
00002A8E                          2811  POP_RETURN
00002A8E  4E75                    2812              RTS 
00002A90                          2813        
00002A90                          2814  *USE [A4] AS SECOND POINTER IN SHIFTING      
00002A90  0C39 0000 0000339E      2815  POP_FRONT   CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
00002A98  6700 0030               2816              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
00002A9C                          2817              
00002A9C                          2818              
00002A9C                          2819              *POSITION THE POINTERS A[4] RIGHT BEHIND A[2] WHICH IS RIGHT BEHIND STACK
00002A9C  347C 7000               2820              MOVEA.W #STACK,A2   *START A2 AT STACK
00002AA0  0622 0000               2821              ADD.B   #0,-(A2)    *SHIFT A2 TO THE BOTTOM OF THE STACK
00002AA4  384A                    2822              MOVEA.W A2,A4     *START A4 RIGHT ABOVE A2
00002AA6  0624 0000               2823              ADD.B   #0,-(A4)  *leash one more higher in stack (a4)
00002AAA  1212                    2824              MOVE.B  (A2),D1     *POP CONTENTS INTO D1
00002AAC                          2825  POP_SHIFT_LOOP
00002AAC  0C39 0000 0000339E      2826              CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
00002AB4  6700 0014               2827              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
00002AB8  1494                    2828              MOVE.B  (A4),(A2)   *SHIFT CONTENT DOWN THE STACK
00002ABA  0624 0000               2829              ADD.B   #0,-(A4)
00002ABE  0622 0000               2830              ADD.B   #0,-(A2) *SHIFT POINTERS DOWN THE STACK
00002AC2  5339 0000339E           2831              SUB.B   #1,QUEUE_COUNTER *DECREMENT INTERNAL QUEUE COUNTER
00002AC8                          2832              
00002AC8  60E2                    2833              BRA     POP_SHIFT_LOOP
00002ACA                          2834                          
00002ACA                          2835  POP_FRONT_RETURN 
00002ACA                          2836              *RESET A2 BACK TO SP
00002ACA  347C 7000               2837              MOVEA.W #STACK,A2    
00002ACE  5339 0000339C           2838              SUB.B   #1,COUNTER *DECREMENT STACK COUNTER       
00002AD4  4E75                    2839              RTS   
00002AD6                          2840  
00002AD6                          2841  INCREMENT
00002AD6  5239 0000339C           2842              ADD.B   #1, COUNTER
00002ADC  4E75                    2843              RTS           
00002ADE                          2844  DECREMENT
00002ADE  5339 0000339C           2845              SUB.B   #1, COUNTER
00002AE4  4E75                    2846              RTS           
00002AE6                          2847  CLEAR_STACK
00002AE6  0C39 0000 0000339C      2848              CMP.B     #0,COUNTER
00002AEE  6700 0006               2849              BEQ       CLEAR_RETURN
00002AF2  618E                    2850              BSR       POP_STACK
00002AF4  60F0                    2851              BRA       CLEAR_STACK
00002AF6                          2852   
00002AF6                          2853  CLEAR_RETURN
00002AF6  4E75                    2854              RTS    
00002AF8                          2855  *---------------------------------------------------------------------------*
00002AF8                          2856  * TERMINATE
00002AF8                          2857  *---------------------------------------------------------------------------*
00002AF8                          2858  TERMINATE   
00002AF8  43F9 00002EA8           2859              LEA     FINMSG,A1
00002AFE  103C 000E               2860              MOVE.B  #14,D0
00002B02  4E4F                    2861              TRAP    #15
00002B04                          2862  
00002B04  103C 0009               2863              MOVE.B  #9,D0
00002B08  4E4F                    2864              TRAP    #15
00002B0A                          2865  
00002B0A                          2866  *---------------------------------------------------------------------------*
00002B0A                          2867  * Data storage                                                 
00002B0A                          2868  *---------------------------------------------------------------------------*  
00002B0A                          2869  WELCOME
00002B0A= 20 20 20 20 20 20 ...   2870              DC.B '                         ___     ___ ___        ___   ___ ___                 ',CR,LF
00002B5A= 3D 3D 3D 3D 3D 20 ...   2871              DC.B '=====           \  /\  /|___|   |   |   ||\  /||___    | |   |           =====',CR,LF
00002BAA= 3D 3D 3D 3D 3D 20 ...   2872              DC.B '=====            \/  \/ |___|___|___|___|| \/ ||___    | |___|           =====',CR,LF
00002BFA                          2873      
00002BFA= 20 20 20 20 20 20 ...   2874              DC.B '                        ___ ___ ___  ___      ___                             ',CR,LF
00002C4A= 20 20 20 20 20 20 ...   2875              DC.B '                       |     | |___)|    |   |___                             ',CR,LF 
00002C9A= 20 20 20 20 20 20 ...   2876              DC.B '                       |___ _|_|\___|___ |___|___                             ',CR,LF
00002CEA                          2877      
00002CEA= 20 20 20 20 20 20 ...   2878              DC.B '           __  ___ ___   _   ___  ___  ___        ___      ___ ___            ',CR,LF
00002D3A= 3D 3D 3D 3D 3D 20 ...   2879              DC.B '=====     |  \  | |___  /_\ |___ |___ |___ |\  /||___||   |___|___)      =====',CR,LF 
00002D8A= 3D 3D 3D 3D 3D 20 ...   2880              DC.B '=====     |__/ _|_ ___|/   \ ___| ___||___ | \/ ||___||___|___|\___      =====',CR,LF,CR,LF,CR,LF,0
00002DDF                          2881  
00002DDF                          2882  PROMPT_START
00002DDF= 50 6C 65 61 73 65 ...   2883              DC.B    'Please enter a hexadecimal starting address.',CR,LF,0
00002E0E                          2884      
00002E0E                          2885  PROMPT_END
00002E0E= 50 6C 65 61 73 65 ...   2886              DC.B    'Please enter a hexadecimal ending address.',CR,LF,0
00002E3B= 0D 0A 48 69 74 20 ...   2887  DISP_NEXT   DC.B    CR,LF,'Hit Enter to print the next 30 lines.',CR,LF,0            
00002E65= 57 6F 75 6C 64 20 ...   2888  REPEATMSG   DC.B    'Would you like to run again? Press Y to continue or N to finish.',CR,LF,0
00002EA8= 54 68 61 6E 6B 20 ...   2889  FINMSG      DC.B    'Thank you for using Circle Disassembler.',CR,LF,0
00002ED3= 45 72 72 6F 72 3A ...   2890  ERRMSG_1    DC.B    'Error: Invalid Input Address',CR,LF,0
00002EF2= 45 72 72 6F 72 3A ...   2891  ERRMSG_3    DC.B    'Error: Invalid Input Address (Odd)',CR,LF,0
00002F17= 45 72 72 6F 72 3A ...   2892  ERRMSG_5    DC.B    'Error: Invalid Input Address (start > end)',CR,LF,0
00002F44                          2893  
00002F44                          2894  VR_S_ADDR   DS.B    80                      * allocate storage space for the starting address
00002F94                          2895  VR_E_ADDR   DS.B    80                      * allocate storage space for the ending address
00002FE4                          2896  S_ADDR_HX   DS.L    1                       * allocate storage space for the starting address in hex
00002FE8                          2897  E_ADDR_HX   DS.L    1                       * allocate storage space for the ending address in hex
00002FEC= 0D 0A 00                2898  ENDLINE_M   DC.B    CR,LF,0
00002FEF                          2899  TMPINPUT    DS.B    80                      * temp store user input
0000303F                          2900  TMPOUTPUT   DS.B    80                      * temp store prog output
0000308F= 20 20 20 4F 52 49 ...   2901  DISP_ORI_B  DC.B    '   ORI.B',0
00003098= 20 20 20 4F 52 49 ...   2902  DISP_ORI_W  DC.B    '   ORI.W',0
000030A1= 20 20 20 4F 52 49 ...   2903  DISP_ORI_L  DC.B    '   ORI.L',0
000030AA= 20 20 20 45 4F 52 ...   2904  DISP_EORI_B  DC.B    '   EORI.B',0
000030B4= 20 20 20 45 4F 52 ...   2905  DISP_EORI_W  DC.B    '   EORI.W',0
000030BE= 20 20 20 45 4F 52 ...   2906  DISP_EORI_L  DC.B    '   EORI.L',0
000030C8= 20 20 20 42 54 53 ...   2907  DISP_BTST   DC.B    '   BTST',0
000030D0= 20 20 20 43 4D 50 ...   2908  DISP_CMPI_B  DC.B    '   CMPI.B',0
000030DA= 20 20 20 43 4D 50 ...   2909  DISP_CMPI_W  DC.B    '   CMPI.W',0
000030E4= 20 20 20 43 4D 50 ...   2910  DISP_CMPI_L  DC.B    '   CMPI.L',0
000030EE= 20 20 20 44 41 54 ...   2911  DISP_DATA   DC.B    '   DATA',0
000030F6= 20 20 20 4D 4F 56 ...   2912  DISP_MOVE_B DC.B    '   MOVE.B',0
00003100= 20 20 20 4D 4F 56 ...   2913  DISP_MOVE_W DC.B    '   MOVE.W',0
0000310A= 20 20 20 4D 4F 56 ...   2914  DISP_MOVE_L DC.B    '   MOVE.L',0
00003114= 20 20 20 52 54 53 00    2915  DISP_RTS    DC.B    '   RTS',0
0000311B= 20 20 20 4A 53 52 00    2916  DISP_JSR    DC.B    '   JSR',0
00003122= 20 20 20 4E 45 47 ...   2917  DISP_NEG_B    DC.B    '   NEG.B',0
0000312B= 20 20 20 4E 45 47 ...   2918  DISP_NEG_W    DC.B    '   NEG.W',0
00003134= 20 20 20 4E 45 47 ...   2919  DISP_NEG_L    DC.B    '   NEG.L',0
0000313D= 20 20 20 4E 4F 54 ...   2920  DISP_NOT_B  DC.B    '   NOT.B',0
00003146= 20 20 20 4E 4F 54 ...   2921  DISP_NOT_W  DC.B    '   NOT.W',0
0000314F= 20 20 20 4E 4F 54 ...   2922  DISP_NOT_L  DC.B    '   NOT.L',0
00003158= 20 20 20 4C 45 41 00    2923  DISP_LEA    DC.B    '   LEA',0
0000315F= 20 20 20 4D 4F 56 ...   2924  DISP_MOVEM_W    DC.B    '   MOVEM.W',0
0000316A= 20 20 20 4D 4F 56 ...   2925  DISP_MOVEM_L    DC.B    '   MOVEM.L',0
00003175= 20 20 20 41 44 44 ...   2926  DISP_ADDQ_B DC.B    '   ADDQ.B',0
0000317F= 20 20 20 41 44 44 ...   2927  DISP_ADDQ_W DC.B    '   ADDQ.W',0
00003189= 20 20 20 41 44 44 ...   2928  DISP_ADDQ_L DC.B    '   ADDQ.L',0
00003193= 20 20 20 44 49 56 ...   2929  DISP_DIVS   DC.B    '   DIVS',0
0000319B= 20 20 20 53 55 42 ...   2930  DISP_SUB_B  DC.B    '   SUB.B',0
000031A4= 20 20 20 53 55 42 ...   2931  DISP_SUB_W  DC.B    '   SUB.W',0
000031AD= 20 20 20 53 55 42 ...   2932  DISP_SUB_L  DC.B    '   SUB.L',0
000031B6= 20 20 20 53 55 42 ...   2933  DISP_SUBI_B  DC.B    '   SUBI.B',0
000031C0= 20 20 20 53 55 42 ...   2934  DISP_SUBI_W  DC.B    '   SUBI.W',0
000031CA= 20 20 20 53 55 42 ...   2935  DISP_SUBI_L  DC.B    '   SUBI.L',0
000031D4= 20 20 20 53 55 42 ...   2936  DISP_SUBA_W  DC.B    '   SUBA.W',0
000031DE= 20 20 20 53 55 42 ...   2937  DISP_SUBA_L  DC.B    '   SUBA.L',0
000031E8= 20 20 20 45 4F 52 ...   2938  DISP_EOR_B  DC.B    '   EOR.B',0
000031F1= 20 20 20 45 4F 52 ...   2939  DISP_EOR_W  DC.B    '   EOR.W',0
000031FA= 20 20 20 45 4F 52 ...   2940  DISP_EOR_L  DC.B    '   EOR.L',0
00003203= 20 20 20 43 4D 50 ...   2941  DISP_CMP_B  DC.B    '   CMP.B',0
0000320C= 20 20 20 43 4D 50 ...   2942  DISP_CMP_W  DC.B    '   CMP.W',0
00003215= 20 20 20 43 4D 50 ...   2943  DISP_CMP_L  DC.B    '   CMP.L',0
0000321E= 20 20 20 43 4D 50 ...   2944  DISP_CMPA_W  DC.B    '   CMPA.W',0
00003228= 20 20 20 43 4D 50 ...   2945  DISP_CMPA_L  DC.B    '   CMPA.L',0
00003232= 20 20 20 4D 55 4C ...   2946  DISP_MULS_W DC.B    '   MULS.W',0
0000323C= 20 20 20 41 4E 44 ...   2947  DISP_AND_B  DC.B    '   AND.B',0
00003245= 20 20 20 41 4E 44 ...   2948  DISP_AND_W  DC.B    '   AND.W',0
0000324E= 20 20 20 41 4E 44 ...   2949  DISP_AND_L  DC.B    '   AND.L',0
00003257= 20 20 20 41 44 44 ...   2950  DISP_ADD_B  DC.B    '   ADD.B',0
00003260= 20 20 20 41 44 44 ...   2951  DISP_ADD_W  DC.B    '   ADD.W',0
00003269= 20 20 20 41 44 44 ...   2952  DISP_ADD_L  DC.B    '   ADD.L',0
00003272= 20 20 20 41 44 44 ...   2953  DISP_ADDA_W DC.B    '   ADDA.W',0
0000327C= 20 20 20 41 44 44 ...   2954  DISP_ADDA_L DC.B    '   ADDA.L',0
00003286= 20 20 20 4C 53 52 ...   2955  DISP_LSR_B  DC.B    '   LSR.B',0
0000328F= 20 20 20 4C 53 4C ...   2956  DISP_LSL_B  DC.B    '   LSL.B',0
00003298= 20 20 20 4C 53 52 ...   2957  DISP_LSR_W  DC.B    '   LSR.W',0
000032A1= 20 20 20 4C 53 4C ...   2958  DISP_LSL_W  DC.B    '   LSL.W',0
000032AA= 20 20 20 4C 53 52 ...   2959  DISP_LSR_L  DC.B    '   LSR.L',0
000032B3= 20 20 20 4C 53 4C ...   2960  DISP_LSL_L  DC.B    '   LSL.L',0
000032BC= 20 20 20 41 53 52 ...   2961  DISP_ASR_B  DC.B    '   ASR.B',0
000032C5= 20 20 20 41 53 4C ...   2962  DISP_ASL_B  DC.B    '   ASL.B',0
000032CE= 20 20 20 41 53 52 ...   2963  DISP_ASR_W  DC.B    '   ASR.W',0
000032D7= 20 20 20 41 53 4C ...   2964  DISP_ASL_W  DC.B    '   ASL.W',0
000032E0= 20 20 20 41 53 52 ...   2965  DISP_ASR_L  DC.B    '   ASR.L',0
000032E9= 20 20 20 41 53 4C ...   2966  DISP_ASL_L  DC.B    '   ASL.L',0
000032F2= 20 20 20 52 4F 52 ...   2967  DISP_ROR_B  DC.B    '   ROR.B',0
000032FB= 20 20 20 52 4F 4C ...   2968  DISP_ROL_B  DC.B    '   ROL.B',0
00003304= 20 20 20 52 4F 52 ...   2969  DISP_ROR_W  DC.B    '   ROR.W',0
0000330D= 20 20 20 52 4F 4C ...   2970  DISP_ROL_W  DC.B    '   ROL.W',0
00003316= 20 20 20 52 4F 52 ...   2971  DISP_ROR_L  DC.B    '   ROR.L',0
0000331F= 20 20 20 52 4F 4C ...   2972  DISP_ROL_L  DC.B    '   ROL.L',0
00003328= 20 20 20 42 52 41 00    2973  DISP_BRA    DC.B    '   BRA',0
0000332F= 20 20 20 42 4C 54 00    2974  DISP_BLT    DC.B    '   BLT',0
00003336= 20 20 20 42 45 51 00    2975  DISP_BEQ    DC.B    '   BEQ',0
0000333D= 20 20 20 42 4E 45 00    2976  DISP_BNE    DC.B    '   BNE',0
00003344= 20 20 20 42 48 49 00    2977  DISP_BHI    DC.B    '   BHI',0
0000334B= 20 20 20 4D 4F 56 ...   2978  DISP_MOVEA_W    DC.B    '   MOVEA.W',0
00003356= 20 20 20 4D 4F 56 ...   2979  DISP_MOVEA_L    DC.B    '   MOVEA.L',0
00003361                          2980  
00003361= 20 20 20 24 00          2981  DISP_HEX     DC.B    '   $',0
00003366= 20 20 20 44 00          2982  DISP_D  DC.B    '   D',0
0000336B= 20 20 20 41 00          2983  DISP_A  DC.B    '   A',0
00003370= 20 20 20 28 00          2984  DISP_OP  DC.B    '   (',0
00003375= 29 00                   2985  DISP_CP  DC.B   ')',0
00003377= 20 20 20 28 41 00       2986  DISP_AOP  DC.B    '   (A',0
0000337D                          2987  
0000337D= 20 20 20 2D 28 41 00    2988  DISP_PRE    DC.B    '   -(A',0
00003384= 29 2B 00                2989  DISP_POST   DC.B    ')+',0
00003387= 20 20 20 23 00          2990  DISP_LB DC.B    '   #',0
0000338C= 30 00                   2991  DISP_0  DC.B    '0',0
0000338E= 31 00                   2992  DISP_1  DC.B    '1',0
00003390= 32 00                   2993  DISP_2  DC.B    '2',0
00003392= 33 00                   2994  DISP_3  DC.B    '3',0
00003394= 34 00                   2995  DISP_4  DC.B    '4',0
00003396= 35 00                   2996  DISP_5  DC.B    '5',0
00003398= 36 00                   2997  DISP_6  DC.B    '6',0
0000339A= 37 00                   2998  DISP_7  DC.B    '7',0
0000339C                          2999  
0000339C                          3000  *STACK INTERFACE VARIABLES*
0000339C                          3001  COUNTER         DS.W    1
0000339E                          3002  QUEUE_COUNTER   DS.W    1
000033A0                          3003  
000033A0                          3004  *EA DECODING INTERFACE VARIABLES* 
000033A0                          3005  DEST_REGISTER_FORMAT    DS.B    1           *all address modes acceptable standard
000033A1                          3006  SRC_REGISTER_FORMAT  DS.B    1           *all address modes acceptable standard
000033A2                          3007  TEMP_REGISTER_FORMAT    DS.B    1           *place holder for masking other register formats
000033A3                          3008  
000033A3                          3009  *FORMAT OF WHERE TO GET THE EA BY THE ENDING BIT AND STARTING BIT
000033A3                          3010  * WORD + WORD = LONG
000033A3                          3011  * (STARTING BIT) + (ENDING BIT) = 2 HEX CHAR
000033A3                          3012  * A              + F            = AF         <= EXAMPLE
000033A3                          3013  *(10TH BIT)      + (15TH BIT)   = CHECK BITS 15 THROUGH 10
000033A3                          3014  GET_DST_START_END    DS.B    1
000033A4                          3015  GET_SRC_START_END    DS.B    1
000033A5                          3016  
000033A5                          3017  *STORES THE START + END BITS HERE (FROM ABOVE)
000033A6                          3018  VAR_BYTE_START      DS.L    1
000033AA                          3019  VAR_BYTE_END        DS.L    1
000033AE                          3020  VAR_TEMP_CLEANCOPY  DS.L    1
000033B2                          3021  
000033B2                          3022  VAR_LONG_ADDRESS_MODE_CHECK        DS.L    1       *holds the bits 0-2 in long form
000033B6                          3023  
000033B6                          3024  *MORE FOR STACK USAGE*
000033B6= 2C 00                   3025  DISP_COMMA  DC.B    ',',0
000033B8= 20 20 20 00             3026  DISP_INDENT  DC.B    '   ',0
000033BC                          3027  
000033BC                          3028  
000033BC                          3029  
000033BC                          3030  *---------------------------------------------------------------------------*
000033BC                          3031  * Ends program
000033BC                          3032  *---------------------------------------------------------------------------*
000033BC                          3033              END    START                    * last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASC2HXLP            1154
ASCII2HEX           114E
ASC_ERR             11B0
ASC_LOW             1192
ASC_NUM             11A2
ASC_SFT             11AA
ASC_UPP             119A
CHECK0              2420
CHECK1              24A8
CHECK2              2530
CHECK3              25C8
CHECK4              2668
CHECK7              2708
CHECK_IMMEDIATE     271A
CHECK_LONG          271A
CHECK_WORD          271A
CLEAR_RETURN        2AF6
CLEAR_STACK         2AE6
COUNTER             339C
CR                  D
DECREMENT           2ADE
DEST_CHECK0         2736
DEST_CHECK1         27C0
DEST_CHECK2         2848
DEST_CHECK3         28E0
DEST_CHECK4         2980
DEST_CHECK7         2A20
DEST_CHECK_IMMEDIATE  2A32
DEST_CHECK_LONG     2A32
DEST_CHECK_WORD     2A32
DEST_LOOP_SHIFTING  279E
DEST_LOOP_SHIFTING1  2828
DEST_LOOP_SHIFTING2  28B8
DEST_LOOP_SHIFTING3  2950
DEST_LOOP_SHIFTING4  29F8
DEST_MASKING_NEXT   27AE
DEST_MASKING_NEXT1  2836
DEST_MASKING_NEXT2  28C6
DEST_MASKING_NEXT3  295E
DEST_MASKING_NEXT4  2A06
DEST_MODE           1FD8
DEST_REGISTER       22A8
DEST_REGISTER_FORMAT  33A0
DISPLAY_30_LINES    12A0
DISP_0              338C
DISP_1              338E
DISP_2              3390
DISP_3              3392
DISP_4              3394
DISP_5              3396
DISP_6              3398
DISP_7              339A
DISP_A              336B
DISP_ADDA_L         327C
DISP_ADDA_W         3272
DISP_ADDQ_B         3175
DISP_ADDQ_L         3189
DISP_ADDQ_W         317F
DISP_ADD_B          3257
DISP_ADD_L          3269
DISP_ADD_W          3260
DISP_AND_B          323C
DISP_AND_L          324E
DISP_AND_W          3245
DISP_AOP            3377
DISP_ASL_B          32C5
DISP_ASL_L          32E9
DISP_ASL_W          32D7
DISP_ASR_B          32BC
DISP_ASR_L          32E0
DISP_ASR_W          32CE
DISP_BEQ            3336
DISP_BHI            3344
DISP_BLT            332F
DISP_BNE            333D
DISP_BRA            3328
DISP_BTST           30C8
DISP_CMPA_L         3228
DISP_CMPA_W         321E
DISP_CMPI_B         30D0
DISP_CMPI_L         30E4
DISP_CMPI_W         30DA
DISP_CMP_B          3203
DISP_CMP_L          3215
DISP_CMP_W          320C
DISP_COMMA          33B6
DISP_CP             3375
DISP_D              3366
DISP_DATA           30EE
DISP_DIVS           3193
DISP_EORI_B         30AA
DISP_EORI_L         30BE
DISP_EORI_W         30B4
DISP_EOR_B          31E8
DISP_EOR_L          31FA
DISP_EOR_W          31F1
DISP_HEX            3361
DISP_INDENT         33B8
DISP_JSR            311B
DISP_LB             3387
DISP_LEA            3158
DISP_LSL_B          328F
DISP_LSL_L          32B3
DISP_LSL_W          32A1
DISP_LSR_B          3286
DISP_LSR_L          32AA
DISP_LSR_W          3298
DISP_MOVEA_L        3356
DISP_MOVEA_W        334B
DISP_MOVEM_L        316A
DISP_MOVEM_W        315F
DISP_MOVE_B         30F6
DISP_MOVE_L         310A
DISP_MOVE_W         3100
DISP_MULS_W         3232
DISP_NEG_B          3122
DISP_NEG_L          3134
DISP_NEG_W          312B
DISP_NEXT           2E3B
DISP_NOT_B          313D
DISP_NOT_L          314F
DISP_NOT_W          3146
DISP_OP             3370
DISP_ORI_B          308F
DISP_ORI_L          30A1
DISP_ORI_W          3098
DISP_POST           3384
DISP_PRE            337D
DISP_ROL_B          32FB
DISP_ROL_L          331F
DISP_ROL_W          330D
DISP_ROR_B          32F2
DISP_ROR_L          3316
DISP_ROR_W          3304
DISP_RTS            3114
DISP_SUBA_L         31DE
DISP_SUBA_W         31D4
DISP_SUBI_B         31B6
DISP_SUBI_L         31CA
DISP_SUBI_W         31C0
DISP_SUB_B          319B
DISP_SUB_L          31AD
DISP_SUB_W          31A4
D_MODE000           207A
D_MODE010           20C2
D_MODE011           2122
D_MODE100           2142
D_MODE111           2194
EA_ARITH            1F72
EA_DATA             147E
EA_GEN              1FBE
EA_MOVEA            1F98
EA_NOSRC            1F5E
ENDLINE_M           2FEC
END_ADDR            109A
ERRMSG_1            2ED3
ERRMSG_3            2EF2
ERRMSG_5            2F17
ERROR_1             10FE
ERROR_2             110E
ERROR_3             111E
ERROR_4             112E
ERROR_5             113E
E_ADDR_HX           2FE8
FINMSG              2EA8
GET_DEST_FAILED     2A36
GET_DEST_SUCCESS    2A3A
GET_DST_START_END   33A3
GET_EA_EA_DEST      2724
GET_EA_EA_SRC       240E
GET_SRC_FAILED      271E
GET_SRC_START_END   33A4
GET_SRC_SUCCESS     2722
HEX2ASCII           11B6
HEX_CHAR            11E4
HEX_CONT            11E8
HEX_LOOP            11CA
IMMD_B              2248
IMMD_L              2288
IMMD_W              2268
IMMEDIATE           2218
INCREMENT           2AD6
INTRO               1028
IS_ODD              11F8
IS_ODD_ERR          120E
JMPTABLE            12CC
LF                  A
LONGMODE            21EC
LOOP_SHIFTING       2488
LOOP_SHIFTING1      2510
LOOP_SHIFTING2      25A0
LOOP_SHIFTING3      2638
LOOP_SHIFTING4      26E0
MAIN                1214
MASKING_NEXT        2496
MASKING_NEXT1       251E
MASKING_NEXT2       25AE
MASKING_NEXT3       2646
MASKING_NEXT4       26EE
MODE000             2066
MODE001             208E
MODE010             20A2
MODE011             20E2
MODE100             2102
MODE111             2162
NEXTLINES           12AE
OP0000              132C
OP0001              1552
OP0010              15C0
OP0011              1622
OP0100              1682
OP0101              181C
OP0110              1898
OP0111              1926
OP1000              192A
OP1001              1966
OP1010              1A3E
OP1011              1A42
OP1100              1B3E
OP1101              1BDA
OP1110              1CAC
OP1111              1F5A
OP_ADDA_L           1C94
OP_ADDA_W           1C7C
OP_ADDQ             183C
OP_ADDQ_B           1862
OP_ADDQ_L           1886
OP_ADDQ_W           1874
OP_ADD_B            1C34
OP_ADD_L            1C64
OP_ADD_W            1C4C
OP_AND_B            1BA4
OP_AND_L            1BC8
OP_AND_W            1BB6
OP_ASL              1E4C
OP_ASL_B            1E70
OP_ASL_L            1E82
OP_ASL_W            1E94
OP_ASR              1DF2
OP_ASR_B            1E16
OP_ASR_L            1E28
OP_ASR_W            1E3A
OP_ASX              1D0E
OP_BEQ              18FC
OP_BHI              18E0
OP_BLT              1918
OP_BNE              18EE
OP_BRA              190A
OP_BTST             13A0
OP_CMPA_L           1AAE
OP_CMPA_W           1A9C
OP_CMPI             14A6
OP_CMPI_B           14C6
OP_CMPI_L           14EA
OP_CMPI_W           14D8
OP_CMP_B            1AC0
OP_CMP_L            1AF0
OP_CMP_W            1AD8
OP_DATA             145A
OP_DIVS             1952
OP_EORI             13AE
OP_EORI_B           13CE
OP_EORI_L           13F2
OP_EORI_W           13E0
OP_EOR_B            1B08
OP_EOR_L            1B2C
OP_EOR_W            1B1A
OP_JSR              17FA
OP_LEA              1728
OP_LSL              1D98
OP_LSL_B            1DBC
OP_LSL_L            1DCE
OP_LSL_W            1DE0
OP_LSR              1D3E
OP_LSR_B            1D62
OP_LSR_L            1D74
OP_LSR_W            1D86
OP_LSX              1CF6
OP_MOVEA_L          1604
OP_MOVEA_W          1664
OP_MOVEM_L          1716
OP_MOVEM_W          1704
OP_MOVE_B           1558
OP_MOVE_L           15E6
OP_MOVE_W           1646
OP_MULS             1B90
OP_NEG              173C
OP_NEG_B            175C
OP_NEG_L            178C
OP_NEG_W            1774
OP_NOT              17A4
OP_NOT_B            17C4
OP_NOT_L            17E8
OP_NOT_W            17D6
OP_ORI              14FC
OP_ORI_B            151C
OP_ORI_L            1540
OP_ORI_W            152E
OP_ROL              1F00
OP_ROL_B            1F24
OP_ROL_L            1F36
OP_ROL_W            1F48
OP_ROR              1EA6
OP_ROR_B            1ECA
OP_ROR_L            1EDC
OP_ROR_W            1EEE
OP_ROX              1D26
OP_RTS              180E
OP_SUBA_L           1A2C
OP_SUBA_W           1A1A
OP_SUBI             1404
OP_SUBI_B           1424
OP_SUBI_L           1448
OP_SUBI_W           1436
OP_SUB_B            19D2
OP_SUB_L            1A02
OP_SUB_W            19EA
OUTPUT_PROCESSED_DATA  1298
POP_FRONT           2A90
POP_FRONT_RETURN    2ACA
POP_RETURN          2A8E
POP_SHIFT_LOOP      2AAC
POP_STACK           2A82
PRINT_QUEUE         2A56
PRINT_QUEUE_HELPER  2A62
PRINT_QUEUE_RETURN  2A78
PRINT_STACK         2A3C
PRINT_STACK_HELPER  2A48
PRINT_STACK_RETURN  2A54
PROGLP              100A
PROMPT_END          2E0E
PROMPT_START        2DDF
PUSH_STACK          2A7A
QUEUE_COUNTER       339E
REG_0               235C
REG_1               236A
REG_2               2378
REG_3               2386
REG_4               2394
REG_5               23A2
REG_6               23B0
REG_7               23BE
REPEAT              23CC
REPEATMSG           2E65
RETURN              11B4
SRC_MODE            201C
SRC_REGISTER        2304
SRC_REGISTER_FORMAT  33A1
STACK               7000
START               1004
START_ADDR          1048
S_ADDR_HX           2FE4
TEMP_REGISTER_FORMAT  33A2
TERMINATE           2AF8
TESTING             1036
TMPINPUT            2FEF
TMPOUTPUT           303F
VAR_BYTE_END        33AA
VAR_BYTE_START      33A6
VAR_LONG_ADDRESS_MODE_CHECK  33B2
VAR_TEMP_CLEANCOPY  33AE
VR_E_ADDR           2F94
VR_S_ADDR           2F44
WELCOME             2B0A
WORDMODE            21C0

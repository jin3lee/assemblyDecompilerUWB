00001004 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/8/2014 1:55:15 AM

00000000                             1  *---------------------------------------------------------------------------*
00000000                             2  * Title      : 68K Disassembler
00000000                             3  * Written by : Team Circle
00000000                             4  * Date       : 12/05/14
00000000                             5  * Description: Scans a section of memory and converts its
00000000                             6  *              contents to a listing of valid assembly 
00000000                             7  *              language instructions
00000000                             8  *---------------------------------------------------------------------------*
00000000                             9  
00000000                            10  *---------------------------------------------------------------------------*
00000000                            11  * System Equates                                                 
00000000                            12  *---------------------------------------------------------------------------*
00000000  =0000000D                 13  CR          EQU     $0D                     * ASCII for Carriage Return
00000000  =0000000A                 14  LF          EQU     $0A                     * ASCII for Line Feed 
00000000  =00007000                 15  STACK       EQU     $7000                   * Initial Stack Pointer                         
00000000                            16              
00000000                            17  *---------------------------------------------------------------------------*
00000000                            18  * Reserved Registers
00000000                            19  *---------------------------------------------------------------------------*  
00000000                            20  * D0 - I/O
00000000                            21  * D1 - Temporary storage of processing data
00000000                            22  * D3 - [PUSH_STACK]
00000000                            23  * D4 - Opcode size (0 - byte; 1- word; 2-long)
00000000                            24  * D5 - Processing data
00000000                            25  * D6 - Loop counter to print 30 lines
00000000                            26  * D7 - Error flag
00000000                            27  * A2 - [STACK POINTER]
00000000                            28  * A5 - Processing address in hex
00000000                            29  
00000000                            30  *---------------------------------------------------------------------------*
00000000                            31  * Start and loop program
00000000                            32  *---------------------------------------------------------------------------*  
00001000                            33              ORG     $1000
00001000  4FF8 7000                 34              LEA     STACK,SP
00001004                            35  START:            
00001004  4EB9 00001028             36              JSR     INTRO                 
0000100A  4EB9 000010C8             37  PROGLP      JSR     START_ADDR
00001010  4EB9 0000111A             38              JSR     END_ADDR
00001016  43F9 000032FA             39              LEA     ENDLINE_M,A1           * Add a new line
0000101C  103C 000E                 40              MOVE.B  #14, D0                  * Display A1
00001020  4E4F                      41              TRAP    #15
00001022                            42              
00001022  4EF9 000012D8             43              JMP     MAIN
00001028                            44              
00001028                            45  *---------------------------------------------------------------------------*
00001028                            46  * INTRO: Display the introduction of the program
00001028                            47  *---------------------------------------------------------------------------*
00001028  43F9 00002E18             48  INTRO       LEA     WELCOME,A1              * Load PROMPT_START
0000102E  103C 000E                 49              MOVE.B  #14,D0                  * Display A1
00001032  4E4F                      50              TRAP    #15
00001034  4E75                      51              RTS
00001036                            52  TESTING
00001036  1201                      53              MOVE.B  D1,D1
00001038  1482                      54              MOVE.B  D2,(A2)
0000103A  16C3                      55              MOVE.B  D3,(A3)+
0000103C  1904                      56              MOVE.B  D4,-(A4)
0000103E  11C5 3333                 57              MOVE.B  D5,$3333
00001042  13C6 44444444             58              MOVE.B  D6,$44444444
00001048                            59              
00001048                            60              *MOVE.B  A1,D1           *NOT ALLOWED FOR BYTE SIZE OPERATION (CAN'T RUN THIS)
00001048                            61              *MOVE.B  A2,(A2)
00001048                            62              *MOVE.B  A3,(A3)+
00001048                            63              *MOVE.B  A4,-(A4)
00001048                            64              *MOVE.B  A5,$3333
00001048                            65              *MOVE.B  A6,$44444444
00001048                            66              
00001048  1211                      67              MOVE.B  (A1),D1
0000104A  1492                      68              MOVE.B  (A2),(A2)
0000104C  16D3                      69              MOVE.B  (A3),(A3)+
0000104E  1914                      70              MOVE.B  (A4),-(A4)
00001050  11D5 3333                 71              MOVE.B  (A5),$3333
00001054  13D6 44444444             72              MOVE.B  (A6),$44444444
0000105A                            73               
0000105A  1219                      74              MOVE.B  (A1)+,D1
0000105C  149A                      75              MOVE.B  (A2)+,(A2)
0000105E  16DB                      76              MOVE.B  (A3)+,(A3)+
00001060  191C                      77              MOVE.B  (A4)+,-(A4)
00001062  11DD 3333                 78              MOVE.B  (A5)+,$3333
00001066  13DE 44444444             79              MOVE.B  (A6)+,$44444444
0000106C                            80  
0000106C  1221                      81              MOVE.B  -(A1),D1
0000106E  14A2                      82              MOVE.B  -(A2),(A2)
00001070  16E3                      83              MOVE.B  -(A3),(A3)+
00001072  1924                      84              MOVE.B  -(A4),-(A4)
00001074  11E5 3333                 85              MOVE.B  -(A5),$3333
00001078  13E6 44444444             86              MOVE.B  -(A6),$44444444
0000107E                            87              
0000107E  1238 3331                 88              MOVE.B  $3331,D1
00001082  14B8 3332                 89              MOVE.B  $3332,(A2)
00001086  16F8 3333                 90              MOVE.B  $3333,(A3)+
0000108A  1938 3334                 91              MOVE.B  $3334,-(A4)
0000108E  11F8 3335 3333            92              MOVE.B  $3335,$3333
00001094  13F8 3336 44444444        93              MOVE.B  $3336,$44444444
0000109C                            94              
0000109C  1239 44444441             95              MOVE.B  $44444441 ,D1
000010A2  14B9 44444442             96              MOVE.B  $44444442 ,(A2)
000010A8  16F9 44444443             97              MOVE.B  $44444443 ,(A3)+
000010AE  1939 44444444             98              MOVE.B  $44444444 ,-(A4)
000010B4  11F9 44444445 3333        99              MOVE.B  $44444445 ,$3333
000010BC  13F9 44444446 44444444   100              MOVE.B  $44444446 ,$44444444 
000010C6                           101              
000010C6  4E75                     102              RTS
000010C8                           103  *---------------------------------------------------------------------------*
000010C8                           104  * START_ADDR: Compute the starting address
000010C8                           105  *---------------------------------------------------------------------------*
000010C8                           106  START_ADDR
000010C8                           107              * Output
000010C8  43F9 000030ED            108              LEA     PROMPT_START,A1         * Load PROMPT_START 
000010CE  103C 000E                109              MOVE.B  #14,D0                  * Display PROMPT_START
000010D2  4E4F                     110              TRAP    #15
000010D4                           111      
000010D4                           112              * Input
000010D4  43F9 00003252            113              LEA     VR_S_ADDR,A1            * Load VR_S_ADDR
000010DA  103C 0002                114              MOVE.B  #2,D0                   * Ask user for input
000010DE  4E4F                     115              TRAP    #15
000010E0                           116              
000010E0                           117              * Error Checking (length)
000010E0  0C01 0000                118              CMPI.B  #0, D1                  * Check if input length <= 0
000010E4  6F00 0098                119              BLE     ERROR_1
000010E8  0C01 0008                120              CMPI.B  #8, D1                  * Check if input length > 8
000010EC  6E00 0090                121              BGT     ERROR_1
000010F0                           122              
000010F0                           123              * Conversion & Storage
000010F0  4EB9 000011CE            124              JSR     ASCII2HEX               * Jump to ASCII2HEX
000010F6  0C07 0001                125              CMPI.B  #1, D7                  * Check for error
000010FA  6700 0082                126              BEQ     ERROR_1                 
000010FE  23C1 000032F2            127              MOVE.L  D1, S_ADDR_HX           * Move the result to S_ADDR_HX 
00001104                           128              
00001104                           129              * Error Checking (Odd)
00001104  43F9 000032F2            130              LEA     S_ADDR_HX, A1           * Load 'S_ADDR_HX' for odd error
0000110A  4EB9 000012BC            131              JSR     IS_ODD                  * Check if the input address is odd
00001110  0C07 0001                132              CMPI.B  #1, D7                  * Check for error
00001114  6700 0088                133              BEQ     ERROR_3
00001118                           134              
00001118                           135              * Return
00001118  4E75                     136              RTS     
0000111A                           137  *---------------------------------------------------------------------------*
0000111A                           138  * END_ADDR: Compute the ending address
0000111A                           139  *---------------------------------------------------------------------------*
0000111A                           140  END_ADDR
0000111A                           141              * Output
0000111A  43F9 0000311C            142              LEA     PROMPT_END,A1           * Load PROMPT_END
00001120  103C 000E                143              MOVE.B  #14,D0                  * Display PROMPT_END
00001124  4E4F                     144              TRAP    #15
00001126                           145  
00001126                           146              * Input
00001126  43F9 000032A2            147              LEA     VR_E_ADDR,A1            * Load VR_E_ADDR
0000112C  103C 0002                148              MOVE.B  #2,D0                   * Ask user for input
00001130  4E4F                     149              TRAP    #15
00001132                           150              
00001132                           151              * Error Checking (length)
00001132  0C01 0000                152              CMPI.B  #0, D1                  * Check if input length <= 0
00001136  6F00 0056                153              BLE     ERROR_2
0000113A  0C01 0008                154              CMPI.B  #8, D1                  * Check if input length > 8
0000113E  6E00 004E                155              BGT     ERROR_2
00001142                           156              
00001142                           157              * Conversion & Storage
00001142  4EB9 000011CE            158              JSR     ASCII2HEX               * Jump to ASCII2HEX
00001148  0C07 0001                159              CMPI.B  #1, D7                  * Check for error
0000114C  6700 0040                160              BEQ     ERROR_2
00001150  23C1 000032F6            161              MOVE.L  D1, E_ADDR_HX           * Move the result to E_ADDR_HX
00001156                           162              
00001156                           163              * Error Checking (start > end case)
00001156  2439 000032F2            164              MOVE.L  S_ADDR_HX, D2           * Move the starting address to D2
0000115C  B282                     165              CMP.L   D2, D1                  * Compare starting and ending address
0000115E  6300 005E                166              BLS     ERROR_5                 * Go to ERROR_5 if ending < starting
00001162                           167              
00001162                           168              * Error Checking (Odd case)
00001162  43F9 000032F6            169              LEA     E_ADDR_HX, A1           * Move the ending address
00001168  4EB9 000012BC            170              JSR     IS_ODD                  * Go to IS_ODD for odd address checking
0000116E  0C07 0001                171              CMPI.B  #1, D7                  * Check for an error flag
00001172  6700 003A                172              BEQ     ERROR_4
00001176                           173              
00001176                           174              * Inputs are valid
00001176  2A79 000032F2            175              MOVE.L  S_ADDR_HX, A5           * Store the valid input in A5
0000117C                           176              
0000117C  4E75                     177              RTS
0000117E                           178              
0000117E                           179  *---------------------------------------------------------------------------*
0000117E                           180  * ERROR_1: Address error (Invalid starting address)
0000117E                           181  *---------------------------------------------------------------------------*
0000117E                           182  ERROR_1
0000117E  43F9 000031E1            183              LEA     ERRMSG_1, A1            * Load ERRMSG_1
00001184  103C 000E                184              MOVE.B  #14, D0                 * Display ERRMSG_1
00001188  4E4F                     185              TRAP    #15
0000118A  4EF8 10C8                186              JMP     START_ADDR              * Jump to START_ADDR
0000118E                           187      
0000118E                           188  *---------------------------------------------------------------------------*
0000118E                           189  * ERROR_2: Address error (Invalid ending address)
0000118E                           190  *---------------------------------------------------------------------------*
0000118E                           191  ERROR_2
0000118E  43F9 000031E1            192              LEA     ERRMSG_1, A1            * Load ERRMSG_1
00001194  103C 000E                193              MOVE.B  #14, D0                 * Display ERRMSG_1
00001198  4E4F                     194              TRAP    #15
0000119A  4EF8 111A                195              JMP     END_ADDR                * Jump to END_ADDR
0000119E                           196  
0000119E                           197  *---------------------------------------------------------------------------*
0000119E                           198  * ERROR_3: Address error (Odd starting address)
0000119E                           199  *---------------------------------------------------------------------------*
0000119E                           200  ERROR_3
0000119E  43F9 00003200            201              LEA     ERRMSG_3, A1
000011A4  103C 000E                202              MOVE.B  #14, D0
000011A8  4E4F                     203              TRAP    #15
000011AA  4EF8 10C8                204              JMP     START_ADDR
000011AE                           205     
000011AE                           206  *---------------------------------------------------------------------------*
000011AE                           207  * ERROR_4: Address error (Odd ending address)
000011AE                           208  *---------------------------------------------------------------------------*         
000011AE                           209  ERROR_4
000011AE  43F9 00003200            210              LEA     ERRMSG_3, A1
000011B4  103C 000E                211              MOVE.B  #14, D0
000011B8  4E4F                     212              TRAP    #15
000011BA  4EF8 111A                213              JMP     END_ADDR
000011BE                           214            
000011BE                           215  *---------------------------------------------------------------------------*
000011BE                           216  * ERROR_3: Address error (Ending address is less than starting address)
000011BE                           217  *---------------------------------------------------------------------------*
000011BE                           218  ERROR_5
000011BE  43F9 00003225            219              LEA     ERRMSG_5, A1
000011C4  103C 000E                220              MOVE.B  #14, D0
000011C8  4E4F                     221              TRAP    #15
000011CA  4EF8 111A                222              JMP     END_ADDR
000011CE                           223    
000011CE                           224  *---------------------------------------------------------------------------*
000011CE                           225  * ASCII2HEX: Convert ASCii to Hexadecimal
000011CE                           226  * Reserved registers: A1 = Source, D1 = Destination, D2 = Byte, D7 = Error
000011CE                           227  *---------------------------------------------------------------------------*
000011CE  4281                     228  ASCII2HEX   CLR.L   D1                      * Clear the destination 
000011D0  4287                     229              CLR.L   D7                      * Set the error flag to 0
000011D2  4282                     230              CLR.L   D2                      * Clear D2 for temp storage
000011D4                           231              
000011D4  1419                     232  ASC2HXLP    MOVE.B  (A1)+, D2               * Read a byte to D2
000011D6  0C02 0000                233              CMPI.B  #0, D2                  * Check for NULL (indicates the end of source)
000011DA  6700 0058                234              BEQ     RETURN                  * If it's NULL, go to return
000011DE  0C02 0066                235              CMPI.B  #102, D2                * Decimal ASCII value of f is 102
000011E2  6E00 004C                236              BGT     ASC_ERR                 * ASCII > f (invalid input) 
000011E6  0C02 0061                237              CMPI.B  #97, D2                 * Decimal ASCII value of a is 97
000011EA  6C00 0026                238              BGE     ASC_LOW                 * ASCII >= a (valid input)
000011EE  0C02 0046                239              CMPI.B  #70, D2                 * Decimal ASCII value of F is 70
000011F2  6E00 003C                240              BGT     ASC_ERR                 * ASCII > F (invalid input)
000011F6  0C02 0041                241              CMPI.B  #65, D2                 * Decimal ASCII value of A is 65
000011FA  6C00 001E                242              BGE     ASC_UPP                 * ASCII >= A (valid input)
000011FE  0C02 0039                243              CMPI.B  #57, D2                 * Decimal value of 9 is 57
00001202  6E00 002C                244              BGT     ASC_ERR                 * ASCII > 9 (invalid input)
00001206  0C02 0030                245              CMPI.B  #48, D2                 * Decimal ASCII value of 0 is 48
0000120A  6C00 0016                246              BGE     ASC_NUM                 * ASCII >= 0 (valid input)
0000120E  6000 0020                247              BRA     ASC_ERR                 * Invalid input
00001212                           248  
00001212  0442 0057                249  ASC_LOW     SUBI    #87, D2                 * Convert the ASCII input to Hex
00001216  6000 0012                250              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
0000121A                           251              
0000121A  0442 0037                252  ASC_UPP     SUBI    #55, D2                 * Convert the ASCII input to Hex
0000121E  6000 000A                253              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
00001222                           254              
00001222  0442 0030                255  ASC_NUM     SUBI    #48, D2                 * Convert the ASCII input to Hex
00001226  6000 0002                256              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
0000122A                           257              
0000122A  E981                     258  ASC_SFT     ASL.L   #4, D1                  * Shift the dest to left by 4 bits
0000122C  D202                     259              ADD.B   D2, D1                  * Add the converted input to D1
0000122E  60A4                     260              BRA     ASC2HXLP                * Loop
00001230                           261  
00001230  1E3C 0001                262  ASC_ERR     MOVE.B  #1, D7                  * Set the error flag to 1            
00001234  4E75                     263  RETURN      RTS     
00001236                           264  
00001236                           265  *---------------------------------------------------------------------------*
00001236                           266  * HEX2ASCII: Convert Hexadecimal to ASCii 
00001236                           267  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
00001236                           268  *---------------------------------------------------------------------------*
00001236  0C02 0008                269  HEX2ASCII   CMPI.B  #8, D2                  * Check to see if the size is long
0000123A  6700 000E                270              BEQ     HEX_LOOP
0000123E  4841                     271              SWAP    D1
00001240  0C02 0002                272              CMPI.B  #2,D2
00001244  6600 0004                273              BNE     HEX_LOOP
00001248  E189                     274              LSL.L   #8,D1
0000124A                           275             
0000124A  E999                     276  HEX_LOOP    ROL.L   #4, D1                  * Roll D1 to left
0000124C  2601                     277              MOVE.L  D1, D3                  * Move D1 to D3
0000124E  0283 0000000F            278              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
00001254  0C03 0009                279              CMPI.B  #9, D3                  * Compare te digit
00001258  6E00 000A                280              BGT     HEX_CHAR              
0000125C  0603 0030                281              ADDI.B  #48,D3                  * Add 48 for numerical output
00001260  6000 0006                282              BRA     HEX_CONT
00001264                           283              
00001264  0603 0037                284  HEX_CHAR    ADDI.B  #55,D3                  * Add 55 for character output
00001268                           285  
00001268  12C3                     286  HEX_CONT    MOVE.B  D3, (A1)+               * Place into A1
0000126A  5342                     287              SUBI    #1, D2                  * Decrement the size
0000126C  0C02 0000                288              CMPI.B  #0, D2                  * Check if D2 is 0
00001270  66D8                     289              BNE     HEX_LOOP                * Loop
00001272  12BC 0000                290              MOVE.B  #$0,(A1)                * Null terminator
00001276  4E75                     291              RTS
00001278                           292  *---------------------------------------------------------------------------*
00001278                           293  * HEX2ASCII2STACK: Convert Hexadecimal to ASCii 
00001278                           294  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
00001278                           295  *---------------------------------------------------------------------------*
00001278                           296  HEX2ASCII2STACK
00001278  0C02 0008                297              CMPI.B  #8, D2                  * Check to see if the size is long
0000127C  6700 000E                298              BEQ     STACK_HEX_LOOP
00001280  4841                     299              SWAP    D1
00001282  0C02 0002                300              CMPI.B  #2,D2
00001286  6600 0004                301              BNE     STACK_HEX_LOOP
0000128A  E189                     302              LSL.L   #8,D1
0000128C                           303             
0000128C                           304  STACK_HEX_LOOP    
0000128C  E999                     305              ROL.L   #4, D1                  * Roll D1 to left
0000128E  2601                     306              MOVE.L  D1, D3                  * Move D1 to D3
00001290  0283 0000000F            307              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
00001296  0C03 0009                308              CMPI.B  #9, D3                  * Compare te digit
0000129A  6E00 000A                309              BGT     STACK_HEX_CHAR              
0000129E  0603 0030                310              ADDI.B  #48,D3                  * Add 48 for numerical output
000012A2  6000 0006                311              BRA     STACK_HEX_CONT
000012A6                           312              
000012A6                           313  STACK_HEX_CHAR    
000012A6  0603 0037                314              ADDI.B  #55,D3                  * Add 55 for character output
000012AA                           315  
000012AA                           316  STACK_HEX_CONT    
000012AA  6100 1ADC                317              BSR     PUSH_STACK              *PLACE INTO STACK
000012AE  5342                     318              SUBI    #1, D2                  * Decrement the size
000012B0  0C02 0000                319              CMPI.B  #0, D2                  * Check if D2 is 0
000012B4  66D6                     320              BNE     STACK_HEX_LOOP                * Loop
000012B6  12BC 0000                321              MOVE.B  #$0,(A1)                * Null terminator
000012BA  4E75                     322              RTS
000012BC                           323  
000012BC                           324  
000012BC                           325  *---------------------------------------------------------------------------*
000012BC                           326  * IS_ODD: Check whether the source address is odd
000012BC                           327  * Reserved registers: A1 = Source, D1 = Result, D7 = error flag
000012BC                           328  *---------------------------------------------------------------------------*
000012BC  4281                     329  IS_ODD      CLR.L   D1                      * Clear the result
000012BE  4287                     330              CLR.L   D7                      * Set the error flag to 0
000012C0  2211                     331              MOVE.L  (A1),D1                * Temp store the checking address to D1
000012C2  82FC 0002                332              DIVU    #2, D1                  * Divide the result by 2
000012C6  4841                     333              SWAP    D1                      * Swap remainder with quotient
000012C8  0C01 0001                334              CMPI.B  #1, D1                  * Check for error
000012CC  6700 0004                335              BEQ     IS_ODD_ERR
000012D0  4E75                     336              RTS
000012D2                           337              
000012D2  1E3C 0001                338  IS_ODD_ERR  MOVE.B  #1, D7
000012D6  4E75                     339              RTS
000012D8                           340  
000012D8                           341  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*
000012D8                           342  * MAIN                    
000012D8                           343  * A2: STACK POINTER                                                      MAIN                                                                        MAIN
000012D8                           344  * A5: Processing address
000012D8                           345  *
000012D8                           346  * D3: USED FOR PUSHING INTO STACK
000012D8                           347  *     To push into stack => MOVE.W #DATA,D3 
000012D8                           348  *                           BSR    PUSH_STACK
000012D8                           349  *     To print stack     => BSR    PRINT_STACK 
000012D8                           350  *     To clear stack     => BSR    CLEAR_STACK
000012D8                           351  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*  
000012D8                           352  MAIN        
000012D8                           353              *initialize stack pointer
000012D8  33FC 0000 000036AA       354              MOVE.W  #0,COUNTER
000012E0  347C 7000                355              MOVEA.W #STACK,A2
000012E4  163C 0020                356              MOVE.B  #' ',D3
000012E8  6100 1A9E                357              BSR     PUSH_STACK
000012EC  6100 1A9A                358              BSR     PUSH_STACK
000012F0  6100 1A96                359              BSR     PUSH_STACK
000012F4                           360              
000012F4                           361              * clear registers for temp storage
000012F4  4280                     362              CLR.L   D0                   
000012F6  4281                     363              CLR.L   D1                   
000012F8  227C 00000000            364              MOVEA.L #0, A1                
000012FE                           365              
000012FE  220D                     366              MOVE.L  A5,D1                   * check to see if the address is fully read
00001300  23CD 000032F2            367              MOVE.L  A5,S_ADDR_HX
00001306  B2B9 000032F6            368              CMP.L   E_ADDR_HX,D1
0000130C  6C00 119A                369              BGE     REPEAT                  * go to repeat for user action
00001310                           370  
00001310  43F9 0000334D            371              LEA     TMPOUTPUT,A1            * allocate storage to hold output
00001316  143C 0008                372              MOVE.B  #8,D2                   * set the output size
0000131A  4EB8 1236                373              JSR     HEX2ASCII               
0000131E  43F9 0000334D            374              LEA     TMPOUTPUT,A1
00001324  103C 000E                375              MOVE.B  #14,D0
00001328  4E4F                     376              TRAP    #15
0000132A                           377              
0000132A  4285                     378              CLR.L    D5                      * clear the processing data
0000132C  3A1D                     379              MOVE.W  (A5)+,D5                 * copy the currently processing data in A5 over to D5
0000132E                           380                                               * advance the current instruction pointer to the next
0000132E                           381                                               * instruction in memory
0000132E                           382  *----------------------------------------*
0000132E                           383  * Registers          
0000132E                           384  * [D1] - COPY OF D5
0000132E                           385  * [D5] - DATA TO BE PROCESSED
0000132E                           386  * [D6] - COUNTER FOR LINES PROCESSED
0000132E                           387  *
0000132E                           388  * [D4]      - ERROR FLAG BEFORE PRINTING
0000132E                           389  * [STACK]   - PRINTS PROCESS DATA
0000132E                           390  * [COUNTER] - KEEPS TRACK OF STACK INCREMENT
0000132E                           391  *
0000132E                           392  * [A1] - USED FOR JUMPING/PRINTING
0000132E                           393  *
0000132E                           394  *----------------------------------------*
0000132E                           395  
0000132E                           396              
0000132E                           397              *Processing the first 4 most significant bits 
0000132E  2205                     398              MOVE.L  D5,D1                    * copy the current processing data to D1
00001330  143C 000C                399              MOVE.B  #12,D2                   * shift to right by 12 bits
00001334  E469                     400              LSR.W   D2,D1                    * [D2] Temporarily used D2 for shifting bits
00001336  C2FC 0006                401              MULU    #6,D1                    * form offset
0000133A  43F9 000013A8            402              LEA     JMPTABLE,A1              * index into table
00001340  4EB1 1000                403              JSR     0(A1,D1)                 * jump indirect with index
00001344                           404              
00001344                           405              *SECURED EA*
00001344  B83C 0001                406              CMP.B   #1,D4                    * ERROR FLAG CHECK [ERROR WHEN D4 == 1]
00001348  6600 0012                407              BNE     OUTPUT_PROCESSED_DATA    * PRINTS PROCESSED OP-CODE & EA
0000134C  6100 01E8                408              BSR     OP_DATA                  * PRINT ERROR MESSAGE "DATA"
00001350  6100 1AA2                409              BSR     CLEAR_STACK              * CLEARS THE STACK 
00001354  183C 0000                410              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
00001358  6000 0022                411              BRA     DISPLAY_30_LINES         * GO TO LAST STEP
0000135C                           412             
0000135C                           413  OUTPUT_PROCESSED_DATA       
0000135C  163C 000D                414              MOVE.B  #$D,D3                  *carriage return
00001360  6100 1A26                415              BSR     PUSH_STACK
00001364  163C 000A                416              MOVE.B  #$A,D3                  *new line feed
00001368  6100 1A1E                417              BSR     PUSH_STACK
0000136C  163C 0000                418              MOVE.B  #$0,D3                  *null
00001370  6100 1A16                419              BSR     PUSH_STACK
00001374                           420       
00001374  6100 19EE                421              BSR     PRINT_QUEUE
00001378  183C 0000                422              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
0000137C                           423  DISPLAY_30_LINES
0000137C                           424              * display 30 lines per page
0000137C  5206                     425              ADDI.B  #1,D6
0000137E  0C06 001E                426              CMPI.B  #30,D6
00001382  6C00 0006                427              BGE     NEXTLINES
00001386  6000 FF50                428              BRA     MAIN
0000138A                           429            
0000138A                           430  *---------------------------------------------------------------------------*
0000138A                           431  * NEXTLINES: receive input from user to print the next 30 lines
0000138A                           432  *---------------------------------------------------------------------------*  
0000138A  4206                     433  NEXTLINES   CLR.B   D6
0000138C  43F9 00003149            434              LEA     DISP_NEXT,A1
00001392  103C 000E                435              MOVE.B  #14,D0
00001396  4E4F                     436              TRAP    #15
00001398  43F9 000032FD            437              LEA     TMPINPUT,A1
0000139E  103C 0002                438              MOVE.B  #2,D0
000013A2  4E4F                     439              TRAP    #15
000013A4  4EF8 12D8                440              JMP     MAIN
000013A8                           441    
000013A8                           442  *---------------------------------------------------------------------------*
000013A8                           443  * JMPTABLE: OP code jump/branch table used to decode and display opcodes
000013A8                           444  *---------------------------------------------------------------------------*  
000013A8  4EF9 00001408            445  JMPTABLE    JMP     OP0000  * CMPI/ORI/BTST/EORI/SUBI/BTST
000013AE  4EF9 0000162E            446              JMP     OP0001  * MOVE.B                                        *WORKING ON - JOSEPH
000013B4  4EF9 0000169C            447              JMP     OP0010  * MOVE.L/MOVEA.L
000013BA  4EF9 000016FE            448              JMP     OP0011  * MOVE.W/MOVEA.W
000013C0  4EF9 0000175E            449              JMP     OP0100  * MOVEM/LEA/NEG/NOT/JSR/RTS
000013C6  4EF9 000018F8            450              JMP     OP0101  * ADDQ
000013CC  4EF9 00001974            451              JMP     OP0110  * BRA/Bcc (BEQ/BNE/BLT/BHI)
000013D2  4EF9 00001A02            452              JMP     OP0111  * MOVEQ (unassigned)
000013D8  4EF9 00001A06            453              JMP     OP1000  * DIVS
000013DE  4EF9 00001A42            454              JMP     OP1001  * SUB/SUBA
000013E4  4EF9 00001B1A            455              JMP     OP1010  * Unassigned 
000013EA  4EF9 00001B1E            456              JMP     OP1011  * CMP/EOR/CMPA
000013F0  4EF9 00001C1A            457              JMP     OP1100  * MULS/AND
000013F6  4EF9 00001CB6            458              JMP     OP1101  * ADD/ADDA
000013FC  4EF9 00001D88            459              JMP     OP1110  * LSR/LSL/ASR/ASL/ROL/ROR
00001402  4EF9 00002036            460              JMP     OP1111  * Special/Reserved
00001408                           461              
00001408                           462  *---------------------------------------------------------------------------*
00001408                           463  * OP0000: decode CMPI/ORI/BTST/SUBI/EORI
00001408                           464  *---------------------------------------------------------------------------*           
00001408                           465  OP0000                                                                                  
00001408  4281                     466              CLR.L   D1          * to temporarily store the address to process
0000140A  4280                     467              CLR.L   D0  
0000140C  4284                     468              CLR.L   D4                 
0000140E  227C 00000000            469              MOVEA.L #0, A1                
00001414                           470              * Check for ORI (0000 0000 xx (size) xxx (EA mode) xxx(EA reg)
00001414                           471              * Check if bit 11,10,9,8 are 0000)
00001414  2205                     472              MOVE.L  D5,D1
00001416  0281 00000F00            473              ANDI.L  #$0F00,D1
0000141C  0C81 00000000            474              CMPI.L  #$0000,D1   * if they are 0000, it is ORI
00001422  6700 01B4                475              BEQ     OP_ORI
00001426                           476  
00001426                           477              * check for CMPI (0000 1100 xx (size) xxx (EA mode) xxx (EA reg)
00001426                           478              * check if bit 11,10,9,8 are 1100
00001426  4281                     479              CLR.L   D1
00001428  2205                     480              MOVE.L  D5,D1
0000142A  0281 00000F00            481              ANDI.L  #$0F00,D1
00001430  0C81 00000C00            482              CMPI.L  #$0C00,D1
00001436  6700 014A                483              BEQ     OP_CMPI
0000143A                           484              
0000143A                           485              * check for SUBI
0000143A  4281                     486              CLR.L   D1
0000143C  2205                     487              MOVE.L  D5,D1
0000143E  0281 00000F00            488              ANDI.L  #$0F00,D1
00001444  0C81 00000400            489              CMPI.L  #$0400,D1
0000144A  6700 0094                490              BEQ     OP_SUBI
0000144E                           491              
0000144E                           492              * check for EORI
0000144E  4281                     493              CLR.L   D1
00001450  2205                     494              MOVE.L  D5,D1
00001452  0281 00000F00            495              ANDI.L  #$0F00,D1
00001458  0C81 00000A00            496              CMPI.L  #$0A00,D1
0000145E  6700 002A                497              BEQ     OP_EORI
00001462                           498              
00001462                           499              * check for BTST
00001462  4281                     500              CLR.L   D1
00001464  2205                     501              MOVE.L  D5,D1
00001466  EA99                     502              ROR.L   #5,D1
00001468  0281 00000008            503              ANDI.L  #$8,D1
0000146E  0C01 0008                504              CMPI.B  #8,D1
00001472  6700 0008                505              BEQ     OP_BTST
00001476                           506  
00001476                           507              * OP0000 series other than ORI/CMPI/BTST/EORI
00001476  4EF9 00001536            508              JMP     OP_DATA
0000147C                           509              
0000147C                           510  *---------------------------------------------------------------------------*
0000147C                           511  * OP_BTST: display BTST
0000147C                           512  *---------------------------------------------------------------------------* 
0000147C  43F9 000033D6            513  OP_BTST     LEA     DISP_BTST,A1
00001482  103C 000E                514              MOVE.B  #14,D0
00001486  4E4F                     515              TRAP    #15
00001488  4E75                     516              RTS
0000148A                           517  
0000148A                           518  *---------------------------------------------------------------------------*
0000148A                           519  * OP_EORI: decode and display EORI
0000148A                           520  *---------------------------------------------------------------------------* 
0000148A                           521  OP_EORI
0000148A  4281                     522              CLR.L   D1
0000148C  4284                     523              CLR.L   D4
0000148E  2205                     524              MOVE.L  D5,D1
00001490  EC99                     525              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001492  0C01 0000                526              CMPI.B  #0,D1
00001496  6700 0012                527              BEQ     OP_EORI_B    * size is byte
0000149A  0C01 0001                528              CMPI.B  #1,D1
0000149E  6700 001C                529              BEQ     OP_EORI_W    * size is word
000014A2  0C01 0002                530              CMPI.B  #2,D1
000014A6  6700 0026                531              BEQ     OP_EORI_L    * size is long
000014AA                           532  
000014AA                           533  OP_EORI_B    * size is byte    
000014AA  183C 0000                534              MOVE.B  #0,D4
000014AE  43F9 000033B8            535              LEA     DISP_EORI_B,A1
000014B4  103C 000E                536              MOVE.B  #14,D0
000014B8  4E4F                     537              TRAP    #15
000014BA  4E75                     538              RTS
000014BC                           539              
000014BC                           540  OP_EORI_W    * size is word
000014BC  183C 0001                541              MOVE.B  #1,D4
000014C0  43F9 000033C2            542              LEA     DISP_EORI_W,A1
000014C6  103C 000E                543              MOVE.B  #14,D0
000014CA  4E4F                     544              TRAP    #15
000014CC  4E75                     545              RTS
000014CE                           546              
000014CE                           547  OP_EORI_L    * size is long
000014CE  183C 0002                548              MOVE.B  #2,D4
000014D2  43F9 000033CC            549              LEA     DISP_EORI_L,A1
000014D8  103C 000E                550              MOVE.B  #14,D0
000014DC  4E4F                     551              TRAP    #15
000014DE  4E75                     552              RTS
000014E0                           553              
000014E0                           554  *---------------------------------------------------------------------------*
000014E0                           555  * OP_SUBI: decode SUBI.B/.W/.L
000014E0                           556  *---------------------------------------------------------------------------* 
000014E0                           557  OP_SUBI
000014E0  4281                     558              CLR.L   D1
000014E2  4284                     559              CLR.L   D4
000014E4  2205                     560              MOVE.L  D5,D1
000014E6  EC99                     561              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000014E8  0C01 0000                562              CMPI.B  #0,D1
000014EC  6700 0012                563              BEQ     OP_SUBI_B    * size is byte
000014F0  0C01 0001                564              CMPI.B  #1,D1
000014F4  6700 001C                565              BEQ     OP_SUBI_W    * size is word
000014F8  0C01 0002                566              CMPI.B  #2,D1
000014FC  6700 0026                567              BEQ     OP_SUBI_L    * size is long
00001500                           568  
00001500                           569  OP_SUBI_B    * size is byte    
00001500  183C 0000                570              MOVE.B  #0,D4
00001504  43F9 000034C4            571              LEA     DISP_SUBI_B,A1
0000150A  103C 000E                572              MOVE.B  #14,D0
0000150E  4E4F                     573              TRAP    #15
00001510  4E75                     574              RTS
00001512                           575              
00001512                           576  OP_SUBI_W    * size is word
00001512  183C 0001                577              MOVE.B  #1,D4
00001516  43F9 000034CE            578              LEA     DISP_SUBI_W,A1
0000151C  103C 000E                579              MOVE.B  #14,D0
00001520  4E4F                     580              TRAP    #15
00001522  4E75                     581              RTS
00001524                           582              
00001524                           583  OP_SUBI_L    * size is long
00001524  183C 0002                584              MOVE.B  #2,D4
00001528  43F9 000034D8            585              LEA     DISP_SUBI_L,A1
0000152E  103C 000E                586              MOVE.B  #14,D0
00001532  4E4F                     587              TRAP    #15
00001534  4E75                     588              RTS
00001536                           589              
00001536                           590  *---------------------------------------------------------------------------*
00001536                           591  * OP_DATA : unidentified opcode
00001536                           592  *---------------------------------------------------------------------------* 
00001536                           593  OP_DATA
00001536  4280                     594              CLR.L   D0                   
00001538  4281                     595              CLR.L   D1     
0000153A  4284                     596              CLR.L   D4                    
0000153C  227C 00000000            597              MOVEA.L #0, A1             
00001542  4287                     598              CLR.L   D7
00001544  1E3C 0001                599              MOVE.B  #1,D7                   * error flag is true
00001548                           600              
00001548  43F9 000033FC            601              LEA     DISP_DATA,A1
0000154E  103C 000E                602              MOVE.B  #14,D0
00001552  4E4F                     603              TRAP    #15
00001554                           604              
00001554  4EF9 0000155A            605              JMP     EA_DATA
0000155A                           606             
0000155A                           607             
0000155A                           608  *---------------------------------------------------------------------------*
0000155A                           609  * EA_DATA
0000155A                           610  *---------------------------------------------------------------------------*       
0000155A  43F9 0000334D            611  EA_DATA     LEA     TMPOUTPUT,A1    * load the temporarily stored output address
00001560  2205                     612              MOVE.L  D5,D1           * transfer the processing data to D1
00001562  7404                     613              MOVE.L  #4,D2           * set to word size
00001564  4EB8 1236                614              JSR     HEX2ASCII       * prepare output in ascii
00001568  43F9 0000366F            615              LEA     DISP_HEX,A1     * display $ symbol
0000156E  103C 000E                616              MOVE.B  #14,D0      
00001572  4E4F                     617              TRAP    #15
00001574  43F9 0000334D            618              LEA     TMPOUTPUT,A1    * display with a new line
0000157A  103C 000D                619              MOVE.B  #13,D0
0000157E  4E4F                     620              TRAP    #15
00001580                           621  
00001580  4E75                     622              RTS
00001582                           623              
00001582                           624  *---------------------------------------------------------------------------*
00001582                           625  * OP_CMPI : decode CMPI and its size
00001582                           626  *---------------------------------------------------------------------------*          
00001582                           627  OP_CMPI
00001582  4281                     628              CLR.L   D1
00001584  4284                     629              CLR.L   D4
00001586  2205                     630              MOVE.L  D5,D1
00001588  EC99                     631              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
0000158A  0C01 0000                632              CMPI.B  #0,D1
0000158E  6700 0012                633              BEQ     OP_CMPI_B    * size is byte
00001592  0C01 0001                634              CMPI.B  #1,D1
00001596  6700 001C                635              BEQ     OP_CMPI_W    * size is word
0000159A  0C01 0002                636              CMPI.B  #2,D1
0000159E  6700 0026                637              BEQ     OP_CMPI_L    * size is long
000015A2                           638  
000015A2                           639  OP_CMPI_B    * size is byte    
000015A2  183C 0000                640              MOVE.B  #0,D4
000015A6  43F9 000033DE            641              LEA     DISP_CMPI_B,A1
000015AC  103C 000E                642              MOVE.B  #14,D0
000015B0  4E4F                     643              TRAP    #15
000015B2  4E75                     644              RTS
000015B4                           645              
000015B4                           646  OP_CMPI_W    * size is word
000015B4  183C 0001                647              MOVE.B  #1,D4
000015B8  43F9 000033E8            648              LEA     DISP_CMPI_W,A1
000015BE  103C 000E                649              MOVE.B  #14,D0
000015C2  4E4F                     650              TRAP    #15
000015C4  4E75                     651              RTS
000015C6                           652              
000015C6                           653  OP_CMPI_L    * size is long
000015C6  183C 0002                654              MOVE.B  #2,D4
000015CA  43F9 000033F2            655              LEA     DISP_CMPI_L,A1
000015D0  103C 000E                656              MOVE.B  #14,D0
000015D4  4E4F                     657              TRAP    #15
000015D6  4E75                     658              RTS
000015D8                           659   
000015D8                           660  *---------------------------------------------------------------------------*
000015D8                           661  * OP_ORI : decode ORI and its size
000015D8                           662  *---------------------------------------------------------------------------* 
000015D8                           663  OP_ORI      
000015D8  4281                     664              CLR.L   D1
000015DA  4284                     665              CLR.L   D4
000015DC  2205                     666              MOVE.L  D5,D1
000015DE  EC99                     667              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000015E0  0C01 0000                668              CMPI.B  #0,D1
000015E4  6700 0012                669              BEQ     OP_ORI_B    * size is byte
000015E8  0C01 0001                670              CMPI.B  #1,D1
000015EC  6700 001C                671              BEQ     OP_ORI_W    * size is word
000015F0  0C01 0002                672              CMPI.B  #2,D1
000015F4  6700 0026                673              BEQ     OP_ORI_L    * size is long
000015F8                           674  
000015F8                           675  OP_ORI_B    * size is byte    
000015F8  183C 0000                676              MOVE.B  #0,D4
000015FC  43F9 0000339D            677              LEA     DISP_ORI_B,A1
00001602  103C 000E                678              MOVE.B  #14,D0
00001606  4E4F                     679              TRAP    #15
00001608  4E75                     680              RTS
0000160A                           681              
0000160A                           682  OP_ORI_W    * size is word
0000160A  183C 0001                683              MOVE.B  #1,D4
0000160E  43F9 000033A6            684              LEA     DISP_ORI_W,A1
00001614  103C 000E                685              MOVE.B  #14,D0
00001618  4E4F                     686              TRAP    #15
0000161A  4E75                     687              RTS
0000161C                           688              
0000161C                           689  OP_ORI_L    * size is long
0000161C  183C 0002                690              MOVE.B  #2,D4
00001620  43F9 000033AF            691              LEA     DISP_ORI_L,A1
00001626  103C 000E                692              MOVE.B  #14,D0
0000162A  4E4F                     693              TRAP    #15
0000162C  4E75                     694              RTS
0000162E                           695          
0000162E                           696  *---------------------------------------------------------------------------*
0000162E                           697  * OP0001: MOVE.B
0000162E                           698  *---------------------------------------------------------------------------*
0000162E                           699  OP0001      
0000162E  4EF9 00001634            700              JMP     OP_MOVE_B   * display MOVE.B
00001634                           701              
00001634                           702  *---------------------------------------------------------------------------*
00001634                           703  * OP_MOVE_B: display MOVE_B and proceed to EA
00001634                           704  *---------------------------------------------------------------------------*
00001634                           705  OP_MOVE_B                                                                       
00001634                           706             
00001634                           707             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001634  13FC 0082 000036AE       708             MOVE.B   #$82,DEST_REGISTER_FORMAT
0000163C  13FC 0000 000036AF       709             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001644                           710             
00001644                           711             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001644  13FC 00B9 000036B1       712             MOVE.B   #$B9,GET_DST_START_END
0000164C  13FC 0020 000036B2       713             MOVE.B   #$20,GET_SRC_START_END
00001654                           714             
00001654                           715              *CLEAR D3
00001654  4283                     716              CLR.L   D3
00001656                           717              *LOAD STACK WITH THIS OPMODE
00001656  6100 1730                718              BSR     PUSH_STACK
0000165A  163C 004D                719              MOVE.B  #'M',D3
0000165E  6100 1728                720              BSR     PUSH_STACK
00001662  163C 004F                721              MOVE.B  #'O',D3
00001666  6100 1720                722              BSR     PUSH_STACK
0000166A  163C 0056                723              MOVE.B  #'V',D3
0000166E  6100 1718                724              BSR     PUSH_STACK
00001672  163C 0045                725              MOVE.B  #'E',D3
00001676  6100 1710                726              BSR     PUSH_STACK
0000167A  163C 002E                727              MOVE.B  #'.',D3
0000167E  6100 1708                728              BSR     PUSH_STACK
00001682  163C 0042                729              MOVE.B  #'B',D3
00001686  6100 1700                730              BSR     PUSH_STACK
0000168A                           731              
0000168A  6100 0E5E                732              BSR     GET_EA_EA_SRC
0000168E  163C 002C                733              MOVE.B  #',',D3
00001692  6100 16F4                734              BSR     PUSH_STACK
00001696  6100 1282                735              BSR     GET_EA_EA_DEST
0000169A                           736              *BSR     GET_EA_EA_DEST
0000169A                           737              
0000169A                           738              *TODO: NEEDS DEST EA TOO
0000169A                           739              
0000169A  4E75                     740              RTS
0000169C                           741              
0000169C                           742             
0000169C                           743  *---------------------------------------------------------------------------*
0000169C                           744  * OP0010: decode MOVE.L/MOVEA.L
0000169C                           745  *---------------------------------------------------------------------------*
0000169C                           746  OP0010      
0000169C  183C 0002                747              MOVE.B  #2,D4
000016A0  4280                     748              CLR.L   D0                     
000016A2  4281                     749              CLR.L   D1                      
000016A4  227C 00000000            750              MOVEA.L #0, A1                 
000016AA                           751              
000016AA  2205                     752              MOVE.L  D5,D1
000016AC  EA99                     753              ROR.L   #5,D1
000016AE  0281 0000000E            754              ANDI.L  #$E,D1
000016B4  0C01 0002                755              CMPI.B  #2,D1
000016B8  6700 0026                756              BEQ     OP_MOVEA_L
000016BC                           757  
000016BC  4EF9 000016C2            758              JMP     OP_MOVE_L
000016C2                           759             
000016C2                           760  
000016C2                           761  *---------------------------------------------------------------------------*
000016C2                           762  * OP_MOVE_L: display MOVE_L and proceed to EA
000016C2                           763  *---------------------------------------------------------------------------*
000016C2                           764  OP_MOVE_L   
000016C2  183C 0002                765              MOVE.B  #2,D4
000016C6  227C 00000000            766              MOVEA.L #0, A1
000016CC  43F9 00003418            767              LEA     DISP_MOVE_L,A1
000016D2  103C 000E                768              MOVE.B  #14,D0
000016D6  4E4F                     769              TRAP    #15
000016D8                           770              
000016D8  4EB9 0000209A            771              JSR     EA_GEN
000016DE  4E75                     772              RTS
000016E0                           773  
000016E0                           774  *---------------------------------------------------------------------------*
000016E0                           775  * OP_MOVEA_L: display MOVEA_L and proceed to EA
000016E0                           776  *---------------------------------------------------------------------------*
000016E0                           777  OP_MOVEA_L 
000016E0  183C 0002                778              MOVE.B  #2,D4
000016E4  227C 00000000            779              MOVEA.L #0, A1
000016EA  43F9 00003664            780              LEA     DISP_MOVEA_L,A1
000016F0  103C 000E                781              MOVE.B  #14,D0
000016F4  4E4F                     782              TRAP    #15
000016F6  4EF9 00002074            783              JMP     EA_MOVEA
000016FC                           784  
000016FC  4E75                     785              RTS
000016FE                           786              
000016FE                           787  *---------------------------------------------------------------------------*
000016FE                           788  * OP0011: decode MOVE.W/MOVEA.W
000016FE                           789  *---------------------------------------------------------------------------*
000016FE                           790  OP0011      
000016FE  4280                     791              CLR.L   D0                      
00001700  4281                     792              CLR.L   D1  
00001702  4284                     793              CLR.L   D4                   
00001704  227C 00000000            794              MOVEA.L #0, A1               
0000170A  2205                     795              MOVE.L  D5,D1
0000170C  EA99                     796              ROR.L   #5,D1
0000170E  0281 0000000E            797              ANDI.L  #$E,D1
00001714  0C01 0002                798              CMPI.B  #2,D1
00001718  6700 0026                799              BEQ     OP_MOVEA_W
0000171C                           800              
0000171C  4EF9 00001722            801              JMP     OP_MOVE_W
00001722                           802            
00001722                           803  *---------------------------------------------------------------------------*
00001722                           804  * OP_MOVE_W: display MOVE_W and proceed to EA
00001722                           805  *---------------------------------------------------------------------------*
00001722                           806  OP_MOVE_W   
00001722  183C 0001                807              MOVE.B  #1,D4
00001726  227C 00000000            808              MOVEA.L #0, A1
0000172C  43F9 0000340E            809              LEA     DISP_MOVE_W,A1
00001732  103C 000E                810              MOVE.B  #14,D0
00001736  4E4F                     811              TRAP    #15
00001738  4EF9 0000209A            812              JMP     EA_GEN
0000173E                           813  
0000173E  4E75                     814              RTS
00001740                           815  
00001740                           816  *---------------------------------------------------------------------------*
00001740                           817  * OP_MOVEA_W: display MOVEA and proceed to EA
00001740                           818  *---------------------------------------------------------------------------*
00001740                           819  OP_MOVEA_W 
00001740  183C 0001                820              MOVE.B  #1,D4
00001744  227C 00000000            821              MOVEA.L #0, A1
0000174A  43F9 00003659            822              LEA     DISP_MOVEA_W,A1
00001750  103C 000E                823              MOVE.B  #14,D0
00001754  4E4F                     824              TRAP    #15
00001756  4EF9 00002074            825              JMP     EA_MOVEA
0000175C                           826  
0000175C  4E75                     827              RTS
0000175E                           828            
0000175E                           829  *---------------------------------------------------------------------------*
0000175E                           830  * OP0100: decode MOVEM/LEA/NEG/JSR/RTS/NOT
0000175E                           831  *---------------------------------------------------------------------------*
0000175E                           832  OP0100
0000175E  4280                     833              CLR.L   D0                      
00001760  4281                     834              CLR.L   D1  
00001762  4284                     835              CLR.L   D4                      
00001764  227C 00000000            836              MOVEA.L #0, A1                  
0000176A  2205                     837              MOVE.L  D5,D1  
0000176C                           838              
0000176C                           839              * check for RTS
0000176C  0C41 4E75                840              CMPI.W  #$4E75,D1   * 0100 1110 0111 0101
00001770  6700 0178                841              BEQ     OP_RTS
00001774                           842              
00001774                           843              * check for JSR     * 0100 1110 10 xxx (ea mode) xxx (ea reg)
00001774  4281                     844              CLR.L   D1 
00001776  2205                     845              MOVE.L  D5,D1  
00001778  0241 0F00                846              ANDI.W  #$0F00,D1
0000177C  0C41 0E00                847              CMPI.W  #$0E00,D1
00001780  6700 0154                848              BEQ     OP_JSR
00001784                           849  
00001784                           850              * check for NEG     * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
00001784  4281                     851              CLR.L   D1 
00001786  2205                     852              MOVE.L  D5,D1  
00001788  0241 0F00                853              ANDI.W  #$0F00,D1
0000178C  0C41 0400                854              CMPI.W  #$0400,D1
00001790  6700 0086                855              BEQ     OP_NEG
00001794                           856              
00001794                           857              * check for NOT     * 0100 0110 xx (size) xxx (ea mode) xxx (ea reg)
00001794  4281                     858              CLR.L   D1 
00001796  2205                     859              MOVE.L  D5,D1  
00001798  0241 0F00                860              ANDI.W  #$0F00,D1
0000179C  0C41 0600                861              CMPI.W  #$0600,D1
000017A0  6700 00DE                862              BEQ     OP_NOT
000017A4                           863              
000017A4                           864              * check for LEA     * 0100 xxx (reg) 111 xxx (ea mode) xxx (ea reg)
000017A4  4281                     865              CLR.L   D1 
000017A6  2205                     866              MOVE.L  D5,D1  
000017A8  E099                     867              ROR.L   #8,D1
000017AA  0C01 0001                868              CMPI.B  #1,D1
000017AE  6700 0054                869              BEQ     OP_LEA
000017B2                           870              
000017B2                           871              * check for MOVEM   * 0100 1 x 001 x (size) xxx (ea mode) xxx (ea reg)
000017B2  4281                     872              CLR.L   D1 
000017B4  2205                     873              MOVE.L  D5,D1  
000017B6  EB59                     874              ROL.W   #5,D1
000017B8  0C01 0001                875              CMPI.B  #1,D1
000017BC  6600 FD78                876              BNE     OP_DATA
000017C0  E959                     877              ROL.W   #4,D1
000017C2  0C01 0001                878              CMPI.B  #1,D1
000017C6  6600 FD6E                879              BNE     OP_DATA
000017CA  E359                     880              ROL.W   #1,D1
000017CC  0C01 0000                881              CMPI.B  #0,D1
000017D0  6700 000E                882              BEQ     OP_MOVEM_W
000017D4  0C01 0001                883              CMPI.B  #1,D1
000017D8  6700 0018                884              BEQ     OP_MOVEM_L
000017DC  4EF8 1536                885              JMP     OP_DATA
000017E0                           886  
000017E0                           887  *---------------------------------------------------------------------------*
000017E0                           888  * OP_MOVEM_W: display MOVEM_W
000017E0                           889  *---------------------------------------------------------------------------*    
000017E0                           890  OP_MOVEM_W  
000017E0  183C 0001                891              MOVE.B  #1,D4
000017E4  43F9 0000346D            892              LEA     DISP_MOVEM_W,A1
000017EA  103C 000E                893              MOVE.B  #14,D0
000017EE  4E4F                     894              TRAP    #15
000017F0  4E75                     895              RTS
000017F2                           896  
000017F2                           897  *---------------------------------------------------------------------------*
000017F2                           898  * OP_MOVEM_L: display MOVEM_L
000017F2                           899  *---------------------------------------------------------------------------*
000017F2                           900  OP_MOVEM_L  
000017F2  183C 0002                901              MOVE.B  #2,D4
000017F6  43F9 00003478            902              LEA     DISP_MOVEM_L,A1
000017FC  103C 000E                903              MOVE.B  #14,D0
00001800  4E4F                     904              TRAP    #15
00001802  4E75                     905              RTS
00001804                           906     
00001804                           907  *---------------------------------------------------------------------------*
00001804                           908  * OP_LEA: decode and display LEA
00001804                           909  *---------------------------------------------------------------------------*
00001804                           910  OP_LEA      
00001804  43F9 00003466            911              LEA     DISP_LEA,A1
0000180A  103C 000E                912              MOVE.B  #14,D0
0000180E  4E4F                     913              TRAP    #15
00001810  4EF9 00002074            914              JMP     EA_MOVEA
00001816                           915  
00001816  4E75                     916              RTS
00001818                           917  
00001818                           918  *---------------------------------------------------------------------------*
00001818                           919  * OP_NEG: decode and display NEG 
00001818                           920  *---------------------------------------------------------------------------*
00001818                           921  OP_NEG      * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
00001818  4281                     922              CLR.L   D1
0000181A  4284                     923              CLR.L   D4
0000181C  2205                     924              MOVE.L  D5,D1
0000181E  EC99                     925              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001820  0C01 0000                926              CMPI.B  #0,D1
00001824  6700 0012                927              BEQ     OP_NEG_B    * size is byte
00001828  0C01 0001                928              CMPI.B  #1,D1
0000182C  6700 0022                929              BEQ     OP_NEG_W    * size is word
00001830  0C01 0002                930              CMPI.B  #2,D1
00001834  6700 0032                931              BEQ     OP_NEG_L    * size is long
00001838                           932                         
00001838                           933  OP_NEG_B    * size is byte   
00001838  183C 0000                934              MOVE.B  #0,D4 
0000183C  43F9 00003430            935              LEA     DISP_NEG_B,A1
00001842  103C 000E                936              MOVE.B  #14,D0
00001846  4E4F                     937              TRAP    #15
00001848                           938              
00001848  4EB9 0000203A            939              JSR     EA_NOSRC
0000184E  4E75                     940              RTS
00001850                           941              
00001850                           942  OP_NEG_W    * size is word
00001850  183C 0001                943              MOVE.B  #1,D4
00001854  43F9 00003439            944              LEA     DISP_NEG_W,A1
0000185A  103C 000E                945              MOVE.B  #14,D0
0000185E  4E4F                     946              TRAP    #15
00001860  4EB9 0000203A            947              JSR     EA_NOSRC
00001866  4E75                     948              RTS
00001868                           949              
00001868                           950  OP_NEG_L    * size is long
00001868  183C 0002                951              MOVE.B  #2,D4
0000186C  43F9 00003442            952              LEA     DISP_NEG_L,A1
00001872  103C 000E                953              MOVE.B  #14,D0
00001876  4E4F                     954              TRAP    #15
00001878  4EB9 0000203A            955              JSR     EA_NOSRC
0000187E                           956              
0000187E  4E75                     957              RTS
00001880                           958  
00001880                           959  *---------------------------------------------------------------------------*
00001880                           960  * OP_NOT: decode and display NOT 
00001880                           961  *---------------------------------------------------------------------------*
00001880                           962  OP_NOT
00001880  4281                     963              CLR.L   D1
00001882  4284                     964              CLR.L   D4
00001884  2205                     965              MOVE.L  D5,D1
00001886  EC99                     966              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001888  0C01 0000                967              CMPI.B  #0,D1
0000188C  6700 0012                968              BEQ     OP_NOT_B    * size is byte
00001890  0C01 0001                969              CMPI.B  #1,D1
00001894  6700 001C                970              BEQ     OP_NOT_W    * size is word
00001898  0C01 0002                971              CMPI.B  #2,D1
0000189C  6700 0026                972              BEQ     OP_NOT_L    * size is long
000018A0                           973                         
000018A0                           974  OP_NOT_B    * size is byte   
000018A0  183C 0000                975              MOVE.B  #0,D4 
000018A4  43F9 0000344B            976              LEA     DISP_NOT_B,A1
000018AA  103C 000E                977              MOVE.B  #14,D0
000018AE  4E4F                     978              TRAP    #15
000018B0  4E75                     979              RTS
000018B2                           980              
000018B2                           981  OP_NOT_W    * size is word
000018B2  183C 0001                982              MOVE.B  #1,D4
000018B6  43F9 00003454            983              LEA     DISP_NOT_W,A1
000018BC  103C 000E                984              MOVE.B  #14,D0
000018C0  4E4F                     985              TRAP    #15
000018C2  4E75                     986              RTS
000018C4                           987              
000018C4                           988  OP_NOT_L    * size is long
000018C4  183C 0002                989              MOVE.B  #2,D4
000018C8  43F9 0000345D            990              LEA     DISP_NOT_L,A1
000018CE  103C 000E                991              MOVE.B  #14,D0
000018D2  4E4F                     992              TRAP    #15
000018D4  4E75                     993              RTS
000018D6                           994  
000018D6                           995  *---------------------------------------------------------------------------*
000018D6                           996  * OP_JSR: display JSR     
000018D6                           997  *---------------------------------------------------------------------------*
000018D6  43F9 00003429            998  OP_JSR      LEA     DISP_JSR,A1
000018DC  103C 000E                999              MOVE.B  #14,D0
000018E0  4E4F                    1000              TRAP    #15
000018E2  4EB9 0000203A           1001              JSR     EA_NOSRC
000018E8                          1002  
000018E8  4E75                    1003              RTS
000018EA                          1004  
000018EA                          1005  *---------------------------------------------------------------------------*
000018EA                          1006  * OP_RTS: display RTS     
000018EA                          1007  *---------------------------------------------------------------------------* 
000018EA  43F9 00003422           1008  OP_RTS      LEA     DISP_RTS,A1
000018F0  103C 000E               1009              MOVE.B  #14,D0
000018F4  4E4F                    1010              TRAP    #15
000018F6  4E75                    1011              RTS
000018F8                          1012  
000018F8                          1013  *---------------------------------------------------------------------------*
000018F8                          1014  * OP0101: decode ADDQ
000018F8                          1015  *---------------------------------------------------------------------------* 
000018F8  4280                    1016  OP0101      CLR.L   D0               * clear registers for temp storage       
000018FA  4281                    1017              CLR.L   D1
000018FC  4284                    1018              CLR.L   D4                  
000018FE  227C 00000000           1019              MOVEA.L #0, A1  
00001904                          1020              
00001904  2205                    1021              MOVE.L  D5,D1           * copy the processing data 
00001906  E089                    1022              LSR.L   #8,D1           * shift to right by 8 bits to check the value of bit 8
00001908  0201 0001               1023              ANDI.B  #$1,D1          * mask all bits except the last 2 bits
0000190C  0C01 0000               1024              CMPI.B  #0,D1           * if the value is 0, it's ADDQ
00001910  6700 0006               1025              BEQ     OP_ADDQ
00001914                          1026              
00001914  4EF8 1536               1027              JMP     OP_DATA
00001918                          1028       
00001918  4281                    1029  OP_ADDQ     CLR.L   D1
0000191A  2205                    1030              MOVE.L  D5,D1
0000191C  EC99                    1031              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
0000191E  0281 00000003           1032              ANDI.L  #$3,D1
00001924  0C01 0000               1033              CMPI.B  #0,D1
00001928  6700 0014               1034              BEQ     OP_ADDQ_B    * size is byte
0000192C  0C41 0001               1035              CMPI.W  #1,D1
00001930  6700 001E               1036              BEQ     OP_ADDQ_W    * size is word
00001934  0C81 00000002           1037              CMPI.L  #2,D1
0000193A  6700 0026               1038              BEQ     OP_ADDQ_L    * size is long
0000193E                          1039              
0000193E                          1040  *---------------------------------------------------------------------------*
0000193E                          1041  * OP_ADDQ: display ADDQ
0000193E                          1042  *---------------------------------------------------------------------------*              
0000193E                          1043  OP_ADDQ_B    * size is byte   
0000193E  183C 0000               1044              MOVE.B  #0,D4 
00001942  43F9 00003483           1045              LEA     DISP_ADDQ_B,A1
00001948  103C 000E               1046              MOVE.B  #14,D0
0000194C  4E4F                    1047              TRAP    #15
0000194E  4E75                    1048              RTS
00001950                          1049              
00001950                          1050  OP_ADDQ_W    * size is word
00001950  183C 0001               1051              MOVE.B  #1,D4
00001954  43F9 0000348D           1052              LEA     DISP_ADDQ_W,A1
0000195A  103C 000E               1053              MOVE.B  #14,D0
0000195E  4E4F                    1054              TRAP    #15
00001960  4E75                    1055              RTS
00001962                          1056              
00001962                          1057  OP_ADDQ_L    * size is long
00001962  183C 0002               1058              MOVE.B  #2,D4
00001966  43F9 00003497           1059              LEA     DISP_ADDQ_L,A1
0000196C  103C 000E               1060              MOVE.B  #14,D0
00001970  4E4F                    1061              TRAP    #15
00001972  4E75                    1062              RTS
00001974                          1063  
00001974                          1064  *---------------------------------------------------------------------------*
00001974                          1065  * OP0110: decode BRA/BEQ/BNE/BLT/BHI
00001974                          1066  *---------------------------------------------------------------------------*              
00001974  4280                    1067  OP0110      CLR.L   D0                  
00001976  4281                    1068              CLR.L   D1   
00001978  4284                    1069              CLR.L   D4                 
0000197A  227C 00000000           1070              MOVEA.L #0,A1
00001980  2205                    1071              MOVE.L  D5, D1                
00001982  0281 000000FF           1072              ANDI.L  #$00FF, D1              * Get 8-bit displacement 
00001988  2205                    1073              MOVE.L  D5,D1                  
0000198A  0281 00000F00           1074              ANDI.L  #$0F00,D1
00001990                          1075                 
00001990  0C41 0000               1076              CMPI.W  #$0000,D1               * Check for BRA
00001994  6700 0050               1077              BEQ     OP_BRA                  
00001998                          1078                          
00001998  0C41 0D00               1079              CMPI.W  #$0D00,D1               * Check for BLT
0000199C  6700 0056               1080              BEQ     OP_BLT      
000019A0                          1081  
000019A0  0C41 0700               1082              CMPI.W  #$0700,D1               * Check for BEQ
000019A4  6700 0032               1083              BEQ     OP_BEQ      
000019A8                          1084  
000019A8  0C41 0600               1085              CMPI.W  #$0600,D1               * Check for BNE
000019AC  6700 001C               1086              BEQ     OP_BNE  
000019B0                          1087              
000019B0  0C41 0200               1088              CMPI.W  #$0200,D1               * Check for BHI
000019B4  6700 0006               1089              BEQ     OP_BHI
000019B8                          1090  
000019B8  4EF8 1536               1091              JMP     OP_DATA
000019BC                          1092              
000019BC  43F9 00003652           1093  OP_BHI      LEA     DISP_BHI,A1             
000019C2  103C 000E               1094              MOVE.B  #14,D0
000019C6  4E4F                    1095              TRAP    #15
000019C8  4E75                    1096              RTS
000019CA                          1097  
000019CA  43F9 0000364B           1098  OP_BNE      LEA     DISP_BNE,A1             
000019D0  103C 000E               1099              MOVE.B  #14,D0
000019D4  4E4F                    1100              TRAP    #15
000019D6  4E75                    1101              RTS
000019D8                          1102  
000019D8  43F9 00003644           1103  OP_BEQ      LEA     DISP_BEQ,A1             
000019DE  103C 000E               1104              MOVE.B  #14,D0
000019E2  4E4F                    1105              TRAP    #15
000019E4  4E75                    1106              RTS          
000019E6                          1107                          
000019E6  43F9 00003636           1108  OP_BRA      LEA     DISP_BRA,A1             
000019EC  103C 000E               1109              MOVE.B  #14,D0
000019F0  4E4F                    1110              TRAP    #15
000019F2  4E75                    1111              RTS
000019F4                          1112              
000019F4  43F9 0000363D           1113  OP_BLT      LEA     DISP_BLT,A1          
000019FA  103C 000E               1114              MOVE.B  #14,D0
000019FE  4E4F                    1115              TRAP    #15
00001A00  4E75                    1116              RTS
00001A02                          1117     
00001A02                          1118  *---------------------------------------------------------------------------*
00001A02                          1119  * OP0111 : MOVEQ not required
00001A02                          1120  *---------------------------------------------------------------------------*           
00001A02  4EF8 1536               1121  OP0111      JMP     OP_DATA
00001A06                          1122             
00001A06                          1123  *---------------------------------------------------------------------------*
00001A06                          1124  * OP1000 : decode DIVS
00001A06                          1125  *---------------------------------------------------------------------------*           
00001A06                          1126  OP1000      
00001A06  4280                    1127              CLR.L   D0                
00001A08  4281                    1128              CLR.L   D1   
00001A0A  4284                    1129              CLR.L   D4                
00001A0C  207C 00000000           1130              MOVEA.L #0, A0               
00001A12  227C 00000000           1131              MOVEA.L #0, A1               
00001A18                          1132              
00001A18  2205                    1133              MOVE.L  D5,D1
00001A1A  EA89                    1134              LSR.L   #5,D1
00001A1C  0281 0000000E           1135              ANDI.L  #$E,D1
00001A22                          1136    
00001A22  0C01 000E               1137              CMPI.B  #$E,D1
00001A26  6700 0006               1138              BEQ     OP_DIVS
00001A2A                          1139              
00001A2A  4EF8 1536               1140              JMP     OP_DATA
00001A2E                          1141  
00001A2E                          1142  *---------------------------------------------------------------------------*
00001A2E                          1143  * OP_DIVS: display DIVS and proceed to EA
00001A2E                          1144  *---------------------------------------------------------------------------*  
00001A2E  43F9 000034A1           1145  OP_DIVS     LEA     DISP_DIVS,A1
00001A34  103C 000E               1146              MOVE.B  #14,D0
00001A38  4E4F                    1147              TRAP    #15
00001A3A  4EF9 0000204E           1148              JMP     EA_ARITH
00001A40                          1149  
00001A40  4E75                    1150              RTS
00001A42                          1151              
00001A42                          1152  *---------------------------------------------------------------------------*
00001A42                          1153  * OP1001: decode SUB/SUBA
00001A42                          1154  *---------------------------------------------------------------------------*      
00001A42  4280                    1155  OP1001      CLR.L   D0                
00001A44  4281                    1156              CLR.L   D1   
00001A46  4284                    1157              CLR.L   D4                 
00001A48  207C 00000000           1158              MOVEA.L #0, A0                 
00001A4E  227C 00000000           1159              MOVEA.L #0, A1               
00001A54                          1160              
00001A54  2205                    1161              MOVE.L  D5,D1
00001A56  EA89                    1162              LSR.L   #5,D1
00001A58  0281 0000000E           1163              ANDI.L  #$E,D1
00001A5E                          1164    
00001A5E  0C01 0000               1165              CMPI.B  #$0,D1
00001A62  6700 004A               1166              BEQ     OP_SUB_B
00001A66  0C01 0002               1167              CMPI.B  #$2,D1
00001A6A  6700 005A               1168              BEQ     OP_SUB_W
00001A6E  0C01 0004               1169              CMPI.B  #$4,D1
00001A72  6700 006A               1170              BEQ     OP_SUB_L
00001A76  0C01 0008               1171              CMPI.B  #$8,D1
00001A7A  6700 0032               1172              BEQ     OP_SUB_B
00001A7E  0C01 000A               1173              CMPI.B  #$A,D1
00001A82  6700 0042               1174              BEQ     OP_SUB_W
00001A86  0C01 000C               1175              CMPI.B  #$C,D1
00001A8A  6700 0052               1176              BEQ     OP_SUB_L
00001A8E                          1177              
00001A8E  4241                    1178              CLR     D1
00001A90  2205                    1179              MOVE.L  D5,D1
00001A92  EC89                    1180              LSR.L   #6,D1
00001A94  0281 0000000F           1181              ANDI.L  #$F,D1
00001A9A  0C01 0003               1182              CMPI.B  #3,D1
00001A9E  6700 0056               1183              BEQ     OP_SUBA_W
00001AA2  0C01 0007               1184              CMPI.B  #7,D1
00001AA6  6700 0060               1185              BEQ     OP_SUBA_L
00001AAA                          1186              
00001AAA  4EF8 1536               1187              JMP     OP_DATA
00001AAE                          1188    
00001AAE                          1189  *---------------------------------------------------------------------------*
00001AAE                          1190  * OP_SUB: display SUB and proceed to EA
00001AAE                          1191  *---------------------------------------------------------------------------*            
00001AAE  43F9 000034A9           1192  OP_SUB_B    LEA     DISP_SUB_B,A1
00001AB4  103C 000E               1193              MOVE.B  #14,D0
00001AB8  4E4F                    1194              TRAP    #15
00001ABA  183C 0000               1195              MOVE.B  #0,D4
00001ABE  4EF9 0000209A           1196              JMP     EA_GEN
00001AC4                          1197  
00001AC4  4E75                    1198              RTS
00001AC6                          1199  
00001AC6  43F9 000034B2           1200  OP_SUB_W    LEA     DISP_SUB_W,A1
00001ACC  103C 000E               1201              MOVE.B  #14,D0
00001AD0  4E4F                    1202              TRAP    #15
00001AD2  183C 0001               1203              MOVE.B  #1,D4
00001AD6  4EF9 0000209A           1204              JMP     EA_GEN
00001ADC                          1205  
00001ADC  4E75                    1206              RTS
00001ADE                          1207  
00001ADE  43F9 000034BB           1208  OP_SUB_L    LEA     DISP_SUB_L,A1
00001AE4  103C 000E               1209              MOVE.B  #14,D0
00001AE8  4E4F                    1210              TRAP    #15
00001AEA  183C 0002               1211              MOVE.B  #2,D4
00001AEE  4EF9 0000209A           1212              JMP     EA_GEN
00001AF4                          1213  
00001AF4  4E75                    1214              RTS
00001AF6                          1215  
00001AF6                          1216  *---------------------------------------------------------------------------*
00001AF6                          1217  * OP_SUBA: display SUBA
00001AF6                          1218  *---------------------------------------------------------------------------*  
00001AF6  43F9 000034E2           1219  OP_SUBA_W   LEA     DISP_SUBA_W,A1
00001AFC  103C 000E               1220              MOVE.B  #14,D0
00001B00  4E4F                    1221              TRAP    #15
00001B02  183C 0001               1222              MOVE.B  #1,D4
00001B06  4E75                    1223              RTS
00001B08                          1224  
00001B08  43F9 000034EC           1225  OP_SUBA_L   LEA     DISP_SUBA_L,A1
00001B0E  103C 000E               1226              MOVE.B  #14,D0
00001B12  4E4F                    1227              TRAP    #15
00001B14  183C 0002               1228              MOVE.B  #2,D4
00001B18  4E75                    1229              RTS         
00001B1A                          1230  *---------------------------------------------------------------------------*
00001B1A                          1231  * OP1010 : unassigned
00001B1A                          1232  *---------------------------------------------------------------------------*           
00001B1A  4EF8 1536               1233  OP1010      JMP     OP_DATA
00001B1E                          1234              
00001B1E                          1235  *---------------------------------------------------------------------------*
00001B1E                          1236  * OP1011 : decode CMP/EOR/CMPA
00001B1E                          1237  *---------------------------------------------------------------------------*           
00001B1E  4280                    1238  OP1011      CLR.L   D0                
00001B20  4281                    1239              CLR.L   D1            
00001B22  4284                    1240              CLR.L   D4                   
00001B24  227C 00000000           1241              MOVEA.L #0, A1               
00001B2A  2205                    1242              MOVE.L  D5,D1
00001B2C  EA99                    1243              ROR.L   #5,D1
00001B2E  0281 0000000E           1244              ANDI.L  #$E,D1
00001B34  0C01 0000               1245              CMPI.B  #$0,D1
00001B38  6700 0062               1246              BEQ     OP_CMP_B
00001B3C  0C01 0002               1247              CMPI.B  #$2,D1
00001B40  6700 0072               1248              BEQ     OP_CMP_W
00001B44  0C01 0004               1249              CMPI.B  #$4,D1
00001B48  6700 0082               1250              BEQ     OP_CMP_L
00001B4C  0C01 0008               1251              CMPI.B  #$8,D1
00001B50  6700 0092               1252              BEQ     OP_EOR_B
00001B54  0C01 000A               1253              CMPI.B  #$A,D1
00001B58  6700 009C               1254              BEQ     OP_EOR_W
00001B5C  0C01 000C               1255              CMPI.B  #$C,D1
00001B60  6700 00A6               1256              BEQ     OP_EOR_L  
00001B64  0C01 0006               1257              CMPI.B  #$6,D1
00001B68  6700 000E               1258              BEQ     OP_CMPA_W
00001B6C  0C01 000E               1259              CMPI.B  #$E,D1
00001B70  6700 0018               1260              BEQ     OP_CMPA_L 
00001B74                          1261  
00001B74  4EF8 1536               1262              JMP     OP_DATA          
00001B78                          1263  
00001B78                          1264  *---------------------------------------------------------------------------*
00001B78                          1265  * OP_CMPA: display CMPA 
00001B78                          1266  *---------------------------------------------------------------------------
00001B78  43F9 0000352C           1267  OP_CMPA_W   LEA     DISP_CMPA_W,A1
00001B7E  103C 000E               1268              MOVE.B  #14,D0
00001B82  4E4F                    1269              TRAP    #15
00001B84  183C 0001               1270              MOVE.B  #1,D4
00001B88  4E75                    1271              RTS
00001B8A                          1272  
00001B8A  43F9 00003536           1273  OP_CMPA_L   LEA     DISP_CMPA_L,A1
00001B90  103C 000E               1274              MOVE.B  #14,D0
00001B94  4E4F                    1275              TRAP    #15
00001B96  183C 0002               1276              MOVE.B  #2,D4
00001B9A  4E75                    1277              RTS
00001B9C                          1278  
00001B9C                          1279  *---------------------------------------------------------------------------*
00001B9C                          1280  * OP_CMP: display CMP and proceed to EA
00001B9C                          1281  *---------------------------------------------------------------------------*  
00001B9C  43F9 00003511           1282  OP_CMP_B    LEA     DISP_CMP_B,A1
00001BA2  103C 000E               1283              MOVE.B  #14,D0
00001BA6  4E4F                    1284              TRAP    #15
00001BA8  183C 0000               1285              MOVE.B  #0,D4
00001BAC  4EF9 0000209A           1286              JMP     EA_GEN
00001BB2                          1287  
00001BB2  4E75                    1288              RTS
00001BB4                          1289              
00001BB4  43F9 0000351A           1290  OP_CMP_W    LEA     DISP_CMP_W,A1
00001BBA  103C 000E               1291              MOVE.B  #14,D0
00001BBE  4E4F                    1292              TRAP    #15
00001BC0  183C 0001               1293              MOVE.B  #1,D4
00001BC4  4EF9 0000209A           1294              JMP     EA_GEN
00001BCA                          1295  
00001BCA  4E75                    1296              RTS
00001BCC                          1297              
00001BCC  43F9 00003523           1298  OP_CMP_L    LEA     DISP_CMP_L,A1
00001BD2  103C 000E               1299              MOVE.B  #14,D0
00001BD6  4E4F                    1300              TRAP    #15
00001BD8  183C 0002               1301              MOVE.B  #2,D4
00001BDC  4EF9 0000209A           1302              JMP     EA_GEN
00001BE2                          1303  
00001BE2  4E75                    1304              RTS
00001BE4                          1305              
00001BE4                          1306  *---------------------------------------------------------------------------*
00001BE4                          1307  * OP_EOR: display EOR
00001BE4                          1308  *---------------------------------------------------------------------------*  
00001BE4  43F9 000034F6           1309  OP_EOR_B    LEA     DISP_EOR_B,A1
00001BEA  103C 000E               1310              MOVE.B  #14,D0
00001BEE  4E4F                    1311              TRAP    #15
00001BF0  183C 0000               1312              MOVE.B  #0,D4
00001BF4  4E75                    1313              RTS
00001BF6                          1314              
00001BF6  43F9 000034FF           1315  OP_EOR_W    LEA     DISP_EOR_W,A1
00001BFC  103C 000E               1316              MOVE.B  #14,D0
00001C00  4E4F                    1317              TRAP    #15
00001C02  183C 0001               1318              MOVE.B  #1,D4
00001C06  4E75                    1319              RTS
00001C08                          1320              
00001C08  43F9 00003508           1321  OP_EOR_L    LEA     DISP_EOR_L,A1
00001C0E  103C 000E               1322              MOVE.B  #14,D0
00001C12  4E4F                    1323              TRAP    #15
00001C14  183C 0002               1324              MOVE.B  #2,D4
00001C18  4E75                    1325              RTS    
00001C1A                          1326  
00001C1A                          1327  *---------------------------------------------------------------------------*
00001C1A                          1328  * OP1100: Decode and display MULS/AND and proceed to EA
00001C1A                          1329  *---------------------------------------------------------------------------* 
00001C1A  4280                    1330  OP1100      CLR.L   D0                 
00001C1C  4281                    1331              CLR.L   D1    
00001C1E  4284                    1332              CLR.L   D4                
00001C20  227C 00000000           1333              MOVEA.L #0, A1             
00001C26                          1334              
00001C26  2205                    1335              MOVE.L  D5,D1
00001C28  EA89                    1336              LSR.L   #5,D1
00001C2A  0281 0000000E           1337              ANDI.L  #$E,D1
00001C30  0C41 000E               1338              CMPI.W  #$E,D1
00001C34  6700 0036               1339              BEQ     OP_MULS
00001C38  0C41 0000               1340              CMPI.W  #$0,D1
00001C3C  6700 0042               1341              BEQ     OP_AND_B
00001C40  0C41 0002               1342              CMPI.W  #$2,D1
00001C44  6700 004C               1343              BEQ     OP_AND_W
00001C48  0C41 0004               1344              CMPI.W  #$4,D1
00001C4C  6700 0056               1345              BEQ     OP_AND_L
00001C50  0C41 0008               1346              CMPI.W  #$8,D1
00001C54  6700 002A               1347              BEQ     OP_AND_B
00001C58  0C41 000A               1348              CMPI.W  #$A,D1
00001C5C  6700 0034               1349              BEQ     OP_AND_W
00001C60  0C41 000C               1350              CMPI.W  #$C,D1
00001C64  6700 003E               1351              BEQ     OP_AND_L
00001C68                          1352  
00001C68  4EF8 1536               1353              JMP     OP_DATA
00001C6C                          1354  
00001C6C  43F9 00003540           1355  OP_MULS     LEA     DISP_MULS_W,A1
00001C72  103C 000E               1356              MOVE.B  #14,D0
00001C76  4E4F                    1357              TRAP    #15
00001C78  4EF9 0000204E           1358              JMP     EA_ARITH
00001C7E  4E75                    1359              RTS
00001C80                          1360              
00001C80                          1361  OP_AND_B    
00001C80  43F9 0000354A           1362              LEA     DISP_AND_B,A1
00001C86  103C 000E               1363              MOVE.B  #14,D0
00001C8A  4E4F                    1364              TRAP    #15
00001C8C  183C 0000               1365              MOVE.B  #0,D4
00001C90  4E75                    1366              RTS
00001C92                          1367  
00001C92                          1368  OP_AND_W
00001C92  43F9 00003553           1369              LEA     DISP_AND_W,A1
00001C98  103C 000E               1370              MOVE.B  #14,D0
00001C9C  4E4F                    1371              TRAP    #15
00001C9E  183C 0001               1372              MOVE.B  #1,D4
00001CA2  4E75                    1373              RTS
00001CA4                          1374  
00001CA4                          1375  OP_AND_L
00001CA4  43F9 0000355C           1376              LEA     DISP_AND_L,A1
00001CAA  103C 000E               1377              MOVE.B  #14,D0
00001CAE  4E4F                    1378              TRAP    #15
00001CB0  183C 0002               1379              MOVE.B  #2,D4
00001CB4  4E75                    1380              RTS
00001CB6                          1381  
00001CB6                          1382  *---------------------------------------------------------------------------*
00001CB6                          1383  * OP1101: Decode ADD/ADDA
00001CB6                          1384  *---------------------------------------------------------------------------* 
00001CB6  4280                    1385  OP1101      CLR.L   D0                  
00001CB8  4281                    1386              CLR.L   D1       
00001CBA  4284                    1387              CLR.L   D4                   
00001CBC  227C 00000000           1388              MOVEA.L #0, A1              
00001CC2  2205                    1389              MOVE.L  D5,D1
00001CC4  EA99                    1390              ROR.L   #5,D1
00001CC6  0281 0000000E           1391              ANDI.L  #$E,D1
00001CCC  0C01 0000               1392              CMPI.B  #$0,D1
00001CD0  6700 003E               1393              BEQ     OP_ADD_B
00001CD4  0C01 0002               1394              CMPI.B  #$2,D1
00001CD8  6700 004E               1395              BEQ     OP_ADD_W
00001CDC  0C01 0004               1396              CMPI.B  #$4,D1
00001CE0  6700 005E               1397              BEQ     OP_ADD_L
00001CE4  0C01 0008               1398              CMPI.B  #$8,D1
00001CE8  6700 0026               1399              BEQ     OP_ADD_B
00001CEC  0C01 000A               1400              CMPI.B  #$A,D1
00001CF0  6700 0036               1401              BEQ     OP_ADD_W
00001CF4  0C01 000C               1402              CMPI.B  #$C,D1
00001CF8  6700 0046               1403              BEQ     OP_ADD_L  
00001CFC                          1404              
00001CFC  0C01 0006               1405              CMPI.B  #$6,D1
00001D00  6700 0056               1406              BEQ     OP_ADDA_W
00001D04  0C01 000E               1407              CMPI.B  #$E,D1
00001D08  6700 0066               1408              BEQ     OP_ADDA_L 
00001D0C                          1409  
00001D0C  4EF8 1536               1410              JMP     OP_DATA  
00001D10                          1411            
00001D10                          1412  *---------------------------------------------------------------------------*
00001D10                          1413  * OP_ADD: display ADD and proceed to EA
00001D10                          1414  *---------------------------------------------------------------------------*  
00001D10  43F9 00003565           1415  OP_ADD_B    LEA     DISP_ADD_B,A1
00001D16  103C 000E               1416              MOVE.B  #14,D0
00001D1A  4E4F                    1417              TRAP    #15
00001D1C  183C 0000               1418              MOVE.B  #0,D4
00001D20  4EF9 0000209A           1419              JMP     EA_GEN
00001D26                          1420  
00001D26  4E75                    1421              RTS
00001D28                          1422  
00001D28  43F9 0000356E           1423  OP_ADD_W    LEA     DISP_ADD_W,A1
00001D2E  103C 000E               1424              MOVE.B  #14,D0
00001D32  4E4F                    1425              TRAP    #15
00001D34  183C 0001               1426              MOVE.B  #1,D4
00001D38  4EF9 0000209A           1427              JMP     EA_GEN
00001D3E                          1428  
00001D3E  4E75                    1429              RTS
00001D40                          1430  
00001D40  43F9 00003577           1431  OP_ADD_L    LEA     DISP_ADD_L,A1
00001D46  103C 000E               1432              MOVE.B  #14,D0
00001D4A  4E4F                    1433              TRAP    #15
00001D4C  183C 0002               1434              MOVE.B  #2,D4
00001D50  4EF9 0000209A           1435              JMP     EA_GEN
00001D56                          1436  
00001D56  4E75                    1437              RTS
00001D58                          1438  
00001D58                          1439  *---------------------------------------------------------------------------*
00001D58                          1440  * OP_ADDA: display ADDA and proceed to EA
00001D58                          1441  *---------------------------------------------------------------------------*  
00001D58  43F9 00003580           1442  OP_ADDA_W   LEA     DISP_ADDA_W,A1
00001D5E  103C 000E               1443              MOVE.B  #14,D0
00001D62  4E4F                    1444              TRAP    #15
00001D64  183C 0001               1445              MOVE.B  #1,D4
00001D68  4EF9 0000209A           1446              JMP     EA_GEN
00001D6E                          1447  
00001D6E  4E75                    1448              RTS
00001D70                          1449  
00001D70  43F9 0000358A           1450  OP_ADDA_L   LEA     DISP_ADDA_L,A1
00001D76  103C 000E               1451              MOVE.B  #14,D0
00001D7A  4E4F                    1452              TRAP    #15
00001D7C  183C 0002               1453              MOVE.B  #2,D4
00001D80  4EF9 0000209A           1454              JMP     EA_GEN
00001D86                          1455  
00001D86  4E75                    1456              RTS
00001D88                          1457              
00001D88                          1458  *---------------------------------------------------------------------------*
00001D88                          1459  * OP1110: LSR/LSL/ASR/ASL/ROL/ROR
00001D88                          1460  *---------------------------------------------------------------------------* 
00001D88  4280                    1461  OP1110      CLR.L   D0                  
00001D8A  4281                    1462              CLR.L   D1   
00001D8C  4284                    1463              CLR.L   D4                   
00001D8E  227C 00000000           1464              MOVEA.L #0, A1                 
00001D94  2205                    1465              MOVE.L  D5,D1
00001D96                          1466              
00001D96                          1467              * check for LSX
00001D96  E699                    1468              ROR.L   #3,D1
00001D98  0281 00000001           1469              ANDI.L  #$1,D1
00001D9E  0C01 0001               1470              CMPI.B  #1,D1
00001DA2  6700 002E               1471              BEQ     OP_LSX
00001DA6                          1472              
00001DA6                          1473              * reset D1 and check for ASX
00001DA6  4281                    1474              CLR.L   D1
00001DA8  2205                    1475              MOVE.L  D5,D1
00001DAA  E699                    1476              ROR.L   #3,D1
00001DAC  0281 00000001           1477              ANDI.L  #$1,D1
00001DB2  0C01 0000               1478              CMPI.B  #0,D1
00001DB6  6700 0032               1479              BEQ     OP_ASX
00001DBA                          1480  
00001DBA                          1481              * reset D1 and check for ROX
00001DBA  4281                    1482              CLR.L   D1
00001DBC  2205                    1483              MOVE.L  D5,D1
00001DBE  E699                    1484              ROR.L   #3,D1
00001DC0  0281 00000001           1485              ANDI.L  #$1,D1
00001DC6  0C01 0003               1486              CMPI.B  #3,D1
00001DCA  6700 0036               1487              BEQ     OP_ROX
00001DCE                          1488              
00001DCE  4EF8 1536               1489              JMP     OP_DATA
00001DD2                          1490  
00001DD2                          1491  *---------------------------------------------------------------------------*
00001DD2                          1492  * OP_LSX: process LSR/LSL
00001DD2                          1493  *---------------------------------------------------------------------------*            
00001DD2  EA99                    1494  OP_LSX      ROR.L   #5,D1
00001DD4  0281 00000001           1495              ANDI.L  #$1,D1
00001DDA  0C01 0000               1496              CMPI.B  #0,D1
00001DDE  6700 003A               1497              BEQ     OP_LSR
00001DE2  0C01 0001               1498              CMPI.B  #1,D1
00001DE6  6700 008C               1499              BEQ     OP_LSL
00001DEA                          1500              
00001DEA                          1501  *---------------------------------------------------------------------------*
00001DEA                          1502  * OP_ASX: process ASR/ASL
00001DEA                          1503  *---------------------------------------------------------------------------*  
00001DEA  EA99                    1504  OP_ASX      ROR.L   #5,D1
00001DEC  0281 00000001           1505              ANDI.L  #$1,D1
00001DF2  0C01 0000               1506              CMPI.B  #0,D1
00001DF6  6700 00D6               1507              BEQ     OP_ASR
00001DFA  0C01 0001               1508              CMPI.B  #1,D1
00001DFE  6700 0128               1509              BEQ     OP_ASL
00001E02                          1510              
00001E02                          1511  *---------------------------------------------------------------------------*
00001E02                          1512  * OP_ROX: process ROR/ROL
00001E02                          1513  *---------------------------------------------------------------------------*  
00001E02  EA99                    1514  OP_ROX      ROR.L   #5,D1
00001E04  0281 00000001           1515              ANDI.L  #$1,D1
00001E0A  0C01 0000               1516              CMPI.B  #0,D1
00001E0E  6700 0172               1517              BEQ     OP_ROR
00001E12  0C01 0001               1518              CMPI.B  #1,D1
00001E16  6700 01C4               1519              BEQ     OP_ROL
00001E1A                          1520  
00001E1A                          1521  *---------------------------------------------------------------------------*
00001E1A                          1522  * OP_LSR: decode and display LSR
00001E1A                          1523  *---------------------------------------------------------------------------*        
00001E1A  E599                    1524  OP_LSR      ROL.L   #2,D1
00001E1C  0281 00000003           1525              ANDI.L  #$3,D1
00001E22  0C01 0000               1526              CMPI.B  #0,D1
00001E26  6700 0016               1527              BEQ     OP_LSR_B
00001E2A  0C01 0001               1528              CMPI.B  #$1,D1
00001E2E  6700 0032               1529              BEQ     OP_LSR_W
00001E32  0C01 0002               1530              CMPI.B  #$2,D1
00001E36  6700 0018               1531              BEQ     OP_LSR_L
00001E3A                          1532              
00001E3A  4EF8 1536               1533              JMP     OP_DATA
00001E3E                          1534  
00001E3E  43F9 00003594           1535  OP_LSR_B    LEA     DISP_LSR_B,A1
00001E44  103C 000E               1536              MOVE.B  #14,D0
00001E48  4E4F                    1537              TRAP    #15
00001E4A  183C 0000               1538              MOVE.B  #0,D4
00001E4E  4E75                    1539              RTS
00001E50                          1540  
00001E50  43F9 000035B8           1541  OP_LSR_L    LEA     DISP_LSR_L,A1
00001E56  103C 000E               1542              MOVE.B  #14,D0
00001E5A  4E4F                    1543              TRAP    #15
00001E5C  183C 0002               1544              MOVE.B  #2,D4
00001E60  4E75                    1545              RTS
00001E62                          1546  
00001E62  43F9 000035A6           1547  OP_LSR_W    LEA     DISP_LSR_W,A1
00001E68  103C 000E               1548              MOVE.B  #14,D0
00001E6C  4E4F                    1549              TRAP    #15
00001E6E  183C 0001               1550              MOVE.B  #1,D4
00001E72  4E75                    1551              RTS
00001E74                          1552   
00001E74                          1553  *---------------------------------------------------------------------------*
00001E74                          1554  * OP_LSL: decode and display LSL
00001E74                          1555  *---------------------------------------------------------------------------*             
00001E74  E599                    1556  OP_LSL      ROL.L   #2,D1
00001E76  0281 00000003           1557              ANDI.L  #$3,D1
00001E7C  0C01 0000               1558              CMPI.B  #0,D1
00001E80  6700 0016               1559              BEQ     OP_LSL_B
00001E84  0C01 0001               1560              CMPI.B  #$1,D1
00001E88  6700 0032               1561              BEQ     OP_LSL_W
00001E8C  0C01 0002               1562              CMPI.B  #$2,D1
00001E90  6700 0018               1563              BEQ     OP_LSL_L
00001E94                          1564              
00001E94  4EF8 1536               1565              JMP OP_DATA
00001E98                          1566  
00001E98  43F9 0000359D           1567  OP_LSL_B    LEA     DISP_LSL_B,A1
00001E9E  103C 000E               1568              MOVE.B  #14,D0
00001EA2  4E4F                    1569              TRAP    #15
00001EA4  183C 0000               1570              MOVE.B  #0,D4
00001EA8  4E75                    1571              RTS
00001EAA                          1572  
00001EAA  43F9 000035C1           1573  OP_LSL_L    LEA     DISP_LSL_L,A1
00001EB0  103C 000E               1574              MOVE.B  #14,D0
00001EB4  4E4F                    1575              TRAP    #15
00001EB6  183C 0002               1576              MOVE.B  #2,D4
00001EBA  4E75                    1577              RTS
00001EBC                          1578  
00001EBC  43F9 000035AF           1579  OP_LSL_W    LEA     DISP_LSL_W,A1
00001EC2  103C 000E               1580              MOVE.B  #14,D0
00001EC6  4E4F                    1581              TRAP    #15
00001EC8  183C 0001               1582              MOVE.B  #1,D4
00001ECC  4E75                    1583              RTS
00001ECE                          1584   
00001ECE                          1585  *---------------------------------------------------------------------------*
00001ECE                          1586  * OP_ASR: decode and display ASR
00001ECE                          1587  *---------------------------------------------------------------------------*             
00001ECE  E599                    1588  OP_ASR      ROL.L   #2,D1
00001ED0  0281 00000003           1589              ANDI.L  #$3,D1
00001ED6  0C01 0000               1590              CMPI.B  #0,D1
00001EDA  6700 0016               1591              BEQ     OP_ASR_B
00001EDE  0C01 0001               1592              CMPI.B  #$1,D1
00001EE2  6700 0032               1593              BEQ     OP_ASR_W
00001EE6  0C01 0002               1594              CMPI.B  #$2,D1
00001EEA  6700 0018               1595              BEQ     OP_ASR_L
00001EEE                          1596              
00001EEE  4EF8 1536               1597              JMP OP_DATA
00001EF2                          1598  
00001EF2  43F9 000035CA           1599  OP_ASR_B    LEA     DISP_ASR_B,A1
00001EF8  103C 000E               1600              MOVE.B  #14,D0
00001EFC  4E4F                    1601              TRAP    #15
00001EFE  183C 0000               1602              MOVE.B  #0,D4
00001F02  4E75                    1603              RTS
00001F04                          1604  
00001F04  43F9 000035EE           1605  OP_ASR_L    LEA     DISP_ASR_L,A1
00001F0A  103C 000E               1606              MOVE.B  #14,D0
00001F0E  4E4F                    1607              TRAP    #15
00001F10  183C 0002               1608              MOVE.B  #2,D4
00001F14  4E75                    1609              RTS
00001F16                          1610  
00001F16  43F9 000035DC           1611  OP_ASR_W    LEA     DISP_ASR_W,A1
00001F1C  103C 000E               1612              MOVE.B  #14,D0
00001F20  4E4F                    1613              TRAP    #15
00001F22  183C 0001               1614              MOVE.B  #1,D4
00001F26  4E75                    1615              RTS
00001F28                          1616       
00001F28                          1617  *---------------------------------------------------------------------------*
00001F28                          1618  * OP_ASL: decode and display ASL
00001F28                          1619  *---------------------------------------------------------------------------*         
00001F28  E599                    1620  OP_ASL      ROL.L   #2,D1
00001F2A  0281 00000003           1621              ANDI.L  #$3,D1
00001F30  0C01 0000               1622              CMPI.B  #0,D1
00001F34  6700 0016               1623              BEQ     OP_ASL_B
00001F38  0C01 0001               1624              CMPI.B  #$1,D1
00001F3C  6700 0032               1625              BEQ     OP_ASL_W
00001F40  0C01 0002               1626              CMPI.B  #$2,D1
00001F44  6700 0018               1627              BEQ     OP_ASL_L
00001F48                          1628              
00001F48  4EF8 1536               1629              JMP OP_DATA
00001F4C                          1630  
00001F4C  43F9 000035D3           1631  OP_ASL_B    LEA     DISP_ASL_B,A1
00001F52  103C 000E               1632              MOVE.B  #14,D0
00001F56  4E4F                    1633              TRAP    #15
00001F58  183C 0000               1634              MOVE.B  #0,D4
00001F5C  4E75                    1635              RTS
00001F5E                          1636  
00001F5E  43F9 000035F7           1637  OP_ASL_L    LEA     DISP_ASL_L,A1
00001F64  103C 000E               1638              MOVE.B  #14,D0
00001F68  4E4F                    1639              TRAP    #15
00001F6A  183C 0002               1640              MOVE.B  #2,D4
00001F6E  4E75                    1641              RTS
00001F70                          1642  
00001F70  43F9 000035E5           1643  OP_ASL_W    LEA     DISP_ASL_W,A1
00001F76  103C 000E               1644              MOVE.B  #14,D0
00001F7A  4E4F                    1645              TRAP    #15
00001F7C  183C 0001               1646              MOVE.B  #1,D4
00001F80  4E75                    1647              RTS
00001F82                          1648   
00001F82                          1649  *---------------------------------------------------------------------------*
00001F82                          1650  * OP_ROR: decode and display ROR
00001F82                          1651  *---------------------------------------------------------------------------*             
00001F82  E599                    1652  OP_ROR      ROL.L   #2,D1
00001F84  0281 00000003           1653              ANDI.L  #$3,D1
00001F8A  0C01 0000               1654              CMPI.B  #0,D1
00001F8E  6700 0016               1655              BEQ     OP_ROR_B
00001F92  0C01 0001               1656              CMPI.B  #$1,D1
00001F96  6700 0032               1657              BEQ     OP_ROR_W
00001F9A  0C01 0002               1658              CMPI.B  #$2,D1
00001F9E  6700 0018               1659              BEQ     OP_ROR_L
00001FA2                          1660              
00001FA2  4EF8 1536               1661              JMP OP_DATA
00001FA6                          1662  
00001FA6  43F9 00003600           1663  OP_ROR_B    LEA     DISP_ROR_B,A1
00001FAC  103C 000E               1664              MOVE.B  #14,D0
00001FB0  4E4F                    1665              TRAP    #15
00001FB2  183C 0000               1666              MOVE.B  #0,D4
00001FB6  4E75                    1667              RTS
00001FB8                          1668  
00001FB8  43F9 00003624           1669  OP_ROR_L    LEA     DISP_ROR_L,A1
00001FBE  103C 000E               1670              MOVE.B  #14,D0
00001FC2  4E4F                    1671              TRAP    #15
00001FC4  183C 0002               1672              MOVE.B  #2,D4
00001FC8  4E75                    1673              RTS
00001FCA                          1674  
00001FCA  43F9 00003612           1675  OP_ROR_W    LEA     DISP_ROR_W,A1
00001FD0  103C 000E               1676              MOVE.B  #14,D0
00001FD4  4E4F                    1677              TRAP    #15
00001FD6  183C 0001               1678              MOVE.B  #1,D4
00001FDA  4E75                    1679              RTS
00001FDC                          1680  
00001FDC                          1681  *---------------------------------------------------------------------------*
00001FDC                          1682  * OP_ROL: decode and display ROL
00001FDC                          1683  *---------------------------------------------------------------------------*             
00001FDC  E599                    1684  OP_ROL      ROL.L   #2,D1
00001FDE  0281 00000003           1685              ANDI.L  #$3,D1
00001FE4  0C01 0000               1686              CMPI.B  #0,D1
00001FE8  6700 0016               1687              BEQ     OP_ROL_B
00001FEC  0C01 0001               1688              CMPI.B  #$1,D1
00001FF0  6700 0032               1689              BEQ     OP_ROL_W
00001FF4  0C01 0002               1690              CMPI.B  #$2,D1
00001FF8  6700 0018               1691              BEQ     OP_ROL_L
00001FFC                          1692              
00001FFC  4EF8 1536               1693              JMP OP_DATA
00002000                          1694  
00002000                          1695  
00002000  43F9 00003609           1696  OP_ROL_B    LEA     DISP_ROL_B,A1
00002006  103C 000E               1697              MOVE.B  #14,D0
0000200A  4E4F                    1698              TRAP    #15
0000200C  183C 0000               1699              MOVE.B  #0,D4
00002010  4E75                    1700              RTS
00002012                          1701  
00002012  43F9 0000362D           1702  OP_ROL_L    LEA     DISP_ROL_L,A1
00002018  103C 000E               1703              MOVE.B  #14,D0
0000201C  4E4F                    1704              TRAP    #15
0000201E  183C 0002               1705              MOVE.B  #2,D4
00002022  4E75                    1706              RTS
00002024                          1707  
00002024  43F9 0000361B           1708  OP_ROL_W    LEA     DISP_ROL_W,A1
0000202A  103C 000E               1709              MOVE.B  #14,D0
0000202E  4E4F                    1710              TRAP    #15
00002030  183C 0001               1711              MOVE.B  #1,D4
00002034  4E75                    1712              RTS
00002036                          1713              
00002036                          1714  *---------------------------------------------------------------------------*
00002036                          1715  * OP1111 : Special reserved
00002036                          1716  *---------------------------------------------------------------------------*           
00002036  4EF8 1536               1717  OP1111      JMP     OP_DATA
0000203A                          1718  
0000203A                          1719  *---------------------------------------------------------------------------*
0000203A                          1720  * EA_NOSRC: decode and display effective addresses for NEG/JSR
0000203A                          1721  *---------------------------------------------------------------------------*
0000203A                          1722  EA_NOSRC    
0000203A  4EB9 000020F8           1723              JSR     SRC_MODE
00002040  43F9 000032FA           1724              LEA     ENDLINE_M,A1
00002046  103C 000E               1725              MOVE.B  #14,D0
0000204A  4E4F                    1726              TRAP    #15
0000204C  4E75                    1727              RTS
0000204E                          1728              
0000204E                          1729  *---------------------------------------------------------------------------*
0000204E                          1730  * EA_ARITH: decode and display effective addresses for DIVS/MULS
0000204E                          1731  *---------------------------------------------------------------------------*
0000204E                          1732  EA_ARITH
0000204E  4EB9 000020F8           1733              JSR     SRC_MODE
00002054  43F9 00003674           1734              LEA     DISP_D,A1
0000205A  103C 000E               1735              MOVE.B  #14,D0
0000205E  4E4F                    1736              TRAP    #15
00002060  4EB9 00002384           1737              JSR     DEST_REGISTER
00002066  43F9 000032FA           1738              LEA     ENDLINE_M,A1
0000206C  103C 000E               1739              MOVE.B  #14,D0
00002070  4E4F                    1740              TRAP    #15
00002072  4E75                    1741              RTS
00002074                          1742              
00002074                          1743  *---------------------------------------------------------------------------*
00002074                          1744  * EA_MOVEA: decode and display effective addresses for MOVEA/LEA
00002074                          1745  *---------------------------------------------------------------------------*
00002074                          1746  EA_MOVEA
00002074  4EB9 000020F8           1747              JSR     SRC_MODE
0000207A  43F9 00003685           1748              LEA     DISP_AOP,A1
00002080  103C 000E               1749              MOVE.B  #14,D0
00002084  4E4F                    1750              TRAP    #15
00002086  4EB9 00002384           1751              JSR     DEST_REGISTER
0000208C  43F9 00003683           1752              LEA     DISP_CP,A1
00002092  103C 000D               1753              MOVE.B  #13,D0
00002096  4E4F                    1754              TRAP    #15
00002098  4E75                    1755              RTS
0000209A                          1756              
0000209A                          1757  *---------------------------------------------------------------------------*
0000209A                          1758  * EA_GEN: decode and display effective addresses for MOVE
0000209A                          1759  *---------------------------------------------------------------------------*
0000209A                          1760  EA_GEN          
0000209A                          1761              * retrieve/display source mode/register
0000209A  4EB9 000020F8           1762              JSR     SRC_MODE
000020A0                          1763              
000020A0                          1764              * retrieve/display destination mode/register
000020A0  4EB9 000020B4           1765              JSR     DEST_MODE
000020A6                          1766              
000020A6  43F9 000032FA           1767              LEA     ENDLINE_M,A1
000020AC  103C 000E               1768              MOVE.B  #14,D0
000020B0  4E4F                    1769              TRAP    #15
000020B2                          1770              
000020B2  4E75                    1771              RTS
000020B4                          1772  
000020B4                          1773  *---------------------------------------------------------------------------*
000020B4                          1774  * DEST_MODE: decode and display destination mode (bit 8 - 6)
000020B4                          1775  *---------------------------------------------------------------------------*           
000020B4                          1776  DEST_MODE   
000020B4                          1777              * clear registers to store temp data
000020B4  4280                    1778              CLR.L   D0                      
000020B6  4281                    1779              CLR.L   D1                      
000020B8  207C 00000000           1780              MOVEA.L #0, A0                  
000020BE  227C 00000000           1781              MOVEA.L #0, A1                  
000020C4  2205                    1782              MOVE.L  D5,D1
000020C6  EC89                    1783              LSR.L   #6,D1
000020C8  0281 00000007           1784              ANDI.L  #$7,D1
000020CE  0C01 0000               1785              CMPI.B  #0,D1   * Dn
000020D2  6700 0082               1786              BEQ     D_MODE000
000020D6  0C01 0002               1787              CMPI.B  #2,D1   * (An)
000020DA  6700 00C2               1788              BEQ     D_MODE010
000020DE  0C01 0003               1789              CMPI.B  #3,D1   * (An)+
000020E2  6700 011A               1790              BEQ     D_MODE011
000020E6  0C01 0004               1791              CMPI.B  #4,D1   * -(An)
000020EA  6700 0132               1792              BEQ     D_MODE100
000020EE  0C01 0007               1793              CMPI.B  #7,D1  * abs
000020F2  6700 017C               1794              BEQ     D_MODE111 
000020F6  4E75                    1795              RTS
000020F8                          1796  
000020F8                          1797  *---------------------------------------------------------------------------*
000020F8                          1798  * SRC_MODE: decode and display source mode (bit 5 - 3)
000020F8                          1799  *---------------------------------------------------------------------------*  
000020F8                          1800  SRC_MODE    
000020F8                          1801              * clear registers to store temp data
000020F8  4280                    1802              CLR.L   D0                      
000020FA  4281                    1803              CLR.L   D1                      
000020FC  207C 00000000           1804              MOVEA.L #0, A0                  
00002102  227C 00000000           1805              MOVEA.L #0, A1                  
00002108  2205                    1806              MOVE.L  D5,D1
0000210A  E489                    1807              LSR.L   #2,D1
0000210C  0281 0000000E           1808              ANDI.L  #$E,D1
00002112                          1809              
00002112  0C01 0000               1810              CMPI.B  #0,D1   * Dn
00002116  6700 002A               1811              BEQ     MODE000
0000211A  0C01 0002               1812              CMPI.B  #2,D1   * An 
0000211E  6700 004A               1813              BEQ     MODE001
00002122  0C01 0004               1814              CMPI.B  #4,D1   * (An)
00002126  6700 0056               1815              BEQ     MODE010
0000212A  0C01 0006               1816              CMPI.B  #6,D1   * (An)+
0000212E  6700 008E               1817              BEQ     MODE011
00002132  0C01 0008               1818              CMPI.B  #8,D1   * -(An)
00002136  6700 00A6               1819              BEQ     MODE100
0000213A  0C01 000F               1820              CMPI.B  #15,D1  * abs/immediate
0000213E  6700 00FE               1821              BEQ     MODE111 
00002142                          1822        
00002142                          1823  *---------------------------------------------------------------------------*
00002142                          1824  * MODE000: decode and display source mode Dn
00002142                          1825  *---------------------------------------------------------------------------*           
00002142                          1826  MODE000     *Dn
00002142  43F9 00003674           1827              LEA     DISP_D,A1
00002148  103C 000E               1828              MOVE.B  #14,D0
0000214C  4E4F                    1829              TRAP    #15
0000214E  4EB9 000023E0           1830              JSR     SRC_REGISTER
00002154  4E75                    1831              RTS
00002156                          1832  
00002156                          1833  *---------------------------------------------------------------------------*
00002156                          1834  * D_MODE000: decode and display dest mode Dn
00002156                          1835  *---------------------------------------------------------------------------*
00002156                          1836  D_MODE000     *Dn
00002156  43F9 00003674           1837              LEA     DISP_D,A1
0000215C  103C 000E               1838              MOVE.B  #14,D0
00002160  4E4F                    1839              TRAP    #15
00002162  4EB9 00002384           1840              JSR     DEST_REGISTER
00002168  4E75                    1841              RTS
0000216A                          1842  
0000216A                          1843  *---------------------------------------------------------------------------*
0000216A                          1844  * MODE001: decode and display source mode An
0000216A                          1845  *---------------------------------------------------------------------------* 
0000216A                          1846  MODE001 *An
0000216A  43F9 00003679           1847              LEA     DISP_A,A1
00002170  103C 000E               1848              MOVE.B  #14,D0
00002174  4E4F                    1849              TRAP    #15
00002176  4EB9 000023E0           1850              JSR     SRC_REGISTER
0000217C                          1851          
0000217C  4E75                    1852              RTS
0000217E                          1853  
0000217E                          1854  *---------------------------------------------------------------------------*
0000217E                          1855  * MODE010: decode and display source mode (An)
0000217E                          1856  *---------------------------------------------------------------------------*    
0000217E                          1857  MODE010 *(An)
0000217E  43F9 00003685           1858              LEA     DISP_AOP,A1  *display (A
00002184  103C 000E               1859              MOVE.B  #14,D0
00002188  4E4F                    1860              TRAP    #15
0000218A                          1861  
0000218A  4EB9 000023E0           1862              JSR     SRC_REGISTER * display register
00002190                          1863  
00002190  43F9 00003683           1864              LEA     DISP_CP,A1   *display )
00002196  103C 000E               1865              MOVE.B  #14,D0
0000219A  4E4F                    1866              TRAP    #15
0000219C                          1867              
0000219C  4E75                    1868              RTS
0000219E                          1869  
0000219E                          1870  *---------------------------------------------------------------------------*
0000219E                          1871  * D_MODE010: decode and display dest mode (An)
0000219E                          1872  *---------------------------------------------------------------------------*
0000219E                          1873  D_MODE010 *(An)
0000219E  43F9 00003685           1874              LEA     DISP_AOP,A1  *display (A
000021A4  103C 000E               1875              MOVE.B  #14,D0
000021A8  4E4F                    1876              TRAP    #15
000021AA                          1877     
000021AA  4EB9 00002384           1878              JSR     DEST_REGISTER * display register
000021B0                          1879  
000021B0  43F9 00003683           1880              LEA     DISP_CP,A1   *display )
000021B6  103C 000E               1881              MOVE.B  #14,D0
000021BA  4E4F                    1882              TRAP    #15
000021BC                          1883              
000021BC  4E75                    1884              RTS
000021BE                          1885  
000021BE                          1886  *---------------------------------------------------------------------------*
000021BE                          1887  * MODE011: decode and display source mode (An)+
000021BE                          1888  *---------------------------------------------------------------------------*
000021BE                          1889  MODE011 *(An)+
000021BE  43F9 00003685           1890              LEA     DISP_AOP,A1      *display (A
000021C4  103C 000E               1891              MOVE.B  #14,D0
000021C8  4E4F                    1892              TRAP    #15
000021CA                          1893              
000021CA  4EB9 000023E0           1894              JSR     SRC_REGISTER    * display register
000021D0                          1895  
000021D0  43F9 00003692           1896              LEA     DISP_POST,A1    *display )+
000021D6  103C 000E               1897              MOVE.B  #14,D0
000021DA  4E4F                    1898              TRAP    #15
000021DC                          1899              
000021DC  4E75                    1900              RTS
000021DE                          1901              
000021DE                          1902  *---------------------------------------------------------------------------*
000021DE                          1903  * MODE100: decode and display source mode -(An)
000021DE                          1904  *---------------------------------------------------------------------------*
000021DE                          1905  MODE100 *-(An)
000021DE  43F9 0000368B           1906              LEA     DISP_PRE,A1    *display -(A
000021E4  103C 000E               1907              MOVE.B  #14,D0
000021E8  4E4F                    1908              TRAP    #15
000021EA                          1909  
000021EA  4EB9 000023E0           1910              JSR     SRC_REGISTER    *display register
000021F0                          1911  
000021F0  43F9 00003683           1912              LEA     DISP_CP,A1   *display )
000021F6  103C 000E               1913              MOVE.B  #14,D0
000021FA  4E4F                    1914              TRAP    #15
000021FC                          1915              
000021FC  4E75                    1916              RTS
000021FE                          1917  
000021FE                          1918  *---------------------------------------------------------------------------*
000021FE                          1919  * D_MODE011: decode and display dest mode (An)+
000021FE                          1920  *---------------------------------------------------------------------------*
000021FE                          1921  D_MODE011 *(An)+
000021FE  43F9 00003685           1922              LEA     DISP_AOP,A1      *display (A
00002204  103C 000E               1923              MOVE.B  #14,D0
00002208  4E4F                    1924              TRAP    #15
0000220A                          1925  
0000220A  4EB9 00002384           1926              JSR     DEST_REGISTER    * display register
00002210                          1927  
00002210  43F9 00003692           1928              LEA     DISP_POST,A1    *display )+
00002216  103C 000E               1929              MOVE.B  #14,D0
0000221A  4E4F                    1930              TRAP    #15
0000221C                          1931              
0000221C  4E75                    1932              RTS
0000221E                          1933              
0000221E                          1934  *---------------------------------------------------------------------------*
0000221E                          1935  * D_MODE100: decode and display dest mode -(An)
0000221E                          1936  *---------------------------------------------------------------------------*            
0000221E                          1937  D_MODE100 *-(An)
0000221E  43F9 0000368B           1938              LEA     DISP_PRE,A1    *display -(A
00002224  103C 000E               1939              MOVE.B  #14,D0
00002228  4E4F                    1940              TRAP    #15
0000222A                          1941              
0000222A  4EB9 00002384           1942              JSR     DEST_REGISTER    *display register
00002230                          1943  
00002230  43F9 00003683           1944              LEA     DISP_CP,A1   *display )
00002236  103C 000E               1945              MOVE.B  #14,D0
0000223A  4E4F                    1946              TRAP    #15
0000223C                          1947              
0000223C  4E75                    1948              RTS
0000223E                          1949  
0000223E                          1950  *---------------------------------------------------------------------------*
0000223E                          1951  * MODE111: decode and display source mode absolute/immediate
0000223E                          1952  *---------------------------------------------------------------------------*
0000223E                          1953  MODE111     * abs/immediate
0000223E                          1954              * clear registers to store temp data
0000223E  4280                    1955              CLR.L   D0                      
00002240  4281                    1956              CLR.L   D1                      
00002242  207C 00000000           1957              MOVEA.L #0, A0                  
00002248  227C 00000000           1958              MOVEA.L #0, A1                  
0000224E  2205                    1959              MOVE.L  D5,D1
00002250                          1960              
00002250                          1961              * retrieve source register for MODE 111
00002250  E389                    1962              LSL.L   #1,D1   * shift the bits to left by 1
00002252  0281 0000000E           1963              ANDI.L  #$E,D1  * mask the first 4 bits 
00002258  0C01 0000               1964              CMPI.B  #0, D1  * if it's 0000, absolute word address
0000225C  6700 003E               1965              BEQ     WORDMODE
00002260  0C01 0002               1966              CMPI.B  #2, D1  * if it's 0010, absolute long address
00002264  6700 0062               1967              BEQ     LONGMODE
00002268  0C01 0008               1968              CMPI.B  #8, D1  * if it's 1000, immediate data
0000226C  6700 0086               1969              BEQ     IMMEDIATE
00002270                          1970       
00002270                          1971  *---------------------------------------------------------------------------*
00002270                          1972  * D_MODE111: decode and display dest mode absolute/immediate
00002270                          1973  *---------------------------------------------------------------------------*           
00002270                          1974  D_MODE111   * abs
00002270                          1975              * clear registers to store temp data
00002270  4280                    1976              CLR.L   D0                      
00002272  4281                    1977              CLR.L   D1                      
00002274  207C 00000000           1978              MOVEA.L #0, A0                  
0000227A  227C 00000000           1979              MOVEA.L #0, A1                  
00002280  2205                    1980              MOVE.L  D5,D1
00002282                          1981              
00002282                          1982              * retrieve dest register for MODE 111
00002282  EC89                    1983              LSR.L   #6,D1   * shift the bits to right by 6
00002284  E689                    1984              LSR.L   #3,D1   * shift the bits to right by extra 3
00002286  0201 0001               1985              ANDI.B  #1,D1   * mask the first 2 bits 
0000228A  0C01 0000               1986              CMPI.B  #0, D1  * if it's 000, absolute word address
0000228E  6700 000C               1987              BEQ     WORDMODE
00002292  0C01 0001               1988              CMPI.B  #1, D1  * if it's 001, absolute long address
00002296  6700 0030               1989              BEQ     LONGMODE
0000229A                          1990              *JSR     OP_DATA *not sure..
0000229A  4E75                    1991              RTS
0000229C                          1992  
0000229C                          1993  
0000229C                          1994  *---------------------------------------------------------------------------*
0000229C                          1995  * WORDMODE: absolute word address
0000229C                          1996  *---------------------------------------------------------------------------*
0000229C  43F9 0000366F           1997  WORDMODE    LEA     DISP_HEX,A1
000022A2  103C 000E               1998              MOVE.B  #14,D0
000022A6  4E4F                    1999              TRAP    #15
000022A8                          2000              
000022A8  4285                    2001              CLR.L   D5
000022AA  3A1D                    2002              MOVE.W  (A5)+,D5
000022AC                          2003              
000022AC  43F9 0000334D           2004              LEA     TMPOUTPUT,A1
000022B2  2205                    2005              MOVE.L  D5,D1
000022B4  7404                    2006              MOVE.L  #4,D2       *move word size 4
000022B6  4EB8 1236               2007              JSR     HEX2ASCII
000022BA  43F9 0000334D           2008              LEA     TMPOUTPUT,A1
000022C0  103C 000E               2009              MOVE.B  #14,D0
000022C4  4E4F                    2010              TRAP    #15
000022C6                          2011              
000022C6  4E75                    2012              RTS
000022C8                          2013  
000022C8                          2014  *---------------------------------------------------------------------------*
000022C8                          2015  * LONGMODE: absolute long address
000022C8                          2016  *---------------------------------------------------------------------------*
000022C8  43F9 0000366F           2017  LONGMODE    LEA     DISP_HEX,A1
000022CE  103C 000E               2018              MOVE.B  #14,D0
000022D2  4E4F                    2019              TRAP    #15
000022D4                          2020              
000022D4  4285                    2021              CLR.L   D5
000022D6  2A1D                    2022              MOVE.L  (A5)+,D5
000022D8                          2023              
000022D8  43F9 0000334D           2024              LEA     TMPOUTPUT,A1
000022DE  2205                    2025              MOVE.L  D5,D1
000022E0  7408                    2026              MOVE.L  #8,D2           *move longword size 8
000022E2  4EB8 1236               2027              JSR     HEX2ASCII
000022E6  43F9 0000334D           2028              LEA     TMPOUTPUT,A1
000022EC  103C 000E               2029              MOVE.B  #14,D0
000022F0  4E4F                    2030              TRAP    #15
000022F2                          2031              
000022F2  4E75                    2032              RTS
000022F4                          2033  
000022F4                          2034  
000022F4                          2035  *---------------------------------------------------------------------------*
000022F4                          2036  * IMMEDIATE: immediate address
000022F4                          2037  *---------------------------------------------------------------------------*
000022F4  43F9 00003695           2038  IMMEDIATE   LEA     DISP_LB,A1
000022FA  103C 000E               2039              MOVE.B  #14,D0
000022FE  4E4F                    2040              TRAP    #15
00002300  43F9 0000366F           2041              LEA     DISP_HEX,A1
00002306  103C 000E               2042              MOVE.B  #14,D0
0000230A  4E4F                    2043              TRAP    #15
0000230C                          2044              
0000230C                          2045              * check for size
0000230C  0C04 0000               2046              CMPI.B  #0,D4
00002310  6700 0012               2047              BEQ     IMMD_B
00002314  0C04 0001               2048              CMPI.B  #1,D4
00002318  6700 002A               2049              BEQ     IMMD_W
0000231C  0C04 0002               2050              CMPI.B  #2,D4
00002320  6700 0042               2051              BEQ     IMMD_L
00002324                          2052  
00002324                          2053  IMMD_B
00002324  4285                    2054              CLR.L   D5
00002326  3A1D                    2055              MOVE.W  (A5)+,D5
00002328                          2056              
00002328  43F9 0000334D           2057              LEA     TMPOUTPUT,A1
0000232E  2205                    2058              MOVE.L  D5,D1
00002330  7402                    2059              MOVE.L  #2,D2
00002332  4EB8 1236               2060              JSR     HEX2ASCII
00002336  43F9 0000334D           2061              LEA     TMPOUTPUT,A1
0000233C  103C 000E               2062              MOVE.B  #14,D0
00002340  4E4F                    2063              TRAP    #15
00002342  4E75                    2064              RTS
00002344                          2065              
00002344                          2066  IMMD_W
00002344  4285                    2067              CLR.L   D5
00002346  3A1D                    2068              MOVE.W  (A5)+,D5
00002348                          2069              
00002348  43F9 0000334D           2070              LEA     TMPOUTPUT,A1
0000234E  2205                    2071              MOVE.L  D5,D1
00002350  7404                    2072              MOVE.L  #4,D2
00002352  4EB8 1236               2073              JSR     HEX2ASCII
00002356  43F9 0000334D           2074              LEA     TMPOUTPUT,A1
0000235C  103C 000E               2075              MOVE.B  #14,D0
00002360  4E4F                    2076              TRAP    #15
00002362  4E75                    2077              RTS
00002364                          2078              
00002364                          2079  
00002364                          2080  IMMD_L
00002364  4285                    2081              CLR.L   D5
00002366  3A1D                    2082              MOVE.W  (A5)+,D5
00002368                          2083              
00002368  43F9 0000334D           2084              LEA     TMPOUTPUT,A1
0000236E  2205                    2085              MOVE.L  D5,D1
00002370  7408                    2086              MOVE.L  #8,D2
00002372  4EB8 1236               2087              JSR     HEX2ASCII
00002376  43F9 0000334D           2088              LEA     TMPOUTPUT,A1
0000237C  103C 000E               2089              MOVE.B  #14,D0
00002380  4E4F                    2090              TRAP    #15
00002382  4E75                    2091              RTS
00002384                          2092  
00002384                          2093  
00002384                          2094  *---------------------------------------------------------------------------*
00002384                          2095  * DEST_REGISTER: decode and display destination register (bit 11 - 9)
00002384                          2096  *---------------------------------------------------------------------------*
00002384                          2097  DEST_REGISTER
00002384                          2098              * clear registers to store temp data
00002384  4280                    2099              CLR.L   D0                      
00002386  4281                    2100              CLR.L   D1                      
00002388  207C 00000000           2101              MOVEA.L #0, A0                  
0000238E  227C 00000000           2102              MOVEA.L #0, A1 
00002394                          2103              
00002394  2205                    2104              MOVE.L  D5,D1
00002396  EC89                    2105              LSR.L   #6,D1
00002398  E689                    2106              LSR.L   #3,D1
0000239A  0281 00000007           2107              ANDI.L  #7,D1
000023A0                          2108              
000023A0  0C01 0000               2109              CMPI.B  #0,D1
000023A4  6700 0092               2110              BEQ     REG_0
000023A8  0C01 0001               2111              CMPI.B  #1,D1
000023AC  6700 0098               2112              BEQ     REG_1
000023B0  0C01 0002               2113              CMPI.B  #2,D1
000023B4  6700 009E               2114              BEQ     REG_2
000023B8  0C01 0003               2115              CMPI.B  #3,D1
000023BC  6700 00A4               2116              BEQ     REG_3
000023C0  0C01 0004               2117              CMPI.B  #4,D1
000023C4  6700 00AA               2118              BEQ     REG_4
000023C8  0C01 0005               2119              CMPI.B  #5,D1
000023CC  6700 00B0               2120              BEQ     REG_5
000023D0  0C01 0006               2121              CMPI.B  #6,D1
000023D4  6700 00B6               2122              BEQ     REG_6
000023D8  0C01 0007               2123              CMPI.B  #7,D1
000023DC  6700 00BC               2124              BEQ     REG_7
000023E0                          2125  
000023E0                          2126  *---------------------------------------------------------------------------*
000023E0                          2127  * SRC_REGISTER: decode and display source register (bit 2 - 0)
000023E0                          2128  *---------------------------------------------------------------------------*           
000023E0                          2129  SRC_REGISTER 
000023E0                          2130              * clear registers to store temp data
000023E0  4280                    2131              CLR.L   D0                      
000023E2  4281                    2132              CLR.L   D1                      
000023E4  207C 00000000           2133              MOVEA.L #0, A0                  
000023EA  227C 00000000           2134              MOVEA.L #0, A1                  
000023F0                          2135              
000023F0  2205                    2136              MOVE.L  D5,D1   * temp store the processing data
000023F2  0281 00000007           2137              ANDI.L  #7,D1   * mask the first 4 bits with 0111
000023F8                          2138              
000023F8  0C01 0000               2139              CMPI.B  #0,D1
000023FC  6700 003A               2140              BEQ     REG_0
00002400  0C01 0001               2141              CMPI.B  #1,D1
00002404  6700 0040               2142              BEQ     REG_1
00002408  0C01 0002               2143              CMPI.B  #2,D1
0000240C  6700 0046               2144              BEQ     REG_2
00002410  0C01 0003               2145              CMPI.B  #3,D1
00002414  6700 004C               2146              BEQ     REG_3
00002418  0C01 0004               2147              CMPI.B  #4,D1
0000241C  6700 0052               2148              BEQ     REG_4
00002420  0C01 0005               2149              CMPI.B  #5,D1
00002424  6700 0058               2150              BEQ     REG_5
00002428  0C01 0006               2151              CMPI.B  #6,D1
0000242C  6700 005E               2152              BEQ     REG_6
00002430  0C01 0007               2153              CMPI.B  #7,D1
00002434  6700 0064               2154              BEQ     REG_7
00002438                          2155  
00002438                          2156  *---------------------------------------------------------------------------*
00002438                          2157  * REG_0 ~ REG_7: display register 0 to 7
00002438                          2158  *---------------------------------------------------------------------------*
00002438  43F9 0000369A           2159  REG_0       LEA     DISP_0,A1
0000243E  103C 000E               2160              MOVE.B  #14,D0
00002442  4E4F                    2161              TRAP    #15
00002444  4E75                    2162              RTS
00002446                          2163              
00002446  43F9 0000369C           2164  REG_1       LEA     DISP_1,A1
0000244C  103C 000E               2165              MOVE.B  #14,D0
00002450  4E4F                    2166              TRAP    #15
00002452  4E75                    2167              RTS
00002454                          2168              
00002454                          2169  
00002454  43F9 0000369E           2170  REG_2       LEA     DISP_2,A1
0000245A  103C 000E               2171              MOVE.B  #14,D0
0000245E  4E4F                    2172              TRAP    #15
00002460  4E75                    2173              RTS
00002462                          2174            
00002462  43F9 000036A0           2175  REG_3       LEA     DISP_3,A1
00002468  103C 000E               2176              MOVE.B  #14,D0
0000246C  4E4F                    2177              TRAP    #15
0000246E  4E75                    2178              RTS
00002470                          2179              
00002470  43F9 000036A2           2180  REG_4       LEA     DISP_4,A1
00002476  103C 000E               2181              MOVE.B  #14,D0
0000247A  4E4F                    2182              TRAP    #15
0000247C  4E75                    2183              RTS
0000247E                          2184              
0000247E  43F9 000036A4           2185  REG_5       LEA     DISP_5,A1
00002484  103C 000E               2186              MOVE.B  #14,D0
00002488  4E4F                    2187              TRAP    #15
0000248A  4E75                    2188              RTS
0000248C                          2189              
0000248C  43F9 000036A6           2190  REG_6       LEA     DISP_6,A1
00002492  103C 000E               2191              MOVE.B  #14,D0
00002496  4E4F                    2192              TRAP    #15
00002498  4E75                    2193              RTS
0000249A                          2194              
0000249A  43F9 000036A8           2195  REG_7       LEA     DISP_7,A1
000024A0  103C 000E               2196              MOVE.B  #14,D0
000024A4  4E4F                    2197              TRAP    #15
000024A6  4E75                    2198              RTS
000024A8                          2199              
000024A8                          2200  *---------------------------------------------------------------------------*
000024A8                          2201  * REPEAT : Ask user whether they wish to run the program again
000024A8                          2202  *---------------------------------------------------------------------------*           
000024A8  4246                    2203  REPEAT      CLR.W   D6                      * Reset D6 (Loop Count)
000024AA  43F9 00003173           2204              LEA     REPEATMSG,A1
000024B0  103C 000E               2205              MOVE.B  #14,D0
000024B4  4E4F                    2206              TRAP    #15
000024B6                          2207              
000024B6  43F9 000032FD           2208              LEA     TMPINPUT,A1             * allocate space to temp store user input
000024BC  103C 0002               2209              MOVE.B  #2,D0
000024C0  4E4F                    2210              TRAP    #15
000024C2                          2211  
000024C2  0C01 0001               2212              CMPI.B  #1,D1                   * check for length of user input
000024C6  66E0                    2213              BNE     REPEAT                  * return to the beginning of the function if unequal
000024C8                          2214              
000024C8  0C11 0059               2215              CMPI.B  #$59,(A1)               * compare the input with Y    
000024CC  6700 EB3C               2216              BEQ     PROGLP                  * repeat the program
000024D0                          2217              
000024D0  0C11 0079               2218              CMPI.B  #$79,(A1)               * compare the input with y    
000024D4  6700 EB34               2219              BEQ     PROGLP                  * repeat the program
000024D8                          2220              
000024D8  0C11 004E               2221              CMPI.B  #$4E,(A1)               * compare the input with N    
000024DC  6700 0928               2222              BEQ     TERMINATE               * finish program
000024E0                          2223              
000024E0  0C11 006E               2224              CMPI.B  #$6E,(A1)               * compare the input with n    
000024E4  6700 0920               2225              BEQ     TERMINATE               * finish program
000024E8                          2226              
000024E8  60BE                    2227              BRA     REPEAT                  * invalid input/repeat the function
000024EA                          2228  
000024EA                          2229  *---------------------------------------------------------------------------*
000024EA                          2230  * EA DECODING INTERFACE
000024EA                          2231  * [A0] - RESERVED FOR USE
000024EA                          2232  * [D2] - RESERVED FOR USE
000024EA                          2233  * RETURNS - ERROR FLAG IF FAILED TO PUSH SRC EA INTO STACK
000024EA                          2234  *---------------------------------------------------------------------------*
000024EA                          2235  GET_EA_EA_SRC
000024EA                          2236      *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
000024EA                          2237      
000024EA                          2238      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
000024EA  2405                    2239      MOVE.L  D5,D2                           * CLEAN COPY TO D2
000024EC  E68A                    2240      LSR.L   #3,D2                           * [D2] Temporarily used D2 for shifting bits            *TODO: DYNAMIC FOR ANY LOCATION OF SOURCE
000024EE  23C2 000036C0           2241      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
000024F4  7407                    2242      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
000024F6  C5B9 000036C0           2243      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
000024FC                          2244                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
000024FC                          2245      
000024FC                          2246      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
000024FC                          2247      *DESTINATION REGISTER FORMAT STANDARD         *
000024FC                          2248      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
000024FC                          2249      *WHEN BIT = 0(VALID ADDRESS MODE)             *
000024FC                          2250      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
000024FC                          2251      *0 - Dn                                       *
000024FC                          2252      *1 - An                                       *
000024FC                          2253      *2 - (An)                                     *
000024FC                          2254      *3 - (An)+                                    *
000024FC                          2255      *4 - -(An)                                    *
000024FC                          2256      *5 - (XXX).W                                  *
000024FC                          2257      *6 - (XXX).L                                  *
000024FC                          2258      *7 - #<data>                                  *
000024FC                          2259      ***********************************************
000024FC                          2260      
000024FC                          2261      *** Check if source ...  <ea> = Dn
000024FC                          2262  CHECK0    
000024FC  41F9 000036B0           2263            LEA     TEMP_REGISTER_FORMAT,A0
00002502  1439 000036AF           2264            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002508  1082                    2265            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000250A  0239 0001 000036B0      2266            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
00002512  0C39 0001 000036B0      2267            CMPI.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
0000251A  6700 006A               2268            BEQ     CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
0000251E  0CB9 00000000 000036C0  2269            CMPI.L     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn) - COMPARE MODES TO SEE IF IT IS THIS MODE
00002528  6600 005C               2270            BNE     CHECK1
0000252C                          2271            
0000252C                          2272            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
0000252C  163C 0020               2273            MOVE.B    #' ',D3
00002530  6100 0856               2274            BSR       PUSH_STACK
00002534  163C 0044               2275            MOVE.B    #'D',D3
00002538  6100 084E               2276            BSR       PUSH_STACK
0000253C                          2277  
0000253C                          2278            *FIND REGISTER NUMBER END LOCATION*  
0000253C  13F9 000036B2 000036B8  2279            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002546  0239 000F 000036B8      2280            AND.B   #$0F,VAR_BYTE_END
0000254E                          2281            
0000254E                          2282            *GET INDEX OF THE END OF SRC REGISTER NUMBER
0000254E  23C5 000036BC           2283            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002554  1439 000036B8           2284            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
0000255A                          2285            
0000255A                          2286            *INTITIALIZE FOR BIT SHIFTING
0000255A  41F9 000036BC           2287            LEA     VAR_TEMP_CLEANCOPY,A0
00002560  2639 000036BC           2288            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002566                          2289  LOOP_SHIFTING
00002566  0C02 0000               2290            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000256A  6700 0008               2291            BEQ     MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
0000256E  E24B                    2292            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002570  5302                    2293            SUB.B   #1,D2                     *DECREMENT COUNTER
00002572  60F2                    2294            BRA     LOOP_SHIFTING             *CONTINUE SHIFTING
00002574                          2295  MASKING_NEXT
00002574  C6BC 00000007           2296            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
0000257A  0603 0030               2297            ADD.B   #$30,D3                   *CONVERT TO CHAR
0000257E  6100 0808               2298            BSR     PUSH_STACK                *PUSH TO STACK
00002582                          2299            
00002582  6000 0394               2300            BRA     GET_SRC_SUCCESS           *RETURN          
00002586                          2301            
00002586                          2302            
00002586                          2303            *** Check if source ...  <ea> = An
00002586  41F9 000036B0           2304  CHECK1    LEA     TEMP_REGISTER_FORMAT,A0
0000258C  1439 000036AF           2305            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002592  1082                    2306            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002594  0239 0002 000036B0      2307            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
0000259C  0C39 0002 000036B0      2308            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
000025A4  6700 006A               2309            BEQ     CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
000025A8  0CB9 00000001 000036C0  2310            CMPI.L  #1,VAR_LONG_ADDRESS_MODE_CHECK                      * An - COMPARE MODES TO SEE IF IT IS THIS MODE
000025B2  6600 005C               2311            BNE     CHECK2
000025B6                          2312            
000025B6                          2313            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000025B6  163C 0020               2314            MOVE.B    #' ',D3
000025BA  6100 07CC               2315            BSR       PUSH_STACK
000025BE  163C 0041               2316            MOVE.B    #'A',D3
000025C2  6100 07C4               2317            BSR       PUSH_STACK
000025C6                          2318  
000025C6                          2319            
000025C6                          2320            *FIND REGISTER NUMBER END LOCATION*  
000025C6  13F9 000036B2 000036B8  2321            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
000025D0  0239 000F 000036B8      2322            AND.B   #$0F,VAR_BYTE_END
000025D8                          2323            
000025D8                          2324            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000025D8  23C5 000036BC           2325            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000025DE  1439 000036B8           2326            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
000025E4                          2327            
000025E4                          2328            *INTITIALIZE FOR BIT SHIFTING
000025E4  41F9 000036BC           2329            LEA     VAR_TEMP_CLEANCOPY,A0
000025EA  2639 000036BC           2330            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000025F0                          2331  LOOP_SHIFTING1
000025F0  0C02 0000               2332            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000025F4  6700 0008               2333            BEQ     MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
000025F8  E24B                    2334            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000025FA  5302                    2335            SUB.B   #1,D2                     *DECREMENT COUNTER
000025FC  60F2                    2336            BRA     LOOP_SHIFTING1             *CONTINUE SHIFTING
000025FE                          2337  MASKING_NEXT1
000025FE  C6BC 00000007           2338            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002604  0603 0030               2339            ADD.B   #$30,D3                   *CONVERT TO CHAR
00002608  6100 077E               2340            BSR     PUSH_STACK                *PUSH TO STACK
0000260C                          2341            
0000260C  6000 030A               2342            BRA     GET_SRC_SUCCESS                   *RETURN 
00002610                          2343            
00002610                          2344            
00002610                          2345            
00002610                          2346            
00002610                          2347            *** Check if source ...  <ea> = (An)       
00002610  41F9 000036B0           2348  CHECK2    LEA     TEMP_REGISTER_FORMAT,A0
00002616  1439 000036AF           2349            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000261C  1082                    2350            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000261E  0239 0004 000036B0      2351            ANDI.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
00002626  0C39 0004 000036B0      2352            CMPI.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
0000262E  6700 007A               2353            BEQ     CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002632  0CB9 00000002 000036C0  2354            CMPI.L   #2,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)  COMPARE MODES TO SEE IF IT IS THIS MODE                                                                *change: checkx++*
0000263C  6600 006C               2355            BNE     CHECK3
00002640                          2356            
00002640                          2357            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002640  163C 0020               2358            MOVE.B    #' ',D3
00002644  6100 0742               2359            BSR       PUSH_STACK
00002648  163C 0028               2360            MOVE.B    #'(',D3
0000264C  6100 073A               2361            BSR       PUSH_STACK
00002650  163C 0041               2362            MOVE.B    #'A',D3
00002654  6100 0732               2363            BSR       PUSH_STACK
00002658                          2364  
00002658                          2365            
00002658                          2366            *FIND REGISTER NUMBER END LOCATION*  
00002658  13F9 000036B2 000036B8  2367            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002662  0239 000F 000036B8      2368            AND.B   #$0F,VAR_BYTE_END
0000266A                          2369            
0000266A                          2370            *GET INDEX OF THE END OF SRC REGISTER NUMBER
0000266A  23C5 000036BC           2371            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002670  1439 000036B8           2372            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002676                          2373            
00002676                          2374            *INTITIALIZE FOR BIT SHIFTING
00002676  41F9 000036BC           2375            LEA     VAR_TEMP_CLEANCOPY,A0
0000267C  2639 000036BC           2376            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002682                          2377  LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
00002682  0C02 0000               2378            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002686  6700 0008               2379            BEQ     MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
0000268A  E24B                    2380            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
0000268C  5302                    2381            SUB.B   #1,D2                     *DECREMENT COUNTER
0000268E  60F2                    2382            BRA     LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
00002690                          2383  MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
00002690  0283 00000007           2384            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002696  0603 0030               2385            ADDI.B   #$30,D3                   *CONVERT TO CHAR
0000269A  6100 06EC               2386            BSR     PUSH_STACK                *PUSH TO STACK
0000269E                          2387            
0000269E  163C 0029               2388            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
000026A2  6100 06E4               2389            BSR       PUSH_STACK
000026A6                          2390            
000026A6  6000 0270               2391            BRA     GET_SRC_SUCCESS                   *RETURN 
000026AA                          2392  
000026AA                          2393            
000026AA                          2394            
000026AA                          2395                      
000026AA                          2396  *** Check if source ...  <ea> = (An)+       
000026AA  41F9 000036B0           2397  CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
000026B0  1439 000036AF           2398            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000026B6  1082                    2399            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000026B8  0239 0008 000036B0      2400            ANDI.B  #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
000026C0  0C39 0008 000036B0      2401            CMPI.B  #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
000026C8  6700 0082               2402            BEQ     CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
000026CC  0CB9 00000003 000036C0  2403            CMPI.L  #3,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)+ - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
000026D6  6600 0074               2404            BNE     CHECK4
000026DA                          2405            
000026DA                          2406            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
000026DA  163C 0020               2407            MOVE.B    #' ',D3
000026DE  6100 06A8               2408            BSR       PUSH_STACK
000026E2  163C 0028               2409            MOVE.B    #'(',D3
000026E6  6100 06A0               2410            BSR       PUSH_STACK
000026EA  163C 0041               2411            MOVE.B    #'A',D3
000026EE  6100 0698               2412            BSR       PUSH_STACK
000026F2                          2413  
000026F2                          2414            
000026F2                          2415            *FIND REGISTER NUMBER END LOCATION*  
000026F2  13F9 000036B2 000036B8  2416            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
000026FC  0239 000F 000036B8      2417            ANDI.B   #$0F,VAR_BYTE_END
00002704                          2418            
00002704                          2419            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002704  23C5 000036BC           2420            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
0000270A  1439 000036B8           2421            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002710                          2422            
00002710                          2423            *INTITIALIZE FOR BIT SHIFTING
00002710  41F9 000036BC           2424            LEA     VAR_TEMP_CLEANCOPY,A0
00002716  2639 000036BC           2425            MOVE.L  VAR_TEMP_CLEANCOPY,D3
0000271C                          2426            
0000271C                          2427  LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
0000271C  0C02 0000               2428            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002720  6700 0008               2429            BEQ     MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002724  E24B                    2430            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002726  5302                    2431            SUBI.B   #1,D2                     *DECREMENT COUNTER
00002728  60F2                    2432            BRA     LOOP_SHIFTING3            *CONTINUE SHIFTING 
0000272A                          2433                                               *change: NAME OF LABEL*
0000272A                          2434  MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
0000272A  0283 00000007           2435            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002730  0603 0030               2436            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002734  6100 0652               2437            BSR     PUSH_STACK                *PUSH TO STACK
00002738                          2438            
00002738  163C 0029               2439            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
0000273C  6100 064A               2440            BSR       PUSH_STACK
00002740  163C 002B               2441            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002744  6100 0642               2442            BSR       PUSH_STACK
00002748                          2443            
00002748  6000 01CE               2444            BRA       GET_SRC_SUCCESS                   *RETURN 
0000274C                          2445  
0000274C                          2446            
0000274C                          2447            
0000274C                          2448                      
0000274C                          2449            *** Check if source ...  <ea> = -(An)       
0000274C  41F9 000036B0           2450  CHECK4    LEA     TEMP_REGISTER_FORMAT,A0
00002752  1439 000036AF           2451            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002758  1082                    2452            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000275A  0239 0010 000036B0      2453            ANDI.B  #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
00002762  0C39 0010 000036B0      2454            CMPI.B  #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
0000276A  6700 0082               2455            BEQ     CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
0000276E  0CB9 00000004 000036C0  2456            CMPI.L  #4,VAR_LONG_ADDRESS_MODE_CHECK                      * -(An) - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00002778  6600 0074               2457            BNE     CHECK7
0000277C                          2458            
0000277C                          2459            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
0000277C  163C 0020               2460            MOVE.B    #' ',D3
00002780  6100 0606               2461            BSR       PUSH_STACK
00002784  163C 002D               2462            MOVE.B    #'-',D3
00002788  6100 05FE               2463            BSR       PUSH_STACK
0000278C  163C 0028               2464            MOVE.B    #'(',D3
00002790  6100 05F6               2465            BSR       PUSH_STACK
00002794  163C 0041               2466            MOVE.B    #'A',D3
00002798  6100 05EE               2467            BSR       PUSH_STACK
0000279C                          2468  
0000279C                          2469            
0000279C                          2470            *FIND REGISTER NUMBER END LOCATION*  
0000279C  13F9 000036B2 000036B8  2471            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
000027A6  0239 000F 000036B8      2472            AND.B   #$0F,VAR_BYTE_END
000027AE                          2473            
000027AE                          2474            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000027AE  23C5 000036BC           2475            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000027B4  1439 000036B8           2476            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000027BA                          2477            
000027BA                          2478            *INTITIALIZE FOR BIT SHIFTING
000027BA  41F9 000036BC           2479            LEA     VAR_TEMP_CLEANCOPY,A0
000027C0  2639 000036BC           2480            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000027C6                          2481            
000027C6                          2482  LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
000027C6  0C02 0000               2483            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000027CA  6700 0008               2484            BEQ     MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
000027CE  E24B                    2485            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000027D0  5302                    2486            SUBI.B   #1,D2                     *DECREMENT COUNTER
000027D2  60F2                    2487            BRA     LOOP_SHIFTING4            *CONTINUE SHIFTING 
000027D4                          2488                                               *change: NAME OF LABEL*
000027D4                          2489  MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
000027D4  0283 00000007           2490            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000027DA  0603 0030               2491            ADDI.B   #$30,D3                   *CONVERT TO CHAR
000027DE  6100 05A8               2492            BSR     PUSH_STACK                *PUSH TO STACK
000027E2                          2493            
000027E2  163C 0029               2494            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
000027E6  6100 05A0               2495            BSR       PUSH_STACK
000027EA                          2496            
000027EA  6000 012C               2497            BRA     GET_SRC_SUCCESS                   *RETURN
000027EE                          2498            
000027EE                          2499                      
000027EE                          2500            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
000027EE  0CB9 00000007 000036C0  2501  CHECK7    CMPI.L  #7,VAR_LONG_ADDRESS_MODE_CHECK                      *IF (MODE != 111)
000027F8  6600 011A               2502            BNE     GET_SRC_FAILED                                      *THAN BRANCH TO UNCESSFULL SRC MODE READ
000027FC                          2503                   
000027FC                          2504            *NEXT: (MODE == 111) 
000027FC                          2505            *NOW: CHECK FOR SRC REGISTER 
000027FC                          2506                  *(000 = (xxx).W)
000027FC                          2507                  *(001 = (xxx).L)
000027FC                          2508                  *(010 = #<data>)
000027FC                          2509                  
000027FC                          2510            *FIND REGISTER NUMBER END LOCATION*  
000027FC  13F9 000036B2 000036B8  2511            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002806  0239 000F 000036B8      2512            AND.B   #$0F,VAR_BYTE_END
0000280E                          2513            
0000280E                          2514            *GET INDEX OF THE END OF SRC REGISTER NUMBER
0000280E  23C5 000036BC           2515            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002814  1439 000036B8           2516            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
0000281A                          2517            
0000281A                          2518            *INTITIALIZE FOR BIT SHIFTING
0000281A  41F9 000036BC           2519            LEA     VAR_TEMP_CLEANCOPY,A0
00002820  2C39 000036BC           2520            MOVE.L  VAR_TEMP_CLEANCOPY,D6
00002826                          2521  SRC_LOOP_SHIFTING
00002826  0C02 0000               2522            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000282A  6700 0008               2523            BEQ     SRC_MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
0000282E  E24E                    2524            LSR     #1,D6                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002830  5302                    2525            SUB.B   #1,D2                     *DECREMENT COUNTER
00002832  60F2                    2526            BRA     SRC_LOOP_SHIFTING             *CONTINUE SHIFTING
00002834                          2527  SRC_MASKING_NEXT
00002834  CCBC 00000007           2528            AND.L   #7,D6                     *MASK, ONLY NEED 0-2 BIT INDEXES 
0000283A                          2529           *D3 - REGISTER NUMBER NEEDED TO CHECK WHICH W/L/#<DATA>*
0000283A                          2530           
0000283A                          2531  CHECK_WORD  
0000283A  41F9 000036B0           2532            LEA     TEMP_REGISTER_FORMAT,A0
00002840  1439 000036AF           2533            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002846  1082                    2534            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002848  0239 0020 000036B0      2535            ANDI.B  #$20,TEMP_REGISTER_FORMAT                           * MASKS 0010 0000                                                     *change <SRC>*
00002850  0C39 0020 000036B0      2536            CMPI.B  #$20,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0010 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002858  6700 0026               2537            BEQ     CHECK_LONG                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
0000285C  0C06 0000               2538            CMPI.B  #0,D6                          
00002860  6600 001E               2539            BNE     CHECK_LONG 
00002864                          2540            
00002864                          2541            *IT IS A WORD AT THIS POINT*
00002864                          2542            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002864  163C 0020               2543            MOVE.B    #' ',D3
00002868  6100 051E               2544            BSR       PUSH_STACK
0000286C  163C 0024               2545            MOVE.B    #'$',D3
00002870  6100 0516               2546            BSR       PUSH_STACK
00002874  321D                    2547            MOVE.W    (A5)+,D1
00002876  7404                    2548            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00002878  6100 E9FE               2549            BSR       HEX2ASCII2STACK
0000287C  6000 009A               2550            BRA     GET_SRC_SUCCESS
00002880                          2551  
00002880                          2552  CHECK_LONG
00002880  41F9 000036B0           2553            LEA     TEMP_REGISTER_FORMAT,A0
00002886  1439 000036AF           2554            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000288C  1082                    2555            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000288E  0239 0040 000036B0      2556            ANDI.B  #$40,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00002896  0C39 0040 000036B0      2557            CMPI.B  #$40,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
0000289E  6700 002E               2558            BEQ     CHECK_IMMEDIATE                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
000028A2  0C06 0001               2559            CMPI.B  #1,D6                          
000028A6  6600 0026               2560            BNE     CHECK_IMMEDIATE  
000028AA                          2561  
000028AA                          2562            *IT IS A WORD AT THIS POINT*
000028AA                          2563            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000028AA  163C 0020               2564            MOVE.B    #' ',D3
000028AE  6100 04D8               2565            BSR       PUSH_STACK
000028B2  163C 0024               2566            MOVE.B    #'$',D3
000028B6  6100 04D0               2567            BSR       PUSH_STACK
000028BA  321D                    2568            MOVE.W    (A5)+,D1
000028BC  7404                    2569            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
000028BE  6100 E9B8               2570            BSR       HEX2ASCII2STACK
000028C2  321D                    2571            MOVE.W    (A5)+,D1
000028C4  7404                    2572            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
000028C6  6100 E9B0               2573            BSR       HEX2ASCII2STACK
000028CA  6000 004C               2574            BRA     GET_SRC_SUCCESS
000028CE                          2575            
000028CE                          2576  CHECK_IMMEDIATE
000028CE  41F9 000036B0           2577            LEA     TEMP_REGISTER_FORMAT,A0
000028D4  1439 000036AF           2578            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000028DA  1082                    2579            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000028DC  0239 0080 000036B0      2580            ANDI.B  #$80,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
000028E4  0C39 0080 000036B0      2581            CMPI.B  #$80,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
000028EC  6700 0026               2582            BEQ     GET_SRC_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
000028F0  0C06 0004               2583            CMPI.B  #4,D6                          
000028F4  6600 001E               2584            BNE     GET_SRC_FAILED 
000028F8                          2585  
000028F8                          2586            *IT IS A WORD AT THIS POINT*
000028F8                          2587            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000028F8  163C 0020               2588            MOVE.B    #' ',D3
000028FC  6100 048A               2589            BSR       PUSH_STACK
00002900  163C 0023               2590            MOVE.B    #'#',D3
00002904  6100 0482               2591            BSR       PUSH_STACK
00002908  321D                    2592            MOVE.W    (A5)+,D1
0000290A  7404                    2593            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
0000290C  6100 E96A               2594            BSR       HEX2ASCII2STACK
00002910  6000 0006               2595            BRA     GET_SRC_SUCCESS
00002914                          2596            
00002914                          2597  GET_SRC_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
00002914  7801                    2598            MOVE.L #1,D4
00002916  4E75                    2599            RTS
00002918                          2600  GET_SRC_SUCCESS 
00002918  4E75                    2601            RTS
0000291A                          2602                                 
0000291A                          2603      
0000291A                          2604  
0000291A                          2605  
0000291A                          2606  
0000291A                          2607  
0000291A                          2608  
0000291A                          2609  
0000291A                          2610  GET_EA_EA_DEST
0000291A                          2611  *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
0000291A                          2612      
0000291A                          2613      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
0000291A  2405                    2614      MOVE.L  D5,D2                           * CLEAN COPY TO D2
0000291C  EC8A                    2615      LSR.L   #6,D2                           * [D2] Temporarily used D2 for shifting bits                *TODO: DYNAMIC MODE LOCATION
0000291E  23C2 000036C0           2616      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
00002924  7407                    2617      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
00002926  C5B9 000036C0           2618      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
0000292C                          2619                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
0000292C                          2620      
0000292C                          2621      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
0000292C                          2622      *DESTINATION REGISTER FORMAT STANDARD         *
0000292C                          2623      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
0000292C                          2624      *WHEN BIT = 0(VALID ADDRESS MODE)             *
0000292C                          2625      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
0000292C                          2626      *0 - Dn                                       *
0000292C                          2627      *1 - An                                       *
0000292C                          2628      *2 - (An)                                     *
0000292C                          2629      *3 - (An)+                                    *
0000292C                          2630      *4 - -(An)                                    *
0000292C                          2631      *5 - (XXX).W                                  *
0000292C                          2632      *6 - (XXX).L                                  *
0000292C                          2633      *7 - #<data>                                  *
0000292C                          2634      ***********************************************
0000292C                          2635      
0000292C                          2636      *** Check if source ...  <ea> = Dn
0000292C                          2637  DEST_CHECK0    
0000292C  41F9 000036B0           2638            LEA     TEMP_REGISTER_FORMAT,A0
00002932  1439 000036AE           2639            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002938  1082                    2640            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000293A  0239 0001 000036B0      2641            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
00002942  0C39 0001 000036B0      2642            CMPI.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
0000294A  6700 006A               2643            BEQ     DEST_CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
0000294E  0CB9 00000000 000036C0  2644            CMPI.L     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn) - COMPARE MODES TO SEE IF IT IS THIS MODE
00002958  6600 005C               2645            BNE     DEST_CHECK1
0000295C                          2646            
0000295C                          2647            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
0000295C  163C 0020               2648            MOVE.B    #' ',D3
00002960  6100 0426               2649            BSR       PUSH_STACK
00002964  163C 0044               2650            MOVE.B    #'D',D3
00002968  6100 041E               2651            BSR       PUSH_STACK
0000296C                          2652  
0000296C                          2653            *FIND REGISTER NUMBER END LOCATION*  
0000296C  13F9 000036B1 000036B8  2654            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002976  0239 000F 000036B8      2655            AND.B   #$0F,VAR_BYTE_END
0000297E                          2656            
0000297E                          2657            *GET INDEX OF THE END OF SRC REGISTER NUMBER
0000297E  23C5 000036BC           2658            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002984  1439 000036B8           2659            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
0000298A                          2660            
0000298A                          2661            *INTITIALIZE FOR BIT SHIFTING
0000298A  41F9 000036BC           2662            LEA     VAR_TEMP_CLEANCOPY,A0
00002990  2639 000036BC           2663            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002996                          2664  DEST_LOOP_SHIFTING
00002996  0C02 0000               2665            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000299A  6700 0008               2666            BEQ     DEST_MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
0000299E  E24B                    2667            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000029A0  5302                    2668            SUB.B   #1,D2                     *DECREMENT COUNTER
000029A2  60F2                    2669            BRA     DEST_LOOP_SHIFTING             *CONTINUE SHIFTING
000029A4                          2670  DEST_MASKING_NEXT
000029A4  C6BC 00000007           2671            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000029AA  0603 0030               2672            ADD.B   #$30,D3                   *CONVERT TO CHAR
000029AE  6100 03D8               2673            BSR     PUSH_STACK                *PUSH TO STACK
000029B2                          2674            
000029B2  6000 0394               2675            BRA     GET_DST_SUCCESS           *RETURN          
000029B6                          2676            
000029B6                          2677            
000029B6                          2678            *** Check if source ...  <ea> = An
000029B6                          2679  DEST_CHECK1    
000029B6  41F9 000036B0           2680            LEA     TEMP_REGISTER_FORMAT,A0
000029BC  1439 000036AE           2681            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000029C2  1082                    2682            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000029C4  0239 0002 000036B0      2683            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
000029CC  0C39 0002 000036B0      2684            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
000029D4  6700 006A               2685            BEQ     DEST_CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
000029D8  0CB9 00000001 000036C0  2686            CMPI.L  #1,VAR_LONG_ADDRESS_MODE_CHECK                      * An - COMPARE MODES TO SEE IF IT IS THIS MODE
000029E2  6600 005C               2687            BNE     DEST_CHECK2
000029E6                          2688            
000029E6                          2689            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000029E6  163C 0020               2690            MOVE.B    #' ',D3
000029EA  6100 039C               2691            BSR       PUSH_STACK
000029EE  163C 0041               2692            MOVE.B    #'A',D3
000029F2  6100 0394               2693            BSR       PUSH_STACK
000029F6                          2694  
000029F6                          2695            
000029F6                          2696            *FIND REGISTER NUMBER END LOCATION*  
000029F6  13F9 000036B1 000036B8  2697            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002A00  0239 000F 000036B8      2698            AND.B   #$0F,VAR_BYTE_END
00002A08                          2699            
00002A08                          2700            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002A08  23C5 000036BC           2701            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002A0E  1439 000036B8           2702            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
00002A14                          2703            
00002A14                          2704            *INTITIALIZE FOR BIT SHIFTING
00002A14  41F9 000036BC           2705            LEA     VAR_TEMP_CLEANCOPY,A0
00002A1A  2639 000036BC           2706            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002A20                          2707  DEST_LOOP_SHIFTING1
00002A20  0C02 0000               2708            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002A24  6700 0008               2709            BEQ     DEST_MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00002A28  E24B                    2710            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002A2A  5302                    2711            SUB.B   #1,D2                     *DECREMENT COUNTER
00002A2C  60F2                    2712            BRA     DEST_LOOP_SHIFTING1             *CONTINUE SHIFTING
00002A2E                          2713  DEST_MASKING_NEXT1
00002A2E  C6BC 00000007           2714            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002A34  0603 0030               2715            ADD.B   #$30,D3                   *CONVERT TO CHAR
00002A38  6100 034E               2716            BSR     PUSH_STACK                *PUSH TO STACK
00002A3C                          2717            
00002A3C  6000 030A               2718            BRA     GET_DST_SUCCESS                   *RETURN 
00002A40                          2719            
00002A40                          2720            
00002A40                          2721            
00002A40                          2722            
00002A40                          2723            *** Check if source ...  <ea> = (An)       
00002A40                          2724  DEST_CHECK2    
00002A40  41F9 000036B0           2725            LEA     TEMP_REGISTER_FORMAT,A0
00002A46  1439 000036AE           2726            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002A4C  1082                    2727            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002A4E  0239 0004 000036B0      2728            ANDI.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
00002A56  0C39 0004 000036B0      2729            CMPI.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
00002A5E  6700 007A               2730            BEQ     DEST_CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002A62  0CB9 00000002 000036C0  2731            CMPI.L   #2,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)  COMPARE MODES TO SEE IF IT IS THIS MODE                                                                *change: checkx++*
00002A6C  6600 006C               2732            BNE     DEST_CHECK3
00002A70                          2733            
00002A70                          2734            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002A70  163C 0020               2735            MOVE.B    #' ',D3
00002A74  6100 0312               2736            BSR       PUSH_STACK
00002A78  163C 0028               2737            MOVE.B    #'(',D3
00002A7C  6100 030A               2738            BSR       PUSH_STACK
00002A80  163C 0041               2739            MOVE.B    #'A',D3
00002A84  6100 0302               2740            BSR       PUSH_STACK
00002A88                          2741  
00002A88                          2742            
00002A88                          2743            *FIND REGISTER NUMBER END LOCATION*  
00002A88  13F9 000036B1 000036B8  2744            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002A92  0239 000F 000036B8      2745            AND.B   #$0F,VAR_BYTE_END
00002A9A                          2746            
00002A9A                          2747            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002A9A  23C5 000036BC           2748            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002AA0  1439 000036B8           2749            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002AA6                          2750            
00002AA6                          2751            *INTITIALIZE FOR BIT SHIFTING
00002AA6  41F9 000036BC           2752            LEA     VAR_TEMP_CLEANCOPY,A0
00002AAC  2639 000036BC           2753            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002AB2                          2754  DEST_LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
00002AB2  0C02 0000               2755            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002AB6  6700 0008               2756            BEQ     DEST_MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002ABA  E24B                    2757            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002ABC  5302                    2758            SUB.B   #1,D2                     *DECREMENT COUNTER
00002ABE  60F2                    2759            BRA     DEST_LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
00002AC0                          2760  DEST_MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
00002AC0  0283 00000007           2761            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002AC6  0603 0030               2762            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002ACA  6100 02BC               2763            BSR     PUSH_STACK                *PUSH TO STACK
00002ACE                          2764            
00002ACE  163C 0029               2765            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002AD2  6100 02B4               2766            BSR       PUSH_STACK
00002AD6                          2767            
00002AD6  6000 0270               2768            BRA     GET_DST_SUCCESS                   *RETURN 
00002ADA                          2769  
00002ADA                          2770            
00002ADA                          2771            
00002ADA                          2772                      
00002ADA                          2773  *** Check if source ...  <ea> = (An)+       
00002ADA  41F9 000036B0           2774  DEST_CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
00002AE0  1439 000036AE           2775            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002AE6  1082                    2776            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002AE8  0239 0008 000036B0      2777            ANDI.B  #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
00002AF0  0C39 0008 000036B0      2778            CMPI.B  #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
00002AF8  6700 0082               2779            BEQ     DEST_CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002AFC  0CB9 00000003 000036C0  2780            CMPI.L  #3,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)+ - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00002B06  6600 0074               2781            BNE     DEST_CHECK4
00002B0A                          2782            
00002B0A                          2783            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002B0A  163C 0020               2784            MOVE.B    #' ',D3
00002B0E  6100 0278               2785            BSR       PUSH_STACK
00002B12  163C 0028               2786            MOVE.B    #'(',D3
00002B16  6100 0270               2787            BSR       PUSH_STACK
00002B1A  163C 0041               2788            MOVE.B    #'A',D3
00002B1E  6100 0268               2789            BSR       PUSH_STACK
00002B22                          2790  
00002B22                          2791            
00002B22                          2792            *FIND REGISTER NUMBER END LOCATION*  
00002B22  13F9 000036B1 000036B8  2793            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002B2C  0239 000F 000036B8      2794            ANDI.B   #$0F,VAR_BYTE_END
00002B34                          2795            
00002B34                          2796            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002B34  23C5 000036BC           2797            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002B3A  1439 000036B8           2798            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002B40                          2799            
00002B40                          2800            *INTITIALIZE FOR BIT SHIFTING
00002B40  41F9 000036BC           2801            LEA     VAR_TEMP_CLEANCOPY,A0
00002B46  2639 000036BC           2802            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002B4C                          2803            
00002B4C                          2804  DEST_LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
00002B4C  0C02 0000               2805            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002B50  6700 0008               2806            BEQ     DEST_MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002B54  E24B                    2807            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002B56  5302                    2808            SUBI.B   #1,D2                     *DECREMENT COUNTER
00002B58  60F2                    2809            BRA     DEST_LOOP_SHIFTING3            *CONTINUE SHIFTING 
00002B5A                          2810                                               *change: NAME OF LABEL*
00002B5A                          2811  DEST_MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
00002B5A  0283 00000007           2812            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002B60  0603 0030               2813            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002B64  6100 0222               2814            BSR     PUSH_STACK                *PUSH TO STACK
00002B68                          2815            
00002B68  163C 0029               2816            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002B6C  6100 021A               2817            BSR       PUSH_STACK
00002B70  163C 002B               2818            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002B74  6100 0212               2819            BSR       PUSH_STACK
00002B78                          2820            
00002B78  6000 01CE               2821            BRA       GET_DST_SUCCESS                   *RETURN 
00002B7C                          2822  
00002B7C                          2823            
00002B7C                          2824            
00002B7C                          2825                      
00002B7C                          2826            *** Check if source ...  <ea> = -(An)       
00002B7C                          2827  DEST_CHECK4    
00002B7C  41F9 000036B0           2828            LEA     TEMP_REGISTER_FORMAT,A0
00002B82  1439 000036AE           2829            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002B88  1082                    2830            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002B8A  0239 0010 000036B0      2831            ANDI.B  #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
00002B92  0C39 0010 000036B0      2832            CMPI.B  #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002B9A  6700 0082               2833            BEQ     DEST_CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002B9E  0CB9 00000004 000036C0  2834            CMPI.L  #4,VAR_LONG_ADDRESS_MODE_CHECK                      * -(An) - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00002BA8  6600 0074               2835            BNE     DEST_CHECK7
00002BAC                          2836            
00002BAC                          2837            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002BAC  163C 0020               2838            MOVE.B    #' ',D3
00002BB0  6100 01D6               2839            BSR       PUSH_STACK
00002BB4  163C 002D               2840            MOVE.B    #'-',D3
00002BB8  6100 01CE               2841            BSR       PUSH_STACK
00002BBC  163C 0028               2842            MOVE.B    #'(',D3
00002BC0  6100 01C6               2843            BSR       PUSH_STACK
00002BC4  163C 0041               2844            MOVE.B    #'A',D3
00002BC8  6100 01BE               2845            BSR       PUSH_STACK
00002BCC                          2846  
00002BCC                          2847            
00002BCC                          2848            *FIND REGISTER NUMBER END LOCATION*  
00002BCC  13F9 000036B1 000036B8  2849            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002BD6  0239 000F 000036B8      2850            AND.B   #$0F,VAR_BYTE_END
00002BDE                          2851            
00002BDE                          2852            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002BDE  23C5 000036BC           2853            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002BE4  1439 000036B8           2854            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002BEA                          2855            
00002BEA                          2856            *INTITIALIZE FOR BIT SHIFTING
00002BEA  41F9 000036BC           2857            LEA     VAR_TEMP_CLEANCOPY,A0
00002BF0  2639 000036BC           2858            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002BF6                          2859            
00002BF6                          2860  DEST_LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
00002BF6  0C02 0000               2861            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002BFA  6700 0008               2862            BEQ     DEST_MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002BFE  E24B                    2863            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002C00  5302                    2864            SUBI.B   #1,D2                     *DECREMENT COUNTER
00002C02  60F2                    2865            BRA     DEST_LOOP_SHIFTING4            *CONTINUE SHIFTING 
00002C04                          2866                                               *change: NAME OF LABEL*
00002C04                          2867  DEST_MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
00002C04  0283 00000007           2868            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002C0A  0603 0030               2869            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002C0E  6100 0178               2870            BSR     PUSH_STACK                *PUSH TO STACK
00002C12                          2871            
00002C12  163C 0029               2872            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002C16  6100 0170               2873            BSR       PUSH_STACK
00002C1A                          2874            
00002C1A  6000 012C               2875            BRA     GET_DST_SUCCESS                   *RETURN
00002C1E                          2876            
00002C1E                          2877                      
00002C1E                          2878            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
00002C1E                          2879  DEST_CHECK7    
00002C1E  0CB9 00000007 000036C0  2880            CMPI.L  #7,VAR_LONG_ADDRESS_MODE_CHECK                      *IF (MODE != 111)
00002C28  6600 011A               2881            BNE     GET_DST_FAILED                                      *THAN BRANCH TO UNCESSFULL SRC MODE READ
00002C2C                          2882                   
00002C2C                          2883            *NEXT: (MODE == 111) 
00002C2C                          2884            *NOW: CHECK FOR SRC REGISTER 
00002C2C                          2885                  *(000 = (xxx).W)
00002C2C                          2886                  *(001 = (xxx).L)
00002C2C                          2887                  *(010 = #<data>)
00002C2C                          2888                  
00002C2C                          2889            *FIND REGISTER NUMBER END LOCATION*  
00002C2C  13F9 000036B1 000036B8  2890            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002C36  0239 000F 000036B8      2891            AND.B   #$0F,VAR_BYTE_END
00002C3E                          2892            
00002C3E                          2893            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002C3E  23C5 000036BC           2894            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002C44  1439 000036B8           2895            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002C4A                          2896            
00002C4A                          2897            *INTITIALIZE FOR BIT SHIFTING
00002C4A  41F9 000036BC           2898            LEA     VAR_TEMP_CLEANCOPY,A0
00002C50  2C39 000036BC           2899            MOVE.L  VAR_TEMP_CLEANCOPY,D6
00002C56                          2900  DEST_LOOP_SHIFTING7
00002C56  0C02 0000               2901            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002C5A  6700 0008               2902            BEQ     DEST_MASKING_NEXT7              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00002C5E  E24E                    2903            LSR     #1,D6                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002C60  5302                    2904            SUB.B   #1,D2                     *DECREMENT COUNTER
00002C62  60F2                    2905            BRA     DEST_LOOP_SHIFTING7             *CONTINUE SHIFTING
00002C64                          2906  DEST_MASKING_NEXT7
00002C64  CCBC 00000007           2907            AND.L   #7,D6                     *MASK, ONLY NEED 0-2 BIT INDEXES 
00002C6A                          2908           *D3 - REGISTER NUMBER NEEDED TO CHECK WHICH W/L/#<DATA>*
00002C6A                          2909            
00002C6A                          2910  DEST_CHECK_WORD  
00002C6A  41F9 000036B0           2911            LEA     TEMP_REGISTER_FORMAT,A0
00002C70  1439 000036AE           2912            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002C76  1082                    2913            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002C78  0239 0020 000036B0      2914            ANDI.B  #$20,TEMP_REGISTER_FORMAT                           * MASKS 0010 0000                                                     *change <SRC>*
00002C80  0C39 0020 000036B0      2915            CMPI.B  #$20,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0010 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002C88  6700 0026               2916            BEQ     DEST_CHECK_LONG                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00002C8C  0C06 0000               2917            CMPI.B  #0,D6                                                   *COMPARE REGISTER NUMBER WITH (000 == 000) FOR WORD
00002C90  6600 001E               2918            BNE     DEST_CHECK_LONG                                      * THE REGISTER NUMBER DOESN'T MATCH "(XXX).W" -> SO MOVE ON       
00002C94                          2919            *IT IS A WORD AT THIS POINT*
00002C94                          2920            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002C94  163C 0020               2921            MOVE.B    #' ',D3
00002C98  6100 00EE               2922            BSR       PUSH_STACK
00002C9C  163C 0024               2923            MOVE.B    #'$',D3
00002CA0  6100 00E6               2924            BSR       PUSH_STACK
00002CA4  321D                    2925            MOVE.W    (A5)+,D1
00002CA6  7404                    2926            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00002CA8  6100 E5CE               2927            BSR       HEX2ASCII2STACK
00002CAC  6000 009A               2928            BRA       GET_DST_SUCCESS
00002CB0                          2929  
00002CB0                          2930  DEST_CHECK_LONG
00002CB0  41F9 000036B0           2931            LEA     TEMP_REGISTER_FORMAT,A0
00002CB6  1439 000036AE           2932            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002CBC  1082                    2933            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002CBE  0239 0040 000036B0      2934            ANDI.B  #$40,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00002CC6  0C39 0040 000036B0      2935            CMPI.B  #$40,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002CCE  6700 002E               2936            BEQ     DEST_CHECK_IMMEDIATE                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00002CD2  0C06 0001               2937            CMPI.B  #1,D6                                                   *COMPARE REGISTER NUMBER WITH (001 == 001) FOR WORD
00002CD6  6600 0026               2938            BNE     DEST_CHECK_IMMEDIATE                                      * THE REGISTER NUMBER DOESN'T MATCH "(XXX).L" -> SO MOVE ON 
00002CDA                          2939            *IT IS A WORD AT THIS POINT*
00002CDA                          2940            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002CDA  163C 0020               2941            MOVE.B    #' ',D3
00002CDE  6100 00A8               2942            BSR       PUSH_STACK
00002CE2  163C 0024               2943            MOVE.B    #'$',D3
00002CE6  6100 00A0               2944            BSR       PUSH_STACK
00002CEA  321D                    2945            MOVE.W    (A5)+,D1        * GET NEXT WORD INTO STACK
00002CEC  7404                    2946            MOVE.L    #4,D2           * SETS SIZE = 4 FOR CONVERSION TO ASCII
00002CEE  6100 E588               2947            BSR       HEX2ASCII2STACK
00002CF2  321D                    2948            MOVE.W    (A5)+,D1        * GET NEXT WORD INTO STACK
00002CF4  7404                    2949            MOVE.L    #4,D2          
00002CF6  6100 E580               2950            BSR       HEX2ASCII2STACK
00002CFA  6000 004C               2951            BRA     GET_DST_SUCCESS
00002CFE                          2952            
00002CFE                          2953  DEST_CHECK_IMMEDIATE
00002CFE  41F9 000036B0           2954            LEA     TEMP_REGISTER_FORMAT,A0
00002D04  1439 000036AE           2955            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002D0A  1082                    2956            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002D0C  0239 0080 000036B0      2957            ANDI.B  #$80,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00002D14  0C39 0080 000036B0      2958            CMPI.B  #$80,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002D1C  6700 0026               2959            BEQ     GET_DST_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00002D20  0C06 0004               2960            CMPI.B  #4,D6                                               * COMPARE REGISTER NUMBER WITH (010 == 010) FOR WORD
00002D24  6600 001E               2961            BNE     GET_DST_FAILED                                      * THE REGISTER NUMBER DOESN'T MATCH "#<DATA>" -> SO MOVE ON 
00002D28                          2962            
00002D28                          2963            *IT IS A WORD AT THIS POINT*
00002D28                          2964            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002D28  163C 0020               2965            MOVE.B    #' ',D3
00002D2C  6100 005A               2966            BSR       PUSH_STACK
00002D30  163C 0023               2967            MOVE.B    #'#',D3
00002D34  6100 0052               2968            BSR       PUSH_STACK
00002D38  321D                    2969            MOVE.W    (A5)+,D1
00002D3A  7404                    2970            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00002D3C  6100 E53A               2971            BSR       HEX2ASCII2STACK
00002D40  6000 0006               2972            BRA       GET_DST_SUCCESS
00002D44                          2973            
00002D44                          2974  GET_DST_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
00002D44  7801                    2975            MOVE.L #1,D4
00002D46  4E75                    2976            RTS
00002D48                          2977  GET_DST_SUCCESS 
00002D48  4E75                    2978            RTS
00002D4A                          2979  
00002D4A                          2980  
00002D4A                          2981  *---------------------------------------------------------------------------*
00002D4A                          2982  * STACK/QUEUE INTERFACE
00002D4A                          2983  *---------------------------------------------------------------------------*
00002D4A                          2984  PRINT_STACK
00002D4A  0C39 0000 000036AA      2985            CMP.B     #0,COUNTER
00002D52  6700 000E               2986            BEQ       PRINT_STACK_RETURN             *CHECK IF LOOP IS FINISHED
00002D56                          2987            
00002D56                          2988  PRINT_STACK_HELPER
00002D56  6100 0038               2989            BSR      POP_STACK          *PRINTS ADDRESS
00002D5A  103C 0006               2990            MOVE.B   #6,D0              *Display single character in D1.B. 
00002D5E  4E4F                    2991            TRAP     #15             *ACTIVATES PRINT
00002D60                          2992  
00002D60  60E8                    2993            BRA       PRINT_STACK
00002D62                          2994  PRINT_STACK_RETURN
00002D62  4E75                    2995            RTS
00002D64                          2996            
00002D64                          2997            
00002D64                          2998  PRINT_QUEUE
00002D64  0C39 0000 000036AA      2999            CMP.B     #0,COUNTER
00002D6C  6700 0018               3000            BEQ       PRINT_QUEUE_RETURN             *CHECK IF LOOP IS FINISHED
00002D70                          3001            
00002D70                          3002  PRINT_QUEUE_HELPER
00002D70  33F9 000036AA 000036AC  3003            MOVE.W   COUNTER,QUEUE_COUNTER
00002D7A  6100 0022               3004            BSR      POP_FRONT          *PRINTS ADDRESS
00002D7E  103C 0006               3005            MOVE.B   #6,D0              *Display single character in D1.B. 
00002D82  4E4F                    3006            TRAP     #15             *ACTIVATES PRINT
00002D84                          3007  
00002D84  60DE                    3008            BRA       PRINT_QUEUE
00002D86                          3009  PRINT_QUEUE_RETURN
00002D86  4E75                    3010            RTS
00002D88                          3011            
00002D88                          3012  *PUSHES.W CONTENTS OF [D3] INTO STACK          
00002D88                          3013  PUSH_STACK
00002D88  1503                    3014              MOVE.B  D3,-(A2)
00002D8A  6100 0058               3015              BSR     INCREMENT
00002D8E  4E75                    3016              RTS
00002D90                          3017  *POPS.W TOP OF STACK INTO [D1], SO ITS READY TO PRINT WITH TRAP 15
00002D90                          3018  *         MOVE.W   (A2)+,D1           *PRINTS ADDRESS
00002D90                          3019  *         MOVE.B   #15,D0             *PRINTS ACCORDING TO D2 BASE VALUE
00002D90                          3020  *         MOVE.B   #16,D2             *PRINTS BASED 16 NUMBER
00002D90                          3021  *         TRAP        #15             *ACTIVATES PRINT
00002D90                          3022  POP_STACK
00002D90  BECA                    3023              CMPA.W   A2,SP            *CHECKS IF THERE IS ANYTHING TO PUSH
00002D92  6700 0008               3024              BEQ     POP_RETURN        *IF NOTHING TO PUSH THAN JUST RETURN
00002D96  121A                    3025              MOVE.B  (A2)+,D1 
00002D98  6100 0052               3026              BSR     DECREMENT
00002D9C                          3027  POP_RETURN
00002D9C  4E75                    3028              RTS 
00002D9E                          3029        
00002D9E                          3030  *USE [A4] AS SECOND POINTER IN SHIFTING      
00002D9E  0C39 0000 000036AC      3031  POP_FRONT   CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
00002DA6  6700 0030               3032              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
00002DAA                          3033              
00002DAA                          3034              
00002DAA                          3035              *POSITION THE POINTERS A[4] RIGHT BEHIND A[2] WHICH IS RIGHT BEHIND STACK
00002DAA  347C 7000               3036              MOVEA.W #STACK,A2   *START A2 AT STACK
00002DAE  0622 0000               3037              ADD.B   #0,-(A2)    *SHIFT A2 TO THE BOTTOM OF THE STACK
00002DB2  384A                    3038              MOVEA.W A2,A4     *START A4 RIGHT ABOVE A2
00002DB4  0624 0000               3039              ADD.B   #0,-(A4)  *leash one more higher in stack (a4)
00002DB8  1212                    3040              MOVE.B  (A2),D1     *POP CONTENTS INTO D1
00002DBA                          3041  POP_SHIFT_LOOP
00002DBA  0C39 0000 000036AC      3042              CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
00002DC2  6700 0014               3043              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
00002DC6  1494                    3044              MOVE.B  (A4),(A2)   *SHIFT CONTENT DOWN THE STACK
00002DC8  0624 0000               3045              ADD.B   #0,-(A4)
00002DCC  0622 0000               3046              ADD.B   #0,-(A2) *SHIFT POINTERS DOWN THE STACK
00002DD0  5339 000036AC           3047              SUB.B   #1,QUEUE_COUNTER *DECREMENT INTERNAL QUEUE COUNTER
00002DD6                          3048              
00002DD6  60E2                    3049              BRA     POP_SHIFT_LOOP
00002DD8                          3050                          
00002DD8                          3051  POP_FRONT_RETURN 
00002DD8                          3052              *RESET A2 BACK TO SP
00002DD8  347C 7000               3053              MOVEA.W #STACK,A2    
00002DDC  5339 000036AA           3054              SUB.B   #1,COUNTER *DECREMENT STACK COUNTER       
00002DE2  4E75                    3055              RTS   
00002DE4                          3056  
00002DE4                          3057  INCREMENT
00002DE4  5239 000036AA           3058              ADD.B   #1, COUNTER
00002DEA  4E75                    3059              RTS           
00002DEC                          3060  DECREMENT
00002DEC  5339 000036AA           3061              SUB.B   #1, COUNTER
00002DF2  4E75                    3062              RTS           
00002DF4                          3063  CLEAR_STACK
00002DF4  0C39 0000 000036AA      3064              CMP.B     #0,COUNTER
00002DFC  6700 0006               3065              BEQ       CLEAR_RETURN
00002E00  618E                    3066              BSR       POP_STACK
00002E02  60F0                    3067              BRA       CLEAR_STACK
00002E04                          3068   
00002E04                          3069  CLEAR_RETURN
00002E04  4E75                    3070              RTS    
00002E06                          3071  *---------------------------------------------------------------------------*
00002E06                          3072  * TERMINATE
00002E06                          3073  *---------------------------------------------------------------------------*
00002E06                          3074  TERMINATE   
00002E06  43F9 000031B6           3075              LEA     FINMSG,A1
00002E0C  103C 000E               3076              MOVE.B  #14,D0
00002E10  4E4F                    3077              TRAP    #15
00002E12                          3078  
00002E12  103C 0009               3079              MOVE.B  #9,D0
00002E16  4E4F                    3080              TRAP    #15
00002E18                          3081  
00002E18                          3082  *---------------------------------------------------------------------------*
00002E18                          3083  * Data storage                                                 
00002E18                          3084  *---------------------------------------------------------------------------*  
00002E18                          3085  WELCOME
00002E18= 20 20 20 20 20 20 ...   3086              DC.B '                         ___     ___ ___        ___   ___ ___                 ',CR,LF
00002E68= 3D 3D 3D 3D 3D 20 ...   3087              DC.B '=====           \  /\  /|___|   |   |   ||\  /||___    | |   |           =====',CR,LF
00002EB8= 3D 3D 3D 3D 3D 20 ...   3088              DC.B '=====            \/  \/ |___|___|___|___|| \/ ||___    | |___|           =====',CR,LF
00002F08                          3089      
00002F08= 20 20 20 20 20 20 ...   3090              DC.B '                        ___ ___ ___  ___      ___                             ',CR,LF
00002F58= 20 20 20 20 20 20 ...   3091              DC.B '                       |     | |___)|    |   |___                             ',CR,LF 
00002FA8= 20 20 20 20 20 20 ...   3092              DC.B '                       |___ _|_|\___|___ |___|___                             ',CR,LF
00002FF8                          3093      
00002FF8= 20 20 20 20 20 20 ...   3094              DC.B '           __  ___ ___   _   ___  ___  ___        ___      ___ ___            ',CR,LF
00003048= 3D 3D 3D 3D 3D 20 ...   3095              DC.B '=====     |  \  | |___  /_\ |___ |___ |___ |\  /||___||   |___|___)      =====',CR,LF 
00003098= 3D 3D 3D 3D 3D 20 ...   3096              DC.B '=====     |__/ _|_ ___|/   \ ___| ___||___ | \/ ||___||___|___|\___      =====',CR,LF,CR,LF,CR,LF,0
000030ED                          3097  
000030ED                          3098  PROMPT_START
000030ED= 50 6C 65 61 73 65 ...   3099              DC.B    'Please enter a hexadecimal starting address.',CR,LF,0
0000311C                          3100      
0000311C                          3101  PROMPT_END
0000311C= 50 6C 65 61 73 65 ...   3102              DC.B    'Please enter a hexadecimal ending address.',CR,LF,0
00003149= 0D 0A 48 69 74 20 ...   3103  DISP_NEXT   DC.B    CR,LF,'Hit Enter to print the next 30 lines.',CR,LF,0            
00003173= 57 6F 75 6C 64 20 ...   3104  REPEATMSG   DC.B    'Would you like to run again? Press Y to continue or N to finish.',CR,LF,0
000031B6= 54 68 61 6E 6B 20 ...   3105  FINMSG      DC.B    'Thank you for using Circle Disassembler.',CR,LF,0
000031E1= 45 72 72 6F 72 3A ...   3106  ERRMSG_1    DC.B    'Error: Invalid Input Address',CR,LF,0
00003200= 45 72 72 6F 72 3A ...   3107  ERRMSG_3    DC.B    'Error: Invalid Input Address (Odd)',CR,LF,0
00003225= 45 72 72 6F 72 3A ...   3108  ERRMSG_5    DC.B    'Error: Invalid Input Address (start > end)',CR,LF,0
00003252                          3109  
00003252                          3110  VR_S_ADDR   DS.B    80                      * allocate storage space for the starting address
000032A2                          3111  VR_E_ADDR   DS.B    80                      * allocate storage space for the ending address
000032F2                          3112  S_ADDR_HX   DS.L    1                       * allocate storage space for the starting address in hex
000032F6                          3113  E_ADDR_HX   DS.L    1                       * allocate storage space for the ending address in hex
000032FA= 0D 0A 00                3114  ENDLINE_M   DC.B    CR,LF,0
000032FD                          3115  TMPINPUT    DS.B    80                      * temp store user input
0000334D                          3116  TMPOUTPUT   DS.B    80                      * temp store prog output
0000339D= 20 20 20 4F 52 49 ...   3117  DISP_ORI_B  DC.B    '   ORI.B',0
000033A6= 20 20 20 4F 52 49 ...   3118  DISP_ORI_W  DC.B    '   ORI.W',0
000033AF= 20 20 20 4F 52 49 ...   3119  DISP_ORI_L  DC.B    '   ORI.L',0
000033B8= 20 20 20 45 4F 52 ...   3120  DISP_EORI_B  DC.B    '   EORI.B',0
000033C2= 20 20 20 45 4F 52 ...   3121  DISP_EORI_W  DC.B    '   EORI.W',0
000033CC= 20 20 20 45 4F 52 ...   3122  DISP_EORI_L  DC.B    '   EORI.L',0
000033D6= 20 20 20 42 54 53 ...   3123  DISP_BTST   DC.B    '   BTST',0
000033DE= 20 20 20 43 4D 50 ...   3124  DISP_CMPI_B  DC.B    '   CMPI.B',0
000033E8= 20 20 20 43 4D 50 ...   3125  DISP_CMPI_W  DC.B    '   CMPI.W',0
000033F2= 20 20 20 43 4D 50 ...   3126  DISP_CMPI_L  DC.B    '   CMPI.L',0
000033FC= 20 20 20 44 41 54 ...   3127  DISP_DATA   DC.B    '   DATA',0
00003404= 20 20 20 4D 4F 56 ...   3128  DISP_MOVE_B DC.B    '   MOVE.B',0
0000340E= 20 20 20 4D 4F 56 ...   3129  DISP_MOVE_W DC.B    '   MOVE.W',0
00003418= 20 20 20 4D 4F 56 ...   3130  DISP_MOVE_L DC.B    '   MOVE.L',0
00003422= 20 20 20 52 54 53 00    3131  DISP_RTS    DC.B    '   RTS',0
00003429= 20 20 20 4A 53 52 00    3132  DISP_JSR    DC.B    '   JSR',0
00003430= 20 20 20 4E 45 47 ...   3133  DISP_NEG_B    DC.B    '   NEG.B',0
00003439= 20 20 20 4E 45 47 ...   3134  DISP_NEG_W    DC.B    '   NEG.W',0
00003442= 20 20 20 4E 45 47 ...   3135  DISP_NEG_L    DC.B    '   NEG.L',0
0000344B= 20 20 20 4E 4F 54 ...   3136  DISP_NOT_B  DC.B    '   NOT.B',0
00003454= 20 20 20 4E 4F 54 ...   3137  DISP_NOT_W  DC.B    '   NOT.W',0
0000345D= 20 20 20 4E 4F 54 ...   3138  DISP_NOT_L  DC.B    '   NOT.L',0
00003466= 20 20 20 4C 45 41 00    3139  DISP_LEA    DC.B    '   LEA',0
0000346D= 20 20 20 4D 4F 56 ...   3140  DISP_MOVEM_W    DC.B    '   MOVEM.W',0
00003478= 20 20 20 4D 4F 56 ...   3141  DISP_MOVEM_L    DC.B    '   MOVEM.L',0
00003483= 20 20 20 41 44 44 ...   3142  DISP_ADDQ_B DC.B    '   ADDQ.B',0
0000348D= 20 20 20 41 44 44 ...   3143  DISP_ADDQ_W DC.B    '   ADDQ.W',0
00003497= 20 20 20 41 44 44 ...   3144  DISP_ADDQ_L DC.B    '   ADDQ.L',0
000034A1= 20 20 20 44 49 56 ...   3145  DISP_DIVS   DC.B    '   DIVS',0
000034A9= 20 20 20 53 55 42 ...   3146  DISP_SUB_B  DC.B    '   SUB.B',0
000034B2= 20 20 20 53 55 42 ...   3147  DISP_SUB_W  DC.B    '   SUB.W',0
000034BB= 20 20 20 53 55 42 ...   3148  DISP_SUB_L  DC.B    '   SUB.L',0
000034C4= 20 20 20 53 55 42 ...   3149  DISP_SUBI_B  DC.B    '   SUBI.B',0
000034CE= 20 20 20 53 55 42 ...   3150  DISP_SUBI_W  DC.B    '   SUBI.W',0
000034D8= 20 20 20 53 55 42 ...   3151  DISP_SUBI_L  DC.B    '   SUBI.L',0
000034E2= 20 20 20 53 55 42 ...   3152  DISP_SUBA_W  DC.B    '   SUBA.W',0
000034EC= 20 20 20 53 55 42 ...   3153  DISP_SUBA_L  DC.B    '   SUBA.L',0
000034F6= 20 20 20 45 4F 52 ...   3154  DISP_EOR_B  DC.B    '   EOR.B',0
000034FF= 20 20 20 45 4F 52 ...   3155  DISP_EOR_W  DC.B    '   EOR.W',0
00003508= 20 20 20 45 4F 52 ...   3156  DISP_EOR_L  DC.B    '   EOR.L',0
00003511= 20 20 20 43 4D 50 ...   3157  DISP_CMP_B  DC.B    '   CMP.B',0
0000351A= 20 20 20 43 4D 50 ...   3158  DISP_CMP_W  DC.B    '   CMP.W',0
00003523= 20 20 20 43 4D 50 ...   3159  DISP_CMP_L  DC.B    '   CMP.L',0
0000352C= 20 20 20 43 4D 50 ...   3160  DISP_CMPA_W  DC.B    '   CMPA.W',0
00003536= 20 20 20 43 4D 50 ...   3161  DISP_CMPA_L  DC.B    '   CMPA.L',0
00003540= 20 20 20 4D 55 4C ...   3162  DISP_MULS_W DC.B    '   MULS.W',0
0000354A= 20 20 20 41 4E 44 ...   3163  DISP_AND_B  DC.B    '   AND.B',0
00003553= 20 20 20 41 4E 44 ...   3164  DISP_AND_W  DC.B    '   AND.W',0
0000355C= 20 20 20 41 4E 44 ...   3165  DISP_AND_L  DC.B    '   AND.L',0
00003565= 20 20 20 41 44 44 ...   3166  DISP_ADD_B  DC.B    '   ADD.B',0
0000356E= 20 20 20 41 44 44 ...   3167  DISP_ADD_W  DC.B    '   ADD.W',0
00003577= 20 20 20 41 44 44 ...   3168  DISP_ADD_L  DC.B    '   ADD.L',0
00003580= 20 20 20 41 44 44 ...   3169  DISP_ADDA_W DC.B    '   ADDA.W',0
0000358A= 20 20 20 41 44 44 ...   3170  DISP_ADDA_L DC.B    '   ADDA.L',0
00003594= 20 20 20 4C 53 52 ...   3171  DISP_LSR_B  DC.B    '   LSR.B',0
0000359D= 20 20 20 4C 53 4C ...   3172  DISP_LSL_B  DC.B    '   LSL.B',0
000035A6= 20 20 20 4C 53 52 ...   3173  DISP_LSR_W  DC.B    '   LSR.W',0
000035AF= 20 20 20 4C 53 4C ...   3174  DISP_LSL_W  DC.B    '   LSL.W',0
000035B8= 20 20 20 4C 53 52 ...   3175  DISP_LSR_L  DC.B    '   LSR.L',0
000035C1= 20 20 20 4C 53 4C ...   3176  DISP_LSL_L  DC.B    '   LSL.L',0
000035CA= 20 20 20 41 53 52 ...   3177  DISP_ASR_B  DC.B    '   ASR.B',0
000035D3= 20 20 20 41 53 4C ...   3178  DISP_ASL_B  DC.B    '   ASL.B',0
000035DC= 20 20 20 41 53 52 ...   3179  DISP_ASR_W  DC.B    '   ASR.W',0
000035E5= 20 20 20 41 53 4C ...   3180  DISP_ASL_W  DC.B    '   ASL.W',0
000035EE= 20 20 20 41 53 52 ...   3181  DISP_ASR_L  DC.B    '   ASR.L',0
000035F7= 20 20 20 41 53 4C ...   3182  DISP_ASL_L  DC.B    '   ASL.L',0
00003600= 20 20 20 52 4F 52 ...   3183  DISP_ROR_B  DC.B    '   ROR.B',0
00003609= 20 20 20 52 4F 4C ...   3184  DISP_ROL_B  DC.B    '   ROL.B',0
00003612= 20 20 20 52 4F 52 ...   3185  DISP_ROR_W  DC.B    '   ROR.W',0
0000361B= 20 20 20 52 4F 4C ...   3186  DISP_ROL_W  DC.B    '   ROL.W',0
00003624= 20 20 20 52 4F 52 ...   3187  DISP_ROR_L  DC.B    '   ROR.L',0
0000362D= 20 20 20 52 4F 4C ...   3188  DISP_ROL_L  DC.B    '   ROL.L',0
00003636= 20 20 20 42 52 41 00    3189  DISP_BRA    DC.B    '   BRA',0
0000363D= 20 20 20 42 4C 54 00    3190  DISP_BLT    DC.B    '   BLT',0
00003644= 20 20 20 42 45 51 00    3191  DISP_BEQ    DC.B    '   BEQ',0
0000364B= 20 20 20 42 4E 45 00    3192  DISP_BNE    DC.B    '   BNE',0
00003652= 20 20 20 42 48 49 00    3193  DISP_BHI    DC.B    '   BHI',0
00003659= 20 20 20 4D 4F 56 ...   3194  DISP_MOVEA_W    DC.B    '   MOVEA.W',0
00003664= 20 20 20 4D 4F 56 ...   3195  DISP_MOVEA_L    DC.B    '   MOVEA.L',0
0000366F                          3196  
0000366F= 20 20 20 24 00          3197  DISP_HEX     DC.B    '   $',0
00003674= 20 20 20 44 00          3198  DISP_D  DC.B    '   D',0
00003679= 20 20 20 41 00          3199  DISP_A  DC.B    '   A',0
0000367E= 20 20 20 28 00          3200  DISP_OP  DC.B    '   (',0
00003683= 29 00                   3201  DISP_CP  DC.B   ')',0
00003685= 20 20 20 28 41 00       3202  DISP_AOP  DC.B    '   (A',0
0000368B                          3203  
0000368B= 20 20 20 2D 28 41 00    3204  DISP_PRE    DC.B    '   -(A',0
00003692= 29 2B 00                3205  DISP_POST   DC.B    ')+',0
00003695= 20 20 20 23 00          3206  DISP_LB DC.B    '   #',0
0000369A= 30 00                   3207  DISP_0  DC.B    '0',0
0000369C= 31 00                   3208  DISP_1  DC.B    '1',0
0000369E= 32 00                   3209  DISP_2  DC.B    '2',0
000036A0= 33 00                   3210  DISP_3  DC.B    '3',0
000036A2= 34 00                   3211  DISP_4  DC.B    '4',0
000036A4= 35 00                   3212  DISP_5  DC.B    '5',0
000036A6= 36 00                   3213  DISP_6  DC.B    '6',0
000036A8= 37 00                   3214  DISP_7  DC.B    '7',0
000036AA                          3215  
000036AA                          3216  *STACK INTERFACE VARIABLES*
000036AA                          3217  COUNTER         DS.W    1
000036AC                          3218  QUEUE_COUNTER   DS.W    1
000036AE                          3219  
000036AE                          3220  *EA DECODING INTERFACE VARIABLES* 
000036AE                          3221  DEST_REGISTER_FORMAT    DS.B    1           *all address modes acceptable standard
000036AF                          3222  SRC_REGISTER_FORMAT  DS.B    1           *all address modes acceptable standard
000036B0                          3223  TEMP_REGISTER_FORMAT    DS.B    1           *place holder for masking other register formats
000036B1                          3224  
000036B1                          3225  *FORMAT OF WHERE TO GET THE EA BY THE ENDING BIT AND STARTING BIT
000036B1                          3226  * WORD + WORD = LONG
000036B1                          3227  * (STARTING BIT) + (ENDING BIT) = 2 HEX CHAR
000036B1                          3228  * A              + F            = AF         <= EXAMPLE
000036B1                          3229  *(10TH BIT)      + (15TH BIT)   = CHECK BITS 15 THROUGH 10
000036B1                          3230  GET_DST_START_END    DS.B    1
000036B2                          3231  GET_SRC_START_END    DS.B    1
000036B3                          3232  
000036B3                          3233  *STORES THE START + END BITS HERE (FROM ABOVE)
000036B4                          3234  VAR_BYTE_START      DS.L    1
000036B8                          3235  VAR_BYTE_END        DS.L    1
000036BC                          3236  VAR_TEMP_CLEANCOPY  DS.L    1
000036C0                          3237  
000036C0                          3238  VAR_LONG_ADDRESS_MODE_CHECK        DS.L    1       *holds the bits 0-2 in long form
000036C4                          3239  
000036C4                          3240  *MORE FOR STACK USAGE*
000036C4= 2C 00                   3241  DISP_COMMA  DC.B    ',',0
000036C6= 20 20 20 00             3242  DISP_INDENT  DC.B    '   ',0
000036CA                          3243  
000036CA                          3244  *NEXT WORD POINTER: FOR IDENTIFING (xxx).W or (xxx).L*
000036CA                          3245  POINTER_WORD    DS.W       1
000036CC                          3246  
000036CC                          3247  
000036CC                          3248  
000036CC                          3249  *---------------------------------------------------------------------------*
000036CC                          3250  * Ends program
000036CC                          3251  *---------------------------------------------------------------------------*
000036CC                          3252              END    START                    * last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASC2HXLP            11D4
ASCII2HEX           11CE
ASC_ERR             1230
ASC_LOW             1212
ASC_NUM             1222
ASC_SFT             122A
ASC_UPP             121A
CHECK0              24FC
CHECK1              2586
CHECK2              2610
CHECK3              26AA
CHECK4              274C
CHECK7              27EE
CHECK_IMMEDIATE     28CE
CHECK_LONG          2880
CHECK_WORD          283A
CLEAR_RETURN        2E04
CLEAR_STACK         2DF4
COUNTER             36AA
CR                  D
DECREMENT           2DEC
DEST_CHECK0         292C
DEST_CHECK1         29B6
DEST_CHECK2         2A40
DEST_CHECK3         2ADA
DEST_CHECK4         2B7C
DEST_CHECK7         2C1E
DEST_CHECK_IMMEDIATE  2CFE
DEST_CHECK_LONG     2CB0
DEST_CHECK_WORD     2C6A
DEST_LOOP_SHIFTING  2996
DEST_LOOP_SHIFTING1  2A20
DEST_LOOP_SHIFTING2  2AB2
DEST_LOOP_SHIFTING3  2B4C
DEST_LOOP_SHIFTING4  2BF6
DEST_LOOP_SHIFTING7  2C56
DEST_MASKING_NEXT   29A4
DEST_MASKING_NEXT1  2A2E
DEST_MASKING_NEXT2  2AC0
DEST_MASKING_NEXT3  2B5A
DEST_MASKING_NEXT4  2C04
DEST_MASKING_NEXT7  2C64
DEST_MODE           20B4
DEST_REGISTER       2384
DEST_REGISTER_FORMAT  36AE
DISPLAY_30_LINES    137C
DISP_0              369A
DISP_1              369C
DISP_2              369E
DISP_3              36A0
DISP_4              36A2
DISP_5              36A4
DISP_6              36A6
DISP_7              36A8
DISP_A              3679
DISP_ADDA_L         358A
DISP_ADDA_W         3580
DISP_ADDQ_B         3483
DISP_ADDQ_L         3497
DISP_ADDQ_W         348D
DISP_ADD_B          3565
DISP_ADD_L          3577
DISP_ADD_W          356E
DISP_AND_B          354A
DISP_AND_L          355C
DISP_AND_W          3553
DISP_AOP            3685
DISP_ASL_B          35D3
DISP_ASL_L          35F7
DISP_ASL_W          35E5
DISP_ASR_B          35CA
DISP_ASR_L          35EE
DISP_ASR_W          35DC
DISP_BEQ            3644
DISP_BHI            3652
DISP_BLT            363D
DISP_BNE            364B
DISP_BRA            3636
DISP_BTST           33D6
DISP_CMPA_L         3536
DISP_CMPA_W         352C
DISP_CMPI_B         33DE
DISP_CMPI_L         33F2
DISP_CMPI_W         33E8
DISP_CMP_B          3511
DISP_CMP_L          3523
DISP_CMP_W          351A
DISP_COMMA          36C4
DISP_CP             3683
DISP_D              3674
DISP_DATA           33FC
DISP_DIVS           34A1
DISP_EORI_B         33B8
DISP_EORI_L         33CC
DISP_EORI_W         33C2
DISP_EOR_B          34F6
DISP_EOR_L          3508
DISP_EOR_W          34FF
DISP_HEX            366F
DISP_INDENT         36C6
DISP_JSR            3429
DISP_LB             3695
DISP_LEA            3466
DISP_LSL_B          359D
DISP_LSL_L          35C1
DISP_LSL_W          35AF
DISP_LSR_B          3594
DISP_LSR_L          35B8
DISP_LSR_W          35A6
DISP_MOVEA_L        3664
DISP_MOVEA_W        3659
DISP_MOVEM_L        3478
DISP_MOVEM_W        346D
DISP_MOVE_B         3404
DISP_MOVE_L         3418
DISP_MOVE_W         340E
DISP_MULS_W         3540
DISP_NEG_B          3430
DISP_NEG_L          3442
DISP_NEG_W          3439
DISP_NEXT           3149
DISP_NOT_B          344B
DISP_NOT_L          345D
DISP_NOT_W          3454
DISP_OP             367E
DISP_ORI_B          339D
DISP_ORI_L          33AF
DISP_ORI_W          33A6
DISP_POST           3692
DISP_PRE            368B
DISP_ROL_B          3609
DISP_ROL_L          362D
DISP_ROL_W          361B
DISP_ROR_B          3600
DISP_ROR_L          3624
DISP_ROR_W          3612
DISP_RTS            3422
DISP_SUBA_L         34EC
DISP_SUBA_W         34E2
DISP_SUBI_B         34C4
DISP_SUBI_L         34D8
DISP_SUBI_W         34CE
DISP_SUB_B          34A9
DISP_SUB_L          34BB
DISP_SUB_W          34B2
D_MODE000           2156
D_MODE010           219E
D_MODE011           21FE
D_MODE100           221E
D_MODE111           2270
EA_ARITH            204E
EA_DATA             155A
EA_GEN              209A
EA_MOVEA            2074
EA_NOSRC            203A
ENDLINE_M           32FA
END_ADDR            111A
ERRMSG_1            31E1
ERRMSG_3            3200
ERRMSG_5            3225
ERROR_1             117E
ERROR_2             118E
ERROR_3             119E
ERROR_4             11AE
ERROR_5             11BE
E_ADDR_HX           32F6
FINMSG              31B6
GET_DST_FAILED      2D44
GET_DST_START_END   36B1
GET_DST_SUCCESS     2D48
GET_EA_EA_DEST      291A
GET_EA_EA_SRC       24EA
GET_SRC_FAILED      2914
GET_SRC_START_END   36B2
GET_SRC_SUCCESS     2918
HEX2ASCII           1236
HEX2ASCII2STACK     1278
HEX_CHAR            1264
HEX_CONT            1268
HEX_LOOP            124A
IMMD_B              2324
IMMD_L              2364
IMMD_W              2344
IMMEDIATE           22F4
INCREMENT           2DE4
INTRO               1028
IS_ODD              12BC
IS_ODD_ERR          12D2
JMPTABLE            13A8
LF                  A
LONGMODE            22C8
LOOP_SHIFTING       2566
LOOP_SHIFTING1      25F0
LOOP_SHIFTING2      2682
LOOP_SHIFTING3      271C
LOOP_SHIFTING4      27C6
MAIN                12D8
MASKING_NEXT        2574
MASKING_NEXT1       25FE
MASKING_NEXT2       2690
MASKING_NEXT3       272A
MASKING_NEXT4       27D4
MODE000             2142
MODE001             216A
MODE010             217E
MODE011             21BE
MODE100             21DE
MODE111             223E
NEXTLINES           138A
OP0000              1408
OP0001              162E
OP0010              169C
OP0011              16FE
OP0100              175E
OP0101              18F8
OP0110              1974
OP0111              1A02
OP1000              1A06
OP1001              1A42
OP1010              1B1A
OP1011              1B1E
OP1100              1C1A
OP1101              1CB6
OP1110              1D88
OP1111              2036
OP_ADDA_L           1D70
OP_ADDA_W           1D58
OP_ADDQ             1918
OP_ADDQ_B           193E
OP_ADDQ_L           1962
OP_ADDQ_W           1950
OP_ADD_B            1D10
OP_ADD_L            1D40
OP_ADD_W            1D28
OP_AND_B            1C80
OP_AND_L            1CA4
OP_AND_W            1C92
OP_ASL              1F28
OP_ASL_B            1F4C
OP_ASL_L            1F5E
OP_ASL_W            1F70
OP_ASR              1ECE
OP_ASR_B            1EF2
OP_ASR_L            1F04
OP_ASR_W            1F16
OP_ASX              1DEA
OP_BEQ              19D8
OP_BHI              19BC
OP_BLT              19F4
OP_BNE              19CA
OP_BRA              19E6
OP_BTST             147C
OP_CMPA_L           1B8A
OP_CMPA_W           1B78
OP_CMPI             1582
OP_CMPI_B           15A2
OP_CMPI_L           15C6
OP_CMPI_W           15B4
OP_CMP_B            1B9C
OP_CMP_L            1BCC
OP_CMP_W            1BB4
OP_DATA             1536
OP_DIVS             1A2E
OP_EORI             148A
OP_EORI_B           14AA
OP_EORI_L           14CE
OP_EORI_W           14BC
OP_EOR_B            1BE4
OP_EOR_L            1C08
OP_EOR_W            1BF6
OP_JSR              18D6
OP_LEA              1804
OP_LSL              1E74
OP_LSL_B            1E98
OP_LSL_L            1EAA
OP_LSL_W            1EBC
OP_LSR              1E1A
OP_LSR_B            1E3E
OP_LSR_L            1E50
OP_LSR_W            1E62
OP_LSX              1DD2
OP_MOVEA_L          16E0
OP_MOVEA_W          1740
OP_MOVEM_L          17F2
OP_MOVEM_W          17E0
OP_MOVE_B           1634
OP_MOVE_L           16C2
OP_MOVE_W           1722
OP_MULS             1C6C
OP_NEG              1818
OP_NEG_B            1838
OP_NEG_L            1868
OP_NEG_W            1850
OP_NOT              1880
OP_NOT_B            18A0
OP_NOT_L            18C4
OP_NOT_W            18B2
OP_ORI              15D8
OP_ORI_B            15F8
OP_ORI_L            161C
OP_ORI_W            160A
OP_ROL              1FDC
OP_ROL_B            2000
OP_ROL_L            2012
OP_ROL_W            2024
OP_ROR              1F82
OP_ROR_B            1FA6
OP_ROR_L            1FB8
OP_ROR_W            1FCA
OP_ROX              1E02
OP_RTS              18EA
OP_SUBA_L           1B08
OP_SUBA_W           1AF6
OP_SUBI             14E0
OP_SUBI_B           1500
OP_SUBI_L           1524
OP_SUBI_W           1512
OP_SUB_B            1AAE
OP_SUB_L            1ADE
OP_SUB_W            1AC6
OUTPUT_PROCESSED_DATA  135C
POINTER_WORD        36CA
POP_FRONT           2D9E
POP_FRONT_RETURN    2DD8
POP_RETURN          2D9C
POP_SHIFT_LOOP      2DBA
POP_STACK           2D90
PRINT_QUEUE         2D64
PRINT_QUEUE_HELPER  2D70
PRINT_QUEUE_RETURN  2D86
PRINT_STACK         2D4A
PRINT_STACK_HELPER  2D56
PRINT_STACK_RETURN  2D62
PROGLP              100A
PROMPT_END          311C
PROMPT_START        30ED
PUSH_STACK          2D88
QUEUE_COUNTER       36AC
REG_0               2438
REG_1               2446
REG_2               2454
REG_3               2462
REG_4               2470
REG_5               247E
REG_6               248C
REG_7               249A
REPEAT              24A8
REPEATMSG           3173
RETURN              1234
SRC_LOOP_SHIFTING   2826
SRC_MASKING_NEXT    2834
SRC_MODE            20F8
SRC_REGISTER        23E0
SRC_REGISTER_FORMAT  36AF
STACK               7000
STACK_HEX_CHAR      12A6
STACK_HEX_CONT      12AA
STACK_HEX_LOOP      128C
START               1004
START_ADDR          10C8
S_ADDR_HX           32F2
TEMP_REGISTER_FORMAT  36B0
TERMINATE           2E06
TESTING             1036
TMPINPUT            32FD
TMPOUTPUT           334D
VAR_BYTE_END        36B8
VAR_BYTE_START      36B4
VAR_LONG_ADDRESS_MODE_CHECK  36C0
VAR_TEMP_CLEANCOPY  36BC
VR_E_ADDR           32A2
VR_S_ADDR           3252
WELCOME             2E18
WORDMODE            229C

00001004 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/7/2014 10:34:33 PM

00000000                             1  *---------------------------------------------------------------------------*
00000000                             2  * Title      : 68K Disassembler
00000000                             3  * Written by : Team Circle
00000000                             4  * Date       : 12/05/14
00000000                             5  * Description: Scans a section of memory and converts its
00000000                             6  *              contents to a listing of valid assembly 
00000000                             7  *              language instructions
00000000                             8  *---------------------------------------------------------------------------*
00000000                             9  
00000000                            10  *---------------------------------------------------------------------------*
00000000                            11  * System Equates                                                 
00000000                            12  *---------------------------------------------------------------------------*
00000000  =0000000D                 13  CR          EQU     $0D                     * ASCII for Carriage Return
00000000  =0000000A                 14  LF          EQU     $0A                     * ASCII for Line Feed 
00000000  =00007000                 15  STACK       EQU     $7000                   * Initial Stack Pointer                         
00000000                            16              
00000000                            17  *---------------------------------------------------------------------------*
00000000                            18  * Reserved Registers
00000000                            19  *---------------------------------------------------------------------------*  
00000000                            20  * D0 - I/O
00000000                            21  * D1 - Temporary storage of processing data
00000000                            22  * D3 - [PUSH_STACK]
00000000                            23  * D4 - Opcode size (0 - byte; 1- word; 2-long)
00000000                            24  * D5 - Processing data
00000000                            25  * D6 - Loop counter to print 30 lines
00000000                            26  * D7 - Error flag
00000000                            27  * A2 - [STACK POINTER]
00000000                            28  * A5 - Processing address in hex
00000000                            29  
00000000                            30  *---------------------------------------------------------------------------*
00000000                            31  * Start and loop program
00000000                            32  *---------------------------------------------------------------------------*  
00001000                            33              ORG     $1000
00001000  4FF8 7000                 34              LEA     STACK,SP
00001004                            35  START:            
00001004  4EB9 00001028             36              JSR     INTRO                 
0000100A  4EB9 0000107C             37  PROGLP      JSR     START_ADDR
00001010  4EB9 000010CE             38              JSR     END_ADDR
00001016  43F9 00002E1C             39              LEA     ENDLINE_M,A1           * Add a new line
0000101C  103C 000E                 40              MOVE.B  #14, D0                  * Display A1
00001020  4E4F                      41              TRAP    #15
00001022                            42              
00001022  4EF9 0000128C             43              JMP     MAIN
00001028                            44              
00001028                            45  *---------------------------------------------------------------------------*
00001028                            46  * INTRO: Display the introduction of the program
00001028                            47  *---------------------------------------------------------------------------*
00001028  43F9 0000293A             48  INTRO       LEA     WELCOME,A1              * Load PROMPT_START
0000102E  103C 000E                 49              MOVE.B  #14,D0                  * Display A1
00001032  4E4F                      50              TRAP    #15
00001034  4E75                      51              RTS
00001036                            52  TESTING
00001036  11FC 0070 3333            53              MOVE.B  #$70,$3333
0000103C  11FC 0096 3333            54              MOVE.B  #150,$3333
00001042  11FC 00FF 3333            55              MOVE.B  #255,$3333
00001048                            56              
00001048  11F8 7000 3333            57              MOVE.B  $7000,$3333
0000104E  31F8 7000 3333            58              MOVE.W  $7000,$3333
00001054  21F8 7000 3333            59              MOVE.L  $7000,$3333
0000105A                            60              
0000105A  1238 7000                 61              MOVE.B  $00007000,D1   
0000105E  3238 7000                 62              MOVE.W  $00007000,D1   
00001062  2238 7000                 63              MOVE.L  $00007000,D1  
00001066                            64            
00001066  11C1 3030                 65              MOVE.B  D1,$3030         
0000106A  31C1 3030                 66              MOVE.W  D1,$3030         
0000106E  21C1 3030                 67              MOVE.L  D1,$3030
00001072                            68              
00001072  1001                      69              MOVE.B  D1,D0           * PASSED JUST SRC, NOT DEST
00001074  1210                      70              MOVE.B  (A0),D1         * PASSED JUST SRC, NOT DEST
00001076  1218                      71              MOVE.B  (A0)+,D1        * PASSED JUST SRC, NOT DEST
00001078  1220                      72              MOVE.B  -(A0),D1        * PASSED JUST SRC, NOT DEST
0000107A                            73              
0000107A  4E75                      74              RTS
0000107C                            75  *---------------------------------------------------------------------------*
0000107C                            76  * START_ADDR: Compute the starting address
0000107C                            77  *---------------------------------------------------------------------------*
0000107C                            78  START_ADDR
0000107C                            79              * Output
0000107C  43F9 00002C0F             80              LEA     PROMPT_START,A1         * Load PROMPT_START 
00001082  103C 000E                 81              MOVE.B  #14,D0                  * Display PROMPT_START
00001086  4E4F                      82              TRAP    #15
00001088                            83      
00001088                            84              * Input
00001088  43F9 00002D74             85              LEA     VR_S_ADDR,A1            * Load VR_S_ADDR
0000108E  103C 0002                 86              MOVE.B  #2,D0                   * Ask user for input
00001092  4E4F                      87              TRAP    #15
00001094                            88              
00001094                            89              * Error Checking (length)
00001094  0C01 0000                 90              CMPI.B  #0, D1                  * Check if input length <= 0
00001098  6F00 0098                 91              BLE     ERROR_1
0000109C  0C01 0008                 92              CMPI.B  #8, D1                  * Check if input length > 8
000010A0  6E00 0090                 93              BGT     ERROR_1
000010A4                            94              
000010A4                            95              * Conversion & Storage
000010A4  4EB9 00001182             96              JSR     ASCII2HEX               * Jump to ASCII2HEX
000010AA  0C07 0001                 97              CMPI.B  #1, D7                  * Check for error
000010AE  6700 0082                 98              BEQ     ERROR_1                 
000010B2  23C1 00002E14             99              MOVE.L  D1, S_ADDR_HX           * Move the result to S_ADDR_HX 
000010B8                           100              
000010B8                           101              * Error Checking (Odd)
000010B8  43F9 00002E14            102              LEA     S_ADDR_HX, A1           * Load 'S_ADDR_HX' for odd error
000010BE  4EB9 00001270            103              JSR     IS_ODD                  * Check if the input address is odd
000010C4  0C07 0001                104              CMPI.B  #1, D7                  * Check for error
000010C8  6700 0088                105              BEQ     ERROR_3
000010CC                           106              
000010CC                           107              * Return
000010CC  4E75                     108              RTS     
000010CE                           109  *---------------------------------------------------------------------------*
000010CE                           110  * END_ADDR: Compute the ending address
000010CE                           111  *---------------------------------------------------------------------------*
000010CE                           112  END_ADDR
000010CE                           113              * Output
000010CE  43F9 00002C3E            114              LEA     PROMPT_END,A1           * Load PROMPT_END
000010D4  103C 000E                115              MOVE.B  #14,D0                  * Display PROMPT_END
000010D8  4E4F                     116              TRAP    #15
000010DA                           117  
000010DA                           118              * Input
000010DA  43F9 00002DC4            119              LEA     VR_E_ADDR,A1            * Load VR_E_ADDR
000010E0  103C 0002                120              MOVE.B  #2,D0                   * Ask user for input
000010E4  4E4F                     121              TRAP    #15
000010E6                           122              
000010E6                           123              * Error Checking (length)
000010E6  0C01 0000                124              CMPI.B  #0, D1                  * Check if input length <= 0
000010EA  6F00 0056                125              BLE     ERROR_2
000010EE  0C01 0008                126              CMPI.B  #8, D1                  * Check if input length > 8
000010F2  6E00 004E                127              BGT     ERROR_2
000010F6                           128              
000010F6                           129              * Conversion & Storage
000010F6  4EB9 00001182            130              JSR     ASCII2HEX               * Jump to ASCII2HEX
000010FC  0C07 0001                131              CMPI.B  #1, D7                  * Check for error
00001100  6700 0040                132              BEQ     ERROR_2
00001104  23C1 00002E18            133              MOVE.L  D1, E_ADDR_HX           * Move the result to E_ADDR_HX
0000110A                           134              
0000110A                           135              * Error Checking (start > end case)
0000110A  2439 00002E14            136              MOVE.L  S_ADDR_HX, D2           * Move the starting address to D2
00001110  B282                     137              CMP.L   D2, D1                  * Compare starting and ending address
00001112  6300 005E                138              BLS     ERROR_5                 * Go to ERROR_5 if ending < starting
00001116                           139              
00001116                           140              * Error Checking (Odd case)
00001116  43F9 00002E18            141              LEA     E_ADDR_HX, A1           * Move the ending address
0000111C  4EB9 00001270            142              JSR     IS_ODD                  * Go to IS_ODD for odd address checking
00001122  0C07 0001                143              CMPI.B  #1, D7                  * Check for an error flag
00001126  6700 003A                144              BEQ     ERROR_4
0000112A                           145              
0000112A                           146              * Inputs are valid
0000112A  2A79 00002E14            147              MOVE.L  S_ADDR_HX, A5           * Store the valid input in A5
00001130                           148              
00001130  4E75                     149              RTS
00001132                           150              
00001132                           151  *---------------------------------------------------------------------------*
00001132                           152  * ERROR_1: Address error (Invalid starting address)
00001132                           153  *---------------------------------------------------------------------------*
00001132                           154  ERROR_1
00001132  43F9 00002D03            155              LEA     ERRMSG_1, A1            * Load ERRMSG_1
00001138  103C 000E                156              MOVE.B  #14, D0                 * Display ERRMSG_1
0000113C  4E4F                     157              TRAP    #15
0000113E  4EF8 107C                158              JMP     START_ADDR              * Jump to START_ADDR
00001142                           159      
00001142                           160  *---------------------------------------------------------------------------*
00001142                           161  * ERROR_2: Address error (Invalid ending address)
00001142                           162  *---------------------------------------------------------------------------*
00001142                           163  ERROR_2
00001142  43F9 00002D03            164              LEA     ERRMSG_1, A1            * Load ERRMSG_1
00001148  103C 000E                165              MOVE.B  #14, D0                 * Display ERRMSG_1
0000114C  4E4F                     166              TRAP    #15
0000114E  4EF8 10CE                167              JMP     END_ADDR                * Jump to END_ADDR
00001152                           168  
00001152                           169  *---------------------------------------------------------------------------*
00001152                           170  * ERROR_3: Address error (Odd starting address)
00001152                           171  *---------------------------------------------------------------------------*
00001152                           172  ERROR_3
00001152  43F9 00002D22            173              LEA     ERRMSG_3, A1
00001158  103C 000E                174              MOVE.B  #14, D0
0000115C  4E4F                     175              TRAP    #15
0000115E  4EF8 107C                176              JMP     START_ADDR
00001162                           177     
00001162                           178  *---------------------------------------------------------------------------*
00001162                           179  * ERROR_4: Address error (Odd ending address)
00001162                           180  *---------------------------------------------------------------------------*         
00001162                           181  ERROR_4
00001162  43F9 00002D22            182              LEA     ERRMSG_3, A1
00001168  103C 000E                183              MOVE.B  #14, D0
0000116C  4E4F                     184              TRAP    #15
0000116E  4EF8 10CE                185              JMP     END_ADDR
00001172                           186            
00001172                           187  *---------------------------------------------------------------------------*
00001172                           188  * ERROR_3: Address error (Ending address is less than starting address)
00001172                           189  *---------------------------------------------------------------------------*
00001172                           190  ERROR_5
00001172  43F9 00002D47            191              LEA     ERRMSG_5, A1
00001178  103C 000E                192              MOVE.B  #14, D0
0000117C  4E4F                     193              TRAP    #15
0000117E  4EF8 10CE                194              JMP     END_ADDR
00001182                           195    
00001182                           196  *---------------------------------------------------------------------------*
00001182                           197  * ASCII2HEX: Convert ASCii to Hexadecimal
00001182                           198  * Reserved registers: A1 = Source, D1 = Destination, D2 = Byte, D7 = Error
00001182                           199  *---------------------------------------------------------------------------*
00001182  4281                     200  ASCII2HEX   CLR.L   D1                      * Clear the destination 
00001184  4287                     201              CLR.L   D7                      * Set the error flag to 0
00001186  4282                     202              CLR.L   D2                      * Clear D2 for temp storage
00001188                           203              
00001188  1419                     204  ASC2HXLP    MOVE.B  (A1)+, D2               * Read a byte to D2
0000118A  0C02 0000                205              CMPI.B  #0, D2                  * Check for NULL (indicates the end of source)
0000118E  6700 0058                206              BEQ     RETURN                  * If it's NULL, go to return
00001192  0C02 0066                207              CMPI.B  #102, D2                * Decimal ASCII value of f is 102
00001196  6E00 004C                208              BGT     ASC_ERR                 * ASCII > f (invalid input) 
0000119A  0C02 0061                209              CMPI.B  #97, D2                 * Decimal ASCII value of a is 97
0000119E  6C00 0026                210              BGE     ASC_LOW                 * ASCII >= a (valid input)
000011A2  0C02 0046                211              CMPI.B  #70, D2                 * Decimal ASCII value of F is 70
000011A6  6E00 003C                212              BGT     ASC_ERR                 * ASCII > F (invalid input)
000011AA  0C02 0041                213              CMPI.B  #65, D2                 * Decimal ASCII value of A is 65
000011AE  6C00 001E                214              BGE     ASC_UPP                 * ASCII >= A (valid input)
000011B2  0C02 0039                215              CMPI.B  #57, D2                 * Decimal value of 9 is 57
000011B6  6E00 002C                216              BGT     ASC_ERR                 * ASCII > 9 (invalid input)
000011BA  0C02 0030                217              CMPI.B  #48, D2                 * Decimal ASCII value of 0 is 48
000011BE  6C00 0016                218              BGE     ASC_NUM                 * ASCII >= 0 (valid input)
000011C2  6000 0020                219              BRA     ASC_ERR                 * Invalid input
000011C6                           220  
000011C6  0442 0057                221  ASC_LOW     SUBI    #87, D2                 * Convert the ASCII input to Hex
000011CA  6000 0012                222              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011CE                           223              
000011CE  0442 0037                224  ASC_UPP     SUBI    #55, D2                 * Convert the ASCII input to Hex
000011D2  6000 000A                225              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011D6                           226              
000011D6  0442 0030                227  ASC_NUM     SUBI    #48, D2                 * Convert the ASCII input to Hex
000011DA  6000 0002                228              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011DE                           229              
000011DE  E981                     230  ASC_SFT     ASL.L   #4, D1                  * Shift the dest to left by 4 bits
000011E0  D202                     231              ADD.B   D2, D1                  * Add the converted input to D1
000011E2  60A4                     232              BRA     ASC2HXLP                * Loop
000011E4                           233  
000011E4  1E3C 0001                234  ASC_ERR     MOVE.B  #1, D7                  * Set the error flag to 1            
000011E8  4E75                     235  RETURN      RTS     
000011EA                           236  
000011EA                           237  *---------------------------------------------------------------------------*
000011EA                           238  * HEX2ASCII: Convert Hexadecimal to ASCii 
000011EA                           239  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
000011EA                           240  *---------------------------------------------------------------------------*
000011EA  0C02 0008                241  HEX2ASCII   CMPI.B  #8, D2                  * Check to see if the size is long
000011EE  6700 000E                242              BEQ     HEX_LOOP
000011F2  4841                     243              SWAP    D1
000011F4  0C02 0002                244              CMPI.B  #2,D2
000011F8  6600 0004                245              BNE     HEX_LOOP
000011FC  E189                     246              LSL.L   #8,D1
000011FE                           247             
000011FE  E999                     248  HEX_LOOP    ROL.L   #4, D1                  * Roll D1 to left
00001200  2601                     249              MOVE.L  D1, D3                  * Move D1 to D3
00001202  0283 0000000F            250              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
00001208  0C03 0009                251              CMPI.B  #9, D3                  * Compare te digit
0000120C  6E00 000A                252              BGT     HEX_CHAR              
00001210  0603 0030                253              ADDI.B  #48,D3                  * Add 48 for numerical output
00001214  6000 0006                254              BRA     HEX_CONT
00001218                           255              
00001218  0603 0037                256  HEX_CHAR    ADDI.B  #55,D3                  * Add 55 for character output
0000121C                           257  
0000121C  12C3                     258  HEX_CONT    MOVE.B  D3, (A1)+               * Place into A1
0000121E  5342                     259              SUBI    #1, D2                  * Decrement the size
00001220  0C02 0000                260              CMPI.B  #0, D2                  * Check if D2 is 0
00001224  66D8                     261              BNE     HEX_LOOP                * Loop
00001226  12BC 0000                262              MOVE.B  #$0,(A1)                * Null terminator
0000122A  4E75                     263              RTS
0000122C                           264  *---------------------------------------------------------------------------*
0000122C                           265  * HEX2ASCII2STACK: Convert Hexadecimal to ASCii 
0000122C                           266  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
0000122C                           267  *---------------------------------------------------------------------------*
0000122C                           268  HEX2ASCII2STACK
0000122C  0C02 0008                269              CMPI.B  #8, D2                  * Check to see if the size is long
00001230  6700 000E                270              BEQ     STACK_HEX_LOOP
00001234  4841                     271              SWAP    D1
00001236  0C02 0002                272              CMPI.B  #2,D2
0000123A  6600 0004                273              BNE     STACK_HEX_LOOP
0000123E  E189                     274              LSL.L   #8,D1
00001240                           275             
00001240                           276  STACK_HEX_LOOP    
00001240  E999                     277              ROL.L   #4, D1                  * Roll D1 to left
00001242  2601                     278              MOVE.L  D1, D3                  * Move D1 to D3
00001244  0283 0000000F            279              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
0000124A  0C03 0009                280              CMPI.B  #9, D3                  * Compare te digit
0000124E  6E00 000A                281              BGT     STACK_HEX_CHAR              
00001252  0603 0030                282              ADDI.B  #48,D3                  * Add 48 for numerical output
00001256  6000 0006                283              BRA     STACK_HEX_CONT
0000125A                           284              
0000125A                           285  STACK_HEX_CHAR    
0000125A  0603 0037                286              ADDI.B  #55,D3                  * Add 55 for character output
0000125E                           287  
0000125E                           288  STACK_HEX_CONT    
0000125E  6100 164A                289              BSR     PUSH_STACK              *PLACE INTO STACK
00001262  5342                     290              SUBI    #1, D2                  * Decrement the size
00001264  0C02 0000                291              CMPI.B  #0, D2                  * Check if D2 is 0
00001268  66D6                     292              BNE     STACK_HEX_LOOP                * Loop
0000126A  12BC 0000                293              MOVE.B  #$0,(A1)                * Null terminator
0000126E  4E75                     294              RTS
00001270                           295  
00001270                           296  
00001270                           297  *---------------------------------------------------------------------------*
00001270                           298  * IS_ODD: Check whether the source address is odd
00001270                           299  * Reserved registers: A1 = Source, D1 = Result, D7 = error flag
00001270                           300  *---------------------------------------------------------------------------*
00001270  4281                     301  IS_ODD      CLR.L   D1                      * Clear the result
00001272  4287                     302              CLR.L   D7                      * Set the error flag to 0
00001274  2211                     303              MOVE.L  (A1),D1                * Temp store the checking address to D1
00001276  82FC 0002                304              DIVU    #2, D1                  * Divide the result by 2
0000127A  4841                     305              SWAP    D1                      * Swap remainder with quotient
0000127C  0C01 0001                306              CMPI.B  #1, D1                  * Check for error
00001280  6700 0004                307              BEQ     IS_ODD_ERR
00001284  4E75                     308              RTS
00001286                           309              
00001286  1E3C 0001                310  IS_ODD_ERR  MOVE.B  #1, D7
0000128A  4E75                     311              RTS
0000128C                           312  
0000128C                           313  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*
0000128C                           314  * MAIN                    
0000128C                           315  * A2: STACK POINTER                                                      MAIN                                                                        MAIN
0000128C                           316  * A5: Processing address
0000128C                           317  *
0000128C                           318  * D3: USED FOR PUSHING INTO STACK
0000128C                           319  *     To push into stack => MOVE.W #DATA,D3 
0000128C                           320  *                           BSR    PUSH_STACK
0000128C                           321  *     To print stack     => BSR    PRINT_STACK 
0000128C                           322  *     To clear stack     => BSR    CLEAR_STACK
0000128C                           323  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*  
0000128C                           324  MAIN        
0000128C                           325              *initialize stack pointer
0000128C  33FC 0000 000031CC       326              MOVE.W  #0,COUNTER
00001294  347C 7000                327              MOVEA.W #STACK,A2
00001298  163C 0020                328              MOVE.B  #' ',D3
0000129C  6100 160C                329              BSR     PUSH_STACK
000012A0  6100 1608                330              BSR     PUSH_STACK
000012A4  6100 1604                331              BSR     PUSH_STACK
000012A8                           332              
000012A8                           333              * clear registers for temp storage
000012A8  4280                     334              CLR.L   D0                   
000012AA  4281                     335              CLR.L   D1                   
000012AC  227C 00000000            336              MOVEA.L #0, A1                
000012B2                           337              
000012B2  220D                     338              MOVE.L  A5,D1                   * check to see if the address is fully read
000012B4  23CD 00002E14            339              MOVE.L  A5,S_ADDR_HX
000012BA  B2B9 00002E18            340              CMP.L   E_ADDR_HX,D1
000012C0  6C00 1196                341              BGE     REPEAT                  * go to repeat for user action
000012C4                           342  
000012C4  43F9 00002E6F            343              LEA     TMPOUTPUT,A1            * allocate storage to hold output
000012CA  143C 0008                344              MOVE.B  #8,D2                   * set the output size
000012CE  4EB8 11EA                345              JSR     HEX2ASCII               
000012D2  43F9 00002E6F            346              LEA     TMPOUTPUT,A1
000012D8  103C 000E                347              MOVE.B  #14,D0
000012DC  4E4F                     348              TRAP    #15
000012DE                           349              
000012DE  4285                     350              CLR.L    D5                      * clear the processing data
000012E0  3A1D                     351              MOVE.W  (A5)+,D5                 * copy the currently processing data in A5 over to D5
000012E2                           352                                               * advance the current instruction pointer to the next
000012E2                           353                                               * instruction in memory
000012E2                           354  *----------------------------------------*
000012E2                           355  * Registers          
000012E2                           356  * [D1] - COPY OF D5
000012E2                           357  * [D5] - DATA TO BE PROCESSED
000012E2                           358  * [D6] - COUNTER FOR LINES PROCESSED
000012E2                           359  *
000012E2                           360  * [D4]      - ERROR FLAG BEFORE PRINTING
000012E2                           361  * [STACK]   - PRINTS PROCESS DATA
000012E2                           362  * [COUNTER] - KEEPS TRACK OF STACK INCREMENT
000012E2                           363  *
000012E2                           364  * [A1] - USED FOR JUMPING/PRINTING
000012E2                           365  *
000012E2                           366  *----------------------------------------*
000012E2                           367  
000012E2                           368              
000012E2                           369              *Processing the first 4 most significant bits 
000012E2  2205                     370              MOVE.L  D5,D1                    * copy the current processing data to D1
000012E4  143C 000C                371              MOVE.B  #12,D2                   * shift to right by 12 bits
000012E8  E469                     372              LSR.W   D2,D1                    * [D2] Temporarily used D2 for shifting bits
000012EA  C2FC 0006                373              MULU    #6,D1                    * form offset
000012EE  43F9 0000135C            374              LEA     JMPTABLE,A1              * index into table
000012F4  4EB1 1000                375              JSR     0(A1,D1)                 * jump indirect with index
000012F8                           376              
000012F8                           377              *SECURED EA*
000012F8  B83C 0001                378              CMP.B   #1,D4                    * ERROR FLAG CHECK [ERROR WHEN D4 == 1]
000012FC  6600 0012                379              BNE     OUTPUT_PROCESSED_DATA    * PRINTS PROCESSED OP-CODE & EA
00001300  6100 01E8                380              BSR     OP_DATA                  * PRINT ERROR MESSAGE "DATA"
00001304  6100 1610                381              BSR     CLEAR_STACK              * CLEARS THE STACK 
00001308  183C 0000                382              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
0000130C  6000 0022                383              BRA     DISPLAY_30_LINES         * GO TO LAST STEP
00001310                           384             
00001310                           385  OUTPUT_PROCESSED_DATA       
00001310  163C 000D                386              MOVE.B  #$D,D3                  *carriage return
00001314  6100 1594                387              BSR     PUSH_STACK
00001318  163C 000A                388              MOVE.B  #$A,D3                  *new line feed
0000131C  6100 158C                389              BSR     PUSH_STACK
00001320  163C 0000                390              MOVE.B  #$0,D3                  *null
00001324  6100 1584                391              BSR     PUSH_STACK
00001328                           392       
00001328  6100 155C                393              BSR     PRINT_QUEUE
0000132C  183C 0000                394              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
00001330                           395  DISPLAY_30_LINES
00001330                           396              * display 30 lines per page
00001330  5206                     397              ADDI.B  #1,D6
00001332  0C06 001E                398              CMPI.B  #30,D6
00001336  6C00 0006                399              BGE     NEXTLINES
0000133A  6000 FF50                400              BRA     MAIN
0000133E                           401            
0000133E                           402  *---------------------------------------------------------------------------*
0000133E                           403  * NEXTLINES: receive input from user to print the next 30 lines
0000133E                           404  *---------------------------------------------------------------------------*  
0000133E  4206                     405  NEXTLINES   CLR.B   D6
00001340  43F9 00002C6B            406              LEA     DISP_NEXT,A1
00001346  103C 000E                407              MOVE.B  #14,D0
0000134A  4E4F                     408              TRAP    #15
0000134C  43F9 00002E1F            409              LEA     TMPINPUT,A1
00001352  103C 0002                410              MOVE.B  #2,D0
00001356  4E4F                     411              TRAP    #15
00001358  4EF8 128C                412              JMP     MAIN
0000135C                           413    
0000135C                           414  *---------------------------------------------------------------------------*
0000135C                           415  * JMPTABLE: OP code jump/branch table used to decode and display opcodes
0000135C                           416  *---------------------------------------------------------------------------*  
0000135C  4EF9 000013BC            417  JMPTABLE    JMP     OP0000  * CMPI/ORI/BTST/EORI/SUBI/BTST
00001362  4EF9 000015E2            418              JMP     OP0001  * MOVE.B                                        *WORKING ON - JOSEPH
00001368  4EF9 0000164C            419              JMP     OP0010  * MOVE.L/MOVEA.L
0000136E  4EF9 000016AE            420              JMP     OP0011  * MOVE.W/MOVEA.W
00001374  4EF9 0000170E            421              JMP     OP0100  * MOVEM/LEA/NEG/NOT/JSR/RTS
0000137A  4EF9 000018A8            422              JMP     OP0101  * ADDQ
00001380  4EF9 00001924            423              JMP     OP0110  * BRA/Bcc (BEQ/BNE/BLT/BHI)
00001386  4EF9 000019B2            424              JMP     OP0111  * MOVEQ (unassigned)
0000138C  4EF9 000019B6            425              JMP     OP1000  * DIVS
00001392  4EF9 000019F2            426              JMP     OP1001  * SUB/SUBA
00001398  4EF9 00001ACA            427              JMP     OP1010  * Unassigned 
0000139E  4EF9 00001ACE            428              JMP     OP1011  * CMP/EOR/CMPA
000013A4  4EF9 00001BCA            429              JMP     OP1100  * MULS/AND
000013AA  4EF9 00001C66            430              JMP     OP1101  * ADD/ADDA
000013B0  4EF9 00001D38            431              JMP     OP1110  * LSR/LSL/ASR/ASL/ROL/ROR
000013B6  4EF9 00001FE6            432              JMP     OP1111  * Special/Reserved
000013BC                           433              
000013BC                           434  *---------------------------------------------------------------------------*
000013BC                           435  * OP0000: decode CMPI/ORI/BTST/SUBI/EORI
000013BC                           436  *---------------------------------------------------------------------------*           
000013BC                           437  OP0000                                                                                  
000013BC  4281                     438              CLR.L   D1          * to temporarily store the address to process
000013BE  4280                     439              CLR.L   D0  
000013C0  4284                     440              CLR.L   D4                 
000013C2  227C 00000000            441              MOVEA.L #0, A1                
000013C8                           442              * Check for ORI (0000 0000 xx (size) xxx (EA mode) xxx(EA reg)
000013C8                           443              * Check if bit 11,10,9,8 are 0000)
000013C8  2205                     444              MOVE.L  D5,D1
000013CA  0281 00000F00            445              ANDI.L  #$0F00,D1
000013D0  0C81 00000000            446              CMPI.L  #$0000,D1   * if they are 0000, it is ORI
000013D6  6700 01B4                447              BEQ     OP_ORI
000013DA                           448  
000013DA                           449              * check for CMPI (0000 1100 xx (size) xxx (EA mode) xxx (EA reg)
000013DA                           450              * check if bit 11,10,9,8 are 1100
000013DA  4281                     451              CLR.L   D1
000013DC  2205                     452              MOVE.L  D5,D1
000013DE  0281 00000F00            453              ANDI.L  #$0F00,D1
000013E4  0C81 00000C00            454              CMPI.L  #$0C00,D1
000013EA  6700 014A                455              BEQ     OP_CMPI
000013EE                           456              
000013EE                           457              * check for SUBI
000013EE  4281                     458              CLR.L   D1
000013F0  2205                     459              MOVE.L  D5,D1
000013F2  0281 00000F00            460              ANDI.L  #$0F00,D1
000013F8  0C81 00000400            461              CMPI.L  #$0400,D1
000013FE  6700 0094                462              BEQ     OP_SUBI
00001402                           463              
00001402                           464              * check for EORI
00001402  4281                     465              CLR.L   D1
00001404  2205                     466              MOVE.L  D5,D1
00001406  0281 00000F00            467              ANDI.L  #$0F00,D1
0000140C  0C81 00000A00            468              CMPI.L  #$0A00,D1
00001412  6700 002A                469              BEQ     OP_EORI
00001416                           470              
00001416                           471              * check for BTST
00001416  4281                     472              CLR.L   D1
00001418  2205                     473              MOVE.L  D5,D1
0000141A  EA99                     474              ROR.L   #5,D1
0000141C  0281 00000008            475              ANDI.L  #$8,D1
00001422  0C01 0008                476              CMPI.B  #8,D1
00001426  6700 0008                477              BEQ     OP_BTST
0000142A                           478  
0000142A                           479              * OP0000 series other than ORI/CMPI/BTST/EORI
0000142A  4EF9 000014EA            480              JMP     OP_DATA
00001430                           481              
00001430                           482  *---------------------------------------------------------------------------*
00001430                           483  * OP_BTST: display BTST
00001430                           484  *---------------------------------------------------------------------------* 
00001430  43F9 00002EF8            485  OP_BTST     LEA     DISP_BTST,A1
00001436  103C 000E                486              MOVE.B  #14,D0
0000143A  4E4F                     487              TRAP    #15
0000143C  4E75                     488              RTS
0000143E                           489  
0000143E                           490  *---------------------------------------------------------------------------*
0000143E                           491  * OP_EORI: decode and display EORI
0000143E                           492  *---------------------------------------------------------------------------* 
0000143E                           493  OP_EORI
0000143E  4281                     494              CLR.L   D1
00001440  4284                     495              CLR.L   D4
00001442  2205                     496              MOVE.L  D5,D1
00001444  EC99                     497              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001446  0C01 0000                498              CMPI.B  #0,D1
0000144A  6700 0012                499              BEQ     OP_EORI_B    * size is byte
0000144E  0C01 0001                500              CMPI.B  #1,D1
00001452  6700 001C                501              BEQ     OP_EORI_W    * size is word
00001456  0C01 0002                502              CMPI.B  #2,D1
0000145A  6700 0026                503              BEQ     OP_EORI_L    * size is long
0000145E                           504  
0000145E                           505  OP_EORI_B    * size is byte    
0000145E  183C 0000                506              MOVE.B  #0,D4
00001462  43F9 00002EDA            507              LEA     DISP_EORI_B,A1
00001468  103C 000E                508              MOVE.B  #14,D0
0000146C  4E4F                     509              TRAP    #15
0000146E  4E75                     510              RTS
00001470                           511              
00001470                           512  OP_EORI_W    * size is word
00001470  183C 0001                513              MOVE.B  #1,D4
00001474  43F9 00002EE4            514              LEA     DISP_EORI_W,A1
0000147A  103C 000E                515              MOVE.B  #14,D0
0000147E  4E4F                     516              TRAP    #15
00001480  4E75                     517              RTS
00001482                           518              
00001482                           519  OP_EORI_L    * size is long
00001482  183C 0002                520              MOVE.B  #2,D4
00001486  43F9 00002EEE            521              LEA     DISP_EORI_L,A1
0000148C  103C 000E                522              MOVE.B  #14,D0
00001490  4E4F                     523              TRAP    #15
00001492  4E75                     524              RTS
00001494                           525              
00001494                           526  *---------------------------------------------------------------------------*
00001494                           527  * OP_SUBI: decode SUBI.B/.W/.L
00001494                           528  *---------------------------------------------------------------------------* 
00001494                           529  OP_SUBI
00001494  4281                     530              CLR.L   D1
00001496  4284                     531              CLR.L   D4
00001498  2205                     532              MOVE.L  D5,D1
0000149A  EC99                     533              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
0000149C  0C01 0000                534              CMPI.B  #0,D1
000014A0  6700 0012                535              BEQ     OP_SUBI_B    * size is byte
000014A4  0C01 0001                536              CMPI.B  #1,D1
000014A8  6700 001C                537              BEQ     OP_SUBI_W    * size is word
000014AC  0C01 0002                538              CMPI.B  #2,D1
000014B0  6700 0026                539              BEQ     OP_SUBI_L    * size is long
000014B4                           540  
000014B4                           541  OP_SUBI_B    * size is byte    
000014B4  183C 0000                542              MOVE.B  #0,D4
000014B8  43F9 00002FE6            543              LEA     DISP_SUBI_B,A1
000014BE  103C 000E                544              MOVE.B  #14,D0
000014C2  4E4F                     545              TRAP    #15
000014C4  4E75                     546              RTS
000014C6                           547              
000014C6                           548  OP_SUBI_W    * size is word
000014C6  183C 0001                549              MOVE.B  #1,D4
000014CA  43F9 00002FF0            550              LEA     DISP_SUBI_W,A1
000014D0  103C 000E                551              MOVE.B  #14,D0
000014D4  4E4F                     552              TRAP    #15
000014D6  4E75                     553              RTS
000014D8                           554              
000014D8                           555  OP_SUBI_L    * size is long
000014D8  183C 0002                556              MOVE.B  #2,D4
000014DC  43F9 00002FFA            557              LEA     DISP_SUBI_L,A1
000014E2  103C 000E                558              MOVE.B  #14,D0
000014E6  4E4F                     559              TRAP    #15
000014E8  4E75                     560              RTS
000014EA                           561              
000014EA                           562  *---------------------------------------------------------------------------*
000014EA                           563  * OP_DATA : unidentified opcode
000014EA                           564  *---------------------------------------------------------------------------* 
000014EA                           565  OP_DATA
000014EA  4280                     566              CLR.L   D0                   
000014EC  4281                     567              CLR.L   D1     
000014EE  4284                     568              CLR.L   D4                    
000014F0  227C 00000000            569              MOVEA.L #0, A1             
000014F6  4287                     570              CLR.L   D7
000014F8  1E3C 0001                571              MOVE.B  #1,D7                   * error flag is true
000014FC                           572              
000014FC  43F9 00002F1E            573              LEA     DISP_DATA,A1
00001502  103C 000E                574              MOVE.B  #14,D0
00001506  4E4F                     575              TRAP    #15
00001508                           576              
00001508  4EF9 0000150E            577              JMP     EA_DATA
0000150E                           578             
0000150E                           579             
0000150E                           580  *---------------------------------------------------------------------------*
0000150E                           581  * EA_DATA
0000150E                           582  *---------------------------------------------------------------------------*       
0000150E  43F9 00002E6F            583  EA_DATA     LEA     TMPOUTPUT,A1    * load the temporarily stored output address
00001514  2205                     584              MOVE.L  D5,D1           * transfer the processing data to D1
00001516  7404                     585              MOVE.L  #4,D2           * set to word size
00001518  4EB8 11EA                586              JSR     HEX2ASCII       * prepare output in ascii
0000151C  43F9 00003191            587              LEA     DISP_HEX,A1     * display $ symbol
00001522  103C 000E                588              MOVE.B  #14,D0      
00001526  4E4F                     589              TRAP    #15
00001528  43F9 00002E6F            590              LEA     TMPOUTPUT,A1    * display with a new line
0000152E  103C 000D                591              MOVE.B  #13,D0
00001532  4E4F                     592              TRAP    #15
00001534                           593  
00001534  4E75                     594              RTS
00001536                           595              
00001536                           596  *---------------------------------------------------------------------------*
00001536                           597  * OP_CMPI : decode CMPI and its size
00001536                           598  *---------------------------------------------------------------------------*          
00001536                           599  OP_CMPI
00001536  4281                     600              CLR.L   D1
00001538  4284                     601              CLR.L   D4
0000153A  2205                     602              MOVE.L  D5,D1
0000153C  EC99                     603              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
0000153E  0C01 0000                604              CMPI.B  #0,D1
00001542  6700 0012                605              BEQ     OP_CMPI_B    * size is byte
00001546  0C01 0001                606              CMPI.B  #1,D1
0000154A  6700 001C                607              BEQ     OP_CMPI_W    * size is word
0000154E  0C01 0002                608              CMPI.B  #2,D1
00001552  6700 0026                609              BEQ     OP_CMPI_L    * size is long
00001556                           610  
00001556                           611  OP_CMPI_B    * size is byte    
00001556  183C 0000                612              MOVE.B  #0,D4
0000155A  43F9 00002F00            613              LEA     DISP_CMPI_B,A1
00001560  103C 000E                614              MOVE.B  #14,D0
00001564  4E4F                     615              TRAP    #15
00001566  4E75                     616              RTS
00001568                           617              
00001568                           618  OP_CMPI_W    * size is word
00001568  183C 0001                619              MOVE.B  #1,D4
0000156C  43F9 00002F0A            620              LEA     DISP_CMPI_W,A1
00001572  103C 000E                621              MOVE.B  #14,D0
00001576  4E4F                     622              TRAP    #15
00001578  4E75                     623              RTS
0000157A                           624              
0000157A                           625  OP_CMPI_L    * size is long
0000157A  183C 0002                626              MOVE.B  #2,D4
0000157E  43F9 00002F14            627              LEA     DISP_CMPI_L,A1
00001584  103C 000E                628              MOVE.B  #14,D0
00001588  4E4F                     629              TRAP    #15
0000158A  4E75                     630              RTS
0000158C                           631   
0000158C                           632  *---------------------------------------------------------------------------*
0000158C                           633  * OP_ORI : decode ORI and its size
0000158C                           634  *---------------------------------------------------------------------------* 
0000158C                           635  OP_ORI      
0000158C  4281                     636              CLR.L   D1
0000158E  4284                     637              CLR.L   D4
00001590  2205                     638              MOVE.L  D5,D1
00001592  EC99                     639              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001594  0C01 0000                640              CMPI.B  #0,D1
00001598  6700 0012                641              BEQ     OP_ORI_B    * size is byte
0000159C  0C01 0001                642              CMPI.B  #1,D1
000015A0  6700 001C                643              BEQ     OP_ORI_W    * size is word
000015A4  0C01 0002                644              CMPI.B  #2,D1
000015A8  6700 0026                645              BEQ     OP_ORI_L    * size is long
000015AC                           646  
000015AC                           647  OP_ORI_B    * size is byte    
000015AC  183C 0000                648              MOVE.B  #0,D4
000015B0  43F9 00002EBF            649              LEA     DISP_ORI_B,A1
000015B6  103C 000E                650              MOVE.B  #14,D0
000015BA  4E4F                     651              TRAP    #15
000015BC  4E75                     652              RTS
000015BE                           653              
000015BE                           654  OP_ORI_W    * size is word
000015BE  183C 0001                655              MOVE.B  #1,D4
000015C2  43F9 00002EC8            656              LEA     DISP_ORI_W,A1
000015C8  103C 000E                657              MOVE.B  #14,D0
000015CC  4E4F                     658              TRAP    #15
000015CE  4E75                     659              RTS
000015D0                           660              
000015D0                           661  OP_ORI_L    * size is long
000015D0  183C 0002                662              MOVE.B  #2,D4
000015D4  43F9 00002ED1            663              LEA     DISP_ORI_L,A1
000015DA  103C 000E                664              MOVE.B  #14,D0
000015DE  4E4F                     665              TRAP    #15
000015E0  4E75                     666              RTS
000015E2                           667          
000015E2                           668  *---------------------------------------------------------------------------*
000015E2                           669  * OP0001: MOVE.B
000015E2                           670  *---------------------------------------------------------------------------*
000015E2                           671  OP0001      
000015E2  4EF9 000015E8            672              JMP     OP_MOVE_B   * display MOVE.B
000015E8                           673              
000015E8                           674  *---------------------------------------------------------------------------*
000015E8                           675  * OP_MOVE_B: display MOVE_B and proceed to EA
000015E8                           676  *---------------------------------------------------------------------------*
000015E8                           677  OP_MOVE_B                                                                       
000015E8                           678             
000015E8                           679             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000015E8  13FC 0081 000031D0       680             MOVE.B   #$81,DEST_REGISTER_FORMAT
000015F0  13FC 0000 000031D1       681             MOVE.B   #$00,SRC_REGISTER_FORMAT
000015F8                           682             
000015F8                           683             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000015F8  13FC 00B9 000031D3       684             MOVE.B   #$B9,GET_DST_START_END
00001600  13FC 0020 000031D4       685             MOVE.B   #$20,GET_SRC_START_END
00001608                           686             
00001608                           687              *CLEAR D3
00001608  4283                     688              CLR.L   D3
0000160A                           689              *LOAD STACK WITH THIS OPMODE
0000160A  6100 129E                690              BSR     PUSH_STACK
0000160E  163C 004D                691              MOVE.B  #'M',D3
00001612  6100 1296                692              BSR     PUSH_STACK
00001616  163C 004F                693              MOVE.B  #'O',D3
0000161A  6100 128E                694              BSR     PUSH_STACK
0000161E  163C 0056                695              MOVE.B  #'V',D3
00001622  6100 1286                696              BSR     PUSH_STACK
00001626  163C 0045                697              MOVE.B  #'E',D3
0000162A  6100 127E                698              BSR     PUSH_STACK
0000162E  163C 002E                699              MOVE.B  #'.',D3
00001632  6100 1276                700              BSR     PUSH_STACK
00001636  163C 0042                701              MOVE.B  #'B',D3
0000163A  6100 126E                702              BSR     PUSH_STACK
0000163E                           703              
0000163E  6100 0E5A                704              BSR     GET_EA_EA_SRC
00001642  163C 002C                705              MOVE.B  #',',D3
00001646  6100 1262                706              BSR     PUSH_STACK
0000164A                           707              *BSR     GET_EA_EA_DEST
0000164A                           708              
0000164A                           709              *TODO: NEEDS DEST EA TOO
0000164A                           710              
0000164A  4E75                     711              RTS
0000164C                           712              
0000164C                           713             
0000164C                           714  *---------------------------------------------------------------------------*
0000164C                           715  * OP0010: decode MOVE.L/MOVEA.L
0000164C                           716  *---------------------------------------------------------------------------*
0000164C                           717  OP0010      
0000164C  183C 0002                718              MOVE.B  #2,D4
00001650  4280                     719              CLR.L   D0                     
00001652  4281                     720              CLR.L   D1                      
00001654  227C 00000000            721              MOVEA.L #0, A1                 
0000165A                           722              
0000165A  2205                     723              MOVE.L  D5,D1
0000165C  EA99                     724              ROR.L   #5,D1
0000165E  0281 0000000E            725              ANDI.L  #$E,D1
00001664  0C01 0002                726              CMPI.B  #2,D1
00001668  6700 0026                727              BEQ     OP_MOVEA_L
0000166C                           728  
0000166C  4EF9 00001672            729              JMP     OP_MOVE_L
00001672                           730             
00001672                           731  
00001672                           732  *---------------------------------------------------------------------------*
00001672                           733  * OP_MOVE_L: display MOVE_L and proceed to EA
00001672                           734  *---------------------------------------------------------------------------*
00001672                           735  OP_MOVE_L   
00001672  183C 0002                736              MOVE.B  #2,D4
00001676  227C 00000000            737              MOVEA.L #0, A1
0000167C  43F9 00002F3A            738              LEA     DISP_MOVE_L,A1
00001682  103C 000E                739              MOVE.B  #14,D0
00001686  4E4F                     740              TRAP    #15
00001688                           741              
00001688  4EB9 0000204A            742              JSR     EA_GEN
0000168E  4E75                     743              RTS
00001690                           744  
00001690                           745  *---------------------------------------------------------------------------*
00001690                           746  * OP_MOVEA_L: display MOVEA_L and proceed to EA
00001690                           747  *---------------------------------------------------------------------------*
00001690                           748  OP_MOVEA_L 
00001690  183C 0002                749              MOVE.B  #2,D4
00001694  227C 00000000            750              MOVEA.L #0, A1
0000169A  43F9 00003186            751              LEA     DISP_MOVEA_L,A1
000016A0  103C 000E                752              MOVE.B  #14,D0
000016A4  4E4F                     753              TRAP    #15
000016A6  4EF9 00002024            754              JMP     EA_MOVEA
000016AC                           755  
000016AC  4E75                     756              RTS
000016AE                           757              
000016AE                           758  *---------------------------------------------------------------------------*
000016AE                           759  * OP0011: decode MOVE.W/MOVEA.W
000016AE                           760  *---------------------------------------------------------------------------*
000016AE                           761  OP0011      
000016AE  4280                     762              CLR.L   D0                      
000016B0  4281                     763              CLR.L   D1  
000016B2  4284                     764              CLR.L   D4                   
000016B4  227C 00000000            765              MOVEA.L #0, A1               
000016BA  2205                     766              MOVE.L  D5,D1
000016BC  EA99                     767              ROR.L   #5,D1
000016BE  0281 0000000E            768              ANDI.L  #$E,D1
000016C4  0C01 0002                769              CMPI.B  #2,D1
000016C8  6700 0026                770              BEQ     OP_MOVEA_W
000016CC                           771              
000016CC  4EF9 000016D2            772              JMP     OP_MOVE_W
000016D2                           773            
000016D2                           774  *---------------------------------------------------------------------------*
000016D2                           775  * OP_MOVE_W: display MOVE_W and proceed to EA
000016D2                           776  *---------------------------------------------------------------------------*
000016D2                           777  OP_MOVE_W   
000016D2  183C 0001                778              MOVE.B  #1,D4
000016D6  227C 00000000            779              MOVEA.L #0, A1
000016DC  43F9 00002F30            780              LEA     DISP_MOVE_W,A1
000016E2  103C 000E                781              MOVE.B  #14,D0
000016E6  4E4F                     782              TRAP    #15
000016E8  4EF9 0000204A            783              JMP     EA_GEN
000016EE                           784  
000016EE  4E75                     785              RTS
000016F0                           786  
000016F0                           787  *---------------------------------------------------------------------------*
000016F0                           788  * OP_MOVEA_W: display MOVEA and proceed to EA
000016F0                           789  *---------------------------------------------------------------------------*
000016F0                           790  OP_MOVEA_W 
000016F0  183C 0001                791              MOVE.B  #1,D4
000016F4  227C 00000000            792              MOVEA.L #0, A1
000016FA  43F9 0000317B            793              LEA     DISP_MOVEA_W,A1
00001700  103C 000E                794              MOVE.B  #14,D0
00001704  4E4F                     795              TRAP    #15
00001706  4EF9 00002024            796              JMP     EA_MOVEA
0000170C                           797  
0000170C  4E75                     798              RTS
0000170E                           799            
0000170E                           800  *---------------------------------------------------------------------------*
0000170E                           801  * OP0100: decode MOVEM/LEA/NEG/JSR/RTS/NOT
0000170E                           802  *---------------------------------------------------------------------------*
0000170E                           803  OP0100
0000170E  4280                     804              CLR.L   D0                      
00001710  4281                     805              CLR.L   D1  
00001712  4284                     806              CLR.L   D4                      
00001714  227C 00000000            807              MOVEA.L #0, A1                  
0000171A  2205                     808              MOVE.L  D5,D1  
0000171C                           809              
0000171C                           810              * check for RTS
0000171C  0C41 4E75                811              CMPI.W  #$4E75,D1   * 0100 1110 0111 0101
00001720  6700 0178                812              BEQ     OP_RTS
00001724                           813              
00001724                           814              * check for JSR     * 0100 1110 10 xxx (ea mode) xxx (ea reg)
00001724  4281                     815              CLR.L   D1 
00001726  2205                     816              MOVE.L  D5,D1  
00001728  0241 0F00                817              ANDI.W  #$0F00,D1
0000172C  0C41 0E00                818              CMPI.W  #$0E00,D1
00001730  6700 0154                819              BEQ     OP_JSR
00001734                           820  
00001734                           821              * check for NEG     * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
00001734  4281                     822              CLR.L   D1 
00001736  2205                     823              MOVE.L  D5,D1  
00001738  0241 0F00                824              ANDI.W  #$0F00,D1
0000173C  0C41 0400                825              CMPI.W  #$0400,D1
00001740  6700 0086                826              BEQ     OP_NEG
00001744                           827              
00001744                           828              * check for NOT     * 0100 0110 xx (size) xxx (ea mode) xxx (ea reg)
00001744  4281                     829              CLR.L   D1 
00001746  2205                     830              MOVE.L  D5,D1  
00001748  0241 0F00                831              ANDI.W  #$0F00,D1
0000174C  0C41 0600                832              CMPI.W  #$0600,D1
00001750  6700 00DE                833              BEQ     OP_NOT
00001754                           834              
00001754                           835              * check for LEA     * 0100 xxx (reg) 111 xxx (ea mode) xxx (ea reg)
00001754  4281                     836              CLR.L   D1 
00001756  2205                     837              MOVE.L  D5,D1  
00001758  E099                     838              ROR.L   #8,D1
0000175A  0C01 0001                839              CMPI.B  #1,D1
0000175E  6700 0054                840              BEQ     OP_LEA
00001762                           841              
00001762                           842              * check for MOVEM   * 0100 1 x 001 x (size) xxx (ea mode) xxx (ea reg)
00001762  4281                     843              CLR.L   D1 
00001764  2205                     844              MOVE.L  D5,D1  
00001766  EB59                     845              ROL.W   #5,D1
00001768  0C01 0001                846              CMPI.B  #1,D1
0000176C  6600 FD7C                847              BNE     OP_DATA
00001770  E959                     848              ROL.W   #4,D1
00001772  0C01 0001                849              CMPI.B  #1,D1
00001776  6600 FD72                850              BNE     OP_DATA
0000177A  E359                     851              ROL.W   #1,D1
0000177C  0C01 0000                852              CMPI.B  #0,D1
00001780  6700 000E                853              BEQ     OP_MOVEM_W
00001784  0C01 0001                854              CMPI.B  #1,D1
00001788  6700 0018                855              BEQ     OP_MOVEM_L
0000178C  4EF8 14EA                856              JMP     OP_DATA
00001790                           857  
00001790                           858  *---------------------------------------------------------------------------*
00001790                           859  * OP_MOVEM_W: display MOVEM_W
00001790                           860  *---------------------------------------------------------------------------*    
00001790                           861  OP_MOVEM_W  
00001790  183C 0001                862              MOVE.B  #1,D4
00001794  43F9 00002F8F            863              LEA     DISP_MOVEM_W,A1
0000179A  103C 000E                864              MOVE.B  #14,D0
0000179E  4E4F                     865              TRAP    #15
000017A0  4E75                     866              RTS
000017A2                           867  
000017A2                           868  *---------------------------------------------------------------------------*
000017A2                           869  * OP_MOVEM_L: display MOVEM_L
000017A2                           870  *---------------------------------------------------------------------------*
000017A2                           871  OP_MOVEM_L  
000017A2  183C 0002                872              MOVE.B  #2,D4
000017A6  43F9 00002F9A            873              LEA     DISP_MOVEM_L,A1
000017AC  103C 000E                874              MOVE.B  #14,D0
000017B0  4E4F                     875              TRAP    #15
000017B2  4E75                     876              RTS
000017B4                           877     
000017B4                           878  *---------------------------------------------------------------------------*
000017B4                           879  * OP_LEA: decode and display LEA
000017B4                           880  *---------------------------------------------------------------------------*
000017B4                           881  OP_LEA      
000017B4  43F9 00002F88            882              LEA     DISP_LEA,A1
000017BA  103C 000E                883              MOVE.B  #14,D0
000017BE  4E4F                     884              TRAP    #15
000017C0  4EF9 00002024            885              JMP     EA_MOVEA
000017C6                           886  
000017C6  4E75                     887              RTS
000017C8                           888  
000017C8                           889  *---------------------------------------------------------------------------*
000017C8                           890  * OP_NEG: decode and display NEG 
000017C8                           891  *---------------------------------------------------------------------------*
000017C8                           892  OP_NEG      * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
000017C8  4281                     893              CLR.L   D1
000017CA  4284                     894              CLR.L   D4
000017CC  2205                     895              MOVE.L  D5,D1
000017CE  EC99                     896              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000017D0  0C01 0000                897              CMPI.B  #0,D1
000017D4  6700 0012                898              BEQ     OP_NEG_B    * size is byte
000017D8  0C01 0001                899              CMPI.B  #1,D1
000017DC  6700 0022                900              BEQ     OP_NEG_W    * size is word
000017E0  0C01 0002                901              CMPI.B  #2,D1
000017E4  6700 0032                902              BEQ     OP_NEG_L    * size is long
000017E8                           903                         
000017E8                           904  OP_NEG_B    * size is byte   
000017E8  183C 0000                905              MOVE.B  #0,D4 
000017EC  43F9 00002F52            906              LEA     DISP_NEG_B,A1
000017F2  103C 000E                907              MOVE.B  #14,D0
000017F6  4E4F                     908              TRAP    #15
000017F8                           909              
000017F8  4EB9 00001FEA            910              JSR     EA_NOSRC
000017FE  4E75                     911              RTS
00001800                           912              
00001800                           913  OP_NEG_W    * size is word
00001800  183C 0001                914              MOVE.B  #1,D4
00001804  43F9 00002F5B            915              LEA     DISP_NEG_W,A1
0000180A  103C 000E                916              MOVE.B  #14,D0
0000180E  4E4F                     917              TRAP    #15
00001810  4EB9 00001FEA            918              JSR     EA_NOSRC
00001816  4E75                     919              RTS
00001818                           920              
00001818                           921  OP_NEG_L    * size is long
00001818  183C 0002                922              MOVE.B  #2,D4
0000181C  43F9 00002F64            923              LEA     DISP_NEG_L,A1
00001822  103C 000E                924              MOVE.B  #14,D0
00001826  4E4F                     925              TRAP    #15
00001828  4EB9 00001FEA            926              JSR     EA_NOSRC
0000182E                           927              
0000182E  4E75                     928              RTS
00001830                           929  
00001830                           930  *---------------------------------------------------------------------------*
00001830                           931  * OP_NOT: decode and display NOT 
00001830                           932  *---------------------------------------------------------------------------*
00001830                           933  OP_NOT
00001830  4281                     934              CLR.L   D1
00001832  4284                     935              CLR.L   D4
00001834  2205                     936              MOVE.L  D5,D1
00001836  EC99                     937              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001838  0C01 0000                938              CMPI.B  #0,D1
0000183C  6700 0012                939              BEQ     OP_NOT_B    * size is byte
00001840  0C01 0001                940              CMPI.B  #1,D1
00001844  6700 001C                941              BEQ     OP_NOT_W    * size is word
00001848  0C01 0002                942              CMPI.B  #2,D1
0000184C  6700 0026                943              BEQ     OP_NOT_L    * size is long
00001850                           944                         
00001850                           945  OP_NOT_B    * size is byte   
00001850  183C 0000                946              MOVE.B  #0,D4 
00001854  43F9 00002F6D            947              LEA     DISP_NOT_B,A1
0000185A  103C 000E                948              MOVE.B  #14,D0
0000185E  4E4F                     949              TRAP    #15
00001860  4E75                     950              RTS
00001862                           951              
00001862                           952  OP_NOT_W    * size is word
00001862  183C 0001                953              MOVE.B  #1,D4
00001866  43F9 00002F76            954              LEA     DISP_NOT_W,A1
0000186C  103C 000E                955              MOVE.B  #14,D0
00001870  4E4F                     956              TRAP    #15
00001872  4E75                     957              RTS
00001874                           958              
00001874                           959  OP_NOT_L    * size is long
00001874  183C 0002                960              MOVE.B  #2,D4
00001878  43F9 00002F7F            961              LEA     DISP_NOT_L,A1
0000187E  103C 000E                962              MOVE.B  #14,D0
00001882  4E4F                     963              TRAP    #15
00001884  4E75                     964              RTS
00001886                           965  
00001886                           966  *---------------------------------------------------------------------------*
00001886                           967  * OP_JSR: display JSR     
00001886                           968  *---------------------------------------------------------------------------*
00001886  43F9 00002F4B            969  OP_JSR      LEA     DISP_JSR,A1
0000188C  103C 000E                970              MOVE.B  #14,D0
00001890  4E4F                     971              TRAP    #15
00001892  4EB9 00001FEA            972              JSR     EA_NOSRC
00001898                           973  
00001898  4E75                     974              RTS
0000189A                           975  
0000189A                           976  *---------------------------------------------------------------------------*
0000189A                           977  * OP_RTS: display RTS     
0000189A                           978  *---------------------------------------------------------------------------* 
0000189A  43F9 00002F44            979  OP_RTS      LEA     DISP_RTS,A1
000018A0  103C 000E                980              MOVE.B  #14,D0
000018A4  4E4F                     981              TRAP    #15
000018A6  4E75                     982              RTS
000018A8                           983  
000018A8                           984  *---------------------------------------------------------------------------*
000018A8                           985  * OP0101: decode ADDQ
000018A8                           986  *---------------------------------------------------------------------------* 
000018A8  4280                     987  OP0101      CLR.L   D0               * clear registers for temp storage       
000018AA  4281                     988              CLR.L   D1
000018AC  4284                     989              CLR.L   D4                  
000018AE  227C 00000000            990              MOVEA.L #0, A1  
000018B4                           991              
000018B4  2205                     992              MOVE.L  D5,D1           * copy the processing data 
000018B6  E089                     993              LSR.L   #8,D1           * shift to right by 8 bits to check the value of bit 8
000018B8  0201 0001                994              ANDI.B  #$1,D1          * mask all bits except the last 2 bits
000018BC  0C01 0000                995              CMPI.B  #0,D1           * if the value is 0, it's ADDQ
000018C0  6700 0006                996              BEQ     OP_ADDQ
000018C4                           997              
000018C4  4EF8 14EA                998              JMP     OP_DATA
000018C8                           999       
000018C8  4281                    1000  OP_ADDQ     CLR.L   D1
000018CA  2205                    1001              MOVE.L  D5,D1
000018CC  EC99                    1002              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000018CE  0281 00000003           1003              ANDI.L  #$3,D1
000018D4  0C01 0000               1004              CMPI.B  #0,D1
000018D8  6700 0014               1005              BEQ     OP_ADDQ_B    * size is byte
000018DC  0C41 0001               1006              CMPI.W  #1,D1
000018E0  6700 001E               1007              BEQ     OP_ADDQ_W    * size is word
000018E4  0C81 00000002           1008              CMPI.L  #2,D1
000018EA  6700 0026               1009              BEQ     OP_ADDQ_L    * size is long
000018EE                          1010              
000018EE                          1011  *---------------------------------------------------------------------------*
000018EE                          1012  * OP_ADDQ: display ADDQ
000018EE                          1013  *---------------------------------------------------------------------------*              
000018EE                          1014  OP_ADDQ_B    * size is byte   
000018EE  183C 0000               1015              MOVE.B  #0,D4 
000018F2  43F9 00002FA5           1016              LEA     DISP_ADDQ_B,A1
000018F8  103C 000E               1017              MOVE.B  #14,D0
000018FC  4E4F                    1018              TRAP    #15
000018FE  4E75                    1019              RTS
00001900                          1020              
00001900                          1021  OP_ADDQ_W    * size is word
00001900  183C 0001               1022              MOVE.B  #1,D4
00001904  43F9 00002FAF           1023              LEA     DISP_ADDQ_W,A1
0000190A  103C 000E               1024              MOVE.B  #14,D0
0000190E  4E4F                    1025              TRAP    #15
00001910  4E75                    1026              RTS
00001912                          1027              
00001912                          1028  OP_ADDQ_L    * size is long
00001912  183C 0002               1029              MOVE.B  #2,D4
00001916  43F9 00002FB9           1030              LEA     DISP_ADDQ_L,A1
0000191C  103C 000E               1031              MOVE.B  #14,D0
00001920  4E4F                    1032              TRAP    #15
00001922  4E75                    1033              RTS
00001924                          1034  
00001924                          1035  *---------------------------------------------------------------------------*
00001924                          1036  * OP0110: decode BRA/BEQ/BNE/BLT/BHI
00001924                          1037  *---------------------------------------------------------------------------*              
00001924  4280                    1038  OP0110      CLR.L   D0                  
00001926  4281                    1039              CLR.L   D1   
00001928  4284                    1040              CLR.L   D4                 
0000192A  227C 00000000           1041              MOVEA.L #0,A1
00001930  2205                    1042              MOVE.L  D5, D1                
00001932  0281 000000FF           1043              ANDI.L  #$00FF, D1              * Get 8-bit displacement 
00001938  2205                    1044              MOVE.L  D5,D1                  
0000193A  0281 00000F00           1045              ANDI.L  #$0F00,D1
00001940                          1046                 
00001940  0C41 0000               1047              CMPI.W  #$0000,D1               * Check for BRA
00001944  6700 0050               1048              BEQ     OP_BRA                  
00001948                          1049                          
00001948  0C41 0D00               1050              CMPI.W  #$0D00,D1               * Check for BLT
0000194C  6700 0056               1051              BEQ     OP_BLT      
00001950                          1052  
00001950  0C41 0700               1053              CMPI.W  #$0700,D1               * Check for BEQ
00001954  6700 0032               1054              BEQ     OP_BEQ      
00001958                          1055  
00001958  0C41 0600               1056              CMPI.W  #$0600,D1               * Check for BNE
0000195C  6700 001C               1057              BEQ     OP_BNE  
00001960                          1058              
00001960  0C41 0200               1059              CMPI.W  #$0200,D1               * Check for BHI
00001964  6700 0006               1060              BEQ     OP_BHI
00001968                          1061  
00001968  4EF8 14EA               1062              JMP     OP_DATA
0000196C                          1063              
0000196C  43F9 00003174           1064  OP_BHI      LEA     DISP_BHI,A1             
00001972  103C 000E               1065              MOVE.B  #14,D0
00001976  4E4F                    1066              TRAP    #15
00001978  4E75                    1067              RTS
0000197A                          1068  
0000197A  43F9 0000316D           1069  OP_BNE      LEA     DISP_BNE,A1             
00001980  103C 000E               1070              MOVE.B  #14,D0
00001984  4E4F                    1071              TRAP    #15
00001986  4E75                    1072              RTS
00001988                          1073  
00001988  43F9 00003166           1074  OP_BEQ      LEA     DISP_BEQ,A1             
0000198E  103C 000E               1075              MOVE.B  #14,D0
00001992  4E4F                    1076              TRAP    #15
00001994  4E75                    1077              RTS          
00001996                          1078                          
00001996  43F9 00003158           1079  OP_BRA      LEA     DISP_BRA,A1             
0000199C  103C 000E               1080              MOVE.B  #14,D0
000019A0  4E4F                    1081              TRAP    #15
000019A2  4E75                    1082              RTS
000019A4                          1083              
000019A4  43F9 0000315F           1084  OP_BLT      LEA     DISP_BLT,A1          
000019AA  103C 000E               1085              MOVE.B  #14,D0
000019AE  4E4F                    1086              TRAP    #15
000019B0  4E75                    1087              RTS
000019B2                          1088     
000019B2                          1089  *---------------------------------------------------------------------------*
000019B2                          1090  * OP0111 : MOVEQ not required
000019B2                          1091  *---------------------------------------------------------------------------*           
000019B2  4EF8 14EA               1092  OP0111      JMP     OP_DATA
000019B6                          1093             
000019B6                          1094  *---------------------------------------------------------------------------*
000019B6                          1095  * OP1000 : decode DIVS
000019B6                          1096  *---------------------------------------------------------------------------*           
000019B6                          1097  OP1000      
000019B6  4280                    1098              CLR.L   D0                
000019B8  4281                    1099              CLR.L   D1   
000019BA  4284                    1100              CLR.L   D4                
000019BC  207C 00000000           1101              MOVEA.L #0, A0               
000019C2  227C 00000000           1102              MOVEA.L #0, A1               
000019C8                          1103              
000019C8  2205                    1104              MOVE.L  D5,D1
000019CA  EA89                    1105              LSR.L   #5,D1
000019CC  0281 0000000E           1106              ANDI.L  #$E,D1
000019D2                          1107    
000019D2  0C01 000E               1108              CMPI.B  #$E,D1
000019D6  6700 0006               1109              BEQ     OP_DIVS
000019DA                          1110              
000019DA  4EF8 14EA               1111              JMP     OP_DATA
000019DE                          1112  
000019DE                          1113  *---------------------------------------------------------------------------*
000019DE                          1114  * OP_DIVS: display DIVS and proceed to EA
000019DE                          1115  *---------------------------------------------------------------------------*  
000019DE  43F9 00002FC3           1116  OP_DIVS     LEA     DISP_DIVS,A1
000019E4  103C 000E               1117              MOVE.B  #14,D0
000019E8  4E4F                    1118              TRAP    #15
000019EA  4EF9 00001FFE           1119              JMP     EA_ARITH
000019F0                          1120  
000019F0  4E75                    1121              RTS
000019F2                          1122              
000019F2                          1123  *---------------------------------------------------------------------------*
000019F2                          1124  * OP1001: decode SUB/SUBA
000019F2                          1125  *---------------------------------------------------------------------------*      
000019F2  4280                    1126  OP1001      CLR.L   D0                
000019F4  4281                    1127              CLR.L   D1   
000019F6  4284                    1128              CLR.L   D4                 
000019F8  207C 00000000           1129              MOVEA.L #0, A0                 
000019FE  227C 00000000           1130              MOVEA.L #0, A1               
00001A04                          1131              
00001A04  2205                    1132              MOVE.L  D5,D1
00001A06  EA89                    1133              LSR.L   #5,D1
00001A08  0281 0000000E           1134              ANDI.L  #$E,D1
00001A0E                          1135    
00001A0E  0C01 0000               1136              CMPI.B  #$0,D1
00001A12  6700 004A               1137              BEQ     OP_SUB_B
00001A16  0C01 0002               1138              CMPI.B  #$2,D1
00001A1A  6700 005A               1139              BEQ     OP_SUB_W
00001A1E  0C01 0004               1140              CMPI.B  #$4,D1
00001A22  6700 006A               1141              BEQ     OP_SUB_L
00001A26  0C01 0008               1142              CMPI.B  #$8,D1
00001A2A  6700 0032               1143              BEQ     OP_SUB_B
00001A2E  0C01 000A               1144              CMPI.B  #$A,D1
00001A32  6700 0042               1145              BEQ     OP_SUB_W
00001A36  0C01 000C               1146              CMPI.B  #$C,D1
00001A3A  6700 0052               1147              BEQ     OP_SUB_L
00001A3E                          1148              
00001A3E  4241                    1149              CLR     D1
00001A40  2205                    1150              MOVE.L  D5,D1
00001A42  EC89                    1151              LSR.L   #6,D1
00001A44  0281 0000000F           1152              ANDI.L  #$F,D1
00001A4A  0C01 0003               1153              CMPI.B  #3,D1
00001A4E  6700 0056               1154              BEQ     OP_SUBA_W
00001A52  0C01 0007               1155              CMPI.B  #7,D1
00001A56  6700 0060               1156              BEQ     OP_SUBA_L
00001A5A                          1157              
00001A5A  4EF8 14EA               1158              JMP     OP_DATA
00001A5E                          1159    
00001A5E                          1160  *---------------------------------------------------------------------------*
00001A5E                          1161  * OP_SUB: display SUB and proceed to EA
00001A5E                          1162  *---------------------------------------------------------------------------*            
00001A5E  43F9 00002FCB           1163  OP_SUB_B    LEA     DISP_SUB_B,A1
00001A64  103C 000E               1164              MOVE.B  #14,D0
00001A68  4E4F                    1165              TRAP    #15
00001A6A  183C 0000               1166              MOVE.B  #0,D4
00001A6E  4EF9 0000204A           1167              JMP     EA_GEN
00001A74                          1168  
00001A74  4E75                    1169              RTS
00001A76                          1170  
00001A76  43F9 00002FD4           1171  OP_SUB_W    LEA     DISP_SUB_W,A1
00001A7C  103C 000E               1172              MOVE.B  #14,D0
00001A80  4E4F                    1173              TRAP    #15
00001A82  183C 0001               1174              MOVE.B  #1,D4
00001A86  4EF9 0000204A           1175              JMP     EA_GEN
00001A8C                          1176  
00001A8C  4E75                    1177              RTS
00001A8E                          1178  
00001A8E  43F9 00002FDD           1179  OP_SUB_L    LEA     DISP_SUB_L,A1
00001A94  103C 000E               1180              MOVE.B  #14,D0
00001A98  4E4F                    1181              TRAP    #15
00001A9A  183C 0002               1182              MOVE.B  #2,D4
00001A9E  4EF9 0000204A           1183              JMP     EA_GEN
00001AA4                          1184  
00001AA4  4E75                    1185              RTS
00001AA6                          1186  
00001AA6                          1187  *---------------------------------------------------------------------------*
00001AA6                          1188  * OP_SUBA: display SUBA
00001AA6                          1189  *---------------------------------------------------------------------------*  
00001AA6  43F9 00003004           1190  OP_SUBA_W   LEA     DISP_SUBA_W,A1
00001AAC  103C 000E               1191              MOVE.B  #14,D0
00001AB0  4E4F                    1192              TRAP    #15
00001AB2  183C 0001               1193              MOVE.B  #1,D4
00001AB6  4E75                    1194              RTS
00001AB8                          1195  
00001AB8  43F9 0000300E           1196  OP_SUBA_L   LEA     DISP_SUBA_L,A1
00001ABE  103C 000E               1197              MOVE.B  #14,D0
00001AC2  4E4F                    1198              TRAP    #15
00001AC4  183C 0002               1199              MOVE.B  #2,D4
00001AC8  4E75                    1200              RTS         
00001ACA                          1201  *---------------------------------------------------------------------------*
00001ACA                          1202  * OP1010 : unassigned
00001ACA                          1203  *---------------------------------------------------------------------------*           
00001ACA  4EF8 14EA               1204  OP1010      JMP     OP_DATA
00001ACE                          1205              
00001ACE                          1206  *---------------------------------------------------------------------------*
00001ACE                          1207  * OP1011 : decode CMP/EOR/CMPA
00001ACE                          1208  *---------------------------------------------------------------------------*           
00001ACE  4280                    1209  OP1011      CLR.L   D0                
00001AD0  4281                    1210              CLR.L   D1            
00001AD2  4284                    1211              CLR.L   D4                   
00001AD4  227C 00000000           1212              MOVEA.L #0, A1               
00001ADA  2205                    1213              MOVE.L  D5,D1
00001ADC  EA99                    1214              ROR.L   #5,D1
00001ADE  0281 0000000E           1215              ANDI.L  #$E,D1
00001AE4  0C01 0000               1216              CMPI.B  #$0,D1
00001AE8  6700 0062               1217              BEQ     OP_CMP_B
00001AEC  0C01 0002               1218              CMPI.B  #$2,D1
00001AF0  6700 0072               1219              BEQ     OP_CMP_W
00001AF4  0C01 0004               1220              CMPI.B  #$4,D1
00001AF8  6700 0082               1221              BEQ     OP_CMP_L
00001AFC  0C01 0008               1222              CMPI.B  #$8,D1
00001B00  6700 0092               1223              BEQ     OP_EOR_B
00001B04  0C01 000A               1224              CMPI.B  #$A,D1
00001B08  6700 009C               1225              BEQ     OP_EOR_W
00001B0C  0C01 000C               1226              CMPI.B  #$C,D1
00001B10  6700 00A6               1227              BEQ     OP_EOR_L  
00001B14  0C01 0006               1228              CMPI.B  #$6,D1
00001B18  6700 000E               1229              BEQ     OP_CMPA_W
00001B1C  0C01 000E               1230              CMPI.B  #$E,D1
00001B20  6700 0018               1231              BEQ     OP_CMPA_L 
00001B24                          1232  
00001B24  4EF8 14EA               1233              JMP     OP_DATA          
00001B28                          1234  
00001B28                          1235  *---------------------------------------------------------------------------*
00001B28                          1236  * OP_CMPA: display CMPA 
00001B28                          1237  *---------------------------------------------------------------------------
00001B28  43F9 0000304E           1238  OP_CMPA_W   LEA     DISP_CMPA_W,A1
00001B2E  103C 000E               1239              MOVE.B  #14,D0
00001B32  4E4F                    1240              TRAP    #15
00001B34  183C 0001               1241              MOVE.B  #1,D4
00001B38  4E75                    1242              RTS
00001B3A                          1243  
00001B3A  43F9 00003058           1244  OP_CMPA_L   LEA     DISP_CMPA_L,A1
00001B40  103C 000E               1245              MOVE.B  #14,D0
00001B44  4E4F                    1246              TRAP    #15
00001B46  183C 0002               1247              MOVE.B  #2,D4
00001B4A  4E75                    1248              RTS
00001B4C                          1249  
00001B4C                          1250  *---------------------------------------------------------------------------*
00001B4C                          1251  * OP_CMP: display CMP and proceed to EA
00001B4C                          1252  *---------------------------------------------------------------------------*  
00001B4C  43F9 00003033           1253  OP_CMP_B    LEA     DISP_CMP_B,A1
00001B52  103C 000E               1254              MOVE.B  #14,D0
00001B56  4E4F                    1255              TRAP    #15
00001B58  183C 0000               1256              MOVE.B  #0,D4
00001B5C  4EF9 0000204A           1257              JMP     EA_GEN
00001B62                          1258  
00001B62  4E75                    1259              RTS
00001B64                          1260              
00001B64  43F9 0000303C           1261  OP_CMP_W    LEA     DISP_CMP_W,A1
00001B6A  103C 000E               1262              MOVE.B  #14,D0
00001B6E  4E4F                    1263              TRAP    #15
00001B70  183C 0001               1264              MOVE.B  #1,D4
00001B74  4EF9 0000204A           1265              JMP     EA_GEN
00001B7A                          1266  
00001B7A  4E75                    1267              RTS
00001B7C                          1268              
00001B7C  43F9 00003045           1269  OP_CMP_L    LEA     DISP_CMP_L,A1
00001B82  103C 000E               1270              MOVE.B  #14,D0
00001B86  4E4F                    1271              TRAP    #15
00001B88  183C 0002               1272              MOVE.B  #2,D4
00001B8C  4EF9 0000204A           1273              JMP     EA_GEN
00001B92                          1274  
00001B92  4E75                    1275              RTS
00001B94                          1276              
00001B94                          1277  *---------------------------------------------------------------------------*
00001B94                          1278  * OP_EOR: display EOR
00001B94                          1279  *---------------------------------------------------------------------------*  
00001B94  43F9 00003018           1280  OP_EOR_B    LEA     DISP_EOR_B,A1
00001B9A  103C 000E               1281              MOVE.B  #14,D0
00001B9E  4E4F                    1282              TRAP    #15
00001BA0  183C 0000               1283              MOVE.B  #0,D4
00001BA4  4E75                    1284              RTS
00001BA6                          1285              
00001BA6  43F9 00003021           1286  OP_EOR_W    LEA     DISP_EOR_W,A1
00001BAC  103C 000E               1287              MOVE.B  #14,D0
00001BB0  4E4F                    1288              TRAP    #15
00001BB2  183C 0001               1289              MOVE.B  #1,D4
00001BB6  4E75                    1290              RTS
00001BB8                          1291              
00001BB8  43F9 0000302A           1292  OP_EOR_L    LEA     DISP_EOR_L,A1
00001BBE  103C 000E               1293              MOVE.B  #14,D0
00001BC2  4E4F                    1294              TRAP    #15
00001BC4  183C 0002               1295              MOVE.B  #2,D4
00001BC8  4E75                    1296              RTS    
00001BCA                          1297  
00001BCA                          1298  *---------------------------------------------------------------------------*
00001BCA                          1299  * OP1100: Decode and display MULS/AND and proceed to EA
00001BCA                          1300  *---------------------------------------------------------------------------* 
00001BCA  4280                    1301  OP1100      CLR.L   D0                 
00001BCC  4281                    1302              CLR.L   D1    
00001BCE  4284                    1303              CLR.L   D4                
00001BD0  227C 00000000           1304              MOVEA.L #0, A1             
00001BD6                          1305              
00001BD6  2205                    1306              MOVE.L  D5,D1
00001BD8  EA89                    1307              LSR.L   #5,D1
00001BDA  0281 0000000E           1308              ANDI.L  #$E,D1
00001BE0  0C41 000E               1309              CMPI.W  #$E,D1
00001BE4  6700 0036               1310              BEQ     OP_MULS
00001BE8  0C41 0000               1311              CMPI.W  #$0,D1
00001BEC  6700 0042               1312              BEQ     OP_AND_B
00001BF0  0C41 0002               1313              CMPI.W  #$2,D1
00001BF4  6700 004C               1314              BEQ     OP_AND_W
00001BF8  0C41 0004               1315              CMPI.W  #$4,D1
00001BFC  6700 0056               1316              BEQ     OP_AND_L
00001C00  0C41 0008               1317              CMPI.W  #$8,D1
00001C04  6700 002A               1318              BEQ     OP_AND_B
00001C08  0C41 000A               1319              CMPI.W  #$A,D1
00001C0C  6700 0034               1320              BEQ     OP_AND_W
00001C10  0C41 000C               1321              CMPI.W  #$C,D1
00001C14  6700 003E               1322              BEQ     OP_AND_L
00001C18                          1323  
00001C18  4EF8 14EA               1324              JMP     OP_DATA
00001C1C                          1325  
00001C1C  43F9 00003062           1326  OP_MULS     LEA     DISP_MULS_W,A1
00001C22  103C 000E               1327              MOVE.B  #14,D0
00001C26  4E4F                    1328              TRAP    #15
00001C28  4EF9 00001FFE           1329              JMP     EA_ARITH
00001C2E  4E75                    1330              RTS
00001C30                          1331              
00001C30                          1332  OP_AND_B    
00001C30  43F9 0000306C           1333              LEA     DISP_AND_B,A1
00001C36  103C 000E               1334              MOVE.B  #14,D0
00001C3A  4E4F                    1335              TRAP    #15
00001C3C  183C 0000               1336              MOVE.B  #0,D4
00001C40  4E75                    1337              RTS
00001C42                          1338  
00001C42                          1339  OP_AND_W
00001C42  43F9 00003075           1340              LEA     DISP_AND_W,A1
00001C48  103C 000E               1341              MOVE.B  #14,D0
00001C4C  4E4F                    1342              TRAP    #15
00001C4E  183C 0001               1343              MOVE.B  #1,D4
00001C52  4E75                    1344              RTS
00001C54                          1345  
00001C54                          1346  OP_AND_L
00001C54  43F9 0000307E           1347              LEA     DISP_AND_L,A1
00001C5A  103C 000E               1348              MOVE.B  #14,D0
00001C5E  4E4F                    1349              TRAP    #15
00001C60  183C 0002               1350              MOVE.B  #2,D4
00001C64  4E75                    1351              RTS
00001C66                          1352  
00001C66                          1353  *---------------------------------------------------------------------------*
00001C66                          1354  * OP1101: Decode ADD/ADDA
00001C66                          1355  *---------------------------------------------------------------------------* 
00001C66  4280                    1356  OP1101      CLR.L   D0                  
00001C68  4281                    1357              CLR.L   D1       
00001C6A  4284                    1358              CLR.L   D4                   
00001C6C  227C 00000000           1359              MOVEA.L #0, A1              
00001C72  2205                    1360              MOVE.L  D5,D1
00001C74  EA99                    1361              ROR.L   #5,D1
00001C76  0281 0000000E           1362              ANDI.L  #$E,D1
00001C7C  0C01 0000               1363              CMPI.B  #$0,D1
00001C80  6700 003E               1364              BEQ     OP_ADD_B
00001C84  0C01 0002               1365              CMPI.B  #$2,D1
00001C88  6700 004E               1366              BEQ     OP_ADD_W
00001C8C  0C01 0004               1367              CMPI.B  #$4,D1
00001C90  6700 005E               1368              BEQ     OP_ADD_L
00001C94  0C01 0008               1369              CMPI.B  #$8,D1
00001C98  6700 0026               1370              BEQ     OP_ADD_B
00001C9C  0C01 000A               1371              CMPI.B  #$A,D1
00001CA0  6700 0036               1372              BEQ     OP_ADD_W
00001CA4  0C01 000C               1373              CMPI.B  #$C,D1
00001CA8  6700 0046               1374              BEQ     OP_ADD_L  
00001CAC                          1375              
00001CAC  0C01 0006               1376              CMPI.B  #$6,D1
00001CB0  6700 0056               1377              BEQ     OP_ADDA_W
00001CB4  0C01 000E               1378              CMPI.B  #$E,D1
00001CB8  6700 0066               1379              BEQ     OP_ADDA_L 
00001CBC                          1380  
00001CBC  4EF8 14EA               1381              JMP     OP_DATA  
00001CC0                          1382            
00001CC0                          1383  *---------------------------------------------------------------------------*
00001CC0                          1384  * OP_ADD: display ADD and proceed to EA
00001CC0                          1385  *---------------------------------------------------------------------------*  
00001CC0  43F9 00003087           1386  OP_ADD_B    LEA     DISP_ADD_B,A1
00001CC6  103C 000E               1387              MOVE.B  #14,D0
00001CCA  4E4F                    1388              TRAP    #15
00001CCC  183C 0000               1389              MOVE.B  #0,D4
00001CD0  4EF9 0000204A           1390              JMP     EA_GEN
00001CD6                          1391  
00001CD6  4E75                    1392              RTS
00001CD8                          1393  
00001CD8  43F9 00003090           1394  OP_ADD_W    LEA     DISP_ADD_W,A1
00001CDE  103C 000E               1395              MOVE.B  #14,D0
00001CE2  4E4F                    1396              TRAP    #15
00001CE4  183C 0001               1397              MOVE.B  #1,D4
00001CE8  4EF9 0000204A           1398              JMP     EA_GEN
00001CEE                          1399  
00001CEE  4E75                    1400              RTS
00001CF0                          1401  
00001CF0  43F9 00003099           1402  OP_ADD_L    LEA     DISP_ADD_L,A1
00001CF6  103C 000E               1403              MOVE.B  #14,D0
00001CFA  4E4F                    1404              TRAP    #15
00001CFC  183C 0002               1405              MOVE.B  #2,D4
00001D00  4EF9 0000204A           1406              JMP     EA_GEN
00001D06                          1407  
00001D06  4E75                    1408              RTS
00001D08                          1409  
00001D08                          1410  *---------------------------------------------------------------------------*
00001D08                          1411  * OP_ADDA: display ADDA and proceed to EA
00001D08                          1412  *---------------------------------------------------------------------------*  
00001D08  43F9 000030A2           1413  OP_ADDA_W   LEA     DISP_ADDA_W,A1
00001D0E  103C 000E               1414              MOVE.B  #14,D0
00001D12  4E4F                    1415              TRAP    #15
00001D14  183C 0001               1416              MOVE.B  #1,D4
00001D18  4EF9 0000204A           1417              JMP     EA_GEN
00001D1E                          1418  
00001D1E  4E75                    1419              RTS
00001D20                          1420  
00001D20  43F9 000030AC           1421  OP_ADDA_L   LEA     DISP_ADDA_L,A1
00001D26  103C 000E               1422              MOVE.B  #14,D0
00001D2A  4E4F                    1423              TRAP    #15
00001D2C  183C 0002               1424              MOVE.B  #2,D4
00001D30  4EF9 0000204A           1425              JMP     EA_GEN
00001D36                          1426  
00001D36  4E75                    1427              RTS
00001D38                          1428              
00001D38                          1429  *---------------------------------------------------------------------------*
00001D38                          1430  * OP1110: LSR/LSL/ASR/ASL/ROL/ROR
00001D38                          1431  *---------------------------------------------------------------------------* 
00001D38  4280                    1432  OP1110      CLR.L   D0                  
00001D3A  4281                    1433              CLR.L   D1   
00001D3C  4284                    1434              CLR.L   D4                   
00001D3E  227C 00000000           1435              MOVEA.L #0, A1                 
00001D44  2205                    1436              MOVE.L  D5,D1
00001D46                          1437              
00001D46                          1438              * check for LSX
00001D46  E699                    1439              ROR.L   #3,D1
00001D48  0281 00000001           1440              ANDI.L  #$1,D1
00001D4E  0C01 0001               1441              CMPI.B  #1,D1
00001D52  6700 002E               1442              BEQ     OP_LSX
00001D56                          1443              
00001D56                          1444              * reset D1 and check for ASX
00001D56  4281                    1445              CLR.L   D1
00001D58  2205                    1446              MOVE.L  D5,D1
00001D5A  E699                    1447              ROR.L   #3,D1
00001D5C  0281 00000001           1448              ANDI.L  #$1,D1
00001D62  0C01 0000               1449              CMPI.B  #0,D1
00001D66  6700 0032               1450              BEQ     OP_ASX
00001D6A                          1451  
00001D6A                          1452              * reset D1 and check for ROX
00001D6A  4281                    1453              CLR.L   D1
00001D6C  2205                    1454              MOVE.L  D5,D1
00001D6E  E699                    1455              ROR.L   #3,D1
00001D70  0281 00000001           1456              ANDI.L  #$1,D1
00001D76  0C01 0003               1457              CMPI.B  #3,D1
00001D7A  6700 0036               1458              BEQ     OP_ROX
00001D7E                          1459              
00001D7E  4EF8 14EA               1460              JMP     OP_DATA
00001D82                          1461  
00001D82                          1462  *---------------------------------------------------------------------------*
00001D82                          1463  * OP_LSX: process LSR/LSL
00001D82                          1464  *---------------------------------------------------------------------------*            
00001D82  EA99                    1465  OP_LSX      ROR.L   #5,D1
00001D84  0281 00000001           1466              ANDI.L  #$1,D1
00001D8A  0C01 0000               1467              CMPI.B  #0,D1
00001D8E  6700 003A               1468              BEQ     OP_LSR
00001D92  0C01 0001               1469              CMPI.B  #1,D1
00001D96  6700 008C               1470              BEQ     OP_LSL
00001D9A                          1471              
00001D9A                          1472  *---------------------------------------------------------------------------*
00001D9A                          1473  * OP_ASX: process ASR/ASL
00001D9A                          1474  *---------------------------------------------------------------------------*  
00001D9A  EA99                    1475  OP_ASX      ROR.L   #5,D1
00001D9C  0281 00000001           1476              ANDI.L  #$1,D1
00001DA2  0C01 0000               1477              CMPI.B  #0,D1
00001DA6  6700 00D6               1478              BEQ     OP_ASR
00001DAA  0C01 0001               1479              CMPI.B  #1,D1
00001DAE  6700 0128               1480              BEQ     OP_ASL
00001DB2                          1481              
00001DB2                          1482  *---------------------------------------------------------------------------*
00001DB2                          1483  * OP_ROX: process ROR/ROL
00001DB2                          1484  *---------------------------------------------------------------------------*  
00001DB2  EA99                    1485  OP_ROX      ROR.L   #5,D1
00001DB4  0281 00000001           1486              ANDI.L  #$1,D1
00001DBA  0C01 0000               1487              CMPI.B  #0,D1
00001DBE  6700 0172               1488              BEQ     OP_ROR
00001DC2  0C01 0001               1489              CMPI.B  #1,D1
00001DC6  6700 01C4               1490              BEQ     OP_ROL
00001DCA                          1491  
00001DCA                          1492  *---------------------------------------------------------------------------*
00001DCA                          1493  * OP_LSR: decode and display LSR
00001DCA                          1494  *---------------------------------------------------------------------------*        
00001DCA  E599                    1495  OP_LSR      ROL.L   #2,D1
00001DCC  0281 00000003           1496              ANDI.L  #$3,D1
00001DD2  0C01 0000               1497              CMPI.B  #0,D1
00001DD6  6700 0016               1498              BEQ     OP_LSR_B
00001DDA  0C01 0001               1499              CMPI.B  #$1,D1
00001DDE  6700 0032               1500              BEQ     OP_LSR_W
00001DE2  0C01 0002               1501              CMPI.B  #$2,D1
00001DE6  6700 0018               1502              BEQ     OP_LSR_L
00001DEA                          1503              
00001DEA  4EF8 14EA               1504              JMP     OP_DATA
00001DEE                          1505  
00001DEE  43F9 000030B6           1506  OP_LSR_B    LEA     DISP_LSR_B,A1
00001DF4  103C 000E               1507              MOVE.B  #14,D0
00001DF8  4E4F                    1508              TRAP    #15
00001DFA  183C 0000               1509              MOVE.B  #0,D4
00001DFE  4E75                    1510              RTS
00001E00                          1511  
00001E00  43F9 000030DA           1512  OP_LSR_L    LEA     DISP_LSR_L,A1
00001E06  103C 000E               1513              MOVE.B  #14,D0
00001E0A  4E4F                    1514              TRAP    #15
00001E0C  183C 0002               1515              MOVE.B  #2,D4
00001E10  4E75                    1516              RTS
00001E12                          1517  
00001E12  43F9 000030C8           1518  OP_LSR_W    LEA     DISP_LSR_W,A1
00001E18  103C 000E               1519              MOVE.B  #14,D0
00001E1C  4E4F                    1520              TRAP    #15
00001E1E  183C 0001               1521              MOVE.B  #1,D4
00001E22  4E75                    1522              RTS
00001E24                          1523   
00001E24                          1524  *---------------------------------------------------------------------------*
00001E24                          1525  * OP_LSL: decode and display LSL
00001E24                          1526  *---------------------------------------------------------------------------*             
00001E24  E599                    1527  OP_LSL      ROL.L   #2,D1
00001E26  0281 00000003           1528              ANDI.L  #$3,D1
00001E2C  0C01 0000               1529              CMPI.B  #0,D1
00001E30  6700 0016               1530              BEQ     OP_LSL_B
00001E34  0C01 0001               1531              CMPI.B  #$1,D1
00001E38  6700 0032               1532              BEQ     OP_LSL_W
00001E3C  0C01 0002               1533              CMPI.B  #$2,D1
00001E40  6700 0018               1534              BEQ     OP_LSL_L
00001E44                          1535              
00001E44  4EF8 14EA               1536              JMP OP_DATA
00001E48                          1537  
00001E48  43F9 000030BF           1538  OP_LSL_B    LEA     DISP_LSL_B,A1
00001E4E  103C 000E               1539              MOVE.B  #14,D0
00001E52  4E4F                    1540              TRAP    #15
00001E54  183C 0000               1541              MOVE.B  #0,D4
00001E58  4E75                    1542              RTS
00001E5A                          1543  
00001E5A  43F9 000030E3           1544  OP_LSL_L    LEA     DISP_LSL_L,A1
00001E60  103C 000E               1545              MOVE.B  #14,D0
00001E64  4E4F                    1546              TRAP    #15
00001E66  183C 0002               1547              MOVE.B  #2,D4
00001E6A  4E75                    1548              RTS
00001E6C                          1549  
00001E6C  43F9 000030D1           1550  OP_LSL_W    LEA     DISP_LSL_W,A1
00001E72  103C 000E               1551              MOVE.B  #14,D0
00001E76  4E4F                    1552              TRAP    #15
00001E78  183C 0001               1553              MOVE.B  #1,D4
00001E7C  4E75                    1554              RTS
00001E7E                          1555   
00001E7E                          1556  *---------------------------------------------------------------------------*
00001E7E                          1557  * OP_ASR: decode and display ASR
00001E7E                          1558  *---------------------------------------------------------------------------*             
00001E7E  E599                    1559  OP_ASR      ROL.L   #2,D1
00001E80  0281 00000003           1560              ANDI.L  #$3,D1
00001E86  0C01 0000               1561              CMPI.B  #0,D1
00001E8A  6700 0016               1562              BEQ     OP_ASR_B
00001E8E  0C01 0001               1563              CMPI.B  #$1,D1
00001E92  6700 0032               1564              BEQ     OP_ASR_W
00001E96  0C01 0002               1565              CMPI.B  #$2,D1
00001E9A  6700 0018               1566              BEQ     OP_ASR_L
00001E9E                          1567              
00001E9E  4EF8 14EA               1568              JMP OP_DATA
00001EA2                          1569  
00001EA2  43F9 000030EC           1570  OP_ASR_B    LEA     DISP_ASR_B,A1
00001EA8  103C 000E               1571              MOVE.B  #14,D0
00001EAC  4E4F                    1572              TRAP    #15
00001EAE  183C 0000               1573              MOVE.B  #0,D4
00001EB2  4E75                    1574              RTS
00001EB4                          1575  
00001EB4  43F9 00003110           1576  OP_ASR_L    LEA     DISP_ASR_L,A1
00001EBA  103C 000E               1577              MOVE.B  #14,D0
00001EBE  4E4F                    1578              TRAP    #15
00001EC0  183C 0002               1579              MOVE.B  #2,D4
00001EC4  4E75                    1580              RTS
00001EC6                          1581  
00001EC6  43F9 000030FE           1582  OP_ASR_W    LEA     DISP_ASR_W,A1
00001ECC  103C 000E               1583              MOVE.B  #14,D0
00001ED0  4E4F                    1584              TRAP    #15
00001ED2  183C 0001               1585              MOVE.B  #1,D4
00001ED6  4E75                    1586              RTS
00001ED8                          1587       
00001ED8                          1588  *---------------------------------------------------------------------------*
00001ED8                          1589  * OP_ASL: decode and display ASL
00001ED8                          1590  *---------------------------------------------------------------------------*         
00001ED8  E599                    1591  OP_ASL      ROL.L   #2,D1
00001EDA  0281 00000003           1592              ANDI.L  #$3,D1
00001EE0  0C01 0000               1593              CMPI.B  #0,D1
00001EE4  6700 0016               1594              BEQ     OP_ASL_B
00001EE8  0C01 0001               1595              CMPI.B  #$1,D1
00001EEC  6700 0032               1596              BEQ     OP_ASL_W
00001EF0  0C01 0002               1597              CMPI.B  #$2,D1
00001EF4  6700 0018               1598              BEQ     OP_ASL_L
00001EF8                          1599              
00001EF8  4EF8 14EA               1600              JMP OP_DATA
00001EFC                          1601  
00001EFC  43F9 000030F5           1602  OP_ASL_B    LEA     DISP_ASL_B,A1
00001F02  103C 000E               1603              MOVE.B  #14,D0
00001F06  4E4F                    1604              TRAP    #15
00001F08  183C 0000               1605              MOVE.B  #0,D4
00001F0C  4E75                    1606              RTS
00001F0E                          1607  
00001F0E  43F9 00003119           1608  OP_ASL_L    LEA     DISP_ASL_L,A1
00001F14  103C 000E               1609              MOVE.B  #14,D0
00001F18  4E4F                    1610              TRAP    #15
00001F1A  183C 0002               1611              MOVE.B  #2,D4
00001F1E  4E75                    1612              RTS
00001F20                          1613  
00001F20  43F9 00003107           1614  OP_ASL_W    LEA     DISP_ASL_W,A1
00001F26  103C 000E               1615              MOVE.B  #14,D0
00001F2A  4E4F                    1616              TRAP    #15
00001F2C  183C 0001               1617              MOVE.B  #1,D4
00001F30  4E75                    1618              RTS
00001F32                          1619   
00001F32                          1620  *---------------------------------------------------------------------------*
00001F32                          1621  * OP_ROR: decode and display ROR
00001F32                          1622  *---------------------------------------------------------------------------*             
00001F32  E599                    1623  OP_ROR      ROL.L   #2,D1
00001F34  0281 00000003           1624              ANDI.L  #$3,D1
00001F3A  0C01 0000               1625              CMPI.B  #0,D1
00001F3E  6700 0016               1626              BEQ     OP_ROR_B
00001F42  0C01 0001               1627              CMPI.B  #$1,D1
00001F46  6700 0032               1628              BEQ     OP_ROR_W
00001F4A  0C01 0002               1629              CMPI.B  #$2,D1
00001F4E  6700 0018               1630              BEQ     OP_ROR_L
00001F52                          1631              
00001F52  4EF8 14EA               1632              JMP OP_DATA
00001F56                          1633  
00001F56  43F9 00003122           1634  OP_ROR_B    LEA     DISP_ROR_B,A1
00001F5C  103C 000E               1635              MOVE.B  #14,D0
00001F60  4E4F                    1636              TRAP    #15
00001F62  183C 0000               1637              MOVE.B  #0,D4
00001F66  4E75                    1638              RTS
00001F68                          1639  
00001F68  43F9 00003146           1640  OP_ROR_L    LEA     DISP_ROR_L,A1
00001F6E  103C 000E               1641              MOVE.B  #14,D0
00001F72  4E4F                    1642              TRAP    #15
00001F74  183C 0002               1643              MOVE.B  #2,D4
00001F78  4E75                    1644              RTS
00001F7A                          1645  
00001F7A  43F9 00003134           1646  OP_ROR_W    LEA     DISP_ROR_W,A1
00001F80  103C 000E               1647              MOVE.B  #14,D0
00001F84  4E4F                    1648              TRAP    #15
00001F86  183C 0001               1649              MOVE.B  #1,D4
00001F8A  4E75                    1650              RTS
00001F8C                          1651  
00001F8C                          1652  *---------------------------------------------------------------------------*
00001F8C                          1653  * OP_ROL: decode and display ROL
00001F8C                          1654  *---------------------------------------------------------------------------*             
00001F8C  E599                    1655  OP_ROL      ROL.L   #2,D1
00001F8E  0281 00000003           1656              ANDI.L  #$3,D1
00001F94  0C01 0000               1657              CMPI.B  #0,D1
00001F98  6700 0016               1658              BEQ     OP_ROL_B
00001F9C  0C01 0001               1659              CMPI.B  #$1,D1
00001FA0  6700 0032               1660              BEQ     OP_ROL_W
00001FA4  0C01 0002               1661              CMPI.B  #$2,D1
00001FA8  6700 0018               1662              BEQ     OP_ROL_L
00001FAC                          1663              
00001FAC  4EF8 14EA               1664              JMP OP_DATA
00001FB0                          1665  
00001FB0                          1666  
00001FB0  43F9 0000312B           1667  OP_ROL_B    LEA     DISP_ROL_B,A1
00001FB6  103C 000E               1668              MOVE.B  #14,D0
00001FBA  4E4F                    1669              TRAP    #15
00001FBC  183C 0000               1670              MOVE.B  #0,D4
00001FC0  4E75                    1671              RTS
00001FC2                          1672  
00001FC2  43F9 0000314F           1673  OP_ROL_L    LEA     DISP_ROL_L,A1
00001FC8  103C 000E               1674              MOVE.B  #14,D0
00001FCC  4E4F                    1675              TRAP    #15
00001FCE  183C 0002               1676              MOVE.B  #2,D4
00001FD2  4E75                    1677              RTS
00001FD4                          1678  
00001FD4  43F9 0000313D           1679  OP_ROL_W    LEA     DISP_ROL_W,A1
00001FDA  103C 000E               1680              MOVE.B  #14,D0
00001FDE  4E4F                    1681              TRAP    #15
00001FE0  183C 0001               1682              MOVE.B  #1,D4
00001FE4  4E75                    1683              RTS
00001FE6                          1684              
00001FE6                          1685  *---------------------------------------------------------------------------*
00001FE6                          1686  * OP1111 : Special reserved
00001FE6                          1687  *---------------------------------------------------------------------------*           
00001FE6  4EF8 14EA               1688  OP1111      JMP     OP_DATA
00001FEA                          1689  
00001FEA                          1690  *---------------------------------------------------------------------------*
00001FEA                          1691  * EA_NOSRC: decode and display effective addresses for NEG/JSR
00001FEA                          1692  *---------------------------------------------------------------------------*
00001FEA                          1693  EA_NOSRC    
00001FEA  4EB9 000020A8           1694              JSR     SRC_MODE
00001FF0  43F9 00002E1C           1695              LEA     ENDLINE_M,A1
00001FF6  103C 000E               1696              MOVE.B  #14,D0
00001FFA  4E4F                    1697              TRAP    #15
00001FFC  4E75                    1698              RTS
00001FFE                          1699              
00001FFE                          1700  *---------------------------------------------------------------------------*
00001FFE                          1701  * EA_ARITH: decode and display effective addresses for DIVS/MULS
00001FFE                          1702  *---------------------------------------------------------------------------*
00001FFE                          1703  EA_ARITH
00001FFE  4EB9 000020A8           1704              JSR     SRC_MODE
00002004  43F9 00003196           1705              LEA     DISP_D,A1
0000200A  103C 000E               1706              MOVE.B  #14,D0
0000200E  4E4F                    1707              TRAP    #15
00002010  4EB9 00002334           1708              JSR     DEST_REGISTER
00002016  43F9 00002E1C           1709              LEA     ENDLINE_M,A1
0000201C  103C 000E               1710              MOVE.B  #14,D0
00002020  4E4F                    1711              TRAP    #15
00002022  4E75                    1712              RTS
00002024                          1713              
00002024                          1714  *---------------------------------------------------------------------------*
00002024                          1715  * EA_MOVEA: decode and display effective addresses for MOVEA/LEA
00002024                          1716  *---------------------------------------------------------------------------*
00002024                          1717  EA_MOVEA
00002024  4EB9 000020A8           1718              JSR     SRC_MODE
0000202A  43F9 000031A7           1719              LEA     DISP_AOP,A1
00002030  103C 000E               1720              MOVE.B  #14,D0
00002034  4E4F                    1721              TRAP    #15
00002036  4EB9 00002334           1722              JSR     DEST_REGISTER
0000203C  43F9 000031A5           1723              LEA     DISP_CP,A1
00002042  103C 000D               1724              MOVE.B  #13,D0
00002046  4E4F                    1725              TRAP    #15
00002048  4E75                    1726              RTS
0000204A                          1727              
0000204A                          1728  *---------------------------------------------------------------------------*
0000204A                          1729  * EA_GEN: decode and display effective addresses for MOVE
0000204A                          1730  *---------------------------------------------------------------------------*
0000204A                          1731  EA_GEN          
0000204A                          1732              * retrieve/display source mode/register
0000204A  4EB9 000020A8           1733              JSR     SRC_MODE
00002050                          1734              
00002050                          1735              * retrieve/display destination mode/register
00002050  4EB9 00002064           1736              JSR     DEST_MODE
00002056                          1737              
00002056  43F9 00002E1C           1738              LEA     ENDLINE_M,A1
0000205C  103C 000E               1739              MOVE.B  #14,D0
00002060  4E4F                    1740              TRAP    #15
00002062                          1741              
00002062  4E75                    1742              RTS
00002064                          1743  
00002064                          1744  *---------------------------------------------------------------------------*
00002064                          1745  * DEST_MODE: decode and display destination mode (bit 8 - 6)
00002064                          1746  *---------------------------------------------------------------------------*           
00002064                          1747  DEST_MODE   
00002064                          1748              * clear registers to store temp data
00002064  4280                    1749              CLR.L   D0                      
00002066  4281                    1750              CLR.L   D1                      
00002068  207C 00000000           1751              MOVEA.L #0, A0                  
0000206E  227C 00000000           1752              MOVEA.L #0, A1                  
00002074  2205                    1753              MOVE.L  D5,D1
00002076  EC89                    1754              LSR.L   #6,D1
00002078  0281 00000007           1755              ANDI.L  #$7,D1
0000207E  0C01 0000               1756              CMPI.B  #0,D1   * Dn
00002082  6700 0082               1757              BEQ     D_MODE000
00002086  0C01 0002               1758              CMPI.B  #2,D1   * (An)
0000208A  6700 00C2               1759              BEQ     D_MODE010
0000208E  0C01 0003               1760              CMPI.B  #3,D1   * (An)+
00002092  6700 011A               1761              BEQ     D_MODE011
00002096  0C01 0004               1762              CMPI.B  #4,D1   * -(An)
0000209A  6700 0132               1763              BEQ     D_MODE100
0000209E  0C01 0007               1764              CMPI.B  #7,D1  * abs
000020A2  6700 017C               1765              BEQ     D_MODE111 
000020A6  4E75                    1766              RTS
000020A8                          1767  
000020A8                          1768  *---------------------------------------------------------------------------*
000020A8                          1769  * SRC_MODE: decode and display source mode (bit 5 - 3)
000020A8                          1770  *---------------------------------------------------------------------------*  
000020A8                          1771  SRC_MODE    
000020A8                          1772              * clear registers to store temp data
000020A8  4280                    1773              CLR.L   D0                      
000020AA  4281                    1774              CLR.L   D1                      
000020AC  207C 00000000           1775              MOVEA.L #0, A0                  
000020B2  227C 00000000           1776              MOVEA.L #0, A1                  
000020B8  2205                    1777              MOVE.L  D5,D1
000020BA  E489                    1778              LSR.L   #2,D1
000020BC  0281 0000000E           1779              ANDI.L  #$E,D1
000020C2                          1780              
000020C2  0C01 0000               1781              CMPI.B  #0,D1   * Dn
000020C6  6700 002A               1782              BEQ     MODE000
000020CA  0C01 0002               1783              CMPI.B  #2,D1   * An 
000020CE  6700 004A               1784              BEQ     MODE001
000020D2  0C01 0004               1785              CMPI.B  #4,D1   * (An)
000020D6  6700 0056               1786              BEQ     MODE010
000020DA  0C01 0006               1787              CMPI.B  #6,D1   * (An)+
000020DE  6700 008E               1788              BEQ     MODE011
000020E2  0C01 0008               1789              CMPI.B  #8,D1   * -(An)
000020E6  6700 00A6               1790              BEQ     MODE100
000020EA  0C01 000F               1791              CMPI.B  #15,D1  * abs/immediate
000020EE  6700 00FE               1792              BEQ     MODE111 
000020F2                          1793        
000020F2                          1794  *---------------------------------------------------------------------------*
000020F2                          1795  * MODE000: decode and display source mode Dn
000020F2                          1796  *---------------------------------------------------------------------------*           
000020F2                          1797  MODE000     *Dn
000020F2  43F9 00003196           1798              LEA     DISP_D,A1
000020F8  103C 000E               1799              MOVE.B  #14,D0
000020FC  4E4F                    1800              TRAP    #15
000020FE  4EB9 00002390           1801              JSR     SRC_REGISTER
00002104  4E75                    1802              RTS
00002106                          1803  
00002106                          1804  *---------------------------------------------------------------------------*
00002106                          1805  * D_MODE000: decode and display dest mode Dn
00002106                          1806  *---------------------------------------------------------------------------*
00002106                          1807  D_MODE000     *Dn
00002106  43F9 00003196           1808              LEA     DISP_D,A1
0000210C  103C 000E               1809              MOVE.B  #14,D0
00002110  4E4F                    1810              TRAP    #15
00002112  4EB9 00002334           1811              JSR     DEST_REGISTER
00002118  4E75                    1812              RTS
0000211A                          1813  
0000211A                          1814  *---------------------------------------------------------------------------*
0000211A                          1815  * MODE001: decode and display source mode An
0000211A                          1816  *---------------------------------------------------------------------------* 
0000211A                          1817  MODE001 *An
0000211A  43F9 0000319B           1818              LEA     DISP_A,A1
00002120  103C 000E               1819              MOVE.B  #14,D0
00002124  4E4F                    1820              TRAP    #15
00002126  4EB9 00002390           1821              JSR     SRC_REGISTER
0000212C                          1822          
0000212C  4E75                    1823              RTS
0000212E                          1824  
0000212E                          1825  *---------------------------------------------------------------------------*
0000212E                          1826  * MODE010: decode and display source mode (An)
0000212E                          1827  *---------------------------------------------------------------------------*    
0000212E                          1828  MODE010 *(An)
0000212E  43F9 000031A7           1829              LEA     DISP_AOP,A1  *display (A
00002134  103C 000E               1830              MOVE.B  #14,D0
00002138  4E4F                    1831              TRAP    #15
0000213A                          1832  
0000213A  4EB9 00002390           1833              JSR     SRC_REGISTER * display register
00002140                          1834  
00002140  43F9 000031A5           1835              LEA     DISP_CP,A1   *display )
00002146  103C 000E               1836              MOVE.B  #14,D0
0000214A  4E4F                    1837              TRAP    #15
0000214C                          1838              
0000214C  4E75                    1839              RTS
0000214E                          1840  
0000214E                          1841  *---------------------------------------------------------------------------*
0000214E                          1842  * D_MODE010: decode and display dest mode (An)
0000214E                          1843  *---------------------------------------------------------------------------*
0000214E                          1844  D_MODE010 *(An)
0000214E  43F9 000031A7           1845              LEA     DISP_AOP,A1  *display (A
00002154  103C 000E               1846              MOVE.B  #14,D0
00002158  4E4F                    1847              TRAP    #15
0000215A                          1848     
0000215A  4EB9 00002334           1849              JSR     DEST_REGISTER * display register
00002160                          1850  
00002160  43F9 000031A5           1851              LEA     DISP_CP,A1   *display )
00002166  103C 000E               1852              MOVE.B  #14,D0
0000216A  4E4F                    1853              TRAP    #15
0000216C                          1854              
0000216C  4E75                    1855              RTS
0000216E                          1856  
0000216E                          1857  *---------------------------------------------------------------------------*
0000216E                          1858  * MODE011: decode and display source mode (An)+
0000216E                          1859  *---------------------------------------------------------------------------*
0000216E                          1860  MODE011 *(An)+
0000216E  43F9 000031A7           1861              LEA     DISP_AOP,A1      *display (A
00002174  103C 000E               1862              MOVE.B  #14,D0
00002178  4E4F                    1863              TRAP    #15
0000217A                          1864              
0000217A  4EB9 00002390           1865              JSR     SRC_REGISTER    * display register
00002180                          1866  
00002180  43F9 000031B4           1867              LEA     DISP_POST,A1    *display )+
00002186  103C 000E               1868              MOVE.B  #14,D0
0000218A  4E4F                    1869              TRAP    #15
0000218C                          1870              
0000218C  4E75                    1871              RTS
0000218E                          1872              
0000218E                          1873  *---------------------------------------------------------------------------*
0000218E                          1874  * MODE100: decode and display source mode -(An)
0000218E                          1875  *---------------------------------------------------------------------------*
0000218E                          1876  MODE100 *-(An)
0000218E  43F9 000031AD           1877              LEA     DISP_PRE,A1    *display -(A
00002194  103C 000E               1878              MOVE.B  #14,D0
00002198  4E4F                    1879              TRAP    #15
0000219A                          1880  
0000219A  4EB9 00002390           1881              JSR     SRC_REGISTER    *display register
000021A0                          1882  
000021A0  43F9 000031A5           1883              LEA     DISP_CP,A1   *display )
000021A6  103C 000E               1884              MOVE.B  #14,D0
000021AA  4E4F                    1885              TRAP    #15
000021AC                          1886              
000021AC  4E75                    1887              RTS
000021AE                          1888  
000021AE                          1889  *---------------------------------------------------------------------------*
000021AE                          1890  * D_MODE011: decode and display dest mode (An)+
000021AE                          1891  *---------------------------------------------------------------------------*
000021AE                          1892  D_MODE011 *(An)+
000021AE  43F9 000031A7           1893              LEA     DISP_AOP,A1      *display (A
000021B4  103C 000E               1894              MOVE.B  #14,D0
000021B8  4E4F                    1895              TRAP    #15
000021BA                          1896  
000021BA  4EB9 00002334           1897              JSR     DEST_REGISTER    * display register
000021C0                          1898  
000021C0  43F9 000031B4           1899              LEA     DISP_POST,A1    *display )+
000021C6  103C 000E               1900              MOVE.B  #14,D0
000021CA  4E4F                    1901              TRAP    #15
000021CC                          1902              
000021CC  4E75                    1903              RTS
000021CE                          1904              
000021CE                          1905  *---------------------------------------------------------------------------*
000021CE                          1906  * D_MODE100: decode and display dest mode -(An)
000021CE                          1907  *---------------------------------------------------------------------------*            
000021CE                          1908  D_MODE100 *-(An)
000021CE  43F9 000031AD           1909              LEA     DISP_PRE,A1    *display -(A
000021D4  103C 000E               1910              MOVE.B  #14,D0
000021D8  4E4F                    1911              TRAP    #15
000021DA                          1912              
000021DA  4EB9 00002334           1913              JSR     DEST_REGISTER    *display register
000021E0                          1914  
000021E0  43F9 000031A5           1915              LEA     DISP_CP,A1   *display )
000021E6  103C 000E               1916              MOVE.B  #14,D0
000021EA  4E4F                    1917              TRAP    #15
000021EC                          1918              
000021EC  4E75                    1919              RTS
000021EE                          1920  
000021EE                          1921  *---------------------------------------------------------------------------*
000021EE                          1922  * MODE111: decode and display source mode absolute/immediate
000021EE                          1923  *---------------------------------------------------------------------------*
000021EE                          1924  MODE111     * abs/immediate
000021EE                          1925              * clear registers to store temp data
000021EE  4280                    1926              CLR.L   D0                      
000021F0  4281                    1927              CLR.L   D1                      
000021F2  207C 00000000           1928              MOVEA.L #0, A0                  
000021F8  227C 00000000           1929              MOVEA.L #0, A1                  
000021FE  2205                    1930              MOVE.L  D5,D1
00002200                          1931              
00002200                          1932              * retrieve source register for MODE 111
00002200  E389                    1933              LSL.L   #1,D1   * shift the bits to left by 1
00002202  0281 0000000E           1934              ANDI.L  #$E,D1  * mask the first 4 bits 
00002208  0C01 0000               1935              CMPI.B  #0, D1  * if it's 0000, absolute word address
0000220C  6700 003E               1936              BEQ     WORDMODE
00002210  0C01 0002               1937              CMPI.B  #2, D1  * if it's 0010, absolute long address
00002214  6700 0062               1938              BEQ     LONGMODE
00002218  0C01 0008               1939              CMPI.B  #8, D1  * if it's 1000, immediate data
0000221C  6700 0086               1940              BEQ     IMMEDIATE
00002220                          1941       
00002220                          1942  *---------------------------------------------------------------------------*
00002220                          1943  * D_MODE111: decode and display dest mode absolute/immediate
00002220                          1944  *---------------------------------------------------------------------------*           
00002220                          1945  D_MODE111   * abs
00002220                          1946              * clear registers to store temp data
00002220  4280                    1947              CLR.L   D0                      
00002222  4281                    1948              CLR.L   D1                      
00002224  207C 00000000           1949              MOVEA.L #0, A0                  
0000222A  227C 00000000           1950              MOVEA.L #0, A1                  
00002230  2205                    1951              MOVE.L  D5,D1
00002232                          1952              
00002232                          1953              * retrieve dest register for MODE 111
00002232  EC89                    1954              LSR.L   #6,D1   * shift the bits to right by 6
00002234  E689                    1955              LSR.L   #3,D1   * shift the bits to right by extra 3
00002236  0201 0001               1956              ANDI.B  #1,D1   * mask the first 2 bits 
0000223A  0C01 0000               1957              CMPI.B  #0, D1  * if it's 000, absolute word address
0000223E  6700 000C               1958              BEQ     WORDMODE
00002242  0C01 0001               1959              CMPI.B  #1, D1  * if it's 001, absolute long address
00002246  6700 0030               1960              BEQ     LONGMODE
0000224A                          1961              *JSR     OP_DATA *not sure..
0000224A  4E75                    1962              RTS
0000224C                          1963  
0000224C                          1964  
0000224C                          1965  *---------------------------------------------------------------------------*
0000224C                          1966  * WORDMODE: absolute word address
0000224C                          1967  *---------------------------------------------------------------------------*
0000224C  43F9 00003191           1968  WORDMODE    LEA     DISP_HEX,A1
00002252  103C 000E               1969              MOVE.B  #14,D0
00002256  4E4F                    1970              TRAP    #15
00002258                          1971              
00002258  4285                    1972              CLR.L   D5
0000225A  3A1D                    1973              MOVE.W  (A5)+,D5
0000225C                          1974              
0000225C  43F9 00002E6F           1975              LEA     TMPOUTPUT,A1
00002262  2205                    1976              MOVE.L  D5,D1
00002264  7404                    1977              MOVE.L  #4,D2       *move word size 4
00002266  4EB8 11EA               1978              JSR     HEX2ASCII
0000226A  43F9 00002E6F           1979              LEA     TMPOUTPUT,A1
00002270  103C 000E               1980              MOVE.B  #14,D0
00002274  4E4F                    1981              TRAP    #15
00002276                          1982              
00002276  4E75                    1983              RTS
00002278                          1984  
00002278                          1985  *---------------------------------------------------------------------------*
00002278                          1986  * LONGMODE: absolute long address
00002278                          1987  *---------------------------------------------------------------------------*
00002278  43F9 00003191           1988  LONGMODE    LEA     DISP_HEX,A1
0000227E  103C 000E               1989              MOVE.B  #14,D0
00002282  4E4F                    1990              TRAP    #15
00002284                          1991              
00002284  4285                    1992              CLR.L   D5
00002286  2A1D                    1993              MOVE.L  (A5)+,D5
00002288                          1994              
00002288  43F9 00002E6F           1995              LEA     TMPOUTPUT,A1
0000228E  2205                    1996              MOVE.L  D5,D1
00002290  7408                    1997              MOVE.L  #8,D2           *move longword size 8
00002292  4EB8 11EA               1998              JSR     HEX2ASCII
00002296  43F9 00002E6F           1999              LEA     TMPOUTPUT,A1
0000229C  103C 000E               2000              MOVE.B  #14,D0
000022A0  4E4F                    2001              TRAP    #15
000022A2                          2002              
000022A2  4E75                    2003              RTS
000022A4                          2004  
000022A4                          2005  
000022A4                          2006  *---------------------------------------------------------------------------*
000022A4                          2007  * IMMEDIATE: immediate address
000022A4                          2008  *---------------------------------------------------------------------------*
000022A4  43F9 000031B7           2009  IMMEDIATE   LEA     DISP_LB,A1
000022AA  103C 000E               2010              MOVE.B  #14,D0
000022AE  4E4F                    2011              TRAP    #15
000022B0  43F9 00003191           2012              LEA     DISP_HEX,A1
000022B6  103C 000E               2013              MOVE.B  #14,D0
000022BA  4E4F                    2014              TRAP    #15
000022BC                          2015              
000022BC                          2016              * check for size
000022BC  0C04 0000               2017              CMPI.B  #0,D4
000022C0  6700 0012               2018              BEQ     IMMD_B
000022C4  0C04 0001               2019              CMPI.B  #1,D4
000022C8  6700 002A               2020              BEQ     IMMD_W
000022CC  0C04 0002               2021              CMPI.B  #2,D4
000022D0  6700 0042               2022              BEQ     IMMD_L
000022D4                          2023  
000022D4                          2024  IMMD_B
000022D4  4285                    2025              CLR.L   D5
000022D6  3A1D                    2026              MOVE.W  (A5)+,D5
000022D8                          2027              
000022D8  43F9 00002E6F           2028              LEA     TMPOUTPUT,A1
000022DE  2205                    2029              MOVE.L  D5,D1
000022E0  7402                    2030              MOVE.L  #2,D2
000022E2  4EB8 11EA               2031              JSR     HEX2ASCII
000022E6  43F9 00002E6F           2032              LEA     TMPOUTPUT,A1
000022EC  103C 000E               2033              MOVE.B  #14,D0
000022F0  4E4F                    2034              TRAP    #15
000022F2  4E75                    2035              RTS
000022F4                          2036              
000022F4                          2037  IMMD_W
000022F4  4285                    2038              CLR.L   D5
000022F6  3A1D                    2039              MOVE.W  (A5)+,D5
000022F8                          2040              
000022F8  43F9 00002E6F           2041              LEA     TMPOUTPUT,A1
000022FE  2205                    2042              MOVE.L  D5,D1
00002300  7404                    2043              MOVE.L  #4,D2
00002302  4EB8 11EA               2044              JSR     HEX2ASCII
00002306  43F9 00002E6F           2045              LEA     TMPOUTPUT,A1
0000230C  103C 000E               2046              MOVE.B  #14,D0
00002310  4E4F                    2047              TRAP    #15
00002312  4E75                    2048              RTS
00002314                          2049              
00002314                          2050  
00002314                          2051  IMMD_L
00002314  4285                    2052              CLR.L   D5
00002316  3A1D                    2053              MOVE.W  (A5)+,D5
00002318                          2054              
00002318  43F9 00002E6F           2055              LEA     TMPOUTPUT,A1
0000231E  2205                    2056              MOVE.L  D5,D1
00002320  7408                    2057              MOVE.L  #8,D2
00002322  4EB8 11EA               2058              JSR     HEX2ASCII
00002326  43F9 00002E6F           2059              LEA     TMPOUTPUT,A1
0000232C  103C 000E               2060              MOVE.B  #14,D0
00002330  4E4F                    2061              TRAP    #15
00002332  4E75                    2062              RTS
00002334                          2063  
00002334                          2064  
00002334                          2065  *---------------------------------------------------------------------------*
00002334                          2066  * DEST_REGISTER: decode and display destination register (bit 11 - 9)
00002334                          2067  *---------------------------------------------------------------------------*
00002334                          2068  DEST_REGISTER
00002334                          2069              * clear registers to store temp data
00002334  4280                    2070              CLR.L   D0                      
00002336  4281                    2071              CLR.L   D1                      
00002338  207C 00000000           2072              MOVEA.L #0, A0                  
0000233E  227C 00000000           2073              MOVEA.L #0, A1 
00002344                          2074              
00002344  2205                    2075              MOVE.L  D5,D1
00002346  EC89                    2076              LSR.L   #6,D1
00002348  E689                    2077              LSR.L   #3,D1
0000234A  0281 00000007           2078              ANDI.L  #7,D1
00002350                          2079              
00002350  0C01 0000               2080              CMPI.B  #0,D1
00002354  6700 0092               2081              BEQ     REG_0
00002358  0C01 0001               2082              CMPI.B  #1,D1
0000235C  6700 0098               2083              BEQ     REG_1
00002360  0C01 0002               2084              CMPI.B  #2,D1
00002364  6700 009E               2085              BEQ     REG_2
00002368  0C01 0003               2086              CMPI.B  #3,D1
0000236C  6700 00A4               2087              BEQ     REG_3
00002370  0C01 0004               2088              CMPI.B  #4,D1
00002374  6700 00AA               2089              BEQ     REG_4
00002378  0C01 0005               2090              CMPI.B  #5,D1
0000237C  6700 00B0               2091              BEQ     REG_5
00002380  0C01 0006               2092              CMPI.B  #6,D1
00002384  6700 00B6               2093              BEQ     REG_6
00002388  0C01 0007               2094              CMPI.B  #7,D1
0000238C  6700 00BC               2095              BEQ     REG_7
00002390                          2096  
00002390                          2097  *---------------------------------------------------------------------------*
00002390                          2098  * SRC_REGISTER: decode and display source register (bit 2 - 0)
00002390                          2099  *---------------------------------------------------------------------------*           
00002390                          2100  SRC_REGISTER 
00002390                          2101              * clear registers to store temp data
00002390  4280                    2102              CLR.L   D0                      
00002392  4281                    2103              CLR.L   D1                      
00002394  207C 00000000           2104              MOVEA.L #0, A0                  
0000239A  227C 00000000           2105              MOVEA.L #0, A1                  
000023A0                          2106              
000023A0  2205                    2107              MOVE.L  D5,D1   * temp store the processing data
000023A2  0281 00000007           2108              ANDI.L  #7,D1   * mask the first 4 bits with 0111
000023A8                          2109              
000023A8  0C01 0000               2110              CMPI.B  #0,D1
000023AC  6700 003A               2111              BEQ     REG_0
000023B0  0C01 0001               2112              CMPI.B  #1,D1
000023B4  6700 0040               2113              BEQ     REG_1
000023B8  0C01 0002               2114              CMPI.B  #2,D1
000023BC  6700 0046               2115              BEQ     REG_2
000023C0  0C01 0003               2116              CMPI.B  #3,D1
000023C4  6700 004C               2117              BEQ     REG_3
000023C8  0C01 0004               2118              CMPI.B  #4,D1
000023CC  6700 0052               2119              BEQ     REG_4
000023D0  0C01 0005               2120              CMPI.B  #5,D1
000023D4  6700 0058               2121              BEQ     REG_5
000023D8  0C01 0006               2122              CMPI.B  #6,D1
000023DC  6700 005E               2123              BEQ     REG_6
000023E0  0C01 0007               2124              CMPI.B  #7,D1
000023E4  6700 0064               2125              BEQ     REG_7
000023E8                          2126  
000023E8                          2127  *---------------------------------------------------------------------------*
000023E8                          2128  * REG_0 ~ REG_7: display register 0 to 7
000023E8                          2129  *---------------------------------------------------------------------------*
000023E8  43F9 000031BC           2130  REG_0       LEA     DISP_0,A1
000023EE  103C 000E               2131              MOVE.B  #14,D0
000023F2  4E4F                    2132              TRAP    #15
000023F4  4E75                    2133              RTS
000023F6                          2134              
000023F6  43F9 000031BE           2135  REG_1       LEA     DISP_1,A1
000023FC  103C 000E               2136              MOVE.B  #14,D0
00002400  4E4F                    2137              TRAP    #15
00002402  4E75                    2138              RTS
00002404                          2139              
00002404                          2140  
00002404  43F9 000031C0           2141  REG_2       LEA     DISP_2,A1
0000240A  103C 000E               2142              MOVE.B  #14,D0
0000240E  4E4F                    2143              TRAP    #15
00002410  4E75                    2144              RTS
00002412                          2145            
00002412  43F9 000031C2           2146  REG_3       LEA     DISP_3,A1
00002418  103C 000E               2147              MOVE.B  #14,D0
0000241C  4E4F                    2148              TRAP    #15
0000241E  4E75                    2149              RTS
00002420                          2150              
00002420  43F9 000031C4           2151  REG_4       LEA     DISP_4,A1
00002426  103C 000E               2152              MOVE.B  #14,D0
0000242A  4E4F                    2153              TRAP    #15
0000242C  4E75                    2154              RTS
0000242E                          2155              
0000242E  43F9 000031C6           2156  REG_5       LEA     DISP_5,A1
00002434  103C 000E               2157              MOVE.B  #14,D0
00002438  4E4F                    2158              TRAP    #15
0000243A  4E75                    2159              RTS
0000243C                          2160              
0000243C  43F9 000031C8           2161  REG_6       LEA     DISP_6,A1
00002442  103C 000E               2162              MOVE.B  #14,D0
00002446  4E4F                    2163              TRAP    #15
00002448  4E75                    2164              RTS
0000244A                          2165              
0000244A  43F9 000031CA           2166  REG_7       LEA     DISP_7,A1
00002450  103C 000E               2167              MOVE.B  #14,D0
00002454  4E4F                    2168              TRAP    #15
00002456  4E75                    2169              RTS
00002458                          2170              
00002458                          2171  *---------------------------------------------------------------------------*
00002458                          2172  * REPEAT : Ask user whether they wish to run the program again
00002458                          2173  *---------------------------------------------------------------------------*           
00002458  4246                    2174  REPEAT      CLR.W   D6                      * Reset D6 (Loop Count)
0000245A  43F9 00002C95           2175              LEA     REPEATMSG,A1
00002460  103C 000E               2176              MOVE.B  #14,D0
00002464  4E4F                    2177              TRAP    #15
00002466                          2178              
00002466  43F9 00002E1F           2179              LEA     TMPINPUT,A1             * allocate space to temp store user input
0000246C  103C 0002               2180              MOVE.B  #2,D0
00002470  4E4F                    2181              TRAP    #15
00002472                          2182  
00002472  0C01 0001               2183              CMPI.B  #1,D1                   * check for length of user input
00002476  66E0                    2184              BNE     REPEAT                  * return to the beginning of the function if unequal
00002478                          2185              
00002478  0C11 0059               2186              CMPI.B  #$59,(A1)               * compare the input with Y    
0000247C  6700 EB8C               2187              BEQ     PROGLP                  * repeat the program
00002480                          2188              
00002480  0C11 0079               2189              CMPI.B  #$79,(A1)               * compare the input with y    
00002484  6700 EB84               2190              BEQ     PROGLP                  * repeat the program
00002488                          2191              
00002488  0C11 004E               2192              CMPI.B  #$4E,(A1)               * compare the input with N    
0000248C  6700 049A               2193              BEQ     TERMINATE               * finish program
00002490                          2194              
00002490  0C11 006E               2195              CMPI.B  #$6E,(A1)               * compare the input with n    
00002494  6700 0492               2196              BEQ     TERMINATE               * finish program
00002498                          2197              
00002498  60BE                    2198              BRA     REPEAT                  * invalid input/repeat the function
0000249A                          2199  
0000249A                          2200  *---------------------------------------------------------------------------*
0000249A                          2201  * EA DECODING INTERFACE
0000249A                          2202  * [A0] - RESERVED FOR USE
0000249A                          2203  * [D2] - RESERVED FOR USE
0000249A                          2204  * RETURNS - ERROR FLAG IF FAILED TO PUSH SRC EA INTO STACK
0000249A                          2205  *---------------------------------------------------------------------------*
0000249A                          2206  GET_EA_EA_SRC
0000249A                          2207      *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
0000249A                          2208      
0000249A                          2209      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
0000249A  2405                    2210      MOVE.L  D5,D2                           * CLEAN COPY TO D2
0000249C  E68A                    2211      LSR.L   #3,D2                           * [D2] Temporarily used D2 for shifting bits
0000249E  23C2 000031E2           2212      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
000024A4  7407                    2213      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
000024A6  C5B9 000031E2           2214      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
000024AC                          2215                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
000024AC                          2216      
000024AC                          2217      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
000024AC                          2218      *DESTINATION REGISTER FORMAT STANDARD         *
000024AC                          2219      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
000024AC                          2220      *WHEN BIT = 0(VALID ADDRESS MODE)             *
000024AC                          2221      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
000024AC                          2222      *0 - Dn                                       *
000024AC                          2223      *1 - An                                       *
000024AC                          2224      *2 - (An)                                     *
000024AC                          2225      *3 - (An)+                                    *
000024AC                          2226      *4 - -(An)                                    *
000024AC                          2227      *5 - (XXX).W                                  *
000024AC                          2228      *6 - (XXX).L                                  *
000024AC                          2229      *7 - #<data>                                  *
000024AC                          2230      ***********************************************
000024AC                          2231      
000024AC                          2232      *** Check if source ...  <ea> = Dn
000024AC                          2233  CHECK0    
000024AC  41F9 000031D2           2234            LEA     TEMP_REGISTER_FORMAT,A0
000024B2  1439 000031D1           2235            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000024B8  1082                    2236            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000024BA  0239 0001 000031D2      2237            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
000024C2  0C39 0001 000031D2      2238            CMPI.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
000024CA  6700 006A               2239            BEQ     CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
000024CE  0CB9 00000000 000031E2  2240            CMPI.L     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn) - COMPARE MODES TO SEE IF IT IS THIS MODE
000024D8  6600 005C               2241            BNE     CHECK1
000024DC                          2242            
000024DC                          2243            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000024DC  163C 0020               2244            MOVE.B    #' ',D3
000024E0  6100 03C8               2245            BSR       PUSH_STACK
000024E4  163C 0044               2246            MOVE.B    #'D',D3
000024E8  6100 03C0               2247            BSR       PUSH_STACK
000024EC                          2248  
000024EC                          2249            *FIND REGISTER NUMBER END LOCATION*  
000024EC  13F9 000031D4 000031DA  2250            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
000024F6  0239 000F 000031DA      2251            AND.B   #$0F,VAR_BYTE_END
000024FE                          2252            
000024FE                          2253            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000024FE  23C5 000031DE           2254            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002504  1439 000031DA           2255            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
0000250A                          2256            
0000250A                          2257            *INTITIALIZE FOR BIT SHIFTING
0000250A  41F9 000031DE           2258            LEA     VAR_TEMP_CLEANCOPY,A0
00002510  2639 000031DE           2259            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002516                          2260  LOOP_SHIFTING
00002516  0C02 0000               2261            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000251A  6700 0008               2262            BEQ     MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
0000251E  E24B                    2263            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002520  5302                    2264            SUB.B   #1,D2                     *DECREMENT COUNTER
00002522  60F2                    2265            BRA     LOOP_SHIFTING             *CONTINUE SHIFTING
00002524                          2266  MASKING_NEXT
00002524  C6BC 00000007           2267            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
0000252A  0603 0030               2268            ADD.B   #$30,D3                   *CONVERT TO CHAR
0000252E  6100 037A               2269            BSR     PUSH_STACK                *PUSH TO STACK
00002532                          2270            
00002532  6000 0336               2271            BRA     GET_SRC_SUCCESS           *RETURN          
00002536                          2272            
00002536                          2273            
00002536                          2274            *** Check if source ...  <ea> = An
00002536  41F9 000031D2           2275  CHECK1    LEA     TEMP_REGISTER_FORMAT,A0
0000253C  1439 000031D1           2276            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002542  1082                    2277            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002544  0239 0002 000031D2      2278            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
0000254C  0C39 0002 000031D2      2279            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
00002554  6700 006A               2280            BEQ     CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00002558  0CB9 00000001 000031E2  2281            CMPI.L  #1,VAR_LONG_ADDRESS_MODE_CHECK                      * An - COMPARE MODES TO SEE IF IT IS THIS MODE
00002562  6600 005C               2282            BNE     CHECK2
00002566                          2283            
00002566                          2284            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002566  163C 0020               2285            MOVE.B    #' ',D3
0000256A  6100 033E               2286            BSR       PUSH_STACK
0000256E  163C 0041               2287            MOVE.B    #'A',D3
00002572  6100 0336               2288            BSR       PUSH_STACK
00002576                          2289  
00002576                          2290            
00002576                          2291            *FIND REGISTER NUMBER END LOCATION*  
00002576  13F9 000031D4 000031DA  2292            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002580  0239 000F 000031DA      2293            AND.B   #$0F,VAR_BYTE_END
00002588                          2294            
00002588                          2295            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002588  23C5 000031DE           2296            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
0000258E  1439 000031DA           2297            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
00002594                          2298            
00002594                          2299            *INTITIALIZE FOR BIT SHIFTING
00002594  41F9 000031DE           2300            LEA     VAR_TEMP_CLEANCOPY,A0
0000259A  2639 000031DE           2301            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000025A0                          2302  LOOP_SHIFTING1
000025A0  0C02 0000               2303            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000025A4  6700 0008               2304            BEQ     MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
000025A8  E24B                    2305            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000025AA  5302                    2306            SUB.B   #1,D2                     *DECREMENT COUNTER
000025AC  60F2                    2307            BRA     LOOP_SHIFTING1             *CONTINUE SHIFTING
000025AE                          2308  MASKING_NEXT1
000025AE  C6BC 00000007           2309            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000025B4  0603 0030               2310            ADD.B   #$30,D3                   *CONVERT TO CHAR
000025B8  6100 02F0               2311            BSR     PUSH_STACK                *PUSH TO STACK
000025BC                          2312            
000025BC  6000 02AC               2313            BRA     GET_SRC_SUCCESS                   *RETURN 
000025C0                          2314            
000025C0                          2315            
000025C0                          2316            
000025C0                          2317            
000025C0                          2318            *** Check if source ...  <ea> = (An)       
000025C0  41F9 000031D2           2319  CHECK2    LEA     TEMP_REGISTER_FORMAT,A0
000025C6  1439 000031D1           2320            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000025CC  1082                    2321            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000025CE  0239 0004 000031D2      2322            ANDI.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
000025D6  0C39 0004 000031D2      2323            CMPI.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
000025DE  6700 007A               2324            BEQ     CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
000025E2  0CB9 00000002 000031E2  2325            CMPI.L   #2,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)  COMPARE MODES TO SEE IF IT IS THIS MODE                                                                *change: checkx++*
000025EC  6600 006C               2326            BNE     CHECK3
000025F0                          2327            
000025F0                          2328            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
000025F0  163C 0020               2329            MOVE.B    #' ',D3
000025F4  6100 02B4               2330            BSR       PUSH_STACK
000025F8  163C 0028               2331            MOVE.B    #'(',D3
000025FC  6100 02AC               2332            BSR       PUSH_STACK
00002600  163C 0041               2333            MOVE.B    #'A',D3
00002604  6100 02A4               2334            BSR       PUSH_STACK
00002608                          2335  
00002608                          2336            
00002608                          2337            *FIND REGISTER NUMBER END LOCATION*  
00002608  13F9 000031D4 000031DA  2338            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002612  0239 000F 000031DA      2339            AND.B   #$0F,VAR_BYTE_END
0000261A                          2340            
0000261A                          2341            *GET INDEX OF THE END OF SRC REGISTER NUMBER
0000261A  23C5 000031DE           2342            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002620  1439 000031DA           2343            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002626                          2344            
00002626                          2345            *INTITIALIZE FOR BIT SHIFTING
00002626  41F9 000031DE           2346            LEA     VAR_TEMP_CLEANCOPY,A0
0000262C  2639 000031DE           2347            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002632                          2348  LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
00002632  0C02 0000               2349            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002636  6700 0008               2350            BEQ     MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
0000263A  E24B                    2351            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
0000263C  5302                    2352            SUB.B   #1,D2                     *DECREMENT COUNTER
0000263E  60F2                    2353            BRA     LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
00002640                          2354  MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
00002640  0283 00000007           2355            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002646  0603 0030               2356            ADDI.B   #$30,D3                   *CONVERT TO CHAR
0000264A  6100 025E               2357            BSR     PUSH_STACK                *PUSH TO STACK
0000264E                          2358            
0000264E  163C 0029               2359            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002652  6100 0256               2360            BSR       PUSH_STACK
00002656                          2361            
00002656  6000 0212               2362            BRA     GET_SRC_SUCCESS                   *RETURN 
0000265A                          2363  
0000265A                          2364            
0000265A                          2365            
0000265A                          2366                      
0000265A                          2367  *** Check if source ...  <ea> = (An)+       
0000265A  41F9 000031D2           2368  CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
00002660  1439 000031D1           2369            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002666  1082                    2370            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002668  0239 0008 000031D2      2371            ANDI.B  #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
00002670  0C39 0008 000031D2      2372            CMPI.B  #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
00002678  6700 0082               2373            BEQ     CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
0000267C  0CB9 00000003 000031E2  2374            CMPI.L  #3,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)+ - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00002686  6600 0074               2375            BNE     CHECK4
0000268A                          2376            
0000268A                          2377            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
0000268A  163C 0020               2378            MOVE.B    #' ',D3
0000268E  6100 021A               2379            BSR       PUSH_STACK
00002692  163C 0028               2380            MOVE.B    #'(',D3
00002696  6100 0212               2381            BSR       PUSH_STACK
0000269A  163C 0041               2382            MOVE.B    #'A',D3
0000269E  6100 020A               2383            BSR       PUSH_STACK
000026A2                          2384  
000026A2                          2385            
000026A2                          2386            *FIND REGISTER NUMBER END LOCATION*  
000026A2  13F9 000031D4 000031DA  2387            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
000026AC  0239 000F 000031DA      2388            ANDI.B   #$0F,VAR_BYTE_END
000026B4                          2389            
000026B4                          2390            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000026B4  23C5 000031DE           2391            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000026BA  1439 000031DA           2392            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000026C0                          2393            
000026C0                          2394            *INTITIALIZE FOR BIT SHIFTING
000026C0  41F9 000031DE           2395            LEA     VAR_TEMP_CLEANCOPY,A0
000026C6  2639 000031DE           2396            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000026CC                          2397            
000026CC                          2398  LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
000026CC  0C02 0000               2399            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000026D0  6700 0008               2400            BEQ     MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
000026D4  E24B                    2401            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000026D6  5302                    2402            SUBI.B   #1,D2                     *DECREMENT COUNTER
000026D8  60F2                    2403            BRA     LOOP_SHIFTING3            *CONTINUE SHIFTING 
000026DA                          2404                                               *change: NAME OF LABEL*
000026DA                          2405  MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
000026DA  0283 00000007           2406            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000026E0  0603 0030               2407            ADDI.B   #$30,D3                   *CONVERT TO CHAR
000026E4  6100 01C4               2408            BSR     PUSH_STACK                *PUSH TO STACK
000026E8                          2409            
000026E8  163C 0029               2410            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
000026EC  6100 01BC               2411            BSR       PUSH_STACK
000026F0  163C 002B               2412            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
000026F4  6100 01B4               2413            BSR       PUSH_STACK
000026F8                          2414            
000026F8  6000 0170               2415            BRA       GET_SRC_SUCCESS                   *RETURN 
000026FC                          2416  
000026FC                          2417            
000026FC                          2418            
000026FC                          2419                      
000026FC                          2420            *** Check if source ...  <ea> = -(An)       
000026FC  41F9 000031D2           2421  CHECK4    LEA     TEMP_REGISTER_FORMAT,A0
00002702  1439 000031D1           2422            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002708  1082                    2423            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000270A  0239 0010 000031D2      2424            ANDI.B  #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
00002712  0C39 0010 000031D2      2425            CMPI.B  #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
0000271A  6700 0082               2426            BEQ     CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
0000271E  0CB9 00000004 000031E2  2427            CMPI.L  #4,VAR_LONG_ADDRESS_MODE_CHECK                      * -(An) - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00002728  6600 0074               2428            BNE     CHECK7
0000272C                          2429            
0000272C                          2430            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
0000272C  163C 0020               2431            MOVE.B    #' ',D3
00002730  6100 0178               2432            BSR       PUSH_STACK
00002734  163C 002D               2433            MOVE.B    #'-',D3
00002738  6100 0170               2434            BSR       PUSH_STACK
0000273C  163C 0028               2435            MOVE.B    #'(',D3
00002740  6100 0168               2436            BSR       PUSH_STACK
00002744  163C 0041               2437            MOVE.B    #'A',D3
00002748  6100 0160               2438            BSR       PUSH_STACK
0000274C                          2439  
0000274C                          2440            
0000274C                          2441            *FIND REGISTER NUMBER END LOCATION*  
0000274C  13F9 000031D4 000031DA  2442            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002756  0239 000F 000031DA      2443            AND.B   #$0F,VAR_BYTE_END
0000275E                          2444            
0000275E                          2445            *GET INDEX OF THE END OF SRC REGISTER NUMBER
0000275E  23C5 000031DE           2446            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002764  1439 000031DA           2447            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
0000276A                          2448            
0000276A                          2449            *INTITIALIZE FOR BIT SHIFTING
0000276A  41F9 000031DE           2450            LEA     VAR_TEMP_CLEANCOPY,A0
00002770  2639 000031DE           2451            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002776                          2452            
00002776                          2453  LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
00002776  0C02 0000               2454            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000277A  6700 0008               2455            BEQ     MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
0000277E  E24B                    2456            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002780  5302                    2457            SUBI.B   #1,D2                     *DECREMENT COUNTER
00002782  60F2                    2458            BRA     LOOP_SHIFTING4            *CONTINUE SHIFTING 
00002784                          2459                                               *change: NAME OF LABEL*
00002784                          2460  MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
00002784  0283 00000007           2461            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
0000278A  0603 0030               2462            ADDI.B   #$30,D3                   *CONVERT TO CHAR
0000278E  6100 011A               2463            BSR     PUSH_STACK                *PUSH TO STACK
00002792                          2464            
00002792  163C 0029               2465            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002796  6100 0112               2466            BSR       PUSH_STACK
0000279A                          2467            
0000279A  6000 00CE               2468            BRA     GET_SRC_SUCCESS                   *RETURN
0000279E                          2469            
0000279E                          2470                      
0000279E                          2471            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
0000279E  0CB9 00000007 000031E2  2472  CHECK7    CMPI.L  #7,VAR_LONG_ADDRESS_MODE_CHECK                      *IF (MODE != 111)
000027A8  6600 00BC               2473            BNE     GET_SRC_FAILED                                      *THAN BRANCH TO UNCESSFULL SRC MODE READ
000027AC                          2474                   
000027AC                          2475            *NEXT: (MODE == 111) 
000027AC                          2476            *NOW: CHECK FOR SRC REGISTER 
000027AC                          2477                  *(000 = (xxx).W)
000027AC                          2478                  *(001 = (xxx).L)
000027AC                          2479                  *(010 = #<data>)
000027AC                          2480  CHECK_WORD  
000027AC  41F9 000031D2           2481            LEA     TEMP_REGISTER_FORMAT,A0
000027B2  1439 000031D1           2482            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000027B8  1082                    2483            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000027BA  0239 0020 000031D2      2484            ANDI.B  #$20,TEMP_REGISTER_FORMAT                           * MASKS 0010 0000                                                     *change <SRC>*
000027C2  0C39 0020 000031D2      2485            CMPI.B  #$20,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0010 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
000027CA  6700 009A               2486            BEQ     GET_SRC_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
000027CE                          2487            
000027CE                          2488            *IT IS A WORD AT THIS POINT*
000027CE                          2489            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000027CE  163C 0020               2490            MOVE.B    #' ',D3
000027D2  6100 00D6               2491            BSR       PUSH_STACK
000027D6  163C 0024               2492            MOVE.B    #'$',D3
000027DA  6100 00CE               2493            BSR       PUSH_STACK
000027DE  321D                    2494            MOVE.W    (A5)+,D1
000027E0  7404                    2495            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
000027E2  6100 EA48               2496            BSR       HEX2ASCII2STACK
000027E6  6000 0082               2497            BRA     GET_SRC_SUCCESS
000027EA                          2498  
000027EA                          2499  CHECK_LONG
000027EA  41F9 000031D2           2500            LEA     TEMP_REGISTER_FORMAT,A0
000027F0  1439 000031D1           2501            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000027F6  1082                    2502            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000027F8  0239 0040 000031D2      2503            ANDI.B  #$40,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00002800  0C39 0040 000031D2      2504            CMPI.B  #$40,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002808  6700 005C               2505            BEQ     GET_SRC_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
0000280C                          2506            
0000280C                          2507            *IT IS A WORD AT THIS POINT*
0000280C                          2508            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
0000280C  163C 0020               2509            MOVE.B    #' ',D3
00002810  6100 0098               2510            BSR       PUSH_STACK
00002814  163C 0024               2511            MOVE.B    #'$',D3
00002818  6100 0090               2512            BSR       PUSH_STACK
0000281C  321D                    2513            MOVE.W    (A5)+,D1
0000281E  7404                    2514            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00002820  6100 EA0A               2515            BSR       HEX2ASCII2STACK
00002824  6000 0044               2516            BRA     GET_SRC_SUCCESS
00002828                          2517            
00002828                          2518  CHECK_IMMEDIATE
00002828  41F9 000031D2           2519            LEA     TEMP_REGISTER_FORMAT,A0
0000282E  1439 000031D1           2520            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002834  1082                    2521            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002836  0239 0080 000031D2      2522            ANDI.B  #$80,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
0000283E  0C39 0080 000031D2      2523            CMPI.B  #$80,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002846  6700 001E               2524            BEQ     GET_SRC_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
0000284A                          2525            
0000284A                          2526            *IT IS A WORD AT THIS POINT*
0000284A                          2527            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
0000284A  163C 0020               2528            MOVE.B    #' ',D3
0000284E  6100 005A               2529            BSR       PUSH_STACK
00002852  163C 0023               2530            MOVE.B    #'#',D3
00002856  6100 0052               2531            BSR       PUSH_STACK
0000285A  321D                    2532            MOVE.W    (A5)+,D1
0000285C  7404                    2533            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
0000285E  6100 E9CC               2534            BSR       HEX2ASCII2STACK
00002862  6000 0006               2535            BRA     GET_SRC_SUCCESS
00002866                          2536            
00002866                          2537  GET_SRC_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
00002866  7801                    2538            MOVE.L #1,D4
00002868  4E75                    2539            RTS
0000286A                          2540  GET_SRC_SUCCESS 
0000286A  4E75                    2541            RTS
0000286C                          2542                                 
0000286C                          2543      
0000286C                          2544  
0000286C                          2545  
0000286C                          2546  
0000286C                          2547  
0000286C                          2548  
0000286C                          2549  
0000286C                          2550  GET_EA_EA_DEST
0000286C                          2551  
0000286C                          2552  *---------------------------------------------------------------------------*
0000286C                          2553  * STACK/QUEUE INTERFACE
0000286C                          2554  *---------------------------------------------------------------------------*
0000286C                          2555  PRINT_STACK
0000286C  0C39 0000 000031CC      2556            CMP.B     #0,COUNTER
00002874  6700 000E               2557            BEQ       PRINT_STACK_RETURN             *CHECK IF LOOP IS FINISHED
00002878                          2558            
00002878                          2559  PRINT_STACK_HELPER
00002878  6100 0038               2560            BSR      POP_STACK          *PRINTS ADDRESS
0000287C  103C 0006               2561            MOVE.B   #6,D0              *Display single character in D1.B. 
00002880  4E4F                    2562            TRAP     #15             *ACTIVATES PRINT
00002882                          2563  
00002882  60E8                    2564            BRA       PRINT_STACK
00002884                          2565  PRINT_STACK_RETURN
00002884  4E75                    2566            RTS
00002886                          2567            
00002886                          2568            
00002886                          2569  PRINT_QUEUE
00002886  0C39 0000 000031CC      2570            CMP.B     #0,COUNTER
0000288E  6700 0018               2571            BEQ       PRINT_QUEUE_RETURN             *CHECK IF LOOP IS FINISHED
00002892                          2572            
00002892                          2573  PRINT_QUEUE_HELPER
00002892  33F9 000031CC 000031CE  2574            MOVE.W   COUNTER,QUEUE_COUNTER
0000289C  6100 0022               2575            BSR      POP_FRONT          *PRINTS ADDRESS
000028A0  103C 0006               2576            MOVE.B   #6,D0              *Display single character in D1.B. 
000028A4  4E4F                    2577            TRAP     #15             *ACTIVATES PRINT
000028A6                          2578  
000028A6  60DE                    2579            BRA       PRINT_QUEUE
000028A8                          2580  PRINT_QUEUE_RETURN
000028A8  4E75                    2581            RTS
000028AA                          2582            
000028AA                          2583  *PUSHES.W CONTENTS OF [D3] INTO STACK          
000028AA                          2584  PUSH_STACK
000028AA  1503                    2585              MOVE.B  D3,-(A2)
000028AC  6100 0058               2586              BSR     INCREMENT
000028B0  4E75                    2587              RTS
000028B2                          2588  *POPS.W TOP OF STACK INTO [D1], SO ITS READY TO PRINT WITH TRAP 15
000028B2                          2589  *         MOVE.W   (A2)+,D1           *PRINTS ADDRESS
000028B2                          2590  *         MOVE.B   #15,D0             *PRINTS ACCORDING TO D2 BASE VALUE
000028B2                          2591  *         MOVE.B   #16,D2             *PRINTS BASED 16 NUMBER
000028B2                          2592  *         TRAP        #15             *ACTIVATES PRINT
000028B2                          2593  POP_STACK
000028B2  BECA                    2594              CMPA.W   A2,SP            *CHECKS IF THERE IS ANYTHING TO PUSH
000028B4  6700 0008               2595              BEQ     POP_RETURN        *IF NOTHING TO PUSH THAN JUST RETURN
000028B8  121A                    2596              MOVE.B  (A2)+,D1 
000028BA  6100 0052               2597              BSR     DECREMENT
000028BE                          2598  POP_RETURN
000028BE  4E75                    2599              RTS 
000028C0                          2600        
000028C0                          2601  *USE [A4] AS SECOND POINTER IN SHIFTING      
000028C0  0C39 0000 000031CE      2602  POP_FRONT   CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
000028C8  6700 0030               2603              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
000028CC                          2604              
000028CC                          2605              
000028CC                          2606              *POSITION THE POINTERS A[4] RIGHT BEHIND A[2] WHICH IS RIGHT BEHIND STACK
000028CC  347C 7000               2607              MOVEA.W #STACK,A2   *START A2 AT STACK
000028D0  0622 0000               2608              ADD.B   #0,-(A2)    *SHIFT A2 TO THE BOTTOM OF THE STACK
000028D4  384A                    2609              MOVEA.W A2,A4     *START A4 RIGHT ABOVE A2
000028D6  0624 0000               2610              ADD.B   #0,-(A4)  *leash one more higher in stack (a4)
000028DA  1212                    2611              MOVE.B  (A2),D1     *POP CONTENTS INTO D1
000028DC                          2612  POP_SHIFT_LOOP
000028DC  0C39 0000 000031CE      2613              CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
000028E4  6700 0014               2614              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
000028E8  1494                    2615              MOVE.B  (A4),(A2)   *SHIFT CONTENT DOWN THE STACK
000028EA  0624 0000               2616              ADD.B   #0,-(A4)
000028EE  0622 0000               2617              ADD.B   #0,-(A2) *SHIFT POINTERS DOWN THE STACK
000028F2  5339 000031CE           2618              SUB.B   #1,QUEUE_COUNTER *DECREMENT INTERNAL QUEUE COUNTER
000028F8                          2619              
000028F8  60E2                    2620              BRA     POP_SHIFT_LOOP
000028FA                          2621                          
000028FA                          2622  POP_FRONT_RETURN 
000028FA                          2623              *RESET A2 BACK TO SP
000028FA  347C 7000               2624              MOVEA.W #STACK,A2    
000028FE  5339 000031CC           2625              SUB.B   #1,COUNTER *DECREMENT STACK COUNTER       
00002904  4E75                    2626              RTS   
00002906                          2627  
00002906                          2628  INCREMENT
00002906  5239 000031CC           2629              ADD.B   #1, COUNTER
0000290C  4E75                    2630              RTS           
0000290E                          2631  DECREMENT
0000290E  5339 000031CC           2632              SUB.B   #1, COUNTER
00002914  4E75                    2633              RTS           
00002916                          2634  CLEAR_STACK
00002916  0C39 0000 000031CC      2635              CMP.B     #0,COUNTER
0000291E  6700 0006               2636              BEQ       CLEAR_RETURN
00002922  618E                    2637              BSR       POP_STACK
00002924  60F0                    2638              BRA       CLEAR_STACK
00002926                          2639   
00002926                          2640  CLEAR_RETURN
00002926  4E75                    2641              RTS    
00002928                          2642  *---------------------------------------------------------------------------*
00002928                          2643  * TERMINATE
00002928                          2644  *---------------------------------------------------------------------------*
00002928                          2645  TERMINATE   
00002928  43F9 00002CD8           2646              LEA     FINMSG,A1
0000292E  103C 000E               2647              MOVE.B  #14,D0
00002932  4E4F                    2648              TRAP    #15
00002934                          2649  
00002934  103C 0009               2650              MOVE.B  #9,D0
00002938  4E4F                    2651              TRAP    #15
0000293A                          2652  
0000293A                          2653  *---------------------------------------------------------------------------*
0000293A                          2654  * Data storage                                                 
0000293A                          2655  *---------------------------------------------------------------------------*  
0000293A                          2656  WELCOME
0000293A= 20 20 20 20 20 20 ...   2657              DC.B '                         ___     ___ ___        ___   ___ ___                 ',CR,LF
0000298A= 3D 3D 3D 3D 3D 20 ...   2658              DC.B '=====           \  /\  /|___|   |   |   ||\  /||___    | |   |           =====',CR,LF
000029DA= 3D 3D 3D 3D 3D 20 ...   2659              DC.B '=====            \/  \/ |___|___|___|___|| \/ ||___    | |___|           =====',CR,LF
00002A2A                          2660      
00002A2A= 20 20 20 20 20 20 ...   2661              DC.B '                        ___ ___ ___  ___      ___                             ',CR,LF
00002A7A= 20 20 20 20 20 20 ...   2662              DC.B '                       |     | |___)|    |   |___                             ',CR,LF 
00002ACA= 20 20 20 20 20 20 ...   2663              DC.B '                       |___ _|_|\___|___ |___|___                             ',CR,LF
00002B1A                          2664      
00002B1A= 20 20 20 20 20 20 ...   2665              DC.B '           __  ___ ___   _   ___  ___  ___        ___      ___ ___            ',CR,LF
00002B6A= 3D 3D 3D 3D 3D 20 ...   2666              DC.B '=====     |  \  | |___  /_\ |___ |___ |___ |\  /||___||   |___|___)      =====',CR,LF 
00002BBA= 3D 3D 3D 3D 3D 20 ...   2667              DC.B '=====     |__/ _|_ ___|/   \ ___| ___||___ | \/ ||___||___|___|\___      =====',CR,LF,CR,LF,CR,LF,0
00002C0F                          2668  
00002C0F                          2669  PROMPT_START
00002C0F= 50 6C 65 61 73 65 ...   2670              DC.B    'Please enter a hexadecimal starting address.',CR,LF,0
00002C3E                          2671      
00002C3E                          2672  PROMPT_END
00002C3E= 50 6C 65 61 73 65 ...   2673              DC.B    'Please enter a hexadecimal ending address.',CR,LF,0
00002C6B= 0D 0A 48 69 74 20 ...   2674  DISP_NEXT   DC.B    CR,LF,'Hit Enter to print the next 30 lines.',CR,LF,0            
00002C95= 57 6F 75 6C 64 20 ...   2675  REPEATMSG   DC.B    'Would you like to run again? Press Y to continue or N to finish.',CR,LF,0
00002CD8= 54 68 61 6E 6B 20 ...   2676  FINMSG      DC.B    'Thank you for using Circle Disassembler.',CR,LF,0
00002D03= 45 72 72 6F 72 3A ...   2677  ERRMSG_1    DC.B    'Error: Invalid Input Address',CR,LF,0
00002D22= 45 72 72 6F 72 3A ...   2678  ERRMSG_3    DC.B    'Error: Invalid Input Address (Odd)',CR,LF,0
00002D47= 45 72 72 6F 72 3A ...   2679  ERRMSG_5    DC.B    'Error: Invalid Input Address (start > end)',CR,LF,0
00002D74                          2680  
00002D74                          2681  VR_S_ADDR   DS.B    80                      * allocate storage space for the starting address
00002DC4                          2682  VR_E_ADDR   DS.B    80                      * allocate storage space for the ending address
00002E14                          2683  S_ADDR_HX   DS.L    1                       * allocate storage space for the starting address in hex
00002E18                          2684  E_ADDR_HX   DS.L    1                       * allocate storage space for the ending address in hex
00002E1C= 0D 0A 00                2685  ENDLINE_M   DC.B    CR,LF,0
00002E1F                          2686  TMPINPUT    DS.B    80                      * temp store user input
00002E6F                          2687  TMPOUTPUT   DS.B    80                      * temp store prog output
00002EBF= 20 20 20 4F 52 49 ...   2688  DISP_ORI_B  DC.B    '   ORI.B',0
00002EC8= 20 20 20 4F 52 49 ...   2689  DISP_ORI_W  DC.B    '   ORI.W',0
00002ED1= 20 20 20 4F 52 49 ...   2690  DISP_ORI_L  DC.B    '   ORI.L',0
00002EDA= 20 20 20 45 4F 52 ...   2691  DISP_EORI_B  DC.B    '   EORI.B',0
00002EE4= 20 20 20 45 4F 52 ...   2692  DISP_EORI_W  DC.B    '   EORI.W',0
00002EEE= 20 20 20 45 4F 52 ...   2693  DISP_EORI_L  DC.B    '   EORI.L',0
00002EF8= 20 20 20 42 54 53 ...   2694  DISP_BTST   DC.B    '   BTST',0
00002F00= 20 20 20 43 4D 50 ...   2695  DISP_CMPI_B  DC.B    '   CMPI.B',0
00002F0A= 20 20 20 43 4D 50 ...   2696  DISP_CMPI_W  DC.B    '   CMPI.W',0
00002F14= 20 20 20 43 4D 50 ...   2697  DISP_CMPI_L  DC.B    '   CMPI.L',0
00002F1E= 20 20 20 44 41 54 ...   2698  DISP_DATA   DC.B    '   DATA',0
00002F26= 20 20 20 4D 4F 56 ...   2699  DISP_MOVE_B DC.B    '   MOVE.B',0
00002F30= 20 20 20 4D 4F 56 ...   2700  DISP_MOVE_W DC.B    '   MOVE.W',0
00002F3A= 20 20 20 4D 4F 56 ...   2701  DISP_MOVE_L DC.B    '   MOVE.L',0
00002F44= 20 20 20 52 54 53 00    2702  DISP_RTS    DC.B    '   RTS',0
00002F4B= 20 20 20 4A 53 52 00    2703  DISP_JSR    DC.B    '   JSR',0
00002F52= 20 20 20 4E 45 47 ...   2704  DISP_NEG_B    DC.B    '   NEG.B',0
00002F5B= 20 20 20 4E 45 47 ...   2705  DISP_NEG_W    DC.B    '   NEG.W',0
00002F64= 20 20 20 4E 45 47 ...   2706  DISP_NEG_L    DC.B    '   NEG.L',0
00002F6D= 20 20 20 4E 4F 54 ...   2707  DISP_NOT_B  DC.B    '   NOT.B',0
00002F76= 20 20 20 4E 4F 54 ...   2708  DISP_NOT_W  DC.B    '   NOT.W',0
00002F7F= 20 20 20 4E 4F 54 ...   2709  DISP_NOT_L  DC.B    '   NOT.L',0
00002F88= 20 20 20 4C 45 41 00    2710  DISP_LEA    DC.B    '   LEA',0
00002F8F= 20 20 20 4D 4F 56 ...   2711  DISP_MOVEM_W    DC.B    '   MOVEM.W',0
00002F9A= 20 20 20 4D 4F 56 ...   2712  DISP_MOVEM_L    DC.B    '   MOVEM.L',0
00002FA5= 20 20 20 41 44 44 ...   2713  DISP_ADDQ_B DC.B    '   ADDQ.B',0
00002FAF= 20 20 20 41 44 44 ...   2714  DISP_ADDQ_W DC.B    '   ADDQ.W',0
00002FB9= 20 20 20 41 44 44 ...   2715  DISP_ADDQ_L DC.B    '   ADDQ.L',0
00002FC3= 20 20 20 44 49 56 ...   2716  DISP_DIVS   DC.B    '   DIVS',0
00002FCB= 20 20 20 53 55 42 ...   2717  DISP_SUB_B  DC.B    '   SUB.B',0
00002FD4= 20 20 20 53 55 42 ...   2718  DISP_SUB_W  DC.B    '   SUB.W',0
00002FDD= 20 20 20 53 55 42 ...   2719  DISP_SUB_L  DC.B    '   SUB.L',0
00002FE6= 20 20 20 53 55 42 ...   2720  DISP_SUBI_B  DC.B    '   SUBI.B',0
00002FF0= 20 20 20 53 55 42 ...   2721  DISP_SUBI_W  DC.B    '   SUBI.W',0
00002FFA= 20 20 20 53 55 42 ...   2722  DISP_SUBI_L  DC.B    '   SUBI.L',0
00003004= 20 20 20 53 55 42 ...   2723  DISP_SUBA_W  DC.B    '   SUBA.W',0
0000300E= 20 20 20 53 55 42 ...   2724  DISP_SUBA_L  DC.B    '   SUBA.L',0
00003018= 20 20 20 45 4F 52 ...   2725  DISP_EOR_B  DC.B    '   EOR.B',0
00003021= 20 20 20 45 4F 52 ...   2726  DISP_EOR_W  DC.B    '   EOR.W',0
0000302A= 20 20 20 45 4F 52 ...   2727  DISP_EOR_L  DC.B    '   EOR.L',0
00003033= 20 20 20 43 4D 50 ...   2728  DISP_CMP_B  DC.B    '   CMP.B',0
0000303C= 20 20 20 43 4D 50 ...   2729  DISP_CMP_W  DC.B    '   CMP.W',0
00003045= 20 20 20 43 4D 50 ...   2730  DISP_CMP_L  DC.B    '   CMP.L',0
0000304E= 20 20 20 43 4D 50 ...   2731  DISP_CMPA_W  DC.B    '   CMPA.W',0
00003058= 20 20 20 43 4D 50 ...   2732  DISP_CMPA_L  DC.B    '   CMPA.L',0
00003062= 20 20 20 4D 55 4C ...   2733  DISP_MULS_W DC.B    '   MULS.W',0
0000306C= 20 20 20 41 4E 44 ...   2734  DISP_AND_B  DC.B    '   AND.B',0
00003075= 20 20 20 41 4E 44 ...   2735  DISP_AND_W  DC.B    '   AND.W',0
0000307E= 20 20 20 41 4E 44 ...   2736  DISP_AND_L  DC.B    '   AND.L',0
00003087= 20 20 20 41 44 44 ...   2737  DISP_ADD_B  DC.B    '   ADD.B',0
00003090= 20 20 20 41 44 44 ...   2738  DISP_ADD_W  DC.B    '   ADD.W',0
00003099= 20 20 20 41 44 44 ...   2739  DISP_ADD_L  DC.B    '   ADD.L',0
000030A2= 20 20 20 41 44 44 ...   2740  DISP_ADDA_W DC.B    '   ADDA.W',0
000030AC= 20 20 20 41 44 44 ...   2741  DISP_ADDA_L DC.B    '   ADDA.L',0
000030B6= 20 20 20 4C 53 52 ...   2742  DISP_LSR_B  DC.B    '   LSR.B',0
000030BF= 20 20 20 4C 53 4C ...   2743  DISP_LSL_B  DC.B    '   LSL.B',0
000030C8= 20 20 20 4C 53 52 ...   2744  DISP_LSR_W  DC.B    '   LSR.W',0
000030D1= 20 20 20 4C 53 4C ...   2745  DISP_LSL_W  DC.B    '   LSL.W',0
000030DA= 20 20 20 4C 53 52 ...   2746  DISP_LSR_L  DC.B    '   LSR.L',0
000030E3= 20 20 20 4C 53 4C ...   2747  DISP_LSL_L  DC.B    '   LSL.L',0
000030EC= 20 20 20 41 53 52 ...   2748  DISP_ASR_B  DC.B    '   ASR.B',0
000030F5= 20 20 20 41 53 4C ...   2749  DISP_ASL_B  DC.B    '   ASL.B',0
000030FE= 20 20 20 41 53 52 ...   2750  DISP_ASR_W  DC.B    '   ASR.W',0
00003107= 20 20 20 41 53 4C ...   2751  DISP_ASL_W  DC.B    '   ASL.W',0
00003110= 20 20 20 41 53 52 ...   2752  DISP_ASR_L  DC.B    '   ASR.L',0
00003119= 20 20 20 41 53 4C ...   2753  DISP_ASL_L  DC.B    '   ASL.L',0
00003122= 20 20 20 52 4F 52 ...   2754  DISP_ROR_B  DC.B    '   ROR.B',0
0000312B= 20 20 20 52 4F 4C ...   2755  DISP_ROL_B  DC.B    '   ROL.B',0
00003134= 20 20 20 52 4F 52 ...   2756  DISP_ROR_W  DC.B    '   ROR.W',0
0000313D= 20 20 20 52 4F 4C ...   2757  DISP_ROL_W  DC.B    '   ROL.W',0
00003146= 20 20 20 52 4F 52 ...   2758  DISP_ROR_L  DC.B    '   ROR.L',0
0000314F= 20 20 20 52 4F 4C ...   2759  DISP_ROL_L  DC.B    '   ROL.L',0
00003158= 20 20 20 42 52 41 00    2760  DISP_BRA    DC.B    '   BRA',0
0000315F= 20 20 20 42 4C 54 00    2761  DISP_BLT    DC.B    '   BLT',0
00003166= 20 20 20 42 45 51 00    2762  DISP_BEQ    DC.B    '   BEQ',0
0000316D= 20 20 20 42 4E 45 00    2763  DISP_BNE    DC.B    '   BNE',0
00003174= 20 20 20 42 48 49 00    2764  DISP_BHI    DC.B    '   BHI',0
0000317B= 20 20 20 4D 4F 56 ...   2765  DISP_MOVEA_W    DC.B    '   MOVEA.W',0
00003186= 20 20 20 4D 4F 56 ...   2766  DISP_MOVEA_L    DC.B    '   MOVEA.L',0
00003191                          2767  
00003191= 20 20 20 24 00          2768  DISP_HEX     DC.B    '   $',0
00003196= 20 20 20 44 00          2769  DISP_D  DC.B    '   D',0
0000319B= 20 20 20 41 00          2770  DISP_A  DC.B    '   A',0
000031A0= 20 20 20 28 00          2771  DISP_OP  DC.B    '   (',0
000031A5= 29 00                   2772  DISP_CP  DC.B   ')',0
000031A7= 20 20 20 28 41 00       2773  DISP_AOP  DC.B    '   (A',0
000031AD                          2774  
000031AD= 20 20 20 2D 28 41 00    2775  DISP_PRE    DC.B    '   -(A',0
000031B4= 29 2B 00                2776  DISP_POST   DC.B    ')+',0
000031B7= 20 20 20 23 00          2777  DISP_LB DC.B    '   #',0
000031BC= 30 00                   2778  DISP_0  DC.B    '0',0
000031BE= 31 00                   2779  DISP_1  DC.B    '1',0
000031C0= 32 00                   2780  DISP_2  DC.B    '2',0
000031C2= 33 00                   2781  DISP_3  DC.B    '3',0
000031C4= 34 00                   2782  DISP_4  DC.B    '4',0
000031C6= 35 00                   2783  DISP_5  DC.B    '5',0
000031C8= 36 00                   2784  DISP_6  DC.B    '6',0
000031CA= 37 00                   2785  DISP_7  DC.B    '7',0
000031CC                          2786  
000031CC                          2787  *STACK INTERFACE VARIABLES*
000031CC                          2788  COUNTER         DS.W    1
000031CE                          2789  QUEUE_COUNTER   DS.W    1
000031D0                          2790  
000031D0                          2791  *EA DECODING INTERFACE VARIABLES* 
000031D0                          2792  DEST_REGISTER_FORMAT    DS.B    1           *all address modes acceptable standard
000031D1                          2793  SRC_REGISTER_FORMAT  DS.B    1           *all address modes acceptable standard
000031D2                          2794  TEMP_REGISTER_FORMAT    DS.B    1           *place holder for masking other register formats
000031D3                          2795  
000031D3                          2796  *FORMAT OF WHERE TO GET THE EA BY THE ENDING BIT AND STARTING BIT
000031D3                          2797  * WORD + WORD = LONG
000031D3                          2798  * (STARTING BIT) + (ENDING BIT) = 2 HEX CHAR
000031D3                          2799  * A              + F            = AF         <= EXAMPLE
000031D3                          2800  *(10TH BIT)      + (15TH BIT)   = CHECK BITS 15 THROUGH 10
000031D3                          2801  GET_DST_START_END    DS.B    1
000031D4                          2802  GET_SRC_START_END    DS.B    1
000031D5                          2803  
000031D5                          2804  *STORES THE START + END BITS HERE (FROM ABOVE)
000031D6                          2805  VAR_BYTE_START      DS.L    1
000031DA                          2806  VAR_BYTE_END        DS.L    1
000031DE                          2807  VAR_TEMP_CLEANCOPY  DS.L    1
000031E2                          2808  
000031E2                          2809  VAR_LONG_ADDRESS_MODE_CHECK        DS.L    1       *holds the bits 0-2 in long form
000031E6                          2810  
000031E6                          2811  *MORE FOR STACK USAGE*
000031E6= 2C 00                   2812  DISP_COMMA  DC.B    ',',0
000031E8= 20 20 20 00             2813  DISP_INDENT  DC.B    '   ',0
000031EC                          2814  
000031EC                          2815  *NEXT WORD POINTER: FOR IDENTIFING (xxx).W or (xxx).L*
000031EC                          2816  POINTER_WORD    DS.W       1
000031EE                          2817  
000031EE                          2818  
000031EE                          2819  
000031EE                          2820  *---------------------------------------------------------------------------*
000031EE                          2821  * Ends program
000031EE                          2822  *---------------------------------------------------------------------------*
000031EE                          2823              END    START                    * last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASC2HXLP            1188
ASCII2HEX           1182
ASC_ERR             11E4
ASC_LOW             11C6
ASC_NUM             11D6
ASC_SFT             11DE
ASC_UPP             11CE
CHECK0              24AC
CHECK1              2536
CHECK2              25C0
CHECK3              265A
CHECK4              26FC
CHECK7              279E
CHECK_IMMEDIATE     2828
CHECK_LONG          27EA
CHECK_WORD          27AC
CLEAR_RETURN        2926
CLEAR_STACK         2916
COUNTER             31CC
CR                  D
DECREMENT           290E
DEST_MODE           2064
DEST_REGISTER       2334
DEST_REGISTER_FORMAT  31D0
DISPLAY_30_LINES    1330
DISP_0              31BC
DISP_1              31BE
DISP_2              31C0
DISP_3              31C2
DISP_4              31C4
DISP_5              31C6
DISP_6              31C8
DISP_7              31CA
DISP_A              319B
DISP_ADDA_L         30AC
DISP_ADDA_W         30A2
DISP_ADDQ_B         2FA5
DISP_ADDQ_L         2FB9
DISP_ADDQ_W         2FAF
DISP_ADD_B          3087
DISP_ADD_L          3099
DISP_ADD_W          3090
DISP_AND_B          306C
DISP_AND_L          307E
DISP_AND_W          3075
DISP_AOP            31A7
DISP_ASL_B          30F5
DISP_ASL_L          3119
DISP_ASL_W          3107
DISP_ASR_B          30EC
DISP_ASR_L          3110
DISP_ASR_W          30FE
DISP_BEQ            3166
DISP_BHI            3174
DISP_BLT            315F
DISP_BNE            316D
DISP_BRA            3158
DISP_BTST           2EF8
DISP_CMPA_L         3058
DISP_CMPA_W         304E
DISP_CMPI_B         2F00
DISP_CMPI_L         2F14
DISP_CMPI_W         2F0A
DISP_CMP_B          3033
DISP_CMP_L          3045
DISP_CMP_W          303C
DISP_COMMA          31E6
DISP_CP             31A5
DISP_D              3196
DISP_DATA           2F1E
DISP_DIVS           2FC3
DISP_EORI_B         2EDA
DISP_EORI_L         2EEE
DISP_EORI_W         2EE4
DISP_EOR_B          3018
DISP_EOR_L          302A
DISP_EOR_W          3021
DISP_HEX            3191
DISP_INDENT         31E8
DISP_JSR            2F4B
DISP_LB             31B7
DISP_LEA            2F88
DISP_LSL_B          30BF
DISP_LSL_L          30E3
DISP_LSL_W          30D1
DISP_LSR_B          30B6
DISP_LSR_L          30DA
DISP_LSR_W          30C8
DISP_MOVEA_L        3186
DISP_MOVEA_W        317B
DISP_MOVEM_L        2F9A
DISP_MOVEM_W        2F8F
DISP_MOVE_B         2F26
DISP_MOVE_L         2F3A
DISP_MOVE_W         2F30
DISP_MULS_W         3062
DISP_NEG_B          2F52
DISP_NEG_L          2F64
DISP_NEG_W          2F5B
DISP_NEXT           2C6B
DISP_NOT_B          2F6D
DISP_NOT_L          2F7F
DISP_NOT_W          2F76
DISP_OP             31A0
DISP_ORI_B          2EBF
DISP_ORI_L          2ED1
DISP_ORI_W          2EC8
DISP_POST           31B4
DISP_PRE            31AD
DISP_ROL_B          312B
DISP_ROL_L          314F
DISP_ROL_W          313D
DISP_ROR_B          3122
DISP_ROR_L          3146
DISP_ROR_W          3134
DISP_RTS            2F44
DISP_SUBA_L         300E
DISP_SUBA_W         3004
DISP_SUBI_B         2FE6
DISP_SUBI_L         2FFA
DISP_SUBI_W         2FF0
DISP_SUB_B          2FCB
DISP_SUB_L          2FDD
DISP_SUB_W          2FD4
D_MODE000           2106
D_MODE010           214E
D_MODE011           21AE
D_MODE100           21CE
D_MODE111           2220
EA_ARITH            1FFE
EA_DATA             150E
EA_GEN              204A
EA_MOVEA            2024
EA_NOSRC            1FEA
ENDLINE_M           2E1C
END_ADDR            10CE
ERRMSG_1            2D03
ERRMSG_3            2D22
ERRMSG_5            2D47
ERROR_1             1132
ERROR_2             1142
ERROR_3             1152
ERROR_4             1162
ERROR_5             1172
E_ADDR_HX           2E18
FINMSG              2CD8
GET_DST_START_END   31D3
GET_EA_EA_DEST      286C
GET_EA_EA_SRC       249A
GET_SRC_FAILED      2866
GET_SRC_START_END   31D4
GET_SRC_SUCCESS     286A
HEX2ASCII           11EA
HEX2ASCII2STACK     122C
HEX_CHAR            1218
HEX_CONT            121C
HEX_LOOP            11FE
IMMD_B              22D4
IMMD_L              2314
IMMD_W              22F4
IMMEDIATE           22A4
INCREMENT           2906
INTRO               1028
IS_ODD              1270
IS_ODD_ERR          1286
JMPTABLE            135C
LF                  A
LONGMODE            2278
LOOP_SHIFTING       2516
LOOP_SHIFTING1      25A0
LOOP_SHIFTING2      2632
LOOP_SHIFTING3      26CC
LOOP_SHIFTING4      2776
MAIN                128C
MASKING_NEXT        2524
MASKING_NEXT1       25AE
MASKING_NEXT2       2640
MASKING_NEXT3       26DA
MASKING_NEXT4       2784
MODE000             20F2
MODE001             211A
MODE010             212E
MODE011             216E
MODE100             218E
MODE111             21EE
NEXTLINES           133E
OP0000              13BC
OP0001              15E2
OP0010              164C
OP0011              16AE
OP0100              170E
OP0101              18A8
OP0110              1924
OP0111              19B2
OP1000              19B6
OP1001              19F2
OP1010              1ACA
OP1011              1ACE
OP1100              1BCA
OP1101              1C66
OP1110              1D38
OP1111              1FE6
OP_ADDA_L           1D20
OP_ADDA_W           1D08
OP_ADDQ             18C8
OP_ADDQ_B           18EE
OP_ADDQ_L           1912
OP_ADDQ_W           1900
OP_ADD_B            1CC0
OP_ADD_L            1CF0
OP_ADD_W            1CD8
OP_AND_B            1C30
OP_AND_L            1C54
OP_AND_W            1C42
OP_ASL              1ED8
OP_ASL_B            1EFC
OP_ASL_L            1F0E
OP_ASL_W            1F20
OP_ASR              1E7E
OP_ASR_B            1EA2
OP_ASR_L            1EB4
OP_ASR_W            1EC6
OP_ASX              1D9A
OP_BEQ              1988
OP_BHI              196C
OP_BLT              19A4
OP_BNE              197A
OP_BRA              1996
OP_BTST             1430
OP_CMPA_L           1B3A
OP_CMPA_W           1B28
OP_CMPI             1536
OP_CMPI_B           1556
OP_CMPI_L           157A
OP_CMPI_W           1568
OP_CMP_B            1B4C
OP_CMP_L            1B7C
OP_CMP_W            1B64
OP_DATA             14EA
OP_DIVS             19DE
OP_EORI             143E
OP_EORI_B           145E
OP_EORI_L           1482
OP_EORI_W           1470
OP_EOR_B            1B94
OP_EOR_L            1BB8
OP_EOR_W            1BA6
OP_JSR              1886
OP_LEA              17B4
OP_LSL              1E24
OP_LSL_B            1E48
OP_LSL_L            1E5A
OP_LSL_W            1E6C
OP_LSR              1DCA
OP_LSR_B            1DEE
OP_LSR_L            1E00
OP_LSR_W            1E12
OP_LSX              1D82
OP_MOVEA_L          1690
OP_MOVEA_W          16F0
OP_MOVEM_L          17A2
OP_MOVEM_W          1790
OP_MOVE_B           15E8
OP_MOVE_L           1672
OP_MOVE_W           16D2
OP_MULS             1C1C
OP_NEG              17C8
OP_NEG_B            17E8
OP_NEG_L            1818
OP_NEG_W            1800
OP_NOT              1830
OP_NOT_B            1850
OP_NOT_L            1874
OP_NOT_W            1862
OP_ORI              158C
OP_ORI_B            15AC
OP_ORI_L            15D0
OP_ORI_W            15BE
OP_ROL              1F8C
OP_ROL_B            1FB0
OP_ROL_L            1FC2
OP_ROL_W            1FD4
OP_ROR              1F32
OP_ROR_B            1F56
OP_ROR_L            1F68
OP_ROR_W            1F7A
OP_ROX              1DB2
OP_RTS              189A
OP_SUBA_L           1AB8
OP_SUBA_W           1AA6
OP_SUBI             1494
OP_SUBI_B           14B4
OP_SUBI_L           14D8
OP_SUBI_W           14C6
OP_SUB_B            1A5E
OP_SUB_L            1A8E
OP_SUB_W            1A76
OUTPUT_PROCESSED_DATA  1310
POINTER_WORD        31EC
POP_FRONT           28C0
POP_FRONT_RETURN    28FA
POP_RETURN          28BE
POP_SHIFT_LOOP      28DC
POP_STACK           28B2
PRINT_QUEUE         2886
PRINT_QUEUE_HELPER  2892
PRINT_QUEUE_RETURN  28A8
PRINT_STACK         286C
PRINT_STACK_HELPER  2878
PRINT_STACK_RETURN  2884
PROGLP              100A
PROMPT_END          2C3E
PROMPT_START        2C0F
PUSH_STACK          28AA
QUEUE_COUNTER       31CE
REG_0               23E8
REG_1               23F6
REG_2               2404
REG_3               2412
REG_4               2420
REG_5               242E
REG_6               243C
REG_7               244A
REPEAT              2458
REPEATMSG           2C95
RETURN              11E8
SRC_MODE            20A8
SRC_REGISTER        2390
SRC_REGISTER_FORMAT  31D1
STACK               7000
STACK_HEX_CHAR      125A
STACK_HEX_CONT      125E
STACK_HEX_LOOP      1240
START               1004
START_ADDR          107C
S_ADDR_HX           2E14
TEMP_REGISTER_FORMAT  31D2
TERMINATE           2928
TESTING             1036
TMPINPUT            2E1F
TMPOUTPUT           2E6F
VAR_BYTE_END        31DA
VAR_BYTE_START      31D6
VAR_LONG_ADDRESS_MODE_CHECK  31E2
VAR_TEMP_CLEANCOPY  31DE
VR_E_ADDR           2DC4
VR_S_ADDR           2D74
WELCOME             293A
WORDMODE            224C

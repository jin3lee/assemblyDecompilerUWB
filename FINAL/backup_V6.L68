00001004 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/7/2014 11:58:15 PM

00000000                             1  *---------------------------------------------------------------------------*
00000000                             2  * Title      : 68K Disassembler
00000000                             3  * Written by : Team Circle
00000000                             4  * Date       : 12/05/14
00000000                             5  * Description: Scans a section of memory and converts its
00000000                             6  *              contents to a listing of valid assembly 
00000000                             7  *              language instructions
00000000                             8  *---------------------------------------------------------------------------*
00000000                             9  
00000000                            10  *---------------------------------------------------------------------------*
00000000                            11  * System Equates                                                 
00000000                            12  *---------------------------------------------------------------------------*
00000000  =0000000D                 13  CR          EQU     $0D                     * ASCII for Carriage Return
00000000  =0000000A                 14  LF          EQU     $0A                     * ASCII for Line Feed 
00000000  =00007000                 15  STACK       EQU     $7000                   * Initial Stack Pointer                         
00000000                            16              
00000000                            17  *---------------------------------------------------------------------------*
00000000                            18  * Reserved Registers
00000000                            19  *---------------------------------------------------------------------------*  
00000000                            20  * D0 - I/O
00000000                            21  * D1 - Temporary storage of processing data
00000000                            22  * D3 - [PUSH_STACK]
00000000                            23  * D4 - Opcode size (0 - byte; 1- word; 2-long)
00000000                            24  * D5 - Processing data
00000000                            25  * D6 - Loop counter to print 30 lines
00000000                            26  * D7 - Error flag
00000000                            27  * A2 - [STACK POINTER]
00000000                            28  * A5 - Processing address in hex
00000000                            29  
00000000                            30  *---------------------------------------------------------------------------*
00000000                            31  * Start and loop program
00000000                            32  *---------------------------------------------------------------------------*  
00001000                            33              ORG     $1000
00001000  4FF8 7000                 34              LEA     STACK,SP
00001004                            35  START:            
00001004  4EB9 00001028             36              JSR     INTRO                 
0000100A  4EB9 0000107C             37  PROGLP      JSR     START_ADDR
00001010  4EB9 000010CE             38              JSR     END_ADDR
00001016  43F9 0000329E             39              LEA     ENDLINE_M,A1           * Add a new line
0000101C  103C 000E                 40              MOVE.B  #14, D0                  * Display A1
00001020  4E4F                      41              TRAP    #15
00001022                            42              
00001022  4EF9 0000128C             43              JMP     MAIN
00001028                            44              
00001028                            45  *---------------------------------------------------------------------------*
00001028                            46  * INTRO: Display the introduction of the program
00001028                            47  *---------------------------------------------------------------------------*
00001028  43F9 00002DBC             48  INTRO       LEA     WELCOME,A1              * Load PROMPT_START
0000102E  103C 000E                 49              MOVE.B  #14,D0                  * Display A1
00001032  4E4F                      50              TRAP    #15
00001034  4E75                      51              RTS
00001036                            52  TESTING
00001036  11FC 0070 3333            53              MOVE.B  #$70,$3333
0000103C  11FC 0096 3333            54              MOVE.B  #150,$3333
00001042  11FC 00FF 3333            55              MOVE.B  #255,$3333
00001048                            56              
00001048  11F8 7000 3333            57              MOVE.B  $7000,$3333
0000104E  31F8 7000 3333            58              MOVE.W  $7000,$3333
00001054  21F8 7000 3333            59              MOVE.L  $7000,$3333
0000105A                            60              
0000105A  1238 7000                 61              MOVE.B  $00007000,D1   
0000105E  3238 7000                 62              MOVE.W  $00007000,D1   
00001062  2238 7000                 63              MOVE.L  $00007000,D1  
00001066                            64            
00001066  11C1 3030                 65              MOVE.B  D1,$3030         
0000106A  31C1 3030                 66              MOVE.W  D1,$3030         
0000106E  21C1 3030                 67              MOVE.L  D1,$3030
00001072                            68              
00001072  1001                      69              MOVE.B  D1,D0           * PASSED JUST SRC, NOT DEST
00001074  1210                      70              MOVE.B  (A0),D1         * PASSED JUST SRC, NOT DEST
00001076  1218                      71              MOVE.B  (A0)+,D1        * PASSED JUST SRC, NOT DEST
00001078  1220                      72              MOVE.B  -(A0),D1        * PASSED JUST SRC, NOT DEST
0000107A                            73              
0000107A  4E75                      74              RTS
0000107C                            75  *---------------------------------------------------------------------------*
0000107C                            76  * START_ADDR: Compute the starting address
0000107C                            77  *---------------------------------------------------------------------------*
0000107C                            78  START_ADDR
0000107C                            79              * Output
0000107C  43F9 00003091             80              LEA     PROMPT_START,A1         * Load PROMPT_START 
00001082  103C 000E                 81              MOVE.B  #14,D0                  * Display PROMPT_START
00001086  4E4F                      82              TRAP    #15
00001088                            83      
00001088                            84              * Input
00001088  43F9 000031F6             85              LEA     VR_S_ADDR,A1            * Load VR_S_ADDR
0000108E  103C 0002                 86              MOVE.B  #2,D0                   * Ask user for input
00001092  4E4F                      87              TRAP    #15
00001094                            88              
00001094                            89              * Error Checking (length)
00001094  0C01 0000                 90              CMPI.B  #0, D1                  * Check if input length <= 0
00001098  6F00 0098                 91              BLE     ERROR_1
0000109C  0C01 0008                 92              CMPI.B  #8, D1                  * Check if input length > 8
000010A0  6E00 0090                 93              BGT     ERROR_1
000010A4                            94              
000010A4                            95              * Conversion & Storage
000010A4  4EB9 00001182             96              JSR     ASCII2HEX               * Jump to ASCII2HEX
000010AA  0C07 0001                 97              CMPI.B  #1, D7                  * Check for error
000010AE  6700 0082                 98              BEQ     ERROR_1                 
000010B2  23C1 00003296             99              MOVE.L  D1, S_ADDR_HX           * Move the result to S_ADDR_HX 
000010B8                           100              
000010B8                           101              * Error Checking (Odd)
000010B8  43F9 00003296            102              LEA     S_ADDR_HX, A1           * Load 'S_ADDR_HX' for odd error
000010BE  4EB9 00001270            103              JSR     IS_ODD                  * Check if the input address is odd
000010C4  0C07 0001                104              CMPI.B  #1, D7                  * Check for error
000010C8  6700 0088                105              BEQ     ERROR_3
000010CC                           106              
000010CC                           107              * Return
000010CC  4E75                     108              RTS     
000010CE                           109  *---------------------------------------------------------------------------*
000010CE                           110  * END_ADDR: Compute the ending address
000010CE                           111  *---------------------------------------------------------------------------*
000010CE                           112  END_ADDR
000010CE                           113              * Output
000010CE  43F9 000030C0            114              LEA     PROMPT_END,A1           * Load PROMPT_END
000010D4  103C 000E                115              MOVE.B  #14,D0                  * Display PROMPT_END
000010D8  4E4F                     116              TRAP    #15
000010DA                           117  
000010DA                           118              * Input
000010DA  43F9 00003246            119              LEA     VR_E_ADDR,A1            * Load VR_E_ADDR
000010E0  103C 0002                120              MOVE.B  #2,D0                   * Ask user for input
000010E4  4E4F                     121              TRAP    #15
000010E6                           122              
000010E6                           123              * Error Checking (length)
000010E6  0C01 0000                124              CMPI.B  #0, D1                  * Check if input length <= 0
000010EA  6F00 0056                125              BLE     ERROR_2
000010EE  0C01 0008                126              CMPI.B  #8, D1                  * Check if input length > 8
000010F2  6E00 004E                127              BGT     ERROR_2
000010F6                           128              
000010F6                           129              * Conversion & Storage
000010F6  4EB9 00001182            130              JSR     ASCII2HEX               * Jump to ASCII2HEX
000010FC  0C07 0001                131              CMPI.B  #1, D7                  * Check for error
00001100  6700 0040                132              BEQ     ERROR_2
00001104  23C1 0000329A            133              MOVE.L  D1, E_ADDR_HX           * Move the result to E_ADDR_HX
0000110A                           134              
0000110A                           135              * Error Checking (start > end case)
0000110A  2439 00003296            136              MOVE.L  S_ADDR_HX, D2           * Move the starting address to D2
00001110  B282                     137              CMP.L   D2, D1                  * Compare starting and ending address
00001112  6300 005E                138              BLS     ERROR_5                 * Go to ERROR_5 if ending < starting
00001116                           139              
00001116                           140              * Error Checking (Odd case)
00001116  43F9 0000329A            141              LEA     E_ADDR_HX, A1           * Move the ending address
0000111C  4EB9 00001270            142              JSR     IS_ODD                  * Go to IS_ODD for odd address checking
00001122  0C07 0001                143              CMPI.B  #1, D7                  * Check for an error flag
00001126  6700 003A                144              BEQ     ERROR_4
0000112A                           145              
0000112A                           146              * Inputs are valid
0000112A  2A79 00003296            147              MOVE.L  S_ADDR_HX, A5           * Store the valid input in A5
00001130                           148              
00001130  4E75                     149              RTS
00001132                           150              
00001132                           151  *---------------------------------------------------------------------------*
00001132                           152  * ERROR_1: Address error (Invalid starting address)
00001132                           153  *---------------------------------------------------------------------------*
00001132                           154  ERROR_1
00001132  43F9 00003185            155              LEA     ERRMSG_1, A1            * Load ERRMSG_1
00001138  103C 000E                156              MOVE.B  #14, D0                 * Display ERRMSG_1
0000113C  4E4F                     157              TRAP    #15
0000113E  4EF8 107C                158              JMP     START_ADDR              * Jump to START_ADDR
00001142                           159      
00001142                           160  *---------------------------------------------------------------------------*
00001142                           161  * ERROR_2: Address error (Invalid ending address)
00001142                           162  *---------------------------------------------------------------------------*
00001142                           163  ERROR_2
00001142  43F9 00003185            164              LEA     ERRMSG_1, A1            * Load ERRMSG_1
00001148  103C 000E                165              MOVE.B  #14, D0                 * Display ERRMSG_1
0000114C  4E4F                     166              TRAP    #15
0000114E  4EF8 10CE                167              JMP     END_ADDR                * Jump to END_ADDR
00001152                           168  
00001152                           169  *---------------------------------------------------------------------------*
00001152                           170  * ERROR_3: Address error (Odd starting address)
00001152                           171  *---------------------------------------------------------------------------*
00001152                           172  ERROR_3
00001152  43F9 000031A4            173              LEA     ERRMSG_3, A1
00001158  103C 000E                174              MOVE.B  #14, D0
0000115C  4E4F                     175              TRAP    #15
0000115E  4EF8 107C                176              JMP     START_ADDR
00001162                           177     
00001162                           178  *---------------------------------------------------------------------------*
00001162                           179  * ERROR_4: Address error (Odd ending address)
00001162                           180  *---------------------------------------------------------------------------*         
00001162                           181  ERROR_4
00001162  43F9 000031A4            182              LEA     ERRMSG_3, A1
00001168  103C 000E                183              MOVE.B  #14, D0
0000116C  4E4F                     184              TRAP    #15
0000116E  4EF8 10CE                185              JMP     END_ADDR
00001172                           186            
00001172                           187  *---------------------------------------------------------------------------*
00001172                           188  * ERROR_3: Address error (Ending address is less than starting address)
00001172                           189  *---------------------------------------------------------------------------*
00001172                           190  ERROR_5
00001172  43F9 000031C9            191              LEA     ERRMSG_5, A1
00001178  103C 000E                192              MOVE.B  #14, D0
0000117C  4E4F                     193              TRAP    #15
0000117E  4EF8 10CE                194              JMP     END_ADDR
00001182                           195    
00001182                           196  *---------------------------------------------------------------------------*
00001182                           197  * ASCII2HEX: Convert ASCii to Hexadecimal
00001182                           198  * Reserved registers: A1 = Source, D1 = Destination, D2 = Byte, D7 = Error
00001182                           199  *---------------------------------------------------------------------------*
00001182  4281                     200  ASCII2HEX   CLR.L   D1                      * Clear the destination 
00001184  4287                     201              CLR.L   D7                      * Set the error flag to 0
00001186  4282                     202              CLR.L   D2                      * Clear D2 for temp storage
00001188                           203              
00001188  1419                     204  ASC2HXLP    MOVE.B  (A1)+, D2               * Read a byte to D2
0000118A  0C02 0000                205              CMPI.B  #0, D2                  * Check for NULL (indicates the end of source)
0000118E  6700 0058                206              BEQ     RETURN                  * If it's NULL, go to return
00001192  0C02 0066                207              CMPI.B  #102, D2                * Decimal ASCII value of f is 102
00001196  6E00 004C                208              BGT     ASC_ERR                 * ASCII > f (invalid input) 
0000119A  0C02 0061                209              CMPI.B  #97, D2                 * Decimal ASCII value of a is 97
0000119E  6C00 0026                210              BGE     ASC_LOW                 * ASCII >= a (valid input)
000011A2  0C02 0046                211              CMPI.B  #70, D2                 * Decimal ASCII value of F is 70
000011A6  6E00 003C                212              BGT     ASC_ERR                 * ASCII > F (invalid input)
000011AA  0C02 0041                213              CMPI.B  #65, D2                 * Decimal ASCII value of A is 65
000011AE  6C00 001E                214              BGE     ASC_UPP                 * ASCII >= A (valid input)
000011B2  0C02 0039                215              CMPI.B  #57, D2                 * Decimal value of 9 is 57
000011B6  6E00 002C                216              BGT     ASC_ERR                 * ASCII > 9 (invalid input)
000011BA  0C02 0030                217              CMPI.B  #48, D2                 * Decimal ASCII value of 0 is 48
000011BE  6C00 0016                218              BGE     ASC_NUM                 * ASCII >= 0 (valid input)
000011C2  6000 0020                219              BRA     ASC_ERR                 * Invalid input
000011C6                           220  
000011C6  0442 0057                221  ASC_LOW     SUBI    #87, D2                 * Convert the ASCII input to Hex
000011CA  6000 0012                222              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011CE                           223              
000011CE  0442 0037                224  ASC_UPP     SUBI    #55, D2                 * Convert the ASCII input to Hex
000011D2  6000 000A                225              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011D6                           226              
000011D6  0442 0030                227  ASC_NUM     SUBI    #48, D2                 * Convert the ASCII input to Hex
000011DA  6000 0002                228              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011DE                           229              
000011DE  E981                     230  ASC_SFT     ASL.L   #4, D1                  * Shift the dest to left by 4 bits
000011E0  D202                     231              ADD.B   D2, D1                  * Add the converted input to D1
000011E2  60A4                     232              BRA     ASC2HXLP                * Loop
000011E4                           233  
000011E4  1E3C 0001                234  ASC_ERR     MOVE.B  #1, D7                  * Set the error flag to 1            
000011E8  4E75                     235  RETURN      RTS     
000011EA                           236  
000011EA                           237  *---------------------------------------------------------------------------*
000011EA                           238  * HEX2ASCII: Convert Hexadecimal to ASCii 
000011EA                           239  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
000011EA                           240  *---------------------------------------------------------------------------*
000011EA  0C02 0008                241  HEX2ASCII   CMPI.B  #8, D2                  * Check to see if the size is long
000011EE  6700 000E                242              BEQ     HEX_LOOP
000011F2  4841                     243              SWAP    D1
000011F4  0C02 0002                244              CMPI.B  #2,D2
000011F8  6600 0004                245              BNE     HEX_LOOP
000011FC  E189                     246              LSL.L   #8,D1
000011FE                           247             
000011FE  E999                     248  HEX_LOOP    ROL.L   #4, D1                  * Roll D1 to left
00001200  2601                     249              MOVE.L  D1, D3                  * Move D1 to D3
00001202  0283 0000000F            250              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
00001208  0C03 0009                251              CMPI.B  #9, D3                  * Compare te digit
0000120C  6E00 000A                252              BGT     HEX_CHAR              
00001210  0603 0030                253              ADDI.B  #48,D3                  * Add 48 for numerical output
00001214  6000 0006                254              BRA     HEX_CONT
00001218                           255              
00001218  0603 0037                256  HEX_CHAR    ADDI.B  #55,D3                  * Add 55 for character output
0000121C                           257  
0000121C  12C3                     258  HEX_CONT    MOVE.B  D3, (A1)+               * Place into A1
0000121E  5342                     259              SUBI    #1, D2                  * Decrement the size
00001220  0C02 0000                260              CMPI.B  #0, D2                  * Check if D2 is 0
00001224  66D8                     261              BNE     HEX_LOOP                * Loop
00001226  12BC 0000                262              MOVE.B  #$0,(A1)                * Null terminator
0000122A  4E75                     263              RTS
0000122C                           264  *---------------------------------------------------------------------------*
0000122C                           265  * HEX2ASCII2STACK: Convert Hexadecimal to ASCii 
0000122C                           266  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
0000122C                           267  *---------------------------------------------------------------------------*
0000122C                           268  HEX2ASCII2STACK
0000122C  0C02 0008                269              CMPI.B  #8, D2                  * Check to see if the size is long
00001230  6700 000E                270              BEQ     STACK_HEX_LOOP
00001234  4841                     271              SWAP    D1
00001236  0C02 0002                272              CMPI.B  #2,D2
0000123A  6600 0004                273              BNE     STACK_HEX_LOOP
0000123E  E189                     274              LSL.L   #8,D1
00001240                           275             
00001240                           276  STACK_HEX_LOOP    
00001240  E999                     277              ROL.L   #4, D1                  * Roll D1 to left
00001242  2601                     278              MOVE.L  D1, D3                  * Move D1 to D3
00001244  0283 0000000F            279              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
0000124A  0C03 0009                280              CMPI.B  #9, D3                  * Compare te digit
0000124E  6E00 000A                281              BGT     STACK_HEX_CHAR              
00001252  0603 0030                282              ADDI.B  #48,D3                  * Add 48 for numerical output
00001256  6000 0006                283              BRA     STACK_HEX_CONT
0000125A                           284              
0000125A                           285  STACK_HEX_CHAR    
0000125A  0603 0037                286              ADDI.B  #55,D3                  * Add 55 for character output
0000125E                           287  
0000125E                           288  STACK_HEX_CONT    
0000125E  6100 1ACC                289              BSR     PUSH_STACK              *PLACE INTO STACK
00001262  5342                     290              SUBI    #1, D2                  * Decrement the size
00001264  0C02 0000                291              CMPI.B  #0, D2                  * Check if D2 is 0
00001268  66D6                     292              BNE     STACK_HEX_LOOP                * Loop
0000126A  12BC 0000                293              MOVE.B  #$0,(A1)                * Null terminator
0000126E  4E75                     294              RTS
00001270                           295  
00001270                           296  
00001270                           297  *---------------------------------------------------------------------------*
00001270                           298  * IS_ODD: Check whether the source address is odd
00001270                           299  * Reserved registers: A1 = Source, D1 = Result, D7 = error flag
00001270                           300  *---------------------------------------------------------------------------*
00001270  4281                     301  IS_ODD      CLR.L   D1                      * Clear the result
00001272  4287                     302              CLR.L   D7                      * Set the error flag to 0
00001274  2211                     303              MOVE.L  (A1),D1                * Temp store the checking address to D1
00001276  82FC 0002                304              DIVU    #2, D1                  * Divide the result by 2
0000127A  4841                     305              SWAP    D1                      * Swap remainder with quotient
0000127C  0C01 0001                306              CMPI.B  #1, D1                  * Check for error
00001280  6700 0004                307              BEQ     IS_ODD_ERR
00001284  4E75                     308              RTS
00001286                           309              
00001286  1E3C 0001                310  IS_ODD_ERR  MOVE.B  #1, D7
0000128A  4E75                     311              RTS
0000128C                           312  
0000128C                           313  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*
0000128C                           314  * MAIN                    
0000128C                           315  * A2: STACK POINTER                                                      MAIN                                                                        MAIN
0000128C                           316  * A5: Processing address
0000128C                           317  *
0000128C                           318  * D3: USED FOR PUSHING INTO STACK
0000128C                           319  *     To push into stack => MOVE.W #DATA,D3 
0000128C                           320  *                           BSR    PUSH_STACK
0000128C                           321  *     To print stack     => BSR    PRINT_STACK 
0000128C                           322  *     To clear stack     => BSR    CLEAR_STACK
0000128C                           323  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*  
0000128C                           324  MAIN        
0000128C                           325              *initialize stack pointer
0000128C  33FC 0000 0000364E       326              MOVE.W  #0,COUNTER
00001294  347C 7000                327              MOVEA.W #STACK,A2
00001298  163C 0020                328              MOVE.B  #' ',D3
0000129C  6100 1A8E                329              BSR     PUSH_STACK
000012A0  6100 1A8A                330              BSR     PUSH_STACK
000012A4  6100 1A86                331              BSR     PUSH_STACK
000012A8                           332              
000012A8                           333              * clear registers for temp storage
000012A8  4280                     334              CLR.L   D0                   
000012AA  4281                     335              CLR.L   D1                   
000012AC  227C 00000000            336              MOVEA.L #0, A1                
000012B2                           337              
000012B2  220D                     338              MOVE.L  A5,D1                   * check to see if the address is fully read
000012B4  23CD 00003296            339              MOVE.L  A5,S_ADDR_HX
000012BA  B2B9 0000329A            340              CMP.L   E_ADDR_HX,D1
000012C0  6C00 119A                341              BGE     REPEAT                  * go to repeat for user action
000012C4                           342  
000012C4  43F9 000032F1            343              LEA     TMPOUTPUT,A1            * allocate storage to hold output
000012CA  143C 0008                344              MOVE.B  #8,D2                   * set the output size
000012CE  4EB8 11EA                345              JSR     HEX2ASCII               
000012D2  43F9 000032F1            346              LEA     TMPOUTPUT,A1
000012D8  103C 000E                347              MOVE.B  #14,D0
000012DC  4E4F                     348              TRAP    #15
000012DE                           349              
000012DE  4285                     350              CLR.L    D5                      * clear the processing data
000012E0  3A1D                     351              MOVE.W  (A5)+,D5                 * copy the currently processing data in A5 over to D5
000012E2                           352                                               * advance the current instruction pointer to the next
000012E2                           353                                               * instruction in memory
000012E2                           354  *----------------------------------------*
000012E2                           355  * Registers          
000012E2                           356  * [D1] - COPY OF D5
000012E2                           357  * [D5] - DATA TO BE PROCESSED
000012E2                           358  * [D6] - COUNTER FOR LINES PROCESSED
000012E2                           359  *
000012E2                           360  * [D4]      - ERROR FLAG BEFORE PRINTING
000012E2                           361  * [STACK]   - PRINTS PROCESS DATA
000012E2                           362  * [COUNTER] - KEEPS TRACK OF STACK INCREMENT
000012E2                           363  *
000012E2                           364  * [A1] - USED FOR JUMPING/PRINTING
000012E2                           365  *
000012E2                           366  *----------------------------------------*
000012E2                           367  
000012E2                           368              
000012E2                           369              *Processing the first 4 most significant bits 
000012E2  2205                     370              MOVE.L  D5,D1                    * copy the current processing data to D1
000012E4  143C 000C                371              MOVE.B  #12,D2                   * shift to right by 12 bits
000012E8  E469                     372              LSR.W   D2,D1                    * [D2] Temporarily used D2 for shifting bits
000012EA  C2FC 0006                373              MULU    #6,D1                    * form offset
000012EE  43F9 0000135C            374              LEA     JMPTABLE,A1              * index into table
000012F4  4EB1 1000                375              JSR     0(A1,D1)                 * jump indirect with index
000012F8                           376              
000012F8                           377              *SECURED EA*
000012F8  B83C 0001                378              CMP.B   #1,D4                    * ERROR FLAG CHECK [ERROR WHEN D4 == 1]
000012FC  6600 0012                379              BNE     OUTPUT_PROCESSED_DATA    * PRINTS PROCESSED OP-CODE & EA
00001300  6100 01E8                380              BSR     OP_DATA                  * PRINT ERROR MESSAGE "DATA"
00001304  6100 1A92                381              BSR     CLEAR_STACK              * CLEARS THE STACK 
00001308  183C 0000                382              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
0000130C  6000 0022                383              BRA     DISPLAY_30_LINES         * GO TO LAST STEP
00001310                           384             
00001310                           385  OUTPUT_PROCESSED_DATA       
00001310  163C 000D                386              MOVE.B  #$D,D3                  *carriage return
00001314  6100 1A16                387              BSR     PUSH_STACK
00001318  163C 000A                388              MOVE.B  #$A,D3                  *new line feed
0000131C  6100 1A0E                389              BSR     PUSH_STACK
00001320  163C 0000                390              MOVE.B  #$0,D3                  *null
00001324  6100 1A06                391              BSR     PUSH_STACK
00001328                           392       
00001328  6100 19DE                393              BSR     PRINT_QUEUE
0000132C  183C 0000                394              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
00001330                           395  DISPLAY_30_LINES
00001330                           396              * display 30 lines per page
00001330  5206                     397              ADDI.B  #1,D6
00001332  0C06 001E                398              CMPI.B  #30,D6
00001336  6C00 0006                399              BGE     NEXTLINES
0000133A  6000 FF50                400              BRA     MAIN
0000133E                           401            
0000133E                           402  *---------------------------------------------------------------------------*
0000133E                           403  * NEXTLINES: receive input from user to print the next 30 lines
0000133E                           404  *---------------------------------------------------------------------------*  
0000133E  4206                     405  NEXTLINES   CLR.B   D6
00001340  43F9 000030ED            406              LEA     DISP_NEXT,A1
00001346  103C 000E                407              MOVE.B  #14,D0
0000134A  4E4F                     408              TRAP    #15
0000134C  43F9 000032A1            409              LEA     TMPINPUT,A1
00001352  103C 0002                410              MOVE.B  #2,D0
00001356  4E4F                     411              TRAP    #15
00001358  4EF8 128C                412              JMP     MAIN
0000135C                           413    
0000135C                           414  *---------------------------------------------------------------------------*
0000135C                           415  * JMPTABLE: OP code jump/branch table used to decode and display opcodes
0000135C                           416  *---------------------------------------------------------------------------*  
0000135C  4EF9 000013BC            417  JMPTABLE    JMP     OP0000  * CMPI/ORI/BTST/EORI/SUBI/BTST
00001362  4EF9 000015E2            418              JMP     OP0001  * MOVE.B                                        *WORKING ON - JOSEPH
00001368  4EF9 00001650            419              JMP     OP0010  * MOVE.L/MOVEA.L
0000136E  4EF9 000016B2            420              JMP     OP0011  * MOVE.W/MOVEA.W
00001374  4EF9 00001712            421              JMP     OP0100  * MOVEM/LEA/NEG/NOT/JSR/RTS
0000137A  4EF9 000018AC            422              JMP     OP0101  * ADDQ
00001380  4EF9 00001928            423              JMP     OP0110  * BRA/Bcc (BEQ/BNE/BLT/BHI)
00001386  4EF9 000019B6            424              JMP     OP0111  * MOVEQ (unassigned)
0000138C  4EF9 000019BA            425              JMP     OP1000  * DIVS
00001392  4EF9 000019F6            426              JMP     OP1001  * SUB/SUBA
00001398  4EF9 00001ACE            427              JMP     OP1010  * Unassigned 
0000139E  4EF9 00001AD2            428              JMP     OP1011  * CMP/EOR/CMPA
000013A4  4EF9 00001BCE            429              JMP     OP1100  * MULS/AND
000013AA  4EF9 00001C6A            430              JMP     OP1101  * ADD/ADDA
000013B0  4EF9 00001D3C            431              JMP     OP1110  * LSR/LSL/ASR/ASL/ROL/ROR
000013B6  4EF9 00001FEA            432              JMP     OP1111  * Special/Reserved
000013BC                           433              
000013BC                           434  *---------------------------------------------------------------------------*
000013BC                           435  * OP0000: decode CMPI/ORI/BTST/SUBI/EORI
000013BC                           436  *---------------------------------------------------------------------------*           
000013BC                           437  OP0000                                                                                  
000013BC  4281                     438              CLR.L   D1          * to temporarily store the address to process
000013BE  4280                     439              CLR.L   D0  
000013C0  4284                     440              CLR.L   D4                 
000013C2  227C 00000000            441              MOVEA.L #0, A1                
000013C8                           442              * Check for ORI (0000 0000 xx (size) xxx (EA mode) xxx(EA reg)
000013C8                           443              * Check if bit 11,10,9,8 are 0000)
000013C8  2205                     444              MOVE.L  D5,D1
000013CA  0281 00000F00            445              ANDI.L  #$0F00,D1
000013D0  0C81 00000000            446              CMPI.L  #$0000,D1   * if they are 0000, it is ORI
000013D6  6700 01B4                447              BEQ     OP_ORI
000013DA                           448  
000013DA                           449              * check for CMPI (0000 1100 xx (size) xxx (EA mode) xxx (EA reg)
000013DA                           450              * check if bit 11,10,9,8 are 1100
000013DA  4281                     451              CLR.L   D1
000013DC  2205                     452              MOVE.L  D5,D1
000013DE  0281 00000F00            453              ANDI.L  #$0F00,D1
000013E4  0C81 00000C00            454              CMPI.L  #$0C00,D1
000013EA  6700 014A                455              BEQ     OP_CMPI
000013EE                           456              
000013EE                           457              * check for SUBI
000013EE  4281                     458              CLR.L   D1
000013F0  2205                     459              MOVE.L  D5,D1
000013F2  0281 00000F00            460              ANDI.L  #$0F00,D1
000013F8  0C81 00000400            461              CMPI.L  #$0400,D1
000013FE  6700 0094                462              BEQ     OP_SUBI
00001402                           463              
00001402                           464              * check for EORI
00001402  4281                     465              CLR.L   D1
00001404  2205                     466              MOVE.L  D5,D1
00001406  0281 00000F00            467              ANDI.L  #$0F00,D1
0000140C  0C81 00000A00            468              CMPI.L  #$0A00,D1
00001412  6700 002A                469              BEQ     OP_EORI
00001416                           470              
00001416                           471              * check for BTST
00001416  4281                     472              CLR.L   D1
00001418  2205                     473              MOVE.L  D5,D1
0000141A  EA99                     474              ROR.L   #5,D1
0000141C  0281 00000008            475              ANDI.L  #$8,D1
00001422  0C01 0008                476              CMPI.B  #8,D1
00001426  6700 0008                477              BEQ     OP_BTST
0000142A                           478  
0000142A                           479              * OP0000 series other than ORI/CMPI/BTST/EORI
0000142A  4EF9 000014EA            480              JMP     OP_DATA
00001430                           481              
00001430                           482  *---------------------------------------------------------------------------*
00001430                           483  * OP_BTST: display BTST
00001430                           484  *---------------------------------------------------------------------------* 
00001430  43F9 0000337A            485  OP_BTST     LEA     DISP_BTST,A1
00001436  103C 000E                486              MOVE.B  #14,D0
0000143A  4E4F                     487              TRAP    #15
0000143C  4E75                     488              RTS
0000143E                           489  
0000143E                           490  *---------------------------------------------------------------------------*
0000143E                           491  * OP_EORI: decode and display EORI
0000143E                           492  *---------------------------------------------------------------------------* 
0000143E                           493  OP_EORI
0000143E  4281                     494              CLR.L   D1
00001440  4284                     495              CLR.L   D4
00001442  2205                     496              MOVE.L  D5,D1
00001444  EC99                     497              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001446  0C01 0000                498              CMPI.B  #0,D1
0000144A  6700 0012                499              BEQ     OP_EORI_B    * size is byte
0000144E  0C01 0001                500              CMPI.B  #1,D1
00001452  6700 001C                501              BEQ     OP_EORI_W    * size is word
00001456  0C01 0002                502              CMPI.B  #2,D1
0000145A  6700 0026                503              BEQ     OP_EORI_L    * size is long
0000145E                           504  
0000145E                           505  OP_EORI_B    * size is byte    
0000145E  183C 0000                506              MOVE.B  #0,D4
00001462  43F9 0000335C            507              LEA     DISP_EORI_B,A1
00001468  103C 000E                508              MOVE.B  #14,D0
0000146C  4E4F                     509              TRAP    #15
0000146E  4E75                     510              RTS
00001470                           511              
00001470                           512  OP_EORI_W    * size is word
00001470  183C 0001                513              MOVE.B  #1,D4
00001474  43F9 00003366            514              LEA     DISP_EORI_W,A1
0000147A  103C 000E                515              MOVE.B  #14,D0
0000147E  4E4F                     516              TRAP    #15
00001480  4E75                     517              RTS
00001482                           518              
00001482                           519  OP_EORI_L    * size is long
00001482  183C 0002                520              MOVE.B  #2,D4
00001486  43F9 00003370            521              LEA     DISP_EORI_L,A1
0000148C  103C 000E                522              MOVE.B  #14,D0
00001490  4E4F                     523              TRAP    #15
00001492  4E75                     524              RTS
00001494                           525              
00001494                           526  *---------------------------------------------------------------------------*
00001494                           527  * OP_SUBI: decode SUBI.B/.W/.L
00001494                           528  *---------------------------------------------------------------------------* 
00001494                           529  OP_SUBI
00001494  4281                     530              CLR.L   D1
00001496  4284                     531              CLR.L   D4
00001498  2205                     532              MOVE.L  D5,D1
0000149A  EC99                     533              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
0000149C  0C01 0000                534              CMPI.B  #0,D1
000014A0  6700 0012                535              BEQ     OP_SUBI_B    * size is byte
000014A4  0C01 0001                536              CMPI.B  #1,D1
000014A8  6700 001C                537              BEQ     OP_SUBI_W    * size is word
000014AC  0C01 0002                538              CMPI.B  #2,D1
000014B0  6700 0026                539              BEQ     OP_SUBI_L    * size is long
000014B4                           540  
000014B4                           541  OP_SUBI_B    * size is byte    
000014B4  183C 0000                542              MOVE.B  #0,D4
000014B8  43F9 00003468            543              LEA     DISP_SUBI_B,A1
000014BE  103C 000E                544              MOVE.B  #14,D0
000014C2  4E4F                     545              TRAP    #15
000014C4  4E75                     546              RTS
000014C6                           547              
000014C6                           548  OP_SUBI_W    * size is word
000014C6  183C 0001                549              MOVE.B  #1,D4
000014CA  43F9 00003472            550              LEA     DISP_SUBI_W,A1
000014D0  103C 000E                551              MOVE.B  #14,D0
000014D4  4E4F                     552              TRAP    #15
000014D6  4E75                     553              RTS
000014D8                           554              
000014D8                           555  OP_SUBI_L    * size is long
000014D8  183C 0002                556              MOVE.B  #2,D4
000014DC  43F9 0000347C            557              LEA     DISP_SUBI_L,A1
000014E2  103C 000E                558              MOVE.B  #14,D0
000014E6  4E4F                     559              TRAP    #15
000014E8  4E75                     560              RTS
000014EA                           561              
000014EA                           562  *---------------------------------------------------------------------------*
000014EA                           563  * OP_DATA : unidentified opcode
000014EA                           564  *---------------------------------------------------------------------------* 
000014EA                           565  OP_DATA
000014EA  4280                     566              CLR.L   D0                   
000014EC  4281                     567              CLR.L   D1     
000014EE  4284                     568              CLR.L   D4                    
000014F0  227C 00000000            569              MOVEA.L #0, A1             
000014F6  4287                     570              CLR.L   D7
000014F8  1E3C 0001                571              MOVE.B  #1,D7                   * error flag is true
000014FC                           572              
000014FC  43F9 000033A0            573              LEA     DISP_DATA,A1
00001502  103C 000E                574              MOVE.B  #14,D0
00001506  4E4F                     575              TRAP    #15
00001508                           576              
00001508  4EF9 0000150E            577              JMP     EA_DATA
0000150E                           578             
0000150E                           579             
0000150E                           580  *---------------------------------------------------------------------------*
0000150E                           581  * EA_DATA
0000150E                           582  *---------------------------------------------------------------------------*       
0000150E  43F9 000032F1            583  EA_DATA     LEA     TMPOUTPUT,A1    * load the temporarily stored output address
00001514  2205                     584              MOVE.L  D5,D1           * transfer the processing data to D1
00001516  7404                     585              MOVE.L  #4,D2           * set to word size
00001518  4EB8 11EA                586              JSR     HEX2ASCII       * prepare output in ascii
0000151C  43F9 00003613            587              LEA     DISP_HEX,A1     * display $ symbol
00001522  103C 000E                588              MOVE.B  #14,D0      
00001526  4E4F                     589              TRAP    #15
00001528  43F9 000032F1            590              LEA     TMPOUTPUT,A1    * display with a new line
0000152E  103C 000D                591              MOVE.B  #13,D0
00001532  4E4F                     592              TRAP    #15
00001534                           593  
00001534  4E75                     594              RTS
00001536                           595              
00001536                           596  *---------------------------------------------------------------------------*
00001536                           597  * OP_CMPI : decode CMPI and its size
00001536                           598  *---------------------------------------------------------------------------*          
00001536                           599  OP_CMPI
00001536  4281                     600              CLR.L   D1
00001538  4284                     601              CLR.L   D4
0000153A  2205                     602              MOVE.L  D5,D1
0000153C  EC99                     603              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
0000153E  0C01 0000                604              CMPI.B  #0,D1
00001542  6700 0012                605              BEQ     OP_CMPI_B    * size is byte
00001546  0C01 0001                606              CMPI.B  #1,D1
0000154A  6700 001C                607              BEQ     OP_CMPI_W    * size is word
0000154E  0C01 0002                608              CMPI.B  #2,D1
00001552  6700 0026                609              BEQ     OP_CMPI_L    * size is long
00001556                           610  
00001556                           611  OP_CMPI_B    * size is byte    
00001556  183C 0000                612              MOVE.B  #0,D4
0000155A  43F9 00003382            613              LEA     DISP_CMPI_B,A1
00001560  103C 000E                614              MOVE.B  #14,D0
00001564  4E4F                     615              TRAP    #15
00001566  4E75                     616              RTS
00001568                           617              
00001568                           618  OP_CMPI_W    * size is word
00001568  183C 0001                619              MOVE.B  #1,D4
0000156C  43F9 0000338C            620              LEA     DISP_CMPI_W,A1
00001572  103C 000E                621              MOVE.B  #14,D0
00001576  4E4F                     622              TRAP    #15
00001578  4E75                     623              RTS
0000157A                           624              
0000157A                           625  OP_CMPI_L    * size is long
0000157A  183C 0002                626              MOVE.B  #2,D4
0000157E  43F9 00003396            627              LEA     DISP_CMPI_L,A1
00001584  103C 000E                628              MOVE.B  #14,D0
00001588  4E4F                     629              TRAP    #15
0000158A  4E75                     630              RTS
0000158C                           631   
0000158C                           632  *---------------------------------------------------------------------------*
0000158C                           633  * OP_ORI : decode ORI and its size
0000158C                           634  *---------------------------------------------------------------------------* 
0000158C                           635  OP_ORI      
0000158C  4281                     636              CLR.L   D1
0000158E  4284                     637              CLR.L   D4
00001590  2205                     638              MOVE.L  D5,D1
00001592  EC99                     639              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001594  0C01 0000                640              CMPI.B  #0,D1
00001598  6700 0012                641              BEQ     OP_ORI_B    * size is byte
0000159C  0C01 0001                642              CMPI.B  #1,D1
000015A0  6700 001C                643              BEQ     OP_ORI_W    * size is word
000015A4  0C01 0002                644              CMPI.B  #2,D1
000015A8  6700 0026                645              BEQ     OP_ORI_L    * size is long
000015AC                           646  
000015AC                           647  OP_ORI_B    * size is byte    
000015AC  183C 0000                648              MOVE.B  #0,D4
000015B0  43F9 00003341            649              LEA     DISP_ORI_B,A1
000015B6  103C 000E                650              MOVE.B  #14,D0
000015BA  4E4F                     651              TRAP    #15
000015BC  4E75                     652              RTS
000015BE                           653              
000015BE                           654  OP_ORI_W    * size is word
000015BE  183C 0001                655              MOVE.B  #1,D4
000015C2  43F9 0000334A            656              LEA     DISP_ORI_W,A1
000015C8  103C 000E                657              MOVE.B  #14,D0
000015CC  4E4F                     658              TRAP    #15
000015CE  4E75                     659              RTS
000015D0                           660              
000015D0                           661  OP_ORI_L    * size is long
000015D0  183C 0002                662              MOVE.B  #2,D4
000015D4  43F9 00003353            663              LEA     DISP_ORI_L,A1
000015DA  103C 000E                664              MOVE.B  #14,D0
000015DE  4E4F                     665              TRAP    #15
000015E0  4E75                     666              RTS
000015E2                           667          
000015E2                           668  *---------------------------------------------------------------------------*
000015E2                           669  * OP0001: MOVE.B
000015E2                           670  *---------------------------------------------------------------------------*
000015E2                           671  OP0001      
000015E2  4EF9 000015E8            672              JMP     OP_MOVE_B   * display MOVE.B
000015E8                           673              
000015E8                           674  *---------------------------------------------------------------------------*
000015E8                           675  * OP_MOVE_B: display MOVE_B and proceed to EA
000015E8                           676  *---------------------------------------------------------------------------*
000015E8                           677  OP_MOVE_B                                                                       
000015E8                           678             
000015E8                           679             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
000015E8  13FC 0081 00003652       680             MOVE.B   #$81,DEST_REGISTER_FORMAT
000015F0  13FC 0000 00003653       681             MOVE.B   #$00,SRC_REGISTER_FORMAT
000015F8                           682             
000015F8                           683             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000015F8  13FC 00B9 00003655       684             MOVE.B   #$B9,GET_DST_START_END
00001600  13FC 0020 00003656       685             MOVE.B   #$20,GET_SRC_START_END
00001608                           686             
00001608                           687              *CLEAR D3
00001608  4283                     688              CLR.L   D3
0000160A                           689              *LOAD STACK WITH THIS OPMODE
0000160A  6100 1720                690              BSR     PUSH_STACK
0000160E  163C 004D                691              MOVE.B  #'M',D3
00001612  6100 1718                692              BSR     PUSH_STACK
00001616  163C 004F                693              MOVE.B  #'O',D3
0000161A  6100 1710                694              BSR     PUSH_STACK
0000161E  163C 0056                695              MOVE.B  #'V',D3
00001622  6100 1708                696              BSR     PUSH_STACK
00001626  163C 0045                697              MOVE.B  #'E',D3
0000162A  6100 1700                698              BSR     PUSH_STACK
0000162E  163C 002E                699              MOVE.B  #'.',D3
00001632  6100 16F8                700              BSR     PUSH_STACK
00001636  163C 0042                701              MOVE.B  #'B',D3
0000163A  6100 16F0                702              BSR     PUSH_STACK
0000163E                           703              
0000163E  6100 0E5E                704              BSR     GET_EA_EA_SRC
00001642  163C 002C                705              MOVE.B  #',',D3
00001646  6100 16E4                706              BSR     PUSH_STACK
0000164A  6100 127A                707              BSR     GET_EA_EA_DEST
0000164E                           708              *BSR     GET_EA_EA_DEST
0000164E                           709              
0000164E                           710              *TODO: NEEDS DEST EA TOO
0000164E                           711              
0000164E  4E75                     712              RTS
00001650                           713              
00001650                           714             
00001650                           715  *---------------------------------------------------------------------------*
00001650                           716  * OP0010: decode MOVE.L/MOVEA.L
00001650                           717  *---------------------------------------------------------------------------*
00001650                           718  OP0010      
00001650  183C 0002                719              MOVE.B  #2,D4
00001654  4280                     720              CLR.L   D0                     
00001656  4281                     721              CLR.L   D1                      
00001658  227C 00000000            722              MOVEA.L #0, A1                 
0000165E                           723              
0000165E  2205                     724              MOVE.L  D5,D1
00001660  EA99                     725              ROR.L   #5,D1
00001662  0281 0000000E            726              ANDI.L  #$E,D1
00001668  0C01 0002                727              CMPI.B  #2,D1
0000166C  6700 0026                728              BEQ     OP_MOVEA_L
00001670                           729  
00001670  4EF9 00001676            730              JMP     OP_MOVE_L
00001676                           731             
00001676                           732  
00001676                           733  *---------------------------------------------------------------------------*
00001676                           734  * OP_MOVE_L: display MOVE_L and proceed to EA
00001676                           735  *---------------------------------------------------------------------------*
00001676                           736  OP_MOVE_L   
00001676  183C 0002                737              MOVE.B  #2,D4
0000167A  227C 00000000            738              MOVEA.L #0, A1
00001680  43F9 000033BC            739              LEA     DISP_MOVE_L,A1
00001686  103C 000E                740              MOVE.B  #14,D0
0000168A  4E4F                     741              TRAP    #15
0000168C                           742              
0000168C  4EB9 0000204E            743              JSR     EA_GEN
00001692  4E75                     744              RTS
00001694                           745  
00001694                           746  *---------------------------------------------------------------------------*
00001694                           747  * OP_MOVEA_L: display MOVEA_L and proceed to EA
00001694                           748  *---------------------------------------------------------------------------*
00001694                           749  OP_MOVEA_L 
00001694  183C 0002                750              MOVE.B  #2,D4
00001698  227C 00000000            751              MOVEA.L #0, A1
0000169E  43F9 00003608            752              LEA     DISP_MOVEA_L,A1
000016A4  103C 000E                753              MOVE.B  #14,D0
000016A8  4E4F                     754              TRAP    #15
000016AA  4EF9 00002028            755              JMP     EA_MOVEA
000016B0                           756  
000016B0  4E75                     757              RTS
000016B2                           758              
000016B2                           759  *---------------------------------------------------------------------------*
000016B2                           760  * OP0011: decode MOVE.W/MOVEA.W
000016B2                           761  *---------------------------------------------------------------------------*
000016B2                           762  OP0011      
000016B2  4280                     763              CLR.L   D0                      
000016B4  4281                     764              CLR.L   D1  
000016B6  4284                     765              CLR.L   D4                   
000016B8  227C 00000000            766              MOVEA.L #0, A1               
000016BE  2205                     767              MOVE.L  D5,D1
000016C0  EA99                     768              ROR.L   #5,D1
000016C2  0281 0000000E            769              ANDI.L  #$E,D1
000016C8  0C01 0002                770              CMPI.B  #2,D1
000016CC  6700 0026                771              BEQ     OP_MOVEA_W
000016D0                           772              
000016D0  4EF9 000016D6            773              JMP     OP_MOVE_W
000016D6                           774            
000016D6                           775  *---------------------------------------------------------------------------*
000016D6                           776  * OP_MOVE_W: display MOVE_W and proceed to EA
000016D6                           777  *---------------------------------------------------------------------------*
000016D6                           778  OP_MOVE_W   
000016D6  183C 0001                779              MOVE.B  #1,D4
000016DA  227C 00000000            780              MOVEA.L #0, A1
000016E0  43F9 000033B2            781              LEA     DISP_MOVE_W,A1
000016E6  103C 000E                782              MOVE.B  #14,D0
000016EA  4E4F                     783              TRAP    #15
000016EC  4EF9 0000204E            784              JMP     EA_GEN
000016F2                           785  
000016F2  4E75                     786              RTS
000016F4                           787  
000016F4                           788  *---------------------------------------------------------------------------*
000016F4                           789  * OP_MOVEA_W: display MOVEA and proceed to EA
000016F4                           790  *---------------------------------------------------------------------------*
000016F4                           791  OP_MOVEA_W 
000016F4  183C 0001                792              MOVE.B  #1,D4
000016F8  227C 00000000            793              MOVEA.L #0, A1
000016FE  43F9 000035FD            794              LEA     DISP_MOVEA_W,A1
00001704  103C 000E                795              MOVE.B  #14,D0
00001708  4E4F                     796              TRAP    #15
0000170A  4EF9 00002028            797              JMP     EA_MOVEA
00001710                           798  
00001710  4E75                     799              RTS
00001712                           800            
00001712                           801  *---------------------------------------------------------------------------*
00001712                           802  * OP0100: decode MOVEM/LEA/NEG/JSR/RTS/NOT
00001712                           803  *---------------------------------------------------------------------------*
00001712                           804  OP0100
00001712  4280                     805              CLR.L   D0                      
00001714  4281                     806              CLR.L   D1  
00001716  4284                     807              CLR.L   D4                      
00001718  227C 00000000            808              MOVEA.L #0, A1                  
0000171E  2205                     809              MOVE.L  D5,D1  
00001720                           810              
00001720                           811              * check for RTS
00001720  0C41 4E75                812              CMPI.W  #$4E75,D1   * 0100 1110 0111 0101
00001724  6700 0178                813              BEQ     OP_RTS
00001728                           814              
00001728                           815              * check for JSR     * 0100 1110 10 xxx (ea mode) xxx (ea reg)
00001728  4281                     816              CLR.L   D1 
0000172A  2205                     817              MOVE.L  D5,D1  
0000172C  0241 0F00                818              ANDI.W  #$0F00,D1
00001730  0C41 0E00                819              CMPI.W  #$0E00,D1
00001734  6700 0154                820              BEQ     OP_JSR
00001738                           821  
00001738                           822              * check for NEG     * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
00001738  4281                     823              CLR.L   D1 
0000173A  2205                     824              MOVE.L  D5,D1  
0000173C  0241 0F00                825              ANDI.W  #$0F00,D1
00001740  0C41 0400                826              CMPI.W  #$0400,D1
00001744  6700 0086                827              BEQ     OP_NEG
00001748                           828              
00001748                           829              * check for NOT     * 0100 0110 xx (size) xxx (ea mode) xxx (ea reg)
00001748  4281                     830              CLR.L   D1 
0000174A  2205                     831              MOVE.L  D5,D1  
0000174C  0241 0F00                832              ANDI.W  #$0F00,D1
00001750  0C41 0600                833              CMPI.W  #$0600,D1
00001754  6700 00DE                834              BEQ     OP_NOT
00001758                           835              
00001758                           836              * check for LEA     * 0100 xxx (reg) 111 xxx (ea mode) xxx (ea reg)
00001758  4281                     837              CLR.L   D1 
0000175A  2205                     838              MOVE.L  D5,D1  
0000175C  E099                     839              ROR.L   #8,D1
0000175E  0C01 0001                840              CMPI.B  #1,D1
00001762  6700 0054                841              BEQ     OP_LEA
00001766                           842              
00001766                           843              * check for MOVEM   * 0100 1 x 001 x (size) xxx (ea mode) xxx (ea reg)
00001766  4281                     844              CLR.L   D1 
00001768  2205                     845              MOVE.L  D5,D1  
0000176A  EB59                     846              ROL.W   #5,D1
0000176C  0C01 0001                847              CMPI.B  #1,D1
00001770  6600 FD78                848              BNE     OP_DATA
00001774  E959                     849              ROL.W   #4,D1
00001776  0C01 0001                850              CMPI.B  #1,D1
0000177A  6600 FD6E                851              BNE     OP_DATA
0000177E  E359                     852              ROL.W   #1,D1
00001780  0C01 0000                853              CMPI.B  #0,D1
00001784  6700 000E                854              BEQ     OP_MOVEM_W
00001788  0C01 0001                855              CMPI.B  #1,D1
0000178C  6700 0018                856              BEQ     OP_MOVEM_L
00001790  4EF8 14EA                857              JMP     OP_DATA
00001794                           858  
00001794                           859  *---------------------------------------------------------------------------*
00001794                           860  * OP_MOVEM_W: display MOVEM_W
00001794                           861  *---------------------------------------------------------------------------*    
00001794                           862  OP_MOVEM_W  
00001794  183C 0001                863              MOVE.B  #1,D4
00001798  43F9 00003411            864              LEA     DISP_MOVEM_W,A1
0000179E  103C 000E                865              MOVE.B  #14,D0
000017A2  4E4F                     866              TRAP    #15
000017A4  4E75                     867              RTS
000017A6                           868  
000017A6                           869  *---------------------------------------------------------------------------*
000017A6                           870  * OP_MOVEM_L: display MOVEM_L
000017A6                           871  *---------------------------------------------------------------------------*
000017A6                           872  OP_MOVEM_L  
000017A6  183C 0002                873              MOVE.B  #2,D4
000017AA  43F9 0000341C            874              LEA     DISP_MOVEM_L,A1
000017B0  103C 000E                875              MOVE.B  #14,D0
000017B4  4E4F                     876              TRAP    #15
000017B6  4E75                     877              RTS
000017B8                           878     
000017B8                           879  *---------------------------------------------------------------------------*
000017B8                           880  * OP_LEA: decode and display LEA
000017B8                           881  *---------------------------------------------------------------------------*
000017B8                           882  OP_LEA      
000017B8  43F9 0000340A            883              LEA     DISP_LEA,A1
000017BE  103C 000E                884              MOVE.B  #14,D0
000017C2  4E4F                     885              TRAP    #15
000017C4  4EF9 00002028            886              JMP     EA_MOVEA
000017CA                           887  
000017CA  4E75                     888              RTS
000017CC                           889  
000017CC                           890  *---------------------------------------------------------------------------*
000017CC                           891  * OP_NEG: decode and display NEG 
000017CC                           892  *---------------------------------------------------------------------------*
000017CC                           893  OP_NEG      * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
000017CC  4281                     894              CLR.L   D1
000017CE  4284                     895              CLR.L   D4
000017D0  2205                     896              MOVE.L  D5,D1
000017D2  EC99                     897              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000017D4  0C01 0000                898              CMPI.B  #0,D1
000017D8  6700 0012                899              BEQ     OP_NEG_B    * size is byte
000017DC  0C01 0001                900              CMPI.B  #1,D1
000017E0  6700 0022                901              BEQ     OP_NEG_W    * size is word
000017E4  0C01 0002                902              CMPI.B  #2,D1
000017E8  6700 0032                903              BEQ     OP_NEG_L    * size is long
000017EC                           904                         
000017EC                           905  OP_NEG_B    * size is byte   
000017EC  183C 0000                906              MOVE.B  #0,D4 
000017F0  43F9 000033D4            907              LEA     DISP_NEG_B,A1
000017F6  103C 000E                908              MOVE.B  #14,D0
000017FA  4E4F                     909              TRAP    #15
000017FC                           910              
000017FC  4EB9 00001FEE            911              JSR     EA_NOSRC
00001802  4E75                     912              RTS
00001804                           913              
00001804                           914  OP_NEG_W    * size is word
00001804  183C 0001                915              MOVE.B  #1,D4
00001808  43F9 000033DD            916              LEA     DISP_NEG_W,A1
0000180E  103C 000E                917              MOVE.B  #14,D0
00001812  4E4F                     918              TRAP    #15
00001814  4EB9 00001FEE            919              JSR     EA_NOSRC
0000181A  4E75                     920              RTS
0000181C                           921              
0000181C                           922  OP_NEG_L    * size is long
0000181C  183C 0002                923              MOVE.B  #2,D4
00001820  43F9 000033E6            924              LEA     DISP_NEG_L,A1
00001826  103C 000E                925              MOVE.B  #14,D0
0000182A  4E4F                     926              TRAP    #15
0000182C  4EB9 00001FEE            927              JSR     EA_NOSRC
00001832                           928              
00001832  4E75                     929              RTS
00001834                           930  
00001834                           931  *---------------------------------------------------------------------------*
00001834                           932  * OP_NOT: decode and display NOT 
00001834                           933  *---------------------------------------------------------------------------*
00001834                           934  OP_NOT
00001834  4281                     935              CLR.L   D1
00001836  4284                     936              CLR.L   D4
00001838  2205                     937              MOVE.L  D5,D1
0000183A  EC99                     938              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
0000183C  0C01 0000                939              CMPI.B  #0,D1
00001840  6700 0012                940              BEQ     OP_NOT_B    * size is byte
00001844  0C01 0001                941              CMPI.B  #1,D1
00001848  6700 001C                942              BEQ     OP_NOT_W    * size is word
0000184C  0C01 0002                943              CMPI.B  #2,D1
00001850  6700 0026                944              BEQ     OP_NOT_L    * size is long
00001854                           945                         
00001854                           946  OP_NOT_B    * size is byte   
00001854  183C 0000                947              MOVE.B  #0,D4 
00001858  43F9 000033EF            948              LEA     DISP_NOT_B,A1
0000185E  103C 000E                949              MOVE.B  #14,D0
00001862  4E4F                     950              TRAP    #15
00001864  4E75                     951              RTS
00001866                           952              
00001866                           953  OP_NOT_W    * size is word
00001866  183C 0001                954              MOVE.B  #1,D4
0000186A  43F9 000033F8            955              LEA     DISP_NOT_W,A1
00001870  103C 000E                956              MOVE.B  #14,D0
00001874  4E4F                     957              TRAP    #15
00001876  4E75                     958              RTS
00001878                           959              
00001878                           960  OP_NOT_L    * size is long
00001878  183C 0002                961              MOVE.B  #2,D4
0000187C  43F9 00003401            962              LEA     DISP_NOT_L,A1
00001882  103C 000E                963              MOVE.B  #14,D0
00001886  4E4F                     964              TRAP    #15
00001888  4E75                     965              RTS
0000188A                           966  
0000188A                           967  *---------------------------------------------------------------------------*
0000188A                           968  * OP_JSR: display JSR     
0000188A                           969  *---------------------------------------------------------------------------*
0000188A  43F9 000033CD            970  OP_JSR      LEA     DISP_JSR,A1
00001890  103C 000E                971              MOVE.B  #14,D0
00001894  4E4F                     972              TRAP    #15
00001896  4EB9 00001FEE            973              JSR     EA_NOSRC
0000189C                           974  
0000189C  4E75                     975              RTS
0000189E                           976  
0000189E                           977  *---------------------------------------------------------------------------*
0000189E                           978  * OP_RTS: display RTS     
0000189E                           979  *---------------------------------------------------------------------------* 
0000189E  43F9 000033C6            980  OP_RTS      LEA     DISP_RTS,A1
000018A4  103C 000E                981              MOVE.B  #14,D0
000018A8  4E4F                     982              TRAP    #15
000018AA  4E75                     983              RTS
000018AC                           984  
000018AC                           985  *---------------------------------------------------------------------------*
000018AC                           986  * OP0101: decode ADDQ
000018AC                           987  *---------------------------------------------------------------------------* 
000018AC  4280                     988  OP0101      CLR.L   D0               * clear registers for temp storage       
000018AE  4281                     989              CLR.L   D1
000018B0  4284                     990              CLR.L   D4                  
000018B2  227C 00000000            991              MOVEA.L #0, A1  
000018B8                           992              
000018B8  2205                     993              MOVE.L  D5,D1           * copy the processing data 
000018BA  E089                     994              LSR.L   #8,D1           * shift to right by 8 bits to check the value of bit 8
000018BC  0201 0001                995              ANDI.B  #$1,D1          * mask all bits except the last 2 bits
000018C0  0C01 0000                996              CMPI.B  #0,D1           * if the value is 0, it's ADDQ
000018C4  6700 0006                997              BEQ     OP_ADDQ
000018C8                           998              
000018C8  4EF8 14EA                999              JMP     OP_DATA
000018CC                          1000       
000018CC  4281                    1001  OP_ADDQ     CLR.L   D1
000018CE  2205                    1002              MOVE.L  D5,D1
000018D0  EC99                    1003              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000018D2  0281 00000003           1004              ANDI.L  #$3,D1
000018D8  0C01 0000               1005              CMPI.B  #0,D1
000018DC  6700 0014               1006              BEQ     OP_ADDQ_B    * size is byte
000018E0  0C41 0001               1007              CMPI.W  #1,D1
000018E4  6700 001E               1008              BEQ     OP_ADDQ_W    * size is word
000018E8  0C81 00000002           1009              CMPI.L  #2,D1
000018EE  6700 0026               1010              BEQ     OP_ADDQ_L    * size is long
000018F2                          1011              
000018F2                          1012  *---------------------------------------------------------------------------*
000018F2                          1013  * OP_ADDQ: display ADDQ
000018F2                          1014  *---------------------------------------------------------------------------*              
000018F2                          1015  OP_ADDQ_B    * size is byte   
000018F2  183C 0000               1016              MOVE.B  #0,D4 
000018F6  43F9 00003427           1017              LEA     DISP_ADDQ_B,A1
000018FC  103C 000E               1018              MOVE.B  #14,D0
00001900  4E4F                    1019              TRAP    #15
00001902  4E75                    1020              RTS
00001904                          1021              
00001904                          1022  OP_ADDQ_W    * size is word
00001904  183C 0001               1023              MOVE.B  #1,D4
00001908  43F9 00003431           1024              LEA     DISP_ADDQ_W,A1
0000190E  103C 000E               1025              MOVE.B  #14,D0
00001912  4E4F                    1026              TRAP    #15
00001914  4E75                    1027              RTS
00001916                          1028              
00001916                          1029  OP_ADDQ_L    * size is long
00001916  183C 0002               1030              MOVE.B  #2,D4
0000191A  43F9 0000343B           1031              LEA     DISP_ADDQ_L,A1
00001920  103C 000E               1032              MOVE.B  #14,D0
00001924  4E4F                    1033              TRAP    #15
00001926  4E75                    1034              RTS
00001928                          1035  
00001928                          1036  *---------------------------------------------------------------------------*
00001928                          1037  * OP0110: decode BRA/BEQ/BNE/BLT/BHI
00001928                          1038  *---------------------------------------------------------------------------*              
00001928  4280                    1039  OP0110      CLR.L   D0                  
0000192A  4281                    1040              CLR.L   D1   
0000192C  4284                    1041              CLR.L   D4                 
0000192E  227C 00000000           1042              MOVEA.L #0,A1
00001934  2205                    1043              MOVE.L  D5, D1                
00001936  0281 000000FF           1044              ANDI.L  #$00FF, D1              * Get 8-bit displacement 
0000193C  2205                    1045              MOVE.L  D5,D1                  
0000193E  0281 00000F00           1046              ANDI.L  #$0F00,D1
00001944                          1047                 
00001944  0C41 0000               1048              CMPI.W  #$0000,D1               * Check for BRA
00001948  6700 0050               1049              BEQ     OP_BRA                  
0000194C                          1050                          
0000194C  0C41 0D00               1051              CMPI.W  #$0D00,D1               * Check for BLT
00001950  6700 0056               1052              BEQ     OP_BLT      
00001954                          1053  
00001954  0C41 0700               1054              CMPI.W  #$0700,D1               * Check for BEQ
00001958  6700 0032               1055              BEQ     OP_BEQ      
0000195C                          1056  
0000195C  0C41 0600               1057              CMPI.W  #$0600,D1               * Check for BNE
00001960  6700 001C               1058              BEQ     OP_BNE  
00001964                          1059              
00001964  0C41 0200               1060              CMPI.W  #$0200,D1               * Check for BHI
00001968  6700 0006               1061              BEQ     OP_BHI
0000196C                          1062  
0000196C  4EF8 14EA               1063              JMP     OP_DATA
00001970                          1064              
00001970  43F9 000035F6           1065  OP_BHI      LEA     DISP_BHI,A1             
00001976  103C 000E               1066              MOVE.B  #14,D0
0000197A  4E4F                    1067              TRAP    #15
0000197C  4E75                    1068              RTS
0000197E                          1069  
0000197E  43F9 000035EF           1070  OP_BNE      LEA     DISP_BNE,A1             
00001984  103C 000E               1071              MOVE.B  #14,D0
00001988  4E4F                    1072              TRAP    #15
0000198A  4E75                    1073              RTS
0000198C                          1074  
0000198C  43F9 000035E8           1075  OP_BEQ      LEA     DISP_BEQ,A1             
00001992  103C 000E               1076              MOVE.B  #14,D0
00001996  4E4F                    1077              TRAP    #15
00001998  4E75                    1078              RTS          
0000199A                          1079                          
0000199A  43F9 000035DA           1080  OP_BRA      LEA     DISP_BRA,A1             
000019A0  103C 000E               1081              MOVE.B  #14,D0
000019A4  4E4F                    1082              TRAP    #15
000019A6  4E75                    1083              RTS
000019A8                          1084              
000019A8  43F9 000035E1           1085  OP_BLT      LEA     DISP_BLT,A1          
000019AE  103C 000E               1086              MOVE.B  #14,D0
000019B2  4E4F                    1087              TRAP    #15
000019B4  4E75                    1088              RTS
000019B6                          1089     
000019B6                          1090  *---------------------------------------------------------------------------*
000019B6                          1091  * OP0111 : MOVEQ not required
000019B6                          1092  *---------------------------------------------------------------------------*           
000019B6  4EF8 14EA               1093  OP0111      JMP     OP_DATA
000019BA                          1094             
000019BA                          1095  *---------------------------------------------------------------------------*
000019BA                          1096  * OP1000 : decode DIVS
000019BA                          1097  *---------------------------------------------------------------------------*           
000019BA                          1098  OP1000      
000019BA  4280                    1099              CLR.L   D0                
000019BC  4281                    1100              CLR.L   D1   
000019BE  4284                    1101              CLR.L   D4                
000019C0  207C 00000000           1102              MOVEA.L #0, A0               
000019C6  227C 00000000           1103              MOVEA.L #0, A1               
000019CC                          1104              
000019CC  2205                    1105              MOVE.L  D5,D1
000019CE  EA89                    1106              LSR.L   #5,D1
000019D0  0281 0000000E           1107              ANDI.L  #$E,D1
000019D6                          1108    
000019D6  0C01 000E               1109              CMPI.B  #$E,D1
000019DA  6700 0006               1110              BEQ     OP_DIVS
000019DE                          1111              
000019DE  4EF8 14EA               1112              JMP     OP_DATA
000019E2                          1113  
000019E2                          1114  *---------------------------------------------------------------------------*
000019E2                          1115  * OP_DIVS: display DIVS and proceed to EA
000019E2                          1116  *---------------------------------------------------------------------------*  
000019E2  43F9 00003445           1117  OP_DIVS     LEA     DISP_DIVS,A1
000019E8  103C 000E               1118              MOVE.B  #14,D0
000019EC  4E4F                    1119              TRAP    #15
000019EE  4EF9 00002002           1120              JMP     EA_ARITH
000019F4                          1121  
000019F4  4E75                    1122              RTS
000019F6                          1123              
000019F6                          1124  *---------------------------------------------------------------------------*
000019F6                          1125  * OP1001: decode SUB/SUBA
000019F6                          1126  *---------------------------------------------------------------------------*      
000019F6  4280                    1127  OP1001      CLR.L   D0                
000019F8  4281                    1128              CLR.L   D1   
000019FA  4284                    1129              CLR.L   D4                 
000019FC  207C 00000000           1130              MOVEA.L #0, A0                 
00001A02  227C 00000000           1131              MOVEA.L #0, A1               
00001A08                          1132              
00001A08  2205                    1133              MOVE.L  D5,D1
00001A0A  EA89                    1134              LSR.L   #5,D1
00001A0C  0281 0000000E           1135              ANDI.L  #$E,D1
00001A12                          1136    
00001A12  0C01 0000               1137              CMPI.B  #$0,D1
00001A16  6700 004A               1138              BEQ     OP_SUB_B
00001A1A  0C01 0002               1139              CMPI.B  #$2,D1
00001A1E  6700 005A               1140              BEQ     OP_SUB_W
00001A22  0C01 0004               1141              CMPI.B  #$4,D1
00001A26  6700 006A               1142              BEQ     OP_SUB_L
00001A2A  0C01 0008               1143              CMPI.B  #$8,D1
00001A2E  6700 0032               1144              BEQ     OP_SUB_B
00001A32  0C01 000A               1145              CMPI.B  #$A,D1
00001A36  6700 0042               1146              BEQ     OP_SUB_W
00001A3A  0C01 000C               1147              CMPI.B  #$C,D1
00001A3E  6700 0052               1148              BEQ     OP_SUB_L
00001A42                          1149              
00001A42  4241                    1150              CLR     D1
00001A44  2205                    1151              MOVE.L  D5,D1
00001A46  EC89                    1152              LSR.L   #6,D1
00001A48  0281 0000000F           1153              ANDI.L  #$F,D1
00001A4E  0C01 0003               1154              CMPI.B  #3,D1
00001A52  6700 0056               1155              BEQ     OP_SUBA_W
00001A56  0C01 0007               1156              CMPI.B  #7,D1
00001A5A  6700 0060               1157              BEQ     OP_SUBA_L
00001A5E                          1158              
00001A5E  4EF8 14EA               1159              JMP     OP_DATA
00001A62                          1160    
00001A62                          1161  *---------------------------------------------------------------------------*
00001A62                          1162  * OP_SUB: display SUB and proceed to EA
00001A62                          1163  *---------------------------------------------------------------------------*            
00001A62  43F9 0000344D           1164  OP_SUB_B    LEA     DISP_SUB_B,A1
00001A68  103C 000E               1165              MOVE.B  #14,D0
00001A6C  4E4F                    1166              TRAP    #15
00001A6E  183C 0000               1167              MOVE.B  #0,D4
00001A72  4EF9 0000204E           1168              JMP     EA_GEN
00001A78                          1169  
00001A78  4E75                    1170              RTS
00001A7A                          1171  
00001A7A  43F9 00003456           1172  OP_SUB_W    LEA     DISP_SUB_W,A1
00001A80  103C 000E               1173              MOVE.B  #14,D0
00001A84  4E4F                    1174              TRAP    #15
00001A86  183C 0001               1175              MOVE.B  #1,D4
00001A8A  4EF9 0000204E           1176              JMP     EA_GEN
00001A90                          1177  
00001A90  4E75                    1178              RTS
00001A92                          1179  
00001A92  43F9 0000345F           1180  OP_SUB_L    LEA     DISP_SUB_L,A1
00001A98  103C 000E               1181              MOVE.B  #14,D0
00001A9C  4E4F                    1182              TRAP    #15
00001A9E  183C 0002               1183              MOVE.B  #2,D4
00001AA2  4EF9 0000204E           1184              JMP     EA_GEN
00001AA8                          1185  
00001AA8  4E75                    1186              RTS
00001AAA                          1187  
00001AAA                          1188  *---------------------------------------------------------------------------*
00001AAA                          1189  * OP_SUBA: display SUBA
00001AAA                          1190  *---------------------------------------------------------------------------*  
00001AAA  43F9 00003486           1191  OP_SUBA_W   LEA     DISP_SUBA_W,A1
00001AB0  103C 000E               1192              MOVE.B  #14,D0
00001AB4  4E4F                    1193              TRAP    #15
00001AB6  183C 0001               1194              MOVE.B  #1,D4
00001ABA  4E75                    1195              RTS
00001ABC                          1196  
00001ABC  43F9 00003490           1197  OP_SUBA_L   LEA     DISP_SUBA_L,A1
00001AC2  103C 000E               1198              MOVE.B  #14,D0
00001AC6  4E4F                    1199              TRAP    #15
00001AC8  183C 0002               1200              MOVE.B  #2,D4
00001ACC  4E75                    1201              RTS         
00001ACE                          1202  *---------------------------------------------------------------------------*
00001ACE                          1203  * OP1010 : unassigned
00001ACE                          1204  *---------------------------------------------------------------------------*           
00001ACE  4EF8 14EA               1205  OP1010      JMP     OP_DATA
00001AD2                          1206              
00001AD2                          1207  *---------------------------------------------------------------------------*
00001AD2                          1208  * OP1011 : decode CMP/EOR/CMPA
00001AD2                          1209  *---------------------------------------------------------------------------*           
00001AD2  4280                    1210  OP1011      CLR.L   D0                
00001AD4  4281                    1211              CLR.L   D1            
00001AD6  4284                    1212              CLR.L   D4                   
00001AD8  227C 00000000           1213              MOVEA.L #0, A1               
00001ADE  2205                    1214              MOVE.L  D5,D1
00001AE0  EA99                    1215              ROR.L   #5,D1
00001AE2  0281 0000000E           1216              ANDI.L  #$E,D1
00001AE8  0C01 0000               1217              CMPI.B  #$0,D1
00001AEC  6700 0062               1218              BEQ     OP_CMP_B
00001AF0  0C01 0002               1219              CMPI.B  #$2,D1
00001AF4  6700 0072               1220              BEQ     OP_CMP_W
00001AF8  0C01 0004               1221              CMPI.B  #$4,D1
00001AFC  6700 0082               1222              BEQ     OP_CMP_L
00001B00  0C01 0008               1223              CMPI.B  #$8,D1
00001B04  6700 0092               1224              BEQ     OP_EOR_B
00001B08  0C01 000A               1225              CMPI.B  #$A,D1
00001B0C  6700 009C               1226              BEQ     OP_EOR_W
00001B10  0C01 000C               1227              CMPI.B  #$C,D1
00001B14  6700 00A6               1228              BEQ     OP_EOR_L  
00001B18  0C01 0006               1229              CMPI.B  #$6,D1
00001B1C  6700 000E               1230              BEQ     OP_CMPA_W
00001B20  0C01 000E               1231              CMPI.B  #$E,D1
00001B24  6700 0018               1232              BEQ     OP_CMPA_L 
00001B28                          1233  
00001B28  4EF8 14EA               1234              JMP     OP_DATA          
00001B2C                          1235  
00001B2C                          1236  *---------------------------------------------------------------------------*
00001B2C                          1237  * OP_CMPA: display CMPA 
00001B2C                          1238  *---------------------------------------------------------------------------
00001B2C  43F9 000034D0           1239  OP_CMPA_W   LEA     DISP_CMPA_W,A1
00001B32  103C 000E               1240              MOVE.B  #14,D0
00001B36  4E4F                    1241              TRAP    #15
00001B38  183C 0001               1242              MOVE.B  #1,D4
00001B3C  4E75                    1243              RTS
00001B3E                          1244  
00001B3E  43F9 000034DA           1245  OP_CMPA_L   LEA     DISP_CMPA_L,A1
00001B44  103C 000E               1246              MOVE.B  #14,D0
00001B48  4E4F                    1247              TRAP    #15
00001B4A  183C 0002               1248              MOVE.B  #2,D4
00001B4E  4E75                    1249              RTS
00001B50                          1250  
00001B50                          1251  *---------------------------------------------------------------------------*
00001B50                          1252  * OP_CMP: display CMP and proceed to EA
00001B50                          1253  *---------------------------------------------------------------------------*  
00001B50  43F9 000034B5           1254  OP_CMP_B    LEA     DISP_CMP_B,A1
00001B56  103C 000E               1255              MOVE.B  #14,D0
00001B5A  4E4F                    1256              TRAP    #15
00001B5C  183C 0000               1257              MOVE.B  #0,D4
00001B60  4EF9 0000204E           1258              JMP     EA_GEN
00001B66                          1259  
00001B66  4E75                    1260              RTS
00001B68                          1261              
00001B68  43F9 000034BE           1262  OP_CMP_W    LEA     DISP_CMP_W,A1
00001B6E  103C 000E               1263              MOVE.B  #14,D0
00001B72  4E4F                    1264              TRAP    #15
00001B74  183C 0001               1265              MOVE.B  #1,D4
00001B78  4EF9 0000204E           1266              JMP     EA_GEN
00001B7E                          1267  
00001B7E  4E75                    1268              RTS
00001B80                          1269              
00001B80  43F9 000034C7           1270  OP_CMP_L    LEA     DISP_CMP_L,A1
00001B86  103C 000E               1271              MOVE.B  #14,D0
00001B8A  4E4F                    1272              TRAP    #15
00001B8C  183C 0002               1273              MOVE.B  #2,D4
00001B90  4EF9 0000204E           1274              JMP     EA_GEN
00001B96                          1275  
00001B96  4E75                    1276              RTS
00001B98                          1277              
00001B98                          1278  *---------------------------------------------------------------------------*
00001B98                          1279  * OP_EOR: display EOR
00001B98                          1280  *---------------------------------------------------------------------------*  
00001B98  43F9 0000349A           1281  OP_EOR_B    LEA     DISP_EOR_B,A1
00001B9E  103C 000E               1282              MOVE.B  #14,D0
00001BA2  4E4F                    1283              TRAP    #15
00001BA4  183C 0000               1284              MOVE.B  #0,D4
00001BA8  4E75                    1285              RTS
00001BAA                          1286              
00001BAA  43F9 000034A3           1287  OP_EOR_W    LEA     DISP_EOR_W,A1
00001BB0  103C 000E               1288              MOVE.B  #14,D0
00001BB4  4E4F                    1289              TRAP    #15
00001BB6  183C 0001               1290              MOVE.B  #1,D4
00001BBA  4E75                    1291              RTS
00001BBC                          1292              
00001BBC  43F9 000034AC           1293  OP_EOR_L    LEA     DISP_EOR_L,A1
00001BC2  103C 000E               1294              MOVE.B  #14,D0
00001BC6  4E4F                    1295              TRAP    #15
00001BC8  183C 0002               1296              MOVE.B  #2,D4
00001BCC  4E75                    1297              RTS    
00001BCE                          1298  
00001BCE                          1299  *---------------------------------------------------------------------------*
00001BCE                          1300  * OP1100: Decode and display MULS/AND and proceed to EA
00001BCE                          1301  *---------------------------------------------------------------------------* 
00001BCE  4280                    1302  OP1100      CLR.L   D0                 
00001BD0  4281                    1303              CLR.L   D1    
00001BD2  4284                    1304              CLR.L   D4                
00001BD4  227C 00000000           1305              MOVEA.L #0, A1             
00001BDA                          1306              
00001BDA  2205                    1307              MOVE.L  D5,D1
00001BDC  EA89                    1308              LSR.L   #5,D1
00001BDE  0281 0000000E           1309              ANDI.L  #$E,D1
00001BE4  0C41 000E               1310              CMPI.W  #$E,D1
00001BE8  6700 0036               1311              BEQ     OP_MULS
00001BEC  0C41 0000               1312              CMPI.W  #$0,D1
00001BF0  6700 0042               1313              BEQ     OP_AND_B
00001BF4  0C41 0002               1314              CMPI.W  #$2,D1
00001BF8  6700 004C               1315              BEQ     OP_AND_W
00001BFC  0C41 0004               1316              CMPI.W  #$4,D1
00001C00  6700 0056               1317              BEQ     OP_AND_L
00001C04  0C41 0008               1318              CMPI.W  #$8,D1
00001C08  6700 002A               1319              BEQ     OP_AND_B
00001C0C  0C41 000A               1320              CMPI.W  #$A,D1
00001C10  6700 0034               1321              BEQ     OP_AND_W
00001C14  0C41 000C               1322              CMPI.W  #$C,D1
00001C18  6700 003E               1323              BEQ     OP_AND_L
00001C1C                          1324  
00001C1C  4EF8 14EA               1325              JMP     OP_DATA
00001C20                          1326  
00001C20  43F9 000034E4           1327  OP_MULS     LEA     DISP_MULS_W,A1
00001C26  103C 000E               1328              MOVE.B  #14,D0
00001C2A  4E4F                    1329              TRAP    #15
00001C2C  4EF9 00002002           1330              JMP     EA_ARITH
00001C32  4E75                    1331              RTS
00001C34                          1332              
00001C34                          1333  OP_AND_B    
00001C34  43F9 000034EE           1334              LEA     DISP_AND_B,A1
00001C3A  103C 000E               1335              MOVE.B  #14,D0
00001C3E  4E4F                    1336              TRAP    #15
00001C40  183C 0000               1337              MOVE.B  #0,D4
00001C44  4E75                    1338              RTS
00001C46                          1339  
00001C46                          1340  OP_AND_W
00001C46  43F9 000034F7           1341              LEA     DISP_AND_W,A1
00001C4C  103C 000E               1342              MOVE.B  #14,D0
00001C50  4E4F                    1343              TRAP    #15
00001C52  183C 0001               1344              MOVE.B  #1,D4
00001C56  4E75                    1345              RTS
00001C58                          1346  
00001C58                          1347  OP_AND_L
00001C58  43F9 00003500           1348              LEA     DISP_AND_L,A1
00001C5E  103C 000E               1349              MOVE.B  #14,D0
00001C62  4E4F                    1350              TRAP    #15
00001C64  183C 0002               1351              MOVE.B  #2,D4
00001C68  4E75                    1352              RTS
00001C6A                          1353  
00001C6A                          1354  *---------------------------------------------------------------------------*
00001C6A                          1355  * OP1101: Decode ADD/ADDA
00001C6A                          1356  *---------------------------------------------------------------------------* 
00001C6A  4280                    1357  OP1101      CLR.L   D0                  
00001C6C  4281                    1358              CLR.L   D1       
00001C6E  4284                    1359              CLR.L   D4                   
00001C70  227C 00000000           1360              MOVEA.L #0, A1              
00001C76  2205                    1361              MOVE.L  D5,D1
00001C78  EA99                    1362              ROR.L   #5,D1
00001C7A  0281 0000000E           1363              ANDI.L  #$E,D1
00001C80  0C01 0000               1364              CMPI.B  #$0,D1
00001C84  6700 003E               1365              BEQ     OP_ADD_B
00001C88  0C01 0002               1366              CMPI.B  #$2,D1
00001C8C  6700 004E               1367              BEQ     OP_ADD_W
00001C90  0C01 0004               1368              CMPI.B  #$4,D1
00001C94  6700 005E               1369              BEQ     OP_ADD_L
00001C98  0C01 0008               1370              CMPI.B  #$8,D1
00001C9C  6700 0026               1371              BEQ     OP_ADD_B
00001CA0  0C01 000A               1372              CMPI.B  #$A,D1
00001CA4  6700 0036               1373              BEQ     OP_ADD_W
00001CA8  0C01 000C               1374              CMPI.B  #$C,D1
00001CAC  6700 0046               1375              BEQ     OP_ADD_L  
00001CB0                          1376              
00001CB0  0C01 0006               1377              CMPI.B  #$6,D1
00001CB4  6700 0056               1378              BEQ     OP_ADDA_W
00001CB8  0C01 000E               1379              CMPI.B  #$E,D1
00001CBC  6700 0066               1380              BEQ     OP_ADDA_L 
00001CC0                          1381  
00001CC0  4EF8 14EA               1382              JMP     OP_DATA  
00001CC4                          1383            
00001CC4                          1384  *---------------------------------------------------------------------------*
00001CC4                          1385  * OP_ADD: display ADD and proceed to EA
00001CC4                          1386  *---------------------------------------------------------------------------*  
00001CC4  43F9 00003509           1387  OP_ADD_B    LEA     DISP_ADD_B,A1
00001CCA  103C 000E               1388              MOVE.B  #14,D0
00001CCE  4E4F                    1389              TRAP    #15
00001CD0  183C 0000               1390              MOVE.B  #0,D4
00001CD4  4EF9 0000204E           1391              JMP     EA_GEN
00001CDA                          1392  
00001CDA  4E75                    1393              RTS
00001CDC                          1394  
00001CDC  43F9 00003512           1395  OP_ADD_W    LEA     DISP_ADD_W,A1
00001CE2  103C 000E               1396              MOVE.B  #14,D0
00001CE6  4E4F                    1397              TRAP    #15
00001CE8  183C 0001               1398              MOVE.B  #1,D4
00001CEC  4EF9 0000204E           1399              JMP     EA_GEN
00001CF2                          1400  
00001CF2  4E75                    1401              RTS
00001CF4                          1402  
00001CF4  43F9 0000351B           1403  OP_ADD_L    LEA     DISP_ADD_L,A1
00001CFA  103C 000E               1404              MOVE.B  #14,D0
00001CFE  4E4F                    1405              TRAP    #15
00001D00  183C 0002               1406              MOVE.B  #2,D4
00001D04  4EF9 0000204E           1407              JMP     EA_GEN
00001D0A                          1408  
00001D0A  4E75                    1409              RTS
00001D0C                          1410  
00001D0C                          1411  *---------------------------------------------------------------------------*
00001D0C                          1412  * OP_ADDA: display ADDA and proceed to EA
00001D0C                          1413  *---------------------------------------------------------------------------*  
00001D0C  43F9 00003524           1414  OP_ADDA_W   LEA     DISP_ADDA_W,A1
00001D12  103C 000E               1415              MOVE.B  #14,D0
00001D16  4E4F                    1416              TRAP    #15
00001D18  183C 0001               1417              MOVE.B  #1,D4
00001D1C  4EF9 0000204E           1418              JMP     EA_GEN
00001D22                          1419  
00001D22  4E75                    1420              RTS
00001D24                          1421  
00001D24  43F9 0000352E           1422  OP_ADDA_L   LEA     DISP_ADDA_L,A1
00001D2A  103C 000E               1423              MOVE.B  #14,D0
00001D2E  4E4F                    1424              TRAP    #15
00001D30  183C 0002               1425              MOVE.B  #2,D4
00001D34  4EF9 0000204E           1426              JMP     EA_GEN
00001D3A                          1427  
00001D3A  4E75                    1428              RTS
00001D3C                          1429              
00001D3C                          1430  *---------------------------------------------------------------------------*
00001D3C                          1431  * OP1110: LSR/LSL/ASR/ASL/ROL/ROR
00001D3C                          1432  *---------------------------------------------------------------------------* 
00001D3C  4280                    1433  OP1110      CLR.L   D0                  
00001D3E  4281                    1434              CLR.L   D1   
00001D40  4284                    1435              CLR.L   D4                   
00001D42  227C 00000000           1436              MOVEA.L #0, A1                 
00001D48  2205                    1437              MOVE.L  D5,D1
00001D4A                          1438              
00001D4A                          1439              * check for LSX
00001D4A  E699                    1440              ROR.L   #3,D1
00001D4C  0281 00000001           1441              ANDI.L  #$1,D1
00001D52  0C01 0001               1442              CMPI.B  #1,D1
00001D56  6700 002E               1443              BEQ     OP_LSX
00001D5A                          1444              
00001D5A                          1445              * reset D1 and check for ASX
00001D5A  4281                    1446              CLR.L   D1
00001D5C  2205                    1447              MOVE.L  D5,D1
00001D5E  E699                    1448              ROR.L   #3,D1
00001D60  0281 00000001           1449              ANDI.L  #$1,D1
00001D66  0C01 0000               1450              CMPI.B  #0,D1
00001D6A  6700 0032               1451              BEQ     OP_ASX
00001D6E                          1452  
00001D6E                          1453              * reset D1 and check for ROX
00001D6E  4281                    1454              CLR.L   D1
00001D70  2205                    1455              MOVE.L  D5,D1
00001D72  E699                    1456              ROR.L   #3,D1
00001D74  0281 00000001           1457              ANDI.L  #$1,D1
00001D7A  0C01 0003               1458              CMPI.B  #3,D1
00001D7E  6700 0036               1459              BEQ     OP_ROX
00001D82                          1460              
00001D82  4EF8 14EA               1461              JMP     OP_DATA
00001D86                          1462  
00001D86                          1463  *---------------------------------------------------------------------------*
00001D86                          1464  * OP_LSX: process LSR/LSL
00001D86                          1465  *---------------------------------------------------------------------------*            
00001D86  EA99                    1466  OP_LSX      ROR.L   #5,D1
00001D88  0281 00000001           1467              ANDI.L  #$1,D1
00001D8E  0C01 0000               1468              CMPI.B  #0,D1
00001D92  6700 003A               1469              BEQ     OP_LSR
00001D96  0C01 0001               1470              CMPI.B  #1,D1
00001D9A  6700 008C               1471              BEQ     OP_LSL
00001D9E                          1472              
00001D9E                          1473  *---------------------------------------------------------------------------*
00001D9E                          1474  * OP_ASX: process ASR/ASL
00001D9E                          1475  *---------------------------------------------------------------------------*  
00001D9E  EA99                    1476  OP_ASX      ROR.L   #5,D1
00001DA0  0281 00000001           1477              ANDI.L  #$1,D1
00001DA6  0C01 0000               1478              CMPI.B  #0,D1
00001DAA  6700 00D6               1479              BEQ     OP_ASR
00001DAE  0C01 0001               1480              CMPI.B  #1,D1
00001DB2  6700 0128               1481              BEQ     OP_ASL
00001DB6                          1482              
00001DB6                          1483  *---------------------------------------------------------------------------*
00001DB6                          1484  * OP_ROX: process ROR/ROL
00001DB6                          1485  *---------------------------------------------------------------------------*  
00001DB6  EA99                    1486  OP_ROX      ROR.L   #5,D1
00001DB8  0281 00000001           1487              ANDI.L  #$1,D1
00001DBE  0C01 0000               1488              CMPI.B  #0,D1
00001DC2  6700 0172               1489              BEQ     OP_ROR
00001DC6  0C01 0001               1490              CMPI.B  #1,D1
00001DCA  6700 01C4               1491              BEQ     OP_ROL
00001DCE                          1492  
00001DCE                          1493  *---------------------------------------------------------------------------*
00001DCE                          1494  * OP_LSR: decode and display LSR
00001DCE                          1495  *---------------------------------------------------------------------------*        
00001DCE  E599                    1496  OP_LSR      ROL.L   #2,D1
00001DD0  0281 00000003           1497              ANDI.L  #$3,D1
00001DD6  0C01 0000               1498              CMPI.B  #0,D1
00001DDA  6700 0016               1499              BEQ     OP_LSR_B
00001DDE  0C01 0001               1500              CMPI.B  #$1,D1
00001DE2  6700 0032               1501              BEQ     OP_LSR_W
00001DE6  0C01 0002               1502              CMPI.B  #$2,D1
00001DEA  6700 0018               1503              BEQ     OP_LSR_L
00001DEE                          1504              
00001DEE  4EF8 14EA               1505              JMP     OP_DATA
00001DF2                          1506  
00001DF2  43F9 00003538           1507  OP_LSR_B    LEA     DISP_LSR_B,A1
00001DF8  103C 000E               1508              MOVE.B  #14,D0
00001DFC  4E4F                    1509              TRAP    #15
00001DFE  183C 0000               1510              MOVE.B  #0,D4
00001E02  4E75                    1511              RTS
00001E04                          1512  
00001E04  43F9 0000355C           1513  OP_LSR_L    LEA     DISP_LSR_L,A1
00001E0A  103C 000E               1514              MOVE.B  #14,D0
00001E0E  4E4F                    1515              TRAP    #15
00001E10  183C 0002               1516              MOVE.B  #2,D4
00001E14  4E75                    1517              RTS
00001E16                          1518  
00001E16  43F9 0000354A           1519  OP_LSR_W    LEA     DISP_LSR_W,A1
00001E1C  103C 000E               1520              MOVE.B  #14,D0
00001E20  4E4F                    1521              TRAP    #15
00001E22  183C 0001               1522              MOVE.B  #1,D4
00001E26  4E75                    1523              RTS
00001E28                          1524   
00001E28                          1525  *---------------------------------------------------------------------------*
00001E28                          1526  * OP_LSL: decode and display LSL
00001E28                          1527  *---------------------------------------------------------------------------*             
00001E28  E599                    1528  OP_LSL      ROL.L   #2,D1
00001E2A  0281 00000003           1529              ANDI.L  #$3,D1
00001E30  0C01 0000               1530              CMPI.B  #0,D1
00001E34  6700 0016               1531              BEQ     OP_LSL_B
00001E38  0C01 0001               1532              CMPI.B  #$1,D1
00001E3C  6700 0032               1533              BEQ     OP_LSL_W
00001E40  0C01 0002               1534              CMPI.B  #$2,D1
00001E44  6700 0018               1535              BEQ     OP_LSL_L
00001E48                          1536              
00001E48  4EF8 14EA               1537              JMP OP_DATA
00001E4C                          1538  
00001E4C  43F9 00003541           1539  OP_LSL_B    LEA     DISP_LSL_B,A1
00001E52  103C 000E               1540              MOVE.B  #14,D0
00001E56  4E4F                    1541              TRAP    #15
00001E58  183C 0000               1542              MOVE.B  #0,D4
00001E5C  4E75                    1543              RTS
00001E5E                          1544  
00001E5E  43F9 00003565           1545  OP_LSL_L    LEA     DISP_LSL_L,A1
00001E64  103C 000E               1546              MOVE.B  #14,D0
00001E68  4E4F                    1547              TRAP    #15
00001E6A  183C 0002               1548              MOVE.B  #2,D4
00001E6E  4E75                    1549              RTS
00001E70                          1550  
00001E70  43F9 00003553           1551  OP_LSL_W    LEA     DISP_LSL_W,A1
00001E76  103C 000E               1552              MOVE.B  #14,D0
00001E7A  4E4F                    1553              TRAP    #15
00001E7C  183C 0001               1554              MOVE.B  #1,D4
00001E80  4E75                    1555              RTS
00001E82                          1556   
00001E82                          1557  *---------------------------------------------------------------------------*
00001E82                          1558  * OP_ASR: decode and display ASR
00001E82                          1559  *---------------------------------------------------------------------------*             
00001E82  E599                    1560  OP_ASR      ROL.L   #2,D1
00001E84  0281 00000003           1561              ANDI.L  #$3,D1
00001E8A  0C01 0000               1562              CMPI.B  #0,D1
00001E8E  6700 0016               1563              BEQ     OP_ASR_B
00001E92  0C01 0001               1564              CMPI.B  #$1,D1
00001E96  6700 0032               1565              BEQ     OP_ASR_W
00001E9A  0C01 0002               1566              CMPI.B  #$2,D1
00001E9E  6700 0018               1567              BEQ     OP_ASR_L
00001EA2                          1568              
00001EA2  4EF8 14EA               1569              JMP OP_DATA
00001EA6                          1570  
00001EA6  43F9 0000356E           1571  OP_ASR_B    LEA     DISP_ASR_B,A1
00001EAC  103C 000E               1572              MOVE.B  #14,D0
00001EB0  4E4F                    1573              TRAP    #15
00001EB2  183C 0000               1574              MOVE.B  #0,D4
00001EB6  4E75                    1575              RTS
00001EB8                          1576  
00001EB8  43F9 00003592           1577  OP_ASR_L    LEA     DISP_ASR_L,A1
00001EBE  103C 000E               1578              MOVE.B  #14,D0
00001EC2  4E4F                    1579              TRAP    #15
00001EC4  183C 0002               1580              MOVE.B  #2,D4
00001EC8  4E75                    1581              RTS
00001ECA                          1582  
00001ECA  43F9 00003580           1583  OP_ASR_W    LEA     DISP_ASR_W,A1
00001ED0  103C 000E               1584              MOVE.B  #14,D0
00001ED4  4E4F                    1585              TRAP    #15
00001ED6  183C 0001               1586              MOVE.B  #1,D4
00001EDA  4E75                    1587              RTS
00001EDC                          1588       
00001EDC                          1589  *---------------------------------------------------------------------------*
00001EDC                          1590  * OP_ASL: decode and display ASL
00001EDC                          1591  *---------------------------------------------------------------------------*         
00001EDC  E599                    1592  OP_ASL      ROL.L   #2,D1
00001EDE  0281 00000003           1593              ANDI.L  #$3,D1
00001EE4  0C01 0000               1594              CMPI.B  #0,D1
00001EE8  6700 0016               1595              BEQ     OP_ASL_B
00001EEC  0C01 0001               1596              CMPI.B  #$1,D1
00001EF0  6700 0032               1597              BEQ     OP_ASL_W
00001EF4  0C01 0002               1598              CMPI.B  #$2,D1
00001EF8  6700 0018               1599              BEQ     OP_ASL_L
00001EFC                          1600              
00001EFC  4EF8 14EA               1601              JMP OP_DATA
00001F00                          1602  
00001F00  43F9 00003577           1603  OP_ASL_B    LEA     DISP_ASL_B,A1
00001F06  103C 000E               1604              MOVE.B  #14,D0
00001F0A  4E4F                    1605              TRAP    #15
00001F0C  183C 0000               1606              MOVE.B  #0,D4
00001F10  4E75                    1607              RTS
00001F12                          1608  
00001F12  43F9 0000359B           1609  OP_ASL_L    LEA     DISP_ASL_L,A1
00001F18  103C 000E               1610              MOVE.B  #14,D0
00001F1C  4E4F                    1611              TRAP    #15
00001F1E  183C 0002               1612              MOVE.B  #2,D4
00001F22  4E75                    1613              RTS
00001F24                          1614  
00001F24  43F9 00003589           1615  OP_ASL_W    LEA     DISP_ASL_W,A1
00001F2A  103C 000E               1616              MOVE.B  #14,D0
00001F2E  4E4F                    1617              TRAP    #15
00001F30  183C 0001               1618              MOVE.B  #1,D4
00001F34  4E75                    1619              RTS
00001F36                          1620   
00001F36                          1621  *---------------------------------------------------------------------------*
00001F36                          1622  * OP_ROR: decode and display ROR
00001F36                          1623  *---------------------------------------------------------------------------*             
00001F36  E599                    1624  OP_ROR      ROL.L   #2,D1
00001F38  0281 00000003           1625              ANDI.L  #$3,D1
00001F3E  0C01 0000               1626              CMPI.B  #0,D1
00001F42  6700 0016               1627              BEQ     OP_ROR_B
00001F46  0C01 0001               1628              CMPI.B  #$1,D1
00001F4A  6700 0032               1629              BEQ     OP_ROR_W
00001F4E  0C01 0002               1630              CMPI.B  #$2,D1
00001F52  6700 0018               1631              BEQ     OP_ROR_L
00001F56                          1632              
00001F56  4EF8 14EA               1633              JMP OP_DATA
00001F5A                          1634  
00001F5A  43F9 000035A4           1635  OP_ROR_B    LEA     DISP_ROR_B,A1
00001F60  103C 000E               1636              MOVE.B  #14,D0
00001F64  4E4F                    1637              TRAP    #15
00001F66  183C 0000               1638              MOVE.B  #0,D4
00001F6A  4E75                    1639              RTS
00001F6C                          1640  
00001F6C  43F9 000035C8           1641  OP_ROR_L    LEA     DISP_ROR_L,A1
00001F72  103C 000E               1642              MOVE.B  #14,D0
00001F76  4E4F                    1643              TRAP    #15
00001F78  183C 0002               1644              MOVE.B  #2,D4
00001F7C  4E75                    1645              RTS
00001F7E                          1646  
00001F7E  43F9 000035B6           1647  OP_ROR_W    LEA     DISP_ROR_W,A1
00001F84  103C 000E               1648              MOVE.B  #14,D0
00001F88  4E4F                    1649              TRAP    #15
00001F8A  183C 0001               1650              MOVE.B  #1,D4
00001F8E  4E75                    1651              RTS
00001F90                          1652  
00001F90                          1653  *---------------------------------------------------------------------------*
00001F90                          1654  * OP_ROL: decode and display ROL
00001F90                          1655  *---------------------------------------------------------------------------*             
00001F90  E599                    1656  OP_ROL      ROL.L   #2,D1
00001F92  0281 00000003           1657              ANDI.L  #$3,D1
00001F98  0C01 0000               1658              CMPI.B  #0,D1
00001F9C  6700 0016               1659              BEQ     OP_ROL_B
00001FA0  0C01 0001               1660              CMPI.B  #$1,D1
00001FA4  6700 0032               1661              BEQ     OP_ROL_W
00001FA8  0C01 0002               1662              CMPI.B  #$2,D1
00001FAC  6700 0018               1663              BEQ     OP_ROL_L
00001FB0                          1664              
00001FB0  4EF8 14EA               1665              JMP OP_DATA
00001FB4                          1666  
00001FB4                          1667  
00001FB4  43F9 000035AD           1668  OP_ROL_B    LEA     DISP_ROL_B,A1
00001FBA  103C 000E               1669              MOVE.B  #14,D0
00001FBE  4E4F                    1670              TRAP    #15
00001FC0  183C 0000               1671              MOVE.B  #0,D4
00001FC4  4E75                    1672              RTS
00001FC6                          1673  
00001FC6  43F9 000035D1           1674  OP_ROL_L    LEA     DISP_ROL_L,A1
00001FCC  103C 000E               1675              MOVE.B  #14,D0
00001FD0  4E4F                    1676              TRAP    #15
00001FD2  183C 0002               1677              MOVE.B  #2,D4
00001FD6  4E75                    1678              RTS
00001FD8                          1679  
00001FD8  43F9 000035BF           1680  OP_ROL_W    LEA     DISP_ROL_W,A1
00001FDE  103C 000E               1681              MOVE.B  #14,D0
00001FE2  4E4F                    1682              TRAP    #15
00001FE4  183C 0001               1683              MOVE.B  #1,D4
00001FE8  4E75                    1684              RTS
00001FEA                          1685              
00001FEA                          1686  *---------------------------------------------------------------------------*
00001FEA                          1687  * OP1111 : Special reserved
00001FEA                          1688  *---------------------------------------------------------------------------*           
00001FEA  4EF8 14EA               1689  OP1111      JMP     OP_DATA
00001FEE                          1690  
00001FEE                          1691  *---------------------------------------------------------------------------*
00001FEE                          1692  * EA_NOSRC: decode and display effective addresses for NEG/JSR
00001FEE                          1693  *---------------------------------------------------------------------------*
00001FEE                          1694  EA_NOSRC    
00001FEE  4EB9 000020AC           1695              JSR     SRC_MODE
00001FF4  43F9 0000329E           1696              LEA     ENDLINE_M,A1
00001FFA  103C 000E               1697              MOVE.B  #14,D0
00001FFE  4E4F                    1698              TRAP    #15
00002000  4E75                    1699              RTS
00002002                          1700              
00002002                          1701  *---------------------------------------------------------------------------*
00002002                          1702  * EA_ARITH: decode and display effective addresses for DIVS/MULS
00002002                          1703  *---------------------------------------------------------------------------*
00002002                          1704  EA_ARITH
00002002  4EB9 000020AC           1705              JSR     SRC_MODE
00002008  43F9 00003618           1706              LEA     DISP_D,A1
0000200E  103C 000E               1707              MOVE.B  #14,D0
00002012  4E4F                    1708              TRAP    #15
00002014  4EB9 00002338           1709              JSR     DEST_REGISTER
0000201A  43F9 0000329E           1710              LEA     ENDLINE_M,A1
00002020  103C 000E               1711              MOVE.B  #14,D0
00002024  4E4F                    1712              TRAP    #15
00002026  4E75                    1713              RTS
00002028                          1714              
00002028                          1715  *---------------------------------------------------------------------------*
00002028                          1716  * EA_MOVEA: decode and display effective addresses for MOVEA/LEA
00002028                          1717  *---------------------------------------------------------------------------*
00002028                          1718  EA_MOVEA
00002028  4EB9 000020AC           1719              JSR     SRC_MODE
0000202E  43F9 00003629           1720              LEA     DISP_AOP,A1
00002034  103C 000E               1721              MOVE.B  #14,D0
00002038  4E4F                    1722              TRAP    #15
0000203A  4EB9 00002338           1723              JSR     DEST_REGISTER
00002040  43F9 00003627           1724              LEA     DISP_CP,A1
00002046  103C 000D               1725              MOVE.B  #13,D0
0000204A  4E4F                    1726              TRAP    #15
0000204C  4E75                    1727              RTS
0000204E                          1728              
0000204E                          1729  *---------------------------------------------------------------------------*
0000204E                          1730  * EA_GEN: decode and display effective addresses for MOVE
0000204E                          1731  *---------------------------------------------------------------------------*
0000204E                          1732  EA_GEN          
0000204E                          1733              * retrieve/display source mode/register
0000204E  4EB9 000020AC           1734              JSR     SRC_MODE
00002054                          1735              
00002054                          1736              * retrieve/display destination mode/register
00002054  4EB9 00002068           1737              JSR     DEST_MODE
0000205A                          1738              
0000205A  43F9 0000329E           1739              LEA     ENDLINE_M,A1
00002060  103C 000E               1740              MOVE.B  #14,D0
00002064  4E4F                    1741              TRAP    #15
00002066                          1742              
00002066  4E75                    1743              RTS
00002068                          1744  
00002068                          1745  *---------------------------------------------------------------------------*
00002068                          1746  * DEST_MODE: decode and display destination mode (bit 8 - 6)
00002068                          1747  *---------------------------------------------------------------------------*           
00002068                          1748  DEST_MODE   
00002068                          1749              * clear registers to store temp data
00002068  4280                    1750              CLR.L   D0                      
0000206A  4281                    1751              CLR.L   D1                      
0000206C  207C 00000000           1752              MOVEA.L #0, A0                  
00002072  227C 00000000           1753              MOVEA.L #0, A1                  
00002078  2205                    1754              MOVE.L  D5,D1
0000207A  EC89                    1755              LSR.L   #6,D1
0000207C  0281 00000007           1756              ANDI.L  #$7,D1
00002082  0C01 0000               1757              CMPI.B  #0,D1   * Dn
00002086  6700 0082               1758              BEQ     D_MODE000
0000208A  0C01 0002               1759              CMPI.B  #2,D1   * (An)
0000208E  6700 00C2               1760              BEQ     D_MODE010
00002092  0C01 0003               1761              CMPI.B  #3,D1   * (An)+
00002096  6700 011A               1762              BEQ     D_MODE011
0000209A  0C01 0004               1763              CMPI.B  #4,D1   * -(An)
0000209E  6700 0132               1764              BEQ     D_MODE100
000020A2  0C01 0007               1765              CMPI.B  #7,D1  * abs
000020A6  6700 017C               1766              BEQ     D_MODE111 
000020AA  4E75                    1767              RTS
000020AC                          1768  
000020AC                          1769  *---------------------------------------------------------------------------*
000020AC                          1770  * SRC_MODE: decode and display source mode (bit 5 - 3)
000020AC                          1771  *---------------------------------------------------------------------------*  
000020AC                          1772  SRC_MODE    
000020AC                          1773              * clear registers to store temp data
000020AC  4280                    1774              CLR.L   D0                      
000020AE  4281                    1775              CLR.L   D1                      
000020B0  207C 00000000           1776              MOVEA.L #0, A0                  
000020B6  227C 00000000           1777              MOVEA.L #0, A1                  
000020BC  2205                    1778              MOVE.L  D5,D1
000020BE  E489                    1779              LSR.L   #2,D1
000020C0  0281 0000000E           1780              ANDI.L  #$E,D1
000020C6                          1781              
000020C6  0C01 0000               1782              CMPI.B  #0,D1   * Dn
000020CA  6700 002A               1783              BEQ     MODE000
000020CE  0C01 0002               1784              CMPI.B  #2,D1   * An 
000020D2  6700 004A               1785              BEQ     MODE001
000020D6  0C01 0004               1786              CMPI.B  #4,D1   * (An)
000020DA  6700 0056               1787              BEQ     MODE010
000020DE  0C01 0006               1788              CMPI.B  #6,D1   * (An)+
000020E2  6700 008E               1789              BEQ     MODE011
000020E6  0C01 0008               1790              CMPI.B  #8,D1   * -(An)
000020EA  6700 00A6               1791              BEQ     MODE100
000020EE  0C01 000F               1792              CMPI.B  #15,D1  * abs/immediate
000020F2  6700 00FE               1793              BEQ     MODE111 
000020F6                          1794        
000020F6                          1795  *---------------------------------------------------------------------------*
000020F6                          1796  * MODE000: decode and display source mode Dn
000020F6                          1797  *---------------------------------------------------------------------------*           
000020F6                          1798  MODE000     *Dn
000020F6  43F9 00003618           1799              LEA     DISP_D,A1
000020FC  103C 000E               1800              MOVE.B  #14,D0
00002100  4E4F                    1801              TRAP    #15
00002102  4EB9 00002394           1802              JSR     SRC_REGISTER
00002108  4E75                    1803              RTS
0000210A                          1804  
0000210A                          1805  *---------------------------------------------------------------------------*
0000210A                          1806  * D_MODE000: decode and display dest mode Dn
0000210A                          1807  *---------------------------------------------------------------------------*
0000210A                          1808  D_MODE000     *Dn
0000210A  43F9 00003618           1809              LEA     DISP_D,A1
00002110  103C 000E               1810              MOVE.B  #14,D0
00002114  4E4F                    1811              TRAP    #15
00002116  4EB9 00002338           1812              JSR     DEST_REGISTER
0000211C  4E75                    1813              RTS
0000211E                          1814  
0000211E                          1815  *---------------------------------------------------------------------------*
0000211E                          1816  * MODE001: decode and display source mode An
0000211E                          1817  *---------------------------------------------------------------------------* 
0000211E                          1818  MODE001 *An
0000211E  43F9 0000361D           1819              LEA     DISP_A,A1
00002124  103C 000E               1820              MOVE.B  #14,D0
00002128  4E4F                    1821              TRAP    #15
0000212A  4EB9 00002394           1822              JSR     SRC_REGISTER
00002130                          1823          
00002130  4E75                    1824              RTS
00002132                          1825  
00002132                          1826  *---------------------------------------------------------------------------*
00002132                          1827  * MODE010: decode and display source mode (An)
00002132                          1828  *---------------------------------------------------------------------------*    
00002132                          1829  MODE010 *(An)
00002132  43F9 00003629           1830              LEA     DISP_AOP,A1  *display (A
00002138  103C 000E               1831              MOVE.B  #14,D0
0000213C  4E4F                    1832              TRAP    #15
0000213E                          1833  
0000213E  4EB9 00002394           1834              JSR     SRC_REGISTER * display register
00002144                          1835  
00002144  43F9 00003627           1836              LEA     DISP_CP,A1   *display )
0000214A  103C 000E               1837              MOVE.B  #14,D0
0000214E  4E4F                    1838              TRAP    #15
00002150                          1839              
00002150  4E75                    1840              RTS
00002152                          1841  
00002152                          1842  *---------------------------------------------------------------------------*
00002152                          1843  * D_MODE010: decode and display dest mode (An)
00002152                          1844  *---------------------------------------------------------------------------*
00002152                          1845  D_MODE010 *(An)
00002152  43F9 00003629           1846              LEA     DISP_AOP,A1  *display (A
00002158  103C 000E               1847              MOVE.B  #14,D0
0000215C  4E4F                    1848              TRAP    #15
0000215E                          1849     
0000215E  4EB9 00002338           1850              JSR     DEST_REGISTER * display register
00002164                          1851  
00002164  43F9 00003627           1852              LEA     DISP_CP,A1   *display )
0000216A  103C 000E               1853              MOVE.B  #14,D0
0000216E  4E4F                    1854              TRAP    #15
00002170                          1855              
00002170  4E75                    1856              RTS
00002172                          1857  
00002172                          1858  *---------------------------------------------------------------------------*
00002172                          1859  * MODE011: decode and display source mode (An)+
00002172                          1860  *---------------------------------------------------------------------------*
00002172                          1861  MODE011 *(An)+
00002172  43F9 00003629           1862              LEA     DISP_AOP,A1      *display (A
00002178  103C 000E               1863              MOVE.B  #14,D0
0000217C  4E4F                    1864              TRAP    #15
0000217E                          1865              
0000217E  4EB9 00002394           1866              JSR     SRC_REGISTER    * display register
00002184                          1867  
00002184  43F9 00003636           1868              LEA     DISP_POST,A1    *display )+
0000218A  103C 000E               1869              MOVE.B  #14,D0
0000218E  4E4F                    1870              TRAP    #15
00002190                          1871              
00002190  4E75                    1872              RTS
00002192                          1873              
00002192                          1874  *---------------------------------------------------------------------------*
00002192                          1875  * MODE100: decode and display source mode -(An)
00002192                          1876  *---------------------------------------------------------------------------*
00002192                          1877  MODE100 *-(An)
00002192  43F9 0000362F           1878              LEA     DISP_PRE,A1    *display -(A
00002198  103C 000E               1879              MOVE.B  #14,D0
0000219C  4E4F                    1880              TRAP    #15
0000219E                          1881  
0000219E  4EB9 00002394           1882              JSR     SRC_REGISTER    *display register
000021A4                          1883  
000021A4  43F9 00003627           1884              LEA     DISP_CP,A1   *display )
000021AA  103C 000E               1885              MOVE.B  #14,D0
000021AE  4E4F                    1886              TRAP    #15
000021B0                          1887              
000021B0  4E75                    1888              RTS
000021B2                          1889  
000021B2                          1890  *---------------------------------------------------------------------------*
000021B2                          1891  * D_MODE011: decode and display dest mode (An)+
000021B2                          1892  *---------------------------------------------------------------------------*
000021B2                          1893  D_MODE011 *(An)+
000021B2  43F9 00003629           1894              LEA     DISP_AOP,A1      *display (A
000021B8  103C 000E               1895              MOVE.B  #14,D0
000021BC  4E4F                    1896              TRAP    #15
000021BE                          1897  
000021BE  4EB9 00002338           1898              JSR     DEST_REGISTER    * display register
000021C4                          1899  
000021C4  43F9 00003636           1900              LEA     DISP_POST,A1    *display )+
000021CA  103C 000E               1901              MOVE.B  #14,D0
000021CE  4E4F                    1902              TRAP    #15
000021D0                          1903              
000021D0  4E75                    1904              RTS
000021D2                          1905              
000021D2                          1906  *---------------------------------------------------------------------------*
000021D2                          1907  * D_MODE100: decode and display dest mode -(An)
000021D2                          1908  *---------------------------------------------------------------------------*            
000021D2                          1909  D_MODE100 *-(An)
000021D2  43F9 0000362F           1910              LEA     DISP_PRE,A1    *display -(A
000021D8  103C 000E               1911              MOVE.B  #14,D0
000021DC  4E4F                    1912              TRAP    #15
000021DE                          1913              
000021DE  4EB9 00002338           1914              JSR     DEST_REGISTER    *display register
000021E4                          1915  
000021E4  43F9 00003627           1916              LEA     DISP_CP,A1   *display )
000021EA  103C 000E               1917              MOVE.B  #14,D0
000021EE  4E4F                    1918              TRAP    #15
000021F0                          1919              
000021F0  4E75                    1920              RTS
000021F2                          1921  
000021F2                          1922  *---------------------------------------------------------------------------*
000021F2                          1923  * MODE111: decode and display source mode absolute/immediate
000021F2                          1924  *---------------------------------------------------------------------------*
000021F2                          1925  MODE111     * abs/immediate
000021F2                          1926              * clear registers to store temp data
000021F2  4280                    1927              CLR.L   D0                      
000021F4  4281                    1928              CLR.L   D1                      
000021F6  207C 00000000           1929              MOVEA.L #0, A0                  
000021FC  227C 00000000           1930              MOVEA.L #0, A1                  
00002202  2205                    1931              MOVE.L  D5,D1
00002204                          1932              
00002204                          1933              * retrieve source register for MODE 111
00002204  E389                    1934              LSL.L   #1,D1   * shift the bits to left by 1
00002206  0281 0000000E           1935              ANDI.L  #$E,D1  * mask the first 4 bits 
0000220C  0C01 0000               1936              CMPI.B  #0, D1  * if it's 0000, absolute word address
00002210  6700 003E               1937              BEQ     WORDMODE
00002214  0C01 0002               1938              CMPI.B  #2, D1  * if it's 0010, absolute long address
00002218  6700 0062               1939              BEQ     LONGMODE
0000221C  0C01 0008               1940              CMPI.B  #8, D1  * if it's 1000, immediate data
00002220  6700 0086               1941              BEQ     IMMEDIATE
00002224                          1942       
00002224                          1943  *---------------------------------------------------------------------------*
00002224                          1944  * D_MODE111: decode and display dest mode absolute/immediate
00002224                          1945  *---------------------------------------------------------------------------*           
00002224                          1946  D_MODE111   * abs
00002224                          1947              * clear registers to store temp data
00002224  4280                    1948              CLR.L   D0                      
00002226  4281                    1949              CLR.L   D1                      
00002228  207C 00000000           1950              MOVEA.L #0, A0                  
0000222E  227C 00000000           1951              MOVEA.L #0, A1                  
00002234  2205                    1952              MOVE.L  D5,D1
00002236                          1953              
00002236                          1954              * retrieve dest register for MODE 111
00002236  EC89                    1955              LSR.L   #6,D1   * shift the bits to right by 6
00002238  E689                    1956              LSR.L   #3,D1   * shift the bits to right by extra 3
0000223A  0201 0001               1957              ANDI.B  #1,D1   * mask the first 2 bits 
0000223E  0C01 0000               1958              CMPI.B  #0, D1  * if it's 000, absolute word address
00002242  6700 000C               1959              BEQ     WORDMODE
00002246  0C01 0001               1960              CMPI.B  #1, D1  * if it's 001, absolute long address
0000224A  6700 0030               1961              BEQ     LONGMODE
0000224E                          1962              *JSR     OP_DATA *not sure..
0000224E  4E75                    1963              RTS
00002250                          1964  
00002250                          1965  
00002250                          1966  *---------------------------------------------------------------------------*
00002250                          1967  * WORDMODE: absolute word address
00002250                          1968  *---------------------------------------------------------------------------*
00002250  43F9 00003613           1969  WORDMODE    LEA     DISP_HEX,A1
00002256  103C 000E               1970              MOVE.B  #14,D0
0000225A  4E4F                    1971              TRAP    #15
0000225C                          1972              
0000225C  4285                    1973              CLR.L   D5
0000225E  3A1D                    1974              MOVE.W  (A5)+,D5
00002260                          1975              
00002260  43F9 000032F1           1976              LEA     TMPOUTPUT,A1
00002266  2205                    1977              MOVE.L  D5,D1
00002268  7404                    1978              MOVE.L  #4,D2       *move word size 4
0000226A  4EB8 11EA               1979              JSR     HEX2ASCII
0000226E  43F9 000032F1           1980              LEA     TMPOUTPUT,A1
00002274  103C 000E               1981              MOVE.B  #14,D0
00002278  4E4F                    1982              TRAP    #15
0000227A                          1983              
0000227A  4E75                    1984              RTS
0000227C                          1985  
0000227C                          1986  *---------------------------------------------------------------------------*
0000227C                          1987  * LONGMODE: absolute long address
0000227C                          1988  *---------------------------------------------------------------------------*
0000227C  43F9 00003613           1989  LONGMODE    LEA     DISP_HEX,A1
00002282  103C 000E               1990              MOVE.B  #14,D0
00002286  4E4F                    1991              TRAP    #15
00002288                          1992              
00002288  4285                    1993              CLR.L   D5
0000228A  2A1D                    1994              MOVE.L  (A5)+,D5
0000228C                          1995              
0000228C  43F9 000032F1           1996              LEA     TMPOUTPUT,A1
00002292  2205                    1997              MOVE.L  D5,D1
00002294  7408                    1998              MOVE.L  #8,D2           *move longword size 8
00002296  4EB8 11EA               1999              JSR     HEX2ASCII
0000229A  43F9 000032F1           2000              LEA     TMPOUTPUT,A1
000022A0  103C 000E               2001              MOVE.B  #14,D0
000022A4  4E4F                    2002              TRAP    #15
000022A6                          2003              
000022A6  4E75                    2004              RTS
000022A8                          2005  
000022A8                          2006  
000022A8                          2007  *---------------------------------------------------------------------------*
000022A8                          2008  * IMMEDIATE: immediate address
000022A8                          2009  *---------------------------------------------------------------------------*
000022A8  43F9 00003639           2010  IMMEDIATE   LEA     DISP_LB,A1
000022AE  103C 000E               2011              MOVE.B  #14,D0
000022B2  4E4F                    2012              TRAP    #15
000022B4  43F9 00003613           2013              LEA     DISP_HEX,A1
000022BA  103C 000E               2014              MOVE.B  #14,D0
000022BE  4E4F                    2015              TRAP    #15
000022C0                          2016              
000022C0                          2017              * check for size
000022C0  0C04 0000               2018              CMPI.B  #0,D4
000022C4  6700 0012               2019              BEQ     IMMD_B
000022C8  0C04 0001               2020              CMPI.B  #1,D4
000022CC  6700 002A               2021              BEQ     IMMD_W
000022D0  0C04 0002               2022              CMPI.B  #2,D4
000022D4  6700 0042               2023              BEQ     IMMD_L
000022D8                          2024  
000022D8                          2025  IMMD_B
000022D8  4285                    2026              CLR.L   D5
000022DA  3A1D                    2027              MOVE.W  (A5)+,D5
000022DC                          2028              
000022DC  43F9 000032F1           2029              LEA     TMPOUTPUT,A1
000022E2  2205                    2030              MOVE.L  D5,D1
000022E4  7402                    2031              MOVE.L  #2,D2
000022E6  4EB8 11EA               2032              JSR     HEX2ASCII
000022EA  43F9 000032F1           2033              LEA     TMPOUTPUT,A1
000022F0  103C 000E               2034              MOVE.B  #14,D0
000022F4  4E4F                    2035              TRAP    #15
000022F6  4E75                    2036              RTS
000022F8                          2037              
000022F8                          2038  IMMD_W
000022F8  4285                    2039              CLR.L   D5
000022FA  3A1D                    2040              MOVE.W  (A5)+,D5
000022FC                          2041              
000022FC  43F9 000032F1           2042              LEA     TMPOUTPUT,A1
00002302  2205                    2043              MOVE.L  D5,D1
00002304  7404                    2044              MOVE.L  #4,D2
00002306  4EB8 11EA               2045              JSR     HEX2ASCII
0000230A  43F9 000032F1           2046              LEA     TMPOUTPUT,A1
00002310  103C 000E               2047              MOVE.B  #14,D0
00002314  4E4F                    2048              TRAP    #15
00002316  4E75                    2049              RTS
00002318                          2050              
00002318                          2051  
00002318                          2052  IMMD_L
00002318  4285                    2053              CLR.L   D5
0000231A  3A1D                    2054              MOVE.W  (A5)+,D5
0000231C                          2055              
0000231C  43F9 000032F1           2056              LEA     TMPOUTPUT,A1
00002322  2205                    2057              MOVE.L  D5,D1
00002324  7408                    2058              MOVE.L  #8,D2
00002326  4EB8 11EA               2059              JSR     HEX2ASCII
0000232A  43F9 000032F1           2060              LEA     TMPOUTPUT,A1
00002330  103C 000E               2061              MOVE.B  #14,D0
00002334  4E4F                    2062              TRAP    #15
00002336  4E75                    2063              RTS
00002338                          2064  
00002338                          2065  
00002338                          2066  *---------------------------------------------------------------------------*
00002338                          2067  * DEST_REGISTER: decode and display destination register (bit 11 - 9)
00002338                          2068  *---------------------------------------------------------------------------*
00002338                          2069  DEST_REGISTER
00002338                          2070              * clear registers to store temp data
00002338  4280                    2071              CLR.L   D0                      
0000233A  4281                    2072              CLR.L   D1                      
0000233C  207C 00000000           2073              MOVEA.L #0, A0                  
00002342  227C 00000000           2074              MOVEA.L #0, A1 
00002348                          2075              
00002348  2205                    2076              MOVE.L  D5,D1
0000234A  EC89                    2077              LSR.L   #6,D1
0000234C  E689                    2078              LSR.L   #3,D1
0000234E  0281 00000007           2079              ANDI.L  #7,D1
00002354                          2080              
00002354  0C01 0000               2081              CMPI.B  #0,D1
00002358  6700 0092               2082              BEQ     REG_0
0000235C  0C01 0001               2083              CMPI.B  #1,D1
00002360  6700 0098               2084              BEQ     REG_1
00002364  0C01 0002               2085              CMPI.B  #2,D1
00002368  6700 009E               2086              BEQ     REG_2
0000236C  0C01 0003               2087              CMPI.B  #3,D1
00002370  6700 00A4               2088              BEQ     REG_3
00002374  0C01 0004               2089              CMPI.B  #4,D1
00002378  6700 00AA               2090              BEQ     REG_4
0000237C  0C01 0005               2091              CMPI.B  #5,D1
00002380  6700 00B0               2092              BEQ     REG_5
00002384  0C01 0006               2093              CMPI.B  #6,D1
00002388  6700 00B6               2094              BEQ     REG_6
0000238C  0C01 0007               2095              CMPI.B  #7,D1
00002390  6700 00BC               2096              BEQ     REG_7
00002394                          2097  
00002394                          2098  *---------------------------------------------------------------------------*
00002394                          2099  * SRC_REGISTER: decode and display source register (bit 2 - 0)
00002394                          2100  *---------------------------------------------------------------------------*           
00002394                          2101  SRC_REGISTER 
00002394                          2102              * clear registers to store temp data
00002394  4280                    2103              CLR.L   D0                      
00002396  4281                    2104              CLR.L   D1                      
00002398  207C 00000000           2105              MOVEA.L #0, A0                  
0000239E  227C 00000000           2106              MOVEA.L #0, A1                  
000023A4                          2107              
000023A4  2205                    2108              MOVE.L  D5,D1   * temp store the processing data
000023A6  0281 00000007           2109              ANDI.L  #7,D1   * mask the first 4 bits with 0111
000023AC                          2110              
000023AC  0C01 0000               2111              CMPI.B  #0,D1
000023B0  6700 003A               2112              BEQ     REG_0
000023B4  0C01 0001               2113              CMPI.B  #1,D1
000023B8  6700 0040               2114              BEQ     REG_1
000023BC  0C01 0002               2115              CMPI.B  #2,D1
000023C0  6700 0046               2116              BEQ     REG_2
000023C4  0C01 0003               2117              CMPI.B  #3,D1
000023C8  6700 004C               2118              BEQ     REG_3
000023CC  0C01 0004               2119              CMPI.B  #4,D1
000023D0  6700 0052               2120              BEQ     REG_4
000023D4  0C01 0005               2121              CMPI.B  #5,D1
000023D8  6700 0058               2122              BEQ     REG_5
000023DC  0C01 0006               2123              CMPI.B  #6,D1
000023E0  6700 005E               2124              BEQ     REG_6
000023E4  0C01 0007               2125              CMPI.B  #7,D1
000023E8  6700 0064               2126              BEQ     REG_7
000023EC                          2127  
000023EC                          2128  *---------------------------------------------------------------------------*
000023EC                          2129  * REG_0 ~ REG_7: display register 0 to 7
000023EC                          2130  *---------------------------------------------------------------------------*
000023EC  43F9 0000363E           2131  REG_0       LEA     DISP_0,A1
000023F2  103C 000E               2132              MOVE.B  #14,D0
000023F6  4E4F                    2133              TRAP    #15
000023F8  4E75                    2134              RTS
000023FA                          2135              
000023FA  43F9 00003640           2136  REG_1       LEA     DISP_1,A1
00002400  103C 000E               2137              MOVE.B  #14,D0
00002404  4E4F                    2138              TRAP    #15
00002406  4E75                    2139              RTS
00002408                          2140              
00002408                          2141  
00002408  43F9 00003642           2142  REG_2       LEA     DISP_2,A1
0000240E  103C 000E               2143              MOVE.B  #14,D0
00002412  4E4F                    2144              TRAP    #15
00002414  4E75                    2145              RTS
00002416                          2146            
00002416  43F9 00003644           2147  REG_3       LEA     DISP_3,A1
0000241C  103C 000E               2148              MOVE.B  #14,D0
00002420  4E4F                    2149              TRAP    #15
00002422  4E75                    2150              RTS
00002424                          2151              
00002424  43F9 00003646           2152  REG_4       LEA     DISP_4,A1
0000242A  103C 000E               2153              MOVE.B  #14,D0
0000242E  4E4F                    2154              TRAP    #15
00002430  4E75                    2155              RTS
00002432                          2156              
00002432  43F9 00003648           2157  REG_5       LEA     DISP_5,A1
00002438  103C 000E               2158              MOVE.B  #14,D0
0000243C  4E4F                    2159              TRAP    #15
0000243E  4E75                    2160              RTS
00002440                          2161              
00002440  43F9 0000364A           2162  REG_6       LEA     DISP_6,A1
00002446  103C 000E               2163              MOVE.B  #14,D0
0000244A  4E4F                    2164              TRAP    #15
0000244C  4E75                    2165              RTS
0000244E                          2166              
0000244E  43F9 0000364C           2167  REG_7       LEA     DISP_7,A1
00002454  103C 000E               2168              MOVE.B  #14,D0
00002458  4E4F                    2169              TRAP    #15
0000245A  4E75                    2170              RTS
0000245C                          2171              
0000245C                          2172  *---------------------------------------------------------------------------*
0000245C                          2173  * REPEAT : Ask user whether they wish to run the program again
0000245C                          2174  *---------------------------------------------------------------------------*           
0000245C  4246                    2175  REPEAT      CLR.W   D6                      * Reset D6 (Loop Count)
0000245E  43F9 00003117           2176              LEA     REPEATMSG,A1
00002464  103C 000E               2177              MOVE.B  #14,D0
00002468  4E4F                    2178              TRAP    #15
0000246A                          2179              
0000246A  43F9 000032A1           2180              LEA     TMPINPUT,A1             * allocate space to temp store user input
00002470  103C 0002               2181              MOVE.B  #2,D0
00002474  4E4F                    2182              TRAP    #15
00002476                          2183  
00002476  0C01 0001               2184              CMPI.B  #1,D1                   * check for length of user input
0000247A  66E0                    2185              BNE     REPEAT                  * return to the beginning of the function if unequal
0000247C                          2186              
0000247C  0C11 0059               2187              CMPI.B  #$59,(A1)               * compare the input with Y    
00002480  6700 EB88               2188              BEQ     PROGLP                  * repeat the program
00002484                          2189              
00002484  0C11 0079               2190              CMPI.B  #$79,(A1)               * compare the input with y    
00002488  6700 EB80               2191              BEQ     PROGLP                  * repeat the program
0000248C                          2192              
0000248C  0C11 004E               2193              CMPI.B  #$4E,(A1)               * compare the input with N    
00002490  6700 0918               2194              BEQ     TERMINATE               * finish program
00002494                          2195              
00002494  0C11 006E               2196              CMPI.B  #$6E,(A1)               * compare the input with n    
00002498  6700 0910               2197              BEQ     TERMINATE               * finish program
0000249C                          2198              
0000249C  60BE                    2199              BRA     REPEAT                  * invalid input/repeat the function
0000249E                          2200  
0000249E                          2201  *---------------------------------------------------------------------------*
0000249E                          2202  * EA DECODING INTERFACE
0000249E                          2203  * [A0] - RESERVED FOR USE
0000249E                          2204  * [D2] - RESERVED FOR USE
0000249E                          2205  * RETURNS - ERROR FLAG IF FAILED TO PUSH SRC EA INTO STACK
0000249E                          2206  *---------------------------------------------------------------------------*
0000249E                          2207  GET_EA_EA_SRC
0000249E                          2208      *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
0000249E                          2209      
0000249E                          2210      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
0000249E  2405                    2211      MOVE.L  D5,D2                           * CLEAN COPY TO D2
000024A0  E68A                    2212      LSR.L   #3,D2                           * [D2] Temporarily used D2 for shifting bits
000024A2  23C2 00003664           2213      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
000024A8  7407                    2214      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
000024AA  C5B9 00003664           2215      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
000024B0                          2216                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
000024B0                          2217      
000024B0                          2218      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
000024B0                          2219      *DESTINATION REGISTER FORMAT STANDARD         *
000024B0                          2220      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
000024B0                          2221      *WHEN BIT = 0(VALID ADDRESS MODE)             *
000024B0                          2222      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
000024B0                          2223      *0 - Dn                                       *
000024B0                          2224      *1 - An                                       *
000024B0                          2225      *2 - (An)                                     *
000024B0                          2226      *3 - (An)+                                    *
000024B0                          2227      *4 - -(An)                                    *
000024B0                          2228      *5 - (XXX).W                                  *
000024B0                          2229      *6 - (XXX).L                                  *
000024B0                          2230      *7 - #<data>                                  *
000024B0                          2231      ***********************************************
000024B0                          2232      
000024B0                          2233      *** Check if source ...  <ea> = Dn
000024B0                          2234  CHECK0    
000024B0  41F9 00003654           2235            LEA     TEMP_REGISTER_FORMAT,A0
000024B6  1439 00003653           2236            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000024BC  1082                    2237            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000024BE  0239 0001 00003654      2238            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
000024C6  0C39 0001 00003654      2239            CMPI.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
000024CE  6700 006A               2240            BEQ     CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
000024D2  0CB9 00000000 00003664  2241            CMPI.L     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn) - COMPARE MODES TO SEE IF IT IS THIS MODE
000024DC  6600 005C               2242            BNE     CHECK1
000024E0                          2243            
000024E0                          2244            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000024E0  163C 0020               2245            MOVE.B    #' ',D3
000024E4  6100 0846               2246            BSR       PUSH_STACK
000024E8  163C 0044               2247            MOVE.B    #'D',D3
000024EC  6100 083E               2248            BSR       PUSH_STACK
000024F0                          2249  
000024F0                          2250            *FIND REGISTER NUMBER END LOCATION*  
000024F0  13F9 00003656 0000365C  2251            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
000024FA  0239 000F 0000365C      2252            AND.B   #$0F,VAR_BYTE_END
00002502                          2253            
00002502                          2254            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002502  23C5 00003660           2255            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002508  1439 0000365C           2256            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
0000250E                          2257            
0000250E                          2258            *INTITIALIZE FOR BIT SHIFTING
0000250E  41F9 00003660           2259            LEA     VAR_TEMP_CLEANCOPY,A0
00002514  2639 00003660           2260            MOVE.L  VAR_TEMP_CLEANCOPY,D3
0000251A                          2261  LOOP_SHIFTING
0000251A  0C02 0000               2262            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000251E  6700 0008               2263            BEQ     MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00002522  E24B                    2264            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002524  5302                    2265            SUB.B   #1,D2                     *DECREMENT COUNTER
00002526  60F2                    2266            BRA     LOOP_SHIFTING             *CONTINUE SHIFTING
00002528                          2267  MASKING_NEXT
00002528  C6BC 00000007           2268            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
0000252E  0603 0030               2269            ADD.B   #$30,D3                   *CONVERT TO CHAR
00002532  6100 07F8               2270            BSR     PUSH_STACK                *PUSH TO STACK
00002536                          2271            
00002536  6000 038C               2272            BRA     GET_SRC_SUCCESS           *RETURN          
0000253A                          2273            
0000253A                          2274            
0000253A                          2275            *** Check if source ...  <ea> = An
0000253A  41F9 00003654           2276  CHECK1    LEA     TEMP_REGISTER_FORMAT,A0
00002540  1439 00003653           2277            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002546  1082                    2278            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002548  0239 0002 00003654      2279            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
00002550  0C39 0002 00003654      2280            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
00002558  6700 006A               2281            BEQ     CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
0000255C  0CB9 00000001 00003664  2282            CMPI.L  #1,VAR_LONG_ADDRESS_MODE_CHECK                      * An - COMPARE MODES TO SEE IF IT IS THIS MODE
00002566  6600 005C               2283            BNE     CHECK2
0000256A                          2284            
0000256A                          2285            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
0000256A  163C 0020               2286            MOVE.B    #' ',D3
0000256E  6100 07BC               2287            BSR       PUSH_STACK
00002572  163C 0041               2288            MOVE.B    #'A',D3
00002576  6100 07B4               2289            BSR       PUSH_STACK
0000257A                          2290  
0000257A                          2291            
0000257A                          2292            *FIND REGISTER NUMBER END LOCATION*  
0000257A  13F9 00003656 0000365C  2293            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002584  0239 000F 0000365C      2294            AND.B   #$0F,VAR_BYTE_END
0000258C                          2295            
0000258C                          2296            *GET INDEX OF THE END OF SRC REGISTER NUMBER
0000258C  23C5 00003660           2297            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002592  1439 0000365C           2298            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
00002598                          2299            
00002598                          2300            *INTITIALIZE FOR BIT SHIFTING
00002598  41F9 00003660           2301            LEA     VAR_TEMP_CLEANCOPY,A0
0000259E  2639 00003660           2302            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000025A4                          2303  LOOP_SHIFTING1
000025A4  0C02 0000               2304            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000025A8  6700 0008               2305            BEQ     MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
000025AC  E24B                    2306            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000025AE  5302                    2307            SUB.B   #1,D2                     *DECREMENT COUNTER
000025B0  60F2                    2308            BRA     LOOP_SHIFTING1             *CONTINUE SHIFTING
000025B2                          2309  MASKING_NEXT1
000025B2  C6BC 00000007           2310            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000025B8  0603 0030               2311            ADD.B   #$30,D3                   *CONVERT TO CHAR
000025BC  6100 076E               2312            BSR     PUSH_STACK                *PUSH TO STACK
000025C0                          2313            
000025C0  6000 0302               2314            BRA     GET_SRC_SUCCESS                   *RETURN 
000025C4                          2315            
000025C4                          2316            
000025C4                          2317            
000025C4                          2318            
000025C4                          2319            *** Check if source ...  <ea> = (An)       
000025C4  41F9 00003654           2320  CHECK2    LEA     TEMP_REGISTER_FORMAT,A0
000025CA  1439 00003653           2321            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000025D0  1082                    2322            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000025D2  0239 0004 00003654      2323            ANDI.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
000025DA  0C39 0004 00003654      2324            CMPI.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
000025E2  6700 007A               2325            BEQ     CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
000025E6  0CB9 00000002 00003664  2326            CMPI.L   #2,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)  COMPARE MODES TO SEE IF IT IS THIS MODE                                                                *change: checkx++*
000025F0  6600 006C               2327            BNE     CHECK3
000025F4                          2328            
000025F4                          2329            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
000025F4  163C 0020               2330            MOVE.B    #' ',D3
000025F8  6100 0732               2331            BSR       PUSH_STACK
000025FC  163C 0028               2332            MOVE.B    #'(',D3
00002600  6100 072A               2333            BSR       PUSH_STACK
00002604  163C 0041               2334            MOVE.B    #'A',D3
00002608  6100 0722               2335            BSR       PUSH_STACK
0000260C                          2336  
0000260C                          2337            
0000260C                          2338            *FIND REGISTER NUMBER END LOCATION*  
0000260C  13F9 00003656 0000365C  2339            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002616  0239 000F 0000365C      2340            AND.B   #$0F,VAR_BYTE_END
0000261E                          2341            
0000261E                          2342            *GET INDEX OF THE END OF SRC REGISTER NUMBER
0000261E  23C5 00003660           2343            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002624  1439 0000365C           2344            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
0000262A                          2345            
0000262A                          2346            *INTITIALIZE FOR BIT SHIFTING
0000262A  41F9 00003660           2347            LEA     VAR_TEMP_CLEANCOPY,A0
00002630  2639 00003660           2348            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002636                          2349  LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
00002636  0C02 0000               2350            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000263A  6700 0008               2351            BEQ     MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
0000263E  E24B                    2352            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002640  5302                    2353            SUB.B   #1,D2                     *DECREMENT COUNTER
00002642  60F2                    2354            BRA     LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
00002644                          2355  MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
00002644  0283 00000007           2356            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
0000264A  0603 0030               2357            ADDI.B   #$30,D3                   *CONVERT TO CHAR
0000264E  6100 06DC               2358            BSR     PUSH_STACK                *PUSH TO STACK
00002652                          2359            
00002652  163C 0029               2360            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002656  6100 06D4               2361            BSR       PUSH_STACK
0000265A                          2362            
0000265A  6000 0268               2363            BRA     GET_SRC_SUCCESS                   *RETURN 
0000265E                          2364  
0000265E                          2365            
0000265E                          2366            
0000265E                          2367                      
0000265E                          2368  *** Check if source ...  <ea> = (An)+       
0000265E  41F9 00003654           2369  CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
00002664  1439 00003653           2370            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000266A  1082                    2371            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000266C  0239 0008 00003654      2372            ANDI.B  #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
00002674  0C39 0008 00003654      2373            CMPI.B  #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
0000267C  6700 0082               2374            BEQ     CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002680  0CB9 00000003 00003664  2375            CMPI.L  #3,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)+ - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
0000268A  6600 0074               2376            BNE     CHECK4
0000268E                          2377            
0000268E                          2378            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
0000268E  163C 0020               2379            MOVE.B    #' ',D3
00002692  6100 0698               2380            BSR       PUSH_STACK
00002696  163C 0028               2381            MOVE.B    #'(',D3
0000269A  6100 0690               2382            BSR       PUSH_STACK
0000269E  163C 0041               2383            MOVE.B    #'A',D3
000026A2  6100 0688               2384            BSR       PUSH_STACK
000026A6                          2385  
000026A6                          2386            
000026A6                          2387            *FIND REGISTER NUMBER END LOCATION*  
000026A6  13F9 00003656 0000365C  2388            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
000026B0  0239 000F 0000365C      2389            ANDI.B   #$0F,VAR_BYTE_END
000026B8                          2390            
000026B8                          2391            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000026B8  23C5 00003660           2392            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000026BE  1439 0000365C           2393            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000026C4                          2394            
000026C4                          2395            *INTITIALIZE FOR BIT SHIFTING
000026C4  41F9 00003660           2396            LEA     VAR_TEMP_CLEANCOPY,A0
000026CA  2639 00003660           2397            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000026D0                          2398            
000026D0                          2399  LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
000026D0  0C02 0000               2400            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000026D4  6700 0008               2401            BEQ     MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
000026D8  E24B                    2402            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000026DA  5302                    2403            SUBI.B   #1,D2                     *DECREMENT COUNTER
000026DC  60F2                    2404            BRA     LOOP_SHIFTING3            *CONTINUE SHIFTING 
000026DE                          2405                                               *change: NAME OF LABEL*
000026DE                          2406  MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
000026DE  0283 00000007           2407            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000026E4  0603 0030               2408            ADDI.B   #$30,D3                   *CONVERT TO CHAR
000026E8  6100 0642               2409            BSR     PUSH_STACK                *PUSH TO STACK
000026EC                          2410            
000026EC  163C 0029               2411            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
000026F0  6100 063A               2412            BSR       PUSH_STACK
000026F4  163C 002B               2413            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
000026F8  6100 0632               2414            BSR       PUSH_STACK
000026FC                          2415            
000026FC  6000 01C6               2416            BRA       GET_SRC_SUCCESS                   *RETURN 
00002700                          2417  
00002700                          2418            
00002700                          2419            
00002700                          2420                      
00002700                          2421            *** Check if source ...  <ea> = -(An)       
00002700  41F9 00003654           2422  CHECK4    LEA     TEMP_REGISTER_FORMAT,A0
00002706  1439 00003653           2423            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000270C  1082                    2424            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000270E  0239 0010 00003654      2425            ANDI.B  #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
00002716  0C39 0010 00003654      2426            CMPI.B  #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
0000271E  6700 0082               2427            BEQ     CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002722  0CB9 00000004 00003664  2428            CMPI.L  #4,VAR_LONG_ADDRESS_MODE_CHECK                      * -(An) - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
0000272C  6600 0074               2429            BNE     CHECK7
00002730                          2430            
00002730                          2431            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002730  163C 0020               2432            MOVE.B    #' ',D3
00002734  6100 05F6               2433            BSR       PUSH_STACK
00002738  163C 002D               2434            MOVE.B    #'-',D3
0000273C  6100 05EE               2435            BSR       PUSH_STACK
00002740  163C 0028               2436            MOVE.B    #'(',D3
00002744  6100 05E6               2437            BSR       PUSH_STACK
00002748  163C 0041               2438            MOVE.B    #'A',D3
0000274C  6100 05DE               2439            BSR       PUSH_STACK
00002750                          2440  
00002750                          2441            
00002750                          2442            *FIND REGISTER NUMBER END LOCATION*  
00002750  13F9 00003656 0000365C  2443            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
0000275A  0239 000F 0000365C      2444            AND.B   #$0F,VAR_BYTE_END
00002762                          2445            
00002762                          2446            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002762  23C5 00003660           2447            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002768  1439 0000365C           2448            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
0000276E                          2449            
0000276E                          2450            *INTITIALIZE FOR BIT SHIFTING
0000276E  41F9 00003660           2451            LEA     VAR_TEMP_CLEANCOPY,A0
00002774  2639 00003660           2452            MOVE.L  VAR_TEMP_CLEANCOPY,D3
0000277A                          2453            
0000277A                          2454  LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
0000277A  0C02 0000               2455            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000277E  6700 0008               2456            BEQ     MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002782  E24B                    2457            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002784  5302                    2458            SUBI.B   #1,D2                     *DECREMENT COUNTER
00002786  60F2                    2459            BRA     LOOP_SHIFTING4            *CONTINUE SHIFTING 
00002788                          2460                                               *change: NAME OF LABEL*
00002788                          2461  MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
00002788  0283 00000007           2462            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
0000278E  0603 0030               2463            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002792  6100 0598               2464            BSR     PUSH_STACK                *PUSH TO STACK
00002796                          2465            
00002796  163C 0029               2466            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
0000279A  6100 0590               2467            BSR       PUSH_STACK
0000279E                          2468            
0000279E  6000 0124               2469            BRA     GET_SRC_SUCCESS                   *RETURN
000027A2                          2470            
000027A2                          2471                      
000027A2                          2472            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
000027A2  0CB9 00000007 00003664  2473  CHECK7    CMPI.L  #7,VAR_LONG_ADDRESS_MODE_CHECK                      *IF (MODE != 111)
000027AC  6600 0112               2474            BNE     GET_SRC_FAILED                                      *THAN BRANCH TO UNCESSFULL SRC MODE READ
000027B0                          2475                   
000027B0                          2476            *NEXT: (MODE == 111) 
000027B0                          2477            *NOW: CHECK FOR SRC REGISTER 
000027B0                          2478                  *(000 = (xxx).W)
000027B0                          2479                  *(001 = (xxx).L)
000027B0                          2480                  *(010 = #<data>)
000027B0                          2481                  
000027B0                          2482            *FIND REGISTER NUMBER END LOCATION*  
000027B0  13F9 00003656 0000365C  2483            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
000027BA  0239 000F 0000365C      2484            AND.B   #$0F,VAR_BYTE_END
000027C2                          2485            
000027C2                          2486            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000027C2  23C5 00003660           2487            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000027C8  1439 0000365C           2488            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000027CE                          2489            
000027CE                          2490            *INTITIALIZE FOR BIT SHIFTING
000027CE  41F9 00003660           2491            LEA     VAR_TEMP_CLEANCOPY,A0
000027D4  2C39 00003660           2492            MOVE.L  VAR_TEMP_CLEANCOPY,D6
000027DA                          2493  SRC_LOOP_SHIFTING
000027DA  0C02 0000               2494            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000027DE  6700 0008               2495            BEQ     SRC_MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
000027E2  E24E                    2496            LSR     #1,D6                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000027E4  5302                    2497            SUB.B   #1,D2                     *DECREMENT COUNTER
000027E6  60F2                    2498            BRA     SRC_LOOP_SHIFTING             *CONTINUE SHIFTING
000027E8                          2499  SRC_MASKING_NEXT
000027E8  CCBC 00000007           2500            AND.L   #7,D6                     *MASK, ONLY NEED 0-2 BIT INDEXES 
000027EE                          2501           *D3 - REGISTER NUMBER NEEDED TO CHECK WHICH W/L/#<DATA>*
000027EE                          2502           
000027EE                          2503  CHECK_WORD  
000027EE  41F9 00003654           2504            LEA     TEMP_REGISTER_FORMAT,A0
000027F4  1439 00003653           2505            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000027FA  1082                    2506            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000027FC  0239 0020 00003654      2507            ANDI.B  #$20,TEMP_REGISTER_FORMAT                           * MASKS 0010 0000                                                     *change <SRC>*
00002804  0C39 0020 00003654      2508            CMPI.B  #$20,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0010 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
0000280C  6700 0026               2509            BEQ     CHECK_LONG                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00002810  0C06 0000               2510            CMPI.B  #0,D6                          
00002814  6600 001E               2511            BNE     CHECK_LONG 
00002818                          2512            
00002818                          2513            *IT IS A WORD AT THIS POINT*
00002818                          2514            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002818  163C 0020               2515            MOVE.B    #' ',D3
0000281C  6100 050E               2516            BSR       PUSH_STACK
00002820  163C 0024               2517            MOVE.B    #'$',D3
00002824  6100 0506               2518            BSR       PUSH_STACK
00002828  321D                    2519            MOVE.W    (A5)+,D1
0000282A  7404                    2520            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
0000282C  6100 E9FE               2521            BSR       HEX2ASCII2STACK
00002830  6000 0092               2522            BRA     GET_SRC_SUCCESS
00002834                          2523  
00002834                          2524  CHECK_LONG
00002834  41F9 00003654           2525            LEA     TEMP_REGISTER_FORMAT,A0
0000283A  1439 00003653           2526            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002840  1082                    2527            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002842  0239 0040 00003654      2528            ANDI.B  #$40,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
0000284A  0C39 0040 00003654      2529            CMPI.B  #$40,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002852  6700 0026               2530            BEQ     CHECK_IMMEDIATE                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00002856  0C06 0001               2531            CMPI.B  #1,D6                          
0000285A  6600 001E               2532            BNE     CHECK_IMMEDIATE  
0000285E                          2533  
0000285E                          2534            *IT IS A WORD AT THIS POINT*
0000285E                          2535            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
0000285E  163C 0020               2536            MOVE.B    #' ',D3
00002862  6100 04C8               2537            BSR       PUSH_STACK
00002866  163C 0024               2538            MOVE.B    #'$',D3
0000286A  6100 04C0               2539            BSR       PUSH_STACK
0000286E  321D                    2540            MOVE.W    (A5)+,D1
00002870  7404                    2541            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00002872  6100 E9B8               2542            BSR       HEX2ASCII2STACK
00002876  6000 004C               2543            BRA     GET_SRC_SUCCESS
0000287A                          2544            
0000287A                          2545  CHECK_IMMEDIATE
0000287A  41F9 00003654           2546            LEA     TEMP_REGISTER_FORMAT,A0
00002880  1439 00003653           2547            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002886  1082                    2548            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002888  0239 0080 00003654      2549            ANDI.B  #$80,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00002890  0C39 0080 00003654      2550            CMPI.B  #$80,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002898  6700 0026               2551            BEQ     GET_SRC_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
0000289C  0C06 0004               2552            CMPI.B  #4,D6                          
000028A0  6600 001E               2553            BNE     GET_SRC_FAILED 
000028A4                          2554  
000028A4                          2555            *IT IS A WORD AT THIS POINT*
000028A4                          2556            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000028A4  163C 0020               2557            MOVE.B    #' ',D3
000028A8  6100 0482               2558            BSR       PUSH_STACK
000028AC  163C 0023               2559            MOVE.B    #'#',D3
000028B0  6100 047A               2560            BSR       PUSH_STACK
000028B4  321D                    2561            MOVE.W    (A5)+,D1
000028B6  7404                    2562            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
000028B8  6100 E972               2563            BSR       HEX2ASCII2STACK
000028BC  6000 0006               2564            BRA     GET_SRC_SUCCESS
000028C0                          2565            
000028C0                          2566  GET_SRC_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
000028C0  7801                    2567            MOVE.L #1,D4
000028C2  4E75                    2568            RTS
000028C4                          2569  GET_SRC_SUCCESS 
000028C4  4E75                    2570            RTS
000028C6                          2571                                 
000028C6                          2572      
000028C6                          2573  
000028C6                          2574  
000028C6                          2575  
000028C6                          2576  
000028C6                          2577  
000028C6                          2578  
000028C6                          2579  GET_EA_EA_DEST
000028C6                          2580  *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
000028C6                          2581      
000028C6                          2582      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
000028C6  2405                    2583      MOVE.L  D5,D2                           * CLEAN COPY TO D2
000028C8  E68A                    2584      LSR.L   #3,D2                           * [D2] Temporarily used D2 for shifting bits
000028CA  23C2 00003664           2585      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
000028D0  7407                    2586      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
000028D2  C5B9 00003664           2587      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
000028D8                          2588                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
000028D8                          2589      
000028D8                          2590      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
000028D8                          2591      *DESTINATION REGISTER FORMAT STANDARD         *
000028D8                          2592      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
000028D8                          2593      *WHEN BIT = 0(VALID ADDRESS MODE)             *
000028D8                          2594      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
000028D8                          2595      *0 - Dn                                       *
000028D8                          2596      *1 - An                                       *
000028D8                          2597      *2 - (An)                                     *
000028D8                          2598      *3 - (An)+                                    *
000028D8                          2599      *4 - -(An)                                    *
000028D8                          2600      *5 - (XXX).W                                  *
000028D8                          2601      *6 - (XXX).L                                  *
000028D8                          2602      *7 - #<data>                                  *
000028D8                          2603      ***********************************************
000028D8                          2604      
000028D8                          2605      *** Check if source ...  <ea> = Dn
000028D8                          2606  DEST_CHECK0    
000028D8  41F9 00003654           2607            LEA     TEMP_REGISTER_FORMAT,A0
000028DE  1439 00003652           2608            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000028E4  1082                    2609            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000028E6  0239 0001 00003654      2610            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
000028EE  0C39 0001 00003654      2611            CMPI.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
000028F6  6700 006A               2612            BEQ     DEST_CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
000028FA  0CB9 00000000 00003664  2613            CMPI.L     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn) - COMPARE MODES TO SEE IF IT IS THIS MODE
00002904  6600 005C               2614            BNE     DEST_CHECK1
00002908                          2615            
00002908                          2616            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002908  163C 0020               2617            MOVE.B    #' ',D3
0000290C  6100 041E               2618            BSR       PUSH_STACK
00002910  163C 0044               2619            MOVE.B    #'D',D3
00002914  6100 0416               2620            BSR       PUSH_STACK
00002918                          2621  
00002918                          2622            *FIND REGISTER NUMBER END LOCATION*  
00002918  13F9 00003655 0000365C  2623            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002922  0239 000F 0000365C      2624            AND.B   #$0F,VAR_BYTE_END
0000292A                          2625            
0000292A                          2626            *GET INDEX OF THE END OF SRC REGISTER NUMBER
0000292A  23C5 00003660           2627            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002930  1439 0000365C           2628            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002936                          2629            
00002936                          2630            *INTITIALIZE FOR BIT SHIFTING
00002936  41F9 00003660           2631            LEA     VAR_TEMP_CLEANCOPY,A0
0000293C  2639 00003660           2632            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002942                          2633  DEST_LOOP_SHIFTING
00002942  0C02 0000               2634            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002946  6700 0008               2635            BEQ     DEST_MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
0000294A  E24B                    2636            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
0000294C  5302                    2637            SUB.B   #1,D2                     *DECREMENT COUNTER
0000294E  60F2                    2638            BRA     DEST_LOOP_SHIFTING             *CONTINUE SHIFTING
00002950                          2639  DEST_MASKING_NEXT
00002950  C6BC 00000007           2640            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002956  0603 0030               2641            ADD.B   #$30,D3                   *CONVERT TO CHAR
0000295A  6100 03D0               2642            BSR     PUSH_STACK                *PUSH TO STACK
0000295E                          2643            
0000295E  6000 038C               2644            BRA     GET_DST_SUCCESS           *RETURN          
00002962                          2645            
00002962                          2646            
00002962                          2647            *** Check if source ...  <ea> = An
00002962                          2648  DEST_CHECK1    
00002962  41F9 00003654           2649            LEA     TEMP_REGISTER_FORMAT,A0
00002968  1439 00003652           2650            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000296E  1082                    2651            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002970  0239 0002 00003654      2652            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
00002978  0C39 0002 00003654      2653            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
00002980  6700 006A               2654            BEQ     DEST_CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00002984  0CB9 00000001 00003664  2655            CMPI.L  #1,VAR_LONG_ADDRESS_MODE_CHECK                      * An - COMPARE MODES TO SEE IF IT IS THIS MODE
0000298E  6600 005C               2656            BNE     DEST_CHECK2
00002992                          2657            
00002992                          2658            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002992  163C 0020               2659            MOVE.B    #' ',D3
00002996  6100 0394               2660            BSR       PUSH_STACK
0000299A  163C 0041               2661            MOVE.B    #'A',D3
0000299E  6100 038C               2662            BSR       PUSH_STACK
000029A2                          2663  
000029A2                          2664            
000029A2                          2665            *FIND REGISTER NUMBER END LOCATION*  
000029A2  13F9 00003655 0000365C  2666            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
000029AC  0239 000F 0000365C      2667            AND.B   #$0F,VAR_BYTE_END
000029B4                          2668            
000029B4                          2669            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000029B4  23C5 00003660           2670            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000029BA  1439 0000365C           2671            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
000029C0                          2672            
000029C0                          2673            *INTITIALIZE FOR BIT SHIFTING
000029C0  41F9 00003660           2674            LEA     VAR_TEMP_CLEANCOPY,A0
000029C6  2639 00003660           2675            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000029CC                          2676  DEST_LOOP_SHIFTING1
000029CC  0C02 0000               2677            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000029D0  6700 0008               2678            BEQ     DEST_MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
000029D4  E24B                    2679            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000029D6  5302                    2680            SUB.B   #1,D2                     *DECREMENT COUNTER
000029D8  60F2                    2681            BRA     DEST_LOOP_SHIFTING1             *CONTINUE SHIFTING
000029DA                          2682  DEST_MASKING_NEXT1
000029DA  C6BC 00000007           2683            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000029E0  0603 0030               2684            ADD.B   #$30,D3                   *CONVERT TO CHAR
000029E4  6100 0346               2685            BSR     PUSH_STACK                *PUSH TO STACK
000029E8                          2686            
000029E8  6000 0302               2687            BRA     GET_DST_SUCCESS                   *RETURN 
000029EC                          2688            
000029EC                          2689            
000029EC                          2690            
000029EC                          2691            
000029EC                          2692            *** Check if source ...  <ea> = (An)       
000029EC                          2693  DEST_CHECK2    
000029EC  41F9 00003654           2694            LEA     TEMP_REGISTER_FORMAT,A0
000029F2  1439 00003652           2695            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000029F8  1082                    2696            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000029FA  0239 0004 00003654      2697            ANDI.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
00002A02  0C39 0004 00003654      2698            CMPI.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
00002A0A  6700 007A               2699            BEQ     DEST_CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002A0E  0CB9 00000002 00003664  2700            CMPI.L   #2,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)  COMPARE MODES TO SEE IF IT IS THIS MODE                                                                *change: checkx++*
00002A18  6600 006C               2701            BNE     DEST_CHECK3
00002A1C                          2702            
00002A1C                          2703            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002A1C  163C 0020               2704            MOVE.B    #' ',D3
00002A20  6100 030A               2705            BSR       PUSH_STACK
00002A24  163C 0028               2706            MOVE.B    #'(',D3
00002A28  6100 0302               2707            BSR       PUSH_STACK
00002A2C  163C 0041               2708            MOVE.B    #'A',D3
00002A30  6100 02FA               2709            BSR       PUSH_STACK
00002A34                          2710  
00002A34                          2711            
00002A34                          2712            *FIND REGISTER NUMBER END LOCATION*  
00002A34  13F9 00003655 0000365C  2713            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002A3E  0239 000F 0000365C      2714            AND.B   #$0F,VAR_BYTE_END
00002A46                          2715            
00002A46                          2716            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002A46  23C5 00003660           2717            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002A4C  1439 0000365C           2718            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002A52                          2719            
00002A52                          2720            *INTITIALIZE FOR BIT SHIFTING
00002A52  41F9 00003660           2721            LEA     VAR_TEMP_CLEANCOPY,A0
00002A58  2639 00003660           2722            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002A5E                          2723  DEST_LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
00002A5E  0C02 0000               2724            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002A62  6700 0008               2725            BEQ     DEST_MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002A66  E24B                    2726            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002A68  5302                    2727            SUB.B   #1,D2                     *DECREMENT COUNTER
00002A6A  60F2                    2728            BRA     DEST_LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
00002A6C                          2729  DEST_MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
00002A6C  0283 00000007           2730            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002A72  0603 0030               2731            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002A76  6100 02B4               2732            BSR     PUSH_STACK                *PUSH TO STACK
00002A7A                          2733            
00002A7A  163C 0029               2734            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002A7E  6100 02AC               2735            BSR       PUSH_STACK
00002A82                          2736            
00002A82  6000 0268               2737            BRA     GET_DST_SUCCESS                   *RETURN 
00002A86                          2738  
00002A86                          2739            
00002A86                          2740            
00002A86                          2741                      
00002A86                          2742  *** Check if source ...  <ea> = (An)+       
00002A86  41F9 00003654           2743  DEST_CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
00002A8C  1439 00003652           2744            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002A92  1082                    2745            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002A94  0239 0008 00003654      2746            ANDI.B  #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
00002A9C  0C39 0008 00003654      2747            CMPI.B  #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
00002AA4  6700 0082               2748            BEQ     DEST_CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002AA8  0CB9 00000003 00003664  2749            CMPI.L  #3,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)+ - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00002AB2  6600 0074               2750            BNE     DEST_CHECK4
00002AB6                          2751            
00002AB6                          2752            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002AB6  163C 0020               2753            MOVE.B    #' ',D3
00002ABA  6100 0270               2754            BSR       PUSH_STACK
00002ABE  163C 0028               2755            MOVE.B    #'(',D3
00002AC2  6100 0268               2756            BSR       PUSH_STACK
00002AC6  163C 0041               2757            MOVE.B    #'A',D3
00002ACA  6100 0260               2758            BSR       PUSH_STACK
00002ACE                          2759  
00002ACE                          2760            
00002ACE                          2761            *FIND REGISTER NUMBER END LOCATION*  
00002ACE  13F9 00003655 0000365C  2762            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002AD8  0239 000F 0000365C      2763            ANDI.B   #$0F,VAR_BYTE_END
00002AE0                          2764            
00002AE0                          2765            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002AE0  23C5 00003660           2766            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002AE6  1439 0000365C           2767            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002AEC                          2768            
00002AEC                          2769            *INTITIALIZE FOR BIT SHIFTING
00002AEC  41F9 00003660           2770            LEA     VAR_TEMP_CLEANCOPY,A0
00002AF2  2639 00003660           2771            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002AF8                          2772            
00002AF8                          2773  DEST_LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
00002AF8  0C02 0000               2774            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002AFC  6700 0008               2775            BEQ     DEST_MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002B00  E24B                    2776            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002B02  5302                    2777            SUBI.B   #1,D2                     *DECREMENT COUNTER
00002B04  60F2                    2778            BRA     DEST_LOOP_SHIFTING3            *CONTINUE SHIFTING 
00002B06                          2779                                               *change: NAME OF LABEL*
00002B06                          2780  DEST_MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
00002B06  0283 00000007           2781            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002B0C  0603 0030               2782            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002B10  6100 021A               2783            BSR     PUSH_STACK                *PUSH TO STACK
00002B14                          2784            
00002B14  163C 0029               2785            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002B18  6100 0212               2786            BSR       PUSH_STACK
00002B1C  163C 002B               2787            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002B20  6100 020A               2788            BSR       PUSH_STACK
00002B24                          2789            
00002B24  6000 01C6               2790            BRA       GET_DST_SUCCESS                   *RETURN 
00002B28                          2791  
00002B28                          2792            
00002B28                          2793            
00002B28                          2794                      
00002B28                          2795            *** Check if source ...  <ea> = -(An)       
00002B28                          2796  DEST_CHECK4    
00002B28  41F9 00003654           2797            LEA     TEMP_REGISTER_FORMAT,A0
00002B2E  1439 00003652           2798            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002B34  1082                    2799            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002B36  0239 0010 00003654      2800            ANDI.B  #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
00002B3E  0C39 0010 00003654      2801            CMPI.B  #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002B46  6700 0082               2802            BEQ     DEST_CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002B4A  0CB9 00000004 00003664  2803            CMPI.L  #4,VAR_LONG_ADDRESS_MODE_CHECK                      * -(An) - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00002B54  6600 0074               2804            BNE     DEST_CHECK7
00002B58                          2805            
00002B58                          2806            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002B58  163C 0020               2807            MOVE.B    #' ',D3
00002B5C  6100 01CE               2808            BSR       PUSH_STACK
00002B60  163C 002D               2809            MOVE.B    #'-',D3
00002B64  6100 01C6               2810            BSR       PUSH_STACK
00002B68  163C 0028               2811            MOVE.B    #'(',D3
00002B6C  6100 01BE               2812            BSR       PUSH_STACK
00002B70  163C 0041               2813            MOVE.B    #'A',D3
00002B74  6100 01B6               2814            BSR       PUSH_STACK
00002B78                          2815  
00002B78                          2816            
00002B78                          2817            *FIND REGISTER NUMBER END LOCATION*  
00002B78  13F9 00003655 0000365C  2818            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002B82  0239 000F 0000365C      2819            AND.B   #$0F,VAR_BYTE_END
00002B8A                          2820            
00002B8A                          2821            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002B8A  23C5 00003660           2822            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002B90  1439 0000365C           2823            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002B96                          2824            
00002B96                          2825            *INTITIALIZE FOR BIT SHIFTING
00002B96  41F9 00003660           2826            LEA     VAR_TEMP_CLEANCOPY,A0
00002B9C  2639 00003660           2827            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002BA2                          2828            
00002BA2                          2829  DEST_LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
00002BA2  0C02 0000               2830            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002BA6  6700 0008               2831            BEQ     DEST_MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002BAA  E24B                    2832            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002BAC  5302                    2833            SUBI.B   #1,D2                     *DECREMENT COUNTER
00002BAE  60F2                    2834            BRA     DEST_LOOP_SHIFTING4            *CONTINUE SHIFTING 
00002BB0                          2835                                               *change: NAME OF LABEL*
00002BB0                          2836  DEST_MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
00002BB0  0283 00000007           2837            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002BB6  0603 0030               2838            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002BBA  6100 0170               2839            BSR     PUSH_STACK                *PUSH TO STACK
00002BBE                          2840            
00002BBE  163C 0029               2841            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002BC2  6100 0168               2842            BSR       PUSH_STACK
00002BC6                          2843            
00002BC6  6000 0124               2844            BRA     GET_DST_SUCCESS                   *RETURN
00002BCA                          2845            
00002BCA                          2846                      
00002BCA                          2847            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
00002BCA                          2848  DEST_CHECK7    
00002BCA  0CB9 00000007 00003664  2849            CMPI.L  #7,VAR_LONG_ADDRESS_MODE_CHECK                      *IF (MODE != 111)
00002BD4  6600 0112               2850            BNE     GET_DST_FAILED                                      *THAN BRANCH TO UNCESSFULL SRC MODE READ
00002BD8                          2851                   
00002BD8                          2852            *NEXT: (MODE == 111) 
00002BD8                          2853            *NOW: CHECK FOR SRC REGISTER 
00002BD8                          2854                  *(000 = (xxx).W)
00002BD8                          2855                  *(001 = (xxx).L)
00002BD8                          2856                  *(010 = #<data>)
00002BD8                          2857                  
00002BD8                          2858            *FIND REGISTER NUMBER END LOCATION*  
00002BD8  13F9 00003655 0000365C  2859            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002BE2  0239 000F 0000365C      2860            AND.B   #$0F,VAR_BYTE_END
00002BEA                          2861            
00002BEA                          2862            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002BEA  23C5 00003660           2863            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002BF0  1439 0000365C           2864            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002BF6                          2865            
00002BF6                          2866            *INTITIALIZE FOR BIT SHIFTING
00002BF6  41F9 00003660           2867            LEA     VAR_TEMP_CLEANCOPY,A0
00002BFC  2C39 00003660           2868            MOVE.L  VAR_TEMP_CLEANCOPY,D6
00002C02                          2869  DEST_LOOP_SHIFTING7
00002C02  0C02 0000               2870            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002C06  6700 0008               2871            BEQ     DEST_MASKING_NEXT7              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00002C0A  E24E                    2872            LSR     #1,D6                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002C0C  5302                    2873            SUB.B   #1,D2                     *DECREMENT COUNTER
00002C0E  60F2                    2874            BRA     DEST_LOOP_SHIFTING7             *CONTINUE SHIFTING
00002C10                          2875  DEST_MASKING_NEXT7
00002C10  CCBC 00000007           2876            AND.L   #7,D6                     *MASK, ONLY NEED 0-2 BIT INDEXES 
00002C16                          2877           *D3 - REGISTER NUMBER NEEDED TO CHECK WHICH W/L/#<DATA>*
00002C16                          2878            
00002C16                          2879  DEST_CHECK_WORD  
00002C16  41F9 00003654           2880            LEA     TEMP_REGISTER_FORMAT,A0
00002C1C  1439 00003652           2881            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002C22  1082                    2882            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002C24  0239 0020 00003654      2883            ANDI.B  #$20,TEMP_REGISTER_FORMAT                           * MASKS 0010 0000                                                     *change <SRC>*
00002C2C  0C39 0020 00003654      2884            CMPI.B  #$20,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0010 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002C34  6700 0026               2885            BEQ     DEST_CHECK_LONG                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00002C38  0C06 0000               2886            CMPI.B  #0,D6                                                   *COMPARE REGISTER NUMBER WITH (000 == 000) FOR WORD
00002C3C  6600 001E               2887            BNE     DEST_CHECK_LONG                                      * THE REGISTER NUMBER DOESN'T MATCH "(XXX).W" -> SO MOVE ON       
00002C40                          2888            *IT IS A WORD AT THIS POINT*
00002C40                          2889            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002C40  163C 0020               2890            MOVE.B    #' ',D3
00002C44  6100 00E6               2891            BSR       PUSH_STACK
00002C48  163C 0024               2892            MOVE.B    #'$',D3
00002C4C  6100 00DE               2893            BSR       PUSH_STACK
00002C50  321D                    2894            MOVE.W    (A5)+,D1
00002C52  7404                    2895            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00002C54  6100 E5D6               2896            BSR       HEX2ASCII2STACK
00002C58  6000 0092               2897            BRA       GET_DST_SUCCESS
00002C5C                          2898  
00002C5C                          2899  DEST_CHECK_LONG
00002C5C  41F9 00003654           2900            LEA     TEMP_REGISTER_FORMAT,A0
00002C62  1439 00003652           2901            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002C68  1082                    2902            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002C6A  0239 0040 00003654      2903            ANDI.B  #$40,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00002C72  0C39 0040 00003654      2904            CMPI.B  #$40,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002C7A  6700 0026               2905            BEQ     DEST_CHECK_IMMEDIATE                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00002C7E  0C06 0001               2906            CMPI.B  #1,D6                                                   *COMPARE REGISTER NUMBER WITH (001 == 001) FOR WORD
00002C82  6600 001E               2907            BNE     DEST_CHECK_IMMEDIATE                                      * THE REGISTER NUMBER DOESN'T MATCH "(XXX).L" -> SO MOVE ON 
00002C86                          2908            *IT IS A WORD AT THIS POINT*
00002C86                          2909            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002C86  163C 0020               2910            MOVE.B    #' ',D3
00002C8A  6100 00A0               2911            BSR       PUSH_STACK
00002C8E  163C 0024               2912            MOVE.B    #'$',D3
00002C92  6100 0098               2913            BSR       PUSH_STACK
00002C96  321D                    2914            MOVE.W    (A5)+,D1
00002C98  7404                    2915            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00002C9A  6100 E590               2916            BSR       HEX2ASCII2STACK
00002C9E  6000 004C               2917            BRA     GET_DST_SUCCESS
00002CA2                          2918            
00002CA2                          2919  DEST_CHECK_IMMEDIATE
00002CA2  41F9 00003654           2920            LEA     TEMP_REGISTER_FORMAT,A0
00002CA8  1439 00003652           2921            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002CAE  1082                    2922            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002CB0  0239 0080 00003654      2923            ANDI.B  #$80,TEMP_REGISTER_FORMAT                           * MASKS 0100 0000                                                     *change <SRC>*
00002CB8  0C39 0080 00003654      2924            CMPI.B  #$80,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0100 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
00002CC0  6700 0026               2925            BEQ     GET_DST_FAILED                                      * THE REGISTER FORMAT DOES NOT ALLOW "(XXX).W" -> SO MOVE ON               *change: checkx++*
00002CC4  0C06 0004               2926            CMPI.B  #4,D6                                               * COMPARE REGISTER NUMBER WITH (010 == 010) FOR WORD
00002CC8  6600 001E               2927            BNE     GET_DST_FAILED                                      * THE REGISTER NUMBER DOESN'T MATCH "#<DATA>" -> SO MOVE ON 
00002CCC                          2928            
00002CCC                          2929            *IT IS A WORD AT THIS POINT*
00002CCC                          2930            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002CCC  163C 0020               2931            MOVE.B    #' ',D3
00002CD0  6100 005A               2932            BSR       PUSH_STACK
00002CD4  163C 0023               2933            MOVE.B    #'#',D3
00002CD8  6100 0052               2934            BSR       PUSH_STACK
00002CDC  321D                    2935            MOVE.W    (A5)+,D1
00002CDE  7404                    2936            MOVE.L    #4,D2           *SIZE INITIALIZED FOR CONVERSION
00002CE0  6100 E54A               2937            BSR       HEX2ASCII2STACK
00002CE4  6000 0006               2938            BRA       GET_DST_SUCCESS
00002CE8                          2939            
00002CE8                          2940  GET_DST_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
00002CE8  7801                    2941            MOVE.L #1,D4
00002CEA  4E75                    2942            RTS
00002CEC                          2943  GET_DST_SUCCESS 
00002CEC  4E75                    2944            RTS
00002CEE                          2945  
00002CEE                          2946  
00002CEE                          2947  *---------------------------------------------------------------------------*
00002CEE                          2948  * STACK/QUEUE INTERFACE
00002CEE                          2949  *---------------------------------------------------------------------------*
00002CEE                          2950  PRINT_STACK
00002CEE  0C39 0000 0000364E      2951            CMP.B     #0,COUNTER
00002CF6  6700 000E               2952            BEQ       PRINT_STACK_RETURN             *CHECK IF LOOP IS FINISHED
00002CFA                          2953            
00002CFA                          2954  PRINT_STACK_HELPER
00002CFA  6100 0038               2955            BSR      POP_STACK          *PRINTS ADDRESS
00002CFE  103C 0006               2956            MOVE.B   #6,D0              *Display single character in D1.B. 
00002D02  4E4F                    2957            TRAP     #15             *ACTIVATES PRINT
00002D04                          2958  
00002D04  60E8                    2959            BRA       PRINT_STACK
00002D06                          2960  PRINT_STACK_RETURN
00002D06  4E75                    2961            RTS
00002D08                          2962            
00002D08                          2963            
00002D08                          2964  PRINT_QUEUE
00002D08  0C39 0000 0000364E      2965            CMP.B     #0,COUNTER
00002D10  6700 0018               2966            BEQ       PRINT_QUEUE_RETURN             *CHECK IF LOOP IS FINISHED
00002D14                          2967            
00002D14                          2968  PRINT_QUEUE_HELPER
00002D14  33F9 0000364E 00003650  2969            MOVE.W   COUNTER,QUEUE_COUNTER
00002D1E  6100 0022               2970            BSR      POP_FRONT          *PRINTS ADDRESS
00002D22  103C 0006               2971            MOVE.B   #6,D0              *Display single character in D1.B. 
00002D26  4E4F                    2972            TRAP     #15             *ACTIVATES PRINT
00002D28                          2973  
00002D28  60DE                    2974            BRA       PRINT_QUEUE
00002D2A                          2975  PRINT_QUEUE_RETURN
00002D2A  4E75                    2976            RTS
00002D2C                          2977            
00002D2C                          2978  *PUSHES.W CONTENTS OF [D3] INTO STACK          
00002D2C                          2979  PUSH_STACK
00002D2C  1503                    2980              MOVE.B  D3,-(A2)
00002D2E  6100 0058               2981              BSR     INCREMENT
00002D32  4E75                    2982              RTS
00002D34                          2983  *POPS.W TOP OF STACK INTO [D1], SO ITS READY TO PRINT WITH TRAP 15
00002D34                          2984  *         MOVE.W   (A2)+,D1           *PRINTS ADDRESS
00002D34                          2985  *         MOVE.B   #15,D0             *PRINTS ACCORDING TO D2 BASE VALUE
00002D34                          2986  *         MOVE.B   #16,D2             *PRINTS BASED 16 NUMBER
00002D34                          2987  *         TRAP        #15             *ACTIVATES PRINT
00002D34                          2988  POP_STACK
00002D34  BECA                    2989              CMPA.W   A2,SP            *CHECKS IF THERE IS ANYTHING TO PUSH
00002D36  6700 0008               2990              BEQ     POP_RETURN        *IF NOTHING TO PUSH THAN JUST RETURN
00002D3A  121A                    2991              MOVE.B  (A2)+,D1 
00002D3C  6100 0052               2992              BSR     DECREMENT
00002D40                          2993  POP_RETURN
00002D40  4E75                    2994              RTS 
00002D42                          2995        
00002D42                          2996  *USE [A4] AS SECOND POINTER IN SHIFTING      
00002D42  0C39 0000 00003650      2997  POP_FRONT   CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
00002D4A  6700 0030               2998              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
00002D4E                          2999              
00002D4E                          3000              
00002D4E                          3001              *POSITION THE POINTERS A[4] RIGHT BEHIND A[2] WHICH IS RIGHT BEHIND STACK
00002D4E  347C 7000               3002              MOVEA.W #STACK,A2   *START A2 AT STACK
00002D52  0622 0000               3003              ADD.B   #0,-(A2)    *SHIFT A2 TO THE BOTTOM OF THE STACK
00002D56  384A                    3004              MOVEA.W A2,A4     *START A4 RIGHT ABOVE A2
00002D58  0624 0000               3005              ADD.B   #0,-(A4)  *leash one more higher in stack (a4)
00002D5C  1212                    3006              MOVE.B  (A2),D1     *POP CONTENTS INTO D1
00002D5E                          3007  POP_SHIFT_LOOP
00002D5E  0C39 0000 00003650      3008              CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
00002D66  6700 0014               3009              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
00002D6A  1494                    3010              MOVE.B  (A4),(A2)   *SHIFT CONTENT DOWN THE STACK
00002D6C  0624 0000               3011              ADD.B   #0,-(A4)
00002D70  0622 0000               3012              ADD.B   #0,-(A2) *SHIFT POINTERS DOWN THE STACK
00002D74  5339 00003650           3013              SUB.B   #1,QUEUE_COUNTER *DECREMENT INTERNAL QUEUE COUNTER
00002D7A                          3014              
00002D7A  60E2                    3015              BRA     POP_SHIFT_LOOP
00002D7C                          3016                          
00002D7C                          3017  POP_FRONT_RETURN 
00002D7C                          3018              *RESET A2 BACK TO SP
00002D7C  347C 7000               3019              MOVEA.W #STACK,A2    
00002D80  5339 0000364E           3020              SUB.B   #1,COUNTER *DECREMENT STACK COUNTER       
00002D86  4E75                    3021              RTS   
00002D88                          3022  
00002D88                          3023  INCREMENT
00002D88  5239 0000364E           3024              ADD.B   #1, COUNTER
00002D8E  4E75                    3025              RTS           
00002D90                          3026  DECREMENT
00002D90  5339 0000364E           3027              SUB.B   #1, COUNTER
00002D96  4E75                    3028              RTS           
00002D98                          3029  CLEAR_STACK
00002D98  0C39 0000 0000364E      3030              CMP.B     #0,COUNTER
00002DA0  6700 0006               3031              BEQ       CLEAR_RETURN
00002DA4  618E                    3032              BSR       POP_STACK
00002DA6  60F0                    3033              BRA       CLEAR_STACK
00002DA8                          3034   
00002DA8                          3035  CLEAR_RETURN
00002DA8  4E75                    3036              RTS    
00002DAA                          3037  *---------------------------------------------------------------------------*
00002DAA                          3038  * TERMINATE
00002DAA                          3039  *---------------------------------------------------------------------------*
00002DAA                          3040  TERMINATE   
00002DAA  43F9 0000315A           3041              LEA     FINMSG,A1
00002DB0  103C 000E               3042              MOVE.B  #14,D0
00002DB4  4E4F                    3043              TRAP    #15
00002DB6                          3044  
00002DB6  103C 0009               3045              MOVE.B  #9,D0
00002DBA  4E4F                    3046              TRAP    #15
00002DBC                          3047  
00002DBC                          3048  *---------------------------------------------------------------------------*
00002DBC                          3049  * Data storage                                                 
00002DBC                          3050  *---------------------------------------------------------------------------*  
00002DBC                          3051  WELCOME
00002DBC= 20 20 20 20 20 20 ...   3052              DC.B '                         ___     ___ ___        ___   ___ ___                 ',CR,LF
00002E0C= 3D 3D 3D 3D 3D 20 ...   3053              DC.B '=====           \  /\  /|___|   |   |   ||\  /||___    | |   |           =====',CR,LF
00002E5C= 3D 3D 3D 3D 3D 20 ...   3054              DC.B '=====            \/  \/ |___|___|___|___|| \/ ||___    | |___|           =====',CR,LF
00002EAC                          3055      
00002EAC= 20 20 20 20 20 20 ...   3056              DC.B '                        ___ ___ ___  ___      ___                             ',CR,LF
00002EFC= 20 20 20 20 20 20 ...   3057              DC.B '                       |     | |___)|    |   |___                             ',CR,LF 
00002F4C= 20 20 20 20 20 20 ...   3058              DC.B '                       |___ _|_|\___|___ |___|___                             ',CR,LF
00002F9C                          3059      
00002F9C= 20 20 20 20 20 20 ...   3060              DC.B '           __  ___ ___   _   ___  ___  ___        ___      ___ ___            ',CR,LF
00002FEC= 3D 3D 3D 3D 3D 20 ...   3061              DC.B '=====     |  \  | |___  /_\ |___ |___ |___ |\  /||___||   |___|___)      =====',CR,LF 
0000303C= 3D 3D 3D 3D 3D 20 ...   3062              DC.B '=====     |__/ _|_ ___|/   \ ___| ___||___ | \/ ||___||___|___|\___      =====',CR,LF,CR,LF,CR,LF,0
00003091                          3063  
00003091                          3064  PROMPT_START
00003091= 50 6C 65 61 73 65 ...   3065              DC.B    'Please enter a hexadecimal starting address.',CR,LF,0
000030C0                          3066      
000030C0                          3067  PROMPT_END
000030C0= 50 6C 65 61 73 65 ...   3068              DC.B    'Please enter a hexadecimal ending address.',CR,LF,0
000030ED= 0D 0A 48 69 74 20 ...   3069  DISP_NEXT   DC.B    CR,LF,'Hit Enter to print the next 30 lines.',CR,LF,0            
00003117= 57 6F 75 6C 64 20 ...   3070  REPEATMSG   DC.B    'Would you like to run again? Press Y to continue or N to finish.',CR,LF,0
0000315A= 54 68 61 6E 6B 20 ...   3071  FINMSG      DC.B    'Thank you for using Circle Disassembler.',CR,LF,0
00003185= 45 72 72 6F 72 3A ...   3072  ERRMSG_1    DC.B    'Error: Invalid Input Address',CR,LF,0
000031A4= 45 72 72 6F 72 3A ...   3073  ERRMSG_3    DC.B    'Error: Invalid Input Address (Odd)',CR,LF,0
000031C9= 45 72 72 6F 72 3A ...   3074  ERRMSG_5    DC.B    'Error: Invalid Input Address (start > end)',CR,LF,0
000031F6                          3075  
000031F6                          3076  VR_S_ADDR   DS.B    80                      * allocate storage space for the starting address
00003246                          3077  VR_E_ADDR   DS.B    80                      * allocate storage space for the ending address
00003296                          3078  S_ADDR_HX   DS.L    1                       * allocate storage space for the starting address in hex
0000329A                          3079  E_ADDR_HX   DS.L    1                       * allocate storage space for the ending address in hex
0000329E= 0D 0A 00                3080  ENDLINE_M   DC.B    CR,LF,0
000032A1                          3081  TMPINPUT    DS.B    80                      * temp store user input
000032F1                          3082  TMPOUTPUT   DS.B    80                      * temp store prog output
00003341= 20 20 20 4F 52 49 ...   3083  DISP_ORI_B  DC.B    '   ORI.B',0
0000334A= 20 20 20 4F 52 49 ...   3084  DISP_ORI_W  DC.B    '   ORI.W',0
00003353= 20 20 20 4F 52 49 ...   3085  DISP_ORI_L  DC.B    '   ORI.L',0
0000335C= 20 20 20 45 4F 52 ...   3086  DISP_EORI_B  DC.B    '   EORI.B',0
00003366= 20 20 20 45 4F 52 ...   3087  DISP_EORI_W  DC.B    '   EORI.W',0
00003370= 20 20 20 45 4F 52 ...   3088  DISP_EORI_L  DC.B    '   EORI.L',0
0000337A= 20 20 20 42 54 53 ...   3089  DISP_BTST   DC.B    '   BTST',0
00003382= 20 20 20 43 4D 50 ...   3090  DISP_CMPI_B  DC.B    '   CMPI.B',0
0000338C= 20 20 20 43 4D 50 ...   3091  DISP_CMPI_W  DC.B    '   CMPI.W',0
00003396= 20 20 20 43 4D 50 ...   3092  DISP_CMPI_L  DC.B    '   CMPI.L',0
000033A0= 20 20 20 44 41 54 ...   3093  DISP_DATA   DC.B    '   DATA',0
000033A8= 20 20 20 4D 4F 56 ...   3094  DISP_MOVE_B DC.B    '   MOVE.B',0
000033B2= 20 20 20 4D 4F 56 ...   3095  DISP_MOVE_W DC.B    '   MOVE.W',0
000033BC= 20 20 20 4D 4F 56 ...   3096  DISP_MOVE_L DC.B    '   MOVE.L',0
000033C6= 20 20 20 52 54 53 00    3097  DISP_RTS    DC.B    '   RTS',0
000033CD= 20 20 20 4A 53 52 00    3098  DISP_JSR    DC.B    '   JSR',0
000033D4= 20 20 20 4E 45 47 ...   3099  DISP_NEG_B    DC.B    '   NEG.B',0
000033DD= 20 20 20 4E 45 47 ...   3100  DISP_NEG_W    DC.B    '   NEG.W',0
000033E6= 20 20 20 4E 45 47 ...   3101  DISP_NEG_L    DC.B    '   NEG.L',0
000033EF= 20 20 20 4E 4F 54 ...   3102  DISP_NOT_B  DC.B    '   NOT.B',0
000033F8= 20 20 20 4E 4F 54 ...   3103  DISP_NOT_W  DC.B    '   NOT.W',0
00003401= 20 20 20 4E 4F 54 ...   3104  DISP_NOT_L  DC.B    '   NOT.L',0
0000340A= 20 20 20 4C 45 41 00    3105  DISP_LEA    DC.B    '   LEA',0
00003411= 20 20 20 4D 4F 56 ...   3106  DISP_MOVEM_W    DC.B    '   MOVEM.W',0
0000341C= 20 20 20 4D 4F 56 ...   3107  DISP_MOVEM_L    DC.B    '   MOVEM.L',0
00003427= 20 20 20 41 44 44 ...   3108  DISP_ADDQ_B DC.B    '   ADDQ.B',0
00003431= 20 20 20 41 44 44 ...   3109  DISP_ADDQ_W DC.B    '   ADDQ.W',0
0000343B= 20 20 20 41 44 44 ...   3110  DISP_ADDQ_L DC.B    '   ADDQ.L',0
00003445= 20 20 20 44 49 56 ...   3111  DISP_DIVS   DC.B    '   DIVS',0
0000344D= 20 20 20 53 55 42 ...   3112  DISP_SUB_B  DC.B    '   SUB.B',0
00003456= 20 20 20 53 55 42 ...   3113  DISP_SUB_W  DC.B    '   SUB.W',0
0000345F= 20 20 20 53 55 42 ...   3114  DISP_SUB_L  DC.B    '   SUB.L',0
00003468= 20 20 20 53 55 42 ...   3115  DISP_SUBI_B  DC.B    '   SUBI.B',0
00003472= 20 20 20 53 55 42 ...   3116  DISP_SUBI_W  DC.B    '   SUBI.W',0
0000347C= 20 20 20 53 55 42 ...   3117  DISP_SUBI_L  DC.B    '   SUBI.L',0
00003486= 20 20 20 53 55 42 ...   3118  DISP_SUBA_W  DC.B    '   SUBA.W',0
00003490= 20 20 20 53 55 42 ...   3119  DISP_SUBA_L  DC.B    '   SUBA.L',0
0000349A= 20 20 20 45 4F 52 ...   3120  DISP_EOR_B  DC.B    '   EOR.B',0
000034A3= 20 20 20 45 4F 52 ...   3121  DISP_EOR_W  DC.B    '   EOR.W',0
000034AC= 20 20 20 45 4F 52 ...   3122  DISP_EOR_L  DC.B    '   EOR.L',0
000034B5= 20 20 20 43 4D 50 ...   3123  DISP_CMP_B  DC.B    '   CMP.B',0
000034BE= 20 20 20 43 4D 50 ...   3124  DISP_CMP_W  DC.B    '   CMP.W',0
000034C7= 20 20 20 43 4D 50 ...   3125  DISP_CMP_L  DC.B    '   CMP.L',0
000034D0= 20 20 20 43 4D 50 ...   3126  DISP_CMPA_W  DC.B    '   CMPA.W',0
000034DA= 20 20 20 43 4D 50 ...   3127  DISP_CMPA_L  DC.B    '   CMPA.L',0
000034E4= 20 20 20 4D 55 4C ...   3128  DISP_MULS_W DC.B    '   MULS.W',0
000034EE= 20 20 20 41 4E 44 ...   3129  DISP_AND_B  DC.B    '   AND.B',0
000034F7= 20 20 20 41 4E 44 ...   3130  DISP_AND_W  DC.B    '   AND.W',0
00003500= 20 20 20 41 4E 44 ...   3131  DISP_AND_L  DC.B    '   AND.L',0
00003509= 20 20 20 41 44 44 ...   3132  DISP_ADD_B  DC.B    '   ADD.B',0
00003512= 20 20 20 41 44 44 ...   3133  DISP_ADD_W  DC.B    '   ADD.W',0
0000351B= 20 20 20 41 44 44 ...   3134  DISP_ADD_L  DC.B    '   ADD.L',0
00003524= 20 20 20 41 44 44 ...   3135  DISP_ADDA_W DC.B    '   ADDA.W',0
0000352E= 20 20 20 41 44 44 ...   3136  DISP_ADDA_L DC.B    '   ADDA.L',0
00003538= 20 20 20 4C 53 52 ...   3137  DISP_LSR_B  DC.B    '   LSR.B',0
00003541= 20 20 20 4C 53 4C ...   3138  DISP_LSL_B  DC.B    '   LSL.B',0
0000354A= 20 20 20 4C 53 52 ...   3139  DISP_LSR_W  DC.B    '   LSR.W',0
00003553= 20 20 20 4C 53 4C ...   3140  DISP_LSL_W  DC.B    '   LSL.W',0
0000355C= 20 20 20 4C 53 52 ...   3141  DISP_LSR_L  DC.B    '   LSR.L',0
00003565= 20 20 20 4C 53 4C ...   3142  DISP_LSL_L  DC.B    '   LSL.L',0
0000356E= 20 20 20 41 53 52 ...   3143  DISP_ASR_B  DC.B    '   ASR.B',0
00003577= 20 20 20 41 53 4C ...   3144  DISP_ASL_B  DC.B    '   ASL.B',0
00003580= 20 20 20 41 53 52 ...   3145  DISP_ASR_W  DC.B    '   ASR.W',0
00003589= 20 20 20 41 53 4C ...   3146  DISP_ASL_W  DC.B    '   ASL.W',0
00003592= 20 20 20 41 53 52 ...   3147  DISP_ASR_L  DC.B    '   ASR.L',0
0000359B= 20 20 20 41 53 4C ...   3148  DISP_ASL_L  DC.B    '   ASL.L',0
000035A4= 20 20 20 52 4F 52 ...   3149  DISP_ROR_B  DC.B    '   ROR.B',0
000035AD= 20 20 20 52 4F 4C ...   3150  DISP_ROL_B  DC.B    '   ROL.B',0
000035B6= 20 20 20 52 4F 52 ...   3151  DISP_ROR_W  DC.B    '   ROR.W',0
000035BF= 20 20 20 52 4F 4C ...   3152  DISP_ROL_W  DC.B    '   ROL.W',0
000035C8= 20 20 20 52 4F 52 ...   3153  DISP_ROR_L  DC.B    '   ROR.L',0
000035D1= 20 20 20 52 4F 4C ...   3154  DISP_ROL_L  DC.B    '   ROL.L',0
000035DA= 20 20 20 42 52 41 00    3155  DISP_BRA    DC.B    '   BRA',0
000035E1= 20 20 20 42 4C 54 00    3156  DISP_BLT    DC.B    '   BLT',0
000035E8= 20 20 20 42 45 51 00    3157  DISP_BEQ    DC.B    '   BEQ',0
000035EF= 20 20 20 42 4E 45 00    3158  DISP_BNE    DC.B    '   BNE',0
000035F6= 20 20 20 42 48 49 00    3159  DISP_BHI    DC.B    '   BHI',0
000035FD= 20 20 20 4D 4F 56 ...   3160  DISP_MOVEA_W    DC.B    '   MOVEA.W',0
00003608= 20 20 20 4D 4F 56 ...   3161  DISP_MOVEA_L    DC.B    '   MOVEA.L',0
00003613                          3162  
00003613= 20 20 20 24 00          3163  DISP_HEX     DC.B    '   $',0
00003618= 20 20 20 44 00          3164  DISP_D  DC.B    '   D',0
0000361D= 20 20 20 41 00          3165  DISP_A  DC.B    '   A',0
00003622= 20 20 20 28 00          3166  DISP_OP  DC.B    '   (',0
00003627= 29 00                   3167  DISP_CP  DC.B   ')',0
00003629= 20 20 20 28 41 00       3168  DISP_AOP  DC.B    '   (A',0
0000362F                          3169  
0000362F= 20 20 20 2D 28 41 00    3170  DISP_PRE    DC.B    '   -(A',0
00003636= 29 2B 00                3171  DISP_POST   DC.B    ')+',0
00003639= 20 20 20 23 00          3172  DISP_LB DC.B    '   #',0
0000363E= 30 00                   3173  DISP_0  DC.B    '0',0
00003640= 31 00                   3174  DISP_1  DC.B    '1',0
00003642= 32 00                   3175  DISP_2  DC.B    '2',0
00003644= 33 00                   3176  DISP_3  DC.B    '3',0
00003646= 34 00                   3177  DISP_4  DC.B    '4',0
00003648= 35 00                   3178  DISP_5  DC.B    '5',0
0000364A= 36 00                   3179  DISP_6  DC.B    '6',0
0000364C= 37 00                   3180  DISP_7  DC.B    '7',0
0000364E                          3181  
0000364E                          3182  *STACK INTERFACE VARIABLES*
0000364E                          3183  COUNTER         DS.W    1
00003650                          3184  QUEUE_COUNTER   DS.W    1
00003652                          3185  
00003652                          3186  *EA DECODING INTERFACE VARIABLES* 
00003652                          3187  DEST_REGISTER_FORMAT    DS.B    1           *all address modes acceptable standard
00003653                          3188  SRC_REGISTER_FORMAT  DS.B    1           *all address modes acceptable standard
00003654                          3189  TEMP_REGISTER_FORMAT    DS.B    1           *place holder for masking other register formats
00003655                          3190  
00003655                          3191  *FORMAT OF WHERE TO GET THE EA BY THE ENDING BIT AND STARTING BIT
00003655                          3192  * WORD + WORD = LONG
00003655                          3193  * (STARTING BIT) + (ENDING BIT) = 2 HEX CHAR
00003655                          3194  * A              + F            = AF         <= EXAMPLE
00003655                          3195  *(10TH BIT)      + (15TH BIT)   = CHECK BITS 15 THROUGH 10
00003655                          3196  GET_DST_START_END    DS.B    1
00003656                          3197  GET_SRC_START_END    DS.B    1
00003657                          3198  
00003657                          3199  *STORES THE START + END BITS HERE (FROM ABOVE)
00003658                          3200  VAR_BYTE_START      DS.L    1
0000365C                          3201  VAR_BYTE_END        DS.L    1
00003660                          3202  VAR_TEMP_CLEANCOPY  DS.L    1
00003664                          3203  
00003664                          3204  VAR_LONG_ADDRESS_MODE_CHECK        DS.L    1       *holds the bits 0-2 in long form
00003668                          3205  
00003668                          3206  *MORE FOR STACK USAGE*
00003668= 2C 00                   3207  DISP_COMMA  DC.B    ',',0
0000366A= 20 20 20 00             3208  DISP_INDENT  DC.B    '   ',0
0000366E                          3209  
0000366E                          3210  *NEXT WORD POINTER: FOR IDENTIFING (xxx).W or (xxx).L*
0000366E                          3211  POINTER_WORD    DS.W       1
00003670                          3212  
00003670                          3213  
00003670                          3214  
00003670                          3215  *---------------------------------------------------------------------------*
00003670                          3216  * Ends program
00003670                          3217  *---------------------------------------------------------------------------*
00003670                          3218              END    START                    * last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASC2HXLP            1188
ASCII2HEX           1182
ASC_ERR             11E4
ASC_LOW             11C6
ASC_NUM             11D6
ASC_SFT             11DE
ASC_UPP             11CE
CHECK0              24B0
CHECK1              253A
CHECK2              25C4
CHECK3              265E
CHECK4              2700
CHECK7              27A2
CHECK_IMMEDIATE     287A
CHECK_LONG          2834
CHECK_WORD          27EE
CLEAR_RETURN        2DA8
CLEAR_STACK         2D98
COUNTER             364E
CR                  D
DECREMENT           2D90
DEST_CHECK0         28D8
DEST_CHECK1         2962
DEST_CHECK2         29EC
DEST_CHECK3         2A86
DEST_CHECK4         2B28
DEST_CHECK7         2BCA
DEST_CHECK_IMMEDIATE  2CA2
DEST_CHECK_LONG     2C5C
DEST_CHECK_WORD     2C16
DEST_LOOP_SHIFTING  2942
DEST_LOOP_SHIFTING1  29CC
DEST_LOOP_SHIFTING2  2A5E
DEST_LOOP_SHIFTING3  2AF8
DEST_LOOP_SHIFTING4  2BA2
DEST_LOOP_SHIFTING7  2C02
DEST_MASKING_NEXT   2950
DEST_MASKING_NEXT1  29DA
DEST_MASKING_NEXT2  2A6C
DEST_MASKING_NEXT3  2B06
DEST_MASKING_NEXT4  2BB0
DEST_MASKING_NEXT7  2C10
DEST_MODE           2068
DEST_REGISTER       2338
DEST_REGISTER_FORMAT  3652
DISPLAY_30_LINES    1330
DISP_0              363E
DISP_1              3640
DISP_2              3642
DISP_3              3644
DISP_4              3646
DISP_5              3648
DISP_6              364A
DISP_7              364C
DISP_A              361D
DISP_ADDA_L         352E
DISP_ADDA_W         3524
DISP_ADDQ_B         3427
DISP_ADDQ_L         343B
DISP_ADDQ_W         3431
DISP_ADD_B          3509
DISP_ADD_L          351B
DISP_ADD_W          3512
DISP_AND_B          34EE
DISP_AND_L          3500
DISP_AND_W          34F7
DISP_AOP            3629
DISP_ASL_B          3577
DISP_ASL_L          359B
DISP_ASL_W          3589
DISP_ASR_B          356E
DISP_ASR_L          3592
DISP_ASR_W          3580
DISP_BEQ            35E8
DISP_BHI            35F6
DISP_BLT            35E1
DISP_BNE            35EF
DISP_BRA            35DA
DISP_BTST           337A
DISP_CMPA_L         34DA
DISP_CMPA_W         34D0
DISP_CMPI_B         3382
DISP_CMPI_L         3396
DISP_CMPI_W         338C
DISP_CMP_B          34B5
DISP_CMP_L          34C7
DISP_CMP_W          34BE
DISP_COMMA          3668
DISP_CP             3627
DISP_D              3618
DISP_DATA           33A0
DISP_DIVS           3445
DISP_EORI_B         335C
DISP_EORI_L         3370
DISP_EORI_W         3366
DISP_EOR_B          349A
DISP_EOR_L          34AC
DISP_EOR_W          34A3
DISP_HEX            3613
DISP_INDENT         366A
DISP_JSR            33CD
DISP_LB             3639
DISP_LEA            340A
DISP_LSL_B          3541
DISP_LSL_L          3565
DISP_LSL_W          3553
DISP_LSR_B          3538
DISP_LSR_L          355C
DISP_LSR_W          354A
DISP_MOVEA_L        3608
DISP_MOVEA_W        35FD
DISP_MOVEM_L        341C
DISP_MOVEM_W        3411
DISP_MOVE_B         33A8
DISP_MOVE_L         33BC
DISP_MOVE_W         33B2
DISP_MULS_W         34E4
DISP_NEG_B          33D4
DISP_NEG_L          33E6
DISP_NEG_W          33DD
DISP_NEXT           30ED
DISP_NOT_B          33EF
DISP_NOT_L          3401
DISP_NOT_W          33F8
DISP_OP             3622
DISP_ORI_B          3341
DISP_ORI_L          3353
DISP_ORI_W          334A
DISP_POST           3636
DISP_PRE            362F
DISP_ROL_B          35AD
DISP_ROL_L          35D1
DISP_ROL_W          35BF
DISP_ROR_B          35A4
DISP_ROR_L          35C8
DISP_ROR_W          35B6
DISP_RTS            33C6
DISP_SUBA_L         3490
DISP_SUBA_W         3486
DISP_SUBI_B         3468
DISP_SUBI_L         347C
DISP_SUBI_W         3472
DISP_SUB_B          344D
DISP_SUB_L          345F
DISP_SUB_W          3456
D_MODE000           210A
D_MODE010           2152
D_MODE011           21B2
D_MODE100           21D2
D_MODE111           2224
EA_ARITH            2002
EA_DATA             150E
EA_GEN              204E
EA_MOVEA            2028
EA_NOSRC            1FEE
ENDLINE_M           329E
END_ADDR            10CE
ERRMSG_1            3185
ERRMSG_3            31A4
ERRMSG_5            31C9
ERROR_1             1132
ERROR_2             1142
ERROR_3             1152
ERROR_4             1162
ERROR_5             1172
E_ADDR_HX           329A
FINMSG              315A
GET_DST_FAILED      2CE8
GET_DST_START_END   3655
GET_DST_SUCCESS     2CEC
GET_EA_EA_DEST      28C6
GET_EA_EA_SRC       249E
GET_SRC_FAILED      28C0
GET_SRC_START_END   3656
GET_SRC_SUCCESS     28C4
HEX2ASCII           11EA
HEX2ASCII2STACK     122C
HEX_CHAR            1218
HEX_CONT            121C
HEX_LOOP            11FE
IMMD_B              22D8
IMMD_L              2318
IMMD_W              22F8
IMMEDIATE           22A8
INCREMENT           2D88
INTRO               1028
IS_ODD              1270
IS_ODD_ERR          1286
JMPTABLE            135C
LF                  A
LONGMODE            227C
LOOP_SHIFTING       251A
LOOP_SHIFTING1      25A4
LOOP_SHIFTING2      2636
LOOP_SHIFTING3      26D0
LOOP_SHIFTING4      277A
MAIN                128C
MASKING_NEXT        2528
MASKING_NEXT1       25B2
MASKING_NEXT2       2644
MASKING_NEXT3       26DE
MASKING_NEXT4       2788
MODE000             20F6
MODE001             211E
MODE010             2132
MODE011             2172
MODE100             2192
MODE111             21F2
NEXTLINES           133E
OP0000              13BC
OP0001              15E2
OP0010              1650
OP0011              16B2
OP0100              1712
OP0101              18AC
OP0110              1928
OP0111              19B6
OP1000              19BA
OP1001              19F6
OP1010              1ACE
OP1011              1AD2
OP1100              1BCE
OP1101              1C6A
OP1110              1D3C
OP1111              1FEA
OP_ADDA_L           1D24
OP_ADDA_W           1D0C
OP_ADDQ             18CC
OP_ADDQ_B           18F2
OP_ADDQ_L           1916
OP_ADDQ_W           1904
OP_ADD_B            1CC4
OP_ADD_L            1CF4
OP_ADD_W            1CDC
OP_AND_B            1C34
OP_AND_L            1C58
OP_AND_W            1C46
OP_ASL              1EDC
OP_ASL_B            1F00
OP_ASL_L            1F12
OP_ASL_W            1F24
OP_ASR              1E82
OP_ASR_B            1EA6
OP_ASR_L            1EB8
OP_ASR_W            1ECA
OP_ASX              1D9E
OP_BEQ              198C
OP_BHI              1970
OP_BLT              19A8
OP_BNE              197E
OP_BRA              199A
OP_BTST             1430
OP_CMPA_L           1B3E
OP_CMPA_W           1B2C
OP_CMPI             1536
OP_CMPI_B           1556
OP_CMPI_L           157A
OP_CMPI_W           1568
OP_CMP_B            1B50
OP_CMP_L            1B80
OP_CMP_W            1B68
OP_DATA             14EA
OP_DIVS             19E2
OP_EORI             143E
OP_EORI_B           145E
OP_EORI_L           1482
OP_EORI_W           1470
OP_EOR_B            1B98
OP_EOR_L            1BBC
OP_EOR_W            1BAA
OP_JSR              188A
OP_LEA              17B8
OP_LSL              1E28
OP_LSL_B            1E4C
OP_LSL_L            1E5E
OP_LSL_W            1E70
OP_LSR              1DCE
OP_LSR_B            1DF2
OP_LSR_L            1E04
OP_LSR_W            1E16
OP_LSX              1D86
OP_MOVEA_L          1694
OP_MOVEA_W          16F4
OP_MOVEM_L          17A6
OP_MOVEM_W          1794
OP_MOVE_B           15E8
OP_MOVE_L           1676
OP_MOVE_W           16D6
OP_MULS             1C20
OP_NEG              17CC
OP_NEG_B            17EC
OP_NEG_L            181C
OP_NEG_W            1804
OP_NOT              1834
OP_NOT_B            1854
OP_NOT_L            1878
OP_NOT_W            1866
OP_ORI              158C
OP_ORI_B            15AC
OP_ORI_L            15D0
OP_ORI_W            15BE
OP_ROL              1F90
OP_ROL_B            1FB4
OP_ROL_L            1FC6
OP_ROL_W            1FD8
OP_ROR              1F36
OP_ROR_B            1F5A
OP_ROR_L            1F6C
OP_ROR_W            1F7E
OP_ROX              1DB6
OP_RTS              189E
OP_SUBA_L           1ABC
OP_SUBA_W           1AAA
OP_SUBI             1494
OP_SUBI_B           14B4
OP_SUBI_L           14D8
OP_SUBI_W           14C6
OP_SUB_B            1A62
OP_SUB_L            1A92
OP_SUB_W            1A7A
OUTPUT_PROCESSED_DATA  1310
POINTER_WORD        366E
POP_FRONT           2D42
POP_FRONT_RETURN    2D7C
POP_RETURN          2D40
POP_SHIFT_LOOP      2D5E
POP_STACK           2D34
PRINT_QUEUE         2D08
PRINT_QUEUE_HELPER  2D14
PRINT_QUEUE_RETURN  2D2A
PRINT_STACK         2CEE
PRINT_STACK_HELPER  2CFA
PRINT_STACK_RETURN  2D06
PROGLP              100A
PROMPT_END          30C0
PROMPT_START        3091
PUSH_STACK          2D2C
QUEUE_COUNTER       3650
REG_0               23EC
REG_1               23FA
REG_2               2408
REG_3               2416
REG_4               2424
REG_5               2432
REG_6               2440
REG_7               244E
REPEAT              245C
REPEATMSG           3117
RETURN              11E8
SRC_LOOP_SHIFTING   27DA
SRC_MASKING_NEXT    27E8
SRC_MODE            20AC
SRC_REGISTER        2394
SRC_REGISTER_FORMAT  3653
STACK               7000
STACK_HEX_CHAR      125A
STACK_HEX_CONT      125E
STACK_HEX_LOOP      1240
START               1004
START_ADDR          107C
S_ADDR_HX           3296
TEMP_REGISTER_FORMAT  3654
TERMINATE           2DAA
TESTING             1036
TMPINPUT            32A1
TMPOUTPUT           32F1
VAR_BYTE_END        365C
VAR_BYTE_START      3658
VAR_LONG_ADDRESS_MODE_CHECK  3664
VAR_TEMP_CLEANCOPY  3660
VR_E_ADDR           3246
VR_S_ADDR           31F6
WELCOME             2DBC
WORDMODE            2250

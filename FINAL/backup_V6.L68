00001004 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/7/2014 9:27:25 PM

00000000                             1  *---------------------------------------------------------------------------*
00000000                             2  * Title      : 68K Disassembler
00000000                             3  * Written by : Team Circle
00000000                             4  * Date       : 12/05/14
00000000                             5  * Description: Scans a section of memory and converts its
00000000                             6  *              contents to a listing of valid assembly 
00000000                             7  *              language instructions
00000000                             8  *---------------------------------------------------------------------------*
00000000                             9  
00000000                            10  *---------------------------------------------------------------------------*
00000000                            11  * System Equates                                                 
00000000                            12  *---------------------------------------------------------------------------*
00000000  =0000000D                 13  CR          EQU     $0D                     * ASCII for Carriage Return
00000000  =0000000A                 14  LF          EQU     $0A                     * ASCII for Line Feed 
00000000  =00007000                 15  STACK       EQU     $7000                   * Initial Stack Pointer                         
00000000                            16              
00000000                            17  *---------------------------------------------------------------------------*
00000000                            18  * Reserved Registers
00000000                            19  *---------------------------------------------------------------------------*  
00000000                            20  * D0 - I/O
00000000                            21  * D1 - Temporary storage of processing data
00000000                            22  * D3 - [PUSH_STACK]
00000000                            23  * D4 - Opcode size (0 - byte; 1- word; 2-long)
00000000                            24  * D5 - Processing data
00000000                            25  * D6 - Loop counter to print 30 lines
00000000                            26  * D7 - Error flag
00000000                            27  * A2 - [STACK POINTER]
00000000                            28  * A5 - Processing address in hex
00000000                            29  
00000000                            30  *---------------------------------------------------------------------------*
00000000                            31  * Start and loop program
00000000                            32  *---------------------------------------------------------------------------*  
00001000                            33              ORG     $1000
00001000  4FF8 7000                 34              LEA     STACK,SP
00001004                            35  START:            
00001004  4EB9 00001028             36              JSR     INTRO                 
0000100A  4EB9 0000106A             37  PROGLP      JSR     START_ADDR
00001010  4EB9 000010BC             38              JSR     END_ADDR
00001016  43F9 00002D14             39              LEA     ENDLINE_M,A1           * Add a new line
0000101C  103C 000E                 40              MOVE.B  #14, D0                  * Display A1
00001020  4E4F                      41              TRAP    #15
00001022                            42              
00001022  4EF9 00001236             43              JMP     MAIN
00001028                            44              
00001028                            45  *---------------------------------------------------------------------------*
00001028                            46  * INTRO: Display the introduction of the program
00001028                            47  *---------------------------------------------------------------------------*
00001028  43F9 00002832             48  INTRO       LEA     WELCOME,A1              * Load PROMPT_START
0000102E  103C 000E                 49              MOVE.B  #14,D0                  * Display A1
00001032  4E4F                      50              TRAP    #15
00001034  4E75                      51              RTS
00001036                            52  TESTING
00001036  11F8 7000 3333            53              MOVE.B  $7000,$3333
0000103C  31F8 7000 3333            54              MOVE.W  $7000,$3333
00001042  21F8 7000 3333            55              MOVE.L  $7000,$3333
00001048                            56              
00001048  1238 7000                 57              MOVE.B  $00007000,D1   
0000104C  3238 7000                 58              MOVE.W  $00007000,D1   
00001050  2238 7000                 59              MOVE.L  $00007000,D1  
00001054                            60            
00001054  11C1 3030                 61              MOVE.B  D1,$3030         
00001058  31C1 3030                 62              MOVE.W  D1,$3030         
0000105C  21C1 3030                 63              MOVE.L  D1,$3030
00001060                            64              
00001060  1001                      65              MOVE.B  D1,D0           * PASSED JUST SRC, NOT DEST
00001062  1210                      66              MOVE.B  (A0),D1         * PASSED JUST SRC, NOT DEST
00001064  1218                      67              MOVE.B  (A0)+,D1        * PASSED JUST SRC, NOT DEST
00001066  1220                      68              MOVE.B  -(A0),D1        * PASSED JUST SRC, NOT DEST
00001068                            69              
00001068  4E75                      70              RTS
0000106A                            71  *---------------------------------------------------------------------------*
0000106A                            72  * START_ADDR: Compute the starting address
0000106A                            73  *---------------------------------------------------------------------------*
0000106A                            74  START_ADDR
0000106A                            75              * Output
0000106A  43F9 00002B07             76              LEA     PROMPT_START,A1         * Load PROMPT_START 
00001070  103C 000E                 77              MOVE.B  #14,D0                  * Display PROMPT_START
00001074  4E4F                      78              TRAP    #15
00001076                            79      
00001076                            80              * Input
00001076  43F9 00002C6C             81              LEA     VR_S_ADDR,A1            * Load VR_S_ADDR
0000107C  103C 0002                 82              MOVE.B  #2,D0                   * Ask user for input
00001080  4E4F                      83              TRAP    #15
00001082                            84              
00001082                            85              * Error Checking (length)
00001082  0C01 0000                 86              CMPI.B  #0, D1                  * Check if input length <= 0
00001086  6F00 0098                 87              BLE     ERROR_1
0000108A  0C01 0008                 88              CMPI.B  #8, D1                  * Check if input length > 8
0000108E  6E00 0090                 89              BGT     ERROR_1
00001092                            90              
00001092                            91              * Conversion & Storage
00001092  4EB9 00001170             92              JSR     ASCII2HEX               * Jump to ASCII2HEX
00001098  0C07 0001                 93              CMPI.B  #1, D7                  * Check for error
0000109C  6700 0082                 94              BEQ     ERROR_1                 
000010A0  23C1 00002D0C             95              MOVE.L  D1, S_ADDR_HX           * Move the result to S_ADDR_HX 
000010A6                            96              
000010A6                            97              * Error Checking (Odd)
000010A6  43F9 00002D0C             98              LEA     S_ADDR_HX, A1           * Load 'S_ADDR_HX' for odd error
000010AC  4EB9 0000121A             99              JSR     IS_ODD                  * Check if the input address is odd
000010B2  0C07 0001                100              CMPI.B  #1, D7                  * Check for error
000010B6  6700 0088                101              BEQ     ERROR_3
000010BA                           102              
000010BA                           103              * Return
000010BA  4E75                     104              RTS     
000010BC                           105  *---------------------------------------------------------------------------*
000010BC                           106  * END_ADDR: Compute the ending address
000010BC                           107  *---------------------------------------------------------------------------*
000010BC                           108  END_ADDR
000010BC                           109              * Output
000010BC  43F9 00002B36            110              LEA     PROMPT_END,A1           * Load PROMPT_END
000010C2  103C 000E                111              MOVE.B  #14,D0                  * Display PROMPT_END
000010C6  4E4F                     112              TRAP    #15
000010C8                           113  
000010C8                           114              * Input
000010C8  43F9 00002CBC            115              LEA     VR_E_ADDR,A1            * Load VR_E_ADDR
000010CE  103C 0002                116              MOVE.B  #2,D0                   * Ask user for input
000010D2  4E4F                     117              TRAP    #15
000010D4                           118              
000010D4                           119              * Error Checking (length)
000010D4  0C01 0000                120              CMPI.B  #0, D1                  * Check if input length <= 0
000010D8  6F00 0056                121              BLE     ERROR_2
000010DC  0C01 0008                122              CMPI.B  #8, D1                  * Check if input length > 8
000010E0  6E00 004E                123              BGT     ERROR_2
000010E4                           124              
000010E4                           125              * Conversion & Storage
000010E4  4EB9 00001170            126              JSR     ASCII2HEX               * Jump to ASCII2HEX
000010EA  0C07 0001                127              CMPI.B  #1, D7                  * Check for error
000010EE  6700 0040                128              BEQ     ERROR_2
000010F2  23C1 00002D10            129              MOVE.L  D1, E_ADDR_HX           * Move the result to E_ADDR_HX
000010F8                           130              
000010F8                           131              * Error Checking (start > end case)
000010F8  2439 00002D0C            132              MOVE.L  S_ADDR_HX, D2           * Move the starting address to D2
000010FE  B282                     133              CMP.L   D2, D1                  * Compare starting and ending address
00001100  6300 005E                134              BLS     ERROR_5                 * Go to ERROR_5 if ending < starting
00001104                           135              
00001104                           136              * Error Checking (Odd case)
00001104  43F9 00002D10            137              LEA     E_ADDR_HX, A1           * Move the ending address
0000110A  4EB9 0000121A            138              JSR     IS_ODD                  * Go to IS_ODD for odd address checking
00001110  0C07 0001                139              CMPI.B  #1, D7                  * Check for an error flag
00001114  6700 003A                140              BEQ     ERROR_4
00001118                           141              
00001118                           142              * Inputs are valid
00001118  2A79 00002D0C            143              MOVE.L  S_ADDR_HX, A5           * Store the valid input in A5
0000111E                           144              
0000111E  4E75                     145              RTS
00001120                           146              
00001120                           147  *---------------------------------------------------------------------------*
00001120                           148  * ERROR_1: Address error (Invalid starting address)
00001120                           149  *---------------------------------------------------------------------------*
00001120                           150  ERROR_1
00001120  43F9 00002BFB            151              LEA     ERRMSG_1, A1            * Load ERRMSG_1
00001126  103C 000E                152              MOVE.B  #14, D0                 * Display ERRMSG_1
0000112A  4E4F                     153              TRAP    #15
0000112C  4EF8 106A                154              JMP     START_ADDR              * Jump to START_ADDR
00001130                           155      
00001130                           156  *---------------------------------------------------------------------------*
00001130                           157  * ERROR_2: Address error (Invalid ending address)
00001130                           158  *---------------------------------------------------------------------------*
00001130                           159  ERROR_2
00001130  43F9 00002BFB            160              LEA     ERRMSG_1, A1            * Load ERRMSG_1
00001136  103C 000E                161              MOVE.B  #14, D0                 * Display ERRMSG_1
0000113A  4E4F                     162              TRAP    #15
0000113C  4EF8 10BC                163              JMP     END_ADDR                * Jump to END_ADDR
00001140                           164  
00001140                           165  *---------------------------------------------------------------------------*
00001140                           166  * ERROR_3: Address error (Odd starting address)
00001140                           167  *---------------------------------------------------------------------------*
00001140                           168  ERROR_3
00001140  43F9 00002C1A            169              LEA     ERRMSG_3, A1
00001146  103C 000E                170              MOVE.B  #14, D0
0000114A  4E4F                     171              TRAP    #15
0000114C  4EF8 106A                172              JMP     START_ADDR
00001150                           173     
00001150                           174  *---------------------------------------------------------------------------*
00001150                           175  * ERROR_4: Address error (Odd ending address)
00001150                           176  *---------------------------------------------------------------------------*         
00001150                           177  ERROR_4
00001150  43F9 00002C1A            178              LEA     ERRMSG_3, A1
00001156  103C 000E                179              MOVE.B  #14, D0
0000115A  4E4F                     180              TRAP    #15
0000115C  4EF8 10BC                181              JMP     END_ADDR
00001160                           182            
00001160                           183  *---------------------------------------------------------------------------*
00001160                           184  * ERROR_3: Address error (Ending address is less than starting address)
00001160                           185  *---------------------------------------------------------------------------*
00001160                           186  ERROR_5
00001160  43F9 00002C3F            187              LEA     ERRMSG_5, A1
00001166  103C 000E                188              MOVE.B  #14, D0
0000116A  4E4F                     189              TRAP    #15
0000116C  4EF8 10BC                190              JMP     END_ADDR
00001170                           191    
00001170                           192  *---------------------------------------------------------------------------*
00001170                           193  * ASCII2HEX: Convert ASCii to Hexadecimal
00001170                           194  * Reserved registers: A1 = Source, D1 = Destination, D2 = Byte, D7 = Error
00001170                           195  *---------------------------------------------------------------------------*
00001170  4281                     196  ASCII2HEX   CLR.L   D1                      * Clear the destination 
00001172  4287                     197              CLR.L   D7                      * Set the error flag to 0
00001174  4282                     198              CLR.L   D2                      * Clear D2 for temp storage
00001176                           199              
00001176  1419                     200  ASC2HXLP    MOVE.B  (A1)+, D2               * Read a byte to D2
00001178  0C02 0000                201              CMPI.B  #0, D2                  * Check for NULL (indicates the end of source)
0000117C  6700 0058                202              BEQ     RETURN                  * If it's NULL, go to return
00001180  0C02 0066                203              CMPI.B  #102, D2                * Decimal ASCII value of f is 102
00001184  6E00 004C                204              BGT     ASC_ERR                 * ASCII > f (invalid input) 
00001188  0C02 0061                205              CMPI.B  #97, D2                 * Decimal ASCII value of a is 97
0000118C  6C00 0026                206              BGE     ASC_LOW                 * ASCII >= a (valid input)
00001190  0C02 0046                207              CMPI.B  #70, D2                 * Decimal ASCII value of F is 70
00001194  6E00 003C                208              BGT     ASC_ERR                 * ASCII > F (invalid input)
00001198  0C02 0041                209              CMPI.B  #65, D2                 * Decimal ASCII value of A is 65
0000119C  6C00 001E                210              BGE     ASC_UPP                 * ASCII >= A (valid input)
000011A0  0C02 0039                211              CMPI.B  #57, D2                 * Decimal value of 9 is 57
000011A4  6E00 002C                212              BGT     ASC_ERR                 * ASCII > 9 (invalid input)
000011A8  0C02 0030                213              CMPI.B  #48, D2                 * Decimal ASCII value of 0 is 48
000011AC  6C00 0016                214              BGE     ASC_NUM                 * ASCII >= 0 (valid input)
000011B0  6000 0020                215              BRA     ASC_ERR                 * Invalid input
000011B4                           216  
000011B4  0442 0057                217  ASC_LOW     SUBI    #87, D2                 * Convert the ASCII input to Hex
000011B8  6000 0012                218              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011BC                           219              
000011BC  0442 0037                220  ASC_UPP     SUBI    #55, D2                 * Convert the ASCII input to Hex
000011C0  6000 000A                221              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011C4                           222              
000011C4  0442 0030                223  ASC_NUM     SUBI    #48, D2                 * Convert the ASCII input to Hex
000011C8  6000 0002                224              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011CC                           225              
000011CC  E981                     226  ASC_SFT     ASL.L   #4, D1                  * Shift the dest to left by 4 bits
000011CE  D202                     227              ADD.B   D2, D1                  * Add the converted input to D1
000011D0  60A4                     228              BRA     ASC2HXLP                * Loop
000011D2                           229  
000011D2  1E3C 0001                230  ASC_ERR     MOVE.B  #1, D7                  * Set the error flag to 1            
000011D6  4E75                     231  RETURN      RTS     
000011D8                           232  
000011D8                           233  *---------------------------------------------------------------------------*
000011D8                           234  * HEX2ASCII: Convert Hexadecimal to ASCii 
000011D8                           235  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
000011D8                           236  *---------------------------------------------------------------------------*
000011D8  0C02 0008                237  HEX2ASCII   CMPI.B  #8, D2                  * Check to see if the size is long
000011DC  6700 000E                238              BEQ     HEX_LOOP
000011E0  4841                     239              SWAP    D1
000011E2  0C02 0002                240              CMPI.B  #2,D2
000011E6  6600 0004                241              BNE     HEX_LOOP
000011EA  E189                     242              LSL.L   #8,D1
000011EC                           243             
000011EC  E999                     244  HEX_LOOP    ROL.L   #4, D1                  * Roll D1 to left
000011EE  2601                     245              MOVE.L  D1, D3                  * Move D1 to D3
000011F0  0283 0000000F            246              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
000011F6  0C03 0009                247              CMPI.B  #9, D3                  * Compare te digit
000011FA  6E00 000A                248              BGT     HEX_CHAR              
000011FE  0603 0030                249              ADDI.B  #48,D3                  * Add 48 for numerical output
00001202  6000 0006                250              BRA     HEX_CONT
00001206                           251              
00001206  0603 0037                252  HEX_CHAR    ADDI.B  #55,D3                  * Add 55 for character output
0000120A                           253  
0000120A  12C3                     254  HEX_CONT    MOVE.B  D3, (A1)+               * Place into A1
0000120C  5342                     255              SUBI    #1, D2                  * Decrement the size
0000120E  0C02 0000                256              CMPI.B  #0, D2                  * Check if D2 is 0
00001212  66D8                     257              BNE     HEX_LOOP                * Loop
00001214  12BC 0000                258              MOVE.B  #$0,(A1)                * Null terminator
00001218  4E75                     259              RTS
0000121A                           260  
0000121A                           261  *---------------------------------------------------------------------------*
0000121A                           262  * IS_ODD: Check whether the source address is odd
0000121A                           263  * Reserved registers: A1 = Source, D1 = Result, D7 = error flag
0000121A                           264  *---------------------------------------------------------------------------*
0000121A  4281                     265  IS_ODD      CLR.L   D1                      * Clear the result
0000121C  4287                     266              CLR.L   D7                      * Set the error flag to 0
0000121E  2211                     267              MOVE.L  (A1),D1                * Temp store the checking address to D1
00001220  82FC 0002                268              DIVU    #2, D1                  * Divide the result by 2
00001224  4841                     269              SWAP    D1                      * Swap remainder with quotient
00001226  0C01 0001                270              CMPI.B  #1, D1                  * Check for error
0000122A  6700 0004                271              BEQ     IS_ODD_ERR
0000122E  4E75                     272              RTS
00001230                           273              
00001230  1E3C 0001                274  IS_ODD_ERR  MOVE.B  #1, D7
00001234  4E75                     275              RTS
00001236                           276  
00001236                           277  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*
00001236                           278  * MAIN                    
00001236                           279  * A2: STACK POINTER                                                      MAIN                                                                        MAIN
00001236                           280  * A5: Processing address
00001236                           281  *
00001236                           282  * D3: USED FOR PUSHING INTO STACK
00001236                           283  *     To push into stack => MOVE.W #DATA,D3 
00001236                           284  *                           BSR    PUSH_STACK
00001236                           285  *     To print stack     => BSR    PRINT_STACK 
00001236                           286  *     To clear stack     => BSR    CLEAR_STACK
00001236                           287  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*  
00001236                           288  MAIN        
00001236                           289              *initialize stack pointer
00001236  33FC 0000 000030C4       290              MOVE.W  #0,COUNTER
0000123E  347C 7000                291              MOVEA.W #STACK,A2
00001242  163C 0020                292              MOVE.B  #' ',D3
00001246  6100 155A                293              BSR     PUSH_STACK
0000124A  6100 1556                294              BSR     PUSH_STACK
0000124E  6100 1552                295              BSR     PUSH_STACK
00001252                           296              
00001252                           297              * clear registers for temp storage
00001252  4280                     298              CLR.L   D0                   
00001254  4281                     299              CLR.L   D1                   
00001256  227C 00000000            300              MOVEA.L #0, A1                
0000125C                           301              
0000125C  220D                     302              MOVE.L  A5,D1                   * check to see if the address is fully read
0000125E  23CD 00002D0C            303              MOVE.L  A5,S_ADDR_HX
00001264  B2B9 00002D10            304              CMP.L   E_ADDR_HX,D1
0000126A  6C00 1196                305              BGE     REPEAT                  * go to repeat for user action
0000126E                           306  
0000126E  43F9 00002D67            307              LEA     TMPOUTPUT,A1            * allocate storage to hold output
00001274  143C 0008                308              MOVE.B  #8,D2                   * set the output size
00001278  4EB8 11D8                309              JSR     HEX2ASCII               
0000127C  43F9 00002D67            310              LEA     TMPOUTPUT,A1
00001282  103C 000E                311              MOVE.B  #14,D0
00001286  4E4F                     312              TRAP    #15
00001288                           313              
00001288  4285                     314              CLR.L    D5                      * clear the processing data
0000128A  3A1D                     315              MOVE.W  (A5)+,D5                 * copy the currently processing data in A5 over to D5
0000128C                           316                                               * advance the current instruction pointer to the next
0000128C                           317                                               * instruction in memory
0000128C                           318  *----------------------------------------*
0000128C                           319  * Registers          
0000128C                           320  * [D1] - COPY OF D5
0000128C                           321  * [D5] - DATA TO BE PROCESSED
0000128C                           322  * [D6] - COUNTER FOR LINES PROCESSED
0000128C                           323  *
0000128C                           324  * [D4]      - ERROR FLAG BEFORE PRINTING
0000128C                           325  * [STACK]   - PRINTS PROCESS DATA
0000128C                           326  * [COUNTER] - KEEPS TRACK OF STACK INCREMENT
0000128C                           327  *
0000128C                           328  * [A1] - USED FOR JUMPING/PRINTING
0000128C                           329  *
0000128C                           330  *----------------------------------------*
0000128C                           331  
0000128C                           332              
0000128C                           333              *Processing the first 4 most significant bits 
0000128C  2205                     334              MOVE.L  D5,D1                    * copy the current processing data to D1
0000128E  143C 000C                335              MOVE.B  #12,D2                   * shift to right by 12 bits
00001292  E469                     336              LSR.W   D2,D1                    * [D2] Temporarily used D2 for shifting bits
00001294  C2FC 0006                337              MULU    #6,D1                    * form offset
00001298  43F9 00001306            338              LEA     JMPTABLE,A1              * index into table
0000129E  4EB1 1000                339              JSR     0(A1,D1)                 * jump indirect with index
000012A2                           340              
000012A2                           341              *SECURED EA*
000012A2  B83C 0001                342              CMP.B   #1,D4                    * ERROR FLAG CHECK [ERROR WHEN D4 == 1]
000012A6  6600 0012                343              BNE     OUTPUT_PROCESSED_DATA    * PRINTS PROCESSED OP-CODE & EA
000012AA  6100 01E8                344              BSR     OP_DATA                  * PRINT ERROR MESSAGE "DATA"
000012AE  6100 155E                345              BSR     CLEAR_STACK              * CLEARS THE STACK 
000012B2  183C 0000                346              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
000012B6  6000 0022                347              BRA     DISPLAY_30_LINES         * GO TO LAST STEP
000012BA                           348             
000012BA                           349  OUTPUT_PROCESSED_DATA       
000012BA  163C 000D                350              MOVE.B  #$D,D3                  *carriage return
000012BE  6100 14E2                351              BSR     PUSH_STACK
000012C2  163C 000A                352              MOVE.B  #$A,D3                  *new line feed
000012C6  6100 14DA                353              BSR     PUSH_STACK
000012CA  163C 0000                354              MOVE.B  #$0,D3                  *null
000012CE  6100 14D2                355              BSR     PUSH_STACK
000012D2                           356       
000012D2  6100 14AA                357              BSR     PRINT_QUEUE
000012D6  183C 0000                358              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
000012DA                           359  DISPLAY_30_LINES
000012DA                           360              * display 30 lines per page
000012DA  5206                     361              ADDI.B  #1,D6
000012DC  0C06 001E                362              CMPI.B  #30,D6
000012E0  6C00 0006                363              BGE     NEXTLINES
000012E4  6000 FF50                364              BRA     MAIN
000012E8                           365            
000012E8                           366  *---------------------------------------------------------------------------*
000012E8                           367  * NEXTLINES: receive input from user to print the next 30 lines
000012E8                           368  *---------------------------------------------------------------------------*  
000012E8  4206                     369  NEXTLINES   CLR.B   D6
000012EA  43F9 00002B63            370              LEA     DISP_NEXT,A1
000012F0  103C 000E                371              MOVE.B  #14,D0
000012F4  4E4F                     372              TRAP    #15
000012F6  43F9 00002D17            373              LEA     TMPINPUT,A1
000012FC  103C 0002                374              MOVE.B  #2,D0
00001300  4E4F                     375              TRAP    #15
00001302  4EF8 1236                376              JMP     MAIN
00001306                           377    
00001306                           378  *---------------------------------------------------------------------------*
00001306                           379  * JMPTABLE: OP code jump/branch table used to decode and display opcodes
00001306                           380  *---------------------------------------------------------------------------*  
00001306  4EF9 00001366            381  JMPTABLE    JMP     OP0000  * CMPI/ORI/BTST/EORI/SUBI/BTST
0000130C  4EF9 0000158C            382              JMP     OP0001  * MOVE.B                                        *WORKING ON - JOSEPH
00001312  4EF9 000015F6            383              JMP     OP0010  * MOVE.L/MOVEA.L
00001318  4EF9 00001658            384              JMP     OP0011  * MOVE.W/MOVEA.W
0000131E  4EF9 000016B8            385              JMP     OP0100  * MOVEM/LEA/NEG/NOT/JSR/RTS
00001324  4EF9 00001852            386              JMP     OP0101  * ADDQ
0000132A  4EF9 000018CE            387              JMP     OP0110  * BRA/Bcc (BEQ/BNE/BLT/BHI)
00001330  4EF9 0000195C            388              JMP     OP0111  * MOVEQ (unassigned)
00001336  4EF9 00001960            389              JMP     OP1000  * DIVS
0000133C  4EF9 0000199C            390              JMP     OP1001  * SUB/SUBA
00001342  4EF9 00001A74            391              JMP     OP1010  * Unassigned 
00001348  4EF9 00001A78            392              JMP     OP1011  * CMP/EOR/CMPA
0000134E  4EF9 00001B74            393              JMP     OP1100  * MULS/AND
00001354  4EF9 00001C10            394              JMP     OP1101  * ADD/ADDA
0000135A  4EF9 00001CE2            395              JMP     OP1110  * LSR/LSL/ASR/ASL/ROL/ROR
00001360  4EF9 00001F90            396              JMP     OP1111  * Special/Reserved
00001366                           397              
00001366                           398  *---------------------------------------------------------------------------*
00001366                           399  * OP0000: decode CMPI/ORI/BTST/SUBI/EORI
00001366                           400  *---------------------------------------------------------------------------*           
00001366                           401  OP0000                                                                                  
00001366  4281                     402              CLR.L   D1          * to temporarily store the address to process
00001368  4280                     403              CLR.L   D0  
0000136A  4284                     404              CLR.L   D4                 
0000136C  227C 00000000            405              MOVEA.L #0, A1                
00001372                           406              * Check for ORI (0000 0000 xx (size) xxx (EA mode) xxx(EA reg)
00001372                           407              * Check if bit 11,10,9,8 are 0000)
00001372  2205                     408              MOVE.L  D5,D1
00001374  0281 00000F00            409              ANDI.L  #$0F00,D1
0000137A  0C81 00000000            410              CMPI.L  #$0000,D1   * if they are 0000, it is ORI
00001380  6700 01B4                411              BEQ     OP_ORI
00001384                           412  
00001384                           413              * check for CMPI (0000 1100 xx (size) xxx (EA mode) xxx (EA reg)
00001384                           414              * check if bit 11,10,9,8 are 1100
00001384  4281                     415              CLR.L   D1
00001386  2205                     416              MOVE.L  D5,D1
00001388  0281 00000F00            417              ANDI.L  #$0F00,D1
0000138E  0C81 00000C00            418              CMPI.L  #$0C00,D1
00001394  6700 014A                419              BEQ     OP_CMPI
00001398                           420              
00001398                           421              * check for SUBI
00001398  4281                     422              CLR.L   D1
0000139A  2205                     423              MOVE.L  D5,D1
0000139C  0281 00000F00            424              ANDI.L  #$0F00,D1
000013A2  0C81 00000400            425              CMPI.L  #$0400,D1
000013A8  6700 0094                426              BEQ     OP_SUBI
000013AC                           427              
000013AC                           428              * check for EORI
000013AC  4281                     429              CLR.L   D1
000013AE  2205                     430              MOVE.L  D5,D1
000013B0  0281 00000F00            431              ANDI.L  #$0F00,D1
000013B6  0C81 00000A00            432              CMPI.L  #$0A00,D1
000013BC  6700 002A                433              BEQ     OP_EORI
000013C0                           434              
000013C0                           435              * check for BTST
000013C0  4281                     436              CLR.L   D1
000013C2  2205                     437              MOVE.L  D5,D1
000013C4  EA99                     438              ROR.L   #5,D1
000013C6  0281 00000008            439              ANDI.L  #$8,D1
000013CC  0C01 0008                440              CMPI.B  #8,D1
000013D0  6700 0008                441              BEQ     OP_BTST
000013D4                           442  
000013D4                           443              * OP0000 series other than ORI/CMPI/BTST/EORI
000013D4  4EF9 00001494            444              JMP     OP_DATA
000013DA                           445              
000013DA                           446  *---------------------------------------------------------------------------*
000013DA                           447  * OP_BTST: display BTST
000013DA                           448  *---------------------------------------------------------------------------* 
000013DA  43F9 00002DF0            449  OP_BTST     LEA     DISP_BTST,A1
000013E0  103C 000E                450              MOVE.B  #14,D0
000013E4  4E4F                     451              TRAP    #15
000013E6  4E75                     452              RTS
000013E8                           453  
000013E8                           454  *---------------------------------------------------------------------------*
000013E8                           455  * OP_EORI: decode and display EORI
000013E8                           456  *---------------------------------------------------------------------------* 
000013E8                           457  OP_EORI
000013E8  4281                     458              CLR.L   D1
000013EA  4284                     459              CLR.L   D4
000013EC  2205                     460              MOVE.L  D5,D1
000013EE  EC99                     461              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000013F0  0C01 0000                462              CMPI.B  #0,D1
000013F4  6700 0012                463              BEQ     OP_EORI_B    * size is byte
000013F8  0C01 0001                464              CMPI.B  #1,D1
000013FC  6700 001C                465              BEQ     OP_EORI_W    * size is word
00001400  0C01 0002                466              CMPI.B  #2,D1
00001404  6700 0026                467              BEQ     OP_EORI_L    * size is long
00001408                           468  
00001408                           469  OP_EORI_B    * size is byte    
00001408  183C 0000                470              MOVE.B  #0,D4
0000140C  43F9 00002DD2            471              LEA     DISP_EORI_B,A1
00001412  103C 000E                472              MOVE.B  #14,D0
00001416  4E4F                     473              TRAP    #15
00001418  4E75                     474              RTS
0000141A                           475              
0000141A                           476  OP_EORI_W    * size is word
0000141A  183C 0001                477              MOVE.B  #1,D4
0000141E  43F9 00002DDC            478              LEA     DISP_EORI_W,A1
00001424  103C 000E                479              MOVE.B  #14,D0
00001428  4E4F                     480              TRAP    #15
0000142A  4E75                     481              RTS
0000142C                           482              
0000142C                           483  OP_EORI_L    * size is long
0000142C  183C 0002                484              MOVE.B  #2,D4
00001430  43F9 00002DE6            485              LEA     DISP_EORI_L,A1
00001436  103C 000E                486              MOVE.B  #14,D0
0000143A  4E4F                     487              TRAP    #15
0000143C  4E75                     488              RTS
0000143E                           489              
0000143E                           490  *---------------------------------------------------------------------------*
0000143E                           491  * OP_SUBI: decode SUBI.B/.W/.L
0000143E                           492  *---------------------------------------------------------------------------* 
0000143E                           493  OP_SUBI
0000143E  4281                     494              CLR.L   D1
00001440  4284                     495              CLR.L   D4
00001442  2205                     496              MOVE.L  D5,D1
00001444  EC99                     497              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001446  0C01 0000                498              CMPI.B  #0,D1
0000144A  6700 0012                499              BEQ     OP_SUBI_B    * size is byte
0000144E  0C01 0001                500              CMPI.B  #1,D1
00001452  6700 001C                501              BEQ     OP_SUBI_W    * size is word
00001456  0C01 0002                502              CMPI.B  #2,D1
0000145A  6700 0026                503              BEQ     OP_SUBI_L    * size is long
0000145E                           504  
0000145E                           505  OP_SUBI_B    * size is byte    
0000145E  183C 0000                506              MOVE.B  #0,D4
00001462  43F9 00002EDE            507              LEA     DISP_SUBI_B,A1
00001468  103C 000E                508              MOVE.B  #14,D0
0000146C  4E4F                     509              TRAP    #15
0000146E  4E75                     510              RTS
00001470                           511              
00001470                           512  OP_SUBI_W    * size is word
00001470  183C 0001                513              MOVE.B  #1,D4
00001474  43F9 00002EE8            514              LEA     DISP_SUBI_W,A1
0000147A  103C 000E                515              MOVE.B  #14,D0
0000147E  4E4F                     516              TRAP    #15
00001480  4E75                     517              RTS
00001482                           518              
00001482                           519  OP_SUBI_L    * size is long
00001482  183C 0002                520              MOVE.B  #2,D4
00001486  43F9 00002EF2            521              LEA     DISP_SUBI_L,A1
0000148C  103C 000E                522              MOVE.B  #14,D0
00001490  4E4F                     523              TRAP    #15
00001492  4E75                     524              RTS
00001494                           525              
00001494                           526  *---------------------------------------------------------------------------*
00001494                           527  * OP_DATA : unidentified opcode
00001494                           528  *---------------------------------------------------------------------------* 
00001494                           529  OP_DATA
00001494  4280                     530              CLR.L   D0                   
00001496  4281                     531              CLR.L   D1     
00001498  4284                     532              CLR.L   D4                    
0000149A  227C 00000000            533              MOVEA.L #0, A1             
000014A0  4287                     534              CLR.L   D7
000014A2  1E3C 0001                535              MOVE.B  #1,D7                   * error flag is true
000014A6                           536              
000014A6  43F9 00002E16            537              LEA     DISP_DATA,A1
000014AC  103C 000E                538              MOVE.B  #14,D0
000014B0  4E4F                     539              TRAP    #15
000014B2                           540              
000014B2  4EF9 000014B8            541              JMP     EA_DATA
000014B8                           542             
000014B8                           543             
000014B8                           544  *---------------------------------------------------------------------------*
000014B8                           545  * EA_DATA
000014B8                           546  *---------------------------------------------------------------------------*       
000014B8  43F9 00002D67            547  EA_DATA     LEA     TMPOUTPUT,A1    * load the temporarily stored output address
000014BE  2205                     548              MOVE.L  D5,D1           * transfer the processing data to D1
000014C0  7404                     549              MOVE.L  #4,D2           * set to word size
000014C2  4EB8 11D8                550              JSR     HEX2ASCII       * prepare output in ascii
000014C6  43F9 00003089            551              LEA     DISP_HEX,A1     * display $ symbol
000014CC  103C 000E                552              MOVE.B  #14,D0      
000014D0  4E4F                     553              TRAP    #15
000014D2  43F9 00002D67            554              LEA     TMPOUTPUT,A1    * display with a new line
000014D8  103C 000D                555              MOVE.B  #13,D0
000014DC  4E4F                     556              TRAP    #15
000014DE                           557  
000014DE  4E75                     558              RTS
000014E0                           559              
000014E0                           560  *---------------------------------------------------------------------------*
000014E0                           561  * OP_CMPI : decode CMPI and its size
000014E0                           562  *---------------------------------------------------------------------------*          
000014E0                           563  OP_CMPI
000014E0  4281                     564              CLR.L   D1
000014E2  4284                     565              CLR.L   D4
000014E4  2205                     566              MOVE.L  D5,D1
000014E6  EC99                     567              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000014E8  0C01 0000                568              CMPI.B  #0,D1
000014EC  6700 0012                569              BEQ     OP_CMPI_B    * size is byte
000014F0  0C01 0001                570              CMPI.B  #1,D1
000014F4  6700 001C                571              BEQ     OP_CMPI_W    * size is word
000014F8  0C01 0002                572              CMPI.B  #2,D1
000014FC  6700 0026                573              BEQ     OP_CMPI_L    * size is long
00001500                           574  
00001500                           575  OP_CMPI_B    * size is byte    
00001500  183C 0000                576              MOVE.B  #0,D4
00001504  43F9 00002DF8            577              LEA     DISP_CMPI_B,A1
0000150A  103C 000E                578              MOVE.B  #14,D0
0000150E  4E4F                     579              TRAP    #15
00001510  4E75                     580              RTS
00001512                           581              
00001512                           582  OP_CMPI_W    * size is word
00001512  183C 0001                583              MOVE.B  #1,D4
00001516  43F9 00002E02            584              LEA     DISP_CMPI_W,A1
0000151C  103C 000E                585              MOVE.B  #14,D0
00001520  4E4F                     586              TRAP    #15
00001522  4E75                     587              RTS
00001524                           588              
00001524                           589  OP_CMPI_L    * size is long
00001524  183C 0002                590              MOVE.B  #2,D4
00001528  43F9 00002E0C            591              LEA     DISP_CMPI_L,A1
0000152E  103C 000E                592              MOVE.B  #14,D0
00001532  4E4F                     593              TRAP    #15
00001534  4E75                     594              RTS
00001536                           595   
00001536                           596  *---------------------------------------------------------------------------*
00001536                           597  * OP_ORI : decode ORI and its size
00001536                           598  *---------------------------------------------------------------------------* 
00001536                           599  OP_ORI      
00001536  4281                     600              CLR.L   D1
00001538  4284                     601              CLR.L   D4
0000153A  2205                     602              MOVE.L  D5,D1
0000153C  EC99                     603              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
0000153E  0C01 0000                604              CMPI.B  #0,D1
00001542  6700 0012                605              BEQ     OP_ORI_B    * size is byte
00001546  0C01 0001                606              CMPI.B  #1,D1
0000154A  6700 001C                607              BEQ     OP_ORI_W    * size is word
0000154E  0C01 0002                608              CMPI.B  #2,D1
00001552  6700 0026                609              BEQ     OP_ORI_L    * size is long
00001556                           610  
00001556                           611  OP_ORI_B    * size is byte    
00001556  183C 0000                612              MOVE.B  #0,D4
0000155A  43F9 00002DB7            613              LEA     DISP_ORI_B,A1
00001560  103C 000E                614              MOVE.B  #14,D0
00001564  4E4F                     615              TRAP    #15
00001566  4E75                     616              RTS
00001568                           617              
00001568                           618  OP_ORI_W    * size is word
00001568  183C 0001                619              MOVE.B  #1,D4
0000156C  43F9 00002DC0            620              LEA     DISP_ORI_W,A1
00001572  103C 000E                621              MOVE.B  #14,D0
00001576  4E4F                     622              TRAP    #15
00001578  4E75                     623              RTS
0000157A                           624              
0000157A                           625  OP_ORI_L    * size is long
0000157A  183C 0002                626              MOVE.B  #2,D4
0000157E  43F9 00002DC9            627              LEA     DISP_ORI_L,A1
00001584  103C 000E                628              MOVE.B  #14,D0
00001588  4E4F                     629              TRAP    #15
0000158A  4E75                     630              RTS
0000158C                           631          
0000158C                           632  *---------------------------------------------------------------------------*
0000158C                           633  * OP0001: MOVE.B
0000158C                           634  *---------------------------------------------------------------------------*
0000158C                           635  OP0001      
0000158C  4EF9 00001592            636              JMP     OP_MOVE_B   * display MOVE.B
00001592                           637              
00001592                           638  *---------------------------------------------------------------------------*
00001592                           639  * OP_MOVE_B: display MOVE_B and proceed to EA
00001592                           640  *---------------------------------------------------------------------------*
00001592                           641  OP_MOVE_B                                                                       
00001592                           642             
00001592                           643             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001592  13FC 0081 000030C8       644             MOVE.B   #$81,DEST_REGISTER_FORMAT
0000159A  13FC 0000 000030C9       645             MOVE.B   #$00,SRC_REGISTER_FORMAT
000015A2                           646             
000015A2                           647             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
000015A2  13FC 00B9 000030CB       648             MOVE.B   #$B9,GET_DST_START_END
000015AA  13FC 0020 000030CC       649             MOVE.B   #$20,GET_SRC_START_END
000015B2                           650             
000015B2                           651              *CLEAR D3
000015B2  4283                     652              CLR.L   D3
000015B4                           653              *LOAD STACK WITH THIS OPMODE
000015B4  6100 11EC                654              BSR     PUSH_STACK
000015B8  163C 004D                655              MOVE.B  #'M',D3
000015BC  6100 11E4                656              BSR     PUSH_STACK
000015C0  163C 004F                657              MOVE.B  #'O',D3
000015C4  6100 11DC                658              BSR     PUSH_STACK
000015C8  163C 0056                659              MOVE.B  #'V',D3
000015CC  6100 11D4                660              BSR     PUSH_STACK
000015D0  163C 0045                661              MOVE.B  #'E',D3
000015D4  6100 11CC                662              BSR     PUSH_STACK
000015D8  163C 002E                663              MOVE.B  #'.',D3
000015DC  6100 11C4                664              BSR     PUSH_STACK
000015E0  163C 0042                665              MOVE.B  #'B',D3
000015E4  6100 11BC                666              BSR     PUSH_STACK
000015E8                           667              
000015E8  6100 0E5A                668              BSR     GET_EA_EA_SRC
000015EC  163C 002C                669              MOVE.B  #',',D3
000015F0  6100 11B0                670              BSR     PUSH_STACK
000015F4                           671              *BSR     GET_EA_EA_DEST
000015F4                           672              
000015F4                           673              *TODO: NEEDS DEST EA TOO
000015F4                           674              
000015F4  4E75                     675              RTS
000015F6                           676              
000015F6                           677             
000015F6                           678  *---------------------------------------------------------------------------*
000015F6                           679  * OP0010: decode MOVE.L/MOVEA.L
000015F6                           680  *---------------------------------------------------------------------------*
000015F6                           681  OP0010      
000015F6  183C 0002                682              MOVE.B  #2,D4
000015FA  4280                     683              CLR.L   D0                     
000015FC  4281                     684              CLR.L   D1                      
000015FE  227C 00000000            685              MOVEA.L #0, A1                 
00001604                           686              
00001604  2205                     687              MOVE.L  D5,D1
00001606  EA99                     688              ROR.L   #5,D1
00001608  0281 0000000E            689              ANDI.L  #$E,D1
0000160E  0C01 0002                690              CMPI.B  #2,D1
00001612  6700 0026                691              BEQ     OP_MOVEA_L
00001616                           692  
00001616  4EF9 0000161C            693              JMP     OP_MOVE_L
0000161C                           694             
0000161C                           695  
0000161C                           696  *---------------------------------------------------------------------------*
0000161C                           697  * OP_MOVE_L: display MOVE_L and proceed to EA
0000161C                           698  *---------------------------------------------------------------------------*
0000161C                           699  OP_MOVE_L   
0000161C  183C 0002                700              MOVE.B  #2,D4
00001620  227C 00000000            701              MOVEA.L #0, A1
00001626  43F9 00002E32            702              LEA     DISP_MOVE_L,A1
0000162C  103C 000E                703              MOVE.B  #14,D0
00001630  4E4F                     704              TRAP    #15
00001632                           705              
00001632  4EB9 00001FF4            706              JSR     EA_GEN
00001638  4E75                     707              RTS
0000163A                           708  
0000163A                           709  *---------------------------------------------------------------------------*
0000163A                           710  * OP_MOVEA_L: display MOVEA_L and proceed to EA
0000163A                           711  *---------------------------------------------------------------------------*
0000163A                           712  OP_MOVEA_L 
0000163A  183C 0002                713              MOVE.B  #2,D4
0000163E  227C 00000000            714              MOVEA.L #0, A1
00001644  43F9 0000307E            715              LEA     DISP_MOVEA_L,A1
0000164A  103C 000E                716              MOVE.B  #14,D0
0000164E  4E4F                     717              TRAP    #15
00001650  4EF9 00001FCE            718              JMP     EA_MOVEA
00001656                           719  
00001656  4E75                     720              RTS
00001658                           721              
00001658                           722  *---------------------------------------------------------------------------*
00001658                           723  * OP0011: decode MOVE.W/MOVEA.W
00001658                           724  *---------------------------------------------------------------------------*
00001658                           725  OP0011      
00001658  4280                     726              CLR.L   D0                      
0000165A  4281                     727              CLR.L   D1  
0000165C  4284                     728              CLR.L   D4                   
0000165E  227C 00000000            729              MOVEA.L #0, A1               
00001664  2205                     730              MOVE.L  D5,D1
00001666  EA99                     731              ROR.L   #5,D1
00001668  0281 0000000E            732              ANDI.L  #$E,D1
0000166E  0C01 0002                733              CMPI.B  #2,D1
00001672  6700 0026                734              BEQ     OP_MOVEA_W
00001676                           735              
00001676  4EF9 0000167C            736              JMP     OP_MOVE_W
0000167C                           737            
0000167C                           738  *---------------------------------------------------------------------------*
0000167C                           739  * OP_MOVE_W: display MOVE_W and proceed to EA
0000167C                           740  *---------------------------------------------------------------------------*
0000167C                           741  OP_MOVE_W   
0000167C  183C 0001                742              MOVE.B  #1,D4
00001680  227C 00000000            743              MOVEA.L #0, A1
00001686  43F9 00002E28            744              LEA     DISP_MOVE_W,A1
0000168C  103C 000E                745              MOVE.B  #14,D0
00001690  4E4F                     746              TRAP    #15
00001692  4EF9 00001FF4            747              JMP     EA_GEN
00001698                           748  
00001698  4E75                     749              RTS
0000169A                           750  
0000169A                           751  *---------------------------------------------------------------------------*
0000169A                           752  * OP_MOVEA_W: display MOVEA and proceed to EA
0000169A                           753  *---------------------------------------------------------------------------*
0000169A                           754  OP_MOVEA_W 
0000169A  183C 0001                755              MOVE.B  #1,D4
0000169E  227C 00000000            756              MOVEA.L #0, A1
000016A4  43F9 00003073            757              LEA     DISP_MOVEA_W,A1
000016AA  103C 000E                758              MOVE.B  #14,D0
000016AE  4E4F                     759              TRAP    #15
000016B0  4EF9 00001FCE            760              JMP     EA_MOVEA
000016B6                           761  
000016B6  4E75                     762              RTS
000016B8                           763            
000016B8                           764  *---------------------------------------------------------------------------*
000016B8                           765  * OP0100: decode MOVEM/LEA/NEG/JSR/RTS/NOT
000016B8                           766  *---------------------------------------------------------------------------*
000016B8                           767  OP0100
000016B8  4280                     768              CLR.L   D0                      
000016BA  4281                     769              CLR.L   D1  
000016BC  4284                     770              CLR.L   D4                      
000016BE  227C 00000000            771              MOVEA.L #0, A1                  
000016C4  2205                     772              MOVE.L  D5,D1  
000016C6                           773              
000016C6                           774              * check for RTS
000016C6  0C41 4E75                775              CMPI.W  #$4E75,D1   * 0100 1110 0111 0101
000016CA  6700 0178                776              BEQ     OP_RTS
000016CE                           777              
000016CE                           778              * check for JSR     * 0100 1110 10 xxx (ea mode) xxx (ea reg)
000016CE  4281                     779              CLR.L   D1 
000016D0  2205                     780              MOVE.L  D5,D1  
000016D2  0241 0F00                781              ANDI.W  #$0F00,D1
000016D6  0C41 0E00                782              CMPI.W  #$0E00,D1
000016DA  6700 0154                783              BEQ     OP_JSR
000016DE                           784  
000016DE                           785              * check for NEG     * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
000016DE  4281                     786              CLR.L   D1 
000016E0  2205                     787              MOVE.L  D5,D1  
000016E2  0241 0F00                788              ANDI.W  #$0F00,D1
000016E6  0C41 0400                789              CMPI.W  #$0400,D1
000016EA  6700 0086                790              BEQ     OP_NEG
000016EE                           791              
000016EE                           792              * check for NOT     * 0100 0110 xx (size) xxx (ea mode) xxx (ea reg)
000016EE  4281                     793              CLR.L   D1 
000016F0  2205                     794              MOVE.L  D5,D1  
000016F2  0241 0F00                795              ANDI.W  #$0F00,D1
000016F6  0C41 0600                796              CMPI.W  #$0600,D1
000016FA  6700 00DE                797              BEQ     OP_NOT
000016FE                           798              
000016FE                           799              * check for LEA     * 0100 xxx (reg) 111 xxx (ea mode) xxx (ea reg)
000016FE  4281                     800              CLR.L   D1 
00001700  2205                     801              MOVE.L  D5,D1  
00001702  E099                     802              ROR.L   #8,D1
00001704  0C01 0001                803              CMPI.B  #1,D1
00001708  6700 0054                804              BEQ     OP_LEA
0000170C                           805              
0000170C                           806              * check for MOVEM   * 0100 1 x 001 x (size) xxx (ea mode) xxx (ea reg)
0000170C  4281                     807              CLR.L   D1 
0000170E  2205                     808              MOVE.L  D5,D1  
00001710  EB59                     809              ROL.W   #5,D1
00001712  0C01 0001                810              CMPI.B  #1,D1
00001716  6600 FD7C                811              BNE     OP_DATA
0000171A  E959                     812              ROL.W   #4,D1
0000171C  0C01 0001                813              CMPI.B  #1,D1
00001720  6600 FD72                814              BNE     OP_DATA
00001724  E359                     815              ROL.W   #1,D1
00001726  0C01 0000                816              CMPI.B  #0,D1
0000172A  6700 000E                817              BEQ     OP_MOVEM_W
0000172E  0C01 0001                818              CMPI.B  #1,D1
00001732  6700 0018                819              BEQ     OP_MOVEM_L
00001736  4EF8 1494                820              JMP     OP_DATA
0000173A                           821  
0000173A                           822  *---------------------------------------------------------------------------*
0000173A                           823  * OP_MOVEM_W: display MOVEM_W
0000173A                           824  *---------------------------------------------------------------------------*    
0000173A                           825  OP_MOVEM_W  
0000173A  183C 0001                826              MOVE.B  #1,D4
0000173E  43F9 00002E87            827              LEA     DISP_MOVEM_W,A1
00001744  103C 000E                828              MOVE.B  #14,D0
00001748  4E4F                     829              TRAP    #15
0000174A  4E75                     830              RTS
0000174C                           831  
0000174C                           832  *---------------------------------------------------------------------------*
0000174C                           833  * OP_MOVEM_L: display MOVEM_L
0000174C                           834  *---------------------------------------------------------------------------*
0000174C                           835  OP_MOVEM_L  
0000174C  183C 0002                836              MOVE.B  #2,D4
00001750  43F9 00002E92            837              LEA     DISP_MOVEM_L,A1
00001756  103C 000E                838              MOVE.B  #14,D0
0000175A  4E4F                     839              TRAP    #15
0000175C  4E75                     840              RTS
0000175E                           841     
0000175E                           842  *---------------------------------------------------------------------------*
0000175E                           843  * OP_LEA: decode and display LEA
0000175E                           844  *---------------------------------------------------------------------------*
0000175E                           845  OP_LEA      
0000175E  43F9 00002E80            846              LEA     DISP_LEA,A1
00001764  103C 000E                847              MOVE.B  #14,D0
00001768  4E4F                     848              TRAP    #15
0000176A  4EF9 00001FCE            849              JMP     EA_MOVEA
00001770                           850  
00001770  4E75                     851              RTS
00001772                           852  
00001772                           853  *---------------------------------------------------------------------------*
00001772                           854  * OP_NEG: decode and display NEG 
00001772                           855  *---------------------------------------------------------------------------*
00001772                           856  OP_NEG      * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
00001772  4281                     857              CLR.L   D1
00001774  4284                     858              CLR.L   D4
00001776  2205                     859              MOVE.L  D5,D1
00001778  EC99                     860              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
0000177A  0C01 0000                861              CMPI.B  #0,D1
0000177E  6700 0012                862              BEQ     OP_NEG_B    * size is byte
00001782  0C01 0001                863              CMPI.B  #1,D1
00001786  6700 0022                864              BEQ     OP_NEG_W    * size is word
0000178A  0C01 0002                865              CMPI.B  #2,D1
0000178E  6700 0032                866              BEQ     OP_NEG_L    * size is long
00001792                           867                         
00001792                           868  OP_NEG_B    * size is byte   
00001792  183C 0000                869              MOVE.B  #0,D4 
00001796  43F9 00002E4A            870              LEA     DISP_NEG_B,A1
0000179C  103C 000E                871              MOVE.B  #14,D0
000017A0  4E4F                     872              TRAP    #15
000017A2                           873              
000017A2  4EB9 00001F94            874              JSR     EA_NOSRC
000017A8  4E75                     875              RTS
000017AA                           876              
000017AA                           877  OP_NEG_W    * size is word
000017AA  183C 0001                878              MOVE.B  #1,D4
000017AE  43F9 00002E53            879              LEA     DISP_NEG_W,A1
000017B4  103C 000E                880              MOVE.B  #14,D0
000017B8  4E4F                     881              TRAP    #15
000017BA  4EB9 00001F94            882              JSR     EA_NOSRC
000017C0  4E75                     883              RTS
000017C2                           884              
000017C2                           885  OP_NEG_L    * size is long
000017C2  183C 0002                886              MOVE.B  #2,D4
000017C6  43F9 00002E5C            887              LEA     DISP_NEG_L,A1
000017CC  103C 000E                888              MOVE.B  #14,D0
000017D0  4E4F                     889              TRAP    #15
000017D2  4EB9 00001F94            890              JSR     EA_NOSRC
000017D8                           891              
000017D8  4E75                     892              RTS
000017DA                           893  
000017DA                           894  *---------------------------------------------------------------------------*
000017DA                           895  * OP_NOT: decode and display NOT 
000017DA                           896  *---------------------------------------------------------------------------*
000017DA                           897  OP_NOT
000017DA  4281                     898              CLR.L   D1
000017DC  4284                     899              CLR.L   D4
000017DE  2205                     900              MOVE.L  D5,D1
000017E0  EC99                     901              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000017E2  0C01 0000                902              CMPI.B  #0,D1
000017E6  6700 0012                903              BEQ     OP_NOT_B    * size is byte
000017EA  0C01 0001                904              CMPI.B  #1,D1
000017EE  6700 001C                905              BEQ     OP_NOT_W    * size is word
000017F2  0C01 0002                906              CMPI.B  #2,D1
000017F6  6700 0026                907              BEQ     OP_NOT_L    * size is long
000017FA                           908                         
000017FA                           909  OP_NOT_B    * size is byte   
000017FA  183C 0000                910              MOVE.B  #0,D4 
000017FE  43F9 00002E65            911              LEA     DISP_NOT_B,A1
00001804  103C 000E                912              MOVE.B  #14,D0
00001808  4E4F                     913              TRAP    #15
0000180A  4E75                     914              RTS
0000180C                           915              
0000180C                           916  OP_NOT_W    * size is word
0000180C  183C 0001                917              MOVE.B  #1,D4
00001810  43F9 00002E6E            918              LEA     DISP_NOT_W,A1
00001816  103C 000E                919              MOVE.B  #14,D0
0000181A  4E4F                     920              TRAP    #15
0000181C  4E75                     921              RTS
0000181E                           922              
0000181E                           923  OP_NOT_L    * size is long
0000181E  183C 0002                924              MOVE.B  #2,D4
00001822  43F9 00002E77            925              LEA     DISP_NOT_L,A1
00001828  103C 000E                926              MOVE.B  #14,D0
0000182C  4E4F                     927              TRAP    #15
0000182E  4E75                     928              RTS
00001830                           929  
00001830                           930  *---------------------------------------------------------------------------*
00001830                           931  * OP_JSR: display JSR     
00001830                           932  *---------------------------------------------------------------------------*
00001830  43F9 00002E43            933  OP_JSR      LEA     DISP_JSR,A1
00001836  103C 000E                934              MOVE.B  #14,D0
0000183A  4E4F                     935              TRAP    #15
0000183C  4EB9 00001F94            936              JSR     EA_NOSRC
00001842                           937  
00001842  4E75                     938              RTS
00001844                           939  
00001844                           940  *---------------------------------------------------------------------------*
00001844                           941  * OP_RTS: display RTS     
00001844                           942  *---------------------------------------------------------------------------* 
00001844  43F9 00002E3C            943  OP_RTS      LEA     DISP_RTS,A1
0000184A  103C 000E                944              MOVE.B  #14,D0
0000184E  4E4F                     945              TRAP    #15
00001850  4E75                     946              RTS
00001852                           947  
00001852                           948  *---------------------------------------------------------------------------*
00001852                           949  * OP0101: decode ADDQ
00001852                           950  *---------------------------------------------------------------------------* 
00001852  4280                     951  OP0101      CLR.L   D0               * clear registers for temp storage       
00001854  4281                     952              CLR.L   D1
00001856  4284                     953              CLR.L   D4                  
00001858  227C 00000000            954              MOVEA.L #0, A1  
0000185E                           955              
0000185E  2205                     956              MOVE.L  D5,D1           * copy the processing data 
00001860  E089                     957              LSR.L   #8,D1           * shift to right by 8 bits to check the value of bit 8
00001862  0201 0001                958              ANDI.B  #$1,D1          * mask all bits except the last 2 bits
00001866  0C01 0000                959              CMPI.B  #0,D1           * if the value is 0, it's ADDQ
0000186A  6700 0006                960              BEQ     OP_ADDQ
0000186E                           961              
0000186E  4EF8 1494                962              JMP     OP_DATA
00001872                           963       
00001872  4281                     964  OP_ADDQ     CLR.L   D1
00001874  2205                     965              MOVE.L  D5,D1
00001876  EC99                     966              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001878  0281 00000003            967              ANDI.L  #$3,D1
0000187E  0C01 0000                968              CMPI.B  #0,D1
00001882  6700 0014                969              BEQ     OP_ADDQ_B    * size is byte
00001886  0C41 0001                970              CMPI.W  #1,D1
0000188A  6700 001E                971              BEQ     OP_ADDQ_W    * size is word
0000188E  0C81 00000002            972              CMPI.L  #2,D1
00001894  6700 0026                973              BEQ     OP_ADDQ_L    * size is long
00001898                           974              
00001898                           975  *---------------------------------------------------------------------------*
00001898                           976  * OP_ADDQ: display ADDQ
00001898                           977  *---------------------------------------------------------------------------*              
00001898                           978  OP_ADDQ_B    * size is byte   
00001898  183C 0000                979              MOVE.B  #0,D4 
0000189C  43F9 00002E9D            980              LEA     DISP_ADDQ_B,A1
000018A2  103C 000E                981              MOVE.B  #14,D0
000018A6  4E4F                     982              TRAP    #15
000018A8  4E75                     983              RTS
000018AA                           984              
000018AA                           985  OP_ADDQ_W    * size is word
000018AA  183C 0001                986              MOVE.B  #1,D4
000018AE  43F9 00002EA7            987              LEA     DISP_ADDQ_W,A1
000018B4  103C 000E                988              MOVE.B  #14,D0
000018B8  4E4F                     989              TRAP    #15
000018BA  4E75                     990              RTS
000018BC                           991              
000018BC                           992  OP_ADDQ_L    * size is long
000018BC  183C 0002                993              MOVE.B  #2,D4
000018C0  43F9 00002EB1            994              LEA     DISP_ADDQ_L,A1
000018C6  103C 000E                995              MOVE.B  #14,D0
000018CA  4E4F                     996              TRAP    #15
000018CC  4E75                     997              RTS
000018CE                           998  
000018CE                           999  *---------------------------------------------------------------------------*
000018CE                          1000  * OP0110: decode BRA/BEQ/BNE/BLT/BHI
000018CE                          1001  *---------------------------------------------------------------------------*              
000018CE  4280                    1002  OP0110      CLR.L   D0                  
000018D0  4281                    1003              CLR.L   D1   
000018D2  4284                    1004              CLR.L   D4                 
000018D4  227C 00000000           1005              MOVEA.L #0,A1
000018DA  2205                    1006              MOVE.L  D5, D1                
000018DC  0281 000000FF           1007              ANDI.L  #$00FF, D1              * Get 8-bit displacement 
000018E2  2205                    1008              MOVE.L  D5,D1                  
000018E4  0281 00000F00           1009              ANDI.L  #$0F00,D1
000018EA                          1010                 
000018EA  0C41 0000               1011              CMPI.W  #$0000,D1               * Check for BRA
000018EE  6700 0050               1012              BEQ     OP_BRA                  
000018F2                          1013                          
000018F2  0C41 0D00               1014              CMPI.W  #$0D00,D1               * Check for BLT
000018F6  6700 0056               1015              BEQ     OP_BLT      
000018FA                          1016  
000018FA  0C41 0700               1017              CMPI.W  #$0700,D1               * Check for BEQ
000018FE  6700 0032               1018              BEQ     OP_BEQ      
00001902                          1019  
00001902  0C41 0600               1020              CMPI.W  #$0600,D1               * Check for BNE
00001906  6700 001C               1021              BEQ     OP_BNE  
0000190A                          1022              
0000190A  0C41 0200               1023              CMPI.W  #$0200,D1               * Check for BHI
0000190E  6700 0006               1024              BEQ     OP_BHI
00001912                          1025  
00001912  4EF8 1494               1026              JMP     OP_DATA
00001916                          1027              
00001916  43F9 0000306C           1028  OP_BHI      LEA     DISP_BHI,A1             
0000191C  103C 000E               1029              MOVE.B  #14,D0
00001920  4E4F                    1030              TRAP    #15
00001922  4E75                    1031              RTS
00001924                          1032  
00001924  43F9 00003065           1033  OP_BNE      LEA     DISP_BNE,A1             
0000192A  103C 000E               1034              MOVE.B  #14,D0
0000192E  4E4F                    1035              TRAP    #15
00001930  4E75                    1036              RTS
00001932                          1037  
00001932  43F9 0000305E           1038  OP_BEQ      LEA     DISP_BEQ,A1             
00001938  103C 000E               1039              MOVE.B  #14,D0
0000193C  4E4F                    1040              TRAP    #15
0000193E  4E75                    1041              RTS          
00001940                          1042                          
00001940  43F9 00003050           1043  OP_BRA      LEA     DISP_BRA,A1             
00001946  103C 000E               1044              MOVE.B  #14,D0
0000194A  4E4F                    1045              TRAP    #15
0000194C  4E75                    1046              RTS
0000194E                          1047              
0000194E  43F9 00003057           1048  OP_BLT      LEA     DISP_BLT,A1          
00001954  103C 000E               1049              MOVE.B  #14,D0
00001958  4E4F                    1050              TRAP    #15
0000195A  4E75                    1051              RTS
0000195C                          1052     
0000195C                          1053  *---------------------------------------------------------------------------*
0000195C                          1054  * OP0111 : MOVEQ not required
0000195C                          1055  *---------------------------------------------------------------------------*           
0000195C  4EF8 1494               1056  OP0111      JMP     OP_DATA
00001960                          1057             
00001960                          1058  *---------------------------------------------------------------------------*
00001960                          1059  * OP1000 : decode DIVS
00001960                          1060  *---------------------------------------------------------------------------*           
00001960                          1061  OP1000      
00001960  4280                    1062              CLR.L   D0                
00001962  4281                    1063              CLR.L   D1   
00001964  4284                    1064              CLR.L   D4                
00001966  207C 00000000           1065              MOVEA.L #0, A0               
0000196C  227C 00000000           1066              MOVEA.L #0, A1               
00001972                          1067              
00001972  2205                    1068              MOVE.L  D5,D1
00001974  EA89                    1069              LSR.L   #5,D1
00001976  0281 0000000E           1070              ANDI.L  #$E,D1
0000197C                          1071    
0000197C  0C01 000E               1072              CMPI.B  #$E,D1
00001980  6700 0006               1073              BEQ     OP_DIVS
00001984                          1074              
00001984  4EF8 1494               1075              JMP     OP_DATA
00001988                          1076  
00001988                          1077  *---------------------------------------------------------------------------*
00001988                          1078  * OP_DIVS: display DIVS and proceed to EA
00001988                          1079  *---------------------------------------------------------------------------*  
00001988  43F9 00002EBB           1080  OP_DIVS     LEA     DISP_DIVS,A1
0000198E  103C 000E               1081              MOVE.B  #14,D0
00001992  4E4F                    1082              TRAP    #15
00001994  4EF9 00001FA8           1083              JMP     EA_ARITH
0000199A                          1084  
0000199A  4E75                    1085              RTS
0000199C                          1086              
0000199C                          1087  *---------------------------------------------------------------------------*
0000199C                          1088  * OP1001: decode SUB/SUBA
0000199C                          1089  *---------------------------------------------------------------------------*      
0000199C  4280                    1090  OP1001      CLR.L   D0                
0000199E  4281                    1091              CLR.L   D1   
000019A0  4284                    1092              CLR.L   D4                 
000019A2  207C 00000000           1093              MOVEA.L #0, A0                 
000019A8  227C 00000000           1094              MOVEA.L #0, A1               
000019AE                          1095              
000019AE  2205                    1096              MOVE.L  D5,D1
000019B0  EA89                    1097              LSR.L   #5,D1
000019B2  0281 0000000E           1098              ANDI.L  #$E,D1
000019B8                          1099    
000019B8  0C01 0000               1100              CMPI.B  #$0,D1
000019BC  6700 004A               1101              BEQ     OP_SUB_B
000019C0  0C01 0002               1102              CMPI.B  #$2,D1
000019C4  6700 005A               1103              BEQ     OP_SUB_W
000019C8  0C01 0004               1104              CMPI.B  #$4,D1
000019CC  6700 006A               1105              BEQ     OP_SUB_L
000019D0  0C01 0008               1106              CMPI.B  #$8,D1
000019D4  6700 0032               1107              BEQ     OP_SUB_B
000019D8  0C01 000A               1108              CMPI.B  #$A,D1
000019DC  6700 0042               1109              BEQ     OP_SUB_W
000019E0  0C01 000C               1110              CMPI.B  #$C,D1
000019E4  6700 0052               1111              BEQ     OP_SUB_L
000019E8                          1112              
000019E8  4241                    1113              CLR     D1
000019EA  2205                    1114              MOVE.L  D5,D1
000019EC  EC89                    1115              LSR.L   #6,D1
000019EE  0281 0000000F           1116              ANDI.L  #$F,D1
000019F4  0C01 0003               1117              CMPI.B  #3,D1
000019F8  6700 0056               1118              BEQ     OP_SUBA_W
000019FC  0C01 0007               1119              CMPI.B  #7,D1
00001A00  6700 0060               1120              BEQ     OP_SUBA_L
00001A04                          1121              
00001A04  4EF8 1494               1122              JMP     OP_DATA
00001A08                          1123    
00001A08                          1124  *---------------------------------------------------------------------------*
00001A08                          1125  * OP_SUB: display SUB and proceed to EA
00001A08                          1126  *---------------------------------------------------------------------------*            
00001A08  43F9 00002EC3           1127  OP_SUB_B    LEA     DISP_SUB_B,A1
00001A0E  103C 000E               1128              MOVE.B  #14,D0
00001A12  4E4F                    1129              TRAP    #15
00001A14  183C 0000               1130              MOVE.B  #0,D4
00001A18  4EF9 00001FF4           1131              JMP     EA_GEN
00001A1E                          1132  
00001A1E  4E75                    1133              RTS
00001A20                          1134  
00001A20  43F9 00002ECC           1135  OP_SUB_W    LEA     DISP_SUB_W,A1
00001A26  103C 000E               1136              MOVE.B  #14,D0
00001A2A  4E4F                    1137              TRAP    #15
00001A2C  183C 0001               1138              MOVE.B  #1,D4
00001A30  4EF9 00001FF4           1139              JMP     EA_GEN
00001A36                          1140  
00001A36  4E75                    1141              RTS
00001A38                          1142  
00001A38  43F9 00002ED5           1143  OP_SUB_L    LEA     DISP_SUB_L,A1
00001A3E  103C 000E               1144              MOVE.B  #14,D0
00001A42  4E4F                    1145              TRAP    #15
00001A44  183C 0002               1146              MOVE.B  #2,D4
00001A48  4EF9 00001FF4           1147              JMP     EA_GEN
00001A4E                          1148  
00001A4E  4E75                    1149              RTS
00001A50                          1150  
00001A50                          1151  *---------------------------------------------------------------------------*
00001A50                          1152  * OP_SUBA: display SUBA
00001A50                          1153  *---------------------------------------------------------------------------*  
00001A50  43F9 00002EFC           1154  OP_SUBA_W   LEA     DISP_SUBA_W,A1
00001A56  103C 000E               1155              MOVE.B  #14,D0
00001A5A  4E4F                    1156              TRAP    #15
00001A5C  183C 0001               1157              MOVE.B  #1,D4
00001A60  4E75                    1158              RTS
00001A62                          1159  
00001A62  43F9 00002F06           1160  OP_SUBA_L   LEA     DISP_SUBA_L,A1
00001A68  103C 000E               1161              MOVE.B  #14,D0
00001A6C  4E4F                    1162              TRAP    #15
00001A6E  183C 0002               1163              MOVE.B  #2,D4
00001A72  4E75                    1164              RTS         
00001A74                          1165  *---------------------------------------------------------------------------*
00001A74                          1166  * OP1010 : unassigned
00001A74                          1167  *---------------------------------------------------------------------------*           
00001A74  4EF8 1494               1168  OP1010      JMP     OP_DATA
00001A78                          1169              
00001A78                          1170  *---------------------------------------------------------------------------*
00001A78                          1171  * OP1011 : decode CMP/EOR/CMPA
00001A78                          1172  *---------------------------------------------------------------------------*           
00001A78  4280                    1173  OP1011      CLR.L   D0                
00001A7A  4281                    1174              CLR.L   D1            
00001A7C  4284                    1175              CLR.L   D4                   
00001A7E  227C 00000000           1176              MOVEA.L #0, A1               
00001A84  2205                    1177              MOVE.L  D5,D1
00001A86  EA99                    1178              ROR.L   #5,D1
00001A88  0281 0000000E           1179              ANDI.L  #$E,D1
00001A8E  0C01 0000               1180              CMPI.B  #$0,D1
00001A92  6700 0062               1181              BEQ     OP_CMP_B
00001A96  0C01 0002               1182              CMPI.B  #$2,D1
00001A9A  6700 0072               1183              BEQ     OP_CMP_W
00001A9E  0C01 0004               1184              CMPI.B  #$4,D1
00001AA2  6700 0082               1185              BEQ     OP_CMP_L
00001AA6  0C01 0008               1186              CMPI.B  #$8,D1
00001AAA  6700 0092               1187              BEQ     OP_EOR_B
00001AAE  0C01 000A               1188              CMPI.B  #$A,D1
00001AB2  6700 009C               1189              BEQ     OP_EOR_W
00001AB6  0C01 000C               1190              CMPI.B  #$C,D1
00001ABA  6700 00A6               1191              BEQ     OP_EOR_L  
00001ABE  0C01 0006               1192              CMPI.B  #$6,D1
00001AC2  6700 000E               1193              BEQ     OP_CMPA_W
00001AC6  0C01 000E               1194              CMPI.B  #$E,D1
00001ACA  6700 0018               1195              BEQ     OP_CMPA_L 
00001ACE                          1196  
00001ACE  4EF8 1494               1197              JMP     OP_DATA          
00001AD2                          1198  
00001AD2                          1199  *---------------------------------------------------------------------------*
00001AD2                          1200  * OP_CMPA: display CMPA 
00001AD2                          1201  *---------------------------------------------------------------------------
00001AD2  43F9 00002F46           1202  OP_CMPA_W   LEA     DISP_CMPA_W,A1
00001AD8  103C 000E               1203              MOVE.B  #14,D0
00001ADC  4E4F                    1204              TRAP    #15
00001ADE  183C 0001               1205              MOVE.B  #1,D4
00001AE2  4E75                    1206              RTS
00001AE4                          1207  
00001AE4  43F9 00002F50           1208  OP_CMPA_L   LEA     DISP_CMPA_L,A1
00001AEA  103C 000E               1209              MOVE.B  #14,D0
00001AEE  4E4F                    1210              TRAP    #15
00001AF0  183C 0002               1211              MOVE.B  #2,D4
00001AF4  4E75                    1212              RTS
00001AF6                          1213  
00001AF6                          1214  *---------------------------------------------------------------------------*
00001AF6                          1215  * OP_CMP: display CMP and proceed to EA
00001AF6                          1216  *---------------------------------------------------------------------------*  
00001AF6  43F9 00002F2B           1217  OP_CMP_B    LEA     DISP_CMP_B,A1
00001AFC  103C 000E               1218              MOVE.B  #14,D0
00001B00  4E4F                    1219              TRAP    #15
00001B02  183C 0000               1220              MOVE.B  #0,D4
00001B06  4EF9 00001FF4           1221              JMP     EA_GEN
00001B0C                          1222  
00001B0C  4E75                    1223              RTS
00001B0E                          1224              
00001B0E  43F9 00002F34           1225  OP_CMP_W    LEA     DISP_CMP_W,A1
00001B14  103C 000E               1226              MOVE.B  #14,D0
00001B18  4E4F                    1227              TRAP    #15
00001B1A  183C 0001               1228              MOVE.B  #1,D4
00001B1E  4EF9 00001FF4           1229              JMP     EA_GEN
00001B24                          1230  
00001B24  4E75                    1231              RTS
00001B26                          1232              
00001B26  43F9 00002F3D           1233  OP_CMP_L    LEA     DISP_CMP_L,A1
00001B2C  103C 000E               1234              MOVE.B  #14,D0
00001B30  4E4F                    1235              TRAP    #15
00001B32  183C 0002               1236              MOVE.B  #2,D4
00001B36  4EF9 00001FF4           1237              JMP     EA_GEN
00001B3C                          1238  
00001B3C  4E75                    1239              RTS
00001B3E                          1240              
00001B3E                          1241  *---------------------------------------------------------------------------*
00001B3E                          1242  * OP_EOR: display EOR
00001B3E                          1243  *---------------------------------------------------------------------------*  
00001B3E  43F9 00002F10           1244  OP_EOR_B    LEA     DISP_EOR_B,A1
00001B44  103C 000E               1245              MOVE.B  #14,D0
00001B48  4E4F                    1246              TRAP    #15
00001B4A  183C 0000               1247              MOVE.B  #0,D4
00001B4E  4E75                    1248              RTS
00001B50                          1249              
00001B50  43F9 00002F19           1250  OP_EOR_W    LEA     DISP_EOR_W,A1
00001B56  103C 000E               1251              MOVE.B  #14,D0
00001B5A  4E4F                    1252              TRAP    #15
00001B5C  183C 0001               1253              MOVE.B  #1,D4
00001B60  4E75                    1254              RTS
00001B62                          1255              
00001B62  43F9 00002F22           1256  OP_EOR_L    LEA     DISP_EOR_L,A1
00001B68  103C 000E               1257              MOVE.B  #14,D0
00001B6C  4E4F                    1258              TRAP    #15
00001B6E  183C 0002               1259              MOVE.B  #2,D4
00001B72  4E75                    1260              RTS    
00001B74                          1261  
00001B74                          1262  *---------------------------------------------------------------------------*
00001B74                          1263  * OP1100: Decode and display MULS/AND and proceed to EA
00001B74                          1264  *---------------------------------------------------------------------------* 
00001B74  4280                    1265  OP1100      CLR.L   D0                 
00001B76  4281                    1266              CLR.L   D1    
00001B78  4284                    1267              CLR.L   D4                
00001B7A  227C 00000000           1268              MOVEA.L #0, A1             
00001B80                          1269              
00001B80  2205                    1270              MOVE.L  D5,D1
00001B82  EA89                    1271              LSR.L   #5,D1
00001B84  0281 0000000E           1272              ANDI.L  #$E,D1
00001B8A  0C41 000E               1273              CMPI.W  #$E,D1
00001B8E  6700 0036               1274              BEQ     OP_MULS
00001B92  0C41 0000               1275              CMPI.W  #$0,D1
00001B96  6700 0042               1276              BEQ     OP_AND_B
00001B9A  0C41 0002               1277              CMPI.W  #$2,D1
00001B9E  6700 004C               1278              BEQ     OP_AND_W
00001BA2  0C41 0004               1279              CMPI.W  #$4,D1
00001BA6  6700 0056               1280              BEQ     OP_AND_L
00001BAA  0C41 0008               1281              CMPI.W  #$8,D1
00001BAE  6700 002A               1282              BEQ     OP_AND_B
00001BB2  0C41 000A               1283              CMPI.W  #$A,D1
00001BB6  6700 0034               1284              BEQ     OP_AND_W
00001BBA  0C41 000C               1285              CMPI.W  #$C,D1
00001BBE  6700 003E               1286              BEQ     OP_AND_L
00001BC2                          1287  
00001BC2  4EF8 1494               1288              JMP     OP_DATA
00001BC6                          1289  
00001BC6  43F9 00002F5A           1290  OP_MULS     LEA     DISP_MULS_W,A1
00001BCC  103C 000E               1291              MOVE.B  #14,D0
00001BD0  4E4F                    1292              TRAP    #15
00001BD2  4EF9 00001FA8           1293              JMP     EA_ARITH
00001BD8  4E75                    1294              RTS
00001BDA                          1295              
00001BDA                          1296  OP_AND_B    
00001BDA  43F9 00002F64           1297              LEA     DISP_AND_B,A1
00001BE0  103C 000E               1298              MOVE.B  #14,D0
00001BE4  4E4F                    1299              TRAP    #15
00001BE6  183C 0000               1300              MOVE.B  #0,D4
00001BEA  4E75                    1301              RTS
00001BEC                          1302  
00001BEC                          1303  OP_AND_W
00001BEC  43F9 00002F6D           1304              LEA     DISP_AND_W,A1
00001BF2  103C 000E               1305              MOVE.B  #14,D0
00001BF6  4E4F                    1306              TRAP    #15
00001BF8  183C 0001               1307              MOVE.B  #1,D4
00001BFC  4E75                    1308              RTS
00001BFE                          1309  
00001BFE                          1310  OP_AND_L
00001BFE  43F9 00002F76           1311              LEA     DISP_AND_L,A1
00001C04  103C 000E               1312              MOVE.B  #14,D0
00001C08  4E4F                    1313              TRAP    #15
00001C0A  183C 0002               1314              MOVE.B  #2,D4
00001C0E  4E75                    1315              RTS
00001C10                          1316  
00001C10                          1317  *---------------------------------------------------------------------------*
00001C10                          1318  * OP1101: Decode ADD/ADDA
00001C10                          1319  *---------------------------------------------------------------------------* 
00001C10  4280                    1320  OP1101      CLR.L   D0                  
00001C12  4281                    1321              CLR.L   D1       
00001C14  4284                    1322              CLR.L   D4                   
00001C16  227C 00000000           1323              MOVEA.L #0, A1              
00001C1C  2205                    1324              MOVE.L  D5,D1
00001C1E  EA99                    1325              ROR.L   #5,D1
00001C20  0281 0000000E           1326              ANDI.L  #$E,D1
00001C26  0C01 0000               1327              CMPI.B  #$0,D1
00001C2A  6700 003E               1328              BEQ     OP_ADD_B
00001C2E  0C01 0002               1329              CMPI.B  #$2,D1
00001C32  6700 004E               1330              BEQ     OP_ADD_W
00001C36  0C01 0004               1331              CMPI.B  #$4,D1
00001C3A  6700 005E               1332              BEQ     OP_ADD_L
00001C3E  0C01 0008               1333              CMPI.B  #$8,D1
00001C42  6700 0026               1334              BEQ     OP_ADD_B
00001C46  0C01 000A               1335              CMPI.B  #$A,D1
00001C4A  6700 0036               1336              BEQ     OP_ADD_W
00001C4E  0C01 000C               1337              CMPI.B  #$C,D1
00001C52  6700 0046               1338              BEQ     OP_ADD_L  
00001C56                          1339              
00001C56  0C01 0006               1340              CMPI.B  #$6,D1
00001C5A  6700 0056               1341              BEQ     OP_ADDA_W
00001C5E  0C01 000E               1342              CMPI.B  #$E,D1
00001C62  6700 0066               1343              BEQ     OP_ADDA_L 
00001C66                          1344  
00001C66  4EF8 1494               1345              JMP     OP_DATA  
00001C6A                          1346            
00001C6A                          1347  *---------------------------------------------------------------------------*
00001C6A                          1348  * OP_ADD: display ADD and proceed to EA
00001C6A                          1349  *---------------------------------------------------------------------------*  
00001C6A  43F9 00002F7F           1350  OP_ADD_B    LEA     DISP_ADD_B,A1
00001C70  103C 000E               1351              MOVE.B  #14,D0
00001C74  4E4F                    1352              TRAP    #15
00001C76  183C 0000               1353              MOVE.B  #0,D4
00001C7A  4EF9 00001FF4           1354              JMP     EA_GEN
00001C80                          1355  
00001C80  4E75                    1356              RTS
00001C82                          1357  
00001C82  43F9 00002F88           1358  OP_ADD_W    LEA     DISP_ADD_W,A1
00001C88  103C 000E               1359              MOVE.B  #14,D0
00001C8C  4E4F                    1360              TRAP    #15
00001C8E  183C 0001               1361              MOVE.B  #1,D4
00001C92  4EF9 00001FF4           1362              JMP     EA_GEN
00001C98                          1363  
00001C98  4E75                    1364              RTS
00001C9A                          1365  
00001C9A  43F9 00002F91           1366  OP_ADD_L    LEA     DISP_ADD_L,A1
00001CA0  103C 000E               1367              MOVE.B  #14,D0
00001CA4  4E4F                    1368              TRAP    #15
00001CA6  183C 0002               1369              MOVE.B  #2,D4
00001CAA  4EF9 00001FF4           1370              JMP     EA_GEN
00001CB0                          1371  
00001CB0  4E75                    1372              RTS
00001CB2                          1373  
00001CB2                          1374  *---------------------------------------------------------------------------*
00001CB2                          1375  * OP_ADDA: display ADDA and proceed to EA
00001CB2                          1376  *---------------------------------------------------------------------------*  
00001CB2  43F9 00002F9A           1377  OP_ADDA_W   LEA     DISP_ADDA_W,A1
00001CB8  103C 000E               1378              MOVE.B  #14,D0
00001CBC  4E4F                    1379              TRAP    #15
00001CBE  183C 0001               1380              MOVE.B  #1,D4
00001CC2  4EF9 00001FF4           1381              JMP     EA_GEN
00001CC8                          1382  
00001CC8  4E75                    1383              RTS
00001CCA                          1384  
00001CCA  43F9 00002FA4           1385  OP_ADDA_L   LEA     DISP_ADDA_L,A1
00001CD0  103C 000E               1386              MOVE.B  #14,D0
00001CD4  4E4F                    1387              TRAP    #15
00001CD6  183C 0002               1388              MOVE.B  #2,D4
00001CDA  4EF9 00001FF4           1389              JMP     EA_GEN
00001CE0                          1390  
00001CE0  4E75                    1391              RTS
00001CE2                          1392              
00001CE2                          1393  *---------------------------------------------------------------------------*
00001CE2                          1394  * OP1110: LSR/LSL/ASR/ASL/ROL/ROR
00001CE2                          1395  *---------------------------------------------------------------------------* 
00001CE2  4280                    1396  OP1110      CLR.L   D0                  
00001CE4  4281                    1397              CLR.L   D1   
00001CE6  4284                    1398              CLR.L   D4                   
00001CE8  227C 00000000           1399              MOVEA.L #0, A1                 
00001CEE  2205                    1400              MOVE.L  D5,D1
00001CF0                          1401              
00001CF0                          1402              * check for LSX
00001CF0  E699                    1403              ROR.L   #3,D1
00001CF2  0281 00000001           1404              ANDI.L  #$1,D1
00001CF8  0C01 0001               1405              CMPI.B  #1,D1
00001CFC  6700 002E               1406              BEQ     OP_LSX
00001D00                          1407              
00001D00                          1408              * reset D1 and check for ASX
00001D00  4281                    1409              CLR.L   D1
00001D02  2205                    1410              MOVE.L  D5,D1
00001D04  E699                    1411              ROR.L   #3,D1
00001D06  0281 00000001           1412              ANDI.L  #$1,D1
00001D0C  0C01 0000               1413              CMPI.B  #0,D1
00001D10  6700 0032               1414              BEQ     OP_ASX
00001D14                          1415  
00001D14                          1416              * reset D1 and check for ROX
00001D14  4281                    1417              CLR.L   D1
00001D16  2205                    1418              MOVE.L  D5,D1
00001D18  E699                    1419              ROR.L   #3,D1
00001D1A  0281 00000001           1420              ANDI.L  #$1,D1
00001D20  0C01 0003               1421              CMPI.B  #3,D1
00001D24  6700 0036               1422              BEQ     OP_ROX
00001D28                          1423              
00001D28  4EF8 1494               1424              JMP     OP_DATA
00001D2C                          1425  
00001D2C                          1426  *---------------------------------------------------------------------------*
00001D2C                          1427  * OP_LSX: process LSR/LSL
00001D2C                          1428  *---------------------------------------------------------------------------*            
00001D2C  EA99                    1429  OP_LSX      ROR.L   #5,D1
00001D2E  0281 00000001           1430              ANDI.L  #$1,D1
00001D34  0C01 0000               1431              CMPI.B  #0,D1
00001D38  6700 003A               1432              BEQ     OP_LSR
00001D3C  0C01 0001               1433              CMPI.B  #1,D1
00001D40  6700 008C               1434              BEQ     OP_LSL
00001D44                          1435              
00001D44                          1436  *---------------------------------------------------------------------------*
00001D44                          1437  * OP_ASX: process ASR/ASL
00001D44                          1438  *---------------------------------------------------------------------------*  
00001D44  EA99                    1439  OP_ASX      ROR.L   #5,D1
00001D46  0281 00000001           1440              ANDI.L  #$1,D1
00001D4C  0C01 0000               1441              CMPI.B  #0,D1
00001D50  6700 00D6               1442              BEQ     OP_ASR
00001D54  0C01 0001               1443              CMPI.B  #1,D1
00001D58  6700 0128               1444              BEQ     OP_ASL
00001D5C                          1445              
00001D5C                          1446  *---------------------------------------------------------------------------*
00001D5C                          1447  * OP_ROX: process ROR/ROL
00001D5C                          1448  *---------------------------------------------------------------------------*  
00001D5C  EA99                    1449  OP_ROX      ROR.L   #5,D1
00001D5E  0281 00000001           1450              ANDI.L  #$1,D1
00001D64  0C01 0000               1451              CMPI.B  #0,D1
00001D68  6700 0172               1452              BEQ     OP_ROR
00001D6C  0C01 0001               1453              CMPI.B  #1,D1
00001D70  6700 01C4               1454              BEQ     OP_ROL
00001D74                          1455  
00001D74                          1456  *---------------------------------------------------------------------------*
00001D74                          1457  * OP_LSR: decode and display LSR
00001D74                          1458  *---------------------------------------------------------------------------*        
00001D74  E599                    1459  OP_LSR      ROL.L   #2,D1
00001D76  0281 00000003           1460              ANDI.L  #$3,D1
00001D7C  0C01 0000               1461              CMPI.B  #0,D1
00001D80  6700 0016               1462              BEQ     OP_LSR_B
00001D84  0C01 0001               1463              CMPI.B  #$1,D1
00001D88  6700 0032               1464              BEQ     OP_LSR_W
00001D8C  0C01 0002               1465              CMPI.B  #$2,D1
00001D90  6700 0018               1466              BEQ     OP_LSR_L
00001D94                          1467              
00001D94  4EF8 1494               1468              JMP     OP_DATA
00001D98                          1469  
00001D98  43F9 00002FAE           1470  OP_LSR_B    LEA     DISP_LSR_B,A1
00001D9E  103C 000E               1471              MOVE.B  #14,D0
00001DA2  4E4F                    1472              TRAP    #15
00001DA4  183C 0000               1473              MOVE.B  #0,D4
00001DA8  4E75                    1474              RTS
00001DAA                          1475  
00001DAA  43F9 00002FD2           1476  OP_LSR_L    LEA     DISP_LSR_L,A1
00001DB0  103C 000E               1477              MOVE.B  #14,D0
00001DB4  4E4F                    1478              TRAP    #15
00001DB6  183C 0002               1479              MOVE.B  #2,D4
00001DBA  4E75                    1480              RTS
00001DBC                          1481  
00001DBC  43F9 00002FC0           1482  OP_LSR_W    LEA     DISP_LSR_W,A1
00001DC2  103C 000E               1483              MOVE.B  #14,D0
00001DC6  4E4F                    1484              TRAP    #15
00001DC8  183C 0001               1485              MOVE.B  #1,D4
00001DCC  4E75                    1486              RTS
00001DCE                          1487   
00001DCE                          1488  *---------------------------------------------------------------------------*
00001DCE                          1489  * OP_LSL: decode and display LSL
00001DCE                          1490  *---------------------------------------------------------------------------*             
00001DCE  E599                    1491  OP_LSL      ROL.L   #2,D1
00001DD0  0281 00000003           1492              ANDI.L  #$3,D1
00001DD6  0C01 0000               1493              CMPI.B  #0,D1
00001DDA  6700 0016               1494              BEQ     OP_LSL_B
00001DDE  0C01 0001               1495              CMPI.B  #$1,D1
00001DE2  6700 0032               1496              BEQ     OP_LSL_W
00001DE6  0C01 0002               1497              CMPI.B  #$2,D1
00001DEA  6700 0018               1498              BEQ     OP_LSL_L
00001DEE                          1499              
00001DEE  4EF8 1494               1500              JMP OP_DATA
00001DF2                          1501  
00001DF2  43F9 00002FB7           1502  OP_LSL_B    LEA     DISP_LSL_B,A1
00001DF8  103C 000E               1503              MOVE.B  #14,D0
00001DFC  4E4F                    1504              TRAP    #15
00001DFE  183C 0000               1505              MOVE.B  #0,D4
00001E02  4E75                    1506              RTS
00001E04                          1507  
00001E04  43F9 00002FDB           1508  OP_LSL_L    LEA     DISP_LSL_L,A1
00001E0A  103C 000E               1509              MOVE.B  #14,D0
00001E0E  4E4F                    1510              TRAP    #15
00001E10  183C 0002               1511              MOVE.B  #2,D4
00001E14  4E75                    1512              RTS
00001E16                          1513  
00001E16  43F9 00002FC9           1514  OP_LSL_W    LEA     DISP_LSL_W,A1
00001E1C  103C 000E               1515              MOVE.B  #14,D0
00001E20  4E4F                    1516              TRAP    #15
00001E22  183C 0001               1517              MOVE.B  #1,D4
00001E26  4E75                    1518              RTS
00001E28                          1519   
00001E28                          1520  *---------------------------------------------------------------------------*
00001E28                          1521  * OP_ASR: decode and display ASR
00001E28                          1522  *---------------------------------------------------------------------------*             
00001E28  E599                    1523  OP_ASR      ROL.L   #2,D1
00001E2A  0281 00000003           1524              ANDI.L  #$3,D1
00001E30  0C01 0000               1525              CMPI.B  #0,D1
00001E34  6700 0016               1526              BEQ     OP_ASR_B
00001E38  0C01 0001               1527              CMPI.B  #$1,D1
00001E3C  6700 0032               1528              BEQ     OP_ASR_W
00001E40  0C01 0002               1529              CMPI.B  #$2,D1
00001E44  6700 0018               1530              BEQ     OP_ASR_L
00001E48                          1531              
00001E48  4EF8 1494               1532              JMP OP_DATA
00001E4C                          1533  
00001E4C  43F9 00002FE4           1534  OP_ASR_B    LEA     DISP_ASR_B,A1
00001E52  103C 000E               1535              MOVE.B  #14,D0
00001E56  4E4F                    1536              TRAP    #15
00001E58  183C 0000               1537              MOVE.B  #0,D4
00001E5C  4E75                    1538              RTS
00001E5E                          1539  
00001E5E  43F9 00003008           1540  OP_ASR_L    LEA     DISP_ASR_L,A1
00001E64  103C 000E               1541              MOVE.B  #14,D0
00001E68  4E4F                    1542              TRAP    #15
00001E6A  183C 0002               1543              MOVE.B  #2,D4
00001E6E  4E75                    1544              RTS
00001E70                          1545  
00001E70  43F9 00002FF6           1546  OP_ASR_W    LEA     DISP_ASR_W,A1
00001E76  103C 000E               1547              MOVE.B  #14,D0
00001E7A  4E4F                    1548              TRAP    #15
00001E7C  183C 0001               1549              MOVE.B  #1,D4
00001E80  4E75                    1550              RTS
00001E82                          1551       
00001E82                          1552  *---------------------------------------------------------------------------*
00001E82                          1553  * OP_ASL: decode and display ASL
00001E82                          1554  *---------------------------------------------------------------------------*         
00001E82  E599                    1555  OP_ASL      ROL.L   #2,D1
00001E84  0281 00000003           1556              ANDI.L  #$3,D1
00001E8A  0C01 0000               1557              CMPI.B  #0,D1
00001E8E  6700 0016               1558              BEQ     OP_ASL_B
00001E92  0C01 0001               1559              CMPI.B  #$1,D1
00001E96  6700 0032               1560              BEQ     OP_ASL_W
00001E9A  0C01 0002               1561              CMPI.B  #$2,D1
00001E9E  6700 0018               1562              BEQ     OP_ASL_L
00001EA2                          1563              
00001EA2  4EF8 1494               1564              JMP OP_DATA
00001EA6                          1565  
00001EA6  43F9 00002FED           1566  OP_ASL_B    LEA     DISP_ASL_B,A1
00001EAC  103C 000E               1567              MOVE.B  #14,D0
00001EB0  4E4F                    1568              TRAP    #15
00001EB2  183C 0000               1569              MOVE.B  #0,D4
00001EB6  4E75                    1570              RTS
00001EB8                          1571  
00001EB8  43F9 00003011           1572  OP_ASL_L    LEA     DISP_ASL_L,A1
00001EBE  103C 000E               1573              MOVE.B  #14,D0
00001EC2  4E4F                    1574              TRAP    #15
00001EC4  183C 0002               1575              MOVE.B  #2,D4
00001EC8  4E75                    1576              RTS
00001ECA                          1577  
00001ECA  43F9 00002FFF           1578  OP_ASL_W    LEA     DISP_ASL_W,A1
00001ED0  103C 000E               1579              MOVE.B  #14,D0
00001ED4  4E4F                    1580              TRAP    #15
00001ED6  183C 0001               1581              MOVE.B  #1,D4
00001EDA  4E75                    1582              RTS
00001EDC                          1583   
00001EDC                          1584  *---------------------------------------------------------------------------*
00001EDC                          1585  * OP_ROR: decode and display ROR
00001EDC                          1586  *---------------------------------------------------------------------------*             
00001EDC  E599                    1587  OP_ROR      ROL.L   #2,D1
00001EDE  0281 00000003           1588              ANDI.L  #$3,D1
00001EE4  0C01 0000               1589              CMPI.B  #0,D1
00001EE8  6700 0016               1590              BEQ     OP_ROR_B
00001EEC  0C01 0001               1591              CMPI.B  #$1,D1
00001EF0  6700 0032               1592              BEQ     OP_ROR_W
00001EF4  0C01 0002               1593              CMPI.B  #$2,D1
00001EF8  6700 0018               1594              BEQ     OP_ROR_L
00001EFC                          1595              
00001EFC  4EF8 1494               1596              JMP OP_DATA
00001F00                          1597  
00001F00  43F9 0000301A           1598  OP_ROR_B    LEA     DISP_ROR_B,A1
00001F06  103C 000E               1599              MOVE.B  #14,D0
00001F0A  4E4F                    1600              TRAP    #15
00001F0C  183C 0000               1601              MOVE.B  #0,D4
00001F10  4E75                    1602              RTS
00001F12                          1603  
00001F12  43F9 0000303E           1604  OP_ROR_L    LEA     DISP_ROR_L,A1
00001F18  103C 000E               1605              MOVE.B  #14,D0
00001F1C  4E4F                    1606              TRAP    #15
00001F1E  183C 0002               1607              MOVE.B  #2,D4
00001F22  4E75                    1608              RTS
00001F24                          1609  
00001F24  43F9 0000302C           1610  OP_ROR_W    LEA     DISP_ROR_W,A1
00001F2A  103C 000E               1611              MOVE.B  #14,D0
00001F2E  4E4F                    1612              TRAP    #15
00001F30  183C 0001               1613              MOVE.B  #1,D4
00001F34  4E75                    1614              RTS
00001F36                          1615  
00001F36                          1616  *---------------------------------------------------------------------------*
00001F36                          1617  * OP_ROL: decode and display ROL
00001F36                          1618  *---------------------------------------------------------------------------*             
00001F36  E599                    1619  OP_ROL      ROL.L   #2,D1
00001F38  0281 00000003           1620              ANDI.L  #$3,D1
00001F3E  0C01 0000               1621              CMPI.B  #0,D1
00001F42  6700 0016               1622              BEQ     OP_ROL_B
00001F46  0C01 0001               1623              CMPI.B  #$1,D1
00001F4A  6700 0032               1624              BEQ     OP_ROL_W
00001F4E  0C01 0002               1625              CMPI.B  #$2,D1
00001F52  6700 0018               1626              BEQ     OP_ROL_L
00001F56                          1627              
00001F56  4EF8 1494               1628              JMP OP_DATA
00001F5A                          1629  
00001F5A                          1630  
00001F5A  43F9 00003023           1631  OP_ROL_B    LEA     DISP_ROL_B,A1
00001F60  103C 000E               1632              MOVE.B  #14,D0
00001F64  4E4F                    1633              TRAP    #15
00001F66  183C 0000               1634              MOVE.B  #0,D4
00001F6A  4E75                    1635              RTS
00001F6C                          1636  
00001F6C  43F9 00003047           1637  OP_ROL_L    LEA     DISP_ROL_L,A1
00001F72  103C 000E               1638              MOVE.B  #14,D0
00001F76  4E4F                    1639              TRAP    #15
00001F78  183C 0002               1640              MOVE.B  #2,D4
00001F7C  4E75                    1641              RTS
00001F7E                          1642  
00001F7E  43F9 00003035           1643  OP_ROL_W    LEA     DISP_ROL_W,A1
00001F84  103C 000E               1644              MOVE.B  #14,D0
00001F88  4E4F                    1645              TRAP    #15
00001F8A  183C 0001               1646              MOVE.B  #1,D4
00001F8E  4E75                    1647              RTS
00001F90                          1648              
00001F90                          1649  *---------------------------------------------------------------------------*
00001F90                          1650  * OP1111 : Special reserved
00001F90                          1651  *---------------------------------------------------------------------------*           
00001F90  4EF8 1494               1652  OP1111      JMP     OP_DATA
00001F94                          1653  
00001F94                          1654  *---------------------------------------------------------------------------*
00001F94                          1655  * EA_NOSRC: decode and display effective addresses for NEG/JSR
00001F94                          1656  *---------------------------------------------------------------------------*
00001F94                          1657  EA_NOSRC    
00001F94  4EB9 00002052           1658              JSR     SRC_MODE
00001F9A  43F9 00002D14           1659              LEA     ENDLINE_M,A1
00001FA0  103C 000E               1660              MOVE.B  #14,D0
00001FA4  4E4F                    1661              TRAP    #15
00001FA6  4E75                    1662              RTS
00001FA8                          1663              
00001FA8                          1664  *---------------------------------------------------------------------------*
00001FA8                          1665  * EA_ARITH: decode and display effective addresses for DIVS/MULS
00001FA8                          1666  *---------------------------------------------------------------------------*
00001FA8                          1667  EA_ARITH
00001FA8  4EB9 00002052           1668              JSR     SRC_MODE
00001FAE  43F9 0000308E           1669              LEA     DISP_D,A1
00001FB4  103C 000E               1670              MOVE.B  #14,D0
00001FB8  4E4F                    1671              TRAP    #15
00001FBA  4EB9 000022DE           1672              JSR     DEST_REGISTER
00001FC0  43F9 00002D14           1673              LEA     ENDLINE_M,A1
00001FC6  103C 000E               1674              MOVE.B  #14,D0
00001FCA  4E4F                    1675              TRAP    #15
00001FCC  4E75                    1676              RTS
00001FCE                          1677              
00001FCE                          1678  *---------------------------------------------------------------------------*
00001FCE                          1679  * EA_MOVEA: decode and display effective addresses for MOVEA/LEA
00001FCE                          1680  *---------------------------------------------------------------------------*
00001FCE                          1681  EA_MOVEA
00001FCE  4EB9 00002052           1682              JSR     SRC_MODE
00001FD4  43F9 0000309F           1683              LEA     DISP_AOP,A1
00001FDA  103C 000E               1684              MOVE.B  #14,D0
00001FDE  4E4F                    1685              TRAP    #15
00001FE0  4EB9 000022DE           1686              JSR     DEST_REGISTER
00001FE6  43F9 0000309D           1687              LEA     DISP_CP,A1
00001FEC  103C 000D               1688              MOVE.B  #13,D0
00001FF0  4E4F                    1689              TRAP    #15
00001FF2  4E75                    1690              RTS
00001FF4                          1691              
00001FF4                          1692  *---------------------------------------------------------------------------*
00001FF4                          1693  * EA_GEN: decode and display effective addresses for MOVE
00001FF4                          1694  *---------------------------------------------------------------------------*
00001FF4                          1695  EA_GEN          
00001FF4                          1696              * retrieve/display source mode/register
00001FF4  4EB9 00002052           1697              JSR     SRC_MODE
00001FFA                          1698              
00001FFA                          1699              * retrieve/display destination mode/register
00001FFA  4EB9 0000200E           1700              JSR     DEST_MODE
00002000                          1701              
00002000  43F9 00002D14           1702              LEA     ENDLINE_M,A1
00002006  103C 000E               1703              MOVE.B  #14,D0
0000200A  4E4F                    1704              TRAP    #15
0000200C                          1705              
0000200C  4E75                    1706              RTS
0000200E                          1707  
0000200E                          1708  *---------------------------------------------------------------------------*
0000200E                          1709  * DEST_MODE: decode and display destination mode (bit 8 - 6)
0000200E                          1710  *---------------------------------------------------------------------------*           
0000200E                          1711  DEST_MODE   
0000200E                          1712              * clear registers to store temp data
0000200E  4280                    1713              CLR.L   D0                      
00002010  4281                    1714              CLR.L   D1                      
00002012  207C 00000000           1715              MOVEA.L #0, A0                  
00002018  227C 00000000           1716              MOVEA.L #0, A1                  
0000201E  2205                    1717              MOVE.L  D5,D1
00002020  EC89                    1718              LSR.L   #6,D1
00002022  0281 00000007           1719              ANDI.L  #$7,D1
00002028  0C01 0000               1720              CMPI.B  #0,D1   * Dn
0000202C  6700 0082               1721              BEQ     D_MODE000
00002030  0C01 0002               1722              CMPI.B  #2,D1   * (An)
00002034  6700 00C2               1723              BEQ     D_MODE010
00002038  0C01 0003               1724              CMPI.B  #3,D1   * (An)+
0000203C  6700 011A               1725              BEQ     D_MODE011
00002040  0C01 0004               1726              CMPI.B  #4,D1   * -(An)
00002044  6700 0132               1727              BEQ     D_MODE100
00002048  0C01 0007               1728              CMPI.B  #7,D1  * abs
0000204C  6700 017C               1729              BEQ     D_MODE111 
00002050  4E75                    1730              RTS
00002052                          1731  
00002052                          1732  *---------------------------------------------------------------------------*
00002052                          1733  * SRC_MODE: decode and display source mode (bit 5 - 3)
00002052                          1734  *---------------------------------------------------------------------------*  
00002052                          1735  SRC_MODE    
00002052                          1736              * clear registers to store temp data
00002052  4280                    1737              CLR.L   D0                      
00002054  4281                    1738              CLR.L   D1                      
00002056  207C 00000000           1739              MOVEA.L #0, A0                  
0000205C  227C 00000000           1740              MOVEA.L #0, A1                  
00002062  2205                    1741              MOVE.L  D5,D1
00002064  E489                    1742              LSR.L   #2,D1
00002066  0281 0000000E           1743              ANDI.L  #$E,D1
0000206C                          1744              
0000206C  0C01 0000               1745              CMPI.B  #0,D1   * Dn
00002070  6700 002A               1746              BEQ     MODE000
00002074  0C01 0002               1747              CMPI.B  #2,D1   * An 
00002078  6700 004A               1748              BEQ     MODE001
0000207C  0C01 0004               1749              CMPI.B  #4,D1   * (An)
00002080  6700 0056               1750              BEQ     MODE010
00002084  0C01 0006               1751              CMPI.B  #6,D1   * (An)+
00002088  6700 008E               1752              BEQ     MODE011
0000208C  0C01 0008               1753              CMPI.B  #8,D1   * -(An)
00002090  6700 00A6               1754              BEQ     MODE100
00002094  0C01 000F               1755              CMPI.B  #15,D1  * abs/immediate
00002098  6700 00FE               1756              BEQ     MODE111 
0000209C                          1757        
0000209C                          1758  *---------------------------------------------------------------------------*
0000209C                          1759  * MODE000: decode and display source mode Dn
0000209C                          1760  *---------------------------------------------------------------------------*           
0000209C                          1761  MODE000     *Dn
0000209C  43F9 0000308E           1762              LEA     DISP_D,A1
000020A2  103C 000E               1763              MOVE.B  #14,D0
000020A6  4E4F                    1764              TRAP    #15
000020A8  4EB9 0000233A           1765              JSR     SRC_REGISTER
000020AE  4E75                    1766              RTS
000020B0                          1767  
000020B0                          1768  *---------------------------------------------------------------------------*
000020B0                          1769  * D_MODE000: decode and display dest mode Dn
000020B0                          1770  *---------------------------------------------------------------------------*
000020B0                          1771  D_MODE000     *Dn
000020B0  43F9 0000308E           1772              LEA     DISP_D,A1
000020B6  103C 000E               1773              MOVE.B  #14,D0
000020BA  4E4F                    1774              TRAP    #15
000020BC  4EB9 000022DE           1775              JSR     DEST_REGISTER
000020C2  4E75                    1776              RTS
000020C4                          1777  
000020C4                          1778  *---------------------------------------------------------------------------*
000020C4                          1779  * MODE001: decode and display source mode An
000020C4                          1780  *---------------------------------------------------------------------------* 
000020C4                          1781  MODE001 *An
000020C4  43F9 00003093           1782              LEA     DISP_A,A1
000020CA  103C 000E               1783              MOVE.B  #14,D0
000020CE  4E4F                    1784              TRAP    #15
000020D0  4EB9 0000233A           1785              JSR     SRC_REGISTER
000020D6                          1786          
000020D6  4E75                    1787              RTS
000020D8                          1788  
000020D8                          1789  *---------------------------------------------------------------------------*
000020D8                          1790  * MODE010: decode and display source mode (An)
000020D8                          1791  *---------------------------------------------------------------------------*    
000020D8                          1792  MODE010 *(An)
000020D8  43F9 0000309F           1793              LEA     DISP_AOP,A1  *display (A
000020DE  103C 000E               1794              MOVE.B  #14,D0
000020E2  4E4F                    1795              TRAP    #15
000020E4                          1796  
000020E4  4EB9 0000233A           1797              JSR     SRC_REGISTER * display register
000020EA                          1798  
000020EA  43F9 0000309D           1799              LEA     DISP_CP,A1   *display )
000020F0  103C 000E               1800              MOVE.B  #14,D0
000020F4  4E4F                    1801              TRAP    #15
000020F6                          1802              
000020F6  4E75                    1803              RTS
000020F8                          1804  
000020F8                          1805  *---------------------------------------------------------------------------*
000020F8                          1806  * D_MODE010: decode and display dest mode (An)
000020F8                          1807  *---------------------------------------------------------------------------*
000020F8                          1808  D_MODE010 *(An)
000020F8  43F9 0000309F           1809              LEA     DISP_AOP,A1  *display (A
000020FE  103C 000E               1810              MOVE.B  #14,D0
00002102  4E4F                    1811              TRAP    #15
00002104                          1812     
00002104  4EB9 000022DE           1813              JSR     DEST_REGISTER * display register
0000210A                          1814  
0000210A  43F9 0000309D           1815              LEA     DISP_CP,A1   *display )
00002110  103C 000E               1816              MOVE.B  #14,D0
00002114  4E4F                    1817              TRAP    #15
00002116                          1818              
00002116  4E75                    1819              RTS
00002118                          1820  
00002118                          1821  *---------------------------------------------------------------------------*
00002118                          1822  * MODE011: decode and display source mode (An)+
00002118                          1823  *---------------------------------------------------------------------------*
00002118                          1824  MODE011 *(An)+
00002118  43F9 0000309F           1825              LEA     DISP_AOP,A1      *display (A
0000211E  103C 000E               1826              MOVE.B  #14,D0
00002122  4E4F                    1827              TRAP    #15
00002124                          1828              
00002124  4EB9 0000233A           1829              JSR     SRC_REGISTER    * display register
0000212A                          1830  
0000212A  43F9 000030AC           1831              LEA     DISP_POST,A1    *display )+
00002130  103C 000E               1832              MOVE.B  #14,D0
00002134  4E4F                    1833              TRAP    #15
00002136                          1834              
00002136  4E75                    1835              RTS
00002138                          1836              
00002138                          1837  *---------------------------------------------------------------------------*
00002138                          1838  * MODE100: decode and display source mode -(An)
00002138                          1839  *---------------------------------------------------------------------------*
00002138                          1840  MODE100 *-(An)
00002138  43F9 000030A5           1841              LEA     DISP_PRE,A1    *display -(A
0000213E  103C 000E               1842              MOVE.B  #14,D0
00002142  4E4F                    1843              TRAP    #15
00002144                          1844  
00002144  4EB9 0000233A           1845              JSR     SRC_REGISTER    *display register
0000214A                          1846  
0000214A  43F9 0000309D           1847              LEA     DISP_CP,A1   *display )
00002150  103C 000E               1848              MOVE.B  #14,D0
00002154  4E4F                    1849              TRAP    #15
00002156                          1850              
00002156  4E75                    1851              RTS
00002158                          1852  
00002158                          1853  *---------------------------------------------------------------------------*
00002158                          1854  * D_MODE011: decode and display dest mode (An)+
00002158                          1855  *---------------------------------------------------------------------------*
00002158                          1856  D_MODE011 *(An)+
00002158  43F9 0000309F           1857              LEA     DISP_AOP,A1      *display (A
0000215E  103C 000E               1858              MOVE.B  #14,D0
00002162  4E4F                    1859              TRAP    #15
00002164                          1860  
00002164  4EB9 000022DE           1861              JSR     DEST_REGISTER    * display register
0000216A                          1862  
0000216A  43F9 000030AC           1863              LEA     DISP_POST,A1    *display )+
00002170  103C 000E               1864              MOVE.B  #14,D0
00002174  4E4F                    1865              TRAP    #15
00002176                          1866              
00002176  4E75                    1867              RTS
00002178                          1868              
00002178                          1869  *---------------------------------------------------------------------------*
00002178                          1870  * D_MODE100: decode and display dest mode -(An)
00002178                          1871  *---------------------------------------------------------------------------*            
00002178                          1872  D_MODE100 *-(An)
00002178  43F9 000030A5           1873              LEA     DISP_PRE,A1    *display -(A
0000217E  103C 000E               1874              MOVE.B  #14,D0
00002182  4E4F                    1875              TRAP    #15
00002184                          1876              
00002184  4EB9 000022DE           1877              JSR     DEST_REGISTER    *display register
0000218A                          1878  
0000218A  43F9 0000309D           1879              LEA     DISP_CP,A1   *display )
00002190  103C 000E               1880              MOVE.B  #14,D0
00002194  4E4F                    1881              TRAP    #15
00002196                          1882              
00002196  4E75                    1883              RTS
00002198                          1884  
00002198                          1885  *---------------------------------------------------------------------------*
00002198                          1886  * MODE111: decode and display source mode absolute/immediate
00002198                          1887  *---------------------------------------------------------------------------*
00002198                          1888  MODE111     * abs/immediate
00002198                          1889              * clear registers to store temp data
00002198  4280                    1890              CLR.L   D0                      
0000219A  4281                    1891              CLR.L   D1                      
0000219C  207C 00000000           1892              MOVEA.L #0, A0                  
000021A2  227C 00000000           1893              MOVEA.L #0, A1                  
000021A8  2205                    1894              MOVE.L  D5,D1
000021AA                          1895              
000021AA                          1896              * retrieve source register for MODE 111
000021AA  E389                    1897              LSL.L   #1,D1   * shift the bits to left by 1
000021AC  0281 0000000E           1898              ANDI.L  #$E,D1  * mask the first 4 bits 
000021B2  0C01 0000               1899              CMPI.B  #0, D1  * if it's 0000, absolute word address
000021B6  6700 003E               1900              BEQ     WORDMODE
000021BA  0C01 0002               1901              CMPI.B  #2, D1  * if it's 0010, absolute long address
000021BE  6700 0062               1902              BEQ     LONGMODE
000021C2  0C01 0008               1903              CMPI.B  #8, D1  * if it's 1000, immediate data
000021C6  6700 0086               1904              BEQ     IMMEDIATE
000021CA                          1905       
000021CA                          1906  *---------------------------------------------------------------------------*
000021CA                          1907  * D_MODE111: decode and display dest mode absolute/immediate
000021CA                          1908  *---------------------------------------------------------------------------*           
000021CA                          1909  D_MODE111   * abs
000021CA                          1910              * clear registers to store temp data
000021CA  4280                    1911              CLR.L   D0                      
000021CC  4281                    1912              CLR.L   D1                      
000021CE  207C 00000000           1913              MOVEA.L #0, A0                  
000021D4  227C 00000000           1914              MOVEA.L #0, A1                  
000021DA  2205                    1915              MOVE.L  D5,D1
000021DC                          1916              
000021DC                          1917              * retrieve dest register for MODE 111
000021DC  EC89                    1918              LSR.L   #6,D1   * shift the bits to right by 6
000021DE  E689                    1919              LSR.L   #3,D1   * shift the bits to right by extra 3
000021E0  0201 0001               1920              ANDI.B  #1,D1   * mask the first 2 bits 
000021E4  0C01 0000               1921              CMPI.B  #0, D1  * if it's 000, absolute word address
000021E8  6700 000C               1922              BEQ     WORDMODE
000021EC  0C01 0001               1923              CMPI.B  #1, D1  * if it's 001, absolute long address
000021F0  6700 0030               1924              BEQ     LONGMODE
000021F4                          1925              *JSR     OP_DATA *not sure..
000021F4  4E75                    1926              RTS
000021F6                          1927  
000021F6                          1928  
000021F6                          1929  *---------------------------------------------------------------------------*
000021F6                          1930  * WORDMODE: absolute word address
000021F6                          1931  *---------------------------------------------------------------------------*
000021F6  43F9 00003089           1932  WORDMODE    LEA     DISP_HEX,A1
000021FC  103C 000E               1933              MOVE.B  #14,D0
00002200  4E4F                    1934              TRAP    #15
00002202                          1935              
00002202  4285                    1936              CLR.L   D5
00002204  3A1D                    1937              MOVE.W  (A5)+,D5
00002206                          1938              
00002206  43F9 00002D67           1939              LEA     TMPOUTPUT,A1
0000220C  2205                    1940              MOVE.L  D5,D1
0000220E  7404                    1941              MOVE.L  #4,D2       *move word size 4
00002210  4EB8 11D8               1942              JSR     HEX2ASCII
00002214  43F9 00002D67           1943              LEA     TMPOUTPUT,A1
0000221A  103C 000E               1944              MOVE.B  #14,D0
0000221E  4E4F                    1945              TRAP    #15
00002220                          1946              
00002220  4E75                    1947              RTS
00002222                          1948  
00002222                          1949  *---------------------------------------------------------------------------*
00002222                          1950  * LONGMODE: absolute long address
00002222                          1951  *---------------------------------------------------------------------------*
00002222  43F9 00003089           1952  LONGMODE    LEA     DISP_HEX,A1
00002228  103C 000E               1953              MOVE.B  #14,D0
0000222C  4E4F                    1954              TRAP    #15
0000222E                          1955              
0000222E  4285                    1956              CLR.L   D5
00002230  2A1D                    1957              MOVE.L  (A5)+,D5
00002232                          1958              
00002232  43F9 00002D67           1959              LEA     TMPOUTPUT,A1
00002238  2205                    1960              MOVE.L  D5,D1
0000223A  7408                    1961              MOVE.L  #8,D2           *move longword size 8
0000223C  4EB8 11D8               1962              JSR     HEX2ASCII
00002240  43F9 00002D67           1963              LEA     TMPOUTPUT,A1
00002246  103C 000E               1964              MOVE.B  #14,D0
0000224A  4E4F                    1965              TRAP    #15
0000224C                          1966              
0000224C  4E75                    1967              RTS
0000224E                          1968  
0000224E                          1969  
0000224E                          1970  *---------------------------------------------------------------------------*
0000224E                          1971  * IMMEDIATE: immediate address
0000224E                          1972  *---------------------------------------------------------------------------*
0000224E  43F9 000030AF           1973  IMMEDIATE   LEA     DISP_LB,A1
00002254  103C 000E               1974              MOVE.B  #14,D0
00002258  4E4F                    1975              TRAP    #15
0000225A  43F9 00003089           1976              LEA     DISP_HEX,A1
00002260  103C 000E               1977              MOVE.B  #14,D0
00002264  4E4F                    1978              TRAP    #15
00002266                          1979              
00002266                          1980              * check for size
00002266  0C04 0000               1981              CMPI.B  #0,D4
0000226A  6700 0012               1982              BEQ     IMMD_B
0000226E  0C04 0001               1983              CMPI.B  #1,D4
00002272  6700 002A               1984              BEQ     IMMD_W
00002276  0C04 0002               1985              CMPI.B  #2,D4
0000227A  6700 0042               1986              BEQ     IMMD_L
0000227E                          1987  
0000227E                          1988  IMMD_B
0000227E  4285                    1989              CLR.L   D5
00002280  3A1D                    1990              MOVE.W  (A5)+,D5
00002282                          1991              
00002282  43F9 00002D67           1992              LEA     TMPOUTPUT,A1
00002288  2205                    1993              MOVE.L  D5,D1
0000228A  7402                    1994              MOVE.L  #2,D2
0000228C  4EB8 11D8               1995              JSR     HEX2ASCII
00002290  43F9 00002D67           1996              LEA     TMPOUTPUT,A1
00002296  103C 000E               1997              MOVE.B  #14,D0
0000229A  4E4F                    1998              TRAP    #15
0000229C  4E75                    1999              RTS
0000229E                          2000              
0000229E                          2001  IMMD_W
0000229E  4285                    2002              CLR.L   D5
000022A0  3A1D                    2003              MOVE.W  (A5)+,D5
000022A2                          2004              
000022A2  43F9 00002D67           2005              LEA     TMPOUTPUT,A1
000022A8  2205                    2006              MOVE.L  D5,D1
000022AA  7404                    2007              MOVE.L  #4,D2
000022AC  4EB8 11D8               2008              JSR     HEX2ASCII
000022B0  43F9 00002D67           2009              LEA     TMPOUTPUT,A1
000022B6  103C 000E               2010              MOVE.B  #14,D0
000022BA  4E4F                    2011              TRAP    #15
000022BC  4E75                    2012              RTS
000022BE                          2013              
000022BE                          2014  
000022BE                          2015  IMMD_L
000022BE  4285                    2016              CLR.L   D5
000022C0  3A1D                    2017              MOVE.W  (A5)+,D5
000022C2                          2018              
000022C2  43F9 00002D67           2019              LEA     TMPOUTPUT,A1
000022C8  2205                    2020              MOVE.L  D5,D1
000022CA  7408                    2021              MOVE.L  #8,D2
000022CC  4EB8 11D8               2022              JSR     HEX2ASCII
000022D0  43F9 00002D67           2023              LEA     TMPOUTPUT,A1
000022D6  103C 000E               2024              MOVE.B  #14,D0
000022DA  4E4F                    2025              TRAP    #15
000022DC  4E75                    2026              RTS
000022DE                          2027  
000022DE                          2028  
000022DE                          2029  *---------------------------------------------------------------------------*
000022DE                          2030  * DEST_REGISTER: decode and display destination register (bit 11 - 9)
000022DE                          2031  *---------------------------------------------------------------------------*
000022DE                          2032  DEST_REGISTER
000022DE                          2033              * clear registers to store temp data
000022DE  4280                    2034              CLR.L   D0                      
000022E0  4281                    2035              CLR.L   D1                      
000022E2  207C 00000000           2036              MOVEA.L #0, A0                  
000022E8  227C 00000000           2037              MOVEA.L #0, A1 
000022EE                          2038              
000022EE  2205                    2039              MOVE.L  D5,D1
000022F0  EC89                    2040              LSR.L   #6,D1
000022F2  E689                    2041              LSR.L   #3,D1
000022F4  0281 00000007           2042              ANDI.L  #7,D1
000022FA                          2043              
000022FA  0C01 0000               2044              CMPI.B  #0,D1
000022FE  6700 0092               2045              BEQ     REG_0
00002302  0C01 0001               2046              CMPI.B  #1,D1
00002306  6700 0098               2047              BEQ     REG_1
0000230A  0C01 0002               2048              CMPI.B  #2,D1
0000230E  6700 009E               2049              BEQ     REG_2
00002312  0C01 0003               2050              CMPI.B  #3,D1
00002316  6700 00A4               2051              BEQ     REG_3
0000231A  0C01 0004               2052              CMPI.B  #4,D1
0000231E  6700 00AA               2053              BEQ     REG_4
00002322  0C01 0005               2054              CMPI.B  #5,D1
00002326  6700 00B0               2055              BEQ     REG_5
0000232A  0C01 0006               2056              CMPI.B  #6,D1
0000232E  6700 00B6               2057              BEQ     REG_6
00002332  0C01 0007               2058              CMPI.B  #7,D1
00002336  6700 00BC               2059              BEQ     REG_7
0000233A                          2060  
0000233A                          2061  *---------------------------------------------------------------------------*
0000233A                          2062  * SRC_REGISTER: decode and display source register (bit 2 - 0)
0000233A                          2063  *---------------------------------------------------------------------------*           
0000233A                          2064  SRC_REGISTER 
0000233A                          2065              * clear registers to store temp data
0000233A  4280                    2066              CLR.L   D0                      
0000233C  4281                    2067              CLR.L   D1                      
0000233E  207C 00000000           2068              MOVEA.L #0, A0                  
00002344  227C 00000000           2069              MOVEA.L #0, A1                  
0000234A                          2070              
0000234A  2205                    2071              MOVE.L  D5,D1   * temp store the processing data
0000234C  0281 00000007           2072              ANDI.L  #7,D1   * mask the first 4 bits with 0111
00002352                          2073              
00002352  0C01 0000               2074              CMPI.B  #0,D1
00002356  6700 003A               2075              BEQ     REG_0
0000235A  0C01 0001               2076              CMPI.B  #1,D1
0000235E  6700 0040               2077              BEQ     REG_1
00002362  0C01 0002               2078              CMPI.B  #2,D1
00002366  6700 0046               2079              BEQ     REG_2
0000236A  0C01 0003               2080              CMPI.B  #3,D1
0000236E  6700 004C               2081              BEQ     REG_3
00002372  0C01 0004               2082              CMPI.B  #4,D1
00002376  6700 0052               2083              BEQ     REG_4
0000237A  0C01 0005               2084              CMPI.B  #5,D1
0000237E  6700 0058               2085              BEQ     REG_5
00002382  0C01 0006               2086              CMPI.B  #6,D1
00002386  6700 005E               2087              BEQ     REG_6
0000238A  0C01 0007               2088              CMPI.B  #7,D1
0000238E  6700 0064               2089              BEQ     REG_7
00002392                          2090  
00002392                          2091  *---------------------------------------------------------------------------*
00002392                          2092  * REG_0 ~ REG_7: display register 0 to 7
00002392                          2093  *---------------------------------------------------------------------------*
00002392  43F9 000030B4           2094  REG_0       LEA     DISP_0,A1
00002398  103C 000E               2095              MOVE.B  #14,D0
0000239C  4E4F                    2096              TRAP    #15
0000239E  4E75                    2097              RTS
000023A0                          2098              
000023A0  43F9 000030B6           2099  REG_1       LEA     DISP_1,A1
000023A6  103C 000E               2100              MOVE.B  #14,D0
000023AA  4E4F                    2101              TRAP    #15
000023AC  4E75                    2102              RTS
000023AE                          2103              
000023AE                          2104  
000023AE  43F9 000030B8           2105  REG_2       LEA     DISP_2,A1
000023B4  103C 000E               2106              MOVE.B  #14,D0
000023B8  4E4F                    2107              TRAP    #15
000023BA  4E75                    2108              RTS
000023BC                          2109            
000023BC  43F9 000030BA           2110  REG_3       LEA     DISP_3,A1
000023C2  103C 000E               2111              MOVE.B  #14,D0
000023C6  4E4F                    2112              TRAP    #15
000023C8  4E75                    2113              RTS
000023CA                          2114              
000023CA  43F9 000030BC           2115  REG_4       LEA     DISP_4,A1
000023D0  103C 000E               2116              MOVE.B  #14,D0
000023D4  4E4F                    2117              TRAP    #15
000023D6  4E75                    2118              RTS
000023D8                          2119              
000023D8  43F9 000030BE           2120  REG_5       LEA     DISP_5,A1
000023DE  103C 000E               2121              MOVE.B  #14,D0
000023E2  4E4F                    2122              TRAP    #15
000023E4  4E75                    2123              RTS
000023E6                          2124              
000023E6  43F9 000030C0           2125  REG_6       LEA     DISP_6,A1
000023EC  103C 000E               2126              MOVE.B  #14,D0
000023F0  4E4F                    2127              TRAP    #15
000023F2  4E75                    2128              RTS
000023F4                          2129              
000023F4  43F9 000030C2           2130  REG_7       LEA     DISP_7,A1
000023FA  103C 000E               2131              MOVE.B  #14,D0
000023FE  4E4F                    2132              TRAP    #15
00002400  4E75                    2133              RTS
00002402                          2134              
00002402                          2135  *---------------------------------------------------------------------------*
00002402                          2136  * REPEAT : Ask user whether they wish to run the program again
00002402                          2137  *---------------------------------------------------------------------------*           
00002402  4246                    2138  REPEAT      CLR.W   D6                      * Reset D6 (Loop Count)
00002404  43F9 00002B8D           2139              LEA     REPEATMSG,A1
0000240A  103C 000E               2140              MOVE.B  #14,D0
0000240E  4E4F                    2141              TRAP    #15
00002410                          2142              
00002410  43F9 00002D17           2143              LEA     TMPINPUT,A1             * allocate space to temp store user input
00002416  103C 0002               2144              MOVE.B  #2,D0
0000241A  4E4F                    2145              TRAP    #15
0000241C                          2146  
0000241C  0C01 0001               2147              CMPI.B  #1,D1                   * check for length of user input
00002420  66E0                    2148              BNE     REPEAT                  * return to the beginning of the function if unequal
00002422                          2149              
00002422  0C11 0059               2150              CMPI.B  #$59,(A1)               * compare the input with Y    
00002426  6700 EBE2               2151              BEQ     PROGLP                  * repeat the program
0000242A                          2152              
0000242A  0C11 0079               2153              CMPI.B  #$79,(A1)               * compare the input with y    
0000242E  6700 EBDA               2154              BEQ     PROGLP                  * repeat the program
00002432                          2155              
00002432  0C11 004E               2156              CMPI.B  #$4E,(A1)               * compare the input with N    
00002436  6700 03E8               2157              BEQ     TERMINATE               * finish program
0000243A                          2158              
0000243A  0C11 006E               2159              CMPI.B  #$6E,(A1)               * compare the input with n    
0000243E  6700 03E0               2160              BEQ     TERMINATE               * finish program
00002442                          2161              
00002442  60BE                    2162              BRA     REPEAT                  * invalid input/repeat the function
00002444                          2163  
00002444                          2164  *---------------------------------------------------------------------------*
00002444                          2165  * EA DECODING INTERFACE
00002444                          2166  * [A0] - RESERVED FOR USE
00002444                          2167  * [D2] - RESERVED FOR USE
00002444                          2168  * RETURNS - ERROR FLAG IF FAILED TO PUSH SRC EA INTO STACK
00002444                          2169  *---------------------------------------------------------------------------*
00002444                          2170  GET_EA_EA_SRC
00002444                          2171      *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
00002444                          2172      
00002444                          2173      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
00002444  2405                    2174      MOVE.L  D5,D2                           * CLEAN COPY TO D2
00002446  E68A                    2175      LSR.L   #3,D2                           * [D2] Temporarily used D2 for shifting bits
00002448  23C2 000030DA           2176      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
0000244E  7407                    2177      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
00002450  C5B9 000030DA           2178      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
00002456                          2179                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
00002456                          2180      
00002456                          2181      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
00002456                          2182      *DESTINATION REGISTER FORMAT STANDARD         *
00002456                          2183      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
00002456                          2184      *WHEN BIT = 0(VALID ADDRESS MODE)             *
00002456                          2185      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
00002456                          2186      *0 - Dn                                       *
00002456                          2187      *1 - An                                       *
00002456                          2188      *2 - (An)                                     *
00002456                          2189      *3 - (An)+                                    *
00002456                          2190      *4 - -(An)                                    *
00002456                          2191      *5 - (XXX).W                                  *
00002456                          2192      *6 - (XXX).L                                  *
00002456                          2193      *7 - #<data>                                  *
00002456                          2194      ***********************************************
00002456                          2195      
00002456                          2196      *** Check if source ...  <ea> = Dn
00002456                          2197  CHECK0    
00002456  41F9 000030CA           2198            LEA     TEMP_REGISTER_FORMAT,A0
0000245C  1439 000030C9           2199            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002462  1082                    2200            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002464  0239 0001 000030CA      2201            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
0000246C  0C39 0001 000030CA      2202            CMPI.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
00002474  6700 006A               2203            BEQ     CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00002478  0CB9 00000000 000030DA  2204            CMPI.L     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn) - COMPARE MODES TO SEE IF IT IS THIS MODE
00002482  6600 005C               2205            BNE     CHECK1
00002486                          2206            
00002486                          2207            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002486  163C 0020               2208            MOVE.B    #' ',D3
0000248A  6100 0316               2209            BSR       PUSH_STACK
0000248E  163C 0044               2210            MOVE.B    #'D',D3
00002492  6100 030E               2211            BSR       PUSH_STACK
00002496                          2212  
00002496                          2213            *FIND REGISTER NUMBER END LOCATION*  
00002496  13F9 000030CC 000030D2  2214            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
000024A0  0239 000F 000030D2      2215            AND.B   #$0F,VAR_BYTE_END
000024A8                          2216            
000024A8                          2217            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000024A8  23C5 000030D6           2218            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000024AE  1439 000030D2           2219            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000024B4                          2220            
000024B4                          2221            *INTITIALIZE FOR BIT SHIFTING
000024B4  41F9 000030D6           2222            LEA     VAR_TEMP_CLEANCOPY,A0
000024BA  2639 000030D6           2223            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000024C0                          2224  LOOP_SHIFTING
000024C0  0C02 0000               2225            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000024C4  6700 0008               2226            BEQ     MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
000024C8  E24B                    2227            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000024CA  5302                    2228            SUB.B   #1,D2                     *DECREMENT COUNTER
000024CC  60F2                    2229            BRA     LOOP_SHIFTING             *CONTINUE SHIFTING
000024CE                          2230  MASKING_NEXT
000024CE  C6BC 00000007           2231            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000024D4  0603 0030               2232            ADD.B   #$30,D3                   *CONVERT TO CHAR
000024D8  6100 02C8               2233            BSR     PUSH_STACK                *PUSH TO STACK
000024DC                          2234            
000024DC  6000 0284               2235            BRA     GET_SRC_SUCCESS           *RETURN          
000024E0                          2236            
000024E0                          2237            
000024E0                          2238            *** Check if source ...  <ea> = An
000024E0  41F9 000030CA           2239  CHECK1    LEA     TEMP_REGISTER_FORMAT,A0
000024E6  1439 000030C9           2240            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000024EC  1082                    2241            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000024EE  0239 0002 000030CA      2242            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
000024F6  0C39 0002 000030CA      2243            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
000024FE  6700 006A               2244            BEQ     CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00002502  0CB9 00000001 000030DA  2245            CMPI.L  #1,VAR_LONG_ADDRESS_MODE_CHECK                      * An - COMPARE MODES TO SEE IF IT IS THIS MODE
0000250C  6600 005C               2246            BNE     CHECK2
00002510                          2247            
00002510                          2248            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002510  163C 0020               2249            MOVE.B    #' ',D3
00002514  6100 028C               2250            BSR       PUSH_STACK
00002518  163C 0041               2251            MOVE.B    #'A',D3
0000251C  6100 0284               2252            BSR       PUSH_STACK
00002520                          2253  
00002520                          2254            
00002520                          2255            *FIND REGISTER NUMBER END LOCATION*  
00002520  13F9 000030CC 000030D2  2256            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
0000252A  0239 000F 000030D2      2257            AND.B   #$0F,VAR_BYTE_END
00002532                          2258            
00002532                          2259            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002532  23C5 000030D6           2260            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002538  1439 000030D2           2261            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
0000253E                          2262            
0000253E                          2263            *INTITIALIZE FOR BIT SHIFTING
0000253E  41F9 000030D6           2264            LEA     VAR_TEMP_CLEANCOPY,A0
00002544  2639 000030D6           2265            MOVE.L  VAR_TEMP_CLEANCOPY,D3
0000254A                          2266  LOOP_SHIFTING1
0000254A  0C02 0000               2267            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000254E  6700 0008               2268            BEQ     MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00002552  E24B                    2269            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002554  5302                    2270            SUB.B   #1,D2                     *DECREMENT COUNTER
00002556  60F2                    2271            BRA     LOOP_SHIFTING1             *CONTINUE SHIFTING
00002558                          2272  MASKING_NEXT1
00002558  C6BC 00000007           2273            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
0000255E  0603 0030               2274            ADD.B   #$30,D3                   *CONVERT TO CHAR
00002562  6100 023E               2275            BSR     PUSH_STACK                *PUSH TO STACK
00002566                          2276            
00002566  6000 01FA               2277            BRA     GET_SRC_SUCCESS                   *RETURN 
0000256A                          2278            
0000256A                          2279            
0000256A                          2280            
0000256A                          2281            
0000256A                          2282            *** Check if source ...  <ea> = (An)       
0000256A  41F9 000030CA           2283  CHECK2    LEA     TEMP_REGISTER_FORMAT,A0
00002570  1439 000030C9           2284            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002576  1082                    2285            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002578  0239 0004 000030CA      2286            ANDI.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
00002580  0C39 0004 000030CA      2287            CMPI.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
00002588  6700 007A               2288            BEQ     CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
0000258C  0CB9 00000002 000030DA  2289            CMPI.L   #2,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)  COMPARE MODES TO SEE IF IT IS THIS MODE                                                                *change: checkx++*
00002596  6600 006C               2290            BNE     CHECK3
0000259A                          2291            
0000259A                          2292            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
0000259A  163C 0020               2293            MOVE.B    #' ',D3
0000259E  6100 0202               2294            BSR       PUSH_STACK
000025A2  163C 0028               2295            MOVE.B    #'(',D3
000025A6  6100 01FA               2296            BSR       PUSH_STACK
000025AA  163C 0041               2297            MOVE.B    #'A',D3
000025AE  6100 01F2               2298            BSR       PUSH_STACK
000025B2                          2299  
000025B2                          2300            
000025B2                          2301            *FIND REGISTER NUMBER END LOCATION*  
000025B2  13F9 000030CC 000030D2  2302            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
000025BC  0239 000F 000030D2      2303            AND.B   #$0F,VAR_BYTE_END
000025C4                          2304            
000025C4                          2305            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000025C4  23C5 000030D6           2306            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000025CA  1439 000030D2           2307            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000025D0                          2308            
000025D0                          2309            *INTITIALIZE FOR BIT SHIFTING
000025D0  41F9 000030D6           2310            LEA     VAR_TEMP_CLEANCOPY,A0
000025D6  2639 000030D6           2311            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000025DC                          2312  LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
000025DC  0C02 0000               2313            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000025E0  6700 0008               2314            BEQ     MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
000025E4  E24B                    2315            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000025E6  5302                    2316            SUB.B   #1,D2                     *DECREMENT COUNTER
000025E8  60F2                    2317            BRA     LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
000025EA                          2318  MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
000025EA  0283 00000007           2319            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000025F0  0603 0030               2320            ADDI.B   #$30,D3                   *CONVERT TO CHAR
000025F4  6100 01AC               2321            BSR     PUSH_STACK                *PUSH TO STACK
000025F8                          2322            
000025F8  163C 0029               2323            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
000025FC  6100 01A4               2324            BSR       PUSH_STACK
00002600                          2325            
00002600  6000 0160               2326            BRA     GET_SRC_SUCCESS                   *RETURN 
00002604                          2327  
00002604                          2328            
00002604                          2329            
00002604                          2330                      
00002604                          2331  *** Check if source ...  <ea> = (An)+       
00002604  41F9 000030CA           2332  CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
0000260A  1439 000030C9           2333            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002610  1082                    2334            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002612  0239 0008 000030CA      2335            ANDI.B  #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
0000261A  0C39 0008 000030CA      2336            CMPI.B  #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
00002622  6700 0082               2337            BEQ     CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002626  0CB9 00000003 000030DA  2338            CMPI.L  #3,VAR_LONG_ADDRESS_MODE_CHECK                      * (An)+ - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
00002630  6600 0074               2339            BNE     CHECK4
00002634                          2340            
00002634                          2341            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002634  163C 0020               2342            MOVE.B    #' ',D3
00002638  6100 0168               2343            BSR       PUSH_STACK
0000263C  163C 0028               2344            MOVE.B    #'(',D3
00002640  6100 0160               2345            BSR       PUSH_STACK
00002644  163C 0041               2346            MOVE.B    #'A',D3
00002648  6100 0158               2347            BSR       PUSH_STACK
0000264C                          2348  
0000264C                          2349            
0000264C                          2350            *FIND REGISTER NUMBER END LOCATION*  
0000264C  13F9 000030CC 000030D2  2351            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002656  0239 000F 000030D2      2352            ANDI.B   #$0F,VAR_BYTE_END
0000265E                          2353            
0000265E                          2354            *GET INDEX OF THE END OF SRC REGISTER NUMBER
0000265E  23C5 000030D6           2355            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002664  1439 000030D2           2356            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
0000266A                          2357            
0000266A                          2358            *INTITIALIZE FOR BIT SHIFTING
0000266A  41F9 000030D6           2359            LEA     VAR_TEMP_CLEANCOPY,A0
00002670  2639 000030D6           2360            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002676                          2361            
00002676                          2362  LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
00002676  0C02 0000               2363            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000267A  6700 0008               2364            BEQ     MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
0000267E  E24B                    2365            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002680  5302                    2366            SUBI.B   #1,D2                     *DECREMENT COUNTER
00002682  60F2                    2367            BRA     LOOP_SHIFTING3            *CONTINUE SHIFTING 
00002684                          2368                                               *change: NAME OF LABEL*
00002684                          2369  MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
00002684  0283 00000007           2370            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
0000268A  0603 0030               2371            ADDI.B   #$30,D3                   *CONVERT TO CHAR
0000268E  6100 0112               2372            BSR     PUSH_STACK                *PUSH TO STACK
00002692                          2373            
00002692  163C 0029               2374            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002696  6100 010A               2375            BSR       PUSH_STACK
0000269A  163C 002B               2376            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
0000269E  6100 0102               2377            BSR       PUSH_STACK
000026A2                          2378            
000026A2  6000 00BE               2379            BRA       GET_SRC_SUCCESS                   *RETURN 
000026A6                          2380  
000026A6                          2381            
000026A6                          2382            
000026A6                          2383                      
000026A6                          2384            *** Check if source ...  <ea> = -(An)       
000026A6  41F9 000030CA           2385  CHECK4    LEA     TEMP_REGISTER_FORMAT,A0
000026AC  1439 000030C9           2386            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000026B2  1082                    2387            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000026B4  0239 0010 000030CA      2388            ANDI.B  #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
000026BC  0C39 0010 000030CA      2389            CMPI.B  #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
000026C4  6700 0082               2390            BEQ     CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
000026C8  0CB9 00000004 000030DA  2391            CMPI.L  #4,VAR_LONG_ADDRESS_MODE_CHECK                      * -(An) - COMPARE MODES TO SEE IF IT IS THIS MODE                                                                  *change: checkx++*
000026D2  6600 0074               2392            BNE     CHECK7
000026D6                          2393            
000026D6                          2394            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
000026D6  163C 0020               2395            MOVE.B    #' ',D3
000026DA  6100 00C6               2396            BSR       PUSH_STACK
000026DE  163C 002D               2397            MOVE.B    #'-',D3
000026E2  6100 00BE               2398            BSR       PUSH_STACK
000026E6  163C 0028               2399            MOVE.B    #'(',D3
000026EA  6100 00B6               2400            BSR       PUSH_STACK
000026EE  163C 0041               2401            MOVE.B    #'A',D3
000026F2  6100 00AE               2402            BSR       PUSH_STACK
000026F6                          2403  
000026F6                          2404            
000026F6                          2405            *FIND REGISTER NUMBER END LOCATION*  
000026F6  13F9 000030CC 000030D2  2406            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002700  0239 000F 000030D2      2407            AND.B   #$0F,VAR_BYTE_END
00002708                          2408            
00002708                          2409            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002708  23C5 000030D6           2410            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
0000270E  1439 000030D2           2411            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002714                          2412            
00002714                          2413            *INTITIALIZE FOR BIT SHIFTING
00002714  41F9 000030D6           2414            LEA     VAR_TEMP_CLEANCOPY,A0
0000271A  2639 000030D6           2415            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002720                          2416            
00002720                          2417  LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
00002720  0C02 0000               2418            CMPI.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002724  6700 0008               2419            BEQ     MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002728  E24B                    2420            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
0000272A  5302                    2421            SUBI.B   #1,D2                     *DECREMENT COUNTER
0000272C  60F2                    2422            BRA     LOOP_SHIFTING4            *CONTINUE SHIFTING 
0000272E                          2423                                               *change: NAME OF LABEL*
0000272E                          2424  MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
0000272E  0283 00000007           2425            ANDI.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002734  0603 0030               2426            ADDI.B   #$30,D3                   *CONVERT TO CHAR
00002738  6100 0068               2427            BSR     PUSH_STACK                *PUSH TO STACK
0000273C                          2428            
0000273C  163C 0029               2429            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002740  6100 0060               2430            BSR       PUSH_STACK
00002744                          2431            
00002744  6000 001C               2432            BRA     GET_SRC_SUCCESS                   *RETURN
00002748                          2433            
00002748                          2434                      
00002748                          2435            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
00002748  0C79 0007 000030DA      2436  CHECK7    CMPI     #7,VAR_LONG_ADDRESS_MODE_CHECK               * (Dn)
00002750  6600 000C               2437            BNE     GET_SRC_FAILED
00002754                          2438            
00002754                          2439            *JUST DISPLAYS ADDRESS MODE 111 FOR TESTING PURPOSE
00002754  7646                    2440            MOVE.L  #'F',D3
00002756  6100 004A               2441            BSR     PUSH_STACK          
0000275A                          2442        
0000275A                          2443         *   MOVE.B  DEST_REGISTER_FORMAT, TEMP_REGISTER_FORMAT * COPY FORMAT TO TEMP VARIABLE
0000275A                          2444         *   AND.B   #$E0,TEMP_REGISTER_FORMAT                           * MASKS 11100000
0000275A                          2445         *   CMP.B   #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT >= 11100000) THAN INVALID ADDRESSMODE 
0000275A                          2446         *   BEQ     FAILED                                            * THE REGISTER FORMAT DOES NOT ALLOW "-(An)" -> SO MOVE ON
0000275A                          2447            
0000275A                          2448         *   MOVE.B  DEST_REGISTER_FORMAT, TEMP_REGISTER_FORMAT * COPY FORMAT TO TEMP VARIABLE
0000275A                          2449         *   AND.B   #$E0,TEMP_REGISTER_FORMAT                           * MASKS 11100000
0000275A                          2450         *   CMP.B   #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT >= 11100000) THAN INVALID ADDRESSMODE 
0000275A                          2451          *  BEQ     FAILED                                            * THE REGISTER FORMAT DOES NOT ALLOW "-(An)" -> SO MOVE ON
0000275A                          2452            
0000275A                          2453            *MOVE.B  DEST_REGISTER_FORMAT, TEMP_REGISTER_FORMAT * COPY FORMAT TO TEMP VARIABLE
0000275A                          2454           * AND.B   #$E0,TEMP_REGISTER_FORMAT                           * MASKS 11100000
0000275A                          2455          *  CMP.B   #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT >= 11100000) THAN INVALID ADDRESSMODE 
0000275A                          2456           * BEQ     FAILED                                            * THE REGISTER FORMAT DOES NOT ALLOW "-(An)" -> SO MOVE ON
0000275A                          2457            
0000275A                          2458  CHECK_WORD
0000275A                          2459  CHECK_LONG
0000275A                          2460  CHECK_IMMEDIATE
0000275A                          2461            
0000275A                          2462            *EA_EA_GET_SRC INTO D3
0000275A  6000 0006               2463            BRA     GET_SRC_SUCCESS
0000275E                          2464            
0000275E                          2465  GET_SRC_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
0000275E  7801                    2466            MOVE.L #1,D4
00002760  4E75                    2467            RTS
00002762                          2468  GET_SRC_SUCCESS 
00002762  4E75                    2469            RTS
00002764                          2470                                 
00002764                          2471      
00002764                          2472  
00002764                          2473  
00002764                          2474  
00002764                          2475  
00002764                          2476  
00002764                          2477  
00002764                          2478  GET_EA_EA_DEST
00002764                          2479  
00002764                          2480  *---------------------------------------------------------------------------*
00002764                          2481  * STACK/QUEUE INTERFACE
00002764                          2482  *---------------------------------------------------------------------------*
00002764                          2483  PRINT_STACK
00002764  0C39 0000 000030C4      2484            CMP.B     #0,COUNTER
0000276C  6700 000E               2485            BEQ       PRINT_STACK_RETURN             *CHECK IF LOOP IS FINISHED
00002770                          2486            
00002770                          2487  PRINT_STACK_HELPER
00002770  6100 0038               2488            BSR      POP_STACK          *PRINTS ADDRESS
00002774  103C 0006               2489            MOVE.B   #6,D0              *Display single character in D1.B. 
00002778  4E4F                    2490            TRAP     #15             *ACTIVATES PRINT
0000277A                          2491  
0000277A  60E8                    2492            BRA       PRINT_STACK
0000277C                          2493  PRINT_STACK_RETURN
0000277C  4E75                    2494            RTS
0000277E                          2495            
0000277E                          2496            
0000277E                          2497  PRINT_QUEUE
0000277E  0C39 0000 000030C4      2498            CMP.B     #0,COUNTER
00002786  6700 0018               2499            BEQ       PRINT_QUEUE_RETURN             *CHECK IF LOOP IS FINISHED
0000278A                          2500            
0000278A                          2501  PRINT_QUEUE_HELPER
0000278A  33F9 000030C4 000030C6  2502            MOVE.W   COUNTER,QUEUE_COUNTER
00002794  6100 0022               2503            BSR      POP_FRONT          *PRINTS ADDRESS
00002798  103C 0006               2504            MOVE.B   #6,D0              *Display single character in D1.B. 
0000279C  4E4F                    2505            TRAP     #15             *ACTIVATES PRINT
0000279E                          2506  
0000279E  60DE                    2507            BRA       PRINT_QUEUE
000027A0                          2508  PRINT_QUEUE_RETURN
000027A0  4E75                    2509            RTS
000027A2                          2510            
000027A2                          2511  *PUSHES.W CONTENTS OF [D3] INTO STACK          
000027A2                          2512  PUSH_STACK
000027A2  1503                    2513              MOVE.B  D3,-(A2)
000027A4  6100 0058               2514              BSR     INCREMENT
000027A8  4E75                    2515              RTS
000027AA                          2516  *POPS.W TOP OF STACK INTO [D1], SO ITS READY TO PRINT WITH TRAP 15
000027AA                          2517  *         MOVE.W   (A2)+,D1           *PRINTS ADDRESS
000027AA                          2518  *         MOVE.B   #15,D0             *PRINTS ACCORDING TO D2 BASE VALUE
000027AA                          2519  *         MOVE.B   #16,D2             *PRINTS BASED 16 NUMBER
000027AA                          2520  *         TRAP        #15             *ACTIVATES PRINT
000027AA                          2521  POP_STACK
000027AA  BECA                    2522              CMPA.W   A2,SP            *CHECKS IF THERE IS ANYTHING TO PUSH
000027AC  6700 0008               2523              BEQ     POP_RETURN        *IF NOTHING TO PUSH THAN JUST RETURN
000027B0  121A                    2524              MOVE.B  (A2)+,D1 
000027B2  6100 0052               2525              BSR     DECREMENT
000027B6                          2526  POP_RETURN
000027B6  4E75                    2527              RTS 
000027B8                          2528        
000027B8                          2529  *USE [A4] AS SECOND POINTER IN SHIFTING      
000027B8  0C39 0000 000030C6      2530  POP_FRONT   CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
000027C0  6700 0030               2531              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
000027C4                          2532              
000027C4                          2533              
000027C4                          2534              *POSITION THE POINTERS A[4] RIGHT BEHIND A[2] WHICH IS RIGHT BEHIND STACK
000027C4  347C 7000               2535              MOVEA.W #STACK,A2   *START A2 AT STACK
000027C8  0622 0000               2536              ADD.B   #0,-(A2)    *SHIFT A2 TO THE BOTTOM OF THE STACK
000027CC  384A                    2537              MOVEA.W A2,A4     *START A4 RIGHT ABOVE A2
000027CE  0624 0000               2538              ADD.B   #0,-(A4)  *leash one more higher in stack (a4)
000027D2  1212                    2539              MOVE.B  (A2),D1     *POP CONTENTS INTO D1
000027D4                          2540  POP_SHIFT_LOOP
000027D4  0C39 0000 000030C6      2541              CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
000027DC  6700 0014               2542              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
000027E0  1494                    2543              MOVE.B  (A4),(A2)   *SHIFT CONTENT DOWN THE STACK
000027E2  0624 0000               2544              ADD.B   #0,-(A4)
000027E6  0622 0000               2545              ADD.B   #0,-(A2) *SHIFT POINTERS DOWN THE STACK
000027EA  5339 000030C6           2546              SUB.B   #1,QUEUE_COUNTER *DECREMENT INTERNAL QUEUE COUNTER
000027F0                          2547              
000027F0  60E2                    2548              BRA     POP_SHIFT_LOOP
000027F2                          2549                          
000027F2                          2550  POP_FRONT_RETURN 
000027F2                          2551              *RESET A2 BACK TO SP
000027F2  347C 7000               2552              MOVEA.W #STACK,A2    
000027F6  5339 000030C4           2553              SUB.B   #1,COUNTER *DECREMENT STACK COUNTER       
000027FC  4E75                    2554              RTS   
000027FE                          2555  
000027FE                          2556  INCREMENT
000027FE  5239 000030C4           2557              ADD.B   #1, COUNTER
00002804  4E75                    2558              RTS           
00002806                          2559  DECREMENT
00002806  5339 000030C4           2560              SUB.B   #1, COUNTER
0000280C  4E75                    2561              RTS           
0000280E                          2562  CLEAR_STACK
0000280E  0C39 0000 000030C4      2563              CMP.B     #0,COUNTER
00002816  6700 0006               2564              BEQ       CLEAR_RETURN
0000281A  618E                    2565              BSR       POP_STACK
0000281C  60F0                    2566              BRA       CLEAR_STACK
0000281E                          2567   
0000281E                          2568  CLEAR_RETURN
0000281E  4E75                    2569              RTS    
00002820                          2570  *---------------------------------------------------------------------------*
00002820                          2571  * TERMINATE
00002820                          2572  *---------------------------------------------------------------------------*
00002820                          2573  TERMINATE   
00002820  43F9 00002BD0           2574              LEA     FINMSG,A1
00002826  103C 000E               2575              MOVE.B  #14,D0
0000282A  4E4F                    2576              TRAP    #15
0000282C                          2577  
0000282C  103C 0009               2578              MOVE.B  #9,D0
00002830  4E4F                    2579              TRAP    #15
00002832                          2580  
00002832                          2581  *---------------------------------------------------------------------------*
00002832                          2582  * Data storage                                                 
00002832                          2583  *---------------------------------------------------------------------------*  
00002832                          2584  WELCOME
00002832= 20 20 20 20 20 20 ...   2585              DC.B '                         ___     ___ ___        ___   ___ ___                 ',CR,LF
00002882= 3D 3D 3D 3D 3D 20 ...   2586              DC.B '=====           \  /\  /|___|   |   |   ||\  /||___    | |   |           =====',CR,LF
000028D2= 3D 3D 3D 3D 3D 20 ...   2587              DC.B '=====            \/  \/ |___|___|___|___|| \/ ||___    | |___|           =====',CR,LF
00002922                          2588      
00002922= 20 20 20 20 20 20 ...   2589              DC.B '                        ___ ___ ___  ___      ___                             ',CR,LF
00002972= 20 20 20 20 20 20 ...   2590              DC.B '                       |     | |___)|    |   |___                             ',CR,LF 
000029C2= 20 20 20 20 20 20 ...   2591              DC.B '                       |___ _|_|\___|___ |___|___                             ',CR,LF
00002A12                          2592      
00002A12= 20 20 20 20 20 20 ...   2593              DC.B '           __  ___ ___   _   ___  ___  ___        ___      ___ ___            ',CR,LF
00002A62= 3D 3D 3D 3D 3D 20 ...   2594              DC.B '=====     |  \  | |___  /_\ |___ |___ |___ |\  /||___||   |___|___)      =====',CR,LF 
00002AB2= 3D 3D 3D 3D 3D 20 ...   2595              DC.B '=====     |__/ _|_ ___|/   \ ___| ___||___ | \/ ||___||___|___|\___      =====',CR,LF,CR,LF,CR,LF,0
00002B07                          2596  
00002B07                          2597  PROMPT_START
00002B07= 50 6C 65 61 73 65 ...   2598              DC.B    'Please enter a hexadecimal starting address.',CR,LF,0
00002B36                          2599      
00002B36                          2600  PROMPT_END
00002B36= 50 6C 65 61 73 65 ...   2601              DC.B    'Please enter a hexadecimal ending address.',CR,LF,0
00002B63= 0D 0A 48 69 74 20 ...   2602  DISP_NEXT   DC.B    CR,LF,'Hit Enter to print the next 30 lines.',CR,LF,0            
00002B8D= 57 6F 75 6C 64 20 ...   2603  REPEATMSG   DC.B    'Would you like to run again? Press Y to continue or N to finish.',CR,LF,0
00002BD0= 54 68 61 6E 6B 20 ...   2604  FINMSG      DC.B    'Thank you for using Circle Disassembler.',CR,LF,0
00002BFB= 45 72 72 6F 72 3A ...   2605  ERRMSG_1    DC.B    'Error: Invalid Input Address',CR,LF,0
00002C1A= 45 72 72 6F 72 3A ...   2606  ERRMSG_3    DC.B    'Error: Invalid Input Address (Odd)',CR,LF,0
00002C3F= 45 72 72 6F 72 3A ...   2607  ERRMSG_5    DC.B    'Error: Invalid Input Address (start > end)',CR,LF,0
00002C6C                          2608  
00002C6C                          2609  VR_S_ADDR   DS.B    80                      * allocate storage space for the starting address
00002CBC                          2610  VR_E_ADDR   DS.B    80                      * allocate storage space for the ending address
00002D0C                          2611  S_ADDR_HX   DS.L    1                       * allocate storage space for the starting address in hex
00002D10                          2612  E_ADDR_HX   DS.L    1                       * allocate storage space for the ending address in hex
00002D14= 0D 0A 00                2613  ENDLINE_M   DC.B    CR,LF,0
00002D17                          2614  TMPINPUT    DS.B    80                      * temp store user input
00002D67                          2615  TMPOUTPUT   DS.B    80                      * temp store prog output
00002DB7= 20 20 20 4F 52 49 ...   2616  DISP_ORI_B  DC.B    '   ORI.B',0
00002DC0= 20 20 20 4F 52 49 ...   2617  DISP_ORI_W  DC.B    '   ORI.W',0
00002DC9= 20 20 20 4F 52 49 ...   2618  DISP_ORI_L  DC.B    '   ORI.L',0
00002DD2= 20 20 20 45 4F 52 ...   2619  DISP_EORI_B  DC.B    '   EORI.B',0
00002DDC= 20 20 20 45 4F 52 ...   2620  DISP_EORI_W  DC.B    '   EORI.W',0
00002DE6= 20 20 20 45 4F 52 ...   2621  DISP_EORI_L  DC.B    '   EORI.L',0
00002DF0= 20 20 20 42 54 53 ...   2622  DISP_BTST   DC.B    '   BTST',0
00002DF8= 20 20 20 43 4D 50 ...   2623  DISP_CMPI_B  DC.B    '   CMPI.B',0
00002E02= 20 20 20 43 4D 50 ...   2624  DISP_CMPI_W  DC.B    '   CMPI.W',0
00002E0C= 20 20 20 43 4D 50 ...   2625  DISP_CMPI_L  DC.B    '   CMPI.L',0
00002E16= 20 20 20 44 41 54 ...   2626  DISP_DATA   DC.B    '   DATA',0
00002E1E= 20 20 20 4D 4F 56 ...   2627  DISP_MOVE_B DC.B    '   MOVE.B',0
00002E28= 20 20 20 4D 4F 56 ...   2628  DISP_MOVE_W DC.B    '   MOVE.W',0
00002E32= 20 20 20 4D 4F 56 ...   2629  DISP_MOVE_L DC.B    '   MOVE.L',0
00002E3C= 20 20 20 52 54 53 00    2630  DISP_RTS    DC.B    '   RTS',0
00002E43= 20 20 20 4A 53 52 00    2631  DISP_JSR    DC.B    '   JSR',0
00002E4A= 20 20 20 4E 45 47 ...   2632  DISP_NEG_B    DC.B    '   NEG.B',0
00002E53= 20 20 20 4E 45 47 ...   2633  DISP_NEG_W    DC.B    '   NEG.W',0
00002E5C= 20 20 20 4E 45 47 ...   2634  DISP_NEG_L    DC.B    '   NEG.L',0
00002E65= 20 20 20 4E 4F 54 ...   2635  DISP_NOT_B  DC.B    '   NOT.B',0
00002E6E= 20 20 20 4E 4F 54 ...   2636  DISP_NOT_W  DC.B    '   NOT.W',0
00002E77= 20 20 20 4E 4F 54 ...   2637  DISP_NOT_L  DC.B    '   NOT.L',0
00002E80= 20 20 20 4C 45 41 00    2638  DISP_LEA    DC.B    '   LEA',0
00002E87= 20 20 20 4D 4F 56 ...   2639  DISP_MOVEM_W    DC.B    '   MOVEM.W',0
00002E92= 20 20 20 4D 4F 56 ...   2640  DISP_MOVEM_L    DC.B    '   MOVEM.L',0
00002E9D= 20 20 20 41 44 44 ...   2641  DISP_ADDQ_B DC.B    '   ADDQ.B',0
00002EA7= 20 20 20 41 44 44 ...   2642  DISP_ADDQ_W DC.B    '   ADDQ.W',0
00002EB1= 20 20 20 41 44 44 ...   2643  DISP_ADDQ_L DC.B    '   ADDQ.L',0
00002EBB= 20 20 20 44 49 56 ...   2644  DISP_DIVS   DC.B    '   DIVS',0
00002EC3= 20 20 20 53 55 42 ...   2645  DISP_SUB_B  DC.B    '   SUB.B',0
00002ECC= 20 20 20 53 55 42 ...   2646  DISP_SUB_W  DC.B    '   SUB.W',0
00002ED5= 20 20 20 53 55 42 ...   2647  DISP_SUB_L  DC.B    '   SUB.L',0
00002EDE= 20 20 20 53 55 42 ...   2648  DISP_SUBI_B  DC.B    '   SUBI.B',0
00002EE8= 20 20 20 53 55 42 ...   2649  DISP_SUBI_W  DC.B    '   SUBI.W',0
00002EF2= 20 20 20 53 55 42 ...   2650  DISP_SUBI_L  DC.B    '   SUBI.L',0
00002EFC= 20 20 20 53 55 42 ...   2651  DISP_SUBA_W  DC.B    '   SUBA.W',0
00002F06= 20 20 20 53 55 42 ...   2652  DISP_SUBA_L  DC.B    '   SUBA.L',0
00002F10= 20 20 20 45 4F 52 ...   2653  DISP_EOR_B  DC.B    '   EOR.B',0
00002F19= 20 20 20 45 4F 52 ...   2654  DISP_EOR_W  DC.B    '   EOR.W',0
00002F22= 20 20 20 45 4F 52 ...   2655  DISP_EOR_L  DC.B    '   EOR.L',0
00002F2B= 20 20 20 43 4D 50 ...   2656  DISP_CMP_B  DC.B    '   CMP.B',0
00002F34= 20 20 20 43 4D 50 ...   2657  DISP_CMP_W  DC.B    '   CMP.W',0
00002F3D= 20 20 20 43 4D 50 ...   2658  DISP_CMP_L  DC.B    '   CMP.L',0
00002F46= 20 20 20 43 4D 50 ...   2659  DISP_CMPA_W  DC.B    '   CMPA.W',0
00002F50= 20 20 20 43 4D 50 ...   2660  DISP_CMPA_L  DC.B    '   CMPA.L',0
00002F5A= 20 20 20 4D 55 4C ...   2661  DISP_MULS_W DC.B    '   MULS.W',0
00002F64= 20 20 20 41 4E 44 ...   2662  DISP_AND_B  DC.B    '   AND.B',0
00002F6D= 20 20 20 41 4E 44 ...   2663  DISP_AND_W  DC.B    '   AND.W',0
00002F76= 20 20 20 41 4E 44 ...   2664  DISP_AND_L  DC.B    '   AND.L',0
00002F7F= 20 20 20 41 44 44 ...   2665  DISP_ADD_B  DC.B    '   ADD.B',0
00002F88= 20 20 20 41 44 44 ...   2666  DISP_ADD_W  DC.B    '   ADD.W',0
00002F91= 20 20 20 41 44 44 ...   2667  DISP_ADD_L  DC.B    '   ADD.L',0
00002F9A= 20 20 20 41 44 44 ...   2668  DISP_ADDA_W DC.B    '   ADDA.W',0
00002FA4= 20 20 20 41 44 44 ...   2669  DISP_ADDA_L DC.B    '   ADDA.L',0
00002FAE= 20 20 20 4C 53 52 ...   2670  DISP_LSR_B  DC.B    '   LSR.B',0
00002FB7= 20 20 20 4C 53 4C ...   2671  DISP_LSL_B  DC.B    '   LSL.B',0
00002FC0= 20 20 20 4C 53 52 ...   2672  DISP_LSR_W  DC.B    '   LSR.W',0
00002FC9= 20 20 20 4C 53 4C ...   2673  DISP_LSL_W  DC.B    '   LSL.W',0
00002FD2= 20 20 20 4C 53 52 ...   2674  DISP_LSR_L  DC.B    '   LSR.L',0
00002FDB= 20 20 20 4C 53 4C ...   2675  DISP_LSL_L  DC.B    '   LSL.L',0
00002FE4= 20 20 20 41 53 52 ...   2676  DISP_ASR_B  DC.B    '   ASR.B',0
00002FED= 20 20 20 41 53 4C ...   2677  DISP_ASL_B  DC.B    '   ASL.B',0
00002FF6= 20 20 20 41 53 52 ...   2678  DISP_ASR_W  DC.B    '   ASR.W',0
00002FFF= 20 20 20 41 53 4C ...   2679  DISP_ASL_W  DC.B    '   ASL.W',0
00003008= 20 20 20 41 53 52 ...   2680  DISP_ASR_L  DC.B    '   ASR.L',0
00003011= 20 20 20 41 53 4C ...   2681  DISP_ASL_L  DC.B    '   ASL.L',0
0000301A= 20 20 20 52 4F 52 ...   2682  DISP_ROR_B  DC.B    '   ROR.B',0
00003023= 20 20 20 52 4F 4C ...   2683  DISP_ROL_B  DC.B    '   ROL.B',0
0000302C= 20 20 20 52 4F 52 ...   2684  DISP_ROR_W  DC.B    '   ROR.W',0
00003035= 20 20 20 52 4F 4C ...   2685  DISP_ROL_W  DC.B    '   ROL.W',0
0000303E= 20 20 20 52 4F 52 ...   2686  DISP_ROR_L  DC.B    '   ROR.L',0
00003047= 20 20 20 52 4F 4C ...   2687  DISP_ROL_L  DC.B    '   ROL.L',0
00003050= 20 20 20 42 52 41 00    2688  DISP_BRA    DC.B    '   BRA',0
00003057= 20 20 20 42 4C 54 00    2689  DISP_BLT    DC.B    '   BLT',0
0000305E= 20 20 20 42 45 51 00    2690  DISP_BEQ    DC.B    '   BEQ',0
00003065= 20 20 20 42 4E 45 00    2691  DISP_BNE    DC.B    '   BNE',0
0000306C= 20 20 20 42 48 49 00    2692  DISP_BHI    DC.B    '   BHI',0
00003073= 20 20 20 4D 4F 56 ...   2693  DISP_MOVEA_W    DC.B    '   MOVEA.W',0
0000307E= 20 20 20 4D 4F 56 ...   2694  DISP_MOVEA_L    DC.B    '   MOVEA.L',0
00003089                          2695  
00003089= 20 20 20 24 00          2696  DISP_HEX     DC.B    '   $',0
0000308E= 20 20 20 44 00          2697  DISP_D  DC.B    '   D',0
00003093= 20 20 20 41 00          2698  DISP_A  DC.B    '   A',0
00003098= 20 20 20 28 00          2699  DISP_OP  DC.B    '   (',0
0000309D= 29 00                   2700  DISP_CP  DC.B   ')',0
0000309F= 20 20 20 28 41 00       2701  DISP_AOP  DC.B    '   (A',0
000030A5                          2702  
000030A5= 20 20 20 2D 28 41 00    2703  DISP_PRE    DC.B    '   -(A',0
000030AC= 29 2B 00                2704  DISP_POST   DC.B    ')+',0
000030AF= 20 20 20 23 00          2705  DISP_LB DC.B    '   #',0
000030B4= 30 00                   2706  DISP_0  DC.B    '0',0
000030B6= 31 00                   2707  DISP_1  DC.B    '1',0
000030B8= 32 00                   2708  DISP_2  DC.B    '2',0
000030BA= 33 00                   2709  DISP_3  DC.B    '3',0
000030BC= 34 00                   2710  DISP_4  DC.B    '4',0
000030BE= 35 00                   2711  DISP_5  DC.B    '5',0
000030C0= 36 00                   2712  DISP_6  DC.B    '6',0
000030C2= 37 00                   2713  DISP_7  DC.B    '7',0
000030C4                          2714  
000030C4                          2715  *STACK INTERFACE VARIABLES*
000030C4                          2716  COUNTER         DS.W    1
000030C6                          2717  QUEUE_COUNTER   DS.W    1
000030C8                          2718  
000030C8                          2719  *EA DECODING INTERFACE VARIABLES* 
000030C8                          2720  DEST_REGISTER_FORMAT    DS.B    1           *all address modes acceptable standard
000030C9                          2721  SRC_REGISTER_FORMAT  DS.B    1           *all address modes acceptable standard
000030CA                          2722  TEMP_REGISTER_FORMAT    DS.B    1           *place holder for masking other register formats
000030CB                          2723  
000030CB                          2724  *FORMAT OF WHERE TO GET THE EA BY THE ENDING BIT AND STARTING BIT
000030CB                          2725  * WORD + WORD = LONG
000030CB                          2726  * (STARTING BIT) + (ENDING BIT) = 2 HEX CHAR
000030CB                          2727  * A              + F            = AF         <= EXAMPLE
000030CB                          2728  *(10TH BIT)      + (15TH BIT)   = CHECK BITS 15 THROUGH 10
000030CB                          2729  GET_DST_START_END    DS.B    1
000030CC                          2730  GET_SRC_START_END    DS.B    1
000030CD                          2731  
000030CD                          2732  *STORES THE START + END BITS HERE (FROM ABOVE)
000030CE                          2733  VAR_BYTE_START      DS.L    1
000030D2                          2734  VAR_BYTE_END        DS.L    1
000030D6                          2735  VAR_TEMP_CLEANCOPY  DS.L    1
000030DA                          2736  
000030DA                          2737  VAR_LONG_ADDRESS_MODE_CHECK        DS.L    1       *holds the bits 0-2 in long form
000030DE                          2738  
000030DE                          2739  *MORE FOR STACK USAGE*
000030DE= 2C 00                   2740  DISP_COMMA  DC.B    ',',0
000030E0= 20 20 20 00             2741  DISP_INDENT  DC.B    '   ',0
000030E4                          2742  
000030E4                          2743  
000030E4                          2744  
000030E4                          2745  *---------------------------------------------------------------------------*
000030E4                          2746  * Ends program
000030E4                          2747  *---------------------------------------------------------------------------*
000030E4                          2748              END    START                    * last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASC2HXLP            1176
ASCII2HEX           1170
ASC_ERR             11D2
ASC_LOW             11B4
ASC_NUM             11C4
ASC_SFT             11CC
ASC_UPP             11BC
CHECK0              2456
CHECK1              24E0
CHECK2              256A
CHECK3              2604
CHECK4              26A6
CHECK7              2748
CHECK_IMMEDIATE     275A
CHECK_LONG          275A
CHECK_WORD          275A
CLEAR_RETURN        281E
CLEAR_STACK         280E
COUNTER             30C4
CR                  D
DECREMENT           2806
DEST_MODE           200E
DEST_REGISTER       22DE
DEST_REGISTER_FORMAT  30C8
DISPLAY_30_LINES    12DA
DISP_0              30B4
DISP_1              30B6
DISP_2              30B8
DISP_3              30BA
DISP_4              30BC
DISP_5              30BE
DISP_6              30C0
DISP_7              30C2
DISP_A              3093
DISP_ADDA_L         2FA4
DISP_ADDA_W         2F9A
DISP_ADDQ_B         2E9D
DISP_ADDQ_L         2EB1
DISP_ADDQ_W         2EA7
DISP_ADD_B          2F7F
DISP_ADD_L          2F91
DISP_ADD_W          2F88
DISP_AND_B          2F64
DISP_AND_L          2F76
DISP_AND_W          2F6D
DISP_AOP            309F
DISP_ASL_B          2FED
DISP_ASL_L          3011
DISP_ASL_W          2FFF
DISP_ASR_B          2FE4
DISP_ASR_L          3008
DISP_ASR_W          2FF6
DISP_BEQ            305E
DISP_BHI            306C
DISP_BLT            3057
DISP_BNE            3065
DISP_BRA            3050
DISP_BTST           2DF0
DISP_CMPA_L         2F50
DISP_CMPA_W         2F46
DISP_CMPI_B         2DF8
DISP_CMPI_L         2E0C
DISP_CMPI_W         2E02
DISP_CMP_B          2F2B
DISP_CMP_L          2F3D
DISP_CMP_W          2F34
DISP_COMMA          30DE
DISP_CP             309D
DISP_D              308E
DISP_DATA           2E16
DISP_DIVS           2EBB
DISP_EORI_B         2DD2
DISP_EORI_L         2DE6
DISP_EORI_W         2DDC
DISP_EOR_B          2F10
DISP_EOR_L          2F22
DISP_EOR_W          2F19
DISP_HEX            3089
DISP_INDENT         30E0
DISP_JSR            2E43
DISP_LB             30AF
DISP_LEA            2E80
DISP_LSL_B          2FB7
DISP_LSL_L          2FDB
DISP_LSL_W          2FC9
DISP_LSR_B          2FAE
DISP_LSR_L          2FD2
DISP_LSR_W          2FC0
DISP_MOVEA_L        307E
DISP_MOVEA_W        3073
DISP_MOVEM_L        2E92
DISP_MOVEM_W        2E87
DISP_MOVE_B         2E1E
DISP_MOVE_L         2E32
DISP_MOVE_W         2E28
DISP_MULS_W         2F5A
DISP_NEG_B          2E4A
DISP_NEG_L          2E5C
DISP_NEG_W          2E53
DISP_NEXT           2B63
DISP_NOT_B          2E65
DISP_NOT_L          2E77
DISP_NOT_W          2E6E
DISP_OP             3098
DISP_ORI_B          2DB7
DISP_ORI_L          2DC9
DISP_ORI_W          2DC0
DISP_POST           30AC
DISP_PRE            30A5
DISP_ROL_B          3023
DISP_ROL_L          3047
DISP_ROL_W          3035
DISP_ROR_B          301A
DISP_ROR_L          303E
DISP_ROR_W          302C
DISP_RTS            2E3C
DISP_SUBA_L         2F06
DISP_SUBA_W         2EFC
DISP_SUBI_B         2EDE
DISP_SUBI_L         2EF2
DISP_SUBI_W         2EE8
DISP_SUB_B          2EC3
DISP_SUB_L          2ED5
DISP_SUB_W          2ECC
D_MODE000           20B0
D_MODE010           20F8
D_MODE011           2158
D_MODE100           2178
D_MODE111           21CA
EA_ARITH            1FA8
EA_DATA             14B8
EA_GEN              1FF4
EA_MOVEA            1FCE
EA_NOSRC            1F94
ENDLINE_M           2D14
END_ADDR            10BC
ERRMSG_1            2BFB
ERRMSG_3            2C1A
ERRMSG_5            2C3F
ERROR_1             1120
ERROR_2             1130
ERROR_3             1140
ERROR_4             1150
ERROR_5             1160
E_ADDR_HX           2D10
FINMSG              2BD0
GET_DST_START_END   30CB
GET_EA_EA_DEST      2764
GET_EA_EA_SRC       2444
GET_SRC_FAILED      275E
GET_SRC_START_END   30CC
GET_SRC_SUCCESS     2762
HEX2ASCII           11D8
HEX_CHAR            1206
HEX_CONT            120A
HEX_LOOP            11EC
IMMD_B              227E
IMMD_L              22BE
IMMD_W              229E
IMMEDIATE           224E
INCREMENT           27FE
INTRO               1028
IS_ODD              121A
IS_ODD_ERR          1230
JMPTABLE            1306
LF                  A
LONGMODE            2222
LOOP_SHIFTING       24C0
LOOP_SHIFTING1      254A
LOOP_SHIFTING2      25DC
LOOP_SHIFTING3      2676
LOOP_SHIFTING4      2720
MAIN                1236
MASKING_NEXT        24CE
MASKING_NEXT1       2558
MASKING_NEXT2       25EA
MASKING_NEXT3       2684
MASKING_NEXT4       272E
MODE000             209C
MODE001             20C4
MODE010             20D8
MODE011             2118
MODE100             2138
MODE111             2198
NEXTLINES           12E8
OP0000              1366
OP0001              158C
OP0010              15F6
OP0011              1658
OP0100              16B8
OP0101              1852
OP0110              18CE
OP0111              195C
OP1000              1960
OP1001              199C
OP1010              1A74
OP1011              1A78
OP1100              1B74
OP1101              1C10
OP1110              1CE2
OP1111              1F90
OP_ADDA_L           1CCA
OP_ADDA_W           1CB2
OP_ADDQ             1872
OP_ADDQ_B           1898
OP_ADDQ_L           18BC
OP_ADDQ_W           18AA
OP_ADD_B            1C6A
OP_ADD_L            1C9A
OP_ADD_W            1C82
OP_AND_B            1BDA
OP_AND_L            1BFE
OP_AND_W            1BEC
OP_ASL              1E82
OP_ASL_B            1EA6
OP_ASL_L            1EB8
OP_ASL_W            1ECA
OP_ASR              1E28
OP_ASR_B            1E4C
OP_ASR_L            1E5E
OP_ASR_W            1E70
OP_ASX              1D44
OP_BEQ              1932
OP_BHI              1916
OP_BLT              194E
OP_BNE              1924
OP_BRA              1940
OP_BTST             13DA
OP_CMPA_L           1AE4
OP_CMPA_W           1AD2
OP_CMPI             14E0
OP_CMPI_B           1500
OP_CMPI_L           1524
OP_CMPI_W           1512
OP_CMP_B            1AF6
OP_CMP_L            1B26
OP_CMP_W            1B0E
OP_DATA             1494
OP_DIVS             1988
OP_EORI             13E8
OP_EORI_B           1408
OP_EORI_L           142C
OP_EORI_W           141A
OP_EOR_B            1B3E
OP_EOR_L            1B62
OP_EOR_W            1B50
OP_JSR              1830
OP_LEA              175E
OP_LSL              1DCE
OP_LSL_B            1DF2
OP_LSL_L            1E04
OP_LSL_W            1E16
OP_LSR              1D74
OP_LSR_B            1D98
OP_LSR_L            1DAA
OP_LSR_W            1DBC
OP_LSX              1D2C
OP_MOVEA_L          163A
OP_MOVEA_W          169A
OP_MOVEM_L          174C
OP_MOVEM_W          173A
OP_MOVE_B           1592
OP_MOVE_L           161C
OP_MOVE_W           167C
OP_MULS             1BC6
OP_NEG              1772
OP_NEG_B            1792
OP_NEG_L            17C2
OP_NEG_W            17AA
OP_NOT              17DA
OP_NOT_B            17FA
OP_NOT_L            181E
OP_NOT_W            180C
OP_ORI              1536
OP_ORI_B            1556
OP_ORI_L            157A
OP_ORI_W            1568
OP_ROL              1F36
OP_ROL_B            1F5A
OP_ROL_L            1F6C
OP_ROL_W            1F7E
OP_ROR              1EDC
OP_ROR_B            1F00
OP_ROR_L            1F12
OP_ROR_W            1F24
OP_ROX              1D5C
OP_RTS              1844
OP_SUBA_L           1A62
OP_SUBA_W           1A50
OP_SUBI             143E
OP_SUBI_B           145E
OP_SUBI_L           1482
OP_SUBI_W           1470
OP_SUB_B            1A08
OP_SUB_L            1A38
OP_SUB_W            1A20
OUTPUT_PROCESSED_DATA  12BA
POP_FRONT           27B8
POP_FRONT_RETURN    27F2
POP_RETURN          27B6
POP_SHIFT_LOOP      27D4
POP_STACK           27AA
PRINT_QUEUE         277E
PRINT_QUEUE_HELPER  278A
PRINT_QUEUE_RETURN  27A0
PRINT_STACK         2764
PRINT_STACK_HELPER  2770
PRINT_STACK_RETURN  277C
PROGLP              100A
PROMPT_END          2B36
PROMPT_START        2B07
PUSH_STACK          27A2
QUEUE_COUNTER       30C6
REG_0               2392
REG_1               23A0
REG_2               23AE
REG_3               23BC
REG_4               23CA
REG_5               23D8
REG_6               23E6
REG_7               23F4
REPEAT              2402
REPEATMSG           2B8D
RETURN              11D6
SRC_MODE            2052
SRC_REGISTER        233A
SRC_REGISTER_FORMAT  30C9
STACK               7000
START               1004
START_ADDR          106A
S_ADDR_HX           2D0C
TEMP_REGISTER_FORMAT  30CA
TERMINATE           2820
TESTING             1036
TMPINPUT            2D17
TMPOUTPUT           2D67
VAR_BYTE_END        30D2
VAR_BYTE_START      30CE
VAR_LONG_ADDRESS_MODE_CHECK  30DA
VAR_TEMP_CLEANCOPY  30D6
VR_E_ADDR           2CBC
VR_S_ADDR           2C6C
WELCOME             2832
WORDMODE            21F6

00001004 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/7/2014 2:20:55 AM

00000000                             1  *---------------------------------------------------------------------------*
00000000                             2  * Title      : 68K Disassembler
00000000                             3  * Written by : Team Circle
00000000                             4  * Date       : 12/05/14
00000000                             5  * Description: Scans a section of memory and converts its
00000000                             6  *              contents to a listing of valid assembly 
00000000                             7  *              language instructions
00000000                             8  *---------------------------------------------------------------------------*
00000000                             9  
00000000                            10  *---------------------------------------------------------------------------*
00000000                            11  * System Equates                                                 
00000000                            12  *---------------------------------------------------------------------------*
00000000  =0000000D                 13  CR          EQU     $0D                     * ASCII for Carriage Return
00000000  =0000000A                 14  LF          EQU     $0A                     * ASCII for Line Feed 
00000000  =00007000                 15  STACK       EQU     $7000                   * Initial Stack Pointer                         
00000000                            16              
00000000                            17  *---------------------------------------------------------------------------*
00000000                            18  * Reserved Registers
00000000                            19  *---------------------------------------------------------------------------*  
00000000                            20  * D0 - I/O
00000000                            21  * D1 - Temporary storage of processing data
00000000                            22  * D3 - [PUSH_STACK]
00000000                            23  * D4 - Opcode size (0 - byte; 1- word; 2-long)
00000000                            24  * D5 - Processing data
00000000                            25  * D6 - Loop counter to print 30 lines
00000000                            26  * D7 - Error flag
00000000                            27  * A2 - [STACK POINTER]
00000000                            28  * A5 - Processing address in hex
00000000                            29  
00000000                            30  *---------------------------------------------------------------------------*
00000000                            31  * Start and loop program
00000000                            32  *---------------------------------------------------------------------------*  
00001000                            33              ORG     $1000
00001000  4FF8 7000                 34              LEA     STACK,SP
00001004                            35  START:            
00001004  4EB9 00001028             36              JSR     INTRO                 
0000100A  4EB9 00001048             37  PROGLP      JSR     START_ADDR
00001010  4EB9 0000109A             38              JSR     END_ADDR
00001016  43F9 00003004             39              LEA     ENDLINE_M,A1           * Add a new line
0000101C  103C 000E                 40              MOVE.B  #14, D0                  * Display A1
00001020  4E4F                      41              TRAP    #15
00001022                            42              
00001022  4EF9 00001214             43              JMP     MAIN
00001028                            44              
00001028                            45  *---------------------------------------------------------------------------*
00001028                            46  * INTRO: Display the introduction of the program
00001028                            47  *---------------------------------------------------------------------------*
00001028  43F9 00002B22             48  INTRO       LEA     WELCOME,A1              * Load PROMPT_START
0000102E  103C 000E                 49              MOVE.B  #14,D0                  * Display A1
00001032  4E4F                      50              TRAP    #15
00001034  4E75                      51              RTS
00001036                            52  TESTING
00001036  1001                      53              MOVE.B  D1,D0 
00001038  1210                      54              MOVE.B  (A0),D1
0000103A  1218                      55              MOVE.B  (A0)+,D1
0000103C  1220                      56              MOVE.B  -(A0),D1
0000103E  1238 7000                 57              MOVE.B  $7000,D1
00001042  1238 7000                 58              MOVE.B  $00007000,D1
00001046                            59              
00001046  4E75                      60              RTS
00001048                            61  *---------------------------------------------------------------------------*
00001048                            62  * START_ADDR: Compute the starting address
00001048                            63  *---------------------------------------------------------------------------*
00001048                            64  START_ADDR
00001048                            65              * Output
00001048  43F9 00002DF7             66              LEA     PROMPT_START,A1         * Load PROMPT_START 
0000104E  103C 000E                 67              MOVE.B  #14,D0                  * Display PROMPT_START
00001052  4E4F                      68              TRAP    #15
00001054                            69      
00001054                            70              * Input
00001054  43F9 00002F5C             71              LEA     VR_S_ADDR,A1            * Load VR_S_ADDR
0000105A  103C 0002                 72              MOVE.B  #2,D0                   * Ask user for input
0000105E  4E4F                      73              TRAP    #15
00001060                            74              
00001060                            75              * Error Checking (length)
00001060  0C01 0000                 76              CMPI.B  #0, D1                  * Check if input length <= 0
00001064  6F00 0098                 77              BLE     ERROR_1
00001068  0C01 0008                 78              CMPI.B  #8, D1                  * Check if input length > 8
0000106C  6E00 0090                 79              BGT     ERROR_1
00001070                            80              
00001070                            81              * Conversion & Storage
00001070  4EB9 0000114E             82              JSR     ASCII2HEX               * Jump to ASCII2HEX
00001076  0C07 0001                 83              CMPI.B  #1, D7                  * Check for error
0000107A  6700 0082                 84              BEQ     ERROR_1                 
0000107E  23C1 00002FFC             85              MOVE.L  D1, S_ADDR_HX           * Move the result to S_ADDR_HX 
00001084                            86              
00001084                            87              * Error Checking (Odd)
00001084  43F9 00002FFC             88              LEA     S_ADDR_HX, A1           * Load 'S_ADDR_HX' for odd error
0000108A  4EB9 000011F8             89              JSR     IS_ODD                  * Check if the input address is odd
00001090  0C07 0001                 90              CMPI.B  #1, D7                  * Check for error
00001094  6700 0088                 91              BEQ     ERROR_3
00001098                            92              
00001098                            93              * Return
00001098  4E75                      94              RTS     
0000109A                            95  *---------------------------------------------------------------------------*
0000109A                            96  * END_ADDR: Compute the ending address
0000109A                            97  *---------------------------------------------------------------------------*
0000109A                            98  END_ADDR
0000109A                            99              * Output
0000109A  43F9 00002E26            100              LEA     PROMPT_END,A1           * Load PROMPT_END
000010A0  103C 000E                101              MOVE.B  #14,D0                  * Display PROMPT_END
000010A4  4E4F                     102              TRAP    #15
000010A6                           103  
000010A6                           104              * Input
000010A6  43F9 00002FAC            105              LEA     VR_E_ADDR,A1            * Load VR_E_ADDR
000010AC  103C 0002                106              MOVE.B  #2,D0                   * Ask user for input
000010B0  4E4F                     107              TRAP    #15
000010B2                           108              
000010B2                           109              * Error Checking (length)
000010B2  0C01 0000                110              CMPI.B  #0, D1                  * Check if input length <= 0
000010B6  6F00 0056                111              BLE     ERROR_2
000010BA  0C01 0008                112              CMPI.B  #8, D1                  * Check if input length > 8
000010BE  6E00 004E                113              BGT     ERROR_2
000010C2                           114              
000010C2                           115              * Conversion & Storage
000010C2  4EB9 0000114E            116              JSR     ASCII2HEX               * Jump to ASCII2HEX
000010C8  0C07 0001                117              CMPI.B  #1, D7                  * Check for error
000010CC  6700 0040                118              BEQ     ERROR_2
000010D0  23C1 00003000            119              MOVE.L  D1, E_ADDR_HX           * Move the result to E_ADDR_HX
000010D6                           120              
000010D6                           121              * Error Checking (start > end case)
000010D6  2439 00002FFC            122              MOVE.L  S_ADDR_HX, D2           * Move the starting address to D2
000010DC  B282                     123              CMP.L   D2, D1                  * Compare starting and ending address
000010DE  6300 005E                124              BLS     ERROR_5                 * Go to ERROR_5 if ending < starting
000010E2                           125              
000010E2                           126              * Error Checking (Odd case)
000010E2  43F9 00003000            127              LEA     E_ADDR_HX, A1           * Move the ending address
000010E8  4EB9 000011F8            128              JSR     IS_ODD                  * Go to IS_ODD for odd address checking
000010EE  0C07 0001                129              CMPI.B  #1, D7                  * Check for an error flag
000010F2  6700 003A                130              BEQ     ERROR_4
000010F6                           131              
000010F6                           132              * Inputs are valid
000010F6  2A79 00002FFC            133              MOVE.L  S_ADDR_HX, A5           * Store the valid input in A5
000010FC                           134              
000010FC  4E75                     135              RTS
000010FE                           136              
000010FE                           137  *---------------------------------------------------------------------------*
000010FE                           138  * ERROR_1: Address error (Invalid starting address)
000010FE                           139  *---------------------------------------------------------------------------*
000010FE                           140  ERROR_1
000010FE  43F9 00002EEB            141              LEA     ERRMSG_1, A1            * Load ERRMSG_1
00001104  103C 000E                142              MOVE.B  #14, D0                 * Display ERRMSG_1
00001108  4E4F                     143              TRAP    #15
0000110A  4EF8 1048                144              JMP     START_ADDR              * Jump to START_ADDR
0000110E                           145      
0000110E                           146  *---------------------------------------------------------------------------*
0000110E                           147  * ERROR_2: Address error (Invalid ending address)
0000110E                           148  *---------------------------------------------------------------------------*
0000110E                           149  ERROR_2
0000110E  43F9 00002EEB            150              LEA     ERRMSG_1, A1            * Load ERRMSG_1
00001114  103C 000E                151              MOVE.B  #14, D0                 * Display ERRMSG_1
00001118  4E4F                     152              TRAP    #15
0000111A  4EF8 109A                153              JMP     END_ADDR                * Jump to END_ADDR
0000111E                           154  
0000111E                           155  *---------------------------------------------------------------------------*
0000111E                           156  * ERROR_3: Address error (Odd starting address)
0000111E                           157  *---------------------------------------------------------------------------*
0000111E                           158  ERROR_3
0000111E  43F9 00002F0A            159              LEA     ERRMSG_3, A1
00001124  103C 000E                160              MOVE.B  #14, D0
00001128  4E4F                     161              TRAP    #15
0000112A  4EF8 1048                162              JMP     START_ADDR
0000112E                           163     
0000112E                           164  *---------------------------------------------------------------------------*
0000112E                           165  * ERROR_4: Address error (Odd ending address)
0000112E                           166  *---------------------------------------------------------------------------*         
0000112E                           167  ERROR_4
0000112E  43F9 00002F0A            168              LEA     ERRMSG_3, A1
00001134  103C 000E                169              MOVE.B  #14, D0
00001138  4E4F                     170              TRAP    #15
0000113A  4EF8 109A                171              JMP     END_ADDR
0000113E                           172            
0000113E                           173  *---------------------------------------------------------------------------*
0000113E                           174  * ERROR_3: Address error (Ending address is less than starting address)
0000113E                           175  *---------------------------------------------------------------------------*
0000113E                           176  ERROR_5
0000113E  43F9 00002F2F            177              LEA     ERRMSG_5, A1
00001144  103C 000E                178              MOVE.B  #14, D0
00001148  4E4F                     179              TRAP    #15
0000114A  4EF8 109A                180              JMP     END_ADDR
0000114E                           181    
0000114E                           182  *---------------------------------------------------------------------------*
0000114E                           183  * ASCII2HEX: Convert ASCii to Hexadecimal
0000114E                           184  * Reserved registers: A1 = Source, D1 = Destination, D2 = Byte, D7 = Error
0000114E                           185  *---------------------------------------------------------------------------*
0000114E  4281                     186  ASCII2HEX   CLR.L   D1                      * Clear the destination 
00001150  4287                     187              CLR.L   D7                      * Set the error flag to 0
00001152  4282                     188              CLR.L   D2                      * Clear D2 for temp storage
00001154                           189              
00001154  1419                     190  ASC2HXLP    MOVE.B  (A1)+, D2               * Read a byte to D2
00001156  0C02 0000                191              CMPI.B  #0, D2                  * Check for NULL (indicates the end of source)
0000115A  6700 0058                192              BEQ     RETURN                  * If it's NULL, go to return
0000115E  0C02 0066                193              CMPI.B  #102, D2                * Decimal ASCII value of f is 102
00001162  6E00 004C                194              BGT     ASC_ERR                 * ASCII > f (invalid input) 
00001166  0C02 0061                195              CMPI.B  #97, D2                 * Decimal ASCII value of a is 97
0000116A  6C00 0026                196              BGE     ASC_LOW                 * ASCII >= a (valid input)
0000116E  0C02 0046                197              CMPI.B  #70, D2                 * Decimal ASCII value of F is 70
00001172  6E00 003C                198              BGT     ASC_ERR                 * ASCII > F (invalid input)
00001176  0C02 0041                199              CMPI.B  #65, D2                 * Decimal ASCII value of A is 65
0000117A  6C00 001E                200              BGE     ASC_UPP                 * ASCII >= A (valid input)
0000117E  0C02 0039                201              CMPI.B  #57, D2                 * Decimal value of 9 is 57
00001182  6E00 002C                202              BGT     ASC_ERR                 * ASCII > 9 (invalid input)
00001186  0C02 0030                203              CMPI.B  #48, D2                 * Decimal ASCII value of 0 is 48
0000118A  6C00 0016                204              BGE     ASC_NUM                 * ASCII >= 0 (valid input)
0000118E  6000 0020                205              BRA     ASC_ERR                 * Invalid input
00001192                           206  
00001192  0442 0057                207  ASC_LOW     SUBI    #87, D2                 * Convert the ASCII input to Hex
00001196  6000 0012                208              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
0000119A                           209              
0000119A  0442 0037                210  ASC_UPP     SUBI    #55, D2                 * Convert the ASCII input to Hex
0000119E  6000 000A                211              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011A2                           212              
000011A2  0442 0030                213  ASC_NUM     SUBI    #48, D2                 * Convert the ASCII input to Hex
000011A6  6000 0002                214              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011AA                           215              
000011AA  E981                     216  ASC_SFT     ASL.L   #4, D1                  * Shift the dest to left by 4 bits
000011AC  D202                     217              ADD.B   D2, D1                  * Add the converted input to D1
000011AE  60A4                     218              BRA     ASC2HXLP                * Loop
000011B0                           219  
000011B0  1E3C 0001                220  ASC_ERR     MOVE.B  #1, D7                  * Set the error flag to 1            
000011B4  4E75                     221  RETURN      RTS     
000011B6                           222  
000011B6                           223  *---------------------------------------------------------------------------*
000011B6                           224  * HEX2ASCII: Convert Hexadecimal to ASCii 
000011B6                           225  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
000011B6                           226  *---------------------------------------------------------------------------*
000011B6  0C02 0008                227  HEX2ASCII   CMPI.B  #8, D2                  * Check to see if the size is long
000011BA  6700 000E                228              BEQ     HEX_LOOP
000011BE  4841                     229              SWAP    D1
000011C0  0C02 0002                230              CMPI.B  #2,D2
000011C4  6600 0004                231              BNE     HEX_LOOP
000011C8  E189                     232              LSL.L   #8,D1
000011CA                           233             
000011CA  E999                     234  HEX_LOOP    ROL.L   #4, D1                  * Roll D1 to left
000011CC  2601                     235              MOVE.L  D1, D3                  * Move D1 to D3
000011CE  0283 0000000F            236              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
000011D4  0C03 0009                237              CMPI.B  #9, D3                  * Compare te digit
000011D8  6E00 000A                238              BGT     HEX_CHAR              
000011DC  0603 0030                239              ADDI.B  #48,D3                  * Add 48 for numerical output
000011E0  6000 0006                240              BRA     HEX_CONT
000011E4                           241              
000011E4  0603 0037                242  HEX_CHAR    ADDI.B  #55,D3                  * Add 55 for character output
000011E8                           243  
000011E8  12C3                     244  HEX_CONT    MOVE.B  D3, (A1)+               * Place into A1
000011EA  5342                     245              SUBI    #1, D2                  * Decrement the size
000011EC  0C02 0000                246              CMPI.B  #0, D2                  * Check if D2 is 0
000011F0  66D8                     247              BNE     HEX_LOOP                * Loop
000011F2  12BC 0000                248              MOVE.B  #$0,(A1)                * Null terminator
000011F6  4E75                     249              RTS
000011F8                           250  
000011F8                           251  *---------------------------------------------------------------------------*
000011F8                           252  * IS_ODD: Check whether the source address is odd
000011F8                           253  * Reserved registers: A1 = Source, D1 = Result, D7 = error flag
000011F8                           254  *---------------------------------------------------------------------------*
000011F8  4281                     255  IS_ODD      CLR.L   D1                      * Clear the result
000011FA  4287                     256              CLR.L   D7                      * Set the error flag to 0
000011FC  2211                     257              MOVE.L  (A1),D1                * Temp store the checking address to D1
000011FE  82FC 0002                258              DIVU    #2, D1                  * Divide the result by 2
00001202  4841                     259              SWAP    D1                      * Swap remainder with quotient
00001204  0C01 0001                260              CMPI.B  #1, D1                  * Check for error
00001208  6700 0004                261              BEQ     IS_ODD_ERR
0000120C  4E75                     262              RTS
0000120E                           263              
0000120E  1E3C 0001                264  IS_ODD_ERR  MOVE.B  #1, D7
00001212  4E75                     265              RTS
00001214                           266  
00001214                           267  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*
00001214                           268  * MAIN                    
00001214                           269  * A2: STACK POINTER                                                      MAIN                                                                        MAIN
00001214                           270  * A5: Processing address
00001214                           271  *
00001214                           272  * D3: USED FOR PUSHING INTO STACK
00001214                           273  *     To push into stack => MOVE.W #DATA,D3 
00001214                           274  *                           BSR    PUSH_STACK
00001214                           275  *     To print stack     => BSR    PRINT_STACK 
00001214                           276  *     To clear stack     => BSR    CLEAR_STACK
00001214                           277  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*  
00001214                           278  MAIN        
00001214                           279              *initialize stack pointer
00001214  33FC 0000 000033B4       280              MOVE.W  #0,COUNTER
0000121C  347C 7000                281              MOVEA.W #STACK,A2
00001220  163C 0020                282              MOVE.B  #' ',D3
00001224  6100 186C                283              BSR     PUSH_STACK
00001228  6100 1868                284              BSR     PUSH_STACK
0000122C  6100 1864                285              BSR     PUSH_STACK
00001230                           286              
00001230                           287              * clear registers for temp storage
00001230  4280                     288              CLR.L   D0                   
00001232  4281                     289              CLR.L   D1                   
00001234  227C 00000000            290              MOVEA.L #0, A1                
0000123A                           291              
0000123A  220D                     292              MOVE.L  A5,D1                   * check to see if the address is fully read
0000123C  23CD 00002FFC            293              MOVE.L  A5,S_ADDR_HX
00001242  B2B9 00003000            294              CMP.L   E_ADDR_HX,D1
00001248  6C00 119A                295              BGE     REPEAT                  * go to repeat for user action
0000124C                           296  
0000124C  43F9 00003057            297              LEA     TMPOUTPUT,A1            * allocate storage to hold output
00001252  143C 0008                298              MOVE.B  #8,D2                   * set the output size
00001256  4EB8 11B6                299              JSR     HEX2ASCII               
0000125A  43F9 00003057            300              LEA     TMPOUTPUT,A1
00001260  103C 000E                301              MOVE.B  #14,D0
00001264  4E4F                     302              TRAP    #15
00001266                           303              
00001266  4285                     304              CLR.L    D5                      * clear the processing data
00001268  3A1D                     305              MOVE.W  (A5)+,D5                 * copy the currently processing data in A5 over to D5
0000126A                           306                                               * advance the current instruction pointer to the next
0000126A                           307                                               * instruction in memory
0000126A                           308  *----------------------------------------*
0000126A                           309  * Registers          
0000126A                           310  * [D1] - COPY OF D5
0000126A                           311  * [D5] - DATA TO BE PROCESSED
0000126A                           312  * [D6] - COUNTER FOR LINES PROCESSED
0000126A                           313  *
0000126A                           314  * [D4]      - ERROR FLAG BEFORE PRINTING
0000126A                           315  * [STACK]   - PRINTS PROCESS DATA
0000126A                           316  * [COUNTER] - KEEPS TRACK OF STACK INCREMENT
0000126A                           317  *
0000126A                           318  * [A1] - USED FOR JUMPING/PRINTING
0000126A                           319  *
0000126A                           320  *----------------------------------------*
0000126A                           321  
0000126A                           322              
0000126A                           323              *Processing the first 4 most significant bits 
0000126A  2205                     324              MOVE.L  D5,D1                    * copy the current processing data to D1
0000126C  143C 000C                325              MOVE.B  #12,D2                   * shift to right by 12 bits
00001270  E469                     326              LSR.W   D2,D1                    * [D2] Temporarily used D2 for shifting bits
00001272  C2FC 0006                327              MULU    #6,D1                    * form offset
00001276  43F9 000012E4            328              LEA     JMPTABLE,A1              * index into table
0000127C  4EB1 1000                329              JSR     0(A1,D1)                 * jump indirect with index
00001280                           330              
00001280                           331              *SECURED EA*
00001280  B83C 0001                332              CMP.B   #1,D4                    * ERROR FLAG CHECK [ERROR WHEN D4 == 1]
00001284  6600 0012                333              BNE     OUTPUT_PROCESSED_DATA    * PRINTS PROCESSED OP-CODE & EA
00001288  6100 01E8                334              BSR     OP_DATA                  * PRINT ERROR MESSAGE "DATA"
0000128C  6100 1870                335              BSR     CLEAR_STACK              * CLEARS THE STACK 
00001290  183C 0000                336              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
00001294  6000 0022                337              BRA     DISPLAY_30_LINES         * GO TO LAST STEP
00001298                           338             
00001298                           339  OUTPUT_PROCESSED_DATA       
00001298  163C 000D                340              MOVE.B  #$D,D3                  *carriage return
0000129C  6100 17F4                341              BSR     PUSH_STACK
000012A0  163C 000A                342              MOVE.B  #$A,D3                  *new line feed
000012A4  6100 17EC                343              BSR     PUSH_STACK
000012A8  163C 0000                344              MOVE.B  #$0,D3                  *null
000012AC  6100 17E4                345              BSR     PUSH_STACK
000012B0                           346       
000012B0  6100 17BC                347              BSR     PRINT_QUEUE
000012B4  183C 0000                348              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
000012B8                           349  DISPLAY_30_LINES
000012B8                           350              * display 30 lines per page
000012B8  5206                     351              ADDI.B  #1,D6
000012BA  0C06 001E                352              CMPI.B  #30,D6
000012BE  6C00 0006                353              BGE     NEXTLINES
000012C2  6000 FF50                354              BRA     MAIN
000012C6                           355            
000012C6                           356  *---------------------------------------------------------------------------*
000012C6                           357  * NEXTLINES: receive input from user to print the next 30 lines
000012C6                           358  *---------------------------------------------------------------------------*  
000012C6  4206                     359  NEXTLINES   CLR.B   D6
000012C8  43F9 00002E53            360              LEA     DISP_NEXT,A1
000012CE  103C 000E                361              MOVE.B  #14,D0
000012D2  4E4F                     362              TRAP    #15
000012D4  43F9 00003007            363              LEA     TMPINPUT,A1
000012DA  103C 0002                364              MOVE.B  #2,D0
000012DE  4E4F                     365              TRAP    #15
000012E0  4EF8 1214                366              JMP     MAIN
000012E4                           367    
000012E4                           368  *---------------------------------------------------------------------------*
000012E4                           369  * JMPTABLE: OP code jump/branch table used to decode and display opcodes
000012E4                           370  *---------------------------------------------------------------------------*  
000012E4  4EF9 00001344            371  JMPTABLE    JMP     OP0000  * CMPI/ORI/BTST/EORI/SUBI/BTST
000012EA  4EF9 0000156A            372              JMP     OP0001  * MOVE.B                                        *WORKING ON - JOSEPH
000012F0  4EF9 000015D8            373              JMP     OP0010  * MOVE.L/MOVEA.L
000012F6  4EF9 0000163A            374              JMP     OP0011  * MOVE.W/MOVEA.W
000012FC  4EF9 0000169A            375              JMP     OP0100  * MOVEM/LEA/NEG/NOT/JSR/RTS
00001302  4EF9 00001834            376              JMP     OP0101  * ADDQ
00001308  4EF9 000018B0            377              JMP     OP0110  * BRA/Bcc (BEQ/BNE/BLT/BHI)
0000130E  4EF9 0000193E            378              JMP     OP0111  * MOVEQ (unassigned)
00001314  4EF9 00001942            379              JMP     OP1000  * DIVS
0000131A  4EF9 0000197E            380              JMP     OP1001  * SUB/SUBA
00001320  4EF9 00001A56            381              JMP     OP1010  * Unassigned 
00001326  4EF9 00001A5A            382              JMP     OP1011  * CMP/EOR/CMPA
0000132C  4EF9 00001B56            383              JMP     OP1100  * MULS/AND
00001332  4EF9 00001BF2            384              JMP     OP1101  * ADD/ADDA
00001338  4EF9 00001CC4            385              JMP     OP1110  * LSR/LSL/ASR/ASL/ROL/ROR
0000133E  4EF9 00001F72            386              JMP     OP1111  * Special/Reserved
00001344                           387              
00001344                           388  *---------------------------------------------------------------------------*
00001344                           389  * OP0000: decode CMPI/ORI/BTST/SUBI/EORI
00001344                           390  *---------------------------------------------------------------------------*           
00001344                           391  OP0000                                                                                  
00001344  4281                     392              CLR.L   D1          * to temporarily store the address to process
00001346  4280                     393              CLR.L   D0  
00001348  4284                     394              CLR.L   D4                 
0000134A  227C 00000000            395              MOVEA.L #0, A1                
00001350                           396              * Check for ORI (0000 0000 xx (size) xxx (EA mode) xxx(EA reg)
00001350                           397              * Check if bit 11,10,9,8 are 0000)
00001350  2205                     398              MOVE.L  D5,D1
00001352  0281 00000F00            399              ANDI.L  #$0F00,D1
00001358  0C81 00000000            400              CMPI.L  #$0000,D1   * if they are 0000, it is ORI
0000135E  6700 01B4                401              BEQ     OP_ORI
00001362                           402  
00001362                           403              * check for CMPI (0000 1100 xx (size) xxx (EA mode) xxx (EA reg)
00001362                           404              * check if bit 11,10,9,8 are 1100
00001362  4281                     405              CLR.L   D1
00001364  2205                     406              MOVE.L  D5,D1
00001366  0281 00000F00            407              ANDI.L  #$0F00,D1
0000136C  0C81 00000C00            408              CMPI.L  #$0C00,D1
00001372  6700 014A                409              BEQ     OP_CMPI
00001376                           410              
00001376                           411              * check for SUBI
00001376  4281                     412              CLR.L   D1
00001378  2205                     413              MOVE.L  D5,D1
0000137A  0281 00000F00            414              ANDI.L  #$0F00,D1
00001380  0C81 00000400            415              CMPI.L  #$0400,D1
00001386  6700 0094                416              BEQ     OP_SUBI
0000138A                           417              
0000138A                           418              * check for EORI
0000138A  4281                     419              CLR.L   D1
0000138C  2205                     420              MOVE.L  D5,D1
0000138E  0281 00000F00            421              ANDI.L  #$0F00,D1
00001394  0C81 00000A00            422              CMPI.L  #$0A00,D1
0000139A  6700 002A                423              BEQ     OP_EORI
0000139E                           424              
0000139E                           425              * check for BTST
0000139E  4281                     426              CLR.L   D1
000013A0  2205                     427              MOVE.L  D5,D1
000013A2  EA99                     428              ROR.L   #5,D1
000013A4  0281 00000008            429              ANDI.L  #$8,D1
000013AA  0C01 0008                430              CMPI.B  #8,D1
000013AE  6700 0008                431              BEQ     OP_BTST
000013B2                           432  
000013B2                           433              * OP0000 series other than ORI/CMPI/BTST/EORI
000013B2  4EF9 00001472            434              JMP     OP_DATA
000013B8                           435              
000013B8                           436  *---------------------------------------------------------------------------*
000013B8                           437  * OP_BTST: display BTST
000013B8                           438  *---------------------------------------------------------------------------* 
000013B8  43F9 000030E0            439  OP_BTST     LEA     DISP_BTST,A1
000013BE  103C 000E                440              MOVE.B  #14,D0
000013C2  4E4F                     441              TRAP    #15
000013C4  4E75                     442              RTS
000013C6                           443  
000013C6                           444  *---------------------------------------------------------------------------*
000013C6                           445  * OP_EORI: decode and display EORI
000013C6                           446  *---------------------------------------------------------------------------* 
000013C6                           447  OP_EORI
000013C6  4281                     448              CLR.L   D1
000013C8  4284                     449              CLR.L   D4
000013CA  2205                     450              MOVE.L  D5,D1
000013CC  EC99                     451              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000013CE  0C01 0000                452              CMPI.B  #0,D1
000013D2  6700 0012                453              BEQ     OP_EORI_B    * size is byte
000013D6  0C01 0001                454              CMPI.B  #1,D1
000013DA  6700 001C                455              BEQ     OP_EORI_W    * size is word
000013DE  0C01 0002                456              CMPI.B  #2,D1
000013E2  6700 0026                457              BEQ     OP_EORI_L    * size is long
000013E6                           458  
000013E6                           459  OP_EORI_B    * size is byte    
000013E6  183C 0000                460              MOVE.B  #0,D4
000013EA  43F9 000030C2            461              LEA     DISP_EORI_B,A1
000013F0  103C 000E                462              MOVE.B  #14,D0
000013F4  4E4F                     463              TRAP    #15
000013F6  4E75                     464              RTS
000013F8                           465              
000013F8                           466  OP_EORI_W    * size is word
000013F8  183C 0001                467              MOVE.B  #1,D4
000013FC  43F9 000030CC            468              LEA     DISP_EORI_W,A1
00001402  103C 000E                469              MOVE.B  #14,D0
00001406  4E4F                     470              TRAP    #15
00001408  4E75                     471              RTS
0000140A                           472              
0000140A                           473  OP_EORI_L    * size is long
0000140A  183C 0002                474              MOVE.B  #2,D4
0000140E  43F9 000030D6            475              LEA     DISP_EORI_L,A1
00001414  103C 000E                476              MOVE.B  #14,D0
00001418  4E4F                     477              TRAP    #15
0000141A  4E75                     478              RTS
0000141C                           479              
0000141C                           480  *---------------------------------------------------------------------------*
0000141C                           481  * OP_SUBI: decode SUBI.B/.W/.L
0000141C                           482  *---------------------------------------------------------------------------* 
0000141C                           483  OP_SUBI
0000141C  4281                     484              CLR.L   D1
0000141E  4284                     485              CLR.L   D4
00001420  2205                     486              MOVE.L  D5,D1
00001422  EC99                     487              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001424  0C01 0000                488              CMPI.B  #0,D1
00001428  6700 0012                489              BEQ     OP_SUBI_B    * size is byte
0000142C  0C01 0001                490              CMPI.B  #1,D1
00001430  6700 001C                491              BEQ     OP_SUBI_W    * size is word
00001434  0C01 0002                492              CMPI.B  #2,D1
00001438  6700 0026                493              BEQ     OP_SUBI_L    * size is long
0000143C                           494  
0000143C                           495  OP_SUBI_B    * size is byte    
0000143C  183C 0000                496              MOVE.B  #0,D4
00001440  43F9 000031CE            497              LEA     DISP_SUBI_B,A1
00001446  103C 000E                498              MOVE.B  #14,D0
0000144A  4E4F                     499              TRAP    #15
0000144C  4E75                     500              RTS
0000144E                           501              
0000144E                           502  OP_SUBI_W    * size is word
0000144E  183C 0001                503              MOVE.B  #1,D4
00001452  43F9 000031D8            504              LEA     DISP_SUBI_W,A1
00001458  103C 000E                505              MOVE.B  #14,D0
0000145C  4E4F                     506              TRAP    #15
0000145E  4E75                     507              RTS
00001460                           508              
00001460                           509  OP_SUBI_L    * size is long
00001460  183C 0002                510              MOVE.B  #2,D4
00001464  43F9 000031E2            511              LEA     DISP_SUBI_L,A1
0000146A  103C 000E                512              MOVE.B  #14,D0
0000146E  4E4F                     513              TRAP    #15
00001470  4E75                     514              RTS
00001472                           515              
00001472                           516  *---------------------------------------------------------------------------*
00001472                           517  * OP_DATA : unidentified opcode
00001472                           518  *---------------------------------------------------------------------------* 
00001472                           519  OP_DATA
00001472  4280                     520              CLR.L   D0                   
00001474  4281                     521              CLR.L   D1     
00001476  4284                     522              CLR.L   D4                    
00001478  227C 00000000            523              MOVEA.L #0, A1             
0000147E  4287                     524              CLR.L   D7
00001480  1E3C 0001                525              MOVE.B  #1,D7                   * error flag is true
00001484                           526              
00001484  43F9 00003106            527              LEA     DISP_DATA,A1
0000148A  103C 000E                528              MOVE.B  #14,D0
0000148E  4E4F                     529              TRAP    #15
00001490                           530              
00001490  4EF9 00001496            531              JMP     EA_DATA
00001496                           532             
00001496                           533             
00001496                           534  *---------------------------------------------------------------------------*
00001496                           535  * EA_DATA
00001496                           536  *---------------------------------------------------------------------------*       
00001496  43F9 00003057            537  EA_DATA     LEA     TMPOUTPUT,A1    * load the temporarily stored output address
0000149C  2205                     538              MOVE.L  D5,D1           * transfer the processing data to D1
0000149E  7404                     539              MOVE.L  #4,D2           * set to word size
000014A0  4EB8 11B6                540              JSR     HEX2ASCII       * prepare output in ascii
000014A4  43F9 00003379            541              LEA     DISP_HEX,A1     * display $ symbol
000014AA  103C 000E                542              MOVE.B  #14,D0      
000014AE  4E4F                     543              TRAP    #15
000014B0  43F9 00003057            544              LEA     TMPOUTPUT,A1    * display with a new line
000014B6  103C 000D                545              MOVE.B  #13,D0
000014BA  4E4F                     546              TRAP    #15
000014BC                           547  
000014BC  4E75                     548              RTS
000014BE                           549              
000014BE                           550  *---------------------------------------------------------------------------*
000014BE                           551  * OP_CMPI : decode CMPI and its size
000014BE                           552  *---------------------------------------------------------------------------*          
000014BE                           553  OP_CMPI
000014BE  4281                     554              CLR.L   D1
000014C0  4284                     555              CLR.L   D4
000014C2  2205                     556              MOVE.L  D5,D1
000014C4  EC99                     557              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000014C6  0C01 0000                558              CMPI.B  #0,D1
000014CA  6700 0012                559              BEQ     OP_CMPI_B    * size is byte
000014CE  0C01 0001                560              CMPI.B  #1,D1
000014D2  6700 001C                561              BEQ     OP_CMPI_W    * size is word
000014D6  0C01 0002                562              CMPI.B  #2,D1
000014DA  6700 0026                563              BEQ     OP_CMPI_L    * size is long
000014DE                           564  
000014DE                           565  OP_CMPI_B    * size is byte    
000014DE  183C 0000                566              MOVE.B  #0,D4
000014E2  43F9 000030E8            567              LEA     DISP_CMPI_B,A1
000014E8  103C 000E                568              MOVE.B  #14,D0
000014EC  4E4F                     569              TRAP    #15
000014EE  4E75                     570              RTS
000014F0                           571              
000014F0                           572  OP_CMPI_W    * size is word
000014F0  183C 0001                573              MOVE.B  #1,D4
000014F4  43F9 000030F2            574              LEA     DISP_CMPI_W,A1
000014FA  103C 000E                575              MOVE.B  #14,D0
000014FE  4E4F                     576              TRAP    #15
00001500  4E75                     577              RTS
00001502                           578              
00001502                           579  OP_CMPI_L    * size is long
00001502  183C 0002                580              MOVE.B  #2,D4
00001506  43F9 000030FC            581              LEA     DISP_CMPI_L,A1
0000150C  103C 000E                582              MOVE.B  #14,D0
00001510  4E4F                     583              TRAP    #15
00001512  4E75                     584              RTS
00001514                           585   
00001514                           586  *---------------------------------------------------------------------------*
00001514                           587  * OP_ORI : decode ORI and its size
00001514                           588  *---------------------------------------------------------------------------* 
00001514                           589  OP_ORI      
00001514  4281                     590              CLR.L   D1
00001516  4284                     591              CLR.L   D4
00001518  2205                     592              MOVE.L  D5,D1
0000151A  EC99                     593              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
0000151C  0C01 0000                594              CMPI.B  #0,D1
00001520  6700 0012                595              BEQ     OP_ORI_B    * size is byte
00001524  0C01 0001                596              CMPI.B  #1,D1
00001528  6700 001C                597              BEQ     OP_ORI_W    * size is word
0000152C  0C01 0002                598              CMPI.B  #2,D1
00001530  6700 0026                599              BEQ     OP_ORI_L    * size is long
00001534                           600  
00001534                           601  OP_ORI_B    * size is byte    
00001534  183C 0000                602              MOVE.B  #0,D4
00001538  43F9 000030A7            603              LEA     DISP_ORI_B,A1
0000153E  103C 000E                604              MOVE.B  #14,D0
00001542  4E4F                     605              TRAP    #15
00001544  4E75                     606              RTS
00001546                           607              
00001546                           608  OP_ORI_W    * size is word
00001546  183C 0001                609              MOVE.B  #1,D4
0000154A  43F9 000030B0            610              LEA     DISP_ORI_W,A1
00001550  103C 000E                611              MOVE.B  #14,D0
00001554  4E4F                     612              TRAP    #15
00001556  4E75                     613              RTS
00001558                           614              
00001558                           615  OP_ORI_L    * size is long
00001558  183C 0002                616              MOVE.B  #2,D4
0000155C  43F9 000030B9            617              LEA     DISP_ORI_L,A1
00001562  103C 000E                618              MOVE.B  #14,D0
00001566  4E4F                     619              TRAP    #15
00001568  4E75                     620              RTS
0000156A                           621          
0000156A                           622  *---------------------------------------------------------------------------*
0000156A                           623  * OP0001: MOVE.B
0000156A                           624  *---------------------------------------------------------------------------*
0000156A                           625  OP0001      
0000156A  4EF9 00001570            626              JMP     OP_MOVE_B   * display MOVE.B
00001570                           627              
00001570                           628  *---------------------------------------------------------------------------*
00001570                           629  * OP_MOVE_B: display MOVE_B and proceed to EA
00001570                           630  *---------------------------------------------------------------------------*
00001570                           631  OP_MOVE_B                                                                       
00001570                           632             
00001570                           633             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001570  13FC 0081 000033B8       634             MOVE.B   #$81,DEST_REGISTER_FORMAT
00001578  13FC 0000 000033B9       635             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001580                           636             
00001580                           637             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001580  13FC 00B9 000033BB       638             MOVE.B   #$B9,GET_DST_START_END
00001588  13FC 0020 000033BC       639             MOVE.B   #$20,GET_SRC_START_END
00001590                           640             
00001590                           641              *CLEAR D3
00001590  4283                     642              CLR.L   D3
00001592                           643              *LOAD STACK WITH THIS OPMODE
00001592  6100 14FE                644              BSR     PUSH_STACK
00001596  163C 004D                645              MOVE.B  #'M',D3
0000159A  6100 14F6                646              BSR     PUSH_STACK
0000159E  163C 004F                647              MOVE.B  #'O',D3
000015A2  6100 14EE                648              BSR     PUSH_STACK
000015A6  163C 0056                649              MOVE.B  #'V',D3
000015AA  6100 14E6                650              BSR     PUSH_STACK
000015AE  163C 0045                651              MOVE.B  #'E',D3
000015B2  6100 14DE                652              BSR     PUSH_STACK
000015B6  163C 002E                653              MOVE.B  #'.',D3
000015BA  6100 14D6                654              BSR     PUSH_STACK
000015BE  163C 0042                655              MOVE.B  #'B',D3
000015C2  6100 14CE                656              BSR     PUSH_STACK
000015C6                           657              
000015C6  6100 0E5E                658              BSR     GET_EA_EA_SRC
000015CA  163C 002C                659              MOVE.B  #',',D3
000015CE  6100 14C2                660              BSR     PUSH_STACK
000015D2  6100 1168                661              BSR     GET_EA_EA_DEST
000015D6                           662              
000015D6                           663              *TODO: NEEDS DEST EA TOO
000015D6                           664              
000015D6  4E75                     665              RTS
000015D8                           666              
000015D8                           667             
000015D8                           668  *---------------------------------------------------------------------------*
000015D8                           669  * OP0010: decode MOVE.L/MOVEA.L
000015D8                           670  *---------------------------------------------------------------------------*
000015D8                           671  OP0010      
000015D8  183C 0002                672              MOVE.B  #2,D4
000015DC  4280                     673              CLR.L   D0                     
000015DE  4281                     674              CLR.L   D1                      
000015E0  227C 00000000            675              MOVEA.L #0, A1                 
000015E6                           676              
000015E6  2205                     677              MOVE.L  D5,D1
000015E8  EA99                     678              ROR.L   #5,D1
000015EA  0281 0000000E            679              ANDI.L  #$E,D1
000015F0  0C01 0002                680              CMPI.B  #2,D1
000015F4  6700 0026                681              BEQ     OP_MOVEA_L
000015F8                           682  
000015F8  4EF9 000015FE            683              JMP     OP_MOVE_L
000015FE                           684             
000015FE                           685  
000015FE                           686  *---------------------------------------------------------------------------*
000015FE                           687  * OP_MOVE_L: display MOVE_L and proceed to EA
000015FE                           688  *---------------------------------------------------------------------------*
000015FE                           689  OP_MOVE_L   
000015FE  183C 0002                690              MOVE.B  #2,D4
00001602  227C 00000000            691              MOVEA.L #0, A1
00001608  43F9 00003122            692              LEA     DISP_MOVE_L,A1
0000160E  103C 000E                693              MOVE.B  #14,D0
00001612  4E4F                     694              TRAP    #15
00001614                           695              
00001614  4EB9 00001FD6            696              JSR     EA_GEN
0000161A  4E75                     697              RTS
0000161C                           698  
0000161C                           699  *---------------------------------------------------------------------------*
0000161C                           700  * OP_MOVEA_L: display MOVEA_L and proceed to EA
0000161C                           701  *---------------------------------------------------------------------------*
0000161C                           702  OP_MOVEA_L 
0000161C  183C 0002                703              MOVE.B  #2,D4
00001620  227C 00000000            704              MOVEA.L #0, A1
00001626  43F9 0000336E            705              LEA     DISP_MOVEA_L,A1
0000162C  103C 000E                706              MOVE.B  #14,D0
00001630  4E4F                     707              TRAP    #15
00001632  4EF9 00001FB0            708              JMP     EA_MOVEA
00001638                           709  
00001638  4E75                     710              RTS
0000163A                           711              
0000163A                           712  *---------------------------------------------------------------------------*
0000163A                           713  * OP0011: decode MOVE.W/MOVEA.W
0000163A                           714  *---------------------------------------------------------------------------*
0000163A                           715  OP0011      
0000163A  4280                     716              CLR.L   D0                      
0000163C  4281                     717              CLR.L   D1  
0000163E  4284                     718              CLR.L   D4                   
00001640  227C 00000000            719              MOVEA.L #0, A1               
00001646  2205                     720              MOVE.L  D5,D1
00001648  EA99                     721              ROR.L   #5,D1
0000164A  0281 0000000E            722              ANDI.L  #$E,D1
00001650  0C01 0002                723              CMPI.B  #2,D1
00001654  6700 0026                724              BEQ     OP_MOVEA_W
00001658                           725              
00001658  4EF9 0000165E            726              JMP     OP_MOVE_W
0000165E                           727            
0000165E                           728  *---------------------------------------------------------------------------*
0000165E                           729  * OP_MOVE_W: display MOVE_W and proceed to EA
0000165E                           730  *---------------------------------------------------------------------------*
0000165E                           731  OP_MOVE_W   
0000165E  183C 0001                732              MOVE.B  #1,D4
00001662  227C 00000000            733              MOVEA.L #0, A1
00001668  43F9 00003118            734              LEA     DISP_MOVE_W,A1
0000166E  103C 000E                735              MOVE.B  #14,D0
00001672  4E4F                     736              TRAP    #15
00001674  4EF9 00001FD6            737              JMP     EA_GEN
0000167A                           738  
0000167A  4E75                     739              RTS
0000167C                           740  
0000167C                           741  *---------------------------------------------------------------------------*
0000167C                           742  * OP_MOVEA_W: display MOVEA and proceed to EA
0000167C                           743  *---------------------------------------------------------------------------*
0000167C                           744  OP_MOVEA_W 
0000167C  183C 0001                745              MOVE.B  #1,D4
00001680  227C 00000000            746              MOVEA.L #0, A1
00001686  43F9 00003363            747              LEA     DISP_MOVEA_W,A1
0000168C  103C 000E                748              MOVE.B  #14,D0
00001690  4E4F                     749              TRAP    #15
00001692  4EF9 00001FB0            750              JMP     EA_MOVEA
00001698                           751  
00001698  4E75                     752              RTS
0000169A                           753            
0000169A                           754  *---------------------------------------------------------------------------*
0000169A                           755  * OP0100: decode MOVEM/LEA/NEG/JSR/RTS/NOT
0000169A                           756  *---------------------------------------------------------------------------*
0000169A                           757  OP0100
0000169A  4280                     758              CLR.L   D0                      
0000169C  4281                     759              CLR.L   D1  
0000169E  4284                     760              CLR.L   D4                      
000016A0  227C 00000000            761              MOVEA.L #0, A1                  
000016A6  2205                     762              MOVE.L  D5,D1  
000016A8                           763              
000016A8                           764              * check for RTS
000016A8  0C41 4E75                765              CMPI.W  #$4E75,D1   * 0100 1110 0111 0101
000016AC  6700 0178                766              BEQ     OP_RTS
000016B0                           767              
000016B0                           768              * check for JSR     * 0100 1110 10 xxx (ea mode) xxx (ea reg)
000016B0  4281                     769              CLR.L   D1 
000016B2  2205                     770              MOVE.L  D5,D1  
000016B4  0241 0F00                771              ANDI.W  #$0F00,D1
000016B8  0C41 0E00                772              CMPI.W  #$0E00,D1
000016BC  6700 0154                773              BEQ     OP_JSR
000016C0                           774  
000016C0                           775              * check for NEG     * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
000016C0  4281                     776              CLR.L   D1 
000016C2  2205                     777              MOVE.L  D5,D1  
000016C4  0241 0F00                778              ANDI.W  #$0F00,D1
000016C8  0C41 0400                779              CMPI.W  #$0400,D1
000016CC  6700 0086                780              BEQ     OP_NEG
000016D0                           781              
000016D0                           782              * check for NOT     * 0100 0110 xx (size) xxx (ea mode) xxx (ea reg)
000016D0  4281                     783              CLR.L   D1 
000016D2  2205                     784              MOVE.L  D5,D1  
000016D4  0241 0F00                785              ANDI.W  #$0F00,D1
000016D8  0C41 0600                786              CMPI.W  #$0600,D1
000016DC  6700 00DE                787              BEQ     OP_NOT
000016E0                           788              
000016E0                           789              * check for LEA     * 0100 xxx (reg) 111 xxx (ea mode) xxx (ea reg)
000016E0  4281                     790              CLR.L   D1 
000016E2  2205                     791              MOVE.L  D5,D1  
000016E4  E099                     792              ROR.L   #8,D1
000016E6  0C01 0001                793              CMPI.B  #1,D1
000016EA  6700 0054                794              BEQ     OP_LEA
000016EE                           795              
000016EE                           796              * check for MOVEM   * 0100 1 x 001 x (size) xxx (ea mode) xxx (ea reg)
000016EE  4281                     797              CLR.L   D1 
000016F0  2205                     798              MOVE.L  D5,D1  
000016F2  EB59                     799              ROL.W   #5,D1
000016F4  0C01 0001                800              CMPI.B  #1,D1
000016F8  6600 FD78                801              BNE     OP_DATA
000016FC  E959                     802              ROL.W   #4,D1
000016FE  0C01 0001                803              CMPI.B  #1,D1
00001702  6600 FD6E                804              BNE     OP_DATA
00001706  E359                     805              ROL.W   #1,D1
00001708  0C01 0000                806              CMPI.B  #0,D1
0000170C  6700 000E                807              BEQ     OP_MOVEM_W
00001710  0C01 0001                808              CMPI.B  #1,D1
00001714  6700 0018                809              BEQ     OP_MOVEM_L
00001718  4EF8 1472                810              JMP     OP_DATA
0000171C                           811  
0000171C                           812  *---------------------------------------------------------------------------*
0000171C                           813  * OP_MOVEM_W: display MOVEM_W
0000171C                           814  *---------------------------------------------------------------------------*    
0000171C                           815  OP_MOVEM_W  
0000171C  183C 0001                816              MOVE.B  #1,D4
00001720  43F9 00003177            817              LEA     DISP_MOVEM_W,A1
00001726  103C 000E                818              MOVE.B  #14,D0
0000172A  4E4F                     819              TRAP    #15
0000172C  4E75                     820              RTS
0000172E                           821  
0000172E                           822  *---------------------------------------------------------------------------*
0000172E                           823  * OP_MOVEM_L: display MOVEM_L
0000172E                           824  *---------------------------------------------------------------------------*
0000172E                           825  OP_MOVEM_L  
0000172E  183C 0002                826              MOVE.B  #2,D4
00001732  43F9 00003182            827              LEA     DISP_MOVEM_L,A1
00001738  103C 000E                828              MOVE.B  #14,D0
0000173C  4E4F                     829              TRAP    #15
0000173E  4E75                     830              RTS
00001740                           831     
00001740                           832  *---------------------------------------------------------------------------*
00001740                           833  * OP_LEA: decode and display LEA
00001740                           834  *---------------------------------------------------------------------------*
00001740                           835  OP_LEA      
00001740  43F9 00003170            836              LEA     DISP_LEA,A1
00001746  103C 000E                837              MOVE.B  #14,D0
0000174A  4E4F                     838              TRAP    #15
0000174C  4EF9 00001FB0            839              JMP     EA_MOVEA
00001752                           840  
00001752  4E75                     841              RTS
00001754                           842  
00001754                           843  *---------------------------------------------------------------------------*
00001754                           844  * OP_NEG: decode and display NEG 
00001754                           845  *---------------------------------------------------------------------------*
00001754                           846  OP_NEG      * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
00001754  4281                     847              CLR.L   D1
00001756  4284                     848              CLR.L   D4
00001758  2205                     849              MOVE.L  D5,D1
0000175A  EC99                     850              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
0000175C  0C01 0000                851              CMPI.B  #0,D1
00001760  6700 0012                852              BEQ     OP_NEG_B    * size is byte
00001764  0C01 0001                853              CMPI.B  #1,D1
00001768  6700 0022                854              BEQ     OP_NEG_W    * size is word
0000176C  0C01 0002                855              CMPI.B  #2,D1
00001770  6700 0032                856              BEQ     OP_NEG_L    * size is long
00001774                           857                         
00001774                           858  OP_NEG_B    * size is byte   
00001774  183C 0000                859              MOVE.B  #0,D4 
00001778  43F9 0000313A            860              LEA     DISP_NEG_B,A1
0000177E  103C 000E                861              MOVE.B  #14,D0
00001782  4E4F                     862              TRAP    #15
00001784                           863              
00001784  4EB9 00001F76            864              JSR     EA_NOSRC
0000178A  4E75                     865              RTS
0000178C                           866              
0000178C                           867  OP_NEG_W    * size is word
0000178C  183C 0001                868              MOVE.B  #1,D4
00001790  43F9 00003143            869              LEA     DISP_NEG_W,A1
00001796  103C 000E                870              MOVE.B  #14,D0
0000179A  4E4F                     871              TRAP    #15
0000179C  4EB9 00001F76            872              JSR     EA_NOSRC
000017A2  4E75                     873              RTS
000017A4                           874              
000017A4                           875  OP_NEG_L    * size is long
000017A4  183C 0002                876              MOVE.B  #2,D4
000017A8  43F9 0000314C            877              LEA     DISP_NEG_L,A1
000017AE  103C 000E                878              MOVE.B  #14,D0
000017B2  4E4F                     879              TRAP    #15
000017B4  4EB9 00001F76            880              JSR     EA_NOSRC
000017BA                           881              
000017BA  4E75                     882              RTS
000017BC                           883  
000017BC                           884  *---------------------------------------------------------------------------*
000017BC                           885  * OP_NOT: decode and display NOT 
000017BC                           886  *---------------------------------------------------------------------------*
000017BC                           887  OP_NOT
000017BC  4281                     888              CLR.L   D1
000017BE  4284                     889              CLR.L   D4
000017C0  2205                     890              MOVE.L  D5,D1
000017C2  EC99                     891              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000017C4  0C01 0000                892              CMPI.B  #0,D1
000017C8  6700 0012                893              BEQ     OP_NOT_B    * size is byte
000017CC  0C01 0001                894              CMPI.B  #1,D1
000017D0  6700 001C                895              BEQ     OP_NOT_W    * size is word
000017D4  0C01 0002                896              CMPI.B  #2,D1
000017D8  6700 0026                897              BEQ     OP_NOT_L    * size is long
000017DC                           898                         
000017DC                           899  OP_NOT_B    * size is byte   
000017DC  183C 0000                900              MOVE.B  #0,D4 
000017E0  43F9 00003155            901              LEA     DISP_NOT_B,A1
000017E6  103C 000E                902              MOVE.B  #14,D0
000017EA  4E4F                     903              TRAP    #15
000017EC  4E75                     904              RTS
000017EE                           905              
000017EE                           906  OP_NOT_W    * size is word
000017EE  183C 0001                907              MOVE.B  #1,D4
000017F2  43F9 0000315E            908              LEA     DISP_NOT_W,A1
000017F8  103C 000E                909              MOVE.B  #14,D0
000017FC  4E4F                     910              TRAP    #15
000017FE  4E75                     911              RTS
00001800                           912              
00001800                           913  OP_NOT_L    * size is long
00001800  183C 0002                914              MOVE.B  #2,D4
00001804  43F9 00003167            915              LEA     DISP_NOT_L,A1
0000180A  103C 000E                916              MOVE.B  #14,D0
0000180E  4E4F                     917              TRAP    #15
00001810  4E75                     918              RTS
00001812                           919  
00001812                           920  *---------------------------------------------------------------------------*
00001812                           921  * OP_JSR: display JSR     
00001812                           922  *---------------------------------------------------------------------------*
00001812  43F9 00003133            923  OP_JSR      LEA     DISP_JSR,A1
00001818  103C 000E                924              MOVE.B  #14,D0
0000181C  4E4F                     925              TRAP    #15
0000181E  4EB9 00001F76            926              JSR     EA_NOSRC
00001824                           927  
00001824  4E75                     928              RTS
00001826                           929  
00001826                           930  *---------------------------------------------------------------------------*
00001826                           931  * OP_RTS: display RTS     
00001826                           932  *---------------------------------------------------------------------------* 
00001826  43F9 0000312C            933  OP_RTS      LEA     DISP_RTS,A1
0000182C  103C 000E                934              MOVE.B  #14,D0
00001830  4E4F                     935              TRAP    #15
00001832  4E75                     936              RTS
00001834                           937  
00001834                           938  *---------------------------------------------------------------------------*
00001834                           939  * OP0101: decode ADDQ
00001834                           940  *---------------------------------------------------------------------------* 
00001834  4280                     941  OP0101      CLR.L   D0               * clear registers for temp storage       
00001836  4281                     942              CLR.L   D1
00001838  4284                     943              CLR.L   D4                  
0000183A  227C 00000000            944              MOVEA.L #0, A1  
00001840                           945              
00001840  2205                     946              MOVE.L  D5,D1           * copy the processing data 
00001842  E089                     947              LSR.L   #8,D1           * shift to right by 8 bits to check the value of bit 8
00001844  0201 0001                948              ANDI.B  #$1,D1          * mask all bits except the last 2 bits
00001848  0C01 0000                949              CMPI.B  #0,D1           * if the value is 0, it's ADDQ
0000184C  6700 0006                950              BEQ     OP_ADDQ
00001850                           951              
00001850  4EF8 1472                952              JMP     OP_DATA
00001854                           953       
00001854  4281                     954  OP_ADDQ     CLR.L   D1
00001856  2205                     955              MOVE.L  D5,D1
00001858  EC99                     956              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
0000185A  0281 00000003            957              ANDI.L  #$3,D1
00001860  0C01 0000                958              CMPI.B  #0,D1
00001864  6700 0014                959              BEQ     OP_ADDQ_B    * size is byte
00001868  0C41 0001                960              CMPI.W  #1,D1
0000186C  6700 001E                961              BEQ     OP_ADDQ_W    * size is word
00001870  0C81 00000002            962              CMPI.L  #2,D1
00001876  6700 0026                963              BEQ     OP_ADDQ_L    * size is long
0000187A                           964              
0000187A                           965  *---------------------------------------------------------------------------*
0000187A                           966  * OP_ADDQ: display ADDQ
0000187A                           967  *---------------------------------------------------------------------------*              
0000187A                           968  OP_ADDQ_B    * size is byte   
0000187A  183C 0000                969              MOVE.B  #0,D4 
0000187E  43F9 0000318D            970              LEA     DISP_ADDQ_B,A1
00001884  103C 000E                971              MOVE.B  #14,D0
00001888  4E4F                     972              TRAP    #15
0000188A  4E75                     973              RTS
0000188C                           974              
0000188C                           975  OP_ADDQ_W    * size is word
0000188C  183C 0001                976              MOVE.B  #1,D4
00001890  43F9 00003197            977              LEA     DISP_ADDQ_W,A1
00001896  103C 000E                978              MOVE.B  #14,D0
0000189A  4E4F                     979              TRAP    #15
0000189C  4E75                     980              RTS
0000189E                           981              
0000189E                           982  OP_ADDQ_L    * size is long
0000189E  183C 0002                983              MOVE.B  #2,D4
000018A2  43F9 000031A1            984              LEA     DISP_ADDQ_L,A1
000018A8  103C 000E                985              MOVE.B  #14,D0
000018AC  4E4F                     986              TRAP    #15
000018AE  4E75                     987              RTS
000018B0                           988  
000018B0                           989  *---------------------------------------------------------------------------*
000018B0                           990  * OP0110: decode BRA/BEQ/BNE/BLT/BHI
000018B0                           991  *---------------------------------------------------------------------------*              
000018B0  4280                     992  OP0110      CLR.L   D0                  
000018B2  4281                     993              CLR.L   D1   
000018B4  4284                     994              CLR.L   D4                 
000018B6  227C 00000000            995              MOVEA.L #0,A1
000018BC  2205                     996              MOVE.L  D5, D1                
000018BE  0281 000000FF            997              ANDI.L  #$00FF, D1              * Get 8-bit displacement 
000018C4  2205                     998              MOVE.L  D5,D1                  
000018C6  0281 00000F00            999              ANDI.L  #$0F00,D1
000018CC                          1000                 
000018CC  0C41 0000               1001              CMPI.W  #$0000,D1               * Check for BRA
000018D0  6700 0050               1002              BEQ     OP_BRA                  
000018D4                          1003                          
000018D4  0C41 0D00               1004              CMPI.W  #$0D00,D1               * Check for BLT
000018D8  6700 0056               1005              BEQ     OP_BLT      
000018DC                          1006  
000018DC  0C41 0700               1007              CMPI.W  #$0700,D1               * Check for BEQ
000018E0  6700 0032               1008              BEQ     OP_BEQ      
000018E4                          1009  
000018E4  0C41 0600               1010              CMPI.W  #$0600,D1               * Check for BNE
000018E8  6700 001C               1011              BEQ     OP_BNE  
000018EC                          1012              
000018EC  0C41 0200               1013              CMPI.W  #$0200,D1               * Check for BHI
000018F0  6700 0006               1014              BEQ     OP_BHI
000018F4                          1015  
000018F4  4EF8 1472               1016              JMP     OP_DATA
000018F8                          1017              
000018F8  43F9 0000335C           1018  OP_BHI      LEA     DISP_BHI,A1             
000018FE  103C 000E               1019              MOVE.B  #14,D0
00001902  4E4F                    1020              TRAP    #15
00001904  4E75                    1021              RTS
00001906                          1022  
00001906  43F9 00003355           1023  OP_BNE      LEA     DISP_BNE,A1             
0000190C  103C 000E               1024              MOVE.B  #14,D0
00001910  4E4F                    1025              TRAP    #15
00001912  4E75                    1026              RTS
00001914                          1027  
00001914  43F9 0000334E           1028  OP_BEQ      LEA     DISP_BEQ,A1             
0000191A  103C 000E               1029              MOVE.B  #14,D0
0000191E  4E4F                    1030              TRAP    #15
00001920  4E75                    1031              RTS          
00001922                          1032                          
00001922  43F9 00003340           1033  OP_BRA      LEA     DISP_BRA,A1             
00001928  103C 000E               1034              MOVE.B  #14,D0
0000192C  4E4F                    1035              TRAP    #15
0000192E  4E75                    1036              RTS
00001930                          1037              
00001930  43F9 00003347           1038  OP_BLT      LEA     DISP_BLT,A1          
00001936  103C 000E               1039              MOVE.B  #14,D0
0000193A  4E4F                    1040              TRAP    #15
0000193C  4E75                    1041              RTS
0000193E                          1042     
0000193E                          1043  *---------------------------------------------------------------------------*
0000193E                          1044  * OP0111 : MOVEQ not required
0000193E                          1045  *---------------------------------------------------------------------------*           
0000193E  4EF8 1472               1046  OP0111      JMP     OP_DATA
00001942                          1047             
00001942                          1048  *---------------------------------------------------------------------------*
00001942                          1049  * OP1000 : decode DIVS
00001942                          1050  *---------------------------------------------------------------------------*           
00001942                          1051  OP1000      
00001942  4280                    1052              CLR.L   D0                
00001944  4281                    1053              CLR.L   D1   
00001946  4284                    1054              CLR.L   D4                
00001948  207C 00000000           1055              MOVEA.L #0, A0               
0000194E  227C 00000000           1056              MOVEA.L #0, A1               
00001954                          1057              
00001954  2205                    1058              MOVE.L  D5,D1
00001956  EA89                    1059              LSR.L   #5,D1
00001958  0281 0000000E           1060              ANDI.L  #$E,D1
0000195E                          1061    
0000195E  0C01 000E               1062              CMPI.B  #$E,D1
00001962  6700 0006               1063              BEQ     OP_DIVS
00001966                          1064              
00001966  4EF8 1472               1065              JMP     OP_DATA
0000196A                          1066  
0000196A                          1067  *---------------------------------------------------------------------------*
0000196A                          1068  * OP_DIVS: display DIVS and proceed to EA
0000196A                          1069  *---------------------------------------------------------------------------*  
0000196A  43F9 000031AB           1070  OP_DIVS     LEA     DISP_DIVS,A1
00001970  103C 000E               1071              MOVE.B  #14,D0
00001974  4E4F                    1072              TRAP    #15
00001976  4EF9 00001F8A           1073              JMP     EA_ARITH
0000197C                          1074  
0000197C  4E75                    1075              RTS
0000197E                          1076              
0000197E                          1077  *---------------------------------------------------------------------------*
0000197E                          1078  * OP1001: decode SUB/SUBA
0000197E                          1079  *---------------------------------------------------------------------------*      
0000197E  4280                    1080  OP1001      CLR.L   D0                
00001980  4281                    1081              CLR.L   D1   
00001982  4284                    1082              CLR.L   D4                 
00001984  207C 00000000           1083              MOVEA.L #0, A0                 
0000198A  227C 00000000           1084              MOVEA.L #0, A1               
00001990                          1085              
00001990  2205                    1086              MOVE.L  D5,D1
00001992  EA89                    1087              LSR.L   #5,D1
00001994  0281 0000000E           1088              ANDI.L  #$E,D1
0000199A                          1089    
0000199A  0C01 0000               1090              CMPI.B  #$0,D1
0000199E  6700 004A               1091              BEQ     OP_SUB_B
000019A2  0C01 0002               1092              CMPI.B  #$2,D1
000019A6  6700 005A               1093              BEQ     OP_SUB_W
000019AA  0C01 0004               1094              CMPI.B  #$4,D1
000019AE  6700 006A               1095              BEQ     OP_SUB_L
000019B2  0C01 0008               1096              CMPI.B  #$8,D1
000019B6  6700 0032               1097              BEQ     OP_SUB_B
000019BA  0C01 000A               1098              CMPI.B  #$A,D1
000019BE  6700 0042               1099              BEQ     OP_SUB_W
000019C2  0C01 000C               1100              CMPI.B  #$C,D1
000019C6  6700 0052               1101              BEQ     OP_SUB_L
000019CA                          1102              
000019CA  4241                    1103              CLR     D1
000019CC  2205                    1104              MOVE.L  D5,D1
000019CE  EC89                    1105              LSR.L   #6,D1
000019D0  0281 0000000F           1106              ANDI.L  #$F,D1
000019D6  0C01 0003               1107              CMPI.B  #3,D1
000019DA  6700 0056               1108              BEQ     OP_SUBA_W
000019DE  0C01 0007               1109              CMPI.B  #7,D1
000019E2  6700 0060               1110              BEQ     OP_SUBA_L
000019E6                          1111              
000019E6  4EF8 1472               1112              JMP     OP_DATA
000019EA                          1113    
000019EA                          1114  *---------------------------------------------------------------------------*
000019EA                          1115  * OP_SUB: display SUB and proceed to EA
000019EA                          1116  *---------------------------------------------------------------------------*            
000019EA  43F9 000031B3           1117  OP_SUB_B    LEA     DISP_SUB_B,A1
000019F0  103C 000E               1118              MOVE.B  #14,D0
000019F4  4E4F                    1119              TRAP    #15
000019F6  183C 0000               1120              MOVE.B  #0,D4
000019FA  4EF9 00001FD6           1121              JMP     EA_GEN
00001A00                          1122  
00001A00  4E75                    1123              RTS
00001A02                          1124  
00001A02  43F9 000031BC           1125  OP_SUB_W    LEA     DISP_SUB_W,A1
00001A08  103C 000E               1126              MOVE.B  #14,D0
00001A0C  4E4F                    1127              TRAP    #15
00001A0E  183C 0001               1128              MOVE.B  #1,D4
00001A12  4EF9 00001FD6           1129              JMP     EA_GEN
00001A18                          1130  
00001A18  4E75                    1131              RTS
00001A1A                          1132  
00001A1A  43F9 000031C5           1133  OP_SUB_L    LEA     DISP_SUB_L,A1
00001A20  103C 000E               1134              MOVE.B  #14,D0
00001A24  4E4F                    1135              TRAP    #15
00001A26  183C 0002               1136              MOVE.B  #2,D4
00001A2A  4EF9 00001FD6           1137              JMP     EA_GEN
00001A30                          1138  
00001A30  4E75                    1139              RTS
00001A32                          1140  
00001A32                          1141  *---------------------------------------------------------------------------*
00001A32                          1142  * OP_SUBA: display SUBA
00001A32                          1143  *---------------------------------------------------------------------------*  
00001A32  43F9 000031EC           1144  OP_SUBA_W   LEA     DISP_SUBA_W,A1
00001A38  103C 000E               1145              MOVE.B  #14,D0
00001A3C  4E4F                    1146              TRAP    #15
00001A3E  183C 0001               1147              MOVE.B  #1,D4
00001A42  4E75                    1148              RTS
00001A44                          1149  
00001A44  43F9 000031F6           1150  OP_SUBA_L   LEA     DISP_SUBA_L,A1
00001A4A  103C 000E               1151              MOVE.B  #14,D0
00001A4E  4E4F                    1152              TRAP    #15
00001A50  183C 0002               1153              MOVE.B  #2,D4
00001A54  4E75                    1154              RTS         
00001A56                          1155  *---------------------------------------------------------------------------*
00001A56                          1156  * OP1010 : unassigned
00001A56                          1157  *---------------------------------------------------------------------------*           
00001A56  4EF8 1472               1158  OP1010      JMP     OP_DATA
00001A5A                          1159              
00001A5A                          1160  *---------------------------------------------------------------------------*
00001A5A                          1161  * OP1011 : decode CMP/EOR/CMPA
00001A5A                          1162  *---------------------------------------------------------------------------*           
00001A5A  4280                    1163  OP1011      CLR.L   D0                
00001A5C  4281                    1164              CLR.L   D1            
00001A5E  4284                    1165              CLR.L   D4                   
00001A60  227C 00000000           1166              MOVEA.L #0, A1               
00001A66  2205                    1167              MOVE.L  D5,D1
00001A68  EA99                    1168              ROR.L   #5,D1
00001A6A  0281 0000000E           1169              ANDI.L  #$E,D1
00001A70  0C01 0000               1170              CMPI.B  #$0,D1
00001A74  6700 0062               1171              BEQ     OP_CMP_B
00001A78  0C01 0002               1172              CMPI.B  #$2,D1
00001A7C  6700 0072               1173              BEQ     OP_CMP_W
00001A80  0C01 0004               1174              CMPI.B  #$4,D1
00001A84  6700 0082               1175              BEQ     OP_CMP_L
00001A88  0C01 0008               1176              CMPI.B  #$8,D1
00001A8C  6700 0092               1177              BEQ     OP_EOR_B
00001A90  0C01 000A               1178              CMPI.B  #$A,D1
00001A94  6700 009C               1179              BEQ     OP_EOR_W
00001A98  0C01 000C               1180              CMPI.B  #$C,D1
00001A9C  6700 00A6               1181              BEQ     OP_EOR_L  
00001AA0  0C01 0006               1182              CMPI.B  #$6,D1
00001AA4  6700 000E               1183              BEQ     OP_CMPA_W
00001AA8  0C01 000E               1184              CMPI.B  #$E,D1
00001AAC  6700 0018               1185              BEQ     OP_CMPA_L 
00001AB0                          1186  
00001AB0  4EF8 1472               1187              JMP     OP_DATA          
00001AB4                          1188  
00001AB4                          1189  *---------------------------------------------------------------------------*
00001AB4                          1190  * OP_CMPA: display CMPA 
00001AB4                          1191  *---------------------------------------------------------------------------
00001AB4  43F9 00003236           1192  OP_CMPA_W   LEA     DISP_CMPA_W,A1
00001ABA  103C 000E               1193              MOVE.B  #14,D0
00001ABE  4E4F                    1194              TRAP    #15
00001AC0  183C 0001               1195              MOVE.B  #1,D4
00001AC4  4E75                    1196              RTS
00001AC6                          1197  
00001AC6  43F9 00003240           1198  OP_CMPA_L   LEA     DISP_CMPA_L,A1
00001ACC  103C 000E               1199              MOVE.B  #14,D0
00001AD0  4E4F                    1200              TRAP    #15
00001AD2  183C 0002               1201              MOVE.B  #2,D4
00001AD6  4E75                    1202              RTS
00001AD8                          1203  
00001AD8                          1204  *---------------------------------------------------------------------------*
00001AD8                          1205  * OP_CMP: display CMP and proceed to EA
00001AD8                          1206  *---------------------------------------------------------------------------*  
00001AD8  43F9 0000321B           1207  OP_CMP_B    LEA     DISP_CMP_B,A1
00001ADE  103C 000E               1208              MOVE.B  #14,D0
00001AE2  4E4F                    1209              TRAP    #15
00001AE4  183C 0000               1210              MOVE.B  #0,D4
00001AE8  4EF9 00001FD6           1211              JMP     EA_GEN
00001AEE                          1212  
00001AEE  4E75                    1213              RTS
00001AF0                          1214              
00001AF0  43F9 00003224           1215  OP_CMP_W    LEA     DISP_CMP_W,A1
00001AF6  103C 000E               1216              MOVE.B  #14,D0
00001AFA  4E4F                    1217              TRAP    #15
00001AFC  183C 0001               1218              MOVE.B  #1,D4
00001B00  4EF9 00001FD6           1219              JMP     EA_GEN
00001B06                          1220  
00001B06  4E75                    1221              RTS
00001B08                          1222              
00001B08  43F9 0000322D           1223  OP_CMP_L    LEA     DISP_CMP_L,A1
00001B0E  103C 000E               1224              MOVE.B  #14,D0
00001B12  4E4F                    1225              TRAP    #15
00001B14  183C 0002               1226              MOVE.B  #2,D4
00001B18  4EF9 00001FD6           1227              JMP     EA_GEN
00001B1E                          1228  
00001B1E  4E75                    1229              RTS
00001B20                          1230              
00001B20                          1231  *---------------------------------------------------------------------------*
00001B20                          1232  * OP_EOR: display EOR
00001B20                          1233  *---------------------------------------------------------------------------*  
00001B20  43F9 00003200           1234  OP_EOR_B    LEA     DISP_EOR_B,A1
00001B26  103C 000E               1235              MOVE.B  #14,D0
00001B2A  4E4F                    1236              TRAP    #15
00001B2C  183C 0000               1237              MOVE.B  #0,D4
00001B30  4E75                    1238              RTS
00001B32                          1239              
00001B32  43F9 00003209           1240  OP_EOR_W    LEA     DISP_EOR_W,A1
00001B38  103C 000E               1241              MOVE.B  #14,D0
00001B3C  4E4F                    1242              TRAP    #15
00001B3E  183C 0001               1243              MOVE.B  #1,D4
00001B42  4E75                    1244              RTS
00001B44                          1245              
00001B44  43F9 00003212           1246  OP_EOR_L    LEA     DISP_EOR_L,A1
00001B4A  103C 000E               1247              MOVE.B  #14,D0
00001B4E  4E4F                    1248              TRAP    #15
00001B50  183C 0002               1249              MOVE.B  #2,D4
00001B54  4E75                    1250              RTS    
00001B56                          1251  
00001B56                          1252  *---------------------------------------------------------------------------*
00001B56                          1253  * OP1100: Decode and display MULS/AND and proceed to EA
00001B56                          1254  *---------------------------------------------------------------------------* 
00001B56  4280                    1255  OP1100      CLR.L   D0                 
00001B58  4281                    1256              CLR.L   D1    
00001B5A  4284                    1257              CLR.L   D4                
00001B5C  227C 00000000           1258              MOVEA.L #0, A1             
00001B62                          1259              
00001B62  2205                    1260              MOVE.L  D5,D1
00001B64  EA89                    1261              LSR.L   #5,D1
00001B66  0281 0000000E           1262              ANDI.L  #$E,D1
00001B6C  0C41 000E               1263              CMPI.W  #$E,D1
00001B70  6700 0036               1264              BEQ     OP_MULS
00001B74  0C41 0000               1265              CMPI.W  #$0,D1
00001B78  6700 0042               1266              BEQ     OP_AND_B
00001B7C  0C41 0002               1267              CMPI.W  #$2,D1
00001B80  6700 004C               1268              BEQ     OP_AND_W
00001B84  0C41 0004               1269              CMPI.W  #$4,D1
00001B88  6700 0056               1270              BEQ     OP_AND_L
00001B8C  0C41 0008               1271              CMPI.W  #$8,D1
00001B90  6700 002A               1272              BEQ     OP_AND_B
00001B94  0C41 000A               1273              CMPI.W  #$A,D1
00001B98  6700 0034               1274              BEQ     OP_AND_W
00001B9C  0C41 000C               1275              CMPI.W  #$C,D1
00001BA0  6700 003E               1276              BEQ     OP_AND_L
00001BA4                          1277  
00001BA4  4EF8 1472               1278              JMP     OP_DATA
00001BA8                          1279  
00001BA8  43F9 0000324A           1280  OP_MULS     LEA     DISP_MULS_W,A1
00001BAE  103C 000E               1281              MOVE.B  #14,D0
00001BB2  4E4F                    1282              TRAP    #15
00001BB4  4EF9 00001F8A           1283              JMP     EA_ARITH
00001BBA  4E75                    1284              RTS
00001BBC                          1285              
00001BBC                          1286  OP_AND_B    
00001BBC  43F9 00003254           1287              LEA     DISP_AND_B,A1
00001BC2  103C 000E               1288              MOVE.B  #14,D0
00001BC6  4E4F                    1289              TRAP    #15
00001BC8  183C 0000               1290              MOVE.B  #0,D4
00001BCC  4E75                    1291              RTS
00001BCE                          1292  
00001BCE                          1293  OP_AND_W
00001BCE  43F9 0000325D           1294              LEA     DISP_AND_W,A1
00001BD4  103C 000E               1295              MOVE.B  #14,D0
00001BD8  4E4F                    1296              TRAP    #15
00001BDA  183C 0001               1297              MOVE.B  #1,D4
00001BDE  4E75                    1298              RTS
00001BE0                          1299  
00001BE0                          1300  OP_AND_L
00001BE0  43F9 00003266           1301              LEA     DISP_AND_L,A1
00001BE6  103C 000E               1302              MOVE.B  #14,D0
00001BEA  4E4F                    1303              TRAP    #15
00001BEC  183C 0002               1304              MOVE.B  #2,D4
00001BF0  4E75                    1305              RTS
00001BF2                          1306  
00001BF2                          1307  *---------------------------------------------------------------------------*
00001BF2                          1308  * OP1101: Decode ADD/ADDA
00001BF2                          1309  *---------------------------------------------------------------------------* 
00001BF2  4280                    1310  OP1101      CLR.L   D0                  
00001BF4  4281                    1311              CLR.L   D1       
00001BF6  4284                    1312              CLR.L   D4                   
00001BF8  227C 00000000           1313              MOVEA.L #0, A1              
00001BFE  2205                    1314              MOVE.L  D5,D1
00001C00  EA99                    1315              ROR.L   #5,D1
00001C02  0281 0000000E           1316              ANDI.L  #$E,D1
00001C08  0C01 0000               1317              CMPI.B  #$0,D1
00001C0C  6700 003E               1318              BEQ     OP_ADD_B
00001C10  0C01 0002               1319              CMPI.B  #$2,D1
00001C14  6700 004E               1320              BEQ     OP_ADD_W
00001C18  0C01 0004               1321              CMPI.B  #$4,D1
00001C1C  6700 005E               1322              BEQ     OP_ADD_L
00001C20  0C01 0008               1323              CMPI.B  #$8,D1
00001C24  6700 0026               1324              BEQ     OP_ADD_B
00001C28  0C01 000A               1325              CMPI.B  #$A,D1
00001C2C  6700 0036               1326              BEQ     OP_ADD_W
00001C30  0C01 000C               1327              CMPI.B  #$C,D1
00001C34  6700 0046               1328              BEQ     OP_ADD_L  
00001C38                          1329              
00001C38  0C01 0006               1330              CMPI.B  #$6,D1
00001C3C  6700 0056               1331              BEQ     OP_ADDA_W
00001C40  0C01 000E               1332              CMPI.B  #$E,D1
00001C44  6700 0066               1333              BEQ     OP_ADDA_L 
00001C48                          1334  
00001C48  4EF8 1472               1335              JMP     OP_DATA  
00001C4C                          1336            
00001C4C                          1337  *---------------------------------------------------------------------------*
00001C4C                          1338  * OP_ADD: display ADD and proceed to EA
00001C4C                          1339  *---------------------------------------------------------------------------*  
00001C4C  43F9 0000326F           1340  OP_ADD_B    LEA     DISP_ADD_B,A1
00001C52  103C 000E               1341              MOVE.B  #14,D0
00001C56  4E4F                    1342              TRAP    #15
00001C58  183C 0000               1343              MOVE.B  #0,D4
00001C5C  4EF9 00001FD6           1344              JMP     EA_GEN
00001C62                          1345  
00001C62  4E75                    1346              RTS
00001C64                          1347  
00001C64  43F9 00003278           1348  OP_ADD_W    LEA     DISP_ADD_W,A1
00001C6A  103C 000E               1349              MOVE.B  #14,D0
00001C6E  4E4F                    1350              TRAP    #15
00001C70  183C 0001               1351              MOVE.B  #1,D4
00001C74  4EF9 00001FD6           1352              JMP     EA_GEN
00001C7A                          1353  
00001C7A  4E75                    1354              RTS
00001C7C                          1355  
00001C7C  43F9 00003281           1356  OP_ADD_L    LEA     DISP_ADD_L,A1
00001C82  103C 000E               1357              MOVE.B  #14,D0
00001C86  4E4F                    1358              TRAP    #15
00001C88  183C 0002               1359              MOVE.B  #2,D4
00001C8C  4EF9 00001FD6           1360              JMP     EA_GEN
00001C92                          1361  
00001C92  4E75                    1362              RTS
00001C94                          1363  
00001C94                          1364  *---------------------------------------------------------------------------*
00001C94                          1365  * OP_ADDA: display ADDA and proceed to EA
00001C94                          1366  *---------------------------------------------------------------------------*  
00001C94  43F9 0000328A           1367  OP_ADDA_W   LEA     DISP_ADDA_W,A1
00001C9A  103C 000E               1368              MOVE.B  #14,D0
00001C9E  4E4F                    1369              TRAP    #15
00001CA0  183C 0001               1370              MOVE.B  #1,D4
00001CA4  4EF9 00001FD6           1371              JMP     EA_GEN
00001CAA                          1372  
00001CAA  4E75                    1373              RTS
00001CAC                          1374  
00001CAC  43F9 00003294           1375  OP_ADDA_L   LEA     DISP_ADDA_L,A1
00001CB2  103C 000E               1376              MOVE.B  #14,D0
00001CB6  4E4F                    1377              TRAP    #15
00001CB8  183C 0002               1378              MOVE.B  #2,D4
00001CBC  4EF9 00001FD6           1379              JMP     EA_GEN
00001CC2                          1380  
00001CC2  4E75                    1381              RTS
00001CC4                          1382              
00001CC4                          1383  *---------------------------------------------------------------------------*
00001CC4                          1384  * OP1110: LSR/LSL/ASR/ASL/ROL/ROR
00001CC4                          1385  *---------------------------------------------------------------------------* 
00001CC4  4280                    1386  OP1110      CLR.L   D0                  
00001CC6  4281                    1387              CLR.L   D1   
00001CC8  4284                    1388              CLR.L   D4                   
00001CCA  227C 00000000           1389              MOVEA.L #0, A1                 
00001CD0  2205                    1390              MOVE.L  D5,D1
00001CD2                          1391              
00001CD2                          1392              * check for LSX
00001CD2  E699                    1393              ROR.L   #3,D1
00001CD4  0281 00000001           1394              ANDI.L  #$1,D1
00001CDA  0C01 0001               1395              CMPI.B  #1,D1
00001CDE  6700 002E               1396              BEQ     OP_LSX
00001CE2                          1397              
00001CE2                          1398              * reset D1 and check for ASX
00001CE2  4281                    1399              CLR.L   D1
00001CE4  2205                    1400              MOVE.L  D5,D1
00001CE6  E699                    1401              ROR.L   #3,D1
00001CE8  0281 00000001           1402              ANDI.L  #$1,D1
00001CEE  0C01 0000               1403              CMPI.B  #0,D1
00001CF2  6700 0032               1404              BEQ     OP_ASX
00001CF6                          1405  
00001CF6                          1406              * reset D1 and check for ROX
00001CF6  4281                    1407              CLR.L   D1
00001CF8  2205                    1408              MOVE.L  D5,D1
00001CFA  E699                    1409              ROR.L   #3,D1
00001CFC  0281 00000001           1410              ANDI.L  #$1,D1
00001D02  0C01 0003               1411              CMPI.B  #3,D1
00001D06  6700 0036               1412              BEQ     OP_ROX
00001D0A                          1413              
00001D0A  4EF8 1472               1414              JMP     OP_DATA
00001D0E                          1415  
00001D0E                          1416  *---------------------------------------------------------------------------*
00001D0E                          1417  * OP_LSX: process LSR/LSL
00001D0E                          1418  *---------------------------------------------------------------------------*            
00001D0E  EA99                    1419  OP_LSX      ROR.L   #5,D1
00001D10  0281 00000001           1420              ANDI.L  #$1,D1
00001D16  0C01 0000               1421              CMPI.B  #0,D1
00001D1A  6700 003A               1422              BEQ     OP_LSR
00001D1E  0C01 0001               1423              CMPI.B  #1,D1
00001D22  6700 008C               1424              BEQ     OP_LSL
00001D26                          1425              
00001D26                          1426  *---------------------------------------------------------------------------*
00001D26                          1427  * OP_ASX: process ASR/ASL
00001D26                          1428  *---------------------------------------------------------------------------*  
00001D26  EA99                    1429  OP_ASX      ROR.L   #5,D1
00001D28  0281 00000001           1430              ANDI.L  #$1,D1
00001D2E  0C01 0000               1431              CMPI.B  #0,D1
00001D32  6700 00D6               1432              BEQ     OP_ASR
00001D36  0C01 0001               1433              CMPI.B  #1,D1
00001D3A  6700 0128               1434              BEQ     OP_ASL
00001D3E                          1435              
00001D3E                          1436  *---------------------------------------------------------------------------*
00001D3E                          1437  * OP_ROX: process ROR/ROL
00001D3E                          1438  *---------------------------------------------------------------------------*  
00001D3E  EA99                    1439  OP_ROX      ROR.L   #5,D1
00001D40  0281 00000001           1440              ANDI.L  #$1,D1
00001D46  0C01 0000               1441              CMPI.B  #0,D1
00001D4A  6700 0172               1442              BEQ     OP_ROR
00001D4E  0C01 0001               1443              CMPI.B  #1,D1
00001D52  6700 01C4               1444              BEQ     OP_ROL
00001D56                          1445  
00001D56                          1446  *---------------------------------------------------------------------------*
00001D56                          1447  * OP_LSR: decode and display LSR
00001D56                          1448  *---------------------------------------------------------------------------*        
00001D56  E599                    1449  OP_LSR      ROL.L   #2,D1
00001D58  0281 00000003           1450              ANDI.L  #$3,D1
00001D5E  0C01 0000               1451              CMPI.B  #0,D1
00001D62  6700 0016               1452              BEQ     OP_LSR_B
00001D66  0C01 0001               1453              CMPI.B  #$1,D1
00001D6A  6700 0032               1454              BEQ     OP_LSR_W
00001D6E  0C01 0002               1455              CMPI.B  #$2,D1
00001D72  6700 0018               1456              BEQ     OP_LSR_L
00001D76                          1457              
00001D76  4EF8 1472               1458              JMP     OP_DATA
00001D7A                          1459  
00001D7A  43F9 0000329E           1460  OP_LSR_B    LEA     DISP_LSR_B,A1
00001D80  103C 000E               1461              MOVE.B  #14,D0
00001D84  4E4F                    1462              TRAP    #15
00001D86  183C 0000               1463              MOVE.B  #0,D4
00001D8A  4E75                    1464              RTS
00001D8C                          1465  
00001D8C  43F9 000032C2           1466  OP_LSR_L    LEA     DISP_LSR_L,A1
00001D92  103C 000E               1467              MOVE.B  #14,D0
00001D96  4E4F                    1468              TRAP    #15
00001D98  183C 0002               1469              MOVE.B  #2,D4
00001D9C  4E75                    1470              RTS
00001D9E                          1471  
00001D9E  43F9 000032B0           1472  OP_LSR_W    LEA     DISP_LSR_W,A1
00001DA4  103C 000E               1473              MOVE.B  #14,D0
00001DA8  4E4F                    1474              TRAP    #15
00001DAA  183C 0001               1475              MOVE.B  #1,D4
00001DAE  4E75                    1476              RTS
00001DB0                          1477   
00001DB0                          1478  *---------------------------------------------------------------------------*
00001DB0                          1479  * OP_LSL: decode and display LSL
00001DB0                          1480  *---------------------------------------------------------------------------*             
00001DB0  E599                    1481  OP_LSL      ROL.L   #2,D1
00001DB2  0281 00000003           1482              ANDI.L  #$3,D1
00001DB8  0C01 0000               1483              CMPI.B  #0,D1
00001DBC  6700 0016               1484              BEQ     OP_LSL_B
00001DC0  0C01 0001               1485              CMPI.B  #$1,D1
00001DC4  6700 0032               1486              BEQ     OP_LSL_W
00001DC8  0C01 0002               1487              CMPI.B  #$2,D1
00001DCC  6700 0018               1488              BEQ     OP_LSL_L
00001DD0                          1489              
00001DD0  4EF8 1472               1490              JMP OP_DATA
00001DD4                          1491  
00001DD4  43F9 000032A7           1492  OP_LSL_B    LEA     DISP_LSL_B,A1
00001DDA  103C 000E               1493              MOVE.B  #14,D0
00001DDE  4E4F                    1494              TRAP    #15
00001DE0  183C 0000               1495              MOVE.B  #0,D4
00001DE4  4E75                    1496              RTS
00001DE6                          1497  
00001DE6  43F9 000032CB           1498  OP_LSL_L    LEA     DISP_LSL_L,A1
00001DEC  103C 000E               1499              MOVE.B  #14,D0
00001DF0  4E4F                    1500              TRAP    #15
00001DF2  183C 0002               1501              MOVE.B  #2,D4
00001DF6  4E75                    1502              RTS
00001DF8                          1503  
00001DF8  43F9 000032B9           1504  OP_LSL_W    LEA     DISP_LSL_W,A1
00001DFE  103C 000E               1505              MOVE.B  #14,D0
00001E02  4E4F                    1506              TRAP    #15
00001E04  183C 0001               1507              MOVE.B  #1,D4
00001E08  4E75                    1508              RTS
00001E0A                          1509   
00001E0A                          1510  *---------------------------------------------------------------------------*
00001E0A                          1511  * OP_ASR: decode and display ASR
00001E0A                          1512  *---------------------------------------------------------------------------*             
00001E0A  E599                    1513  OP_ASR      ROL.L   #2,D1
00001E0C  0281 00000003           1514              ANDI.L  #$3,D1
00001E12  0C01 0000               1515              CMPI.B  #0,D1
00001E16  6700 0016               1516              BEQ     OP_ASR_B
00001E1A  0C01 0001               1517              CMPI.B  #$1,D1
00001E1E  6700 0032               1518              BEQ     OP_ASR_W
00001E22  0C01 0002               1519              CMPI.B  #$2,D1
00001E26  6700 0018               1520              BEQ     OP_ASR_L
00001E2A                          1521              
00001E2A  4EF8 1472               1522              JMP OP_DATA
00001E2E                          1523  
00001E2E  43F9 000032D4           1524  OP_ASR_B    LEA     DISP_ASR_B,A1
00001E34  103C 000E               1525              MOVE.B  #14,D0
00001E38  4E4F                    1526              TRAP    #15
00001E3A  183C 0000               1527              MOVE.B  #0,D4
00001E3E  4E75                    1528              RTS
00001E40                          1529  
00001E40  43F9 000032F8           1530  OP_ASR_L    LEA     DISP_ASR_L,A1
00001E46  103C 000E               1531              MOVE.B  #14,D0
00001E4A  4E4F                    1532              TRAP    #15
00001E4C  183C 0002               1533              MOVE.B  #2,D4
00001E50  4E75                    1534              RTS
00001E52                          1535  
00001E52  43F9 000032E6           1536  OP_ASR_W    LEA     DISP_ASR_W,A1
00001E58  103C 000E               1537              MOVE.B  #14,D0
00001E5C  4E4F                    1538              TRAP    #15
00001E5E  183C 0001               1539              MOVE.B  #1,D4
00001E62  4E75                    1540              RTS
00001E64                          1541       
00001E64                          1542  *---------------------------------------------------------------------------*
00001E64                          1543  * OP_ASL: decode and display ASL
00001E64                          1544  *---------------------------------------------------------------------------*         
00001E64  E599                    1545  OP_ASL      ROL.L   #2,D1
00001E66  0281 00000003           1546              ANDI.L  #$3,D1
00001E6C  0C01 0000               1547              CMPI.B  #0,D1
00001E70  6700 0016               1548              BEQ     OP_ASL_B
00001E74  0C01 0001               1549              CMPI.B  #$1,D1
00001E78  6700 0032               1550              BEQ     OP_ASL_W
00001E7C  0C01 0002               1551              CMPI.B  #$2,D1
00001E80  6700 0018               1552              BEQ     OP_ASL_L
00001E84                          1553              
00001E84  4EF8 1472               1554              JMP OP_DATA
00001E88                          1555  
00001E88  43F9 000032DD           1556  OP_ASL_B    LEA     DISP_ASL_B,A1
00001E8E  103C 000E               1557              MOVE.B  #14,D0
00001E92  4E4F                    1558              TRAP    #15
00001E94  183C 0000               1559              MOVE.B  #0,D4
00001E98  4E75                    1560              RTS
00001E9A                          1561  
00001E9A  43F9 00003301           1562  OP_ASL_L    LEA     DISP_ASL_L,A1
00001EA0  103C 000E               1563              MOVE.B  #14,D0
00001EA4  4E4F                    1564              TRAP    #15
00001EA6  183C 0002               1565              MOVE.B  #2,D4
00001EAA  4E75                    1566              RTS
00001EAC                          1567  
00001EAC  43F9 000032EF           1568  OP_ASL_W    LEA     DISP_ASL_W,A1
00001EB2  103C 000E               1569              MOVE.B  #14,D0
00001EB6  4E4F                    1570              TRAP    #15
00001EB8  183C 0001               1571              MOVE.B  #1,D4
00001EBC  4E75                    1572              RTS
00001EBE                          1573   
00001EBE                          1574  *---------------------------------------------------------------------------*
00001EBE                          1575  * OP_ROR: decode and display ROR
00001EBE                          1576  *---------------------------------------------------------------------------*             
00001EBE  E599                    1577  OP_ROR      ROL.L   #2,D1
00001EC0  0281 00000003           1578              ANDI.L  #$3,D1
00001EC6  0C01 0000               1579              CMPI.B  #0,D1
00001ECA  6700 0016               1580              BEQ     OP_ROR_B
00001ECE  0C01 0001               1581              CMPI.B  #$1,D1
00001ED2  6700 0032               1582              BEQ     OP_ROR_W
00001ED6  0C01 0002               1583              CMPI.B  #$2,D1
00001EDA  6700 0018               1584              BEQ     OP_ROR_L
00001EDE                          1585              
00001EDE  4EF8 1472               1586              JMP OP_DATA
00001EE2                          1587  
00001EE2  43F9 0000330A           1588  OP_ROR_B    LEA     DISP_ROR_B,A1
00001EE8  103C 000E               1589              MOVE.B  #14,D0
00001EEC  4E4F                    1590              TRAP    #15
00001EEE  183C 0000               1591              MOVE.B  #0,D4
00001EF2  4E75                    1592              RTS
00001EF4                          1593  
00001EF4  43F9 0000332E           1594  OP_ROR_L    LEA     DISP_ROR_L,A1
00001EFA  103C 000E               1595              MOVE.B  #14,D0
00001EFE  4E4F                    1596              TRAP    #15
00001F00  183C 0002               1597              MOVE.B  #2,D4
00001F04  4E75                    1598              RTS
00001F06                          1599  
00001F06  43F9 0000331C           1600  OP_ROR_W    LEA     DISP_ROR_W,A1
00001F0C  103C 000E               1601              MOVE.B  #14,D0
00001F10  4E4F                    1602              TRAP    #15
00001F12  183C 0001               1603              MOVE.B  #1,D4
00001F16  4E75                    1604              RTS
00001F18                          1605  
00001F18                          1606  *---------------------------------------------------------------------------*
00001F18                          1607  * OP_ROL: decode and display ROL
00001F18                          1608  *---------------------------------------------------------------------------*             
00001F18  E599                    1609  OP_ROL      ROL.L   #2,D1
00001F1A  0281 00000003           1610              ANDI.L  #$3,D1
00001F20  0C01 0000               1611              CMPI.B  #0,D1
00001F24  6700 0016               1612              BEQ     OP_ROL_B
00001F28  0C01 0001               1613              CMPI.B  #$1,D1
00001F2C  6700 0032               1614              BEQ     OP_ROL_W
00001F30  0C01 0002               1615              CMPI.B  #$2,D1
00001F34  6700 0018               1616              BEQ     OP_ROL_L
00001F38                          1617              
00001F38  4EF8 1472               1618              JMP OP_DATA
00001F3C                          1619  
00001F3C                          1620  
00001F3C  43F9 00003313           1621  OP_ROL_B    LEA     DISP_ROL_B,A1
00001F42  103C 000E               1622              MOVE.B  #14,D0
00001F46  4E4F                    1623              TRAP    #15
00001F48  183C 0000               1624              MOVE.B  #0,D4
00001F4C  4E75                    1625              RTS
00001F4E                          1626  
00001F4E  43F9 00003337           1627  OP_ROL_L    LEA     DISP_ROL_L,A1
00001F54  103C 000E               1628              MOVE.B  #14,D0
00001F58  4E4F                    1629              TRAP    #15
00001F5A  183C 0002               1630              MOVE.B  #2,D4
00001F5E  4E75                    1631              RTS
00001F60                          1632  
00001F60  43F9 00003325           1633  OP_ROL_W    LEA     DISP_ROL_W,A1
00001F66  103C 000E               1634              MOVE.B  #14,D0
00001F6A  4E4F                    1635              TRAP    #15
00001F6C  183C 0001               1636              MOVE.B  #1,D4
00001F70  4E75                    1637              RTS
00001F72                          1638              
00001F72                          1639  *---------------------------------------------------------------------------*
00001F72                          1640  * OP1111 : Special reserved
00001F72                          1641  *---------------------------------------------------------------------------*           
00001F72  4EF8 1472               1642  OP1111      JMP     OP_DATA
00001F76                          1643  
00001F76                          1644  *---------------------------------------------------------------------------*
00001F76                          1645  * EA_NOSRC: decode and display effective addresses for NEG/JSR
00001F76                          1646  *---------------------------------------------------------------------------*
00001F76                          1647  EA_NOSRC    
00001F76  4EB9 00002034           1648              JSR     SRC_MODE
00001F7C  43F9 00003004           1649              LEA     ENDLINE_M,A1
00001F82  103C 000E               1650              MOVE.B  #14,D0
00001F86  4E4F                    1651              TRAP    #15
00001F88  4E75                    1652              RTS
00001F8A                          1653              
00001F8A                          1654  *---------------------------------------------------------------------------*
00001F8A                          1655  * EA_ARITH: decode and display effective addresses for DIVS/MULS
00001F8A                          1656  *---------------------------------------------------------------------------*
00001F8A                          1657  EA_ARITH
00001F8A  4EB9 00002034           1658              JSR     SRC_MODE
00001F90  43F9 0000337E           1659              LEA     DISP_D,A1
00001F96  103C 000E               1660              MOVE.B  #14,D0
00001F9A  4E4F                    1661              TRAP    #15
00001F9C  4EB9 000022C0           1662              JSR     DEST_REGISTER
00001FA2  43F9 00003004           1663              LEA     ENDLINE_M,A1
00001FA8  103C 000E               1664              MOVE.B  #14,D0
00001FAC  4E4F                    1665              TRAP    #15
00001FAE  4E75                    1666              RTS
00001FB0                          1667              
00001FB0                          1668  *---------------------------------------------------------------------------*
00001FB0                          1669  * EA_MOVEA: decode and display effective addresses for MOVEA/LEA
00001FB0                          1670  *---------------------------------------------------------------------------*
00001FB0                          1671  EA_MOVEA
00001FB0  4EB9 00002034           1672              JSR     SRC_MODE
00001FB6  43F9 0000338F           1673              LEA     DISP_AOP,A1
00001FBC  103C 000E               1674              MOVE.B  #14,D0
00001FC0  4E4F                    1675              TRAP    #15
00001FC2  4EB9 000022C0           1676              JSR     DEST_REGISTER
00001FC8  43F9 0000338D           1677              LEA     DISP_CP,A1
00001FCE  103C 000D               1678              MOVE.B  #13,D0
00001FD2  4E4F                    1679              TRAP    #15
00001FD4  4E75                    1680              RTS
00001FD6                          1681              
00001FD6                          1682  *---------------------------------------------------------------------------*
00001FD6                          1683  * EA_GEN: decode and display effective addresses for MOVE
00001FD6                          1684  *---------------------------------------------------------------------------*
00001FD6                          1685  EA_GEN          
00001FD6                          1686              * retrieve/display source mode/register
00001FD6  4EB9 00002034           1687              JSR     SRC_MODE
00001FDC                          1688              
00001FDC                          1689              * retrieve/display destination mode/register
00001FDC  4EB9 00001FF0           1690              JSR     DEST_MODE
00001FE2                          1691              
00001FE2  43F9 00003004           1692              LEA     ENDLINE_M,A1
00001FE8  103C 000E               1693              MOVE.B  #14,D0
00001FEC  4E4F                    1694              TRAP    #15
00001FEE                          1695              
00001FEE  4E75                    1696              RTS
00001FF0                          1697  
00001FF0                          1698  *---------------------------------------------------------------------------*
00001FF0                          1699  * DEST_MODE: decode and display destination mode (bit 8 - 6)
00001FF0                          1700  *---------------------------------------------------------------------------*           
00001FF0                          1701  DEST_MODE   
00001FF0                          1702              * clear registers to store temp data
00001FF0  4280                    1703              CLR.L   D0                      
00001FF2  4281                    1704              CLR.L   D1                      
00001FF4  207C 00000000           1705              MOVEA.L #0, A0                  
00001FFA  227C 00000000           1706              MOVEA.L #0, A1                  
00002000  2205                    1707              MOVE.L  D5,D1
00002002  EC89                    1708              LSR.L   #6,D1
00002004  0281 00000007           1709              ANDI.L  #$7,D1
0000200A  0C01 0000               1710              CMPI.B  #0,D1   * Dn
0000200E  6700 0082               1711              BEQ     D_MODE000
00002012  0C01 0002               1712              CMPI.B  #2,D1   * (An)
00002016  6700 00C2               1713              BEQ     D_MODE010
0000201A  0C01 0003               1714              CMPI.B  #3,D1   * (An)+
0000201E  6700 011A               1715              BEQ     D_MODE011
00002022  0C01 0004               1716              CMPI.B  #4,D1   * -(An)
00002026  6700 0132               1717              BEQ     D_MODE100
0000202A  0C01 0007               1718              CMPI.B  #7,D1  * abs
0000202E  6700 017C               1719              BEQ     D_MODE111 
00002032  4E75                    1720              RTS
00002034                          1721  
00002034                          1722  *---------------------------------------------------------------------------*
00002034                          1723  * SRC_MODE: decode and display source mode (bit 5 - 3)
00002034                          1724  *---------------------------------------------------------------------------*  
00002034                          1725  SRC_MODE    
00002034                          1726              * clear registers to store temp data
00002034  4280                    1727              CLR.L   D0                      
00002036  4281                    1728              CLR.L   D1                      
00002038  207C 00000000           1729              MOVEA.L #0, A0                  
0000203E  227C 00000000           1730              MOVEA.L #0, A1                  
00002044  2205                    1731              MOVE.L  D5,D1
00002046  E489                    1732              LSR.L   #2,D1
00002048  0281 0000000E           1733              ANDI.L  #$E,D1
0000204E                          1734              
0000204E  0C01 0000               1735              CMPI.B  #0,D1   * Dn
00002052  6700 002A               1736              BEQ     MODE000
00002056  0C01 0002               1737              CMPI.B  #2,D1   * An 
0000205A  6700 004A               1738              BEQ     MODE001
0000205E  0C01 0004               1739              CMPI.B  #4,D1   * (An)
00002062  6700 0056               1740              BEQ     MODE010
00002066  0C01 0006               1741              CMPI.B  #6,D1   * (An)+
0000206A  6700 008E               1742              BEQ     MODE011
0000206E  0C01 0008               1743              CMPI.B  #8,D1   * -(An)
00002072  6700 00A6               1744              BEQ     MODE100
00002076  0C01 000F               1745              CMPI.B  #15,D1  * abs/immediate
0000207A  6700 00FE               1746              BEQ     MODE111 
0000207E                          1747        
0000207E                          1748  *---------------------------------------------------------------------------*
0000207E                          1749  * MODE000: decode and display source mode Dn
0000207E                          1750  *---------------------------------------------------------------------------*           
0000207E                          1751  MODE000     *Dn
0000207E  43F9 0000337E           1752              LEA     DISP_D,A1
00002084  103C 000E               1753              MOVE.B  #14,D0
00002088  4E4F                    1754              TRAP    #15
0000208A  4EB9 0000231C           1755              JSR     SRC_REGISTER
00002090  4E75                    1756              RTS
00002092                          1757  
00002092                          1758  *---------------------------------------------------------------------------*
00002092                          1759  * D_MODE000: decode and display dest mode Dn
00002092                          1760  *---------------------------------------------------------------------------*
00002092                          1761  D_MODE000     *Dn
00002092  43F9 0000337E           1762              LEA     DISP_D,A1
00002098  103C 000E               1763              MOVE.B  #14,D0
0000209C  4E4F                    1764              TRAP    #15
0000209E  4EB9 000022C0           1765              JSR     DEST_REGISTER
000020A4  4E75                    1766              RTS
000020A6                          1767  
000020A6                          1768  *---------------------------------------------------------------------------*
000020A6                          1769  * MODE001: decode and display source mode An
000020A6                          1770  *---------------------------------------------------------------------------* 
000020A6                          1771  MODE001 *An
000020A6  43F9 00003383           1772              LEA     DISP_A,A1
000020AC  103C 000E               1773              MOVE.B  #14,D0
000020B0  4E4F                    1774              TRAP    #15
000020B2  4EB9 0000231C           1775              JSR     SRC_REGISTER
000020B8                          1776          
000020B8  4E75                    1777              RTS
000020BA                          1778  
000020BA                          1779  *---------------------------------------------------------------------------*
000020BA                          1780  * MODE010: decode and display source mode (An)
000020BA                          1781  *---------------------------------------------------------------------------*    
000020BA                          1782  MODE010 *(An)
000020BA  43F9 0000338F           1783              LEA     DISP_AOP,A1  *display (A
000020C0  103C 000E               1784              MOVE.B  #14,D0
000020C4  4E4F                    1785              TRAP    #15
000020C6                          1786  
000020C6  4EB9 0000231C           1787              JSR     SRC_REGISTER * display register
000020CC                          1788  
000020CC  43F9 0000338D           1789              LEA     DISP_CP,A1   *display )
000020D2  103C 000E               1790              MOVE.B  #14,D0
000020D6  4E4F                    1791              TRAP    #15
000020D8                          1792              
000020D8  4E75                    1793              RTS
000020DA                          1794  
000020DA                          1795  *---------------------------------------------------------------------------*
000020DA                          1796  * D_MODE010: decode and display dest mode (An)
000020DA                          1797  *---------------------------------------------------------------------------*
000020DA                          1798  D_MODE010 *(An)
000020DA  43F9 0000338F           1799              LEA     DISP_AOP,A1  *display (A
000020E0  103C 000E               1800              MOVE.B  #14,D0
000020E4  4E4F                    1801              TRAP    #15
000020E6                          1802     
000020E6  4EB9 000022C0           1803              JSR     DEST_REGISTER * display register
000020EC                          1804  
000020EC  43F9 0000338D           1805              LEA     DISP_CP,A1   *display )
000020F2  103C 000E               1806              MOVE.B  #14,D0
000020F6  4E4F                    1807              TRAP    #15
000020F8                          1808              
000020F8  4E75                    1809              RTS
000020FA                          1810  
000020FA                          1811  *---------------------------------------------------------------------------*
000020FA                          1812  * MODE011: decode and display source mode (An)+
000020FA                          1813  *---------------------------------------------------------------------------*
000020FA                          1814  MODE011 *(An)+
000020FA  43F9 0000338F           1815              LEA     DISP_AOP,A1      *display (A
00002100  103C 000E               1816              MOVE.B  #14,D0
00002104  4E4F                    1817              TRAP    #15
00002106                          1818              
00002106  4EB9 0000231C           1819              JSR     SRC_REGISTER    * display register
0000210C                          1820  
0000210C  43F9 0000339C           1821              LEA     DISP_POST,A1    *display )+
00002112  103C 000E               1822              MOVE.B  #14,D0
00002116  4E4F                    1823              TRAP    #15
00002118                          1824              
00002118  4E75                    1825              RTS
0000211A                          1826              
0000211A                          1827  *---------------------------------------------------------------------------*
0000211A                          1828  * MODE100: decode and display source mode -(An)
0000211A                          1829  *---------------------------------------------------------------------------*
0000211A                          1830  MODE100 *-(An)
0000211A  43F9 00003395           1831              LEA     DISP_PRE,A1    *display -(A
00002120  103C 000E               1832              MOVE.B  #14,D0
00002124  4E4F                    1833              TRAP    #15
00002126                          1834  
00002126  4EB9 0000231C           1835              JSR     SRC_REGISTER    *display register
0000212C                          1836  
0000212C  43F9 0000338D           1837              LEA     DISP_CP,A1   *display )
00002132  103C 000E               1838              MOVE.B  #14,D0
00002136  4E4F                    1839              TRAP    #15
00002138                          1840              
00002138  4E75                    1841              RTS
0000213A                          1842  
0000213A                          1843  *---------------------------------------------------------------------------*
0000213A                          1844  * D_MODE011: decode and display dest mode (An)+
0000213A                          1845  *---------------------------------------------------------------------------*
0000213A                          1846  D_MODE011 *(An)+
0000213A  43F9 0000338F           1847              LEA     DISP_AOP,A1      *display (A
00002140  103C 000E               1848              MOVE.B  #14,D0
00002144  4E4F                    1849              TRAP    #15
00002146                          1850  
00002146  4EB9 000022C0           1851              JSR     DEST_REGISTER    * display register
0000214C                          1852  
0000214C  43F9 0000339C           1853              LEA     DISP_POST,A1    *display )+
00002152  103C 000E               1854              MOVE.B  #14,D0
00002156  4E4F                    1855              TRAP    #15
00002158                          1856              
00002158  4E75                    1857              RTS
0000215A                          1858              
0000215A                          1859  *---------------------------------------------------------------------------*
0000215A                          1860  * D_MODE100: decode and display dest mode -(An)
0000215A                          1861  *---------------------------------------------------------------------------*            
0000215A                          1862  D_MODE100 *-(An)
0000215A  43F9 00003395           1863              LEA     DISP_PRE,A1    *display -(A
00002160  103C 000E               1864              MOVE.B  #14,D0
00002164  4E4F                    1865              TRAP    #15
00002166                          1866              
00002166  4EB9 000022C0           1867              JSR     DEST_REGISTER    *display register
0000216C                          1868  
0000216C  43F9 0000338D           1869              LEA     DISP_CP,A1   *display )
00002172  103C 000E               1870              MOVE.B  #14,D0
00002176  4E4F                    1871              TRAP    #15
00002178                          1872              
00002178  4E75                    1873              RTS
0000217A                          1874  
0000217A                          1875  *---------------------------------------------------------------------------*
0000217A                          1876  * MODE111: decode and display source mode absolute/immediate
0000217A                          1877  *---------------------------------------------------------------------------*
0000217A                          1878  MODE111     * abs/immediate
0000217A                          1879              * clear registers to store temp data
0000217A  4280                    1880              CLR.L   D0                      
0000217C  4281                    1881              CLR.L   D1                      
0000217E  207C 00000000           1882              MOVEA.L #0, A0                  
00002184  227C 00000000           1883              MOVEA.L #0, A1                  
0000218A  2205                    1884              MOVE.L  D5,D1
0000218C                          1885              
0000218C                          1886              * retrieve source register for MODE 111
0000218C  E389                    1887              LSL.L   #1,D1   * shift the bits to left by 1
0000218E  0281 0000000E           1888              ANDI.L  #$E,D1  * mask the first 4 bits 
00002194  0C01 0000               1889              CMPI.B  #0, D1  * if it's 0000, absolute word address
00002198  6700 003E               1890              BEQ     WORDMODE
0000219C  0C01 0002               1891              CMPI.B  #2, D1  * if it's 0010, absolute long address
000021A0  6700 0062               1892              BEQ     LONGMODE
000021A4  0C01 0008               1893              CMPI.B  #8, D1  * if it's 1000, immediate data
000021A8  6700 0086               1894              BEQ     IMMEDIATE
000021AC                          1895       
000021AC                          1896  *---------------------------------------------------------------------------*
000021AC                          1897  * D_MODE111: decode and display dest mode absolute/immediate
000021AC                          1898  *---------------------------------------------------------------------------*           
000021AC                          1899  D_MODE111   * abs
000021AC                          1900              * clear registers to store temp data
000021AC  4280                    1901              CLR.L   D0                      
000021AE  4281                    1902              CLR.L   D1                      
000021B0  207C 00000000           1903              MOVEA.L #0, A0                  
000021B6  227C 00000000           1904              MOVEA.L #0, A1                  
000021BC  2205                    1905              MOVE.L  D5,D1
000021BE                          1906              
000021BE                          1907              * retrieve dest register for MODE 111
000021BE  EC89                    1908              LSR.L   #6,D1   * shift the bits to right by 6
000021C0  E689                    1909              LSR.L   #3,D1   * shift the bits to right by extra 3
000021C2  0201 0001               1910              ANDI.B  #1,D1   * mask the first 2 bits 
000021C6  0C01 0000               1911              CMPI.B  #0, D1  * if it's 000, absolute word address
000021CA  6700 000C               1912              BEQ     WORDMODE
000021CE  0C01 0001               1913              CMPI.B  #1, D1  * if it's 001, absolute long address
000021D2  6700 0030               1914              BEQ     LONGMODE
000021D6                          1915              *JSR     OP_DATA *not sure..
000021D6  4E75                    1916              RTS
000021D8                          1917  
000021D8                          1918  
000021D8                          1919  *---------------------------------------------------------------------------*
000021D8                          1920  * WORDMODE: absolute word address
000021D8                          1921  *---------------------------------------------------------------------------*
000021D8  43F9 00003379           1922  WORDMODE    LEA     DISP_HEX,A1
000021DE  103C 000E               1923              MOVE.B  #14,D0
000021E2  4E4F                    1924              TRAP    #15
000021E4                          1925              
000021E4  4285                    1926              CLR.L   D5
000021E6  3A1D                    1927              MOVE.W  (A5)+,D5
000021E8                          1928              
000021E8  43F9 00003057           1929              LEA     TMPOUTPUT,A1
000021EE  2205                    1930              MOVE.L  D5,D1
000021F0  7404                    1931              MOVE.L  #4,D2       *move word size 4
000021F2  4EB8 11B6               1932              JSR     HEX2ASCII
000021F6  43F9 00003057           1933              LEA     TMPOUTPUT,A1
000021FC  103C 000E               1934              MOVE.B  #14,D0
00002200  4E4F                    1935              TRAP    #15
00002202                          1936              
00002202  4E75                    1937              RTS
00002204                          1938  
00002204                          1939  *---------------------------------------------------------------------------*
00002204                          1940  * LONGMODE: absolute long address
00002204                          1941  *---------------------------------------------------------------------------*
00002204  43F9 00003379           1942  LONGMODE    LEA     DISP_HEX,A1
0000220A  103C 000E               1943              MOVE.B  #14,D0
0000220E  4E4F                    1944              TRAP    #15
00002210                          1945              
00002210  4285                    1946              CLR.L   D5
00002212  2A1D                    1947              MOVE.L  (A5)+,D5
00002214                          1948              
00002214  43F9 00003057           1949              LEA     TMPOUTPUT,A1
0000221A  2205                    1950              MOVE.L  D5,D1
0000221C  7408                    1951              MOVE.L  #8,D2           *move longword size 8
0000221E  4EB8 11B6               1952              JSR     HEX2ASCII
00002222  43F9 00003057           1953              LEA     TMPOUTPUT,A1
00002228  103C 000E               1954              MOVE.B  #14,D0
0000222C  4E4F                    1955              TRAP    #15
0000222E                          1956              
0000222E  4E75                    1957              RTS
00002230                          1958  
00002230                          1959  
00002230                          1960  *---------------------------------------------------------------------------*
00002230                          1961  * IMMEDIATE: immediate address
00002230                          1962  *---------------------------------------------------------------------------*
00002230  43F9 0000339F           1963  IMMEDIATE   LEA     DISP_LB,A1
00002236  103C 000E               1964              MOVE.B  #14,D0
0000223A  4E4F                    1965              TRAP    #15
0000223C  43F9 00003379           1966              LEA     DISP_HEX,A1
00002242  103C 000E               1967              MOVE.B  #14,D0
00002246  4E4F                    1968              TRAP    #15
00002248                          1969              
00002248                          1970              * check for size
00002248  0C04 0000               1971              CMPI.B  #0,D4
0000224C  6700 0012               1972              BEQ     IMMD_B
00002250  0C04 0001               1973              CMPI.B  #1,D4
00002254  6700 002A               1974              BEQ     IMMD_W
00002258  0C04 0002               1975              CMPI.B  #2,D4
0000225C  6700 0042               1976              BEQ     IMMD_L
00002260                          1977  
00002260                          1978  IMMD_B
00002260  4285                    1979              CLR.L   D5
00002262  3A1D                    1980              MOVE.W  (A5)+,D5
00002264                          1981              
00002264  43F9 00003057           1982              LEA     TMPOUTPUT,A1
0000226A  2205                    1983              MOVE.L  D5,D1
0000226C  7402                    1984              MOVE.L  #2,D2
0000226E  4EB8 11B6               1985              JSR     HEX2ASCII
00002272  43F9 00003057           1986              LEA     TMPOUTPUT,A1
00002278  103C 000E               1987              MOVE.B  #14,D0
0000227C  4E4F                    1988              TRAP    #15
0000227E  4E75                    1989              RTS
00002280                          1990              
00002280                          1991  IMMD_W
00002280  4285                    1992              CLR.L   D5
00002282  3A1D                    1993              MOVE.W  (A5)+,D5
00002284                          1994              
00002284  43F9 00003057           1995              LEA     TMPOUTPUT,A1
0000228A  2205                    1996              MOVE.L  D5,D1
0000228C  7404                    1997              MOVE.L  #4,D2
0000228E  4EB8 11B6               1998              JSR     HEX2ASCII
00002292  43F9 00003057           1999              LEA     TMPOUTPUT,A1
00002298  103C 000E               2000              MOVE.B  #14,D0
0000229C  4E4F                    2001              TRAP    #15
0000229E  4E75                    2002              RTS
000022A0                          2003              
000022A0                          2004  
000022A0                          2005  IMMD_L
000022A0  4285                    2006              CLR.L   D5
000022A2  3A1D                    2007              MOVE.W  (A5)+,D5
000022A4                          2008              
000022A4  43F9 00003057           2009              LEA     TMPOUTPUT,A1
000022AA  2205                    2010              MOVE.L  D5,D1
000022AC  7408                    2011              MOVE.L  #8,D2
000022AE  4EB8 11B6               2012              JSR     HEX2ASCII
000022B2  43F9 00003057           2013              LEA     TMPOUTPUT,A1
000022B8  103C 000E               2014              MOVE.B  #14,D0
000022BC  4E4F                    2015              TRAP    #15
000022BE  4E75                    2016              RTS
000022C0                          2017  
000022C0                          2018  
000022C0                          2019  *---------------------------------------------------------------------------*
000022C0                          2020  * DEST_REGISTER: decode and display destination register (bit 11 - 9)
000022C0                          2021  *---------------------------------------------------------------------------*
000022C0                          2022  DEST_REGISTER
000022C0                          2023              * clear registers to store temp data
000022C0  4280                    2024              CLR.L   D0                      
000022C2  4281                    2025              CLR.L   D1                      
000022C4  207C 00000000           2026              MOVEA.L #0, A0                  
000022CA  227C 00000000           2027              MOVEA.L #0, A1 
000022D0                          2028              
000022D0  2205                    2029              MOVE.L  D5,D1
000022D2  EC89                    2030              LSR.L   #6,D1
000022D4  E689                    2031              LSR.L   #3,D1
000022D6  0281 00000007           2032              ANDI.L  #7,D1
000022DC                          2033              
000022DC  0C01 0000               2034              CMPI.B  #0,D1
000022E0  6700 0092               2035              BEQ     REG_0
000022E4  0C01 0001               2036              CMPI.B  #1,D1
000022E8  6700 0098               2037              BEQ     REG_1
000022EC  0C01 0002               2038              CMPI.B  #2,D1
000022F0  6700 009E               2039              BEQ     REG_2
000022F4  0C01 0003               2040              CMPI.B  #3,D1
000022F8  6700 00A4               2041              BEQ     REG_3
000022FC  0C01 0004               2042              CMPI.B  #4,D1
00002300  6700 00AA               2043              BEQ     REG_4
00002304  0C01 0005               2044              CMPI.B  #5,D1
00002308  6700 00B0               2045              BEQ     REG_5
0000230C  0C01 0006               2046              CMPI.B  #6,D1
00002310  6700 00B6               2047              BEQ     REG_6
00002314  0C01 0007               2048              CMPI.B  #7,D1
00002318  6700 00BC               2049              BEQ     REG_7
0000231C                          2050  
0000231C                          2051  *---------------------------------------------------------------------------*
0000231C                          2052  * SRC_REGISTER: decode and display source register (bit 2 - 0)
0000231C                          2053  *---------------------------------------------------------------------------*           
0000231C                          2054  SRC_REGISTER 
0000231C                          2055              * clear registers to store temp data
0000231C  4280                    2056              CLR.L   D0                      
0000231E  4281                    2057              CLR.L   D1                      
00002320  207C 00000000           2058              MOVEA.L #0, A0                  
00002326  227C 00000000           2059              MOVEA.L #0, A1                  
0000232C                          2060              
0000232C  2205                    2061              MOVE.L  D5,D1   * temp store the processing data
0000232E  0281 00000007           2062              ANDI.L  #7,D1   * mask the first 4 bits with 0111
00002334                          2063              
00002334  0C01 0000               2064              CMPI.B  #0,D1
00002338  6700 003A               2065              BEQ     REG_0
0000233C  0C01 0001               2066              CMPI.B  #1,D1
00002340  6700 0040               2067              BEQ     REG_1
00002344  0C01 0002               2068              CMPI.B  #2,D1
00002348  6700 0046               2069              BEQ     REG_2
0000234C  0C01 0003               2070              CMPI.B  #3,D1
00002350  6700 004C               2071              BEQ     REG_3
00002354  0C01 0004               2072              CMPI.B  #4,D1
00002358  6700 0052               2073              BEQ     REG_4
0000235C  0C01 0005               2074              CMPI.B  #5,D1
00002360  6700 0058               2075              BEQ     REG_5
00002364  0C01 0006               2076              CMPI.B  #6,D1
00002368  6700 005E               2077              BEQ     REG_6
0000236C  0C01 0007               2078              CMPI.B  #7,D1
00002370  6700 0064               2079              BEQ     REG_7
00002374                          2080  
00002374                          2081  *---------------------------------------------------------------------------*
00002374                          2082  * REG_0 ~ REG_7: display register 0 to 7
00002374                          2083  *---------------------------------------------------------------------------*
00002374  43F9 000033A4           2084  REG_0       LEA     DISP_0,A1
0000237A  103C 000E               2085              MOVE.B  #14,D0
0000237E  4E4F                    2086              TRAP    #15
00002380  4E75                    2087              RTS
00002382                          2088              
00002382  43F9 000033A6           2089  REG_1       LEA     DISP_1,A1
00002388  103C 000E               2090              MOVE.B  #14,D0
0000238C  4E4F                    2091              TRAP    #15
0000238E  4E75                    2092              RTS
00002390                          2093              
00002390                          2094  
00002390  43F9 000033A8           2095  REG_2       LEA     DISP_2,A1
00002396  103C 000E               2096              MOVE.B  #14,D0
0000239A  4E4F                    2097              TRAP    #15
0000239C  4E75                    2098              RTS
0000239E                          2099            
0000239E  43F9 000033AA           2100  REG_3       LEA     DISP_3,A1
000023A4  103C 000E               2101              MOVE.B  #14,D0
000023A8  4E4F                    2102              TRAP    #15
000023AA  4E75                    2103              RTS
000023AC                          2104              
000023AC  43F9 000033AC           2105  REG_4       LEA     DISP_4,A1
000023B2  103C 000E               2106              MOVE.B  #14,D0
000023B6  4E4F                    2107              TRAP    #15
000023B8  4E75                    2108              RTS
000023BA                          2109              
000023BA  43F9 000033AE           2110  REG_5       LEA     DISP_5,A1
000023C0  103C 000E               2111              MOVE.B  #14,D0
000023C4  4E4F                    2112              TRAP    #15
000023C6  4E75                    2113              RTS
000023C8                          2114              
000023C8  43F9 000033B0           2115  REG_6       LEA     DISP_6,A1
000023CE  103C 000E               2116              MOVE.B  #14,D0
000023D2  4E4F                    2117              TRAP    #15
000023D4  4E75                    2118              RTS
000023D6                          2119              
000023D6  43F9 000033B2           2120  REG_7       LEA     DISP_7,A1
000023DC  103C 000E               2121              MOVE.B  #14,D0
000023E0  4E4F                    2122              TRAP    #15
000023E2  4E75                    2123              RTS
000023E4                          2124              
000023E4                          2125  *---------------------------------------------------------------------------*
000023E4                          2126  * REPEAT : Ask user whether they wish to run the program again
000023E4                          2127  *---------------------------------------------------------------------------*           
000023E4  4246                    2128  REPEAT      CLR.W   D6                      * Reset D6 (Loop Count)
000023E6  43F9 00002E7D           2129              LEA     REPEATMSG,A1
000023EC  103C 000E               2130              MOVE.B  #14,D0
000023F0  4E4F                    2131              TRAP    #15
000023F2                          2132              
000023F2  43F9 00003007           2133              LEA     TMPINPUT,A1             * allocate space to temp store user input
000023F8  103C 0002               2134              MOVE.B  #2,D0
000023FC  4E4F                    2135              TRAP    #15
000023FE                          2136  
000023FE  0C01 0001               2137              CMPI.B  #1,D1                   * check for length of user input
00002402  66E0                    2138              BNE     REPEAT                  * return to the beginning of the function if unequal
00002404                          2139              
00002404  0C11 0059               2140              CMPI.B  #$59,(A1)               * compare the input with Y    
00002408  6700 EC00               2141              BEQ     PROGLP                  * repeat the program
0000240C                          2142              
0000240C  0C11 0079               2143              CMPI.B  #$79,(A1)               * compare the input with y    
00002410  6700 EBF8               2144              BEQ     PROGLP                  * repeat the program
00002414                          2145              
00002414  0C11 004E               2146              CMPI.B  #$4E,(A1)               * compare the input with N    
00002418  6700 06F6               2147              BEQ     TERMINATE               * finish program
0000241C                          2148              
0000241C  0C11 006E               2149              CMPI.B  #$6E,(A1)               * compare the input with n    
00002420  6700 06EE               2150              BEQ     TERMINATE               * finish program
00002424                          2151              
00002424  60BE                    2152              BRA     REPEAT                  * invalid input/repeat the function
00002426                          2153  
00002426                          2154  *---------------------------------------------------------------------------*
00002426                          2155  * EA DECODING INTERFACE
00002426                          2156  * [A0] - RESERVED FOR USE
00002426                          2157  * [D2] - RESERVED FOR USE
00002426                          2158  * RETURNS - ERROR FLAG IF FAILED TO PUSH SRC EA INTO STACK
00002426                          2159  *---------------------------------------------------------------------------*
00002426                          2160  GET_EA_EA_SRC
00002426                          2161      *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
00002426                          2162      
00002426                          2163      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
00002426  2405                    2164      MOVE.L  D5,D2                           * CLEAN COPY TO D2
00002428  E68A                    2165      LSR.L   #3,D2                           * [D2] Temporarily used D2 for shifting bits
0000242A  23C2 000033CA           2166      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
00002430  7407                    2167      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
00002432  C5B9 000033CA           2168      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
00002438                          2169                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
00002438                          2170      
00002438                          2171      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
00002438                          2172      *DESTINATION REGISTER FORMAT STANDARD         *
00002438                          2173      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
00002438                          2174      *WHEN BIT = 0(VALID ADDRESS MODE)             *
00002438                          2175      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
00002438                          2176      *0 - Dn                                       *
00002438                          2177      *1 - An                                       *
00002438                          2178      *2 - (An)                                     *
00002438                          2179      *3 - (An)+                                    *
00002438                          2180      *4 - -(An)                                    *
00002438                          2181      *5 - (XXX).W                                  *
00002438                          2182      *6 - (XXX).L                                  *
00002438                          2183      *7 - #<data>                                  *
00002438                          2184      ***********************************************
00002438                          2185      
00002438                          2186      *** Check if source ...  <ea> = Dn
00002438                          2187  CHECK0    
00002438  41F9 000033BA           2188            LEA     TEMP_REGISTER_FORMAT,A0
0000243E  1439 000033B9           2189            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002444  1082                    2190            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002446  0239 0001 000033BA      2191            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
0000244E  0C39 0001 000033BA      2192            CMP.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
00002456  6700 0068               2193            BEQ     CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
0000245A  0C79 0000 000033CA      2194            CMP     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn)
00002462  6600 005C               2195            BNE     CHECK1
00002466                          2196            
00002466                          2197            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002466  163C 0020               2198            MOVE.B    #' ',D3
0000246A  6100 0626               2199            BSR       PUSH_STACK
0000246E  163C 0044               2200            MOVE.B    #'D',D3
00002472  6100 061E               2201            BSR       PUSH_STACK
00002476                          2202  
00002476                          2203            *FIND REGISTER NUMBER END LOCATION*  
00002476  13F9 000033BC 000033C2  2204            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002480  0239 000F 000033C2      2205            AND.B   #$0F,VAR_BYTE_END
00002488                          2206            
00002488                          2207            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002488  23C5 000033C6           2208            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
0000248E  1439 000033C2           2209            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002494                          2210            
00002494                          2211            *INTITIALIZE FOR BIT SHIFTING
00002494  41F9 000033C6           2212            LEA     VAR_TEMP_CLEANCOPY,A0
0000249A  2639 000033C6           2213            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000024A0                          2214  LOOP_SHIFTING
000024A0  B43C 0000               2215            CMP.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000024A4  6700 0008               2216            BEQ     MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
000024A8  E24B                    2217            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000024AA  5302                    2218            SUB.B   #1,D2                     *DECREMENT COUNTER
000024AC  60F2                    2219            BRA     LOOP_SHIFTING             *CONTINUE SHIFTING
000024AE                          2220  MASKING_NEXT
000024AE  C6BC 00000007           2221            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000024B4  0603 0030               2222            ADD.B   #$30,D3                   *CONVERT TO CHAR
000024B8  6100 05D8               2223            BSR     PUSH_STACK                *PUSH TO STACK
000024BC                          2224            
000024BC  6000 027C               2225            BRA     GET_SRC_SUCCESS           *RETURN          
000024C0                          2226            
000024C0                          2227            
000024C0                          2228            *** Check if source ...  <ea> = An
000024C0  41F9 000033BA           2229  CHECK1    LEA     TEMP_REGISTER_FORMAT,A0
000024C6  1439 000033B9           2230            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000024CC  1082                    2231            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000024CE  0239 0002 000033BA      2232            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
000024D6  0C39 0002 000033BA      2233            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
000024DE  6700 0068               2234            BEQ     CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
000024E2  0C79 0000 000033CA      2235            CMP     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * An
000024EA  6600 005C               2236            BNE     CHECK2
000024EE                          2237            
000024EE                          2238            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000024EE  163C 0020               2239            MOVE.B    #' ',D3
000024F2  6100 059E               2240            BSR       PUSH_STACK
000024F6  163C 0041               2241            MOVE.B    #'A',D3
000024FA  6100 0596               2242            BSR       PUSH_STACK
000024FE                          2243  
000024FE                          2244            
000024FE                          2245            *FIND REGISTER NUMBER END LOCATION*  
000024FE  13F9 000033BC 000033C2  2246            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002508  0239 000F 000033C2      2247            AND.B   #$0F,VAR_BYTE_END
00002510                          2248            
00002510                          2249            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002510  23C5 000033C6           2250            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002516  1439 000033C2           2251            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
0000251C                          2252            
0000251C                          2253            *INTITIALIZE FOR BIT SHIFTING
0000251C  41F9 000033C6           2254            LEA     VAR_TEMP_CLEANCOPY,A0
00002522  2639 000033C6           2255            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002528                          2256  LOOP_SHIFTING1
00002528  B43C 0000               2257            CMP.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000252C  6700 0008               2258            BEQ     MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00002530  E24B                    2259            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002532  5302                    2260            SUB.B   #1,D2                     *DECREMENT COUNTER
00002534  60F2                    2261            BRA     LOOP_SHIFTING1             *CONTINUE SHIFTING
00002536                          2262  MASKING_NEXT1
00002536  C6BC 00000007           2263            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
0000253C  0603 0030               2264            ADD.B   #$30,D3                   *CONVERT TO CHAR
00002540  6100 0550               2265            BSR     PUSH_STACK                *PUSH TO STACK
00002544                          2266            
00002544  6000 01F4               2267            BRA     GET_SRC_SUCCESS                   *RETURN 
00002548                          2268            
00002548                          2269            
00002548                          2270            
00002548                          2271            
00002548                          2272            *** Check if source ...  <ea> = (An)       
00002548  41F9 000033BA           2273  CHECK2    LEA     TEMP_REGISTER_FORMAT,A0
0000254E  1439 000033B9           2274            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002554  1082                    2275            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002556  0239 0004 000033BA      2276            AND.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       *change <SRC>*
0000255E  0C39 0004 000033BA      2277            CMP.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       *change <SRC>*
00002566  6700 0078               2278            BEQ     CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
0000256A  0C79 0000 000033CA      2279            CMP     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * An                                                                  *change: checkx++*
00002572  6600 006C               2280            BNE     CHECK3
00002576                          2281            
00002576                          2282            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002576  163C 0020               2283            MOVE.B    #' ',D3
0000257A  6100 0516               2284            BSR       PUSH_STACK
0000257E  163C 0028               2285            MOVE.B    #'(',D3
00002582  6100 050E               2286            BSR       PUSH_STACK
00002586  163C 0041               2287            MOVE.B    #'A',D3
0000258A  6100 0506               2288            BSR       PUSH_STACK
0000258E                          2289  
0000258E                          2290            
0000258E                          2291            *FIND REGISTER NUMBER END LOCATION*  
0000258E  13F9 000033BC 000033C2  2292            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002598  0239 000F 000033C2      2293            AND.B   #$0F,VAR_BYTE_END
000025A0                          2294            
000025A0                          2295            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000025A0  23C5 000033C6           2296            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000025A6  1439 000033C2           2297            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000025AC                          2298            
000025AC                          2299            *INTITIALIZE FOR BIT SHIFTING
000025AC  41F9 000033C6           2300            LEA     VAR_TEMP_CLEANCOPY,A0
000025B2  2639 000033C6           2301            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000025B8                          2302  LOOP_SHIFTING2                                                                                              *change: NAME OF LABEL*
000025B8  B43C 0000               2303            CMP.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000025BC  6700 0008               2304            BEQ     MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
000025C0  E24B                    2305            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000025C2  5302                    2306            SUB.B   #1,D2                     *DECREMENT COUNTER
000025C4  60F2                    2307            BRA     LOOP_SHIFTING2            *CONTINUE SHIFTING                                              *change: NAME OF LABEL*
000025C6                          2308  MASKING_NEXT2                                                                                               *change: NAME OF LABEL*
000025C6  C6BC 00000007           2309            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000025CC  0603 0030               2310            ADD.B   #$30,D3                   *CONVERT TO CHAR
000025D0  6100 04C0               2311            BSR     PUSH_STACK                *PUSH TO STACK
000025D4                          2312            
000025D4  163C 0029               2313            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
000025D8  6100 04B8               2314            BSR       PUSH_STACK
000025DC                          2315            
000025DC  6000 015C               2316            BRA     GET_SRC_SUCCESS                   *RETURN 
000025E0                          2317  
000025E0                          2318            
000025E0                          2319            
000025E0                          2320                      
000025E0                          2321  *** Check if source ...  <ea> = (An)+       
000025E0  41F9 000033BA           2322  CHECK3    LEA     TEMP_REGISTER_FORMAT,A0
000025E6  1439 000033B9           2323            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000025EC  1082                    2324            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000025EE  0239 0008 000033BA      2325            AND.B   #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
000025F6  0C39 0008 000033BA      2326            CMP.B   #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
000025FE  6700 0080               2327            BEQ     CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
00002602  0C79 0000 000033CA      2328            CMP     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * An                                                                  *change: checkx++*
0000260A  6600 0074               2329            BNE     CHECK4
0000260E                          2330            
0000260E                          2331            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
0000260E  163C 0020               2332            MOVE.B    #' ',D3
00002612  6100 047E               2333            BSR       PUSH_STACK
00002616  163C 0028               2334            MOVE.B    #'(',D3
0000261A  6100 0476               2335            BSR       PUSH_STACK
0000261E  163C 0041               2336            MOVE.B    #'A',D3
00002622  6100 046E               2337            BSR       PUSH_STACK
00002626                          2338  
00002626                          2339            
00002626                          2340            *FIND REGISTER NUMBER END LOCATION*  
00002626  13F9 000033BC 000033C2  2341            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
00002630  0239 000F 000033C2      2342            AND.B   #$0F,VAR_BYTE_END
00002638                          2343            
00002638                          2344            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002638  23C5 000033C6           2345            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
0000263E  1439 000033C2           2346            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002644                          2347            
00002644                          2348            *INTITIALIZE FOR BIT SHIFTING
00002644  41F9 000033C6           2349            LEA     VAR_TEMP_CLEANCOPY,A0
0000264A  2639 000033C6           2350            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002650                          2351            
00002650                          2352  LOOP_SHIFTING3                                                                                              *change: NAME OF LABEL*
00002650  B43C 0000               2353            CMP.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002654  6700 0008               2354            BEQ     MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002658  E24B                    2355            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
0000265A  5302                    2356            SUB.B   #1,D2                     *DECREMENT COUNTER
0000265C  60F2                    2357            BRA     LOOP_SHIFTING3            *CONTINUE SHIFTING 
0000265E                          2358                                               *change: NAME OF LABEL*
0000265E                          2359  MASKING_NEXT3                                                                                               *change: NAME OF LABEL*
0000265E  C6BC 00000007           2360            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002664  0603 0030               2361            ADD.B   #$30,D3                   *CONVERT TO CHAR
00002668  6100 0428               2362            BSR     PUSH_STACK                *PUSH TO STACK
0000266C                          2363            
0000266C  163C 0029               2364            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002670  6100 0420               2365            BSR       PUSH_STACK
00002674  163C 002B               2366            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002678  6100 0418               2367            BSR       PUSH_STACK
0000267C                          2368            
0000267C  6000 00BC               2369            BRA       GET_SRC_SUCCESS                   *RETURN 
00002680                          2370  
00002680                          2371            
00002680                          2372            
00002680                          2373                      
00002680                          2374            *** Check if source ...  <ea> = -(An)       
00002680  41F9 000033BA           2375  CHECK4    LEA     TEMP_REGISTER_FORMAT,A0
00002686  1439 000033B9           2376            MOVE.B  SRC_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000268C  1082                    2377            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000268E  0239 0010 000033BA      2378            AND.B   #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
00002696  0C39 0010 000033BA      2379            CMP.B   #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
0000269E  6700 0080               2380            BEQ     CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
000026A2  0C79 0000 000033CA      2381            CMP     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * An                                                                  *change: checkx++*
000026AA  6600 0074               2382            BNE     CHECK7
000026AE                          2383            
000026AE                          2384            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
000026AE  163C 0020               2385            MOVE.B    #' ',D3
000026B2  6100 03DE               2386            BSR       PUSH_STACK
000026B6  163C 002D               2387            MOVE.B    #'-',D3
000026BA  6100 03D6               2388            BSR       PUSH_STACK
000026BE  163C 0028               2389            MOVE.B    #'(',D3
000026C2  6100 03CE               2390            BSR       PUSH_STACK
000026C6  163C 0041               2391            MOVE.B    #'A',D3
000026CA  6100 03C6               2392            BSR       PUSH_STACK
000026CE                          2393  
000026CE                          2394            
000026CE                          2395            *FIND REGISTER NUMBER END LOCATION*  
000026CE  13F9 000033BC 000033C2  2396            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
000026D8  0239 000F 000033C2      2397            AND.B   #$0F,VAR_BYTE_END
000026E0                          2398            
000026E0                          2399            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000026E0  23C5 000033C6           2400            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000026E6  1439 000033C2           2401            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000026EC                          2402            
000026EC                          2403            *INTITIALIZE FOR BIT SHIFTING
000026EC  41F9 000033C6           2404            LEA     VAR_TEMP_CLEANCOPY,A0
000026F2  2639 000033C6           2405            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000026F8                          2406            
000026F8                          2407  LOOP_SHIFTING4                                                                                              *change: NAME OF LABEL*
000026F8  B43C 0000               2408            CMP.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000026FC  6700 0008               2409            BEQ     MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        *change: NAME OF LABEL*
00002700  E24B                    2410            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002702  5302                    2411            SUB.B   #1,D2                     *DECREMENT COUNTER
00002704  60F2                    2412            BRA     LOOP_SHIFTING4            *CONTINUE SHIFTING 
00002706                          2413                                               *change: NAME OF LABEL*
00002706                          2414  MASKING_NEXT4                                                                                               *change: NAME OF LABEL*
00002706  C6BC 00000007           2415            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
0000270C  0603 0030               2416            ADD.B   #$30,D3                   *CONVERT TO CHAR
00002710  6100 0380               2417            BSR     PUSH_STACK                *PUSH TO STACK
00002714                          2418            
00002714  163C 0029               2419            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002718  6100 0378               2420            BSR       PUSH_STACK
0000271C                          2421            
0000271C  6000 001C               2422            BRA     GET_SRC_SUCCESS                   *RETURN
00002720                          2423            
00002720                          2424                      
00002720                          2425            *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
00002720  0C79 0007 000033CA      2426  CHECK7    CMP     #7,VAR_LONG_ADDRESS_MODE_CHECK               * (Dn)
00002728  6600 000C               2427            BNE     GET_SRC_FAILED
0000272C                          2428            
0000272C                          2429            *JUST DISPLAYS ADDRESS MODE 111 FOR TESTING PURPOSE
0000272C  7637                    2430            MOVE.L  #'7',D3
0000272E  6100 0362               2431            BSR     PUSH_STACK          
00002732                          2432        
00002732                          2433         *   MOVE.B  DEST_REGISTER_FORMAT, TEMP_REGISTER_FORMAT * COPY FORMAT TO TEMP VARIABLE
00002732                          2434         *   AND.B   #$E0,TEMP_REGISTER_FORMAT                           * MASKS 11100000
00002732                          2435         *   CMP.B   #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT >= 11100000) THAN INVALID ADDRESSMODE 
00002732                          2436         *   BEQ     FAILED                                            * THE REGISTER FORMAT DOES NOT ALLOW "-(An)" -> SO MOVE ON
00002732                          2437            
00002732                          2438         *   MOVE.B  DEST_REGISTER_FORMAT, TEMP_REGISTER_FORMAT * COPY FORMAT TO TEMP VARIABLE
00002732                          2439         *   AND.B   #$E0,TEMP_REGISTER_FORMAT                           * MASKS 11100000
00002732                          2440         *   CMP.B   #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT >= 11100000) THAN INVALID ADDRESSMODE 
00002732                          2441          *  BEQ     FAILED                                            * THE REGISTER FORMAT DOES NOT ALLOW "-(An)" -> SO MOVE ON
00002732                          2442            
00002732                          2443            *MOVE.B  DEST_REGISTER_FORMAT, TEMP_REGISTER_FORMAT * COPY FORMAT TO TEMP VARIABLE
00002732                          2444           * AND.B   #$E0,TEMP_REGISTER_FORMAT                           * MASKS 11100000
00002732                          2445          *  CMP.B   #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT >= 11100000) THAN INVALID ADDRESSMODE 
00002732                          2446           * BEQ     FAILED                                            * THE REGISTER FORMAT DOES NOT ALLOW "-(An)" -> SO MOVE ON
00002732                          2447            
00002732                          2448  CHECK_WORD
00002732                          2449  CHECK_LONG
00002732                          2450  CHECK_IMMEDIATE
00002732                          2451            
00002732                          2452            *EA_EA_GET_SRC INTO D3
00002732  6000 0006               2453            BRA     GET_SRC_SUCCESS
00002736                          2454            
00002736                          2455  GET_SRC_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
00002736  7801                    2456            MOVE.L #1,D4
00002738  4E75                    2457            RTS
0000273A                          2458  GET_SRC_SUCCESS 
0000273A  4E75                    2459            RTS
0000273C                          2460                                 
0000273C                          2461      
0000273C                          2462  
0000273C                          2463  
0000273C                          2464  
0000273C                          2465  
0000273C                          2466  
0000273C                          2467  
0000273C                          2468  
0000273C                          2469  
0000273C                          2470              
0000273C                          2471  GET_EA_EA_DEST                                                  *======================GET_EA_EA_DEST==========================*
0000273C                          2472  *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
0000273C                          2473      
0000273C                          2474      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
0000273C  2405                    2475      MOVE.L  D5,D2                           * CLEAN COPY TO D2
0000273E  E68A                    2476      LSR.L   #3,D2                           * [D2] Temporarily used D2 for shifting bits
00002740  23C2 000033CA           2477      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
00002746  7407                    2478      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
00002748  C5B9 000033CA           2479      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
0000274E                          2480                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
0000274E                          2481      
0000274E                          2482      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
0000274E                          2483      *DESTINATION REGISTER FORMAT STANDARD         *
0000274E                          2484      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
0000274E                          2485      *WHEN BIT = 0(VALID ADDRESS MODE)             *
0000274E                          2486      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
0000274E                          2487      *0 - Dn                                       *
0000274E                          2488      *1 - An                                       *
0000274E                          2489      *2 - (An)                                     *
0000274E                          2490      *3 - (An)+                                    *
0000274E                          2491      *4 - -(An)                                    *
0000274E                          2492      *5 - (XXX).W                                  *
0000274E                          2493      *6 - (XXX).L                                  *
0000274E                          2494      *7 - #<data>                                  *
0000274E                          2495      ***********************************************
0000274E                          2496      
0000274E                          2497      *** Check if source ...  <ea> = Dn
0000274E                          2498  DEST_CHECK0    
0000274E  41F9 000033BA           2499            LEA     TEMP_REGISTER_FORMAT,A0
00002754  1439 000033B8           2500            MOVE.B  DEST_REGISTER_FORMAT, D2                            * COPY FORMAT TO TEMP VARIABLE
0000275A  1082                    2501            MOVE.B  D2, (A0)                                            * COPY FORMAT TO TEMP VARIABLE
0000275C  0239 0001 000033BA      2502            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 0000 0001 
00002764  0C39 0001 000033BA      2503            CMP.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
0000276C  6700 006A               2504            BEQ     DEST_CHECK1                                              * SINCE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00002770  0C79 0000 000033CA      2505            CMP     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn)
00002778  6600 005E               2506            BNE     DEST_CHECK1
0000277C                          2507            
0000277C                          2508            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
0000277C  163C 0020               2509            MOVE.B    #' ',D3
00002780  6100 0310               2510            BSR       PUSH_STACK
00002784  163C 0044               2511            MOVE.B    #'D',D3
00002788  6100 0308               2512            BSR       PUSH_STACK
0000278C                          2513  
0000278C                          2514            *FIND REGISTER NUMBER END LOCATION*  
0000278C  13F9 000033BB 000033C2  2515            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002796  0239 000F 000033C2      2516            AND.B   #$0F,VAR_BYTE_END
0000279E                          2517            
0000279E                          2518            *GET INDEX OF THE END OF SRC REGISTER NUMBER
0000279E  23C5 000033C6           2519            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000027A4  1439 000033C2           2520            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000027AA                          2521            
000027AA                          2522            *INTITIALIZE FOR BIT SHIFTING
000027AA  41F9 000033C6           2523            LEA     VAR_TEMP_CLEANCOPY,A0
000027B0  2639 000033C6           2524            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000027B6                          2525  DEST_LOOP_SHIFTING
000027B6  B43C 0000               2526            CMP.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000027BA  6700 FCF2               2527            BEQ     MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
000027BE  E24B                    2528            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000027C0  5302                    2529            SUB.B   #1,D2                     *DECREMENT COUNTER
000027C2  6000 FCDC               2530            BRA     LOOP_SHIFTING             *CONTINUE SHIFTING
000027C6                          2531  DEST_MASKING_NEXT
000027C6  C6BC 00000007           2532            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000027CC  0603 0030               2533            ADD.B   #$30,D3                   *CONVERT TO CHAR
000027D0  6100 02C0               2534            BSR     PUSH_STACK                *PUSH TO STACK
000027D4                          2535            
000027D4  6000 027C               2536            BRA     GET_DEST_SUCCESS           *RETURN          
000027D8                          2537            
000027D8                          2538            
000027D8                          2539            *** Check if source ...  <ea> = An
000027D8                          2540  DEST_CHECK1    
000027D8  41F9 000033BA           2541            LEA     TEMP_REGISTER_FORMAT,A0
000027DE  1439 000033B8           2542            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000027E4  1082                    2543            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000027E6  0239 0002 000033BA      2544            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 0000 0010 
000027EE  0C39 0002 000033BA      2545            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
000027F6  6700 0068               2546            BEQ     DEST_CHECK2                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
000027FA  0C79 0000 000033CA      2547            CMP     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * An
00002802  6600 005C               2548            BNE     DEST_CHECK2
00002806                          2549            
00002806                          2550            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002806  163C 0020               2551            MOVE.B    #' ',D3
0000280A  6100 0286               2552            BSR       PUSH_STACK
0000280E  163C 0041               2553            MOVE.B    #'A',D3
00002812  6100 027E               2554            BSR       PUSH_STACK
00002816                          2555  
00002816                          2556            
00002816                          2557            *FIND REGISTER NUMBER END LOCATION*  
00002816  13F9 000033BB 000033C2  2558            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002820  0239 000F 000033C2      2559            AND.B   #$0F,VAR_BYTE_END
00002828                          2560            
00002828                          2561            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002828  23C5 000033C6           2562            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
0000282E  1439 000033C2           2563            MOVE.B  VAR_BYTE_END,D2           *PUT END LOCATION INTO D2
00002834                          2564            
00002834                          2565            *INTITIALIZE FOR BIT SHIFTING
00002834  41F9 000033C6           2566            LEA     VAR_TEMP_CLEANCOPY,A0
0000283A  2639 000033C6           2567            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002840                          2568  DEST_LOOP_SHIFTING1
00002840  B43C 0000               2569            CMP.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002844  6700 0008               2570            BEQ     DEST_MASKING_NEXT1              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00002848  E24B                    2571            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
0000284A  5302                    2572            SUB.B   #1,D2                     *DECREMENT COUNTER
0000284C  60F2                    2573            BRA     DEST_LOOP_SHIFTING1             *CONTINUE SHIFTING
0000284E                          2574  DEST_MASKING_NEXT1
0000284E  C6BC 00000007           2575            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002854  0603 0030               2576            ADD.B   #$30,D3                   *CONVERT TO CHAR
00002858  6100 0238               2577            BSR     PUSH_STACK                *PUSH TO STACK
0000285C                          2578            
0000285C  6000 01F4               2579            BRA     GET_DEST_SUCCESS                   *RETURN 
00002860                          2580            
00002860                          2581            
00002860                          2582            
00002860                          2583            
00002860                          2584            *** Check if source ...  <ea> = (An)       
00002860                          2585  DEST_CHECK2    
00002860  41F9 000033BA           2586            LEA     TEMP_REGISTER_FORMAT,A0
00002866  1439 000033B8           2587            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
0000286C  1082                    2588            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
0000286E  0239 0004 000033BA      2589            AND.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 0000 0100                                                       
00002876  0C39 0004 000033BA      2590            CMP.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE       
0000287E  6700 0078               2591            BEQ     DEST_CHECK3                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON            
00002882  0C79 0000 000033CA      2592            CMP     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * An                                                                
0000288A  6600 006C               2593            BNE     DEST_CHECK3
0000288E                          2594            
0000288E                          2595            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
0000288E  163C 0020               2596            MOVE.B    #' ',D3
00002892  6100 01FE               2597            BSR       PUSH_STACK
00002896  163C 0028               2598            MOVE.B    #'(',D3
0000289A  6100 01F6               2599            BSR       PUSH_STACK
0000289E  163C 0041               2600            MOVE.B    #'A',D3
000028A2  6100 01EE               2601            BSR       PUSH_STACK
000028A6                          2602  
000028A6                          2603            
000028A6                          2604            *FIND REGISTER NUMBER END LOCATION*  
000028A6  13F9 000033BB 000033C2  2605            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
000028B0  0239 000F 000033C2      2606            AND.B   #$0F,VAR_BYTE_END
000028B8                          2607            
000028B8                          2608            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000028B8  23C5 000033C6           2609            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000028BE  1439 000033C2           2610            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
000028C4                          2611            
000028C4                          2612            *INTITIALIZE FOR BIT SHIFTING
000028C4  41F9 000033C6           2613            LEA     VAR_TEMP_CLEANCOPY,A0
000028CA  2639 000033C6           2614            MOVE.L  VAR_TEMP_CLEANCOPY,D3
000028D0                          2615  DEST_LOOP_SHIFTING2                                                                                              
000028D0  B43C 0000               2616            CMP.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
000028D4  6700 0008               2617            BEQ     DEST_MASKING_NEXT2             *IF SHIFTING FINISHED MOVE ON TO MASKING                        
000028D8  E24B                    2618            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
000028DA  5302                    2619            SUB.B   #1,D2                     *DECREMENT COUNTER
000028DC  60F2                    2620            BRA     DEST_LOOP_SHIFTING2            *CONTINUE SHIFTING                                              
000028DE                          2621  DEST_MASKING_NEXT2                                                                                               
000028DE  C6BC 00000007           2622            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000028E4  0603 0030               2623            ADD.B   #$30,D3                   *CONVERT TO CHAR
000028E8  6100 01A8               2624            BSR     PUSH_STACK                *PUSH TO STACK
000028EC                          2625            
000028EC  163C 0029               2626            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
000028F0  6100 01A0               2627            BSR       PUSH_STACK
000028F4                          2628            
000028F4  6000 015C               2629            BRA     GET_DEST_SUCCESS                   *RETURN 
000028F8                          2630  
000028F8                          2631            
000028F8                          2632            
000028F8                          2633                      
000028F8                          2634  *** Check if source ...  <ea> = (An)+       
000028F8                          2635  DEST_CHECK3    
000028F8  41F9 000033BA           2636            LEA     TEMP_REGISTER_FORMAT,A0
000028FE  1439 000033B8           2637            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
00002904  1082                    2638            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
00002906  0239 0008 000033BA      2639            AND.B   #$08,TEMP_REGISTER_FORMAT                           * MASKS 0000 1000                                                     *change <SRC>*
0000290E  0C39 0008 000033BA      2640            CMP.B   #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE       *change <SRC>*
00002916  6700 0080               2641            BEQ     DEST_CHECK4                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
0000291A  0C79 0000 000033CA      2642            CMP     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * An                                                                  *change: checkx++*
00002922  6600 0074               2643            BNE     DEST_CHECK4
00002926                          2644            
00002926                          2645            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            *change CHARS TO PUSH*
00002926  163C 0020               2646            MOVE.B    #' ',D3
0000292A  6100 0166               2647            BSR       PUSH_STACK
0000292E  163C 0028               2648            MOVE.B    #'(',D3
00002932  6100 015E               2649            BSR       PUSH_STACK
00002936  163C 0041               2650            MOVE.B    #'A',D3
0000293A  6100 0156               2651            BSR       PUSH_STACK
0000293E                          2652  
0000293E                          2653            
0000293E                          2654            *FIND REGISTER NUMBER END LOCATION*  
0000293E  13F9 000033BB 000033C2  2655            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
00002948  0239 000F 000033C2      2656            AND.B   #$0F,VAR_BYTE_END
00002950                          2657            
00002950                          2658            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002950  23C5 000033C6           2659            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
00002956  1439 000033C2           2660            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
0000295C                          2661            
0000295C                          2662            *INTITIALIZE FOR BIT SHIFTING
0000295C  41F9 000033C6           2663            LEA     VAR_TEMP_CLEANCOPY,A0
00002962  2639 000033C6           2664            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002968                          2665            
00002968                          2666  DEST_LOOP_SHIFTING3                                                                                            
00002968  B43C 0000               2667            CMP.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
0000296C  6700 0008               2668            BEQ     DEST_MASKING_NEXT3             *IF SHIFTING FINISHED MOVE ON TO MASKING                        
00002970  E24B                    2669            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002972  5302                    2670            SUB.B   #1,D2                     *DECREMENT COUNTER
00002974  60F2                    2671            BRA     DEST_LOOP_SHIFTING3            *CONTINUE SHIFTING 
00002976                          2672                                               *change: NAME OF LABEL*
00002976                          2673  DEST_MASKING_NEXT3                                                                                            
00002976  C6BC 00000007           2674            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
0000297C  0603 0030               2675            ADD.B   #$30,D3                   *CONVERT TO CHAR
00002980  6100 0110               2676            BSR     PUSH_STACK                *PUSH TO STACK
00002984                          2677            
00002984  163C 0029               2678            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002988  6100 0108               2679            BSR       PUSH_STACK
0000298C  163C 002B               2680            MOVE.B    #'+',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002990  6100 0100               2681            BSR       PUSH_STACK
00002994                          2682            
00002994  6000 00BC               2683            BRA       GET_DEST_SUCCESS                   *RETURN 
00002998                          2684  
00002998                          2685            
00002998                          2686            
00002998                          2687                      
00002998                          2688            *** Check if source ...  <ea> = -(An)       
00002998  41F9 000033BA           2689  DEST_CHECK4    LEA     TEMP_REGISTER_FORMAT,A0
0000299E  1439 000033B8           2690            MOVE.B  DEST_REGISTER_FORMAT, D2                             *COPY FORMAT TO TEMP VARIABLE
000029A4  1082                    2691            MOVE.B  D2, (A0)                                            *COPY FORMAT TO TEMP VARIABLE
000029A6  0239 0010 000033BA      2692            AND.B   #$10,TEMP_REGISTER_FORMAT                           * MASKS 0001 0000                                                     *change <SRC>*
000029AE  0C39 0010 000033BA      2693            CMP.B   #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 0001 0000) THAN INVALID ADDRESSMODE       *change <SRC>*
000029B6  6700 FD68               2694            BEQ     CHECK7                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON               *change: checkx++*
000029BA  0C79 0000 000033CA      2695            CMP     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * An                                                                  *change: checkx++*
000029C2  6600 FD5C               2696            BNE     CHECK7
000029C6                          2697            
000029C6                          2698            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"                                            
000029C6  163C 0020               2699            MOVE.B    #' ',D3
000029CA  6100 00C6               2700            BSR       PUSH_STACK
000029CE  163C 002D               2701            MOVE.B    #'-',D3
000029D2  6100 00BE               2702            BSR       PUSH_STACK
000029D6  163C 0028               2703            MOVE.B    #'(',D3
000029DA  6100 00B6               2704            BSR       PUSH_STACK
000029DE  163C 0041               2705            MOVE.B    #'A',D3
000029E2  6100 00AE               2706            BSR       PUSH_STACK
000029E6                          2707  
000029E6                          2708            
000029E6                          2709            *FIND REGISTER NUMBER END LOCATION*  
000029E6  13F9 000033BB 000033C2  2710            MOVE.B  GET_DST_START_END, VAR_BYTE_END * GET ENDING INDEX
000029F0  0239 000F 000033C2      2711            AND.B   #$0F,VAR_BYTE_END
000029F8                          2712            
000029F8                          2713            *GET INDEX OF THE END OF SRC REGISTER NUMBER
000029F8  23C5 000033C6           2714            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
000029FE  1439 000033C2           2715            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002A04                          2716            
00002A04                          2717            *INTITIALIZE FOR BIT SHIFTING
00002A04  41F9 000033C6           2718            LEA     VAR_TEMP_CLEANCOPY,A0
00002A0A  2639 000033C6           2719            MOVE.L  VAR_TEMP_CLEANCOPY,D3
00002A10                          2720            
00002A10                          2721  DEST_LOOP_SHIFTING4                                                                                              
00002A10  B43C 0000               2722            CMP.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002A14  6700 0008               2723            BEQ     DEST_MASKING_NEXT4             *IF SHIFTING FINISHED MOVE ON TO MASKING                        
00002A18  E24B                    2724            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002A1A  5302                    2725            SUB.B   #1,D2                     *DECREMENT COUNTER
00002A1C  60F2                    2726            BRA     DEST_LOOP_SHIFTING4            *CONTINUE SHIFTING 
00002A1E                          2727                                               *change: NAME OF LABEL*
00002A1E                          2728  DEST_MASKING_NEXT4                                                                                               
00002A1E  C6BC 00000007           2729            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
00002A24  0603 0030               2730            ADD.B   #$30,D3                   *CONVERT TO CHAR
00002A28  6100 0068               2731            BSR     PUSH_STACK                *PUSH TO STACK
00002A2C                          2732            
00002A2C  163C 0029               2733            MOVE.B    #')',D3                 *FINISH PUSHING LAST ')' INTO STACK
00002A30  6100 0060               2734            BSR       PUSH_STACK
00002A34                          2735            
00002A34  6000 001C               2736            BRA     GET_DEST_SUCCESS                   *RETURN
00002A38                          2737            
00002A38                          2738                      
00002A38                          2739                  
00002A38                          2740  *** Check if source ...  <ea> = (XXX).W or (XXX).L or #<data>
00002A38                          2741  DEST_CHECK7    
00002A38  0C79 0007 000033CA      2742                 CMP     #7,VAR_LONG_ADDRESS_MODE_CHECK               * (Dn)
00002A40  6600 FCF4               2743                 BNE     GET_SRC_FAILED
00002A44                          2744            
00002A44                          2745            *JUST DISPLAYS ADDRESS MODE 111 FOR TESTING PURPOSE
00002A44  7637                    2746            MOVE.L  #'7',D3
00002A46  6100 004A               2747            BSR     PUSH_STACK          
00002A4A                          2748        
00002A4A                          2749         *   MOVE.B  DEST_REGISTER_FORMAT, TEMP_REGISTER_FORMAT * COPY FORMAT TO TEMP VARIABLE
00002A4A                          2750         *   AND.B   #$E0,TEMP_REGISTER_FORMAT                           * MASKS 11100000
00002A4A                          2751         *   CMP.B   #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT >= 11100000) THAN INVALID ADDRESSMODE 
00002A4A                          2752         *   BEQ     FAILED                                            * THE REGISTER FORMAT DOES NOT ALLOW "-(An)" -> SO MOVE ON
00002A4A                          2753            
00002A4A                          2754         *   MOVE.B  DEST_REGISTER_FORMAT, TEMP_REGISTER_FORMAT * COPY FORMAT TO TEMP VARIABLE
00002A4A                          2755         *   AND.B   #$E0,TEMP_REGISTER_FORMAT                           * MASKS 11100000
00002A4A                          2756         *   CMP.B   #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT >= 11100000) THAN INVALID ADDRESSMODE 
00002A4A                          2757          *  BEQ     FAILED                                            * THE REGISTER FORMAT DOES NOT ALLOW "-(An)" -> SO MOVE ON
00002A4A                          2758     
00002A4A                          2759  DEST_CHECK_WORD
00002A4A                          2760  DEST_CHECK_LONG
00002A4A                          2761  DEST_CHECK_IMMEDIATE
00002A4A                          2762            
00002A4A                          2763            *EA_EA_GET_SRC INTO D3
00002A4A  6000 0006               2764            BRA     GET_DEST_SUCCESS
00002A4E                          2765            
00002A4E                          2766  GET_DEST_FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
00002A4E  7801                    2767            MOVE.L #1,D4
00002A50  4E75                    2768            RTS
00002A52                          2769  GET_DEST_SUCCESS 
00002A52  4E75                    2770            RTS
00002A54                          2771            
00002A54                          2772  *---------------------------------------------------------------------------*
00002A54                          2773  * STACK/QUEUE INTERFACE
00002A54                          2774  *---------------------------------------------------------------------------*
00002A54                          2775  PRINT_STACK
00002A54  0C39 0000 000033B4      2776            CMP.B     #0,COUNTER
00002A5C  6700 000E               2777            BEQ       PRINT_STACK_RETURN             *CHECK IF LOOP IS FINISHED
00002A60                          2778            
00002A60                          2779  PRINT_STACK_HELPER
00002A60  6100 0038               2780            BSR      POP_STACK          *PRINTS ADDRESS
00002A64  103C 0006               2781            MOVE.B   #6,D0              *Display single character in D1.B. 
00002A68  4E4F                    2782            TRAP     #15             *ACTIVATES PRINT
00002A6A                          2783  
00002A6A  60E8                    2784            BRA       PRINT_STACK
00002A6C                          2785  PRINT_STACK_RETURN
00002A6C  4E75                    2786            RTS
00002A6E                          2787            
00002A6E                          2788            
00002A6E                          2789  PRINT_QUEUE
00002A6E  0C39 0000 000033B4      2790            CMP.B     #0,COUNTER
00002A76  6700 0018               2791            BEQ       PRINT_QUEUE_RETURN             *CHECK IF LOOP IS FINISHED
00002A7A                          2792            
00002A7A                          2793  PRINT_QUEUE_HELPER
00002A7A  33F9 000033B4 000033B6  2794            MOVE.W   COUNTER,QUEUE_COUNTER
00002A84  6100 0022               2795            BSR      POP_FRONT          *PRINTS ADDRESS
00002A88  103C 0006               2796            MOVE.B   #6,D0              *Display single character in D1.B. 
00002A8C  4E4F                    2797            TRAP     #15             *ACTIVATES PRINT
00002A8E                          2798  
00002A8E  60DE                    2799            BRA       PRINT_QUEUE
00002A90                          2800  PRINT_QUEUE_RETURN
00002A90  4E75                    2801            RTS
00002A92                          2802            
00002A92                          2803  *PUSHES.W CONTENTS OF [D3] INTO STACK          
00002A92                          2804  PUSH_STACK
00002A92  1503                    2805              MOVE.B  D3,-(A2)
00002A94  6100 0058               2806              BSR     INCREMENT
00002A98  4E75                    2807              RTS
00002A9A                          2808  *POPS.W TOP OF STACK INTO [D1], SO ITS READY TO PRINT WITH TRAP 15
00002A9A                          2809  *         MOVE.W   (A2)+,D1           *PRINTS ADDRESS
00002A9A                          2810  *         MOVE.B   #15,D0             *PRINTS ACCORDING TO D2 BASE VALUE
00002A9A                          2811  *         MOVE.B   #16,D2             *PRINTS BASED 16 NUMBER
00002A9A                          2812  *         TRAP        #15             *ACTIVATES PRINT
00002A9A                          2813  POP_STACK
00002A9A  BECA                    2814              CMPA.W   A2,SP            *CHECKS IF THERE IS ANYTHING TO PUSH
00002A9C  6700 0008               2815              BEQ     POP_RETURN        *IF NOTHING TO PUSH THAN JUST RETURN
00002AA0  121A                    2816              MOVE.B  (A2)+,D1 
00002AA2  6100 0052               2817              BSR     DECREMENT
00002AA6                          2818  POP_RETURN
00002AA6  4E75                    2819              RTS 
00002AA8                          2820        
00002AA8                          2821  *USE [A4] AS SECOND POINTER IN SHIFTING      
00002AA8  0C39 0000 000033B6      2822  POP_FRONT   CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
00002AB0  6700 0030               2823              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
00002AB4                          2824              
00002AB4                          2825              
00002AB4                          2826              *POSITION THE POINTERS A[4] RIGHT BEHIND A[2] WHICH IS RIGHT BEHIND STACK
00002AB4  347C 7000               2827              MOVEA.W #STACK,A2   *START A2 AT STACK
00002AB8  0622 0000               2828              ADD.B   #0,-(A2)    *SHIFT A2 TO THE BOTTOM OF THE STACK
00002ABC  384A                    2829              MOVEA.W A2,A4     *START A4 RIGHT ABOVE A2
00002ABE  0624 0000               2830              ADD.B   #0,-(A4)  *leash one more higher in stack (a4)
00002AC2  1212                    2831              MOVE.B  (A2),D1     *POP CONTENTS INTO D1
00002AC4                          2832  POP_SHIFT_LOOP
00002AC4  0C39 0000 000033B6      2833              CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
00002ACC  6700 0014               2834              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
00002AD0  1494                    2835              MOVE.B  (A4),(A2)   *SHIFT CONTENT DOWN THE STACK
00002AD2  0624 0000               2836              ADD.B   #0,-(A4)
00002AD6  0622 0000               2837              ADD.B   #0,-(A2) *SHIFT POINTERS DOWN THE STACK
00002ADA  5339 000033B6           2838              SUB.B   #1,QUEUE_COUNTER *DECREMENT INTERNAL QUEUE COUNTER
00002AE0                          2839              
00002AE0  60E2                    2840              BRA     POP_SHIFT_LOOP
00002AE2                          2841                          
00002AE2                          2842  POP_FRONT_RETURN 
00002AE2                          2843              *RESET A2 BACK TO SP
00002AE2  347C 7000               2844              MOVEA.W #STACK,A2    
00002AE6  5339 000033B4           2845              SUB.B   #1,COUNTER *DECREMENT STACK COUNTER       
00002AEC  4E75                    2846              RTS   
00002AEE                          2847  
00002AEE                          2848  INCREMENT
00002AEE  5239 000033B4           2849              ADD.B   #1, COUNTER
00002AF4  4E75                    2850              RTS           
00002AF6                          2851  DECREMENT
00002AF6  5339 000033B4           2852              SUB.B   #1, COUNTER
00002AFC  4E75                    2853              RTS           
00002AFE                          2854  CLEAR_STACK
00002AFE  0C39 0000 000033B4      2855              CMP.B     #0,COUNTER
00002B06  6700 0006               2856              BEQ       CLEAR_RETURN
00002B0A  618E                    2857              BSR       POP_STACK
00002B0C  60F0                    2858              BRA       CLEAR_STACK
00002B0E                          2859   
00002B0E                          2860  CLEAR_RETURN
00002B0E  4E75                    2861              RTS    
00002B10                          2862  *---------------------------------------------------------------------------*
00002B10                          2863  * TERMINATE
00002B10                          2864  *---------------------------------------------------------------------------*
00002B10                          2865  TERMINATE   
00002B10  43F9 00002EC0           2866              LEA     FINMSG,A1
00002B16  103C 000E               2867              MOVE.B  #14,D0
00002B1A  4E4F                    2868              TRAP    #15
00002B1C                          2869  
00002B1C  103C 0009               2870              MOVE.B  #9,D0
00002B20  4E4F                    2871              TRAP    #15
00002B22                          2872  
00002B22                          2873  *---------------------------------------------------------------------------*
00002B22                          2874  * Data storage                                                 
00002B22                          2875  *---------------------------------------------------------------------------*  
00002B22                          2876  WELCOME
00002B22= 20 20 20 20 20 20 ...   2877              DC.B '                         ___     ___ ___        ___   ___ ___                 ',CR,LF
00002B72= 3D 3D 3D 3D 3D 20 ...   2878              DC.B '=====           \  /\  /|___|   |   |   ||\  /||___    | |   |           =====',CR,LF
00002BC2= 3D 3D 3D 3D 3D 20 ...   2879              DC.B '=====            \/  \/ |___|___|___|___|| \/ ||___    | |___|           =====',CR,LF
00002C12                          2880      
00002C12= 20 20 20 20 20 20 ...   2881              DC.B '                        ___ ___ ___  ___      ___                             ',CR,LF
00002C62= 20 20 20 20 20 20 ...   2882              DC.B '                       |     | |___)|    |   |___                             ',CR,LF 
00002CB2= 20 20 20 20 20 20 ...   2883              DC.B '                       |___ _|_|\___|___ |___|___                             ',CR,LF
00002D02                          2884      
00002D02= 20 20 20 20 20 20 ...   2885              DC.B '           __  ___ ___   _   ___  ___  ___        ___      ___ ___            ',CR,LF
00002D52= 3D 3D 3D 3D 3D 20 ...   2886              DC.B '=====     |  \  | |___  /_\ |___ |___ |___ |\  /||___||   |___|___)      =====',CR,LF 
00002DA2= 3D 3D 3D 3D 3D 20 ...   2887              DC.B '=====     |__/ _|_ ___|/   \ ___| ___||___ | \/ ||___||___|___|\___      =====',CR,LF,CR,LF,CR,LF,0
00002DF7                          2888  
00002DF7                          2889  PROMPT_START
00002DF7= 50 6C 65 61 73 65 ...   2890              DC.B    'Please enter a hexadecimal starting address.',CR,LF,0
00002E26                          2891      
00002E26                          2892  PROMPT_END
00002E26= 50 6C 65 61 73 65 ...   2893              DC.B    'Please enter a hexadecimal ending address.',CR,LF,0
00002E53= 0D 0A 48 69 74 20 ...   2894  DISP_NEXT   DC.B    CR,LF,'Hit Enter to print the next 30 lines.',CR,LF,0            
00002E7D= 57 6F 75 6C 64 20 ...   2895  REPEATMSG   DC.B    'Would you like to run again? Press Y to continue or N to finish.',CR,LF,0
00002EC0= 54 68 61 6E 6B 20 ...   2896  FINMSG      DC.B    'Thank you for using Circle Disassembler.',CR,LF,0
00002EEB= 45 72 72 6F 72 3A ...   2897  ERRMSG_1    DC.B    'Error: Invalid Input Address',CR,LF,0
00002F0A= 45 72 72 6F 72 3A ...   2898  ERRMSG_3    DC.B    'Error: Invalid Input Address (Odd)',CR,LF,0
00002F2F= 45 72 72 6F 72 3A ...   2899  ERRMSG_5    DC.B    'Error: Invalid Input Address (start > end)',CR,LF,0
00002F5C                          2900  
00002F5C                          2901  VR_S_ADDR   DS.B    80                      * allocate storage space for the starting address
00002FAC                          2902  VR_E_ADDR   DS.B    80                      * allocate storage space for the ending address
00002FFC                          2903  S_ADDR_HX   DS.L    1                       * allocate storage space for the starting address in hex
00003000                          2904  E_ADDR_HX   DS.L    1                       * allocate storage space for the ending address in hex
00003004= 0D 0A 00                2905  ENDLINE_M   DC.B    CR,LF,0
00003007                          2906  TMPINPUT    DS.B    80                      * temp store user input
00003057                          2907  TMPOUTPUT   DS.B    80                      * temp store prog output
000030A7= 20 20 20 4F 52 49 ...   2908  DISP_ORI_B  DC.B    '   ORI.B',0
000030B0= 20 20 20 4F 52 49 ...   2909  DISP_ORI_W  DC.B    '   ORI.W',0
000030B9= 20 20 20 4F 52 49 ...   2910  DISP_ORI_L  DC.B    '   ORI.L',0
000030C2= 20 20 20 45 4F 52 ...   2911  DISP_EORI_B  DC.B    '   EORI.B',0
000030CC= 20 20 20 45 4F 52 ...   2912  DISP_EORI_W  DC.B    '   EORI.W',0
000030D6= 20 20 20 45 4F 52 ...   2913  DISP_EORI_L  DC.B    '   EORI.L',0
000030E0= 20 20 20 42 54 53 ...   2914  DISP_BTST   DC.B    '   BTST',0
000030E8= 20 20 20 43 4D 50 ...   2915  DISP_CMPI_B  DC.B    '   CMPI.B',0
000030F2= 20 20 20 43 4D 50 ...   2916  DISP_CMPI_W  DC.B    '   CMPI.W',0
000030FC= 20 20 20 43 4D 50 ...   2917  DISP_CMPI_L  DC.B    '   CMPI.L',0
00003106= 20 20 20 44 41 54 ...   2918  DISP_DATA   DC.B    '   DATA',0
0000310E= 20 20 20 4D 4F 56 ...   2919  DISP_MOVE_B DC.B    '   MOVE.B',0
00003118= 20 20 20 4D 4F 56 ...   2920  DISP_MOVE_W DC.B    '   MOVE.W',0
00003122= 20 20 20 4D 4F 56 ...   2921  DISP_MOVE_L DC.B    '   MOVE.L',0
0000312C= 20 20 20 52 54 53 00    2922  DISP_RTS    DC.B    '   RTS',0
00003133= 20 20 20 4A 53 52 00    2923  DISP_JSR    DC.B    '   JSR',0
0000313A= 20 20 20 4E 45 47 ...   2924  DISP_NEG_B    DC.B    '   NEG.B',0
00003143= 20 20 20 4E 45 47 ...   2925  DISP_NEG_W    DC.B    '   NEG.W',0
0000314C= 20 20 20 4E 45 47 ...   2926  DISP_NEG_L    DC.B    '   NEG.L',0
00003155= 20 20 20 4E 4F 54 ...   2927  DISP_NOT_B  DC.B    '   NOT.B',0
0000315E= 20 20 20 4E 4F 54 ...   2928  DISP_NOT_W  DC.B    '   NOT.W',0
00003167= 20 20 20 4E 4F 54 ...   2929  DISP_NOT_L  DC.B    '   NOT.L',0
00003170= 20 20 20 4C 45 41 00    2930  DISP_LEA    DC.B    '   LEA',0
00003177= 20 20 20 4D 4F 56 ...   2931  DISP_MOVEM_W    DC.B    '   MOVEM.W',0
00003182= 20 20 20 4D 4F 56 ...   2932  DISP_MOVEM_L    DC.B    '   MOVEM.L',0
0000318D= 20 20 20 41 44 44 ...   2933  DISP_ADDQ_B DC.B    '   ADDQ.B',0
00003197= 20 20 20 41 44 44 ...   2934  DISP_ADDQ_W DC.B    '   ADDQ.W',0
000031A1= 20 20 20 41 44 44 ...   2935  DISP_ADDQ_L DC.B    '   ADDQ.L',0
000031AB= 20 20 20 44 49 56 ...   2936  DISP_DIVS   DC.B    '   DIVS',0
000031B3= 20 20 20 53 55 42 ...   2937  DISP_SUB_B  DC.B    '   SUB.B',0
000031BC= 20 20 20 53 55 42 ...   2938  DISP_SUB_W  DC.B    '   SUB.W',0
000031C5= 20 20 20 53 55 42 ...   2939  DISP_SUB_L  DC.B    '   SUB.L',0
000031CE= 20 20 20 53 55 42 ...   2940  DISP_SUBI_B  DC.B    '   SUBI.B',0
000031D8= 20 20 20 53 55 42 ...   2941  DISP_SUBI_W  DC.B    '   SUBI.W',0
000031E2= 20 20 20 53 55 42 ...   2942  DISP_SUBI_L  DC.B    '   SUBI.L',0
000031EC= 20 20 20 53 55 42 ...   2943  DISP_SUBA_W  DC.B    '   SUBA.W',0
000031F6= 20 20 20 53 55 42 ...   2944  DISP_SUBA_L  DC.B    '   SUBA.L',0
00003200= 20 20 20 45 4F 52 ...   2945  DISP_EOR_B  DC.B    '   EOR.B',0
00003209= 20 20 20 45 4F 52 ...   2946  DISP_EOR_W  DC.B    '   EOR.W',0
00003212= 20 20 20 45 4F 52 ...   2947  DISP_EOR_L  DC.B    '   EOR.L',0
0000321B= 20 20 20 43 4D 50 ...   2948  DISP_CMP_B  DC.B    '   CMP.B',0
00003224= 20 20 20 43 4D 50 ...   2949  DISP_CMP_W  DC.B    '   CMP.W',0
0000322D= 20 20 20 43 4D 50 ...   2950  DISP_CMP_L  DC.B    '   CMP.L',0
00003236= 20 20 20 43 4D 50 ...   2951  DISP_CMPA_W  DC.B    '   CMPA.W',0
00003240= 20 20 20 43 4D 50 ...   2952  DISP_CMPA_L  DC.B    '   CMPA.L',0
0000324A= 20 20 20 4D 55 4C ...   2953  DISP_MULS_W DC.B    '   MULS.W',0
00003254= 20 20 20 41 4E 44 ...   2954  DISP_AND_B  DC.B    '   AND.B',0
0000325D= 20 20 20 41 4E 44 ...   2955  DISP_AND_W  DC.B    '   AND.W',0
00003266= 20 20 20 41 4E 44 ...   2956  DISP_AND_L  DC.B    '   AND.L',0
0000326F= 20 20 20 41 44 44 ...   2957  DISP_ADD_B  DC.B    '   ADD.B',0
00003278= 20 20 20 41 44 44 ...   2958  DISP_ADD_W  DC.B    '   ADD.W',0
00003281= 20 20 20 41 44 44 ...   2959  DISP_ADD_L  DC.B    '   ADD.L',0
0000328A= 20 20 20 41 44 44 ...   2960  DISP_ADDA_W DC.B    '   ADDA.W',0
00003294= 20 20 20 41 44 44 ...   2961  DISP_ADDA_L DC.B    '   ADDA.L',0
0000329E= 20 20 20 4C 53 52 ...   2962  DISP_LSR_B  DC.B    '   LSR.B',0
000032A7= 20 20 20 4C 53 4C ...   2963  DISP_LSL_B  DC.B    '   LSL.B',0
000032B0= 20 20 20 4C 53 52 ...   2964  DISP_LSR_W  DC.B    '   LSR.W',0
000032B9= 20 20 20 4C 53 4C ...   2965  DISP_LSL_W  DC.B    '   LSL.W',0
000032C2= 20 20 20 4C 53 52 ...   2966  DISP_LSR_L  DC.B    '   LSR.L',0
000032CB= 20 20 20 4C 53 4C ...   2967  DISP_LSL_L  DC.B    '   LSL.L',0
000032D4= 20 20 20 41 53 52 ...   2968  DISP_ASR_B  DC.B    '   ASR.B',0
000032DD= 20 20 20 41 53 4C ...   2969  DISP_ASL_B  DC.B    '   ASL.B',0
000032E6= 20 20 20 41 53 52 ...   2970  DISP_ASR_W  DC.B    '   ASR.W',0
000032EF= 20 20 20 41 53 4C ...   2971  DISP_ASL_W  DC.B    '   ASL.W',0
000032F8= 20 20 20 41 53 52 ...   2972  DISP_ASR_L  DC.B    '   ASR.L',0
00003301= 20 20 20 41 53 4C ...   2973  DISP_ASL_L  DC.B    '   ASL.L',0
0000330A= 20 20 20 52 4F 52 ...   2974  DISP_ROR_B  DC.B    '   ROR.B',0
00003313= 20 20 20 52 4F 4C ...   2975  DISP_ROL_B  DC.B    '   ROL.B',0
0000331C= 20 20 20 52 4F 52 ...   2976  DISP_ROR_W  DC.B    '   ROR.W',0
00003325= 20 20 20 52 4F 4C ...   2977  DISP_ROL_W  DC.B    '   ROL.W',0
0000332E= 20 20 20 52 4F 52 ...   2978  DISP_ROR_L  DC.B    '   ROR.L',0
00003337= 20 20 20 52 4F 4C ...   2979  DISP_ROL_L  DC.B    '   ROL.L',0
00003340= 20 20 20 42 52 41 00    2980  DISP_BRA    DC.B    '   BRA',0
00003347= 20 20 20 42 4C 54 00    2981  DISP_BLT    DC.B    '   BLT',0
0000334E= 20 20 20 42 45 51 00    2982  DISP_BEQ    DC.B    '   BEQ',0
00003355= 20 20 20 42 4E 45 00    2983  DISP_BNE    DC.B    '   BNE',0
0000335C= 20 20 20 42 48 49 00    2984  DISP_BHI    DC.B    '   BHI',0
00003363= 20 20 20 4D 4F 56 ...   2985  DISP_MOVEA_W    DC.B    '   MOVEA.W',0
0000336E= 20 20 20 4D 4F 56 ...   2986  DISP_MOVEA_L    DC.B    '   MOVEA.L',0
00003379                          2987  
00003379= 20 20 20 24 00          2988  DISP_HEX     DC.B    '   $',0
0000337E= 20 20 20 44 00          2989  DISP_D  DC.B    '   D',0
00003383= 20 20 20 41 00          2990  DISP_A  DC.B    '   A',0
00003388= 20 20 20 28 00          2991  DISP_OP  DC.B    '   (',0
0000338D= 29 00                   2992  DISP_CP  DC.B   ')',0
0000338F= 20 20 20 28 41 00       2993  DISP_AOP  DC.B    '   (A',0
00003395                          2994  
00003395= 20 20 20 2D 28 41 00    2995  DISP_PRE    DC.B    '   -(A',0
0000339C= 29 2B 00                2996  DISP_POST   DC.B    ')+',0
0000339F= 20 20 20 23 00          2997  DISP_LB DC.B    '   #',0
000033A4= 30 00                   2998  DISP_0  DC.B    '0',0
000033A6= 31 00                   2999  DISP_1  DC.B    '1',0
000033A8= 32 00                   3000  DISP_2  DC.B    '2',0
000033AA= 33 00                   3001  DISP_3  DC.B    '3',0
000033AC= 34 00                   3002  DISP_4  DC.B    '4',0
000033AE= 35 00                   3003  DISP_5  DC.B    '5',0
000033B0= 36 00                   3004  DISP_6  DC.B    '6',0
000033B2= 37 00                   3005  DISP_7  DC.B    '7',0
000033B4                          3006  
000033B4                          3007  *STACK INTERFACE VARIABLES*
000033B4                          3008  COUNTER         DS.W    1
000033B6                          3009  QUEUE_COUNTER   DS.W    1
000033B8                          3010  
000033B8                          3011  *EA DECODING INTERFACE VARIABLES* 
000033B8                          3012  DEST_REGISTER_FORMAT    DS.B    1           *all address modes acceptable standard
000033B9                          3013  SRC_REGISTER_FORMAT  DS.B    1           *all address modes acceptable standard
000033BA                          3014  TEMP_REGISTER_FORMAT    DS.B    1           *place holder for masking other register formats
000033BB                          3015  
000033BB                          3016  *FORMAT OF WHERE TO GET THE EA BY THE ENDING BIT AND STARTING BIT
000033BB                          3017  * WORD + WORD = LONG
000033BB                          3018  * (STARTING BIT) + (ENDING BIT) = 2 HEX CHAR
000033BB                          3019  * A              + F            = AF         <= EXAMPLE
000033BB                          3020  *(10TH BIT)      + (15TH BIT)   = CHECK BITS 15 THROUGH 10
000033BB                          3021  GET_DST_START_END    DS.B    1
000033BC                          3022  GET_SRC_START_END    DS.B    1
000033BD                          3023  
000033BD                          3024  *STORES THE START + END BITS HERE (FROM ABOVE)
000033BE                          3025  VAR_BYTE_START      DS.L    1
000033C2                          3026  VAR_BYTE_END        DS.L    1
000033C6                          3027  VAR_TEMP_CLEANCOPY  DS.L    1
000033CA                          3028  
000033CA                          3029  VAR_LONG_ADDRESS_MODE_CHECK        DS.L    1       *holds the bits 0-2 in long form
000033CE                          3030  
000033CE                          3031  *MORE FOR STACK USAGE*
000033CE= 2C 00                   3032  DISP_COMMA  DC.B    ',',0
000033D0= 20 20 20 00             3033  DISP_INDENT  DC.B    '   ',0
000033D4                          3034  
000033D4                          3035  
000033D4                          3036  
000033D4                          3037  *---------------------------------------------------------------------------*
000033D4                          3038  * Ends program
000033D4                          3039  *---------------------------------------------------------------------------*
000033D4                          3040              END    START                    * last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASC2HXLP            1154
ASCII2HEX           114E
ASC_ERR             11B0
ASC_LOW             1192
ASC_NUM             11A2
ASC_SFT             11AA
ASC_UPP             119A
CHECK0              2438
CHECK1              24C0
CHECK2              2548
CHECK3              25E0
CHECK4              2680
CHECK7              2720
CHECK_IMMEDIATE     2732
CHECK_LONG          2732
CHECK_WORD          2732
CLEAR_RETURN        2B0E
CLEAR_STACK         2AFE
COUNTER             33B4
CR                  D
DECREMENT           2AF6
DEST_CHECK0         274E
DEST_CHECK1         27D8
DEST_CHECK2         2860
DEST_CHECK3         28F8
DEST_CHECK4         2998
DEST_CHECK7         2A38
DEST_CHECK_IMMEDIATE  2A4A
DEST_CHECK_LONG     2A4A
DEST_CHECK_WORD     2A4A
DEST_LOOP_SHIFTING  27B6
DEST_LOOP_SHIFTING1  2840
DEST_LOOP_SHIFTING2  28D0
DEST_LOOP_SHIFTING3  2968
DEST_LOOP_SHIFTING4  2A10
DEST_MASKING_NEXT   27C6
DEST_MASKING_NEXT1  284E
DEST_MASKING_NEXT2  28DE
DEST_MASKING_NEXT3  2976
DEST_MASKING_NEXT4  2A1E
DEST_MODE           1FF0
DEST_REGISTER       22C0
DEST_REGISTER_FORMAT  33B8
DISPLAY_30_LINES    12B8
DISP_0              33A4
DISP_1              33A6
DISP_2              33A8
DISP_3              33AA
DISP_4              33AC
DISP_5              33AE
DISP_6              33B0
DISP_7              33B2
DISP_A              3383
DISP_ADDA_L         3294
DISP_ADDA_W         328A
DISP_ADDQ_B         318D
DISP_ADDQ_L         31A1
DISP_ADDQ_W         3197
DISP_ADD_B          326F
DISP_ADD_L          3281
DISP_ADD_W          3278
DISP_AND_B          3254
DISP_AND_L          3266
DISP_AND_W          325D
DISP_AOP            338F
DISP_ASL_B          32DD
DISP_ASL_L          3301
DISP_ASL_W          32EF
DISP_ASR_B          32D4
DISP_ASR_L          32F8
DISP_ASR_W          32E6
DISP_BEQ            334E
DISP_BHI            335C
DISP_BLT            3347
DISP_BNE            3355
DISP_BRA            3340
DISP_BTST           30E0
DISP_CMPA_L         3240
DISP_CMPA_W         3236
DISP_CMPI_B         30E8
DISP_CMPI_L         30FC
DISP_CMPI_W         30F2
DISP_CMP_B          321B
DISP_CMP_L          322D
DISP_CMP_W          3224
DISP_COMMA          33CE
DISP_CP             338D
DISP_D              337E
DISP_DATA           3106
DISP_DIVS           31AB
DISP_EORI_B         30C2
DISP_EORI_L         30D6
DISP_EORI_W         30CC
DISP_EOR_B          3200
DISP_EOR_L          3212
DISP_EOR_W          3209
DISP_HEX            3379
DISP_INDENT         33D0
DISP_JSR            3133
DISP_LB             339F
DISP_LEA            3170
DISP_LSL_B          32A7
DISP_LSL_L          32CB
DISP_LSL_W          32B9
DISP_LSR_B          329E
DISP_LSR_L          32C2
DISP_LSR_W          32B0
DISP_MOVEA_L        336E
DISP_MOVEA_W        3363
DISP_MOVEM_L        3182
DISP_MOVEM_W        3177
DISP_MOVE_B         310E
DISP_MOVE_L         3122
DISP_MOVE_W         3118
DISP_MULS_W         324A
DISP_NEG_B          313A
DISP_NEG_L          314C
DISP_NEG_W          3143
DISP_NEXT           2E53
DISP_NOT_B          3155
DISP_NOT_L          3167
DISP_NOT_W          315E
DISP_OP             3388
DISP_ORI_B          30A7
DISP_ORI_L          30B9
DISP_ORI_W          30B0
DISP_POST           339C
DISP_PRE            3395
DISP_ROL_B          3313
DISP_ROL_L          3337
DISP_ROL_W          3325
DISP_ROR_B          330A
DISP_ROR_L          332E
DISP_ROR_W          331C
DISP_RTS            312C
DISP_SUBA_L         31F6
DISP_SUBA_W         31EC
DISP_SUBI_B         31CE
DISP_SUBI_L         31E2
DISP_SUBI_W         31D8
DISP_SUB_B          31B3
DISP_SUB_L          31C5
DISP_SUB_W          31BC
D_MODE000           2092
D_MODE010           20DA
D_MODE011           213A
D_MODE100           215A
D_MODE111           21AC
EA_ARITH            1F8A
EA_DATA             1496
EA_GEN              1FD6
EA_MOVEA            1FB0
EA_NOSRC            1F76
ENDLINE_M           3004
END_ADDR            109A
ERRMSG_1            2EEB
ERRMSG_3            2F0A
ERRMSG_5            2F2F
ERROR_1             10FE
ERROR_2             110E
ERROR_3             111E
ERROR_4             112E
ERROR_5             113E
E_ADDR_HX           3000
FINMSG              2EC0
GET_DEST_FAILED     2A4E
GET_DEST_SUCCESS    2A52
GET_DST_START_END   33BB
GET_EA_EA_DEST      273C
GET_EA_EA_SRC       2426
GET_SRC_FAILED      2736
GET_SRC_START_END   33BC
GET_SRC_SUCCESS     273A
HEX2ASCII           11B6
HEX_CHAR            11E4
HEX_CONT            11E8
HEX_LOOP            11CA
IMMD_B              2260
IMMD_L              22A0
IMMD_W              2280
IMMEDIATE           2230
INCREMENT           2AEE
INTRO               1028
IS_ODD              11F8
IS_ODD_ERR          120E
JMPTABLE            12E4
LF                  A
LONGMODE            2204
LOOP_SHIFTING       24A0
LOOP_SHIFTING1      2528
LOOP_SHIFTING2      25B8
LOOP_SHIFTING3      2650
LOOP_SHIFTING4      26F8
MAIN                1214
MASKING_NEXT        24AE
MASKING_NEXT1       2536
MASKING_NEXT2       25C6
MASKING_NEXT3       265E
MASKING_NEXT4       2706
MODE000             207E
MODE001             20A6
MODE010             20BA
MODE011             20FA
MODE100             211A
MODE111             217A
NEXTLINES           12C6
OP0000              1344
OP0001              156A
OP0010              15D8
OP0011              163A
OP0100              169A
OP0101              1834
OP0110              18B0
OP0111              193E
OP1000              1942
OP1001              197E
OP1010              1A56
OP1011              1A5A
OP1100              1B56
OP1101              1BF2
OP1110              1CC4
OP1111              1F72
OP_ADDA_L           1CAC
OP_ADDA_W           1C94
OP_ADDQ             1854
OP_ADDQ_B           187A
OP_ADDQ_L           189E
OP_ADDQ_W           188C
OP_ADD_B            1C4C
OP_ADD_L            1C7C
OP_ADD_W            1C64
OP_AND_B            1BBC
OP_AND_L            1BE0
OP_AND_W            1BCE
OP_ASL              1E64
OP_ASL_B            1E88
OP_ASL_L            1E9A
OP_ASL_W            1EAC
OP_ASR              1E0A
OP_ASR_B            1E2E
OP_ASR_L            1E40
OP_ASR_W            1E52
OP_ASX              1D26
OP_BEQ              1914
OP_BHI              18F8
OP_BLT              1930
OP_BNE              1906
OP_BRA              1922
OP_BTST             13B8
OP_CMPA_L           1AC6
OP_CMPA_W           1AB4
OP_CMPI             14BE
OP_CMPI_B           14DE
OP_CMPI_L           1502
OP_CMPI_W           14F0
OP_CMP_B            1AD8
OP_CMP_L            1B08
OP_CMP_W            1AF0
OP_DATA             1472
OP_DIVS             196A
OP_EORI             13C6
OP_EORI_B           13E6
OP_EORI_L           140A
OP_EORI_W           13F8
OP_EOR_B            1B20
OP_EOR_L            1B44
OP_EOR_W            1B32
OP_JSR              1812
OP_LEA              1740
OP_LSL              1DB0
OP_LSL_B            1DD4
OP_LSL_L            1DE6
OP_LSL_W            1DF8
OP_LSR              1D56
OP_LSR_B            1D7A
OP_LSR_L            1D8C
OP_LSR_W            1D9E
OP_LSX              1D0E
OP_MOVEA_L          161C
OP_MOVEA_W          167C
OP_MOVEM_L          172E
OP_MOVEM_W          171C
OP_MOVE_B           1570
OP_MOVE_L           15FE
OP_MOVE_W           165E
OP_MULS             1BA8
OP_NEG              1754
OP_NEG_B            1774
OP_NEG_L            17A4
OP_NEG_W            178C
OP_NOT              17BC
OP_NOT_B            17DC
OP_NOT_L            1800
OP_NOT_W            17EE
OP_ORI              1514
OP_ORI_B            1534
OP_ORI_L            1558
OP_ORI_W            1546
OP_ROL              1F18
OP_ROL_B            1F3C
OP_ROL_L            1F4E
OP_ROL_W            1F60
OP_ROR              1EBE
OP_ROR_B            1EE2
OP_ROR_L            1EF4
OP_ROR_W            1F06
OP_ROX              1D3E
OP_RTS              1826
OP_SUBA_L           1A44
OP_SUBA_W           1A32
OP_SUBI             141C
OP_SUBI_B           143C
OP_SUBI_L           1460
OP_SUBI_W           144E
OP_SUB_B            19EA
OP_SUB_L            1A1A
OP_SUB_W            1A02
OUTPUT_PROCESSED_DATA  1298
POP_FRONT           2AA8
POP_FRONT_RETURN    2AE2
POP_RETURN          2AA6
POP_SHIFT_LOOP      2AC4
POP_STACK           2A9A
PRINT_QUEUE         2A6E
PRINT_QUEUE_HELPER  2A7A
PRINT_QUEUE_RETURN  2A90
PRINT_STACK         2A54
PRINT_STACK_HELPER  2A60
PRINT_STACK_RETURN  2A6C
PROGLP              100A
PROMPT_END          2E26
PROMPT_START        2DF7
PUSH_STACK          2A92
QUEUE_COUNTER       33B6
REG_0               2374
REG_1               2382
REG_2               2390
REG_3               239E
REG_4               23AC
REG_5               23BA
REG_6               23C8
REG_7               23D6
REPEAT              23E4
REPEATMSG           2E7D
RETURN              11B4
SRC_MODE            2034
SRC_REGISTER        231C
SRC_REGISTER_FORMAT  33B9
STACK               7000
START               1004
START_ADDR          1048
S_ADDR_HX           2FFC
TEMP_REGISTER_FORMAT  33BA
TERMINATE           2B10
TESTING             1036
TMPINPUT            3007
TMPOUTPUT           3057
VAR_BYTE_END        33C2
VAR_BYTE_START      33BE
VAR_LONG_ADDRESS_MODE_CHECK  33CA
VAR_TEMP_CLEANCOPY  33C6
VR_E_ADDR           2FAC
VR_S_ADDR           2F5C
WELCOME             2B22
WORDMODE            21D8

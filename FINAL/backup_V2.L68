00001004 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/6/2014 5:30:27 PM

00000000                             1  *---------------------------------------------------------------------------*
00000000                             2  * Title      : 68K Disassembler
00000000                             3  * Written by : Team Circle
00000000                             4  * Date       : 12/05/14
00000000                             5  * Description: Scans a section of memory and converts its
00000000                             6  *              contents to a listing of valid assembly 
00000000                             7  *              language instructions
00000000                             8  *---------------------------------------------------------------------------*
00000000                             9  
00000000                            10  *---------------------------------------------------------------------------*
00000000                            11  * System Equates                                                 
00000000                            12  *---------------------------------------------------------------------------*
00000000  =0000000D                 13  CR          EQU     $0D                     * ASCII for Carriage Return
00000000  =0000000A                 14  LF          EQU     $0A                     * ASCII for Line Feed 
00000000  =00007000                 15  STACK       EQU     $7000                   * Initial Stack Pointer                         
00000000                            16              
00000000                            17  *---------------------------------------------------------------------------*
00000000                            18  * Reserved Registers
00000000                            19  *---------------------------------------------------------------------------*  
00000000                            20  * D0 - I/O
00000000                            21  * D1 - Temporary storage of processing data
00000000                            22  * D3 - [PUSH_STACK]
00000000                            23  * D4 - Opcode size (0 - byte; 1- word; 2-long)
00000000                            24  * D5 - Processing data
00000000                            25  * D6 - Loop counter to print 30 lines
00000000                            26  * D7 - Error flag
00000000                            27  * A2 - [STACK POINTER]
00000000                            28  * A5 - Processing address in hex
00000000                            29  
00000000                            30  *---------------------------------------------------------------------------*
00000000                            31  * Start and loop program
00000000                            32  *---------------------------------------------------------------------------*  
00001000                            33              ORG     $1000
00001000  4FF8 7000                 34              LEA     STACK,SP
00001004                            35  START:            
00001004  4EB9 00001028             36              JSR     INTRO                 
0000100A  4EB9 00001050             37  PROGLP      JSR     START_ADDR
00001010  4EB9 000010A2             38              JSR     END_ADDR
00001016  43F9 00002B30             39              LEA     ENDLINE_M,A1           * Add a new line
0000101C  103C 000E                 40              MOVE.B  #14, D0                  * Display A1
00001020  4E4F                      41              TRAP    #15
00001022                            42              
00001022  4EF9 0000121C             43              JMP     MAIN
00001028                            44              
00001028                            45  *---------------------------------------------------------------------------*
00001028                            46  * INTRO: Display the introduction of the program
00001028                            47  *---------------------------------------------------------------------------*
00001028  43F9 0000264E             48  INTRO       LEA     WELCOME,A1              * Load PROMPT_START
0000102E  103C 000E                 49              MOVE.B  #14,D0                  * Display A1
00001032  4E4F                      50              TRAP    #15
00001034  4E75                      51              RTS
00001036                            52  TESTING
00001036  1001                      53              MOVE.B  D1,D0
00001038  13F8 0DDD AAAACCCC        54              MOVE.B  $DDD,$AAAACCCC
00001040  1210                      55              MOVE.B  (A0),D1
00001042  1218                      56              MOVE.B  (A0)+,D1
00001044  1220                      57              MOVE.B  -(A0),D1
00001046  1238 7000                 58              MOVE.B  $7000,D1
0000104A  1238 7000                 59              MOVE.B  $00007000,D1
0000104E                            60              
0000104E  4E75                      61              RTS
00001050                            62  *---------------------------------------------------------------------------*
00001050                            63  * START_ADDR: Compute the starting address
00001050                            64  *---------------------------------------------------------------------------*
00001050                            65  START_ADDR
00001050                            66              * Output
00001050  43F9 00002923             67              LEA     PROMPT_START,A1         * Load PROMPT_START 
00001056  103C 000E                 68              MOVE.B  #14,D0                  * Display PROMPT_START
0000105A  4E4F                      69              TRAP    #15
0000105C                            70      
0000105C                            71              * Input
0000105C  43F9 00002A88             72              LEA     VR_S_ADDR,A1            * Load VR_S_ADDR
00001062  103C 0002                 73              MOVE.B  #2,D0                   * Ask user for input
00001066  4E4F                      74              TRAP    #15
00001068                            75              
00001068                            76              * Error Checking (length)
00001068  0C01 0000                 77              CMPI.B  #0, D1                  * Check if input length <= 0
0000106C  6F00 0098                 78              BLE     ERROR_1
00001070  0C01 0008                 79              CMPI.B  #8, D1                  * Check if input length > 8
00001074  6E00 0090                 80              BGT     ERROR_1
00001078                            81              
00001078                            82              * Conversion & Storage
00001078  4EB9 00001156             83              JSR     ASCII2HEX               * Jump to ASCII2HEX
0000107E  0C07 0001                 84              CMPI.B  #1, D7                  * Check for error
00001082  6700 0082                 85              BEQ     ERROR_1                 
00001086  23C1 00002B28             86              MOVE.L  D1, S_ADDR_HX           * Move the result to S_ADDR_HX 
0000108C                            87              
0000108C                            88              * Error Checking (Odd)
0000108C  43F9 00002B28             89              LEA     S_ADDR_HX, A1           * Load 'S_ADDR_HX' for odd error
00001092  4EB9 00001200             90              JSR     IS_ODD                  * Check if the input address is odd
00001098  0C07 0001                 91              CMPI.B  #1, D7                  * Check for error
0000109C  6700 0088                 92              BEQ     ERROR_3
000010A0                            93              
000010A0                            94              * Return
000010A0  4E75                      95              RTS     
000010A2                            96  *---------------------------------------------------------------------------*
000010A2                            97  * END_ADDR: Compute the ending address
000010A2                            98  *---------------------------------------------------------------------------*
000010A2                            99  END_ADDR
000010A2                           100              * Output
000010A2  43F9 00002952            101              LEA     PROMPT_END,A1           * Load PROMPT_END
000010A8  103C 000E                102              MOVE.B  #14,D0                  * Display PROMPT_END
000010AC  4E4F                     103              TRAP    #15
000010AE                           104  
000010AE                           105              * Input
000010AE  43F9 00002AD8            106              LEA     VR_E_ADDR,A1            * Load VR_E_ADDR
000010B4  103C 0002                107              MOVE.B  #2,D0                   * Ask user for input
000010B8  4E4F                     108              TRAP    #15
000010BA                           109              
000010BA                           110              * Error Checking (length)
000010BA  0C01 0000                111              CMPI.B  #0, D1                  * Check if input length <= 0
000010BE  6F00 0056                112              BLE     ERROR_2
000010C2  0C01 0008                113              CMPI.B  #8, D1                  * Check if input length > 8
000010C6  6E00 004E                114              BGT     ERROR_2
000010CA                           115              
000010CA                           116              * Conversion & Storage
000010CA  4EB9 00001156            117              JSR     ASCII2HEX               * Jump to ASCII2HEX
000010D0  0C07 0001                118              CMPI.B  #1, D7                  * Check for error
000010D4  6700 0040                119              BEQ     ERROR_2
000010D8  23C1 00002B2C            120              MOVE.L  D1, E_ADDR_HX           * Move the result to E_ADDR_HX
000010DE                           121              
000010DE                           122              * Error Checking (start > end case)
000010DE  2439 00002B28            123              MOVE.L  S_ADDR_HX, D2           * Move the starting address to D2
000010E4  B282                     124              CMP.L   D2, D1                  * Compare starting and ending address
000010E6  6300 005E                125              BLS     ERROR_5                 * Go to ERROR_5 if ending < starting
000010EA                           126              
000010EA                           127              * Error Checking (Odd case)
000010EA  43F9 00002B2C            128              LEA     E_ADDR_HX, A1           * Move the ending address
000010F0  4EB9 00001200            129              JSR     IS_ODD                  * Go to IS_ODD for odd address checking
000010F6  0C07 0001                130              CMPI.B  #1, D7                  * Check for an error flag
000010FA  6700 003A                131              BEQ     ERROR_4
000010FE                           132              
000010FE                           133              * Inputs are valid
000010FE  2A79 00002B28            134              MOVE.L  S_ADDR_HX, A5           * Store the valid input in A5
00001104                           135              
00001104  4E75                     136              RTS
00001106                           137              
00001106                           138  *---------------------------------------------------------------------------*
00001106                           139  * ERROR_1: Address error (Invalid starting address)
00001106                           140  *---------------------------------------------------------------------------*
00001106                           141  ERROR_1
00001106  43F9 00002A17            142              LEA     ERRMSG_1, A1            * Load ERRMSG_1
0000110C  103C 000E                143              MOVE.B  #14, D0                 * Display ERRMSG_1
00001110  4E4F                     144              TRAP    #15
00001112  4EF8 1050                145              JMP     START_ADDR              * Jump to START_ADDR
00001116                           146      
00001116                           147  *---------------------------------------------------------------------------*
00001116                           148  * ERROR_2: Address error (Invalid ending address)
00001116                           149  *---------------------------------------------------------------------------*
00001116                           150  ERROR_2
00001116  43F9 00002A17            151              LEA     ERRMSG_1, A1            * Load ERRMSG_1
0000111C  103C 000E                152              MOVE.B  #14, D0                 * Display ERRMSG_1
00001120  4E4F                     153              TRAP    #15
00001122  4EF8 10A2                154              JMP     END_ADDR                * Jump to END_ADDR
00001126                           155  
00001126                           156  *---------------------------------------------------------------------------*
00001126                           157  * ERROR_3: Address error (Odd starting address)
00001126                           158  *---------------------------------------------------------------------------*
00001126                           159  ERROR_3
00001126  43F9 00002A36            160              LEA     ERRMSG_3, A1
0000112C  103C 000E                161              MOVE.B  #14, D0
00001130  4E4F                     162              TRAP    #15
00001132  4EF8 1050                163              JMP     START_ADDR
00001136                           164     
00001136                           165  *---------------------------------------------------------------------------*
00001136                           166  * ERROR_4: Address error (Odd ending address)
00001136                           167  *---------------------------------------------------------------------------*         
00001136                           168  ERROR_4
00001136  43F9 00002A36            169              LEA     ERRMSG_3, A1
0000113C  103C 000E                170              MOVE.B  #14, D0
00001140  4E4F                     171              TRAP    #15
00001142  4EF8 10A2                172              JMP     END_ADDR
00001146                           173            
00001146                           174  *---------------------------------------------------------------------------*
00001146                           175  * ERROR_3: Address error (Ending address is less than starting address)
00001146                           176  *---------------------------------------------------------------------------*
00001146                           177  ERROR_5
00001146  43F9 00002A5B            178              LEA     ERRMSG_5, A1
0000114C  103C 000E                179              MOVE.B  #14, D0
00001150  4E4F                     180              TRAP    #15
00001152  4EF8 10A2                181              JMP     END_ADDR
00001156                           182    
00001156                           183  *---------------------------------------------------------------------------*
00001156                           184  * ASCII2HEX: Convert ASCii to Hexadecimal
00001156                           185  * Reserved registers: A1 = Source, D1 = Destination, D2 = Byte, D7 = Error
00001156                           186  *---------------------------------------------------------------------------*
00001156  4281                     187  ASCII2HEX   CLR.L   D1                      * Clear the destination 
00001158  4287                     188              CLR.L   D7                      * Set the error flag to 0
0000115A  4282                     189              CLR.L   D2                      * Clear D2 for temp storage
0000115C                           190              
0000115C  1419                     191  ASC2HXLP    MOVE.B  (A1)+, D2               * Read a byte to D2
0000115E  0C02 0000                192              CMPI.B  #0, D2                  * Check for NULL (indicates the end of source)
00001162  6700 0058                193              BEQ     RETURN                  * If it's NULL, go to return
00001166  0C02 0066                194              CMPI.B  #102, D2                * Decimal ASCII value of f is 102
0000116A  6E00 004C                195              BGT     ASC_ERR                 * ASCII > f (invalid input) 
0000116E  0C02 0061                196              CMPI.B  #97, D2                 * Decimal ASCII value of a is 97
00001172  6C00 0026                197              BGE     ASC_LOW                 * ASCII >= a (valid input)
00001176  0C02 0046                198              CMPI.B  #70, D2                 * Decimal ASCII value of F is 70
0000117A  6E00 003C                199              BGT     ASC_ERR                 * ASCII > F (invalid input)
0000117E  0C02 0041                200              CMPI.B  #65, D2                 * Decimal ASCII value of A is 65
00001182  6C00 001E                201              BGE     ASC_UPP                 * ASCII >= A (valid input)
00001186  0C02 0039                202              CMPI.B  #57, D2                 * Decimal value of 9 is 57
0000118A  6E00 002C                203              BGT     ASC_ERR                 * ASCII > 9 (invalid input)
0000118E  0C02 0030                204              CMPI.B  #48, D2                 * Decimal ASCII value of 0 is 48
00001192  6C00 0016                205              BGE     ASC_NUM                 * ASCII >= 0 (valid input)
00001196  6000 0020                206              BRA     ASC_ERR                 * Invalid input
0000119A                           207  
0000119A  0442 0057                208  ASC_LOW     SUBI    #87, D2                 * Convert the ASCII input to Hex
0000119E  6000 0012                209              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011A2                           210              
000011A2  0442 0037                211  ASC_UPP     SUBI    #55, D2                 * Convert the ASCII input to Hex
000011A6  6000 000A                212              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011AA                           213              
000011AA  0442 0030                214  ASC_NUM     SUBI    #48, D2                 * Convert the ASCII input to Hex
000011AE  6000 0002                215              BRA     ASC_SFT                 * Go to ASC_SFT to shift the bits
000011B2                           216              
000011B2  E981                     217  ASC_SFT     ASL.L   #4, D1                  * Shift the dest to left by 4 bits
000011B4  D202                     218              ADD.B   D2, D1                  * Add the converted input to D1
000011B6  60A4                     219              BRA     ASC2HXLP                * Loop
000011B8                           220  
000011B8  1E3C 0001                221  ASC_ERR     MOVE.B  #1, D7                  * Set the error flag to 1            
000011BC  4E75                     222  RETURN      RTS     
000011BE                           223  
000011BE                           224  *---------------------------------------------------------------------------*
000011BE                           225  * HEX2ASCII: Convert Hexadecimal to ASCii 
000011BE                           226  * Reserved registers: A1 = Destination, D1 = Source, D2 = Size, D7 = Byte
000011BE                           227  *---------------------------------------------------------------------------*
000011BE  0C02 0008                228  HEX2ASCII   CMPI.B  #8, D2                  * Check to see if the size is long
000011C2  6700 000E                229              BEQ     HEX_LOOP
000011C6  4841                     230              SWAP    D1
000011C8  0C02 0002                231              CMPI.B  #2,D2
000011CC  6600 0004                232              BNE     HEX_LOOP
000011D0  E189                     233              LSL.L   #8,D1
000011D2                           234             
000011D2  E999                     235  HEX_LOOP    ROL.L   #4, D1                  * Roll D1 to left
000011D4  2601                     236              MOVE.L  D1, D3                  * Move D1 to D3
000011D6  0283 0000000F            237              ANDI.L  #$F,D3                  * Retrieve the right most 4 bits
000011DC  0C03 0009                238              CMPI.B  #9, D3                  * Compare te digit
000011E0  6E00 000A                239              BGT     HEX_CHAR              
000011E4  0603 0030                240              ADDI.B  #48,D3                  * Add 48 for numerical output
000011E8  6000 0006                241              BRA     HEX_CONT
000011EC                           242              
000011EC  0603 0037                243  HEX_CHAR    ADDI.B  #55,D3                  * Add 55 for character output
000011F0                           244  
000011F0  12C3                     245  HEX_CONT    MOVE.B  D3, (A1)+               * Place into A1
000011F2  5342                     246              SUBI    #1, D2                  * Decrement the size
000011F4  0C02 0000                247              CMPI.B  #0, D2                  * Check if D2 is 0
000011F8  66D8                     248              BNE     HEX_LOOP                * Loop
000011FA  12BC 0000                249              MOVE.B  #$0,(A1)                * Null terminator
000011FE  4E75                     250              RTS
00001200                           251  
00001200                           252  *---------------------------------------------------------------------------*
00001200                           253  * IS_ODD: Check whether the source address is odd
00001200                           254  * Reserved registers: A1 = Source, D1 = Result, D7 = error flag
00001200                           255  *---------------------------------------------------------------------------*
00001200  4281                     256  IS_ODD      CLR.L   D1                      * Clear the result
00001202  4287                     257              CLR.L   D7                      * Set the error flag to 0
00001204  2211                     258              MOVE.L  (A1),D1                * Temp store the checking address to D1
00001206  82FC 0002                259              DIVU    #2, D1                  * Divide the result by 2
0000120A  4841                     260              SWAP    D1                      * Swap remainder with quotient
0000120C  0C01 0001                261              CMPI.B  #1, D1                  * Check for error
00001210  6700 0004                262              BEQ     IS_ODD_ERR
00001214  4E75                     263              RTS
00001216                           264              
00001216  1E3C 0001                265  IS_ODD_ERR  MOVE.B  #1, D7
0000121A  4E75                     266              RTS
0000121C                           267  
0000121C                           268  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*
0000121C                           269  * MAIN                    
0000121C                           270  * A2: STACK POINTER                                                      MAIN                                                                        MAIN
0000121C                           271  * A5: Processing address
0000121C                           272  *
0000121C                           273  * D3: USED FOR PUSHING INTO STACK
0000121C                           274  *     To push into stack => MOVE.W #DATA,D3 
0000121C                           275  *                           BSR    PUSH_STACK
0000121C                           276  *     To print stack     => BSR    PRINT_STACK 
0000121C                           277  *     To clear stack     => BSR    CLEAR_STACK
0000121C                           278  *---------------------------------------------------------------------------**---------------------------------------------------------------------------**---------------------------------------------------------------------------*  
0000121C                           279  MAIN        
0000121C                           280              *initialize stack pointer
0000121C  33FC 0000 00002EE0       281              MOVE.W  #0,COUNTER
00001224  347C 7000                282              MOVEA.W #STACK,A2
00001228  163C 0020                283              MOVE.B  #' ',D3
0000122C  6100 1390                284              BSR     PUSH_STACK
00001230  6100 138C                285              BSR     PUSH_STACK
00001234  6100 1388                286              BSR     PUSH_STACK
00001238                           287              
00001238                           288              * clear registers for temp storage
00001238  4280                     289              CLR.L   D0                   
0000123A  4281                     290              CLR.L   D1                   
0000123C  227C 00000000            291              MOVEA.L #0, A1                
00001242                           292              
00001242  220D                     293              MOVE.L  A5,D1                   * check to see if the address is fully read
00001244  23CD 00002B28            294              MOVE.L  A5,S_ADDR_HX
0000124A  B2B9 00002B2C            295              CMP.L   E_ADDR_HX,D1
00001250  6C00 117E                296              BGE     REPEAT                  * go to repeat for user action
00001254                           297  
00001254  43F9 00002B83            298              LEA     TMPOUTPUT,A1            * allocate storage to hold output
0000125A  143C 0008                299              MOVE.B  #8,D2                   * set the output size
0000125E  4EB8 11BE                300              JSR     HEX2ASCII               
00001262  43F9 00002B83            301              LEA     TMPOUTPUT,A1
00001268  103C 000E                302              MOVE.B  #14,D0
0000126C  4E4F                     303              TRAP    #15
0000126E                           304              
0000126E  4285                     305              CLR.L    D5                      * clear the processing data
00001270  3A1D                     306              MOVE.W  (A5)+,D5                 * copy the currently processing data in A5 over to D5
00001272                           307                                               * advance the current instruction pointer to the next
00001272                           308                                               * instruction in memory
00001272                           309  *----------------------------------------*
00001272                           310  * Registers          
00001272                           311  * [D1] - COPY OF D5
00001272                           312  * [D5] - DATA TO BE PROCESSED
00001272                           313  * [D6] - COUNTER FOR LINES PROCESSED
00001272                           314  *
00001272                           315  * [D4]      - ERROR FLAG BEFORE PRINTING
00001272                           316  * [STACK]   - PRINTS PROCESS DATA
00001272                           317  * [COUNTER] - KEEPS TRACK OF STACK INCREMENT
00001272                           318  *
00001272                           319  * [A1] - USED FOR JUMPING/PRINTING
00001272                           320  *
00001272                           321  *----------------------------------------*
00001272                           322  
00001272                           323              
00001272                           324              *Processing the first 4 most significant bits 
00001272  2205                     325              MOVE.L  D5,D1                    * copy the current processing data to D1
00001274  143C 000C                326              MOVE.B  #12,D2                   * shift to right by 12 bits
00001278  E469                     327              LSR.W   D2,D1                    * [D2] Temporarily used D2 for shifting bits
0000127A  C2FC 0006                328              MULU    #6,D1                    * form offset
0000127E  43F9 000012D4            329              LEA     JMPTABLE,A1              * index into table
00001284  4EB1 1000                330              JSR     0(A1,D1)                 * jump indirect with index
00001288                           331              
00001288                           332              *SECURED EA*
00001288  B83C 0001                333              CMP.B   #1,D4                    * ERROR FLAG CHECK [ERROR WHEN D4 == 1]
0000128C  6600 0012                334              BNE     OUTPUT_PROCESSED_DATA    * PRINTS PROCESSED OP-CODE & EA
00001290  6100 01D0                335              BSR     OP_DATA                  * PRINT ERROR MESSAGE "DATA"
00001294  6100 1394                336              BSR     CLEAR_STACK              * CLEARS THE STACK 
00001298  183C 0000                337              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
0000129C  6000 000A                338              BRA     DISPLAY_30_LINES         * GO TO LAST STEP
000012A0                           339             
000012A0                           340  OUTPUT_PROCESSED_DATA
000012A0  6100 12F8                341              BSR     PRINT_QUEUE
000012A4  183C 0000                342              MOVE.B  #0,D4                    * RESETS [D4] ERROR FLAG
000012A8                           343  DISPLAY_30_LINES
000012A8                           344              * display 30 lines per page
000012A8  5206                     345              ADDI.B  #1,D6
000012AA  0C06 001E                346              CMPI.B  #30,D6
000012AE  6C00 0006                347              BGE     NEXTLINES
000012B2  6000 FF68                348              BRA     MAIN
000012B6                           349            
000012B6                           350  *---------------------------------------------------------------------------*
000012B6                           351  * NEXTLINES: receive input from user to print the next 30 lines
000012B6                           352  *---------------------------------------------------------------------------*  
000012B6  4206                     353  NEXTLINES   CLR.B   D6
000012B8  43F9 0000297F            354              LEA     DISP_NEXT,A1
000012BE  103C 000E                355              MOVE.B  #14,D0
000012C2  4E4F                     356              TRAP    #15
000012C4  43F9 00002B33            357              LEA     TMPINPUT,A1
000012CA  103C 0002                358              MOVE.B  #2,D0
000012CE  4E4F                     359              TRAP    #15
000012D0  4EF8 121C                360              JMP     MAIN
000012D4                           361    
000012D4                           362  *---------------------------------------------------------------------------*
000012D4                           363  * JMPTABLE: OP code jump/branch table used to decode and display opcodes
000012D4                           364  *---------------------------------------------------------------------------*  
000012D4  4EF9 00001334            365  JMPTABLE    JMP     OP0000  * CMPI/ORI/BTST/EORI/SUBI/BTST
000012DA  4EF9 0000155A            366              JMP     OP0001  * MOVE.B                                        *WORKING ON - JOSEPH
000012E0  4EF9 000015C4            367              JMP     OP0010  * MOVE.L/MOVEA.L
000012E6  4EF9 00001626            368              JMP     OP0011  * MOVE.W/MOVEA.W
000012EC  4EF9 00001686            369              JMP     OP0100  * MOVEM/LEA/NEG/NOT/JSR/RTS
000012F2  4EF9 00001820            370              JMP     OP0101  * ADDQ
000012F8  4EF9 0000189C            371              JMP     OP0110  * BRA/Bcc (BEQ/BNE/BLT/BHI)
000012FE  4EF9 0000192A            372              JMP     OP0111  * MOVEQ (unassigned)
00001304  4EF9 0000192E            373              JMP     OP1000  * DIVS
0000130A  4EF9 0000196A            374              JMP     OP1001  * SUB/SUBA
00001310  4EF9 00001A42            375              JMP     OP1010  * Unassigned 
00001316  4EF9 00001A46            376              JMP     OP1011  * CMP/EOR/CMPA
0000131C  4EF9 00001B42            377              JMP     OP1100  * MULS/AND
00001322  4EF9 00001BDE            378              JMP     OP1101  * ADD/ADDA
00001328  4EF9 00001CB0            379              JMP     OP1110  * LSR/LSL/ASR/ASL/ROL/ROR
0000132E  4EF9 00001F5E            380              JMP     OP1111  * Special/Reserved
00001334                           381              
00001334                           382  *---------------------------------------------------------------------------*
00001334                           383  * OP0000: decode CMPI/ORI/BTST/SUBI/EORI
00001334                           384  *---------------------------------------------------------------------------*           
00001334                           385  OP0000                                                                                  
00001334  4281                     386              CLR.L   D1          * to temporarily store the address to process
00001336  4280                     387              CLR.L   D0  
00001338  4284                     388              CLR.L   D4                 
0000133A  227C 00000000            389              MOVEA.L #0, A1                
00001340                           390              * Check for ORI (0000 0000 xx (size) xxx (EA mode) xxx(EA reg)
00001340                           391              * Check if bit 11,10,9,8 are 0000)
00001340  2205                     392              MOVE.L  D5,D1
00001342  0281 00000F00            393              ANDI.L  #$0F00,D1
00001348  0C81 00000000            394              CMPI.L  #$0000,D1   * if they are 0000, it is ORI
0000134E  6700 01B4                395              BEQ     OP_ORI
00001352                           396  
00001352                           397              * check for CMPI (0000 1100 xx (size) xxx (EA mode) xxx (EA reg)
00001352                           398              * check if bit 11,10,9,8 are 1100
00001352  4281                     399              CLR.L   D1
00001354  2205                     400              MOVE.L  D5,D1
00001356  0281 00000F00            401              ANDI.L  #$0F00,D1
0000135C  0C81 00000C00            402              CMPI.L  #$0C00,D1
00001362  6700 014A                403              BEQ     OP_CMPI
00001366                           404              
00001366                           405              * check for SUBI
00001366  4281                     406              CLR.L   D1
00001368  2205                     407              MOVE.L  D5,D1
0000136A  0281 00000F00            408              ANDI.L  #$0F00,D1
00001370  0C81 00000400            409              CMPI.L  #$0400,D1
00001376  6700 0094                410              BEQ     OP_SUBI
0000137A                           411              
0000137A                           412              * check for EORI
0000137A  4281                     413              CLR.L   D1
0000137C  2205                     414              MOVE.L  D5,D1
0000137E  0281 00000F00            415              ANDI.L  #$0F00,D1
00001384  0C81 00000A00            416              CMPI.L  #$0A00,D1
0000138A  6700 002A                417              BEQ     OP_EORI
0000138E                           418              
0000138E                           419              * check for BTST
0000138E  4281                     420              CLR.L   D1
00001390  2205                     421              MOVE.L  D5,D1
00001392  EA99                     422              ROR.L   #5,D1
00001394  0281 00000008            423              ANDI.L  #$8,D1
0000139A  0C01 0008                424              CMPI.B  #8,D1
0000139E  6700 0008                425              BEQ     OP_BTST
000013A2                           426  
000013A2                           427              * OP0000 series other than ORI/CMPI/BTST/EORI
000013A2  4EF9 00001462            428              JMP     OP_DATA
000013A8                           429              
000013A8                           430  *---------------------------------------------------------------------------*
000013A8                           431  * OP_BTST: display BTST
000013A8                           432  *---------------------------------------------------------------------------* 
000013A8  43F9 00002C0C            433  OP_BTST     LEA     DISP_BTST,A1
000013AE  103C 000E                434              MOVE.B  #14,D0
000013B2  4E4F                     435              TRAP    #15
000013B4  4E75                     436              RTS
000013B6                           437  
000013B6                           438  *---------------------------------------------------------------------------*
000013B6                           439  * OP_EORI: decode and display EORI
000013B6                           440  *---------------------------------------------------------------------------* 
000013B6                           441  OP_EORI
000013B6  4281                     442              CLR.L   D1
000013B8  4284                     443              CLR.L   D4
000013BA  2205                     444              MOVE.L  D5,D1
000013BC  EC99                     445              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000013BE  0C01 0000                446              CMPI.B  #0,D1
000013C2  6700 0012                447              BEQ     OP_EORI_B    * size is byte
000013C6  0C01 0001                448              CMPI.B  #1,D1
000013CA  6700 001C                449              BEQ     OP_EORI_W    * size is word
000013CE  0C01 0002                450              CMPI.B  #2,D1
000013D2  6700 0026                451              BEQ     OP_EORI_L    * size is long
000013D6                           452  
000013D6                           453  OP_EORI_B    * size is byte    
000013D6  183C 0000                454              MOVE.B  #0,D4
000013DA  43F9 00002BEE            455              LEA     DISP_EORI_B,A1
000013E0  103C 000E                456              MOVE.B  #14,D0
000013E4  4E4F                     457              TRAP    #15
000013E6  4E75                     458              RTS
000013E8                           459              
000013E8                           460  OP_EORI_W    * size is word
000013E8  183C 0001                461              MOVE.B  #1,D4
000013EC  43F9 00002BF8            462              LEA     DISP_EORI_W,A1
000013F2  103C 000E                463              MOVE.B  #14,D0
000013F6  4E4F                     464              TRAP    #15
000013F8  4E75                     465              RTS
000013FA                           466              
000013FA                           467  OP_EORI_L    * size is long
000013FA  183C 0002                468              MOVE.B  #2,D4
000013FE  43F9 00002C02            469              LEA     DISP_EORI_L,A1
00001404  103C 000E                470              MOVE.B  #14,D0
00001408  4E4F                     471              TRAP    #15
0000140A  4E75                     472              RTS
0000140C                           473              
0000140C                           474  *---------------------------------------------------------------------------*
0000140C                           475  * OP_SUBI: decode SUBI.B/.W/.L
0000140C                           476  *---------------------------------------------------------------------------* 
0000140C                           477  OP_SUBI
0000140C  4281                     478              CLR.L   D1
0000140E  4284                     479              CLR.L   D4
00001410  2205                     480              MOVE.L  D5,D1
00001412  EC99                     481              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001414  0C01 0000                482              CMPI.B  #0,D1
00001418  6700 0012                483              BEQ     OP_SUBI_B    * size is byte
0000141C  0C01 0001                484              CMPI.B  #1,D1
00001420  6700 001C                485              BEQ     OP_SUBI_W    * size is word
00001424  0C01 0002                486              CMPI.B  #2,D1
00001428  6700 0026                487              BEQ     OP_SUBI_L    * size is long
0000142C                           488  
0000142C                           489  OP_SUBI_B    * size is byte    
0000142C  183C 0000                490              MOVE.B  #0,D4
00001430  43F9 00002CFA            491              LEA     DISP_SUBI_B,A1
00001436  103C 000E                492              MOVE.B  #14,D0
0000143A  4E4F                     493              TRAP    #15
0000143C  4E75                     494              RTS
0000143E                           495              
0000143E                           496  OP_SUBI_W    * size is word
0000143E  183C 0001                497              MOVE.B  #1,D4
00001442  43F9 00002D04            498              LEA     DISP_SUBI_W,A1
00001448  103C 000E                499              MOVE.B  #14,D0
0000144C  4E4F                     500              TRAP    #15
0000144E  4E75                     501              RTS
00001450                           502              
00001450                           503  OP_SUBI_L    * size is long
00001450  183C 0002                504              MOVE.B  #2,D4
00001454  43F9 00002D0E            505              LEA     DISP_SUBI_L,A1
0000145A  103C 000E                506              MOVE.B  #14,D0
0000145E  4E4F                     507              TRAP    #15
00001460  4E75                     508              RTS
00001462                           509              
00001462                           510  *---------------------------------------------------------------------------*
00001462                           511  * OP_DATA : unidentified opcode
00001462                           512  *---------------------------------------------------------------------------* 
00001462                           513  OP_DATA
00001462  4280                     514              CLR.L   D0                   
00001464  4281                     515              CLR.L   D1     
00001466  4284                     516              CLR.L   D4                    
00001468  227C 00000000            517              MOVEA.L #0, A1             
0000146E  4287                     518              CLR.L   D7
00001470  1E3C 0001                519              MOVE.B  #1,D7                   * error flag is true
00001474                           520              
00001474  43F9 00002C32            521              LEA     DISP_DATA,A1
0000147A  103C 000E                522              MOVE.B  #14,D0
0000147E  4E4F                     523              TRAP    #15
00001480                           524              
00001480  4EF9 00001486            525              JMP     EA_DATA
00001486                           526             
00001486                           527             
00001486                           528  *---------------------------------------------------------------------------*
00001486                           529  * EA_DATA
00001486                           530  *---------------------------------------------------------------------------*       
00001486  43F9 00002B83            531  EA_DATA     LEA     TMPOUTPUT,A1    * load the temporarily stored output address
0000148C  2205                     532              MOVE.L  D5,D1           * transfer the processing data to D1
0000148E  7404                     533              MOVE.L  #4,D2           * set to word size
00001490  4EB8 11BE                534              JSR     HEX2ASCII       * prepare output in ascii
00001494  43F9 00002EA5            535              LEA     DISP_HEX,A1     * display $ symbol
0000149A  103C 000E                536              MOVE.B  #14,D0      
0000149E  4E4F                     537              TRAP    #15
000014A0  43F9 00002B83            538              LEA     TMPOUTPUT,A1    * display with a new line
000014A6  103C 000D                539              MOVE.B  #13,D0
000014AA  4E4F                     540              TRAP    #15
000014AC                           541  
000014AC  4E75                     542              RTS
000014AE                           543              
000014AE                           544  *---------------------------------------------------------------------------*
000014AE                           545  * OP_CMPI : decode CMPI and its size
000014AE                           546  *---------------------------------------------------------------------------*          
000014AE                           547  OP_CMPI
000014AE  4281                     548              CLR.L   D1
000014B0  4284                     549              CLR.L   D4
000014B2  2205                     550              MOVE.L  D5,D1
000014B4  EC99                     551              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000014B6  0C01 0000                552              CMPI.B  #0,D1
000014BA  6700 0012                553              BEQ     OP_CMPI_B    * size is byte
000014BE  0C01 0001                554              CMPI.B  #1,D1
000014C2  6700 001C                555              BEQ     OP_CMPI_W    * size is word
000014C6  0C01 0002                556              CMPI.B  #2,D1
000014CA  6700 0026                557              BEQ     OP_CMPI_L    * size is long
000014CE                           558  
000014CE                           559  OP_CMPI_B    * size is byte    
000014CE  183C 0000                560              MOVE.B  #0,D4
000014D2  43F9 00002C14            561              LEA     DISP_CMPI_B,A1
000014D8  103C 000E                562              MOVE.B  #14,D0
000014DC  4E4F                     563              TRAP    #15
000014DE  4E75                     564              RTS
000014E0                           565              
000014E0                           566  OP_CMPI_W    * size is word
000014E0  183C 0001                567              MOVE.B  #1,D4
000014E4  43F9 00002C1E            568              LEA     DISP_CMPI_W,A1
000014EA  103C 000E                569              MOVE.B  #14,D0
000014EE  4E4F                     570              TRAP    #15
000014F0  4E75                     571              RTS
000014F2                           572              
000014F2                           573  OP_CMPI_L    * size is long
000014F2  183C 0002                574              MOVE.B  #2,D4
000014F6  43F9 00002C28            575              LEA     DISP_CMPI_L,A1
000014FC  103C 000E                576              MOVE.B  #14,D0
00001500  4E4F                     577              TRAP    #15
00001502  4E75                     578              RTS
00001504                           579   
00001504                           580  *---------------------------------------------------------------------------*
00001504                           581  * OP_ORI : decode ORI and its size
00001504                           582  *---------------------------------------------------------------------------* 
00001504                           583  OP_ORI      
00001504  4281                     584              CLR.L   D1
00001506  4284                     585              CLR.L   D4
00001508  2205                     586              MOVE.L  D5,D1
0000150A  EC99                     587              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
0000150C  0C01 0000                588              CMPI.B  #0,D1
00001510  6700 0012                589              BEQ     OP_ORI_B    * size is byte
00001514  0C01 0001                590              CMPI.B  #1,D1
00001518  6700 001C                591              BEQ     OP_ORI_W    * size is word
0000151C  0C01 0002                592              CMPI.B  #2,D1
00001520  6700 0026                593              BEQ     OP_ORI_L    * size is long
00001524                           594  
00001524                           595  OP_ORI_B    * size is byte    
00001524  183C 0000                596              MOVE.B  #0,D4
00001528  43F9 00002BD3            597              LEA     DISP_ORI_B,A1
0000152E  103C 000E                598              MOVE.B  #14,D0
00001532  4E4F                     599              TRAP    #15
00001534  4E75                     600              RTS
00001536                           601              
00001536                           602  OP_ORI_W    * size is word
00001536  183C 0001                603              MOVE.B  #1,D4
0000153A  43F9 00002BDC            604              LEA     DISP_ORI_W,A1
00001540  103C 000E                605              MOVE.B  #14,D0
00001544  4E4F                     606              TRAP    #15
00001546  4E75                     607              RTS
00001548                           608              
00001548                           609  OP_ORI_L    * size is long
00001548  183C 0002                610              MOVE.B  #2,D4
0000154C  43F9 00002BE5            611              LEA     DISP_ORI_L,A1
00001552  103C 000E                612              MOVE.B  #14,D0
00001556  4E4F                     613              TRAP    #15
00001558  4E75                     614              RTS
0000155A                           615          
0000155A                           616  *---------------------------------------------------------------------------*
0000155A                           617  * OP0001: MOVE.B
0000155A                           618  *---------------------------------------------------------------------------*
0000155A                           619  OP0001      
0000155A  4EF9 00001560            620              JMP     OP_MOVE_B   * display MOVE.B
00001560                           621              
00001560                           622  *---------------------------------------------------------------------------*
00001560                           623  * OP_MOVE_B: display MOVE_B and proceed to EA
00001560                           624  *---------------------------------------------------------------------------*
00001560                           625  OP_MOVE_B                                                                       
00001560                           626             
00001560                           627             *INITIALIZE EA FORMAT STANDARDS: IF AN,(AN),-(AN)...ETC COULD BE USED
00001560  13FC 0081 00002EE4       628             MOVE.B   #$81,DEST_REGISTER_FORMAT
00001568  13FC 0000 00002EE5       629             MOVE.B   #$00,SRC_REGISTER_FORMAT
00001570                           630             
00001570                           631             *INITIALIZE WHERE TO FIND REGISTER NUMBERS
00001570  13FC 00B9 00002EE7       632             MOVE.B   #$B9,GET_DN_START_END
00001578  13FC 0020 00002EE8       633             MOVE.B   #$20,GET_SRC_START_END
00001580                           634             
00001580                           635              *CLEAR D3
00001580  4283                     636              CLR.L   D3
00001582                           637              *LOAD STACK WITH THIS OPMODE
00001582  6100 103A                638              BSR     PUSH_STACK
00001586  163C 004D                639              MOVE.B  #'M',D3
0000158A  6100 1032                640              BSR     PUSH_STACK
0000158E  163C 004F                641              MOVE.B  #'O',D3
00001592  6100 102A                642              BSR     PUSH_STACK
00001596  163C 0056                643              MOVE.B  #'V',D3
0000159A  6100 1022                644              BSR     PUSH_STACK
0000159E  163C 0045                645              MOVE.B  #'E',D3
000015A2  6100 101A                646              BSR     PUSH_STACK
000015A6  163C 002E                647              MOVE.B  #'.',D3
000015AA  6100 1012                648              BSR     PUSH_STACK
000015AE  163C 0042                649              MOVE.B  #'B',D3
000015B2  6100 100A                650              BSR     PUSH_STACK
000015B6                           651              
000015B6  6100 0E5A                652              BSR     GET_EA_EA_SRC
000015BA  163C 002C                653              MOVE.B  #',',D3
000015BE  6100 0FFE                654              BSR     PUSH_STACK
000015C2                           655              
000015C2                           656              *TODO: NEEDS DEST EA TOO
000015C2                           657              
000015C2  4E75                     658              RTS
000015C4                           659              
000015C4                           660             
000015C4                           661  *---------------------------------------------------------------------------*
000015C4                           662  * OP0010: decode MOVE.L/MOVEA.L
000015C4                           663  *---------------------------------------------------------------------------*
000015C4                           664  OP0010      
000015C4  183C 0002                665              MOVE.B  #2,D4
000015C8  4280                     666              CLR.L   D0                     
000015CA  4281                     667              CLR.L   D1                      
000015CC  227C 00000000            668              MOVEA.L #0, A1                 
000015D2                           669              
000015D2  2205                     670              MOVE.L  D5,D1
000015D4  EA99                     671              ROR.L   #5,D1
000015D6  0281 0000000E            672              ANDI.L  #$E,D1
000015DC  0C01 0002                673              CMPI.B  #2,D1
000015E0  6700 0026                674              BEQ     OP_MOVEA_L
000015E4                           675  
000015E4  4EF9 000015EA            676              JMP     OP_MOVE_L
000015EA                           677             
000015EA                           678  
000015EA                           679  *---------------------------------------------------------------------------*
000015EA                           680  * OP_MOVE_L: display MOVE_L and proceed to EA
000015EA                           681  *---------------------------------------------------------------------------*
000015EA                           682  OP_MOVE_L   
000015EA  183C 0002                683              MOVE.B  #2,D4
000015EE  227C 00000000            684              MOVEA.L #0, A1
000015F4  43F9 00002C4E            685              LEA     DISP_MOVE_L,A1
000015FA  103C 000E                686              MOVE.B  #14,D0
000015FE  4E4F                     687              TRAP    #15
00001600                           688              
00001600  4EB9 00001FC2            689              JSR     EA_GEN
00001606  4E75                     690              RTS
00001608                           691  
00001608                           692  *---------------------------------------------------------------------------*
00001608                           693  * OP_MOVEA_L: display MOVEA_L and proceed to EA
00001608                           694  *---------------------------------------------------------------------------*
00001608                           695  OP_MOVEA_L 
00001608  183C 0002                696              MOVE.B  #2,D4
0000160C  227C 00000000            697              MOVEA.L #0, A1
00001612  43F9 00002E9A            698              LEA     DISP_MOVEA_L,A1
00001618  103C 000E                699              MOVE.B  #14,D0
0000161C  4E4F                     700              TRAP    #15
0000161E  4EF9 00001F9C            701              JMP     EA_MOVEA
00001624                           702  
00001624  4E75                     703              RTS
00001626                           704              
00001626                           705  *---------------------------------------------------------------------------*
00001626                           706  * OP0011: decode MOVE.W/MOVEA.W
00001626                           707  *---------------------------------------------------------------------------*
00001626                           708  OP0011      
00001626  4280                     709              CLR.L   D0                      
00001628  4281                     710              CLR.L   D1  
0000162A  4284                     711              CLR.L   D4                   
0000162C  227C 00000000            712              MOVEA.L #0, A1               
00001632  2205                     713              MOVE.L  D5,D1
00001634  EA99                     714              ROR.L   #5,D1
00001636  0281 0000000E            715              ANDI.L  #$E,D1
0000163C  0C01 0002                716              CMPI.B  #2,D1
00001640  6700 0026                717              BEQ     OP_MOVEA_W
00001644                           718              
00001644  4EF9 0000164A            719              JMP     OP_MOVE_W
0000164A                           720            
0000164A                           721  *---------------------------------------------------------------------------*
0000164A                           722  * OP_MOVE_W: display MOVE_W and proceed to EA
0000164A                           723  *---------------------------------------------------------------------------*
0000164A                           724  OP_MOVE_W   
0000164A  183C 0001                725              MOVE.B  #1,D4
0000164E  227C 00000000            726              MOVEA.L #0, A1
00001654  43F9 00002C44            727              LEA     DISP_MOVE_W,A1
0000165A  103C 000E                728              MOVE.B  #14,D0
0000165E  4E4F                     729              TRAP    #15
00001660  4EF9 00001FC2            730              JMP     EA_GEN
00001666                           731  
00001666  4E75                     732              RTS
00001668                           733  
00001668                           734  *---------------------------------------------------------------------------*
00001668                           735  * OP_MOVEA_W: display MOVEA and proceed to EA
00001668                           736  *---------------------------------------------------------------------------*
00001668                           737  OP_MOVEA_W 
00001668  183C 0001                738              MOVE.B  #1,D4
0000166C  227C 00000000            739              MOVEA.L #0, A1
00001672  43F9 00002E8F            740              LEA     DISP_MOVEA_W,A1
00001678  103C 000E                741              MOVE.B  #14,D0
0000167C  4E4F                     742              TRAP    #15
0000167E  4EF9 00001F9C            743              JMP     EA_MOVEA
00001684                           744  
00001684  4E75                     745              RTS
00001686                           746            
00001686                           747  *---------------------------------------------------------------------------*
00001686                           748  * OP0100: decode MOVEM/LEA/NEG/JSR/RTS/NOT
00001686                           749  *---------------------------------------------------------------------------*
00001686                           750  OP0100
00001686  4280                     751              CLR.L   D0                      
00001688  4281                     752              CLR.L   D1  
0000168A  4284                     753              CLR.L   D4                      
0000168C  227C 00000000            754              MOVEA.L #0, A1                  
00001692  2205                     755              MOVE.L  D5,D1  
00001694                           756              
00001694                           757              * check for RTS
00001694  0C41 4E75                758              CMPI.W  #$4E75,D1   * 0100 1110 0111 0101
00001698  6700 0178                759              BEQ     OP_RTS
0000169C                           760              
0000169C                           761              * check for JSR     * 0100 1110 10 xxx (ea mode) xxx (ea reg)
0000169C  4281                     762              CLR.L   D1 
0000169E  2205                     763              MOVE.L  D5,D1  
000016A0  0241 0F00                764              ANDI.W  #$0F00,D1
000016A4  0C41 0E00                765              CMPI.W  #$0E00,D1
000016A8  6700 0154                766              BEQ     OP_JSR
000016AC                           767  
000016AC                           768              * check for NEG     * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
000016AC  4281                     769              CLR.L   D1 
000016AE  2205                     770              MOVE.L  D5,D1  
000016B0  0241 0F00                771              ANDI.W  #$0F00,D1
000016B4  0C41 0400                772              CMPI.W  #$0400,D1
000016B8  6700 0086                773              BEQ     OP_NEG
000016BC                           774              
000016BC                           775              * check for NOT     * 0100 0110 xx (size) xxx (ea mode) xxx (ea reg)
000016BC  4281                     776              CLR.L   D1 
000016BE  2205                     777              MOVE.L  D5,D1  
000016C0  0241 0F00                778              ANDI.W  #$0F00,D1
000016C4  0C41 0600                779              CMPI.W  #$0600,D1
000016C8  6700 00DE                780              BEQ     OP_NOT
000016CC                           781              
000016CC                           782              * check for LEA     * 0100 xxx (reg) 111 xxx (ea mode) xxx (ea reg)
000016CC  4281                     783              CLR.L   D1 
000016CE  2205                     784              MOVE.L  D5,D1  
000016D0  E099                     785              ROR.L   #8,D1
000016D2  0C01 0001                786              CMPI.B  #1,D1
000016D6  6700 0054                787              BEQ     OP_LEA
000016DA                           788              
000016DA                           789              * check for MOVEM   * 0100 1 x 001 x (size) xxx (ea mode) xxx (ea reg)
000016DA  4281                     790              CLR.L   D1 
000016DC  2205                     791              MOVE.L  D5,D1  
000016DE  EB59                     792              ROL.W   #5,D1
000016E0  0C01 0001                793              CMPI.B  #1,D1
000016E4  6600 FD7C                794              BNE     OP_DATA
000016E8  E959                     795              ROL.W   #4,D1
000016EA  0C01 0001                796              CMPI.B  #1,D1
000016EE  6600 FD72                797              BNE     OP_DATA
000016F2  E359                     798              ROL.W   #1,D1
000016F4  0C01 0000                799              CMPI.B  #0,D1
000016F8  6700 000E                800              BEQ     OP_MOVEM_W
000016FC  0C01 0001                801              CMPI.B  #1,D1
00001700  6700 0018                802              BEQ     OP_MOVEM_L
00001704  4EF8 1462                803              JMP     OP_DATA
00001708                           804  
00001708                           805  *---------------------------------------------------------------------------*
00001708                           806  * OP_MOVEM_W: display MOVEM_W
00001708                           807  *---------------------------------------------------------------------------*    
00001708                           808  OP_MOVEM_W  
00001708  183C 0001                809              MOVE.B  #1,D4
0000170C  43F9 00002CA3            810              LEA     DISP_MOVEM_W,A1
00001712  103C 000E                811              MOVE.B  #14,D0
00001716  4E4F                     812              TRAP    #15
00001718  4E75                     813              RTS
0000171A                           814  
0000171A                           815  *---------------------------------------------------------------------------*
0000171A                           816  * OP_MOVEM_L: display MOVEM_L
0000171A                           817  *---------------------------------------------------------------------------*
0000171A                           818  OP_MOVEM_L  
0000171A  183C 0002                819              MOVE.B  #2,D4
0000171E  43F9 00002CAE            820              LEA     DISP_MOVEM_L,A1
00001724  103C 000E                821              MOVE.B  #14,D0
00001728  4E4F                     822              TRAP    #15
0000172A  4E75                     823              RTS
0000172C                           824     
0000172C                           825  *---------------------------------------------------------------------------*
0000172C                           826  * OP_LEA: decode and display LEA
0000172C                           827  *---------------------------------------------------------------------------*
0000172C                           828  OP_LEA      
0000172C  43F9 00002C9C            829              LEA     DISP_LEA,A1
00001732  103C 000E                830              MOVE.B  #14,D0
00001736  4E4F                     831              TRAP    #15
00001738  4EF9 00001F9C            832              JMP     EA_MOVEA
0000173E                           833  
0000173E  4E75                     834              RTS
00001740                           835  
00001740                           836  *---------------------------------------------------------------------------*
00001740                           837  * OP_NEG: decode and display NEG 
00001740                           838  *---------------------------------------------------------------------------*
00001740                           839  OP_NEG      * 0100 0100 xx (size) xxx (ea mode) xxx (ea reg) 
00001740  4281                     840              CLR.L   D1
00001742  4284                     841              CLR.L   D4
00001744  2205                     842              MOVE.L  D5,D1
00001746  EC99                     843              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001748  0C01 0000                844              CMPI.B  #0,D1
0000174C  6700 0012                845              BEQ     OP_NEG_B    * size is byte
00001750  0C01 0001                846              CMPI.B  #1,D1
00001754  6700 0022                847              BEQ     OP_NEG_W    * size is word
00001758  0C01 0002                848              CMPI.B  #2,D1
0000175C  6700 0032                849              BEQ     OP_NEG_L    * size is long
00001760                           850                         
00001760                           851  OP_NEG_B    * size is byte   
00001760  183C 0000                852              MOVE.B  #0,D4 
00001764  43F9 00002C66            853              LEA     DISP_NEG_B,A1
0000176A  103C 000E                854              MOVE.B  #14,D0
0000176E  4E4F                     855              TRAP    #15
00001770                           856              
00001770  4EB9 00001F62            857              JSR     EA_NOSRC
00001776  4E75                     858              RTS
00001778                           859              
00001778                           860  OP_NEG_W    * size is word
00001778  183C 0001                861              MOVE.B  #1,D4
0000177C  43F9 00002C6F            862              LEA     DISP_NEG_W,A1
00001782  103C 000E                863              MOVE.B  #14,D0
00001786  4E4F                     864              TRAP    #15
00001788  4EB9 00001F62            865              JSR     EA_NOSRC
0000178E  4E75                     866              RTS
00001790                           867              
00001790                           868  OP_NEG_L    * size is long
00001790  183C 0002                869              MOVE.B  #2,D4
00001794  43F9 00002C78            870              LEA     DISP_NEG_L,A1
0000179A  103C 000E                871              MOVE.B  #14,D0
0000179E  4E4F                     872              TRAP    #15
000017A0  4EB9 00001F62            873              JSR     EA_NOSRC
000017A6                           874              
000017A6  4E75                     875              RTS
000017A8                           876  
000017A8                           877  *---------------------------------------------------------------------------*
000017A8                           878  * OP_NOT: decode and display NOT 
000017A8                           879  *---------------------------------------------------------------------------*
000017A8                           880  OP_NOT
000017A8  4281                     881              CLR.L   D1
000017AA  4284                     882              CLR.L   D4
000017AC  2205                     883              MOVE.L  D5,D1
000017AE  EC99                     884              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
000017B0  0C01 0000                885              CMPI.B  #0,D1
000017B4  6700 0012                886              BEQ     OP_NOT_B    * size is byte
000017B8  0C01 0001                887              CMPI.B  #1,D1
000017BC  6700 001C                888              BEQ     OP_NOT_W    * size is word
000017C0  0C01 0002                889              CMPI.B  #2,D1
000017C4  6700 0026                890              BEQ     OP_NOT_L    * size is long
000017C8                           891                         
000017C8                           892  OP_NOT_B    * size is byte   
000017C8  183C 0000                893              MOVE.B  #0,D4 
000017CC  43F9 00002C81            894              LEA     DISP_NOT_B,A1
000017D2  103C 000E                895              MOVE.B  #14,D0
000017D6  4E4F                     896              TRAP    #15
000017D8  4E75                     897              RTS
000017DA                           898              
000017DA                           899  OP_NOT_W    * size is word
000017DA  183C 0001                900              MOVE.B  #1,D4
000017DE  43F9 00002C8A            901              LEA     DISP_NOT_W,A1
000017E4  103C 000E                902              MOVE.B  #14,D0
000017E8  4E4F                     903              TRAP    #15
000017EA  4E75                     904              RTS
000017EC                           905              
000017EC                           906  OP_NOT_L    * size is long
000017EC  183C 0002                907              MOVE.B  #2,D4
000017F0  43F9 00002C93            908              LEA     DISP_NOT_L,A1
000017F6  103C 000E                909              MOVE.B  #14,D0
000017FA  4E4F                     910              TRAP    #15
000017FC  4E75                     911              RTS
000017FE                           912  
000017FE                           913  *---------------------------------------------------------------------------*
000017FE                           914  * OP_JSR: display JSR     
000017FE                           915  *---------------------------------------------------------------------------*
000017FE  43F9 00002C5F            916  OP_JSR      LEA     DISP_JSR,A1
00001804  103C 000E                917              MOVE.B  #14,D0
00001808  4E4F                     918              TRAP    #15
0000180A  4EB9 00001F62            919              JSR     EA_NOSRC
00001810                           920  
00001810  4E75                     921              RTS
00001812                           922  
00001812                           923  *---------------------------------------------------------------------------*
00001812                           924  * OP_RTS: display RTS     
00001812                           925  *---------------------------------------------------------------------------* 
00001812  43F9 00002C58            926  OP_RTS      LEA     DISP_RTS,A1
00001818  103C 000E                927              MOVE.B  #14,D0
0000181C  4E4F                     928              TRAP    #15
0000181E  4E75                     929              RTS
00001820                           930  
00001820                           931  *---------------------------------------------------------------------------*
00001820                           932  * OP0101: decode ADDQ
00001820                           933  *---------------------------------------------------------------------------* 
00001820  4280                     934  OP0101      CLR.L   D0               * clear registers for temp storage       
00001822  4281                     935              CLR.L   D1
00001824  4284                     936              CLR.L   D4                  
00001826  227C 00000000            937              MOVEA.L #0, A1  
0000182C                           938              
0000182C  2205                     939              MOVE.L  D5,D1           * copy the processing data 
0000182E  E089                     940              LSR.L   #8,D1           * shift to right by 8 bits to check the value of bit 8
00001830  0201 0001                941              ANDI.B  #$1,D1          * mask all bits except the last 2 bits
00001834  0C01 0000                942              CMPI.B  #0,D1           * if the value is 0, it's ADDQ
00001838  6700 0006                943              BEQ     OP_ADDQ
0000183C                           944              
0000183C  4EF8 1462                945              JMP     OP_DATA
00001840                           946       
00001840  4281                     947  OP_ADDQ     CLR.L   D1
00001842  2205                     948              MOVE.L  D5,D1
00001844  EC99                     949              ROR.L   #6,D1       * shift bit 7,6 to bit 1,0
00001846  0281 00000003            950              ANDI.L  #$3,D1
0000184C  0C01 0000                951              CMPI.B  #0,D1
00001850  6700 0014                952              BEQ     OP_ADDQ_B    * size is byte
00001854  0C41 0001                953              CMPI.W  #1,D1
00001858  6700 001E                954              BEQ     OP_ADDQ_W    * size is word
0000185C  0C81 00000002            955              CMPI.L  #2,D1
00001862  6700 0026                956              BEQ     OP_ADDQ_L    * size is long
00001866                           957              
00001866                           958  *---------------------------------------------------------------------------*
00001866                           959  * OP_ADDQ: display ADDQ
00001866                           960  *---------------------------------------------------------------------------*              
00001866                           961  OP_ADDQ_B    * size is byte   
00001866  183C 0000                962              MOVE.B  #0,D4 
0000186A  43F9 00002CB9            963              LEA     DISP_ADDQ_B,A1
00001870  103C 000E                964              MOVE.B  #14,D0
00001874  4E4F                     965              TRAP    #15
00001876  4E75                     966              RTS
00001878                           967              
00001878                           968  OP_ADDQ_W    * size is word
00001878  183C 0001                969              MOVE.B  #1,D4
0000187C  43F9 00002CC3            970              LEA     DISP_ADDQ_W,A1
00001882  103C 000E                971              MOVE.B  #14,D0
00001886  4E4F                     972              TRAP    #15
00001888  4E75                     973              RTS
0000188A                           974              
0000188A                           975  OP_ADDQ_L    * size is long
0000188A  183C 0002                976              MOVE.B  #2,D4
0000188E  43F9 00002CCD            977              LEA     DISP_ADDQ_L,A1
00001894  103C 000E                978              MOVE.B  #14,D0
00001898  4E4F                     979              TRAP    #15
0000189A  4E75                     980              RTS
0000189C                           981  
0000189C                           982  *---------------------------------------------------------------------------*
0000189C                           983  * OP0110: decode BRA/BEQ/BNE/BLT/BHI
0000189C                           984  *---------------------------------------------------------------------------*              
0000189C  4280                     985  OP0110      CLR.L   D0                  
0000189E  4281                     986              CLR.L   D1   
000018A0  4284                     987              CLR.L   D4                 
000018A2  227C 00000000            988              MOVEA.L #0,A1
000018A8  2205                     989              MOVE.L  D5, D1                
000018AA  0281 000000FF            990              ANDI.L  #$00FF, D1              * Get 8-bit displacement 
000018B0  2205                     991              MOVE.L  D5,D1                  
000018B2  0281 00000F00            992              ANDI.L  #$0F00,D1
000018B8                           993                 
000018B8  0C41 0000                994              CMPI.W  #$0000,D1               * Check for BRA
000018BC  6700 0050                995              BEQ     OP_BRA                  
000018C0                           996                          
000018C0  0C41 0D00                997              CMPI.W  #$0D00,D1               * Check for BLT
000018C4  6700 0056                998              BEQ     OP_BLT      
000018C8                           999  
000018C8  0C41 0700               1000              CMPI.W  #$0700,D1               * Check for BEQ
000018CC  6700 0032               1001              BEQ     OP_BEQ      
000018D0                          1002  
000018D0  0C41 0600               1003              CMPI.W  #$0600,D1               * Check for BNE
000018D4  6700 001C               1004              BEQ     OP_BNE  
000018D8                          1005              
000018D8  0C41 0200               1006              CMPI.W  #$0200,D1               * Check for BHI
000018DC  6700 0006               1007              BEQ     OP_BHI
000018E0                          1008  
000018E0  4EF8 1462               1009              JMP     OP_DATA
000018E4                          1010              
000018E4  43F9 00002E88           1011  OP_BHI      LEA     DISP_BHI,A1             
000018EA  103C 000E               1012              MOVE.B  #14,D0
000018EE  4E4F                    1013              TRAP    #15
000018F0  4E75                    1014              RTS
000018F2                          1015  
000018F2  43F9 00002E81           1016  OP_BNE      LEA     DISP_BNE,A1             
000018F8  103C 000E               1017              MOVE.B  #14,D0
000018FC  4E4F                    1018              TRAP    #15
000018FE  4E75                    1019              RTS
00001900                          1020  
00001900  43F9 00002E7A           1021  OP_BEQ      LEA     DISP_BEQ,A1             
00001906  103C 000E               1022              MOVE.B  #14,D0
0000190A  4E4F                    1023              TRAP    #15
0000190C  4E75                    1024              RTS          
0000190E                          1025                          
0000190E  43F9 00002E6C           1026  OP_BRA      LEA     DISP_BRA,A1             
00001914  103C 000E               1027              MOVE.B  #14,D0
00001918  4E4F                    1028              TRAP    #15
0000191A  4E75                    1029              RTS
0000191C                          1030              
0000191C  43F9 00002E73           1031  OP_BLT      LEA     DISP_BLT,A1          
00001922  103C 000E               1032              MOVE.B  #14,D0
00001926  4E4F                    1033              TRAP    #15
00001928  4E75                    1034              RTS
0000192A                          1035     
0000192A                          1036  *---------------------------------------------------------------------------*
0000192A                          1037  * OP0111 : MOVEQ not required
0000192A                          1038  *---------------------------------------------------------------------------*           
0000192A  4EF8 1462               1039  OP0111      JMP     OP_DATA
0000192E                          1040             
0000192E                          1041  *---------------------------------------------------------------------------*
0000192E                          1042  * OP1000 : decode DIVS
0000192E                          1043  *---------------------------------------------------------------------------*           
0000192E                          1044  OP1000      
0000192E  4280                    1045              CLR.L   D0                
00001930  4281                    1046              CLR.L   D1   
00001932  4284                    1047              CLR.L   D4                
00001934  207C 00000000           1048              MOVEA.L #0, A0               
0000193A  227C 00000000           1049              MOVEA.L #0, A1               
00001940                          1050              
00001940  2205                    1051              MOVE.L  D5,D1
00001942  EA89                    1052              LSR.L   #5,D1
00001944  0281 0000000E           1053              ANDI.L  #$E,D1
0000194A                          1054    
0000194A  0C01 000E               1055              CMPI.B  #$E,D1
0000194E  6700 0006               1056              BEQ     OP_DIVS
00001952                          1057              
00001952  4EF8 1462               1058              JMP     OP_DATA
00001956                          1059  
00001956                          1060  *---------------------------------------------------------------------------*
00001956                          1061  * OP_DIVS: display DIVS and proceed to EA
00001956                          1062  *---------------------------------------------------------------------------*  
00001956  43F9 00002CD7           1063  OP_DIVS     LEA     DISP_DIVS,A1
0000195C  103C 000E               1064              MOVE.B  #14,D0
00001960  4E4F                    1065              TRAP    #15
00001962  4EF9 00001F76           1066              JMP     EA_ARITH
00001968                          1067  
00001968  4E75                    1068              RTS
0000196A                          1069              
0000196A                          1070  *---------------------------------------------------------------------------*
0000196A                          1071  * OP1001: decode SUB/SUBA
0000196A                          1072  *---------------------------------------------------------------------------*      
0000196A  4280                    1073  OP1001      CLR.L   D0                
0000196C  4281                    1074              CLR.L   D1   
0000196E  4284                    1075              CLR.L   D4                 
00001970  207C 00000000           1076              MOVEA.L #0, A0                 
00001976  227C 00000000           1077              MOVEA.L #0, A1               
0000197C                          1078              
0000197C  2205                    1079              MOVE.L  D5,D1
0000197E  EA89                    1080              LSR.L   #5,D1
00001980  0281 0000000E           1081              ANDI.L  #$E,D1
00001986                          1082    
00001986  0C01 0000               1083              CMPI.B  #$0,D1
0000198A  6700 004A               1084              BEQ     OP_SUB_B
0000198E  0C01 0002               1085              CMPI.B  #$2,D1
00001992  6700 005A               1086              BEQ     OP_SUB_W
00001996  0C01 0004               1087              CMPI.B  #$4,D1
0000199A  6700 006A               1088              BEQ     OP_SUB_L
0000199E  0C01 0008               1089              CMPI.B  #$8,D1
000019A2  6700 0032               1090              BEQ     OP_SUB_B
000019A6  0C01 000A               1091              CMPI.B  #$A,D1
000019AA  6700 0042               1092              BEQ     OP_SUB_W
000019AE  0C01 000C               1093              CMPI.B  #$C,D1
000019B2  6700 0052               1094              BEQ     OP_SUB_L
000019B6                          1095              
000019B6  4241                    1096              CLR     D1
000019B8  2205                    1097              MOVE.L  D5,D1
000019BA  EC89                    1098              LSR.L   #6,D1
000019BC  0281 0000000F           1099              ANDI.L  #$F,D1
000019C2  0C01 0003               1100              CMPI.B  #3,D1
000019C6  6700 0056               1101              BEQ     OP_SUBA_W
000019CA  0C01 0007               1102              CMPI.B  #7,D1
000019CE  6700 0060               1103              BEQ     OP_SUBA_L
000019D2                          1104              
000019D2  4EF8 1462               1105              JMP     OP_DATA
000019D6                          1106    
000019D6                          1107  *---------------------------------------------------------------------------*
000019D6                          1108  * OP_SUB: display SUB and proceed to EA
000019D6                          1109  *---------------------------------------------------------------------------*            
000019D6  43F9 00002CDF           1110  OP_SUB_B    LEA     DISP_SUB_B,A1
000019DC  103C 000E               1111              MOVE.B  #14,D0
000019E0  4E4F                    1112              TRAP    #15
000019E2  183C 0000               1113              MOVE.B  #0,D4
000019E6  4EF9 00001FC2           1114              JMP     EA_GEN
000019EC                          1115  
000019EC  4E75                    1116              RTS
000019EE                          1117  
000019EE  43F9 00002CE8           1118  OP_SUB_W    LEA     DISP_SUB_W,A1
000019F4  103C 000E               1119              MOVE.B  #14,D0
000019F8  4E4F                    1120              TRAP    #15
000019FA  183C 0001               1121              MOVE.B  #1,D4
000019FE  4EF9 00001FC2           1122              JMP     EA_GEN
00001A04                          1123  
00001A04  4E75                    1124              RTS
00001A06                          1125  
00001A06  43F9 00002CF1           1126  OP_SUB_L    LEA     DISP_SUB_L,A1
00001A0C  103C 000E               1127              MOVE.B  #14,D0
00001A10  4E4F                    1128              TRAP    #15
00001A12  183C 0002               1129              MOVE.B  #2,D4
00001A16  4EF9 00001FC2           1130              JMP     EA_GEN
00001A1C                          1131  
00001A1C  4E75                    1132              RTS
00001A1E                          1133  
00001A1E                          1134  *---------------------------------------------------------------------------*
00001A1E                          1135  * OP_SUBA: display SUBA
00001A1E                          1136  *---------------------------------------------------------------------------*  
00001A1E  43F9 00002D18           1137  OP_SUBA_W   LEA     DISP_SUBA_W,A1
00001A24  103C 000E               1138              MOVE.B  #14,D0
00001A28  4E4F                    1139              TRAP    #15
00001A2A  183C 0001               1140              MOVE.B  #1,D4
00001A2E  4E75                    1141              RTS
00001A30                          1142  
00001A30  43F9 00002D22           1143  OP_SUBA_L   LEA     DISP_SUBA_L,A1
00001A36  103C 000E               1144              MOVE.B  #14,D0
00001A3A  4E4F                    1145              TRAP    #15
00001A3C  183C 0002               1146              MOVE.B  #2,D4
00001A40  4E75                    1147              RTS         
00001A42                          1148  *---------------------------------------------------------------------------*
00001A42                          1149  * OP1010 : unassigned
00001A42                          1150  *---------------------------------------------------------------------------*           
00001A42  4EF8 1462               1151  OP1010      JMP     OP_DATA
00001A46                          1152              
00001A46                          1153  *---------------------------------------------------------------------------*
00001A46                          1154  * OP1011 : decode CMP/EOR/CMPA
00001A46                          1155  *---------------------------------------------------------------------------*           
00001A46  4280                    1156  OP1011      CLR.L   D0                
00001A48  4281                    1157              CLR.L   D1            
00001A4A  4284                    1158              CLR.L   D4                   
00001A4C  227C 00000000           1159              MOVEA.L #0, A1               
00001A52  2205                    1160              MOVE.L  D5,D1
00001A54  EA99                    1161              ROR.L   #5,D1
00001A56  0281 0000000E           1162              ANDI.L  #$E,D1
00001A5C  0C01 0000               1163              CMPI.B  #$0,D1
00001A60  6700 0062               1164              BEQ     OP_CMP_B
00001A64  0C01 0002               1165              CMPI.B  #$2,D1
00001A68  6700 0072               1166              BEQ     OP_CMP_W
00001A6C  0C01 0004               1167              CMPI.B  #$4,D1
00001A70  6700 0082               1168              BEQ     OP_CMP_L
00001A74  0C01 0008               1169              CMPI.B  #$8,D1
00001A78  6700 0092               1170              BEQ     OP_EOR_B
00001A7C  0C01 000A               1171              CMPI.B  #$A,D1
00001A80  6700 009C               1172              BEQ     OP_EOR_W
00001A84  0C01 000C               1173              CMPI.B  #$C,D1
00001A88  6700 00A6               1174              BEQ     OP_EOR_L  
00001A8C  0C01 0006               1175              CMPI.B  #$6,D1
00001A90  6700 000E               1176              BEQ     OP_CMPA_W
00001A94  0C01 000E               1177              CMPI.B  #$E,D1
00001A98  6700 0018               1178              BEQ     OP_CMPA_L 
00001A9C                          1179  
00001A9C  4EF8 1462               1180              JMP     OP_DATA          
00001AA0                          1181  
00001AA0                          1182  *---------------------------------------------------------------------------*
00001AA0                          1183  * OP_CMPA: display CMPA 
00001AA0                          1184  *---------------------------------------------------------------------------
00001AA0  43F9 00002D62           1185  OP_CMPA_W   LEA     DISP_CMPA_W,A1
00001AA6  103C 000E               1186              MOVE.B  #14,D0
00001AAA  4E4F                    1187              TRAP    #15
00001AAC  183C 0001               1188              MOVE.B  #1,D4
00001AB0  4E75                    1189              RTS
00001AB2                          1190  
00001AB2  43F9 00002D6C           1191  OP_CMPA_L   LEA     DISP_CMPA_L,A1
00001AB8  103C 000E               1192              MOVE.B  #14,D0
00001ABC  4E4F                    1193              TRAP    #15
00001ABE  183C 0002               1194              MOVE.B  #2,D4
00001AC2  4E75                    1195              RTS
00001AC4                          1196  
00001AC4                          1197  *---------------------------------------------------------------------------*
00001AC4                          1198  * OP_CMP: display CMP and proceed to EA
00001AC4                          1199  *---------------------------------------------------------------------------*  
00001AC4  43F9 00002D47           1200  OP_CMP_B    LEA     DISP_CMP_B,A1
00001ACA  103C 000E               1201              MOVE.B  #14,D0
00001ACE  4E4F                    1202              TRAP    #15
00001AD0  183C 0000               1203              MOVE.B  #0,D4
00001AD4  4EF9 00001FC2           1204              JMP     EA_GEN
00001ADA                          1205  
00001ADA  4E75                    1206              RTS
00001ADC                          1207              
00001ADC  43F9 00002D50           1208  OP_CMP_W    LEA     DISP_CMP_W,A1
00001AE2  103C 000E               1209              MOVE.B  #14,D0
00001AE6  4E4F                    1210              TRAP    #15
00001AE8  183C 0001               1211              MOVE.B  #1,D4
00001AEC  4EF9 00001FC2           1212              JMP     EA_GEN
00001AF2                          1213  
00001AF2  4E75                    1214              RTS
00001AF4                          1215              
00001AF4  43F9 00002D59           1216  OP_CMP_L    LEA     DISP_CMP_L,A1
00001AFA  103C 000E               1217              MOVE.B  #14,D0
00001AFE  4E4F                    1218              TRAP    #15
00001B00  183C 0002               1219              MOVE.B  #2,D4
00001B04  4EF9 00001FC2           1220              JMP     EA_GEN
00001B0A                          1221  
00001B0A  4E75                    1222              RTS
00001B0C                          1223              
00001B0C                          1224  *---------------------------------------------------------------------------*
00001B0C                          1225  * OP_EOR: display EOR
00001B0C                          1226  *---------------------------------------------------------------------------*  
00001B0C  43F9 00002D2C           1227  OP_EOR_B    LEA     DISP_EOR_B,A1
00001B12  103C 000E               1228              MOVE.B  #14,D0
00001B16  4E4F                    1229              TRAP    #15
00001B18  183C 0000               1230              MOVE.B  #0,D4
00001B1C  4E75                    1231              RTS
00001B1E                          1232              
00001B1E  43F9 00002D35           1233  OP_EOR_W    LEA     DISP_EOR_W,A1
00001B24  103C 000E               1234              MOVE.B  #14,D0
00001B28  4E4F                    1235              TRAP    #15
00001B2A  183C 0001               1236              MOVE.B  #1,D4
00001B2E  4E75                    1237              RTS
00001B30                          1238              
00001B30  43F9 00002D3E           1239  OP_EOR_L    LEA     DISP_EOR_L,A1
00001B36  103C 000E               1240              MOVE.B  #14,D0
00001B3A  4E4F                    1241              TRAP    #15
00001B3C  183C 0002               1242              MOVE.B  #2,D4
00001B40  4E75                    1243              RTS    
00001B42                          1244  
00001B42                          1245  *---------------------------------------------------------------------------*
00001B42                          1246  * OP1100: Decode and display MULS/AND and proceed to EA
00001B42                          1247  *---------------------------------------------------------------------------* 
00001B42  4280                    1248  OP1100      CLR.L   D0                 
00001B44  4281                    1249              CLR.L   D1    
00001B46  4284                    1250              CLR.L   D4                
00001B48  227C 00000000           1251              MOVEA.L #0, A1             
00001B4E                          1252              
00001B4E  2205                    1253              MOVE.L  D5,D1
00001B50  EA89                    1254              LSR.L   #5,D1
00001B52  0281 0000000E           1255              ANDI.L  #$E,D1
00001B58  0C41 000E               1256              CMPI.W  #$E,D1
00001B5C  6700 0036               1257              BEQ     OP_MULS
00001B60  0C41 0000               1258              CMPI.W  #$0,D1
00001B64  6700 0042               1259              BEQ     OP_AND_B
00001B68  0C41 0002               1260              CMPI.W  #$2,D1
00001B6C  6700 004C               1261              BEQ     OP_AND_W
00001B70  0C41 0004               1262              CMPI.W  #$4,D1
00001B74  6700 0056               1263              BEQ     OP_AND_L
00001B78  0C41 0008               1264              CMPI.W  #$8,D1
00001B7C  6700 002A               1265              BEQ     OP_AND_B
00001B80  0C41 000A               1266              CMPI.W  #$A,D1
00001B84  6700 0034               1267              BEQ     OP_AND_W
00001B88  0C41 000C               1268              CMPI.W  #$C,D1
00001B8C  6700 003E               1269              BEQ     OP_AND_L
00001B90                          1270  
00001B90  4EF8 1462               1271              JMP     OP_DATA
00001B94                          1272  
00001B94  43F9 00002D76           1273  OP_MULS     LEA     DISP_MULS_W,A1
00001B9A  103C 000E               1274              MOVE.B  #14,D0
00001B9E  4E4F                    1275              TRAP    #15
00001BA0  4EF9 00001F76           1276              JMP     EA_ARITH
00001BA6  4E75                    1277              RTS
00001BA8                          1278              
00001BA8                          1279  OP_AND_B    
00001BA8  43F9 00002D80           1280              LEA     DISP_AND_B,A1
00001BAE  103C 000E               1281              MOVE.B  #14,D0
00001BB2  4E4F                    1282              TRAP    #15
00001BB4  183C 0000               1283              MOVE.B  #0,D4
00001BB8  4E75                    1284              RTS
00001BBA                          1285  
00001BBA                          1286  OP_AND_W
00001BBA  43F9 00002D89           1287              LEA     DISP_AND_W,A1
00001BC0  103C 000E               1288              MOVE.B  #14,D0
00001BC4  4E4F                    1289              TRAP    #15
00001BC6  183C 0001               1290              MOVE.B  #1,D4
00001BCA  4E75                    1291              RTS
00001BCC                          1292  
00001BCC                          1293  OP_AND_L
00001BCC  43F9 00002D92           1294              LEA     DISP_AND_L,A1
00001BD2  103C 000E               1295              MOVE.B  #14,D0
00001BD6  4E4F                    1296              TRAP    #15
00001BD8  183C 0002               1297              MOVE.B  #2,D4
00001BDC  4E75                    1298              RTS
00001BDE                          1299  
00001BDE                          1300  *---------------------------------------------------------------------------*
00001BDE                          1301  * OP1101: Decode ADD/ADDA
00001BDE                          1302  *---------------------------------------------------------------------------* 
00001BDE  4280                    1303  OP1101      CLR.L   D0                  
00001BE0  4281                    1304              CLR.L   D1       
00001BE2  4284                    1305              CLR.L   D4                   
00001BE4  227C 00000000           1306              MOVEA.L #0, A1              
00001BEA  2205                    1307              MOVE.L  D5,D1
00001BEC  EA99                    1308              ROR.L   #5,D1
00001BEE  0281 0000000E           1309              ANDI.L  #$E,D1
00001BF4  0C01 0000               1310              CMPI.B  #$0,D1
00001BF8  6700 003E               1311              BEQ     OP_ADD_B
00001BFC  0C01 0002               1312              CMPI.B  #$2,D1
00001C00  6700 004E               1313              BEQ     OP_ADD_W
00001C04  0C01 0004               1314              CMPI.B  #$4,D1
00001C08  6700 005E               1315              BEQ     OP_ADD_L
00001C0C  0C01 0008               1316              CMPI.B  #$8,D1
00001C10  6700 0026               1317              BEQ     OP_ADD_B
00001C14  0C01 000A               1318              CMPI.B  #$A,D1
00001C18  6700 0036               1319              BEQ     OP_ADD_W
00001C1C  0C01 000C               1320              CMPI.B  #$C,D1
00001C20  6700 0046               1321              BEQ     OP_ADD_L  
00001C24                          1322              
00001C24  0C01 0006               1323              CMPI.B  #$6,D1
00001C28  6700 0056               1324              BEQ     OP_ADDA_W
00001C2C  0C01 000E               1325              CMPI.B  #$E,D1
00001C30  6700 0066               1326              BEQ     OP_ADDA_L 
00001C34                          1327  
00001C34  4EF8 1462               1328              JMP     OP_DATA  
00001C38                          1329            
00001C38                          1330  *---------------------------------------------------------------------------*
00001C38                          1331  * OP_ADD: display ADD and proceed to EA
00001C38                          1332  *---------------------------------------------------------------------------*  
00001C38  43F9 00002D9B           1333  OP_ADD_B    LEA     DISP_ADD_B,A1
00001C3E  103C 000E               1334              MOVE.B  #14,D0
00001C42  4E4F                    1335              TRAP    #15
00001C44  183C 0000               1336              MOVE.B  #0,D4
00001C48  4EF9 00001FC2           1337              JMP     EA_GEN
00001C4E                          1338  
00001C4E  4E75                    1339              RTS
00001C50                          1340  
00001C50  43F9 00002DA4           1341  OP_ADD_W    LEA     DISP_ADD_W,A1
00001C56  103C 000E               1342              MOVE.B  #14,D0
00001C5A  4E4F                    1343              TRAP    #15
00001C5C  183C 0001               1344              MOVE.B  #1,D4
00001C60  4EF9 00001FC2           1345              JMP     EA_GEN
00001C66                          1346  
00001C66  4E75                    1347              RTS
00001C68                          1348  
00001C68  43F9 00002DAD           1349  OP_ADD_L    LEA     DISP_ADD_L,A1
00001C6E  103C 000E               1350              MOVE.B  #14,D0
00001C72  4E4F                    1351              TRAP    #15
00001C74  183C 0002               1352              MOVE.B  #2,D4
00001C78  4EF9 00001FC2           1353              JMP     EA_GEN
00001C7E                          1354  
00001C7E  4E75                    1355              RTS
00001C80                          1356  
00001C80                          1357  *---------------------------------------------------------------------------*
00001C80                          1358  * OP_ADDA: display ADDA and proceed to EA
00001C80                          1359  *---------------------------------------------------------------------------*  
00001C80  43F9 00002DB6           1360  OP_ADDA_W   LEA     DISP_ADDA_W,A1
00001C86  103C 000E               1361              MOVE.B  #14,D0
00001C8A  4E4F                    1362              TRAP    #15
00001C8C  183C 0001               1363              MOVE.B  #1,D4
00001C90  4EF9 00001FC2           1364              JMP     EA_GEN
00001C96                          1365  
00001C96  4E75                    1366              RTS
00001C98                          1367  
00001C98  43F9 00002DC0           1368  OP_ADDA_L   LEA     DISP_ADDA_L,A1
00001C9E  103C 000E               1369              MOVE.B  #14,D0
00001CA2  4E4F                    1370              TRAP    #15
00001CA4  183C 0002               1371              MOVE.B  #2,D4
00001CA8  4EF9 00001FC2           1372              JMP     EA_GEN
00001CAE                          1373  
00001CAE  4E75                    1374              RTS
00001CB0                          1375              
00001CB0                          1376  *---------------------------------------------------------------------------*
00001CB0                          1377  * OP1110: LSR/LSL/ASR/ASL/ROL/ROR
00001CB0                          1378  *---------------------------------------------------------------------------* 
00001CB0  4280                    1379  OP1110      CLR.L   D0                  
00001CB2  4281                    1380              CLR.L   D1   
00001CB4  4284                    1381              CLR.L   D4                   
00001CB6  227C 00000000           1382              MOVEA.L #0, A1                 
00001CBC  2205                    1383              MOVE.L  D5,D1
00001CBE                          1384              
00001CBE                          1385              * check for LSX
00001CBE  E699                    1386              ROR.L   #3,D1
00001CC0  0281 00000001           1387              ANDI.L  #$1,D1
00001CC6  0C01 0001               1388              CMPI.B  #1,D1
00001CCA  6700 002E               1389              BEQ     OP_LSX
00001CCE                          1390              
00001CCE                          1391              * reset D1 and check for ASX
00001CCE  4281                    1392              CLR.L   D1
00001CD0  2205                    1393              MOVE.L  D5,D1
00001CD2  E699                    1394              ROR.L   #3,D1
00001CD4  0281 00000001           1395              ANDI.L  #$1,D1
00001CDA  0C01 0000               1396              CMPI.B  #0,D1
00001CDE  6700 0032               1397              BEQ     OP_ASX
00001CE2                          1398  
00001CE2                          1399              * reset D1 and check for ROX
00001CE2  4281                    1400              CLR.L   D1
00001CE4  2205                    1401              MOVE.L  D5,D1
00001CE6  E699                    1402              ROR.L   #3,D1
00001CE8  0281 00000001           1403              ANDI.L  #$1,D1
00001CEE  0C01 0003               1404              CMPI.B  #3,D1
00001CF2  6700 0036               1405              BEQ     OP_ROX
00001CF6                          1406              
00001CF6  4EF8 1462               1407              JMP     OP_DATA
00001CFA                          1408  
00001CFA                          1409  *---------------------------------------------------------------------------*
00001CFA                          1410  * OP_LSX: process LSR/LSL
00001CFA                          1411  *---------------------------------------------------------------------------*            
00001CFA  EA99                    1412  OP_LSX      ROR.L   #5,D1
00001CFC  0281 00000001           1413              ANDI.L  #$1,D1
00001D02  0C01 0000               1414              CMPI.B  #0,D1
00001D06  6700 003A               1415              BEQ     OP_LSR
00001D0A  0C01 0001               1416              CMPI.B  #1,D1
00001D0E  6700 008C               1417              BEQ     OP_LSL
00001D12                          1418              
00001D12                          1419  *---------------------------------------------------------------------------*
00001D12                          1420  * OP_ASX: process ASR/ASL
00001D12                          1421  *---------------------------------------------------------------------------*  
00001D12  EA99                    1422  OP_ASX      ROR.L   #5,D1
00001D14  0281 00000001           1423              ANDI.L  #$1,D1
00001D1A  0C01 0000               1424              CMPI.B  #0,D1
00001D1E  6700 00D6               1425              BEQ     OP_ASR
00001D22  0C01 0001               1426              CMPI.B  #1,D1
00001D26  6700 0128               1427              BEQ     OP_ASL
00001D2A                          1428              
00001D2A                          1429  *---------------------------------------------------------------------------*
00001D2A                          1430  * OP_ROX: process ROR/ROL
00001D2A                          1431  *---------------------------------------------------------------------------*  
00001D2A  EA99                    1432  OP_ROX      ROR.L   #5,D1
00001D2C  0281 00000001           1433              ANDI.L  #$1,D1
00001D32  0C01 0000               1434              CMPI.B  #0,D1
00001D36  6700 0172               1435              BEQ     OP_ROR
00001D3A  0C01 0001               1436              CMPI.B  #1,D1
00001D3E  6700 01C4               1437              BEQ     OP_ROL
00001D42                          1438  
00001D42                          1439  *---------------------------------------------------------------------------*
00001D42                          1440  * OP_LSR: decode and display LSR
00001D42                          1441  *---------------------------------------------------------------------------*        
00001D42  E599                    1442  OP_LSR      ROL.L   #2,D1
00001D44  0281 00000003           1443              ANDI.L  #$3,D1
00001D4A  0C01 0000               1444              CMPI.B  #0,D1
00001D4E  6700 0016               1445              BEQ     OP_LSR_B
00001D52  0C01 0001               1446              CMPI.B  #$1,D1
00001D56  6700 0032               1447              BEQ     OP_LSR_W
00001D5A  0C01 0002               1448              CMPI.B  #$2,D1
00001D5E  6700 0018               1449              BEQ     OP_LSR_L
00001D62                          1450              
00001D62  4EF8 1462               1451              JMP     OP_DATA
00001D66                          1452  
00001D66  43F9 00002DCA           1453  OP_LSR_B    LEA     DISP_LSR_B,A1
00001D6C  103C 000E               1454              MOVE.B  #14,D0
00001D70  4E4F                    1455              TRAP    #15
00001D72  183C 0000               1456              MOVE.B  #0,D4
00001D76  4E75                    1457              RTS
00001D78                          1458  
00001D78  43F9 00002DEE           1459  OP_LSR_L    LEA     DISP_LSR_L,A1
00001D7E  103C 000E               1460              MOVE.B  #14,D0
00001D82  4E4F                    1461              TRAP    #15
00001D84  183C 0002               1462              MOVE.B  #2,D4
00001D88  4E75                    1463              RTS
00001D8A                          1464  
00001D8A  43F9 00002DDC           1465  OP_LSR_W    LEA     DISP_LSR_W,A1
00001D90  103C 000E               1466              MOVE.B  #14,D0
00001D94  4E4F                    1467              TRAP    #15
00001D96  183C 0001               1468              MOVE.B  #1,D4
00001D9A  4E75                    1469              RTS
00001D9C                          1470   
00001D9C                          1471  *---------------------------------------------------------------------------*
00001D9C                          1472  * OP_LSL: decode and display LSL
00001D9C                          1473  *---------------------------------------------------------------------------*             
00001D9C  E599                    1474  OP_LSL      ROL.L   #2,D1
00001D9E  0281 00000003           1475              ANDI.L  #$3,D1
00001DA4  0C01 0000               1476              CMPI.B  #0,D1
00001DA8  6700 0016               1477              BEQ     OP_LSL_B
00001DAC  0C01 0001               1478              CMPI.B  #$1,D1
00001DB0  6700 0032               1479              BEQ     OP_LSL_W
00001DB4  0C01 0002               1480              CMPI.B  #$2,D1
00001DB8  6700 0018               1481              BEQ     OP_LSL_L
00001DBC                          1482              
00001DBC  4EF8 1462               1483              JMP OP_DATA
00001DC0                          1484  
00001DC0  43F9 00002DD3           1485  OP_LSL_B    LEA     DISP_LSL_B,A1
00001DC6  103C 000E               1486              MOVE.B  #14,D0
00001DCA  4E4F                    1487              TRAP    #15
00001DCC  183C 0000               1488              MOVE.B  #0,D4
00001DD0  4E75                    1489              RTS
00001DD2                          1490  
00001DD2  43F9 00002DF7           1491  OP_LSL_L    LEA     DISP_LSL_L,A1
00001DD8  103C 000E               1492              MOVE.B  #14,D0
00001DDC  4E4F                    1493              TRAP    #15
00001DDE  183C 0002               1494              MOVE.B  #2,D4
00001DE2  4E75                    1495              RTS
00001DE4                          1496  
00001DE4  43F9 00002DE5           1497  OP_LSL_W    LEA     DISP_LSL_W,A1
00001DEA  103C 000E               1498              MOVE.B  #14,D0
00001DEE  4E4F                    1499              TRAP    #15
00001DF0  183C 0001               1500              MOVE.B  #1,D4
00001DF4  4E75                    1501              RTS
00001DF6                          1502   
00001DF6                          1503  *---------------------------------------------------------------------------*
00001DF6                          1504  * OP_ASR: decode and display ASR
00001DF6                          1505  *---------------------------------------------------------------------------*             
00001DF6  E599                    1506  OP_ASR      ROL.L   #2,D1
00001DF8  0281 00000003           1507              ANDI.L  #$3,D1
00001DFE  0C01 0000               1508              CMPI.B  #0,D1
00001E02  6700 0016               1509              BEQ     OP_ASR_B
00001E06  0C01 0001               1510              CMPI.B  #$1,D1
00001E0A  6700 0032               1511              BEQ     OP_ASR_W
00001E0E  0C01 0002               1512              CMPI.B  #$2,D1
00001E12  6700 0018               1513              BEQ     OP_ASR_L
00001E16                          1514              
00001E16  4EF8 1462               1515              JMP OP_DATA
00001E1A                          1516  
00001E1A  43F9 00002E00           1517  OP_ASR_B    LEA     DISP_ASR_B,A1
00001E20  103C 000E               1518              MOVE.B  #14,D0
00001E24  4E4F                    1519              TRAP    #15
00001E26  183C 0000               1520              MOVE.B  #0,D4
00001E2A  4E75                    1521              RTS
00001E2C                          1522  
00001E2C  43F9 00002E24           1523  OP_ASR_L    LEA     DISP_ASR_L,A1
00001E32  103C 000E               1524              MOVE.B  #14,D0
00001E36  4E4F                    1525              TRAP    #15
00001E38  183C 0002               1526              MOVE.B  #2,D4
00001E3C  4E75                    1527              RTS
00001E3E                          1528  
00001E3E  43F9 00002E12           1529  OP_ASR_W    LEA     DISP_ASR_W,A1
00001E44  103C 000E               1530              MOVE.B  #14,D0
00001E48  4E4F                    1531              TRAP    #15
00001E4A  183C 0001               1532              MOVE.B  #1,D4
00001E4E  4E75                    1533              RTS
00001E50                          1534       
00001E50                          1535  *---------------------------------------------------------------------------*
00001E50                          1536  * OP_ASL: decode and display ASL
00001E50                          1537  *---------------------------------------------------------------------------*         
00001E50  E599                    1538  OP_ASL      ROL.L   #2,D1
00001E52  0281 00000003           1539              ANDI.L  #$3,D1
00001E58  0C01 0000               1540              CMPI.B  #0,D1
00001E5C  6700 0016               1541              BEQ     OP_ASL_B
00001E60  0C01 0001               1542              CMPI.B  #$1,D1
00001E64  6700 0032               1543              BEQ     OP_ASL_W
00001E68  0C01 0002               1544              CMPI.B  #$2,D1
00001E6C  6700 0018               1545              BEQ     OP_ASL_L
00001E70                          1546              
00001E70  4EF8 1462               1547              JMP OP_DATA
00001E74                          1548  
00001E74  43F9 00002E09           1549  OP_ASL_B    LEA     DISP_ASL_B,A1
00001E7A  103C 000E               1550              MOVE.B  #14,D0
00001E7E  4E4F                    1551              TRAP    #15
00001E80  183C 0000               1552              MOVE.B  #0,D4
00001E84  4E75                    1553              RTS
00001E86                          1554  
00001E86  43F9 00002E2D           1555  OP_ASL_L    LEA     DISP_ASL_L,A1
00001E8C  103C 000E               1556              MOVE.B  #14,D0
00001E90  4E4F                    1557              TRAP    #15
00001E92  183C 0002               1558              MOVE.B  #2,D4
00001E96  4E75                    1559              RTS
00001E98                          1560  
00001E98  43F9 00002E1B           1561  OP_ASL_W    LEA     DISP_ASL_W,A1
00001E9E  103C 000E               1562              MOVE.B  #14,D0
00001EA2  4E4F                    1563              TRAP    #15
00001EA4  183C 0001               1564              MOVE.B  #1,D4
00001EA8  4E75                    1565              RTS
00001EAA                          1566   
00001EAA                          1567  *---------------------------------------------------------------------------*
00001EAA                          1568  * OP_ROR: decode and display ROR
00001EAA                          1569  *---------------------------------------------------------------------------*             
00001EAA  E599                    1570  OP_ROR      ROL.L   #2,D1
00001EAC  0281 00000003           1571              ANDI.L  #$3,D1
00001EB2  0C01 0000               1572              CMPI.B  #0,D1
00001EB6  6700 0016               1573              BEQ     OP_ROR_B
00001EBA  0C01 0001               1574              CMPI.B  #$1,D1
00001EBE  6700 0032               1575              BEQ     OP_ROR_W
00001EC2  0C01 0002               1576              CMPI.B  #$2,D1
00001EC6  6700 0018               1577              BEQ     OP_ROR_L
00001ECA                          1578              
00001ECA  4EF8 1462               1579              JMP OP_DATA
00001ECE                          1580  
00001ECE  43F9 00002E36           1581  OP_ROR_B    LEA     DISP_ROR_B,A1
00001ED4  103C 000E               1582              MOVE.B  #14,D0
00001ED8  4E4F                    1583              TRAP    #15
00001EDA  183C 0000               1584              MOVE.B  #0,D4
00001EDE  4E75                    1585              RTS
00001EE0                          1586  
00001EE0  43F9 00002E5A           1587  OP_ROR_L    LEA     DISP_ROR_L,A1
00001EE6  103C 000E               1588              MOVE.B  #14,D0
00001EEA  4E4F                    1589              TRAP    #15
00001EEC  183C 0002               1590              MOVE.B  #2,D4
00001EF0  4E75                    1591              RTS
00001EF2                          1592  
00001EF2  43F9 00002E48           1593  OP_ROR_W    LEA     DISP_ROR_W,A1
00001EF8  103C 000E               1594              MOVE.B  #14,D0
00001EFC  4E4F                    1595              TRAP    #15
00001EFE  183C 0001               1596              MOVE.B  #1,D4
00001F02  4E75                    1597              RTS
00001F04                          1598  
00001F04                          1599  *---------------------------------------------------------------------------*
00001F04                          1600  * OP_ROL: decode and display ROL
00001F04                          1601  *---------------------------------------------------------------------------*             
00001F04  E599                    1602  OP_ROL      ROL.L   #2,D1
00001F06  0281 00000003           1603              ANDI.L  #$3,D1
00001F0C  0C01 0000               1604              CMPI.B  #0,D1
00001F10  6700 0016               1605              BEQ     OP_ROL_B
00001F14  0C01 0001               1606              CMPI.B  #$1,D1
00001F18  6700 0032               1607              BEQ     OP_ROL_W
00001F1C  0C01 0002               1608              CMPI.B  #$2,D1
00001F20  6700 0018               1609              BEQ     OP_ROL_L
00001F24                          1610              
00001F24  4EF8 1462               1611              JMP OP_DATA
00001F28                          1612  
00001F28                          1613  
00001F28  43F9 00002E3F           1614  OP_ROL_B    LEA     DISP_ROL_B,A1
00001F2E  103C 000E               1615              MOVE.B  #14,D0
00001F32  4E4F                    1616              TRAP    #15
00001F34  183C 0000               1617              MOVE.B  #0,D4
00001F38  4E75                    1618              RTS
00001F3A                          1619  
00001F3A  43F9 00002E63           1620  OP_ROL_L    LEA     DISP_ROL_L,A1
00001F40  103C 000E               1621              MOVE.B  #14,D0
00001F44  4E4F                    1622              TRAP    #15
00001F46  183C 0002               1623              MOVE.B  #2,D4
00001F4A  4E75                    1624              RTS
00001F4C                          1625  
00001F4C  43F9 00002E51           1626  OP_ROL_W    LEA     DISP_ROL_W,A1
00001F52  103C 000E               1627              MOVE.B  #14,D0
00001F56  4E4F                    1628              TRAP    #15
00001F58  183C 0001               1629              MOVE.B  #1,D4
00001F5C  4E75                    1630              RTS
00001F5E                          1631              
00001F5E                          1632  *---------------------------------------------------------------------------*
00001F5E                          1633  * OP1111 : Special reserved
00001F5E                          1634  *---------------------------------------------------------------------------*           
00001F5E  4EF8 1462               1635  OP1111      JMP     OP_DATA
00001F62                          1636  
00001F62                          1637  *---------------------------------------------------------------------------*
00001F62                          1638  * EA_NOSRC: decode and display effective addresses for NEG/JSR
00001F62                          1639  *---------------------------------------------------------------------------*
00001F62                          1640  EA_NOSRC    
00001F62  4EB9 00002020           1641              JSR     SRC_MODE
00001F68  43F9 00002B30           1642              LEA     ENDLINE_M,A1
00001F6E  103C 000E               1643              MOVE.B  #14,D0
00001F72  4E4F                    1644              TRAP    #15
00001F74  4E75                    1645              RTS
00001F76                          1646              
00001F76                          1647  *---------------------------------------------------------------------------*
00001F76                          1648  * EA_ARITH: decode and display effective addresses for DIVS/MULS
00001F76                          1649  *---------------------------------------------------------------------------*
00001F76                          1650  EA_ARITH
00001F76  4EB9 00002020           1651              JSR     SRC_MODE
00001F7C  43F9 00002EAA           1652              LEA     DISP_D,A1
00001F82  103C 000E               1653              MOVE.B  #14,D0
00001F86  4E4F                    1654              TRAP    #15
00001F88  4EB9 000022AC           1655              JSR     DEST_REGISTER
00001F8E  43F9 00002B30           1656              LEA     ENDLINE_M,A1
00001F94  103C 000E               1657              MOVE.B  #14,D0
00001F98  4E4F                    1658              TRAP    #15
00001F9A  4E75                    1659              RTS
00001F9C                          1660              
00001F9C                          1661  *---------------------------------------------------------------------------*
00001F9C                          1662  * EA_MOVEA: decode and display effective addresses for MOVEA/LEA
00001F9C                          1663  *---------------------------------------------------------------------------*
00001F9C                          1664  EA_MOVEA
00001F9C  4EB9 00002020           1665              JSR     SRC_MODE
00001FA2  43F9 00002EBB           1666              LEA     DISP_AOP,A1
00001FA8  103C 000E               1667              MOVE.B  #14,D0
00001FAC  4E4F                    1668              TRAP    #15
00001FAE  4EB9 000022AC           1669              JSR     DEST_REGISTER
00001FB4  43F9 00002EB9           1670              LEA     DISP_CP,A1
00001FBA  103C 000D               1671              MOVE.B  #13,D0
00001FBE  4E4F                    1672              TRAP    #15
00001FC0  4E75                    1673              RTS
00001FC2                          1674              
00001FC2                          1675  *---------------------------------------------------------------------------*
00001FC2                          1676  * EA_GEN: decode and display effective addresses for MOVE
00001FC2                          1677  *---------------------------------------------------------------------------*
00001FC2                          1678  EA_GEN          
00001FC2                          1679              * retrieve/display source mode/register
00001FC2  4EB9 00002020           1680              JSR     SRC_MODE
00001FC8                          1681              
00001FC8                          1682              * retrieve/display destination mode/register
00001FC8  4EB9 00001FDC           1683              JSR     DEST_MODE
00001FCE                          1684              
00001FCE  43F9 00002B30           1685              LEA     ENDLINE_M,A1
00001FD4  103C 000E               1686              MOVE.B  #14,D0
00001FD8  4E4F                    1687              TRAP    #15
00001FDA                          1688              
00001FDA  4E75                    1689              RTS
00001FDC                          1690  
00001FDC                          1691  *---------------------------------------------------------------------------*
00001FDC                          1692  * DEST_MODE: decode and display destination mode (bit 8 - 6)
00001FDC                          1693  *---------------------------------------------------------------------------*           
00001FDC                          1694  DEST_MODE   
00001FDC                          1695              * clear registers to store temp data
00001FDC  4280                    1696              CLR.L   D0                      
00001FDE  4281                    1697              CLR.L   D1                      
00001FE0  207C 00000000           1698              MOVEA.L #0, A0                  
00001FE6  227C 00000000           1699              MOVEA.L #0, A1                  
00001FEC  2205                    1700              MOVE.L  D5,D1
00001FEE  EC89                    1701              LSR.L   #6,D1
00001FF0  0281 00000007           1702              ANDI.L  #$7,D1
00001FF6  0C01 0000               1703              CMPI.B  #0,D1   * Dn
00001FFA  6700 0082               1704              BEQ     D_MODE000
00001FFE  0C01 0002               1705              CMPI.B  #2,D1   * (An)
00002002  6700 00C2               1706              BEQ     D_MODE010
00002006  0C01 0003               1707              CMPI.B  #3,D1   * (An)+
0000200A  6700 011A               1708              BEQ     D_MODE011
0000200E  0C01 0004               1709              CMPI.B  #4,D1   * -(An)
00002012  6700 0132               1710              BEQ     D_MODE100
00002016  0C01 0007               1711              CMPI.B  #7,D1  * abs
0000201A  6700 017C               1712              BEQ     D_MODE111 
0000201E  4E75                    1713              RTS
00002020                          1714  
00002020                          1715  *---------------------------------------------------------------------------*
00002020                          1716  * SRC_MODE: decode and display source mode (bit 5 - 3)
00002020                          1717  *---------------------------------------------------------------------------*  
00002020                          1718  SRC_MODE    
00002020                          1719              * clear registers to store temp data
00002020  4280                    1720              CLR.L   D0                      
00002022  4281                    1721              CLR.L   D1                      
00002024  207C 00000000           1722              MOVEA.L #0, A0                  
0000202A  227C 00000000           1723              MOVEA.L #0, A1                  
00002030  2205                    1724              MOVE.L  D5,D1
00002032  E489                    1725              LSR.L   #2,D1
00002034  0281 0000000E           1726              ANDI.L  #$E,D1
0000203A                          1727              
0000203A  0C01 0000               1728              CMPI.B  #0,D1   * Dn
0000203E  6700 002A               1729              BEQ     MODE000
00002042  0C01 0002               1730              CMPI.B  #2,D1   * An 
00002046  6700 004A               1731              BEQ     MODE001
0000204A  0C01 0004               1732              CMPI.B  #4,D1   * (An)
0000204E  6700 0056               1733              BEQ     MODE010
00002052  0C01 0006               1734              CMPI.B  #6,D1   * (An)+
00002056  6700 008E               1735              BEQ     MODE011
0000205A  0C01 0008               1736              CMPI.B  #8,D1   * -(An)
0000205E  6700 00A6               1737              BEQ     MODE100
00002062  0C01 000F               1738              CMPI.B  #15,D1  * abs/immediate
00002066  6700 00FE               1739              BEQ     MODE111 
0000206A                          1740        
0000206A                          1741  *---------------------------------------------------------------------------*
0000206A                          1742  * MODE000: decode and display source mode Dn
0000206A                          1743  *---------------------------------------------------------------------------*           
0000206A                          1744  MODE000     *Dn
0000206A  43F9 00002EAA           1745              LEA     DISP_D,A1
00002070  103C 000E               1746              MOVE.B  #14,D0
00002074  4E4F                    1747              TRAP    #15
00002076  4EB9 00002308           1748              JSR     SRC_REGISTER
0000207C  4E75                    1749              RTS
0000207E                          1750  
0000207E                          1751  *---------------------------------------------------------------------------*
0000207E                          1752  * D_MODE000: decode and display dest mode Dn
0000207E                          1753  *---------------------------------------------------------------------------*
0000207E                          1754  D_MODE000     *Dn
0000207E  43F9 00002EAA           1755              LEA     DISP_D,A1
00002084  103C 000E               1756              MOVE.B  #14,D0
00002088  4E4F                    1757              TRAP    #15
0000208A  4EB9 000022AC           1758              JSR     DEST_REGISTER
00002090  4E75                    1759              RTS
00002092                          1760  
00002092                          1761  *---------------------------------------------------------------------------*
00002092                          1762  * MODE001: decode and display source mode An
00002092                          1763  *---------------------------------------------------------------------------* 
00002092                          1764  MODE001 *An
00002092  43F9 00002EAF           1765              LEA     DISP_A,A1
00002098  103C 000E               1766              MOVE.B  #14,D0
0000209C  4E4F                    1767              TRAP    #15
0000209E  4EB9 00002308           1768              JSR     SRC_REGISTER
000020A4                          1769          
000020A4  4E75                    1770              RTS
000020A6                          1771  
000020A6                          1772  *---------------------------------------------------------------------------*
000020A6                          1773  * MODE010: decode and display source mode (An)
000020A6                          1774  *---------------------------------------------------------------------------*    
000020A6                          1775  MODE010 *(An)
000020A6  43F9 00002EBB           1776              LEA     DISP_AOP,A1  *display (A
000020AC  103C 000E               1777              MOVE.B  #14,D0
000020B0  4E4F                    1778              TRAP    #15
000020B2                          1779  
000020B2  4EB9 00002308           1780              JSR     SRC_REGISTER * display register
000020B8                          1781  
000020B8  43F9 00002EB9           1782              LEA     DISP_CP,A1   *display )
000020BE  103C 000E               1783              MOVE.B  #14,D0
000020C2  4E4F                    1784              TRAP    #15
000020C4                          1785              
000020C4  4E75                    1786              RTS
000020C6                          1787  
000020C6                          1788  *---------------------------------------------------------------------------*
000020C6                          1789  * D_MODE010: decode and display dest mode (An)
000020C6                          1790  *---------------------------------------------------------------------------*
000020C6                          1791  D_MODE010 *(An)
000020C6  43F9 00002EBB           1792              LEA     DISP_AOP,A1  *display (A
000020CC  103C 000E               1793              MOVE.B  #14,D0
000020D0  4E4F                    1794              TRAP    #15
000020D2                          1795     
000020D2  4EB9 000022AC           1796              JSR     DEST_REGISTER * display register
000020D8                          1797  
000020D8  43F9 00002EB9           1798              LEA     DISP_CP,A1   *display )
000020DE  103C 000E               1799              MOVE.B  #14,D0
000020E2  4E4F                    1800              TRAP    #15
000020E4                          1801              
000020E4  4E75                    1802              RTS
000020E6                          1803  
000020E6                          1804  *---------------------------------------------------------------------------*
000020E6                          1805  * MODE011: decode and display source mode (An)+
000020E6                          1806  *---------------------------------------------------------------------------*
000020E6                          1807  MODE011 *(An)+
000020E6  43F9 00002EBB           1808              LEA     DISP_AOP,A1      *display (A
000020EC  103C 000E               1809              MOVE.B  #14,D0
000020F0  4E4F                    1810              TRAP    #15
000020F2                          1811              
000020F2  4EB9 00002308           1812              JSR     SRC_REGISTER    * display register
000020F8                          1813  
000020F8  43F9 00002EC8           1814              LEA     DISP_POST,A1    *display )+
000020FE  103C 000E               1815              MOVE.B  #14,D0
00002102  4E4F                    1816              TRAP    #15
00002104                          1817              
00002104  4E75                    1818              RTS
00002106                          1819              
00002106                          1820  *---------------------------------------------------------------------------*
00002106                          1821  * MODE100: decode and display source mode -(An)
00002106                          1822  *---------------------------------------------------------------------------*
00002106                          1823  MODE100 *-(An)
00002106  43F9 00002EC1           1824              LEA     DISP_PRE,A1    *display -(A
0000210C  103C 000E               1825              MOVE.B  #14,D0
00002110  4E4F                    1826              TRAP    #15
00002112                          1827  
00002112  4EB9 00002308           1828              JSR     SRC_REGISTER    *display register
00002118                          1829  
00002118  43F9 00002EB9           1830              LEA     DISP_CP,A1   *display )
0000211E  103C 000E               1831              MOVE.B  #14,D0
00002122  4E4F                    1832              TRAP    #15
00002124                          1833              
00002124  4E75                    1834              RTS
00002126                          1835  
00002126                          1836  *---------------------------------------------------------------------------*
00002126                          1837  * D_MODE011: decode and display dest mode (An)+
00002126                          1838  *---------------------------------------------------------------------------*
00002126                          1839  D_MODE011 *(An)+
00002126  43F9 00002EBB           1840              LEA     DISP_AOP,A1      *display (A
0000212C  103C 000E               1841              MOVE.B  #14,D0
00002130  4E4F                    1842              TRAP    #15
00002132                          1843  
00002132  4EB9 000022AC           1844              JSR     DEST_REGISTER    * display register
00002138                          1845  
00002138  43F9 00002EC8           1846              LEA     DISP_POST,A1    *display )+
0000213E  103C 000E               1847              MOVE.B  #14,D0
00002142  4E4F                    1848              TRAP    #15
00002144                          1849              
00002144  4E75                    1850              RTS
00002146                          1851              
00002146                          1852  *---------------------------------------------------------------------------*
00002146                          1853  * D_MODE100: decode and display dest mode -(An)
00002146                          1854  *---------------------------------------------------------------------------*            
00002146                          1855  D_MODE100 *-(An)
00002146  43F9 00002EC1           1856              LEA     DISP_PRE,A1    *display -(A
0000214C  103C 000E               1857              MOVE.B  #14,D0
00002150  4E4F                    1858              TRAP    #15
00002152                          1859              
00002152  4EB9 000022AC           1860              JSR     DEST_REGISTER    *display register
00002158                          1861  
00002158  43F9 00002EB9           1862              LEA     DISP_CP,A1   *display )
0000215E  103C 000E               1863              MOVE.B  #14,D0
00002162  4E4F                    1864              TRAP    #15
00002164                          1865              
00002164  4E75                    1866              RTS
00002166                          1867  
00002166                          1868  *---------------------------------------------------------------------------*
00002166                          1869  * MODE111: decode and display source mode absolute/immediate
00002166                          1870  *---------------------------------------------------------------------------*
00002166                          1871  MODE111     * abs/immediate
00002166                          1872              * clear registers to store temp data
00002166  4280                    1873              CLR.L   D0                      
00002168  4281                    1874              CLR.L   D1                      
0000216A  207C 00000000           1875              MOVEA.L #0, A0                  
00002170  227C 00000000           1876              MOVEA.L #0, A1                  
00002176  2205                    1877              MOVE.L  D5,D1
00002178                          1878              
00002178                          1879              * retrieve source register for MODE 111
00002178  E389                    1880              LSL.L   #1,D1   * shift the bits to left by 1
0000217A  0281 0000000E           1881              ANDI.L  #$E,D1  * mask the first 4 bits 
00002180  0C01 0000               1882              CMPI.B  #0, D1  * if it's 0000, absolute word address
00002184  6700 003E               1883              BEQ     WORDMODE
00002188  0C01 0002               1884              CMPI.B  #2, D1  * if it's 0010, absolute long address
0000218C  6700 0062               1885              BEQ     LONGMODE
00002190  0C01 0008               1886              CMPI.B  #8, D1  * if it's 1000, immediate data
00002194  6700 0086               1887              BEQ     IMMEDIATE
00002198                          1888       
00002198                          1889  *---------------------------------------------------------------------------*
00002198                          1890  * D_MODE111: decode and display dest mode absolute/immediate
00002198                          1891  *---------------------------------------------------------------------------*           
00002198                          1892  D_MODE111   * abs
00002198                          1893              * clear registers to store temp data
00002198  4280                    1894              CLR.L   D0                      
0000219A  4281                    1895              CLR.L   D1                      
0000219C  207C 00000000           1896              MOVEA.L #0, A0                  
000021A2  227C 00000000           1897              MOVEA.L #0, A1                  
000021A8  2205                    1898              MOVE.L  D5,D1
000021AA                          1899              
000021AA                          1900              * retrieve dest register for MODE 111
000021AA  EC89                    1901              LSR.L   #6,D1   * shift the bits to right by 6
000021AC  E689                    1902              LSR.L   #3,D1   * shift the bits to right by extra 3
000021AE  0201 0001               1903              ANDI.B  #1,D1   * mask the first 2 bits 
000021B2  0C01 0000               1904              CMPI.B  #0, D1  * if it's 000, absolute word address
000021B6  6700 000C               1905              BEQ     WORDMODE
000021BA  0C01 0001               1906              CMPI.B  #1, D1  * if it's 001, absolute long address
000021BE  6700 0030               1907              BEQ     LONGMODE
000021C2                          1908              *JSR     OP_DATA *not sure..
000021C2  4E75                    1909              RTS
000021C4                          1910  
000021C4                          1911  
000021C4                          1912  *---------------------------------------------------------------------------*
000021C4                          1913  * WORDMODE: absolute word address
000021C4                          1914  *---------------------------------------------------------------------------*
000021C4  43F9 00002EA5           1915  WORDMODE    LEA     DISP_HEX,A1
000021CA  103C 000E               1916              MOVE.B  #14,D0
000021CE  4E4F                    1917              TRAP    #15
000021D0                          1918              
000021D0  4285                    1919              CLR.L   D5
000021D2  3A1D                    1920              MOVE.W  (A5)+,D5
000021D4                          1921              
000021D4  43F9 00002B83           1922              LEA     TMPOUTPUT,A1
000021DA  2205                    1923              MOVE.L  D5,D1
000021DC  7404                    1924              MOVE.L  #4,D2       *move word size 4
000021DE  4EB8 11BE               1925              JSR     HEX2ASCII
000021E2  43F9 00002B83           1926              LEA     TMPOUTPUT,A1
000021E8  103C 000E               1927              MOVE.B  #14,D0
000021EC  4E4F                    1928              TRAP    #15
000021EE                          1929              
000021EE  4E75                    1930              RTS
000021F0                          1931  
000021F0                          1932  *---------------------------------------------------------------------------*
000021F0                          1933  * LONGMODE: absolute long address
000021F0                          1934  *---------------------------------------------------------------------------*
000021F0  43F9 00002EA5           1935  LONGMODE    LEA     DISP_HEX,A1
000021F6  103C 000E               1936              MOVE.B  #14,D0
000021FA  4E4F                    1937              TRAP    #15
000021FC                          1938              
000021FC  4285                    1939              CLR.L   D5
000021FE  2A1D                    1940              MOVE.L  (A5)+,D5
00002200                          1941              
00002200  43F9 00002B83           1942              LEA     TMPOUTPUT,A1
00002206  2205                    1943              MOVE.L  D5,D1
00002208  7408                    1944              MOVE.L  #8,D2           *move longword size 8
0000220A  4EB8 11BE               1945              JSR     HEX2ASCII
0000220E  43F9 00002B83           1946              LEA     TMPOUTPUT,A1
00002214  103C 000E               1947              MOVE.B  #14,D0
00002218  4E4F                    1948              TRAP    #15
0000221A                          1949              
0000221A  4E75                    1950              RTS
0000221C                          1951  
0000221C                          1952  
0000221C                          1953  *---------------------------------------------------------------------------*
0000221C                          1954  * IMMEDIATE: immediate address
0000221C                          1955  *---------------------------------------------------------------------------*
0000221C  43F9 00002ECB           1956  IMMEDIATE   LEA     DISP_LB,A1
00002222  103C 000E               1957              MOVE.B  #14,D0
00002226  4E4F                    1958              TRAP    #15
00002228  43F9 00002EA5           1959              LEA     DISP_HEX,A1
0000222E  103C 000E               1960              MOVE.B  #14,D0
00002232  4E4F                    1961              TRAP    #15
00002234                          1962              
00002234                          1963              * check for size
00002234  0C04 0000               1964              CMPI.B  #0,D4
00002238  6700 0012               1965              BEQ     IMMD_B
0000223C  0C04 0001               1966              CMPI.B  #1,D4
00002240  6700 002A               1967              BEQ     IMMD_W
00002244  0C04 0002               1968              CMPI.B  #2,D4
00002248  6700 0042               1969              BEQ     IMMD_L
0000224C                          1970  
0000224C                          1971  IMMD_B
0000224C  4285                    1972              CLR.L   D5
0000224E  3A1D                    1973              MOVE.W  (A5)+,D5
00002250                          1974              
00002250  43F9 00002B83           1975              LEA     TMPOUTPUT,A1
00002256  2205                    1976              MOVE.L  D5,D1
00002258  7402                    1977              MOVE.L  #2,D2
0000225A  4EB8 11BE               1978              JSR     HEX2ASCII
0000225E  43F9 00002B83           1979              LEA     TMPOUTPUT,A1
00002264  103C 000E               1980              MOVE.B  #14,D0
00002268  4E4F                    1981              TRAP    #15
0000226A  4E75                    1982              RTS
0000226C                          1983              
0000226C                          1984  IMMD_W
0000226C  4285                    1985              CLR.L   D5
0000226E  3A1D                    1986              MOVE.W  (A5)+,D5
00002270                          1987              
00002270  43F9 00002B83           1988              LEA     TMPOUTPUT,A1
00002276  2205                    1989              MOVE.L  D5,D1
00002278  7404                    1990              MOVE.L  #4,D2
0000227A  4EB8 11BE               1991              JSR     HEX2ASCII
0000227E  43F9 00002B83           1992              LEA     TMPOUTPUT,A1
00002284  103C 000E               1993              MOVE.B  #14,D0
00002288  4E4F                    1994              TRAP    #15
0000228A  4E75                    1995              RTS
0000228C                          1996              
0000228C                          1997  
0000228C                          1998  IMMD_L
0000228C  4285                    1999              CLR.L   D5
0000228E  3A1D                    2000              MOVE.W  (A5)+,D5
00002290                          2001              
00002290  43F9 00002B83           2002              LEA     TMPOUTPUT,A1
00002296  2205                    2003              MOVE.L  D5,D1
00002298  7408                    2004              MOVE.L  #8,D2
0000229A  4EB8 11BE               2005              JSR     HEX2ASCII
0000229E  43F9 00002B83           2006              LEA     TMPOUTPUT,A1
000022A4  103C 000E               2007              MOVE.B  #14,D0
000022A8  4E4F                    2008              TRAP    #15
000022AA  4E75                    2009              RTS
000022AC                          2010  
000022AC                          2011  
000022AC                          2012  *---------------------------------------------------------------------------*
000022AC                          2013  * DEST_REGISTER: decode and display destination register (bit 11 - 9)
000022AC                          2014  *---------------------------------------------------------------------------*
000022AC                          2015  DEST_REGISTER
000022AC                          2016              * clear registers to store temp data
000022AC  4280                    2017              CLR.L   D0                      
000022AE  4281                    2018              CLR.L   D1                      
000022B0  207C 00000000           2019              MOVEA.L #0, A0                  
000022B6  227C 00000000           2020              MOVEA.L #0, A1 
000022BC                          2021              
000022BC  2205                    2022              MOVE.L  D5,D1
000022BE  EC89                    2023              LSR.L   #6,D1
000022C0  E689                    2024              LSR.L   #3,D1
000022C2  0281 00000007           2025              ANDI.L  #7,D1
000022C8                          2026              
000022C8  0C01 0000               2027              CMPI.B  #0,D1
000022CC  6700 0092               2028              BEQ     REG_0
000022D0  0C01 0001               2029              CMPI.B  #1,D1
000022D4  6700 0098               2030              BEQ     REG_1
000022D8  0C01 0002               2031              CMPI.B  #2,D1
000022DC  6700 009E               2032              BEQ     REG_2
000022E0  0C01 0003               2033              CMPI.B  #3,D1
000022E4  6700 00A4               2034              BEQ     REG_3
000022E8  0C01 0004               2035              CMPI.B  #4,D1
000022EC  6700 00AA               2036              BEQ     REG_4
000022F0  0C01 0005               2037              CMPI.B  #5,D1
000022F4  6700 00B0               2038              BEQ     REG_5
000022F8  0C01 0006               2039              CMPI.B  #6,D1
000022FC  6700 00B6               2040              BEQ     REG_6
00002300  0C01 0007               2041              CMPI.B  #7,D1
00002304  6700 00BC               2042              BEQ     REG_7
00002308                          2043  
00002308                          2044  *---------------------------------------------------------------------------*
00002308                          2045  * SRC_REGISTER: decode and display source register (bit 2 - 0)
00002308                          2046  *---------------------------------------------------------------------------*           
00002308                          2047  SRC_REGISTER 
00002308                          2048              * clear registers to store temp data
00002308  4280                    2049              CLR.L   D0                      
0000230A  4281                    2050              CLR.L   D1                      
0000230C  207C 00000000           2051              MOVEA.L #0, A0                  
00002312  227C 00000000           2052              MOVEA.L #0, A1                  
00002318                          2053              
00002318  2205                    2054              MOVE.L  D5,D1   * temp store the processing data
0000231A  0281 00000007           2055              ANDI.L  #7,D1   * mask the first 4 bits with 0111
00002320                          2056              
00002320  0C01 0000               2057              CMPI.B  #0,D1
00002324  6700 003A               2058              BEQ     REG_0
00002328  0C01 0001               2059              CMPI.B  #1,D1
0000232C  6700 0040               2060              BEQ     REG_1
00002330  0C01 0002               2061              CMPI.B  #2,D1
00002334  6700 0046               2062              BEQ     REG_2
00002338  0C01 0003               2063              CMPI.B  #3,D1
0000233C  6700 004C               2064              BEQ     REG_3
00002340  0C01 0004               2065              CMPI.B  #4,D1
00002344  6700 0052               2066              BEQ     REG_4
00002348  0C01 0005               2067              CMPI.B  #5,D1
0000234C  6700 0058               2068              BEQ     REG_5
00002350  0C01 0006               2069              CMPI.B  #6,D1
00002354  6700 005E               2070              BEQ     REG_6
00002358  0C01 0007               2071              CMPI.B  #7,D1
0000235C  6700 0064               2072              BEQ     REG_7
00002360                          2073  
00002360                          2074  *---------------------------------------------------------------------------*
00002360                          2075  * REG_0 ~ REG_7: display register 0 to 7
00002360                          2076  *---------------------------------------------------------------------------*
00002360  43F9 00002ED0           2077  REG_0       LEA     DISP_0,A1
00002366  103C 000E               2078              MOVE.B  #14,D0
0000236A  4E4F                    2079              TRAP    #15
0000236C  4E75                    2080              RTS
0000236E                          2081              
0000236E  43F9 00002ED2           2082  REG_1       LEA     DISP_1,A1
00002374  103C 000E               2083              MOVE.B  #14,D0
00002378  4E4F                    2084              TRAP    #15
0000237A  4E75                    2085              RTS
0000237C                          2086              
0000237C                          2087  
0000237C  43F9 00002ED4           2088  REG_2       LEA     DISP_2,A1
00002382  103C 000E               2089              MOVE.B  #14,D0
00002386  4E4F                    2090              TRAP    #15
00002388  4E75                    2091              RTS
0000238A                          2092            
0000238A  43F9 00002ED6           2093  REG_3       LEA     DISP_3,A1
00002390  103C 000E               2094              MOVE.B  #14,D0
00002394  4E4F                    2095              TRAP    #15
00002396  4E75                    2096              RTS
00002398                          2097              
00002398  43F9 00002ED8           2098  REG_4       LEA     DISP_4,A1
0000239E  103C 000E               2099              MOVE.B  #14,D0
000023A2  4E4F                    2100              TRAP    #15
000023A4  4E75                    2101              RTS
000023A6                          2102              
000023A6  43F9 00002EDA           2103  REG_5       LEA     DISP_5,A1
000023AC  103C 000E               2104              MOVE.B  #14,D0
000023B0  4E4F                    2105              TRAP    #15
000023B2  4E75                    2106              RTS
000023B4                          2107              
000023B4  43F9 00002EDC           2108  REG_6       LEA     DISP_6,A1
000023BA  103C 000E               2109              MOVE.B  #14,D0
000023BE  4E4F                    2110              TRAP    #15
000023C0  4E75                    2111              RTS
000023C2                          2112              
000023C2  43F9 00002EDE           2113  REG_7       LEA     DISP_7,A1
000023C8  103C 000E               2114              MOVE.B  #14,D0
000023CC  4E4F                    2115              TRAP    #15
000023CE  4E75                    2116              RTS
000023D0                          2117              
000023D0                          2118  *---------------------------------------------------------------------------*
000023D0                          2119  * REPEAT : Ask user whether they wish to run the program again
000023D0                          2120  *---------------------------------------------------------------------------*           
000023D0  4246                    2121  REPEAT      CLR.W   D6                      * Reset D6 (Loop Count)
000023D2  43F9 000029A9           2122              LEA     REPEATMSG,A1
000023D8  103C 000E               2123              MOVE.B  #14,D0
000023DC  4E4F                    2124              TRAP    #15
000023DE                          2125              
000023DE  43F9 00002B33           2126              LEA     TMPINPUT,A1             * allocate space to temp store user input
000023E4  103C 0002               2127              MOVE.B  #2,D0
000023E8  4E4F                    2128              TRAP    #15
000023EA                          2129  
000023EA  0C01 0001               2130              CMPI.B  #1,D1                   * check for length of user input
000023EE  66E0                    2131              BNE     REPEAT                  * return to the beginning of the function if unequal
000023F0                          2132              
000023F0  0C11 0059               2133              CMPI.B  #$59,(A1)               * compare the input with Y    
000023F4  6700 EC14               2134              BEQ     PROGLP                  * repeat the program
000023F8                          2135              
000023F8  0C11 0079               2136              CMPI.B  #$79,(A1)               * compare the input with y    
000023FC  6700 EC0C               2137              BEQ     PROGLP                  * repeat the program
00002400                          2138              
00002400  0C11 004E               2139              CMPI.B  #$4E,(A1)               * compare the input with N    
00002404  6700 0236               2140              BEQ     TERMINATE               * finish program
00002408                          2141              
00002408  0C11 006E               2142              CMPI.B  #$6E,(A1)               * compare the input with n    
0000240C  6700 022E               2143              BEQ     TERMINATE               * finish program
00002410                          2144              
00002410  60BE                    2145              BRA     REPEAT                  * invalid input/repeat the function
00002412                          2146  
00002412                          2147  *---------------------------------------------------------------------------*
00002412                          2148  * EA DECODING INTERFACE
00002412                          2149  * [A0] - RESERVED FOR USE
00002412                          2150  * [D2] - RESERVED FOR USE
00002412                          2151  * RETURNS - ERROR FLAG IF FAILED TO PUSH SRC EA INTO STACK
00002412                          2152  *---------------------------------------------------------------------------*
00002412                          2153  GET_EA_EA_SRC
00002412                          2154      *PRECONDITION: 16 BIT DECODE DATA MUST BE IN REGISTER [D5]*
00002412                          2155      
00002412                          2156      *DETERMINE ADDRESS MODE OF EA WITH THE MODE CODE 
00002412  2405                    2157      MOVE.L  D5,D2                           * CLEAN COPY TO D2
00002414  E68A                    2158      LSR.L   #3,D2                           * [D2] Temporarily used D2 for shifting bits
00002416  23C2 00002EF6           2159      MOVE.L  D2,VAR_LONG_ADDRESS_MODE_CHECK  * BITS SHIFTED
0000241C  7407                    2160      MOVE.L  #7,D2                           * SETTING UP MASKING FOR BITS (0-2)
0000241E  C5B9 00002EF6           2161      AND.L   D2,VAR_LONG_ADDRESS_MODE_CHECK  * MASKED VARIABLE HOLDING ADDRESS MODE TO COMPARE
00002424                          2162                                              * [COMPARE] MODE WITH POSSIBLE ADDRESS MODES
00002424                          2163      
00002424                          2164      *MUST SET DESTINATION_REGISTER_FORMAT BEFORE CALLING GET_EA_EA_SRC
00002424                          2165      *DESTINATION REGISTER FORMAT STANDARD         *
00002424                          2166      *WHEN BIT = 1(INVALID ADDRESS MODE)           *
00002424                          2167      *WHEN BIT = 0(VALID ADDRESS MODE)             *
00002424                          2168      *BIT LOCATIONS 0-7 INDICATE ADDRESS MODES     *
00002424                          2169      *0 - Dn                                       *
00002424                          2170      *1 - An                                       *
00002424                          2171      *2 - (An)                                     *
00002424                          2172      *3 - (An)+                                    *
00002424                          2173      *4 - -(An)                                    *
00002424                          2174      *5 - (XXX).W                                  *
00002424                          2175      *6 - (XXX).L                                  *
00002424                          2176      *7 - #<data>                                  *
00002424                          2177      ***********************************************
00002424                          2178      
00002424                          2179  CHECK0    
00002424  41F9 00002EE6           2180            LEA     TEMP_REGISTER_FORMAT,A0
0000242A  1439 00002EE5           2181            MOVE.B  SRC_REGISTER_FORMAT, D2                     *COPY FORMAT TO TEMP VARIABLE
00002430  1082                    2182            MOVE.B  D2, (A0)                                     *COPY FORMAT TO TEMP VARIABLE
00002432  0239 0001 00002EE6      2183            AND.B   #$01,TEMP_REGISTER_FORMAT                           * MASKS 00000001 
0000243A  0C39 0001 00002EE6      2184            CMP.B   #$01,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000001) THAN INVALID ADDRESSMODE 
00002442  6700 0068               2185            BEQ     CHECK1                                              * THE REGISTER FORMAT DOES NOT ALLOW "Dn" -> SO MOVE ON
00002446  0C79 0000 00002EF6      2186            CMP     #0,VAR_LONG_ADDRESS_MODE_CHECK                      * (Dn)
0000244E  6600 005C               2187            BNE     CHECK1
00002452                          2188            
00002452                          2189            *PUSH "Dn" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002452  163C 0020               2190            MOVE.B    #' ',D3
00002456  6100 0166               2191            BSR       PUSH_STACK
0000245A  163C 0044               2192            MOVE.B    #'D',D3
0000245E  6100 015E               2193            BSR       PUSH_STACK
00002462                          2194  
00002462                          2195            
00002462                          2196            *FIND REGISTER NUMBER END LOCATION*  
00002462  13F9 00002EE8 00002EEE  2197            MOVE.B  GET_SRC_START_END, VAR_BYTE_END * GET ENDING INDEX
0000246C  0239 000F 00002EEE      2198            AND.B   #$0F,VAR_BYTE_END
00002474                          2199            
00002474                          2200            *GET INDEX OF THE END OF SRC REGISTER NUMBER
00002474  23C5 00002EF2           2201            MOVE.L  D5,VAR_TEMP_CLEANCOPY     *COPY DATA
0000247A  1439 00002EEE           2202            MOVE.B  VAR_BYTE_END,D2          *PUT END LOCATION INTO D2
00002480                          2203            
00002480                          2204            *INTITIALIZE FOR BIT SHIFTING
00002480  41F9 00002EF2           2205            LEA     VAR_TEMP_CLEANCOPY,A0
00002486  2639 00002EF2           2206            MOVE.L  VAR_TEMP_CLEANCOPY,D3
0000248C                          2207  LOOP_SHIFTING
0000248C  B43C 0000               2208            CMP.B   #0,D2                     *D2 - ACTS AS COUNTER TO HOW MANY SHIFTS TAKE PLACE
00002490  6700 0008               2209            BEQ     MASKING_NEXT              *IF SHIFTING FINISHED MOVE ON TO MASKING 
00002494  E24B                    2210            LSR     #1,D3                     *SHIFT VAR_TEMP_CLEANCOPY UNTIL REGISTER IS COMPLETED
00002496  5302                    2211            SUB.B   #1,D2                     *DECREMENT COUNTER
00002498  60F2                    2212            BRA     LOOP_SHIFTING             *CONTINUE SHIFTING
0000249A                          2213  MASKING_NEXT
0000249A  C6BC 00000007           2214            AND.L   #7,D3                     *MASK, ONLY NEED 0-2 BIT INDEXES
000024A0  0603 0030               2215            ADD.B   #$30,D3                   *CONVERT TO CHAR
000024A4  6100 0118               2216            BSR     PUSH_STACK                *PUSH TO STACK
000024A8                          2217            
000024A8  6000 00D4               2218            BRA     SUCCESS                   *RETURN 
000024AC                          2219            
000024AC  13F9 00002EE4 00002EE6  2220  CHECK1    MOVE.B  DEST_REGISTER_FORMAT, TEMP_REGISTER_FORMAT *COPY FORMAT TO TEMP VARIABLE
000024B6  0239 0002 00002EE6      2221            AND.B   #$02,TEMP_REGISTER_FORMAT                           * MASKS 000000010 
000024BE  0C39 0002 00002EE6      2222            CMP.B   #$02,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000010) THAN INVALID ADDRESSMODE 
000024C6  6700 0012               2223            BEQ     CHECK2                                            * THE REGISTER FORMAT DOES NOT ALLOW "An" -> SO MOVE ON
000024CA  0C79 0001 00002EF6      2224            CMP     #1,VAR_LONG_ADDRESS_MODE_CHECK                    *  An
000024D2  6600 0006               2225            BNE     CHECK2
000024D6                          2226                      *PUSH "An" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
000024D6  6000 00A6               2227            BRA     SUCCESS
000024DA                          2228            
000024DA  13F9 00002EE4 00002EE6  2229  CHECK2    MOVE.B  DEST_REGISTER_FORMAT, TEMP_REGISTER_FORMAT *COPY FORMAT TO TEMP VARIABLE
000024E4  0239 0004 00002EE6      2230            AND.B   #$04,TEMP_REGISTER_FORMAT                           * MASKS 00000100
000024EC  0C39 0004 00002EE6      2231            CMP.B   #$04,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00000100) THAN INVALID ADDRESSMODE 
000024F4  6700 0012               2232            BEQ     CHECK3                                            * THE REGISTER FORMAT DOES NOT ALLOW "(An)" -> SO MOVE ON
000024F8  0C79 0002 00002EF6      2233            CMP     #2,VAR_LONG_ADDRESS_MODE_CHECK                    * "(An)"
00002500  6600 0006               2234            BNE     CHECK3
00002504                          2235            *PUSH "(An)" INTO STACK, BUT FIND MAKE SURE TO FIND "n"
00002504  6000 0078               2236            BRA     SUCCESS
00002508                          2237            
00002508  13F9 00002EE4 00002EE6  2238  CHECK3    MOVE.B  DEST_REGISTER_FORMAT, TEMP_REGISTER_FORMAT *COPY FORMAT TO TEMP VARIABLE
00002512  0239 0008 00002EE6      2239            AND.B   #$08,TEMP_REGISTER_FORMAT                           * MASKS 00001000
0000251A  0C39 0008 00002EE6      2240            CMP.B   #$08,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00001000) THAN INVALID ADDRESSMODE 
00002522  6700 0012               2241            BEQ     CHECK4                                            * THE REGISTER FORMAT DOES NOT ALLOW "(An)+" -> SO MOVE ON
00002526                          2242  
00002526  0C79 0003 00002EF6      2243            CMP     #3,VAR_LONG_ADDRESS_MODE_CHECK               * (An)+
0000252E  6600 0006               2244            BNE     CHECK4
00002532                          2245            *EA_EA_GET_SRC INTO D3 
00002532  6000 004A               2246            BRA     SUCCESS
00002536                          2247            
00002536  13F9 00002EE4 00002EE6  2248  CHECK4    MOVE.B  DEST_REGISTER_FORMAT, TEMP_REGISTER_FORMAT *COPY FORMAT TO TEMP VARIABLE
00002540  0239 0010 00002EE6      2249            AND.B   #$10,TEMP_REGISTER_FORMAT                           * MASKS 00010000
00002548  0C39 0005 00002EE6      2250            CMP.B   #5,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT == 00010000) THAN INVALID ADDRESSMODE 
00002550  6700 0012               2251            BEQ     CHECK7                                            * THE REGISTER FORMAT DOES NOT ALLOW "-(An)" -> SO MOVE ON
00002554                          2252            
00002554  0C79 0004 00002EF6      2253            CMP     #4,VAR_LONG_ADDRESS_MODE_CHECK               * -(Dn)
0000255C  6600 0006               2254            BNE     CHECK7
00002560                          2255            *EA_EA_GET_SRC INTO D3 
00002560  6000 001C               2256            BRA     SUCCESS
00002564                          2257            
00002564  0C79 0007 00002EF6      2258  CHECK7    CMP     #7,VAR_LONG_ADDRESS_MODE_CHECK               * (Dn)
0000256C  6600 000C               2259            BNE     FAILED
00002570                          2260            
00002570                          2261            *JUST DISPLAYS ADDRESS MODE 111 FOR TESTING PURPOSE
00002570  7637                    2262            MOVE.L  #'7',D3
00002572  6100 004A               2263            BSR     PUSH_STACK          
00002576                          2264        
00002576                          2265         *   MOVE.B  DEST_REGISTER_FORMAT, TEMP_REGISTER_FORMAT * COPY FORMAT TO TEMP VARIABLE
00002576                          2266         *   AND.B   #$E0,TEMP_REGISTER_FORMAT                           * MASKS 11100000
00002576                          2267         *   CMP.B   #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT >= 11100000) THAN INVALID ADDRESSMODE 
00002576                          2268         *   BEQ     FAILED                                            * THE REGISTER FORMAT DOES NOT ALLOW "-(An)" -> SO MOVE ON
00002576                          2269            
00002576                          2270         *   MOVE.B  DEST_REGISTER_FORMAT, TEMP_REGISTER_FORMAT * COPY FORMAT TO TEMP VARIABLE
00002576                          2271         *   AND.B   #$E0,TEMP_REGISTER_FORMAT                           * MASKS 11100000
00002576                          2272         *   CMP.B   #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT >= 11100000) THAN INVALID ADDRESSMODE 
00002576                          2273          *  BEQ     FAILED                                            * THE REGISTER FORMAT DOES NOT ALLOW "-(An)" -> SO MOVE ON
00002576                          2274            
00002576                          2275            *MOVE.B  DEST_REGISTER_FORMAT, TEMP_REGISTER_FORMAT * COPY FORMAT TO TEMP VARIABLE
00002576                          2276           * AND.B   #$E0,TEMP_REGISTER_FORMAT                           * MASKS 11100000
00002576                          2277          *  CMP.B   #$10,TEMP_REGISTER_FORMAT                           * IF(TEMP_REGISTER_FORMAT >= 11100000) THAN INVALID ADDRESSMODE 
00002576                          2278           * BEQ     FAILED                                            * THE REGISTER FORMAT DOES NOT ALLOW "-(An)" -> SO MOVE ON
00002576                          2279            
00002576                          2280  CHECK_WORD
00002576                          2281  CHECK_LONG
00002576                          2282  CHECK_IMMEDIATE
00002576                          2283            
00002576                          2284            *EA_EA_GET_SRC INTO D3
00002576  6000 0006               2285            BRA     SUCCESS
0000257A                          2286            
0000257A                          2287  FAILED    *SEND ERROR FLAG THAN CLEAN ALL REGISTERS/VARIABLES THAN PRINT OP_DATA
0000257A  7801                    2288            MOVE.L #1,D4
0000257C  4E75                    2289            RTS
0000257E                          2290  SUCCESS 
0000257E  4E75                    2291            RTS
00002580                          2292                                 
00002580                          2293      
00002580                          2294              
00002580                          2295  GET_EA_EA_DEST          
00002580                          2296  *---------------------------------------------------------------------------*
00002580                          2297  * STACK/QUEUE INTERFACE
00002580                          2298  *---------------------------------------------------------------------------*
00002580                          2299  PRINT_STACK
00002580  0C39 0000 00002EE0      2300            CMP.B     #0,COUNTER
00002588  6700 000E               2301            BEQ       PRINT_STACK_RETURN             *CHECK IF LOOP IS FINISHED
0000258C                          2302            
0000258C                          2303  PRINT_STACK_HELPER
0000258C  6100 0038               2304            BSR      POP_STACK          *PRINTS ADDRESS
00002590  103C 0006               2305            MOVE.B   #6,D0              *Display single character in D1.B. 
00002594  4E4F                    2306            TRAP     #15             *ACTIVATES PRINT
00002596                          2307  
00002596  60E8                    2308            BRA       PRINT_STACK
00002598                          2309  PRINT_STACK_RETURN
00002598  4E75                    2310            RTS
0000259A                          2311            
0000259A                          2312            
0000259A                          2313  PRINT_QUEUE
0000259A  0C39 0000 00002EE0      2314            CMP.B     #0,COUNTER
000025A2  6700 0018               2315            BEQ       PRINT_QUEUE_RETURN             *CHECK IF LOOP IS FINISHED
000025A6                          2316            
000025A6                          2317  PRINT_QUEUE_HELPER
000025A6  33F9 00002EE0 00002EE2  2318            MOVE.W   COUNTER,QUEUE_COUNTER
000025B0  6100 0022               2319            BSR      POP_FRONT          *PRINTS ADDRESS
000025B4  103C 0006               2320            MOVE.B   #6,D0              *Display single character in D1.B. 
000025B8  4E4F                    2321            TRAP     #15             *ACTIVATES PRINT
000025BA                          2322  
000025BA  60DE                    2323            BRA       PRINT_QUEUE
000025BC                          2324  PRINT_QUEUE_RETURN
000025BC  4E75                    2325            RTS
000025BE                          2326            
000025BE                          2327  *PUSHES.W CONTENTS OF [D3] INTO STACK          
000025BE                          2328  PUSH_STACK
000025BE  1503                    2329              MOVE.B  D3,-(A2)
000025C0  6100 0058               2330              BSR     INCREMENT
000025C4  4E75                    2331              RTS
000025C6                          2332  *POPS.W TOP OF STACK INTO [D1], SO ITS READY TO PRINT WITH TRAP 15
000025C6                          2333  *         MOVE.W   (A2)+,D1           *PRINTS ADDRESS
000025C6                          2334  *         MOVE.B   #15,D0             *PRINTS ACCORDING TO D2 BASE VALUE
000025C6                          2335  *         MOVE.B   #16,D2             *PRINTS BASED 16 NUMBER
000025C6                          2336  *         TRAP        #15             *ACTIVATES PRINT
000025C6                          2337  POP_STACK
000025C6  BECA                    2338              CMPA.W   A2,SP            *CHECKS IF THERE IS ANYTHING TO PUSH
000025C8  6700 0008               2339              BEQ     POP_RETURN        *IF NOTHING TO PUSH THAN JUST RETURN
000025CC  121A                    2340              MOVE.B  (A2)+,D1 
000025CE  6100 0052               2341              BSR     DECREMENT
000025D2                          2342  POP_RETURN
000025D2  4E75                    2343              RTS 
000025D4                          2344        
000025D4                          2345  *USE [A4] AS SECOND POINTER IN SHIFTING      
000025D4  0C39 0000 00002EE2      2346  POP_FRONT   CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
000025DC  6700 0030               2347              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
000025E0                          2348              
000025E0                          2349              
000025E0                          2350              *POSITION THE POINTERS A[4] RIGHT BEHIND A[2] WHICH IS RIGHT BEHIND STACK
000025E0  347C 7000               2351              MOVEA.W #STACK,A2   *START A2 AT STACK
000025E4  0622 0000               2352              ADD.B   #0,-(A2)    *SHIFT A2 TO THE BOTTOM OF THE STACK
000025E8  384A                    2353              MOVEA.W A2,A4     *START A4 RIGHT ABOVE A2
000025EA  0624 0000               2354              ADD.B   #0,-(A4)  *leash one more higher in stack (a4)
000025EE  1212                    2355              MOVE.B  (A2),D1     *POP CONTENTS INTO D1
000025F0                          2356  POP_SHIFT_LOOP
000025F0  0C39 0000 00002EE2      2357              CMP.B   #0,QUEUE_COUNTER            *CHECKS IF
000025F8  6700 0014               2358              BEQ     POP_FRONT_RETURN            *END LOOP ONCE COUNTER REACHES ZERO
000025FC  1494                    2359              MOVE.B  (A4),(A2)   *SHIFT CONTENT DOWN THE STACK
000025FE  0624 0000               2360              ADD.B   #0,-(A4)
00002602  0622 0000               2361              ADD.B   #0,-(A2) *SHIFT POINTERS DOWN THE STACK
00002606  5339 00002EE2           2362              SUB.B   #1,QUEUE_COUNTER *DECREMENT INTERNAL QUEUE COUNTER
0000260C                          2363              
0000260C  60E2                    2364              BRA     POP_SHIFT_LOOP
0000260E                          2365                          
0000260E                          2366  POP_FRONT_RETURN 
0000260E                          2367              *RESET A2 BACK TO SP
0000260E  347C 7000               2368              MOVEA.W #STACK,A2    
00002612  5339 00002EE0           2369              SUB.B   #1,COUNTER *DECREMENT STACK COUNTER       
00002618  4E75                    2370              RTS   
0000261A                          2371  
0000261A                          2372  INCREMENT
0000261A  5239 00002EE0           2373              ADD.B   #1, COUNTER
00002620  4E75                    2374              RTS           
00002622                          2375  DECREMENT
00002622  5339 00002EE0           2376              SUB.B   #1, COUNTER
00002628  4E75                    2377              RTS           
0000262A                          2378  CLEAR_STACK
0000262A  0C39 0000 00002EE0      2379              CMP.B     #0,COUNTER
00002632  6700 0006               2380              BEQ       CLEAR_RETURN
00002636  618E                    2381              BSR       POP_STACK
00002638  60F0                    2382              BRA       CLEAR_STACK
0000263A                          2383   
0000263A                          2384  CLEAR_RETURN
0000263A  4E75                    2385              RTS    
0000263C                          2386  *---------------------------------------------------------------------------*
0000263C                          2387  * TERMINATE
0000263C                          2388  *---------------------------------------------------------------------------*
0000263C                          2389  TERMINATE   
0000263C  43F9 000029EC           2390              LEA     FINMSG,A1
00002642  103C 000E               2391              MOVE.B  #14,D0
00002646  4E4F                    2392              TRAP    #15
00002648                          2393  
00002648  103C 0009               2394              MOVE.B  #9,D0
0000264C  4E4F                    2395              TRAP    #15
0000264E                          2396  
0000264E                          2397  *---------------------------------------------------------------------------*
0000264E                          2398  * Data storage                                                 
0000264E                          2399  *---------------------------------------------------------------------------*  
0000264E                          2400  WELCOME
0000264E= 20 20 20 20 20 20 ...   2401              DC.B '                         ___     ___ ___        ___   ___ ___                 ',CR,LF
0000269E= 3D 3D 3D 3D 3D 20 ...   2402              DC.B '=====           \  /\  /|___|   |   |   ||\  /||___    | |   |           =====',CR,LF
000026EE= 3D 3D 3D 3D 3D 20 ...   2403              DC.B '=====            \/  \/ |___|___|___|___|| \/ ||___    | |___|           =====',CR,LF
0000273E                          2404      
0000273E= 20 20 20 20 20 20 ...   2405              DC.B '                        ___ ___ ___  ___      ___                             ',CR,LF
0000278E= 20 20 20 20 20 20 ...   2406              DC.B '                       |     | |___)|    |   |___                             ',CR,LF 
000027DE= 20 20 20 20 20 20 ...   2407              DC.B '                       |___ _|_|\___|___ |___|___                             ',CR,LF
0000282E                          2408      
0000282E= 20 20 20 20 20 20 ...   2409              DC.B '           __  ___ ___   _   ___  ___  ___        ___      ___ ___            ',CR,LF
0000287E= 3D 3D 3D 3D 3D 20 ...   2410              DC.B '=====     |  \  | |___  /_\ |___ |___ |___ |\  /||___||   |___|___)      =====',CR,LF 
000028CE= 3D 3D 3D 3D 3D 20 ...   2411              DC.B '=====     |__/ _|_ ___|/   \ ___| ___||___ | \/ ||___||___|___|\___      =====',CR,LF,CR,LF,CR,LF,0
00002923                          2412  
00002923                          2413  PROMPT_START
00002923= 50 6C 65 61 73 65 ...   2414              DC.B    'Please enter a hexadecimal starting address.',CR,LF,0
00002952                          2415      
00002952                          2416  PROMPT_END
00002952= 50 6C 65 61 73 65 ...   2417              DC.B    'Please enter a hexadecimal ending address.',CR,LF,0
0000297F= 0D 0A 48 69 74 20 ...   2418  DISP_NEXT   DC.B    CR,LF,'Hit Enter to print the next 30 lines.',CR,LF,0            
000029A9= 57 6F 75 6C 64 20 ...   2419  REPEATMSG   DC.B    'Would you like to run again? Press Y to continue or N to finish.',CR,LF,0
000029EC= 54 68 61 6E 6B 20 ...   2420  FINMSG      DC.B    'Thank you for using Circle Disassembler.',CR,LF,0
00002A17= 45 72 72 6F 72 3A ...   2421  ERRMSG_1    DC.B    'Error: Invalid Input Address',CR,LF,0
00002A36= 45 72 72 6F 72 3A ...   2422  ERRMSG_3    DC.B    'Error: Invalid Input Address (Odd)',CR,LF,0
00002A5B= 45 72 72 6F 72 3A ...   2423  ERRMSG_5    DC.B    'Error: Invalid Input Address (start > end)',CR,LF,0
00002A88                          2424  
00002A88                          2425  VR_S_ADDR   DS.B    80                      * allocate storage space for the starting address
00002AD8                          2426  VR_E_ADDR   DS.B    80                      * allocate storage space for the ending address
00002B28                          2427  S_ADDR_HX   DS.L    1                       * allocate storage space for the starting address in hex
00002B2C                          2428  E_ADDR_HX   DS.L    1                       * allocate storage space for the ending address in hex
00002B30= 0D 0A 00                2429  ENDLINE_M   DC.B    CR,LF,0
00002B33                          2430  TMPINPUT    DS.B    80                      * temp store user input
00002B83                          2431  TMPOUTPUT   DS.B    80                      * temp store prog output
00002BD3= 20 20 20 4F 52 49 ...   2432  DISP_ORI_B  DC.B    '   ORI.B',0
00002BDC= 20 20 20 4F 52 49 ...   2433  DISP_ORI_W  DC.B    '   ORI.W',0
00002BE5= 20 20 20 4F 52 49 ...   2434  DISP_ORI_L  DC.B    '   ORI.L',0
00002BEE= 20 20 20 45 4F 52 ...   2435  DISP_EORI_B  DC.B    '   EORI.B',0
00002BF8= 20 20 20 45 4F 52 ...   2436  DISP_EORI_W  DC.B    '   EORI.W',0
00002C02= 20 20 20 45 4F 52 ...   2437  DISP_EORI_L  DC.B    '   EORI.L',0
00002C0C= 20 20 20 42 54 53 ...   2438  DISP_BTST   DC.B    '   BTST',0
00002C14= 20 20 20 43 4D 50 ...   2439  DISP_CMPI_B  DC.B    '   CMPI.B',0
00002C1E= 20 20 20 43 4D 50 ...   2440  DISP_CMPI_W  DC.B    '   CMPI.W',0
00002C28= 20 20 20 43 4D 50 ...   2441  DISP_CMPI_L  DC.B    '   CMPI.L',0
00002C32= 20 20 20 44 41 54 ...   2442  DISP_DATA   DC.B    '   DATA',0
00002C3A= 20 20 20 4D 4F 56 ...   2443  DISP_MOVE_B DC.B    '   MOVE.B',0
00002C44= 20 20 20 4D 4F 56 ...   2444  DISP_MOVE_W DC.B    '   MOVE.W',0
00002C4E= 20 20 20 4D 4F 56 ...   2445  DISP_MOVE_L DC.B    '   MOVE.L',0
00002C58= 20 20 20 52 54 53 00    2446  DISP_RTS    DC.B    '   RTS',0
00002C5F= 20 20 20 4A 53 52 00    2447  DISP_JSR    DC.B    '   JSR',0
00002C66= 20 20 20 4E 45 47 ...   2448  DISP_NEG_B    DC.B    '   NEG.B',0
00002C6F= 20 20 20 4E 45 47 ...   2449  DISP_NEG_W    DC.B    '   NEG.W',0
00002C78= 20 20 20 4E 45 47 ...   2450  DISP_NEG_L    DC.B    '   NEG.L',0
00002C81= 20 20 20 4E 4F 54 ...   2451  DISP_NOT_B  DC.B    '   NOT.B',0
00002C8A= 20 20 20 4E 4F 54 ...   2452  DISP_NOT_W  DC.B    '   NOT.W',0
00002C93= 20 20 20 4E 4F 54 ...   2453  DISP_NOT_L  DC.B    '   NOT.L',0
00002C9C= 20 20 20 4C 45 41 00    2454  DISP_LEA    DC.B    '   LEA',0
00002CA3= 20 20 20 4D 4F 56 ...   2455  DISP_MOVEM_W    DC.B    '   MOVEM.W',0
00002CAE= 20 20 20 4D 4F 56 ...   2456  DISP_MOVEM_L    DC.B    '   MOVEM.L',0
00002CB9= 20 20 20 41 44 44 ...   2457  DISP_ADDQ_B DC.B    '   ADDQ.B',0
00002CC3= 20 20 20 41 44 44 ...   2458  DISP_ADDQ_W DC.B    '   ADDQ.W',0
00002CCD= 20 20 20 41 44 44 ...   2459  DISP_ADDQ_L DC.B    '   ADDQ.L',0
00002CD7= 20 20 20 44 49 56 ...   2460  DISP_DIVS   DC.B    '   DIVS',0
00002CDF= 20 20 20 53 55 42 ...   2461  DISP_SUB_B  DC.B    '   SUB.B',0
00002CE8= 20 20 20 53 55 42 ...   2462  DISP_SUB_W  DC.B    '   SUB.W',0
00002CF1= 20 20 20 53 55 42 ...   2463  DISP_SUB_L  DC.B    '   SUB.L',0
00002CFA= 20 20 20 53 55 42 ...   2464  DISP_SUBI_B  DC.B    '   SUBI.B',0
00002D04= 20 20 20 53 55 42 ...   2465  DISP_SUBI_W  DC.B    '   SUBI.W',0
00002D0E= 20 20 20 53 55 42 ...   2466  DISP_SUBI_L  DC.B    '   SUBI.L',0
00002D18= 20 20 20 53 55 42 ...   2467  DISP_SUBA_W  DC.B    '   SUBA.W',0
00002D22= 20 20 20 53 55 42 ...   2468  DISP_SUBA_L  DC.B    '   SUBA.L',0
00002D2C= 20 20 20 45 4F 52 ...   2469  DISP_EOR_B  DC.B    '   EOR.B',0
00002D35= 20 20 20 45 4F 52 ...   2470  DISP_EOR_W  DC.B    '   EOR.W',0
00002D3E= 20 20 20 45 4F 52 ...   2471  DISP_EOR_L  DC.B    '   EOR.L',0
00002D47= 20 20 20 43 4D 50 ...   2472  DISP_CMP_B  DC.B    '   CMP.B',0
00002D50= 20 20 20 43 4D 50 ...   2473  DISP_CMP_W  DC.B    '   CMP.W',0
00002D59= 20 20 20 43 4D 50 ...   2474  DISP_CMP_L  DC.B    '   CMP.L',0
00002D62= 20 20 20 43 4D 50 ...   2475  DISP_CMPA_W  DC.B    '   CMPA.W',0
00002D6C= 20 20 20 43 4D 50 ...   2476  DISP_CMPA_L  DC.B    '   CMPA.L',0
00002D76= 20 20 20 4D 55 4C ...   2477  DISP_MULS_W DC.B    '   MULS.W',0
00002D80= 20 20 20 41 4E 44 ...   2478  DISP_AND_B  DC.B    '   AND.B',0
00002D89= 20 20 20 41 4E 44 ...   2479  DISP_AND_W  DC.B    '   AND.W',0
00002D92= 20 20 20 41 4E 44 ...   2480  DISP_AND_L  DC.B    '   AND.L',0
00002D9B= 20 20 20 41 44 44 ...   2481  DISP_ADD_B  DC.B    '   ADD.B',0
00002DA4= 20 20 20 41 44 44 ...   2482  DISP_ADD_W  DC.B    '   ADD.W',0
00002DAD= 20 20 20 41 44 44 ...   2483  DISP_ADD_L  DC.B    '   ADD.L',0
00002DB6= 20 20 20 41 44 44 ...   2484  DISP_ADDA_W DC.B    '   ADDA.W',0
00002DC0= 20 20 20 41 44 44 ...   2485  DISP_ADDA_L DC.B    '   ADDA.L',0
00002DCA= 20 20 20 4C 53 52 ...   2486  DISP_LSR_B  DC.B    '   LSR.B',0
00002DD3= 20 20 20 4C 53 4C ...   2487  DISP_LSL_B  DC.B    '   LSL.B',0
00002DDC= 20 20 20 4C 53 52 ...   2488  DISP_LSR_W  DC.B    '   LSR.W',0
00002DE5= 20 20 20 4C 53 4C ...   2489  DISP_LSL_W  DC.B    '   LSL.W',0
00002DEE= 20 20 20 4C 53 52 ...   2490  DISP_LSR_L  DC.B    '   LSR.L',0
00002DF7= 20 20 20 4C 53 4C ...   2491  DISP_LSL_L  DC.B    '   LSL.L',0
00002E00= 20 20 20 41 53 52 ...   2492  DISP_ASR_B  DC.B    '   ASR.B',0
00002E09= 20 20 20 41 53 4C ...   2493  DISP_ASL_B  DC.B    '   ASL.B',0
00002E12= 20 20 20 41 53 52 ...   2494  DISP_ASR_W  DC.B    '   ASR.W',0
00002E1B= 20 20 20 41 53 4C ...   2495  DISP_ASL_W  DC.B    '   ASL.W',0
00002E24= 20 20 20 41 53 52 ...   2496  DISP_ASR_L  DC.B    '   ASR.L',0
00002E2D= 20 20 20 41 53 4C ...   2497  DISP_ASL_L  DC.B    '   ASL.L',0
00002E36= 20 20 20 52 4F 52 ...   2498  DISP_ROR_B  DC.B    '   ROR.B',0
00002E3F= 20 20 20 52 4F 4C ...   2499  DISP_ROL_B  DC.B    '   ROL.B',0
00002E48= 20 20 20 52 4F 52 ...   2500  DISP_ROR_W  DC.B    '   ROR.W',0
00002E51= 20 20 20 52 4F 4C ...   2501  DISP_ROL_W  DC.B    '   ROL.W',0
00002E5A= 20 20 20 52 4F 52 ...   2502  DISP_ROR_L  DC.B    '   ROR.L',0
00002E63= 20 20 20 52 4F 4C ...   2503  DISP_ROL_L  DC.B    '   ROL.L',0
00002E6C= 20 20 20 42 52 41 00    2504  DISP_BRA    DC.B    '   BRA',0
00002E73= 20 20 20 42 4C 54 00    2505  DISP_BLT    DC.B    '   BLT',0
00002E7A= 20 20 20 42 45 51 00    2506  DISP_BEQ    DC.B    '   BEQ',0
00002E81= 20 20 20 42 4E 45 00    2507  DISP_BNE    DC.B    '   BNE',0
00002E88= 20 20 20 42 48 49 00    2508  DISP_BHI    DC.B    '   BHI',0
00002E8F= 20 20 20 4D 4F 56 ...   2509  DISP_MOVEA_W    DC.B    '   MOVEA.W',0
00002E9A= 20 20 20 4D 4F 56 ...   2510  DISP_MOVEA_L    DC.B    '   MOVEA.L',0
00002EA5                          2511  
00002EA5= 20 20 20 24 00          2512  DISP_HEX     DC.B    '   $',0
00002EAA= 20 20 20 44 00          2513  DISP_D  DC.B    '   D',0
00002EAF= 20 20 20 41 00          2514  DISP_A  DC.B    '   A',0
00002EB4= 20 20 20 28 00          2515  DISP_OP  DC.B    '   (',0
00002EB9= 29 00                   2516  DISP_CP  DC.B   ')',0
00002EBB= 20 20 20 28 41 00       2517  DISP_AOP  DC.B    '   (A',0
00002EC1                          2518  
00002EC1= 20 20 20 2D 28 41 00    2519  DISP_PRE    DC.B    '   -(A',0
00002EC8= 29 2B 00                2520  DISP_POST   DC.B    ')+',0
00002ECB= 20 20 20 23 00          2521  DISP_LB DC.B    '   #',0
00002ED0= 30 00                   2522  DISP_0  DC.B    '0',0
00002ED2= 31 00                   2523  DISP_1  DC.B    '1',0
00002ED4= 32 00                   2524  DISP_2  DC.B    '2',0
00002ED6= 33 00                   2525  DISP_3  DC.B    '3',0
00002ED8= 34 00                   2526  DISP_4  DC.B    '4',0
00002EDA= 35 00                   2527  DISP_5  DC.B    '5',0
00002EDC= 36 00                   2528  DISP_6  DC.B    '6',0
00002EDE= 37 00                   2529  DISP_7  DC.B    '7',0
00002EE0                          2530  
00002EE0                          2531  *STACK INTERFACE VARIABLES*
00002EE0                          2532  COUNTER         DS.W    1
00002EE2                          2533  QUEUE_COUNTER   DS.W    1
00002EE4                          2534  
00002EE4                          2535  *EA DECODING INTERFACE VARIABLES* 
00002EE4                          2536  DEST_REGISTER_FORMAT    DS.B    1           *all address modes acceptable standard
00002EE5                          2537  SRC_REGISTER_FORMAT  DS.B    1           *all address modes acceptable standard
00002EE6                          2538  TEMP_REGISTER_FORMAT    DS.B    1           *place holder for masking other register formats
00002EE7                          2539  
00002EE7                          2540  *FORMAT OF WHERE TO GET THE EA BY THE ENDING BIT AND STARTING BIT
00002EE7                          2541  * WORD + WORD = LONG
00002EE7                          2542  * (STARTING BIT) + (ENDING BIT) = 2 HEX CHAR
00002EE7                          2543  * A              + F            = AF         <= EXAMPLE
00002EE7                          2544  *(10TH BIT)      + (15TH BIT)   = CHECK BITS 15 THROUGH 10
00002EE7                          2545  GET_DN_START_END    DS.B    1
00002EE8                          2546  GET_SRC_START_END    DS.B    1
00002EE9                          2547  
00002EE9                          2548  *STORES THE START + END BITS HERE (FROM ABOVE)
00002EEA                          2549  VAR_BYTE_START      DS.L    1
00002EEE                          2550  VAR_BYTE_END        DS.L    1
00002EF2                          2551  VAR_TEMP_CLEANCOPY  DS.L    1
00002EF6                          2552  
00002EF6                          2553  VAR_LONG_ADDRESS_MODE_CHECK        DS.L    1       *holds the bits 0-2 in long form
00002EFA                          2554  
00002EFA                          2555  *MORE FOR STACK USAGE*
00002EFA= 2C 00                   2556  DISP_COMMA  DC.B    ',',0
00002EFC= 20 20 20 00             2557  DISP_INDENT  DC.B    '   ',0
00002F00                          2558  
00002F00                          2559  
00002F00                          2560  
00002F00                          2561  *---------------------------------------------------------------------------*
00002F00                          2562  * Ends program
00002F00                          2563  *---------------------------------------------------------------------------*
00002F00                          2564              END    START                    * last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASC2HXLP            115C
ASCII2HEX           1156
ASC_ERR             11B8
ASC_LOW             119A
ASC_NUM             11AA
ASC_SFT             11B2
ASC_UPP             11A2
CHECK0              2424
CHECK1              24AC
CHECK2              24DA
CHECK3              2508
CHECK4              2536
CHECK7              2564
CHECK_IMMEDIATE     2576
CHECK_LONG          2576
CHECK_WORD          2576
CLEAR_RETURN        263A
CLEAR_STACK         262A
COUNTER             2EE0
CR                  D
DECREMENT           2622
DEST_MODE           1FDC
DEST_REGISTER       22AC
DEST_REGISTER_FORMAT  2EE4
DISPLAY_30_LINES    12A8
DISP_0              2ED0
DISP_1              2ED2
DISP_2              2ED4
DISP_3              2ED6
DISP_4              2ED8
DISP_5              2EDA
DISP_6              2EDC
DISP_7              2EDE
DISP_A              2EAF
DISP_ADDA_L         2DC0
DISP_ADDA_W         2DB6
DISP_ADDQ_B         2CB9
DISP_ADDQ_L         2CCD
DISP_ADDQ_W         2CC3
DISP_ADD_B          2D9B
DISP_ADD_L          2DAD
DISP_ADD_W          2DA4
DISP_AND_B          2D80
DISP_AND_L          2D92
DISP_AND_W          2D89
DISP_AOP            2EBB
DISP_ASL_B          2E09
DISP_ASL_L          2E2D
DISP_ASL_W          2E1B
DISP_ASR_B          2E00
DISP_ASR_L          2E24
DISP_ASR_W          2E12
DISP_BEQ            2E7A
DISP_BHI            2E88
DISP_BLT            2E73
DISP_BNE            2E81
DISP_BRA            2E6C
DISP_BTST           2C0C
DISP_CMPA_L         2D6C
DISP_CMPA_W         2D62
DISP_CMPI_B         2C14
DISP_CMPI_L         2C28
DISP_CMPI_W         2C1E
DISP_CMP_B          2D47
DISP_CMP_L          2D59
DISP_CMP_W          2D50
DISP_COMMA          2EFA
DISP_CP             2EB9
DISP_D              2EAA
DISP_DATA           2C32
DISP_DIVS           2CD7
DISP_EORI_B         2BEE
DISP_EORI_L         2C02
DISP_EORI_W         2BF8
DISP_EOR_B          2D2C
DISP_EOR_L          2D3E
DISP_EOR_W          2D35
DISP_HEX            2EA5
DISP_INDENT         2EFC
DISP_JSR            2C5F
DISP_LB             2ECB
DISP_LEA            2C9C
DISP_LSL_B          2DD3
DISP_LSL_L          2DF7
DISP_LSL_W          2DE5
DISP_LSR_B          2DCA
DISP_LSR_L          2DEE
DISP_LSR_W          2DDC
DISP_MOVEA_L        2E9A
DISP_MOVEA_W        2E8F
DISP_MOVEM_L        2CAE
DISP_MOVEM_W        2CA3
DISP_MOVE_B         2C3A
DISP_MOVE_L         2C4E
DISP_MOVE_W         2C44
DISP_MULS_W         2D76
DISP_NEG_B          2C66
DISP_NEG_L          2C78
DISP_NEG_W          2C6F
DISP_NEXT           297F
DISP_NOT_B          2C81
DISP_NOT_L          2C93
DISP_NOT_W          2C8A
DISP_OP             2EB4
DISP_ORI_B          2BD3
DISP_ORI_L          2BE5
DISP_ORI_W          2BDC
DISP_POST           2EC8
DISP_PRE            2EC1
DISP_ROL_B          2E3F
DISP_ROL_L          2E63
DISP_ROL_W          2E51
DISP_ROR_B          2E36
DISP_ROR_L          2E5A
DISP_ROR_W          2E48
DISP_RTS            2C58
DISP_SUBA_L         2D22
DISP_SUBA_W         2D18
DISP_SUBI_B         2CFA
DISP_SUBI_L         2D0E
DISP_SUBI_W         2D04
DISP_SUB_B          2CDF
DISP_SUB_L          2CF1
DISP_SUB_W          2CE8
D_MODE000           207E
D_MODE010           20C6
D_MODE011           2126
D_MODE100           2146
D_MODE111           2198
EA_ARITH            1F76
EA_DATA             1486
EA_GEN              1FC2
EA_MOVEA            1F9C
EA_NOSRC            1F62
ENDLINE_M           2B30
END_ADDR            10A2
ERRMSG_1            2A17
ERRMSG_3            2A36
ERRMSG_5            2A5B
ERROR_1             1106
ERROR_2             1116
ERROR_3             1126
ERROR_4             1136
ERROR_5             1146
E_ADDR_HX           2B2C
FAILED              257A
FINMSG              29EC
GET_DN_START_END    2EE7
GET_EA_EA_DEST      2580
GET_EA_EA_SRC       2412
GET_SRC_START_END   2EE8
HEX2ASCII           11BE
HEX_CHAR            11EC
HEX_CONT            11F0
HEX_LOOP            11D2
IMMD_B              224C
IMMD_L              228C
IMMD_W              226C
IMMEDIATE           221C
INCREMENT           261A
INTRO               1028
IS_ODD              1200
IS_ODD_ERR          1216
JMPTABLE            12D4
LF                  A
LONGMODE            21F0
LOOP_SHIFTING       248C
MAIN                121C
MASKING_NEXT        249A
MODE000             206A
MODE001             2092
MODE010             20A6
MODE011             20E6
MODE100             2106
MODE111             2166
NEXTLINES           12B6
OP0000              1334
OP0001              155A
OP0010              15C4
OP0011              1626
OP0100              1686
OP0101              1820
OP0110              189C
OP0111              192A
OP1000              192E
OP1001              196A
OP1010              1A42
OP1011              1A46
OP1100              1B42
OP1101              1BDE
OP1110              1CB0
OP1111              1F5E
OP_ADDA_L           1C98
OP_ADDA_W           1C80
OP_ADDQ             1840
OP_ADDQ_B           1866
OP_ADDQ_L           188A
OP_ADDQ_W           1878
OP_ADD_B            1C38
OP_ADD_L            1C68
OP_ADD_W            1C50
OP_AND_B            1BA8
OP_AND_L            1BCC
OP_AND_W            1BBA
OP_ASL              1E50
OP_ASL_B            1E74
OP_ASL_L            1E86
OP_ASL_W            1E98
OP_ASR              1DF6
OP_ASR_B            1E1A
OP_ASR_L            1E2C
OP_ASR_W            1E3E
OP_ASX              1D12
OP_BEQ              1900
OP_BHI              18E4
OP_BLT              191C
OP_BNE              18F2
OP_BRA              190E
OP_BTST             13A8
OP_CMPA_L           1AB2
OP_CMPA_W           1AA0
OP_CMPI             14AE
OP_CMPI_B           14CE
OP_CMPI_L           14F2
OP_CMPI_W           14E0
OP_CMP_B            1AC4
OP_CMP_L            1AF4
OP_CMP_W            1ADC
OP_DATA             1462
OP_DIVS             1956
OP_EORI             13B6
OP_EORI_B           13D6
OP_EORI_L           13FA
OP_EORI_W           13E8
OP_EOR_B            1B0C
OP_EOR_L            1B30
OP_EOR_W            1B1E
OP_JSR              17FE
OP_LEA              172C
OP_LSL              1D9C
OP_LSL_B            1DC0
OP_LSL_L            1DD2
OP_LSL_W            1DE4
OP_LSR              1D42
OP_LSR_B            1D66
OP_LSR_L            1D78
OP_LSR_W            1D8A
OP_LSX              1CFA
OP_MOVEA_L          1608
OP_MOVEA_W          1668
OP_MOVEM_L          171A
OP_MOVEM_W          1708
OP_MOVE_B           1560
OP_MOVE_L           15EA
OP_MOVE_W           164A
OP_MULS             1B94
OP_NEG              1740
OP_NEG_B            1760
OP_NEG_L            1790
OP_NEG_W            1778
OP_NOT              17A8
OP_NOT_B            17C8
OP_NOT_L            17EC
OP_NOT_W            17DA
OP_ORI              1504
OP_ORI_B            1524
OP_ORI_L            1548
OP_ORI_W            1536
OP_ROL              1F04
OP_ROL_B            1F28
OP_ROL_L            1F3A
OP_ROL_W            1F4C
OP_ROR              1EAA
OP_ROR_B            1ECE
OP_ROR_L            1EE0
OP_ROR_W            1EF2
OP_ROX              1D2A
OP_RTS              1812
OP_SUBA_L           1A30
OP_SUBA_W           1A1E
OP_SUBI             140C
OP_SUBI_B           142C
OP_SUBI_L           1450
OP_SUBI_W           143E
OP_SUB_B            19D6
OP_SUB_L            1A06
OP_SUB_W            19EE
OUTPUT_PROCESSED_DATA  12A0
POP_FRONT           25D4
POP_FRONT_RETURN    260E
POP_RETURN          25D2
POP_SHIFT_LOOP      25F0
POP_STACK           25C6
PRINT_QUEUE         259A
PRINT_QUEUE_HELPER  25A6
PRINT_QUEUE_RETURN  25BC
PRINT_STACK         2580
PRINT_STACK_HELPER  258C
PRINT_STACK_RETURN  2598
PROGLP              100A
PROMPT_END          2952
PROMPT_START        2923
PUSH_STACK          25BE
QUEUE_COUNTER       2EE2
REG_0               2360
REG_1               236E
REG_2               237C
REG_3               238A
REG_4               2398
REG_5               23A6
REG_6               23B4
REG_7               23C2
REPEAT              23D0
REPEATMSG           29A9
RETURN              11BC
SRC_MODE            2020
SRC_REGISTER        2308
SRC_REGISTER_FORMAT  2EE5
STACK               7000
START               1004
START_ADDR          1050
SUCCESS             257E
S_ADDR_HX           2B28
TEMP_REGISTER_FORMAT  2EE6
TERMINATE           263C
TESTING             1036
TMPINPUT            2B33
TMPOUTPUT           2B83
VAR_BYTE_END        2EEE
VAR_BYTE_START      2EEA
VAR_LONG_ADDRESS_MODE_CHECK  2EF6
VAR_TEMP_CLEANCOPY  2EF2
VR_E_ADDR           2AD8
VR_S_ADDR           2A88
WELCOME             264E
WORDMODE            21C4
